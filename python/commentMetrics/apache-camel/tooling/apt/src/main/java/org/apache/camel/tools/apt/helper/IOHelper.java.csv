commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;26;/**  * Loads the entire stream into memory as a String and returns it.  * <p/>  * <b>Notice:</b> This implementation appends a <tt>\n</tt> as line  * terminator at the of the text.  * <p/>  * Warning, don't use for crazy big streams :)  */ ;/**  * Loads the entire stream into memory as a String and returns it.  * <p/>  * <b>Notice:</b> This implementation appends a <tt>\n</tt> as line  * terminator at the of the text.  * <p/>  * Warning, don't use for crazy big streams :)  */ public static String loadText(InputStream in, boolean skipCommentOrEmptyLines) throws IOException {     StringBuilder builder = new StringBuilder().     InputStreamReader isr = new InputStreamReader(in).     try {         BufferedReader reader = new BufferedReader(isr).         while (true) {             String line = reader.readLine().             if (line != null) {                 boolean empty = Strings.isNullOrEmpty(line).                 boolean comment = line.trim().startsWith("#").                 if (skipCommentOrEmptyLines && (empty || comment)) {                     continue.                 }                 builder.append(line).                 builder.append("\n").             } else {                 break.             }         }         return builder.toString().     } finally {         close(isr, in).     } }
true;public,static;1;11;/**  * Closes the given resources if they are available.  *  * @param closeables the objects to close  */ ;/**  * Closes the given resources if they are available.  *  * @param closeables the objects to close  */ public static void close(Closeable... closeables) {     for (Closeable closeable : closeables) {         try {             if (closeable != null) {                 closeable.close().             }         } catch (IOException e) {         // ignore         }     } }
