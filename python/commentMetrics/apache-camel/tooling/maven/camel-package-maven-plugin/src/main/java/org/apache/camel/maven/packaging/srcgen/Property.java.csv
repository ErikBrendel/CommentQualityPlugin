commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public GenericType getType() {     return type. }
false;public;1;3;;public void setType(GenericType type) {     this.type = type. }
false;public;0;3;;public Field getField() {     return field. }
false;public;0;3;;public Method getAccessor() {     return accessor. }
false;public;0;3;;public Method getMutator() {     return mutator. }
false;public;0;3;;public void removeAccessor() {     accessor = null. }
false;public;0;3;;public void removeMutator() {     mutator = null. }
false;public;0;3;;public void removeField() {     field = null. }
false;public;0;3;;public boolean isMutable() {     return mutator != null. }
false;public;0;3;;public boolean hasField() {     return field != null. }
false;public;1;5;;public boolean hasAnnotation(Class<? extends java.lang.annotation.Annotation> clazz) {     return field != null && field.hasAnnotation(clazz) || accessor != null && accessor.hasAnnotation(clazz) || mutator != null && mutator.hasAnnotation(clazz). }
false;public;1;11;;public Annotation getAnnotation(Class<? extends java.lang.annotation.Annotation> clazz) {     if (field != null && field.hasAnnotation(clazz)) {         return field.getAnnotation(clazz).     } else if (accessor != null && accessor.hasAnnotation(clazz)) {         return accessor.getAnnotation(clazz).     } else if (mutator != null && mutator.hasAnnotation(clazz)) {         return mutator.getAnnotation(clazz).     } else {         return null.     } }
