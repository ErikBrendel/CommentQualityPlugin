commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public void execute() throws MojoExecutionException, MojoFailureException {     try {         executeStarter(project.getBasedir()).     } catch (Exception e) {         throw new MojoFailureException("Error processing spring-configuration-metadata.json", e).     } }
false;private;1;125;;private void executeStarter(File starter) throws Exception {     File jsonFile = new File(buildDir, "classes/META-INF/spring-configuration-metadata.json").     // only if there is components we should update the documentation files     if (jsonFile.exists()) {         getLog().debug("Processing Spring Boot auto-configuration file: " + jsonFile).         Object js = Jsoner.deserialize(new FileReader(jsonFile)).         if (js != null) {             String name = starter.getName().             if (!isValidStarter(name)) {                 return.             }             File compDir = getComponentsDir(name).             File[] docFiles.             File docFolder.             String componentName.             if ("camel-spring-boot".equals(name)) {                 // special for camel-spring-boot where we also want to auto-generate the options in the adoc file                 componentName = "spring-boot".                 docFolder = new File(compDir, "/src/main/docs/").                 docFiles = docFolder.listFiles(new ComponentDocFilter(componentName)).             } else if ("camel-univocity-parsers-starter".equals(name)) {                 // special for univocity-parsers                 componentName = "univocity".                 docFolder = new File(compDir, "camel-univocity-parsers/src/main/docs/").                 docFiles = docFolder.listFiles(new ComponentDocFilter(componentName)).             } else {                 // skip camel-  and -starter in the end                 componentName = name.substring(6, name.length() - 8).                 getLog().debug("Camel component: " + componentName).                 docFolder = new File(compDir, "camel-" + componentName + "/src/main/docs/").                 docFiles = docFolder.listFiles(new ComponentDocFilter(componentName)).                 // maybe its one of those component that has subfolders with -api and -component                 if (docFiles == null || docFiles.length == 0) {                     docFolder = new File(compDir, "camel-" + componentName + "/camel-" + componentName + "-component/src/main/docs/").                     docFiles = docFolder.listFiles(new ComponentDocFilter(componentName)).                 }             }             if (docFiles != null && docFiles.length > 0) {                 List<File> files = Arrays.asList(docFiles).                 // find out if the JAR has a Camel component, dataformat, or language                 boolean hasComponentDataFormatOrLanguage = files.stream().anyMatch((f) -> f.getName().endsWith("-component.adoc") || f.getName().endsWith("-dataformat.adoc") || f.getName().endsWith("-language.adoc")).                 // if so then skip the root adoc file as its just a introduction to the others                 if (hasComponentDataFormatOrLanguage) {                     files = Arrays.stream(docFiles).filter((f) -> !f.getName().equals(componentName + ".adoc")).collect(Collectors.toList()).                 }                 if (files.size() == 1) {                     List<SpringBootAutoConfigureOptionModel> models = parseSpringBootAutoConfigureModels(jsonFile, null).                     // special for other kind of JARs that is not a regular Camel component,dataformat,language                     boolean onlyOther = files.size() == 1 && !hasComponentDataFormatOrLanguage.                     if (models.isEmpty() && onlyOther) {                         // there are no spring-boot auto configuration for this other kind of JAR so lets just ignore this                         return.                     }                     File docFile = files.get(0).                     // check for missing description on options                     boolean noDescription = false.                     for (SpringBootAutoConfigureOptionModel o : models) {                         if (StringHelper.isEmpty(o.getDescription())) {                             noDescription = true.                             getLog().warn("Option " + o.getName() + " has no description").                         }                     }                     if (noDescription && isFailOnNoDescription()) {                         throw new MojoExecutionException("Failed build due failOnMissingDescription=true").                     }                     String changed = templateAutoConfigurationOptions(models, componentName).                     boolean updated = updateAutoConfigureOptions(docFile, changed).                     if (updated) {                         getLog().info("Updated doc file: " + docFile).                     } else {                         getLog().debug("No changes to doc file: " + docFile).                     }                 } else if (files.size() > 1) {                     // when we have 2 or more files we need to filter the model options accordingly                     for (File docFile : files) {                         String docName = docFile.getName().                         int pos = docName.lastIndexOf("-").                         // spring-boot use lower cased keys                         String prefix = pos > 0 ? docName.substring(0, pos).toLowerCase(Locale.US) : null.                         List<SpringBootAutoConfigureOptionModel> models = parseSpringBootAutoConfigureModels(jsonFile, prefix).                         // check for missing description on options                         boolean noDescription = false.                         for (SpringBootAutoConfigureOptionModel o : models) {                             if (StringHelper.isEmpty(o.getDescription())) {                                 noDescription = true.                                 getLog().warn("Option " + o.getName() + " has no description").                             }                         }                         if (noDescription && isFailOnNoDescription()) {                             throw new MojoExecutionException("Failed build due failOnMissingDescription=true").                         }                         String changed = templateAutoConfigurationOptions(models, componentName).                         boolean updated = updateAutoConfigureOptions(docFile, changed).                         if (updated) {                             getLog().info("Updated doc file: " + docFile).                         } else {                             getLog().debug("No changes to doc file: " + docFile).                         }                     }                 }             } else {                 getLog().warn("No component docs found in folder: " + docFolder).                 if (isFailFast()) {                     throw new MojoExecutionException("Failed build due failFast=true").                 }             }         }     } }
false;private;1;8;;private File getComponentsDir(String name) {     if ("camel-spring-boot".equals(name)) {         // special for camel-spring-boot         return project.getBasedir().     } else {         return componentsDir.     } }
false;public;1;5;;@Override public boolean accept(File pathname) {     String name = pathname.getName().     return name.startsWith(componentName) && name.endsWith(".adoc"). }
false;private,static;1;32;;private static String asComponentName(String componentName) {     if ("fastjson".equals(componentName)) {         return "json-fastjson".     } else if ("gson".equals(componentName)) {         return "json-gson".     } else if ("jackson".equals(componentName)) {         return "json-jackson".     } else if ("johnzon".equals(componentName)) {         return "json-johnzon".     } else if ("snakeyaml".equals(componentName)) {         return "yaml-snakeyaml".     } else if ("cassandraql".equals(componentName)) {         return "cql".     } else if ("josql".equals(componentName)) {         return "sql".     } else if ("juel".equals(componentName)) {         return "el".     } else if ("jsch".equals(componentName)) {         return "scp".     } else if ("printer".equals(componentName)) {         return "lpr".     } else if ("saxon".equals(componentName)) {         return "xquery".     } else if ("script".equals(componentName)) {         return "javaScript".     } else if ("stringtemplate".equals(componentName)) {         return "string-template".     } else if ("tagsoup".equals(componentName)) {         return "tidyMarkup".     }     return componentName. }
false;private,static;1;7;;private static boolean isValidStarter(String name) {     // skip these     if ("camel-core-starter".equals(name)) {         return false.     }     return true. }
false;private;2;30;;private List<SpringBootAutoConfigureOptionModel> parseSpringBootAutoConfigureModels(File file, String include) throws IOException, DeserializationException {     getLog().debug("Parsing Spring Boot AutoConfigureModel using include: " + include).     List<SpringBootAutoConfigureOptionModel> answer = new ArrayList<>().     JsonObject obj = (JsonObject) Jsoner.deserialize(new FileReader(file)).     JsonArray arr = obj.getCollection("properties").     if (arr != null && !arr.isEmpty()) {         arr.forEach((e) -> {             JsonObject row = (JsonObject) e.             String name = row.getString("name").             String javaType = row.getString("type").             String desc = row.getStringOrDefault("description", "").             String defaultValue = row.getStringOrDefault("defaultValue", "").             // skip this special option and also if not matching the filter             boolean skip = name.endsWith("customizer.enabled") || include != null && !name.contains("." + include + ".").             if (!skip) {                 SpringBootAutoConfigureOptionModel model = new SpringBootAutoConfigureOptionModel().                 model.setName(name).                 model.setJavaType(javaType).                 model.setDefaultValue(defaultValue).                 model.setDescription(desc).                 answer.add(model).             }         }).     }     return answer. }
false;private;2;36;;private boolean updateAutoConfigureOptions(File file, String changed) throws MojoExecutionException {     if (!file.exists()) {         return false.     }     try {         String text = loadText(new FileInputStream(file)).         String existing = StringHelper.between(text, "// spring-boot-auto-configure options: START", "// spring-boot-auto-configure options: END").         if (existing != null) {             // remove leading line breaks etc             existing = existing.trim().             changed = changed.trim().             if (existing.equals(changed)) {                 return false.             } else {                 String before = StringHelper.before(text, "// spring-boot-auto-configure options: START").                 String after = StringHelper.after(text, "// spring-boot-auto-configure options: END").                 text = before + "// spring-boot-auto-configure options: START\n" + changed + "\n// spring-boot-auto-configure options: END" + after.                 writeText(file, text).                 return true.             }         } else {             getLog().warn("Cannot find markers in file " + file).             getLog().warn("Add the following markers").             getLog().warn("\t// spring-boot-auto-configure options: START").             getLog().warn("\t// spring-boot-auto-configure options: END").             if (isFailFast()) {                 throw new MojoExecutionException("Failed build due failFast=true").             }             return false.         }     } catch (Exception e) {         throw new MojoExecutionException("Error reading file " + file + " Reason: " + e, e).     } }
false;private;2;15;;private String templateAutoConfigurationOptions(List<SpringBootAutoConfigureOptionModel> options, String componentName) throws MojoExecutionException {     SpringBootModel model = new SpringBootModel().     model.setGroupId(project.getGroupId()).     model.setArtifactId("camel-" + componentName + "-starter").     model.setVersion(project.getVersion()).     model.setOptions(options).     try {         String template = loadText(UpdateSpringBootAutoConfigurationReadmeMojo.class.getClassLoader().getResourceAsStream("spring-boot-auto-configure-options.mvel")).         String out = (String) TemplateRuntime.eval(template, model).         return out.     } catch (Exception e) {         throw new MojoExecutionException("Error processing mvel template. Reason: " + e, e).     } }
false;private;0;3;;private boolean isFailFast() {     return failFast != null && failFast. }
false;private;0;3;;private boolean isFailOnNoDescription() {     return failOnMissingDescription != null && failOnMissingDescription. }
