commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Class<? extends java.lang.annotation.Annotation> getType() {     return type. }
false;public;1;4;;public Annotation setType(Class<? extends java.lang.annotation.Annotation> type) {     this.type = type.     return this. }
false;public;2;4;;public Annotation setStringValue(String name, String value) {     values.put(name, quote(value)).     return this. }
false;public;2;4;;public Annotation setLiteralValue(String name, String value) {     values.put(name, value).     return this. }
false;public;1;3;;public Annotation setLiteralValue(String value) {     return setLiteralValue("value", value). }
false;public;2;10;;public Annotation setStringArrayValue(String name, String[] values) {     if (values.length == 1) {         return setStringValue(name, values[0]).     } else {         String value = Stream.of(values).map(Annotation::quote).collect(Collectors.joining(", ", "{", "}")).         return setLiteralValue(value).     } }
false;public;1;4;;public String getStringValue(String name) {     String v = values.get(name).     return v != null ? unquote(v) : null. }
false;private,static;1;7;;private static String unquote(String value) {     if (value.startsWith("\"") && value.endsWith("\"")) {         return value.substring(1, value.length() - 1).     } else {         return value.     } }
false;public,static;1;24;;public static String quote(String value) {     StringBuilder sb = null.     for (int i = 0. i < value.length(). i++) {         char c = value.charAt(i).         if (c == '"' || c == '\\') {             if (sb == null) {                 sb = new StringBuilder().                 sb.append("\"").                 sb.append("\\").                 sb.append(c).             }         } else {             if (sb != null) {                 sb.append(c).             }         }     }     if (sb == null) {         return "\"" + value + "\"".     } else {         sb.append("\"").         return sb.toString().     } }
