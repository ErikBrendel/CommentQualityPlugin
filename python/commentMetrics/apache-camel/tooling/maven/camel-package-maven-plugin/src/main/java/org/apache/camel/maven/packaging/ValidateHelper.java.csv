commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;87;/**  * Validates the component json file  *  * @param file        the json file  * @param errorDetail details to add errors  */ ;/**  * Validates the component json file  *  * @param file        the json file  * @param errorDetail details to add errors  */ public static void validate(File file, ErrorDetail errorDetail) {     try {         String json = loadText(new FileInputStream(file)).         boolean isComponent = json.contains("\"kind\": \"component\"").         boolean isDataFormat = json.contains("\"kind\": \"dataformat\"").         boolean isLanguage = json.contains("\"kind\": \"language\"").         // only check these kind         if (!isComponent && !isDataFormat && !isLanguage) {             return.         }         if (isComponent) {             errorDetail.setKind("component").         } else if (isDataFormat) {             errorDetail.setKind("dataformat").         } else if (isLanguage) {             errorDetail.setKind("language").         }         List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema(errorDetail.getKind(), json, false).         boolean label = false.         boolean description = false.         boolean syntax = false.         for (Map<String, String> row : rows) {             String value = row.get("label").             if (!StringHelper.isEmpty(value)) {                 label = true.             }             value = row.get("description").             if (!StringHelper.isEmpty(value)) {                 description = true.             }             value = row.get("syntax").             if (!StringHelper.isEmpty(value)) {                 syntax = true.             }         }         if (!label) {             errorDetail.setMissingLabel(true).         }         if (!description) {             errorDetail.setMissingDescription(true).         }         // syntax check is only for the components         if (!syntax && isComponent) {             errorDetail.setMissingSyntax(true).         }         if (isComponent) {             // check all the component properties if they have description             rows = JSonSchemaHelper.parseJsonSchema("componentProperties", json, true).             for (Map<String, String> row : rows) {                 String key = row.get("name").                 String doc = row.get("description").                 if (doc == null || doc.isEmpty()) {                     errorDetail.addMissingComponentDoc(key).                 }             }         }         // check all the endpoint properties if they have description         rows = JSonSchemaHelper.parseJsonSchema("properties", json, true).         boolean path = false.         for (Map<String, String> row : rows) {             String key = row.get("name").             String doc = row.get("description").             if (doc == null || doc.isEmpty()) {                 errorDetail.addMissingEndpointDoc(key).             }             String kind = row.get("kind").             if ("path".equals(kind)) {                 path = true.             }         }         if (isComponent && !path) {             // only components can have missing @UriPath             errorDetail.setMissingUriPath(true).         }     } catch (IOException e) {     // ignore     } }
true;public,static;1;7;/**  * Returns the name of the component, data format or language from the given json file  */ ;/**  * Returns the name of the component, data format or language from the given json file  */ public static String asName(File file) {     String name = file.getName().     if (name.endsWith(".json")) {         return name.substring(0, name.length() - 5).     }     return name. }
