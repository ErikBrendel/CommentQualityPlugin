commented;modifiers;parameterAmount;loc;comment;code
true;public;0;46;/**  * Execute goal.  *  * @throws org.apache.maven.plugin.MojoExecutionException execution of the main class or one of the  *                                                        threads it generated failed.  * @throws org.apache.maven.plugin.MojoFailureException   something bad happened...  */ ;/**  * Execute goal.  *  * @throws org.apache.maven.plugin.MojoExecutionException execution of the main class or one of the  *                                                        threads it generated failed.  * @throws org.apache.maven.plugin.MojoFailureException   something bad happened...  */ public void execute() throws MojoExecutionException, MojoFailureException {     if (!validate) {         getLog().info("Validation disabled").     } else {         final Set<File> jsonFiles = new TreeSet<>().         PackageHelper.findJsonFiles(outDir, jsonFiles, new CamelComponentsFileFilter()).         boolean failed = false.         for (File file : jsonFiles) {             final String name = asName(file).             final ErrorDetail detail = new ErrorDetail().             getLog().debug("Validating file " + file).             validate(file, detail).             if (detail.hasErrors()) {                 failed = true.                 getLog().warn("The " + detail.getKind() + ": " + name + " has validation errors").                 if (detail.isMissingDescription()) {                     getLog().warn("Missing description on: " + detail.getKind()).                 }                 if (detail.isMissingLabel()) {                     getLog().warn("Missing label on: " + detail.getKind()).                 }                 if (detail.isMissingSyntax()) {                     getLog().warn("Missing syntax on endpoint").                 }                 if (detail.isMissingUriPath()) {                     getLog().warn("Missing @UriPath on endpoint").                 }                 if (!detail.getMissingComponentDocumentation().isEmpty()) {                     getLog().warn("Missing component documentation for the following options:" + indentCollection("\n\t", detail.getMissingComponentDocumentation())).                 }                 if (!detail.getMissingEndpointDocumentation().isEmpty()) {                     getLog().warn("Missing endpoint documentation for the following options:" + indentCollection("\n\t", detail.getMissingEndpointDocumentation())).                 }             }         }         if (failed) {             throw new MojoFailureException("Validating failed, see errors above!").         } else {             getLog().info("Validation complete").         }     } }
false;public;1;18;;@Override public boolean accept(File pathname) {     if (pathname.isDirectory() && pathname.getName().equals("model")) {         // do not check the camel-core model packages as there is no components there         return false.     }     if (pathname.isFile() && pathname.getName().endsWith(".json")) {         // must be a components json file         try {             String json = loadText(new FileInputStream(pathname)).             return json != null && json.contains("\"kind\": \"component\"").         } catch (IOException e) {         // ignore         }     }     return pathname.isDirectory() || (pathname.isFile() && pathname.getName().equals("component.properties")). }
