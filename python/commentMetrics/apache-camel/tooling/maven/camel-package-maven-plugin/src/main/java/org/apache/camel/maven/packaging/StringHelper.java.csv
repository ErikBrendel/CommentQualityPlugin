# id;timestamp;commentText;codeText;commentWords;codeWords
StringHelper -> private static String wrapWords(String line, String newLine, int watermark, boolean wrapLongWords);1489753014;To wrap a big line by words.__@param line the big line_@param newLine the new line to use when breaking into a new line_@param watermark a watermark to denote the size to cut after_@param wrapLongWords whether to wrap long words;private static String wrapWords(String line, String newLine, int watermark, boolean wrapLongWords) {_        if (line == null) {_            return null__        } else {_            if (newLine == null) {_                newLine = System.lineSeparator()__            }__            if (watermark < 1) {_                watermark = 1__            }__            int inputLineLength = line.length()__            int offset = 0__            StringBuilder sb = new StringBuilder(inputLineLength + 32)___            while (inputLineLength - offset > watermark) {_                if (line.charAt(offset) == 32) {_                    ++offset__                } else {_                    int spaceToWrapAt = line.lastIndexOf(32, watermark + offset)__                    if (spaceToWrapAt >= offset) {_                        sb.append(line.substring(offset, spaceToWrapAt))__                        sb.append(newLine)__                        offset = spaceToWrapAt + 1__                    } else if (wrapLongWords) {_                        sb.append(line.substring(offset, watermark + offset))__                        sb.append(newLine)__                        offset += watermark__                    } else {_                        spaceToWrapAt = line.indexOf(32, watermark + offset)__                        if (spaceToWrapAt >= 0) {_                            sb.append(line.substring(offset, spaceToWrapAt))__                            sb.append(newLine)__                            offset = spaceToWrapAt + 1__                        } else {_                            sb.append(line.substring(offset))__                            offset = inputLineLength__                        }_                    }_                }_            }__            sb.append(line.substring(offset))__            return sb.toString()__        }_    };to,wrap,a,big,line,by,words,param,line,the,big,line,param,new,line,the,new,line,to,use,when,breaking,into,a,new,line,param,watermark,a,watermark,to,denote,the,size,to,cut,after,param,wrap,long,words,whether,to,wrap,long,words;private,static,string,wrap,words,string,line,string,new,line,int,watermark,boolean,wrap,long,words,if,line,null,return,null,else,if,new,line,null,new,line,system,line,separator,if,watermark,1,watermark,1,int,input,line,length,line,length,int,offset,0,string,builder,sb,new,string,builder,input,line,length,32,while,input,line,length,offset,watermark,if,line,char,at,offset,32,offset,else,int,space,to,wrap,at,line,last,index,of,32,watermark,offset,if,space,to,wrap,at,offset,sb,append,line,substring,offset,space,to,wrap,at,sb,append,new,line,offset,space,to,wrap,at,1,else,if,wrap,long,words,sb,append,line,substring,offset,watermark,offset,sb,append,new,line,offset,watermark,else,space,to,wrap,at,line,index,of,32,watermark,offset,if,space,to,wrap,at,0,sb,append,line,substring,offset,space,to,wrap,at,sb,append,new,line,offset,space,to,wrap,at,1,else,sb,append,line,substring,offset,offset,input,line,length,sb,append,line,substring,offset,return,sb,to,string
StringHelper -> private static String wrapWords(String line, String newLine, int watermark, boolean wrapLongWords);1489754538;To wrap a big line by words.__@param line the big line_@param newLine the new line to use when breaking into a new line_@param watermark a watermark to denote the size to cut after_@param wrapLongWords whether to wrap long words;private static String wrapWords(String line, String newLine, int watermark, boolean wrapLongWords) {_        if (line == null) {_            return null__        } else {_            if (newLine == null) {_                newLine = System.lineSeparator()__            }__            if (watermark < 1) {_                watermark = 1__            }__            int inputLineLength = line.length()__            int offset = 0__            StringBuilder sb = new StringBuilder(inputLineLength + 32)___            while (inputLineLength - offset > watermark) {_                if (line.charAt(offset) == 32) {_                    ++offset__                } else {_                    int spaceToWrapAt = line.lastIndexOf(32, watermark + offset)__                    if (spaceToWrapAt >= offset) {_                        sb.append(line.substring(offset, spaceToWrapAt))__                        sb.append(newLine)__                        offset = spaceToWrapAt + 1__                    } else if (wrapLongWords) {_                        sb.append(line.substring(offset, watermark + offset))__                        sb.append(newLine)__                        offset += watermark__                    } else {_                        spaceToWrapAt = line.indexOf(32, watermark + offset)__                        if (spaceToWrapAt >= 0) {_                            sb.append(line.substring(offset, spaceToWrapAt))__                            sb.append(newLine)__                            offset = spaceToWrapAt + 1__                        } else {_                            sb.append(line.substring(offset))__                            offset = inputLineLength__                        }_                    }_                }_            }__            sb.append(line.substring(offset))__            return sb.toString()__        }_    };to,wrap,a,big,line,by,words,param,line,the,big,line,param,new,line,the,new,line,to,use,when,breaking,into,a,new,line,param,watermark,a,watermark,to,denote,the,size,to,cut,after,param,wrap,long,words,whether,to,wrap,long,words;private,static,string,wrap,words,string,line,string,new,line,int,watermark,boolean,wrap,long,words,if,line,null,return,null,else,if,new,line,null,new,line,system,line,separator,if,watermark,1,watermark,1,int,input,line,length,line,length,int,offset,0,string,builder,sb,new,string,builder,input,line,length,32,while,input,line,length,offset,watermark,if,line,char,at,offset,32,offset,else,int,space,to,wrap,at,line,last,index,of,32,watermark,offset,if,space,to,wrap,at,offset,sb,append,line,substring,offset,space,to,wrap,at,sb,append,new,line,offset,space,to,wrap,at,1,else,if,wrap,long,words,sb,append,line,substring,offset,watermark,offset,sb,append,new,line,offset,watermark,else,space,to,wrap,at,line,index,of,32,watermark,offset,if,space,to,wrap,at,0,sb,append,line,substring,offset,space,to,wrap,at,sb,append,new,line,offset,space,to,wrap,at,1,else,sb,append,line,substring,offset,offset,input,line,length,sb,append,line,substring,offset,return,sb,to,string
StringHelper -> private static String wrapWords(String line, String newLine, int watermark, boolean wrapLongWords);1539891124;To wrap a big line by words.__@param line the big line_@param newLine the new line to use when breaking into a new line_@param watermark a watermark to denote the size to cut after_@param wrapLongWords whether to wrap long words;private static String wrapWords(String line, String newLine, int watermark, boolean wrapLongWords) {_        if (line == null) {_            return null__        } else {_            if (newLine == null) {_                newLine = System.lineSeparator()__            }__            if (watermark < 1) {_                watermark = 1__            }__            int inputLineLength = line.length()__            int offset = 0__            StringBuilder sb = new StringBuilder(inputLineLength + 32)___            while (inputLineLength - offset > watermark) {_                if (line.charAt(offset) == 32) {_                    ++offset__                } else {_                    int spaceToWrapAt = line.lastIndexOf(32, watermark + offset)__                    if (spaceToWrapAt >= offset) {_                        sb.append(line.substring(offset, spaceToWrapAt))__                        sb.append(newLine)__                        offset = spaceToWrapAt + 1__                    } else if (wrapLongWords) {_                        sb.append(line.substring(offset, watermark + offset))__                        sb.append(newLine)__                        offset += watermark__                    } else {_                        spaceToWrapAt = line.indexOf(32, watermark + offset)__                        if (spaceToWrapAt >= 0) {_                            sb.append(line.substring(offset, spaceToWrapAt))__                            sb.append(newLine)__                            offset = spaceToWrapAt + 1__                        } else {_                            sb.append(line.substring(offset))__                            offset = inputLineLength__                        }_                    }_                }_            }__            sb.append(line.substring(offset))__            return sb.toString()__        }_    };to,wrap,a,big,line,by,words,param,line,the,big,line,param,new,line,the,new,line,to,use,when,breaking,into,a,new,line,param,watermark,a,watermark,to,denote,the,size,to,cut,after,param,wrap,long,words,whether,to,wrap,long,words;private,static,string,wrap,words,string,line,string,new,line,int,watermark,boolean,wrap,long,words,if,line,null,return,null,else,if,new,line,null,new,line,system,line,separator,if,watermark,1,watermark,1,int,input,line,length,line,length,int,offset,0,string,builder,sb,new,string,builder,input,line,length,32,while,input,line,length,offset,watermark,if,line,char,at,offset,32,offset,else,int,space,to,wrap,at,line,last,index,of,32,watermark,offset,if,space,to,wrap,at,offset,sb,append,line,substring,offset,space,to,wrap,at,sb,append,new,line,offset,space,to,wrap,at,1,else,if,wrap,long,words,sb,append,line,substring,offset,watermark,offset,sb,append,new,line,offset,watermark,else,space,to,wrap,at,line,index,of,32,watermark,offset,if,space,to,wrap,at,0,sb,append,line,substring,offset,space,to,wrap,at,sb,append,new,line,offset,space,to,wrap,at,1,else,sb,append,line,substring,offset,offset,input,line,length,sb,append,line,substring,offset,return,sb,to,string
StringHelper -> public static String camelDashToTitle(String value);1486150288;Converts the value to use title style instead of dash cased;public static String camelDashToTitle(String value) {_        StringBuilder sb = new StringBuilder(value.length())__        boolean dash = false___        for (char c : value.toCharArray()) {_            if ('-' == c) {_                dash = true__                continue__            }__            if (dash) {_                sb.append(' ')__                sb.append(Character.toUpperCase(c))__            } else {_                _                if (sb.length() == 0) {_                    sb.append(Character.toUpperCase(c))__                } else {_                    sb.append(c)__                }_            }_            dash = false__        }_        return sb.toString()__    };converts,the,value,to,use,title,style,instead,of,dash,cased;public,static,string,camel,dash,to,title,string,value,string,builder,sb,new,string,builder,value,length,boolean,dash,false,for,char,c,value,to,char,array,if,c,dash,true,continue,if,dash,sb,append,sb,append,character,to,upper,case,c,else,if,sb,length,0,sb,append,character,to,upper,case,c,else,sb,append,c,dash,false,return,sb,to,string
StringHelper -> public static String camelDashToTitle(String value);1486813189;Converts the value to use title style instead of dash cased;public static String camelDashToTitle(String value) {_        StringBuilder sb = new StringBuilder(value.length())__        boolean dash = false___        for (char c : value.toCharArray()) {_            if ('-' == c) {_                dash = true__                continue__            }__            if (dash) {_                sb.append(' ')__                sb.append(Character.toUpperCase(c))__            } else {_                _                if (sb.length() == 0) {_                    sb.append(Character.toUpperCase(c))__                } else {_                    sb.append(c)__                }_            }_            dash = false__        }_        return sb.toString()__    };converts,the,value,to,use,title,style,instead,of,dash,cased;public,static,string,camel,dash,to,title,string,value,string,builder,sb,new,string,builder,value,length,boolean,dash,false,for,char,c,value,to,char,array,if,c,dash,true,continue,if,dash,sb,append,sb,append,character,to,upper,case,c,else,if,sb,length,0,sb,append,character,to,upper,case,c,else,sb,append,c,dash,false,return,sb,to,string
StringHelper -> public static String camelDashToTitle(String value);1489753014;Converts the value to use title style instead of dash cased;public static String camelDashToTitle(String value) {_        StringBuilder sb = new StringBuilder(value.length())__        boolean dash = false___        for (char c : value.toCharArray()) {_            if ('-' == c) {_                dash = true__                continue__            }__            if (dash) {_                sb.append(' ')__                sb.append(Character.toUpperCase(c))__            } else {_                _                if (sb.length() == 0) {_                    sb.append(Character.toUpperCase(c))__                } else {_                    sb.append(c)__                }_            }_            dash = false__        }_        return sb.toString()__    };converts,the,value,to,use,title,style,instead,of,dash,cased;public,static,string,camel,dash,to,title,string,value,string,builder,sb,new,string,builder,value,length,boolean,dash,false,for,char,c,value,to,char,array,if,c,dash,true,continue,if,dash,sb,append,sb,append,character,to,upper,case,c,else,if,sb,length,0,sb,append,character,to,upper,case,c,else,sb,append,c,dash,false,return,sb,to,string
StringHelper -> public static String camelDashToTitle(String value);1489754538;Converts the value to use title style instead of dash cased;public static String camelDashToTitle(String value) {_        StringBuilder sb = new StringBuilder(value.length())__        boolean dash = false___        for (char c : value.toCharArray()) {_            if ('-' == c) {_                dash = true__                continue__            }__            if (dash) {_                sb.append(' ')__                sb.append(Character.toUpperCase(c))__            } else {_                _                if (sb.length() == 0) {_                    sb.append(Character.toUpperCase(c))__                } else {_                    sb.append(c)__                }_            }_            dash = false__        }_        return sb.toString()__    };converts,the,value,to,use,title,style,instead,of,dash,cased;public,static,string,camel,dash,to,title,string,value,string,builder,sb,new,string,builder,value,length,boolean,dash,false,for,char,c,value,to,char,array,if,c,dash,true,continue,if,dash,sb,append,sb,append,character,to,upper,case,c,else,if,sb,length,0,sb,append,character,to,upper,case,c,else,sb,append,c,dash,false,return,sb,to,string
StringHelper -> public static String camelDashToTitle(String value);1539891124;Converts the value to use title style instead of dash cased;public static String camelDashToTitle(String value) {_        StringBuilder sb = new StringBuilder(value.length())__        boolean dash = false___        for (char c : value.toCharArray()) {_            if ('-' == c) {_                dash = true__                continue__            }__            if (dash) {_                sb.append(' ')__                sb.append(Character.toUpperCase(c))__            } else {_                _                if (sb.length() == 0) {_                    sb.append(Character.toUpperCase(c))__                } else {_                    sb.append(c)__                }_            }_            dash = false__        }_        return sb.toString()__    };converts,the,value,to,use,title,style,instead,of,dash,cased;public,static,string,camel,dash,to,title,string,value,string,builder,sb,new,string,builder,value,length,boolean,dash,false,for,char,c,value,to,char,array,if,c,dash,true,continue,if,dash,sb,append,sb,append,character,to,upper,case,c,else,if,sb,length,0,sb,append,character,to,upper,case,c,else,sb,append,c,dash,false,return,sb,to,string
StringHelper -> public static String wrapCamelCaseWords(String option, int watermark, String newLine);1489753014;To wrap long camel cased texts by words.__@param option  the option which is camel cased._@param watermark a watermark to denote the size to cut after_@param newLine the new line to use when breaking into a new line;public static String wrapCamelCaseWords(String option, int watermark, String newLine) {_        String text = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_HYPHEN, option)__        text = text.replace('-', ' ')__        text = wrapWords(text, "\n", watermark, false)__        text = text.replace(' ', '-')__        text = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, text)__        text = text.replaceAll("\\n", newLine)__        return text__    };to,wrap,long,camel,cased,texts,by,words,param,option,the,option,which,is,camel,cased,param,watermark,a,watermark,to,denote,the,size,to,cut,after,param,new,line,the,new,line,to,use,when,breaking,into,a,new,line;public,static,string,wrap,camel,case,words,string,option,int,watermark,string,new,line,string,text,case,format,to,case,format,option,text,text,replace,text,wrap,words,text,n,watermark,false,text,text,replace,text,case,format,to,case,format,text,text,text,replace,all,n,new,line,return,text
StringHelper -> public static String wrapCamelCaseWords(String option, int watermark, String newLine);1489754538;To wrap long camel cased texts by words.__@param option  the option which is camel cased._@param watermark a watermark to denote the size to cut after_@param newLine the new line to use when breaking into a new line;public static String wrapCamelCaseWords(String option, int watermark, String newLine) {_        String text = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_HYPHEN, option)__        text = text.replace('-', ' ')__        text = wrapWords(text, "\n", watermark, false)__        text = text.replace(' ', '-')__        text = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, text)___        _        String[] lines = text.split("\n")__        StringBuilder sb = new StringBuilder()__        for (int i = 0_ i < lines.length_ i++) {_            String line = lines[i]__            line = Character.toUpperCase(line.charAt(0)) + line.substring(1)__            sb.append(line)__            if (i < lines.length - 1) {_                sb.append(newLine)__            }_        }_        return sb.toString()__    };to,wrap,long,camel,cased,texts,by,words,param,option,the,option,which,is,camel,cased,param,watermark,a,watermark,to,denote,the,size,to,cut,after,param,new,line,the,new,line,to,use,when,breaking,into,a,new,line;public,static,string,wrap,camel,case,words,string,option,int,watermark,string,new,line,string,text,case,format,to,case,format,option,text,text,replace,text,wrap,words,text,n,watermark,false,text,text,replace,text,case,format,to,case,format,text,string,lines,text,split,n,string,builder,sb,new,string,builder,for,int,i,0,i,lines,length,i,string,line,lines,i,line,character,to,upper,case,line,char,at,0,line,substring,1,sb,append,line,if,i,lines,length,1,sb,append,new,line,return,sb,to,string
StringHelper -> public static String wrapCamelCaseWords(String option, int watermark, String newLine);1539891124;To wrap long camel cased texts by words.__@param option  the option which is camel cased._@param watermark a watermark to denote the size to cut after_@param newLine the new line to use when breaking into a new line;public static String wrapCamelCaseWords(String option, int watermark, String newLine) {_        String text = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_HYPHEN, option)__        text = text.replace('-', ' ')__        text = wrapWords(text, "\n", watermark, false)__        text = text.replace(' ', '-')__        text = CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL, text)___        _        String[] lines = text.split("\n")__        StringBuilder sb = new StringBuilder()__        for (int i = 0_ i < lines.length_ i++) {_            String line = lines[i]__            line = Character.toUpperCase(line.charAt(0)) + line.substring(1)__            sb.append(line)__            if (i < lines.length - 1) {_                sb.append(newLine)__            }_        }_        return sb.toString()__    };to,wrap,long,camel,cased,texts,by,words,param,option,the,option,which,is,camel,cased,param,watermark,a,watermark,to,denote,the,size,to,cut,after,param,new,line,the,new,line,to,use,when,breaking,into,a,new,line;public,static,string,wrap,camel,case,words,string,option,int,watermark,string,new,line,string,text,case,format,to,case,format,option,text,text,replace,text,wrap,words,text,n,watermark,false,text,text,replace,text,case,format,to,case,format,text,string,lines,text,split,n,string,builder,sb,new,string,builder,for,int,i,0,i,lines,length,i,string,line,lines,i,line,character,to,upper,case,line,char,at,0,line,substring,1,sb,append,line,if,i,lines,length,1,sb,append,new,line,return,sb,to,string
