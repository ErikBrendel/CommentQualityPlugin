commented;modifiers;parameterAmount;loc;comment;code
true;public;0;7;/**  * Execute goal.  *  * @throws org.apache.maven.plugin.MojoExecutionException execution of the main class or one of the  *                 threads it generated failed.  * @throws org.apache.maven.plugin.MojoFailureException something bad happened...  */ ;/**  * Execute goal.  *  * @throws org.apache.maven.plugin.MojoExecutionException execution of the main class or one of the  *                 threads it generated failed.  * @throws org.apache.maven.plugin.MojoFailureException something bad happened...  */ public void execute() throws MojoExecutionException, MojoFailureException {     try {         generateArchetypeCatalog(getLog(), project, projectHelper, projectBuildDir, outDir).     } catch (IOException e) {         throw new MojoFailureException("Error generating archetype catalog due " + e.getMessage(), e).     } }
false;public;1;4;;@Override public boolean accept(File pathname) {     return pathname.getName().startsWith("camel-archetype") && pathname.isDirectory(). }
false;public,static;5;116;;public static void generateArchetypeCatalog(Log log, MavenProject project, MavenProjectHelper projectHelper, File projectBuildDir, File outDir) throws MojoExecutionException, IOException {     File rootDir = projectBuildDir.getParentFile().     log.info("Scanning for Camel Maven Archetypes from root directory " + rootDir).     // find all archetypes which are in the parent dir of the build dir     File[] dirs = rootDir.listFiles(new FileFilter() {          @Override         public boolean accept(File pathname) {             return pathname.getName().startsWith("camel-archetype") && pathname.isDirectory().         }     }).     List<ArchetypeModel> models = new ArrayList<>().     for (File dir : dirs) {         File pom = new File(dir, "pom.xml").         if (!pom.exists() && !pom.isFile()) {             continue.         }         boolean parent = false.         ArchetypeModel model = new ArchetypeModel().         // just use a simple line by line text parser (no need for DOM) just to grab 4 lines of data         for (Object o : FileUtils.readLines(pom)) {             String line = o.toString().             // we only want to read version from parent             if (line.contains("<parent>")) {                 parent = true.                 continue.             }             if (line.contains("</parent>")) {                 parent = false.                 continue.             }             if (parent) {                 // grab version from parent                 String version = between(line, "<version>", "</version>").                 if (version != null) {                     model.setVersion(version).                 }                 continue.             }             String groupId = between(line, "<groupId>", "</groupId>").             String artifactId = between(line, "<artifactId>", "</artifactId>").             String description = between(line, "<description>", "</description>").             if (groupId != null && model.getGroupId() == null) {                 model.setGroupId(groupId).             }             if (artifactId != null && model.getArtifactId() == null) {                 model.setArtifactId(artifactId).             }             if (description != null && model.getDescription() == null) {                 model.setDescription(description).             }         }         if (model.getGroupId() != null && model.getArtifactId() != null && model.getVersion() != null) {             models.add(model).         }     }     log.info("Found " + models.size() + " archetypes").     if (!models.isEmpty()) {         // make sure there is a dir         outDir.mkdirs().         File out = new File(outDir, "archetype-catalog.xml").         FileOutputStream fos = new FileOutputStream(out, false).         // write top         String top = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<archetype-catalog>\n  <archetypes>".         fos.write(top.getBytes()).         // write each archetype         for (ArchetypeModel model : models) {             fos.write("\n    <archetype>".getBytes()).             fos.write(("\n      <groupId>" + model.getGroupId() + "</groupId>").getBytes()).             fos.write(("\n      <artifactId>" + model.getArtifactId() + "</artifactId>").getBytes()).             fos.write(("\n      <version>" + model.getVersion() + "</version>").getBytes()).             if (model.getDescription() != null) {                 fos.write(("\n      <description>" + model.getDescription() + "</description>").getBytes()).             }             fos.write("\n    </archetype>".getBytes()).         }         // write bottom         String bottom = "\n  </archetypes>\n</archetype-catalog>\n".         fos.write(bottom.getBytes()).         fos.close().         log.info("Saved archetype catalog to file " + out).         try {             if (projectHelper != null) {                 log.info("Attaching archetype catalog to Maven project: " + project.getArtifactId()).                 List<String> includes = new ArrayList<>().                 includes.add("archetype-catalog.xml").                 projectHelper.addResource(project, outDir.getPath(), includes, new ArrayList<String>()).                 projectHelper.attachArtifact(project, "xml", "archetype-catalog", out).             }         } catch (Exception e) {             throw new MojoExecutionException("Failed to attach artifact to Maven project. Reason: " + e, e).         }     } }
false;public;0;3;;public String getGroupId() {     return groupId. }
false;public;1;3;;public void setGroupId(String groupId) {     this.groupId = groupId. }
false;public;0;3;;public String getArtifactId() {     return artifactId. }
false;public;1;3;;public void setArtifactId(String artifactId) {     this.artifactId = artifactId. }
false;public;0;3;;public String getVersion() {     return version. }
false;public;1;3;;public void setVersion(String version) {     this.version = version. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;1;3;;public void setDescription(String description) {     this.description = description. }
