commented;modifiers;parameterAmount;loc;comment;code
false;public,static;4;18;;public static boolean haveResourcesChanged(Log log, MavenProject project, BuildContext buildContext, String suffix) {     String baseDir = project.getBasedir().getAbsolutePath().     for (Resource r : project.getBuild().getResources()) {         File file = new File(r.getDirectory()).         if (file.isAbsolute()) {             file = new File(r.getDirectory().substring(baseDir.length() + 1)).         }         String path = file.getPath() + "/" + suffix.         if (log.isDebugEnabled()) {             log.debug("Checking  if " + path + " (" + r.getDirectory() + "/" + suffix + ") has changed.").         }         if (buildContext.hasDelta(path)) {             log.debug("Indeed " + suffix + " has changed.").             return true.         }     }     return false. }
true;public,static;1;20;/**  * Loads the entire stream into memory as a String and returns it.  * <p/>  * <b>Notice:</b> This implementation appends a <tt>\n</tt> as line  * terminator at the of the text.  * <p/>  * Warning, don't use for crazy big streams :)  */ ;/**  * Loads the entire stream into memory as a String and returns it.  * <p/>  * <b>Notice:</b> This implementation appends a <tt>\n</tt> as line  * terminator at the of the text.  * <p/>  * Warning, don't use for crazy big streams :)  */ public static String loadText(InputStream in) throws IOException {     StringBuilder builder = new StringBuilder().     InputStreamReader isr = new InputStreamReader(in).     try {         BufferedReader reader = new LineNumberReader(isr).         while (true) {             String line = reader.readLine().             if (line != null) {                 builder.append(line).                 builder.append("\n").             } else {                 break.             }         }         return builder.toString().     } finally {         isr.close().         in.close().     } }
false;public,static;2;8;;public static void writeText(File file, String text) throws IOException {     FileOutputStream fos = new FileOutputStream(file, false).     try {         fos.write(text.getBytes()).     } finally {         fos.close().     } }
false;public,static;2;6;;public static String after(String text, String after) {     if (!text.contains(after)) {         return null.     }     return text.substring(text.indexOf(after) + after.length()). }
true;public,static;1;17;/**  * Parses the text as a map (eg key=value)  * @param data the data  * @return the map  */ ;/**  * Parses the text as a map (eg key=value)  * @param data the data  * @return the map  */ public static Map<String, String> parseAsMap(String data) {     Map<String, String> answer = new HashMap<>().     if (data != null) {         String[] lines = data.split("\n").         for (String line : lines) {             int idx = line.indexOf('=').             if (idx != -1) {                 String key = line.substring(0, idx).                 String value = line.substring(idx + 1).                 // remove ending line break for the values                 value = value.trim().replaceAll("\n", "").                 answer.put(key.trim(), value).             }         }     }     return answer. }
false;public,static;2;6;;public static Set<File> findJsonFiles(File dir, FileFilter filter) {     Set<File> files = new TreeSet<>().     findJsonFiles(dir, files, filter).     return files. }
false;public,static;3;14;;public static void findJsonFiles(File dir, Set<File> found, FileFilter filter) {     File[] files = dir.listFiles(filter).     if (files != null) {         for (File file : files) {             // skip files in root dirs as Camel does not store information there but others may do             boolean jsonFile = file.isFile() && file.getName().endsWith(".json").             if (jsonFile) {                 found.add(file).             } else if (file.isDirectory()) {                 findJsonFiles(file, found, filter).             }         }     } }
false;public;1;4;;@Override public boolean accept(File pathname) {     return pathname.isDirectory() || pathname.getName().endsWith(".json"). }
false;public;1;19;;@Override public boolean accept(File pathname) {     String name = pathname.getName().     boolean special = "camel-core-osgi".equals(name) || "camel-core-xml".equals(name) || "camel-http-common".equals(name) || "camel-jetty-common".equals(name).     boolean special2 = "camel-as2".equals(name) || "camel-box".equals(name) || "camel-linkedin".equals(name) || "camel-olingo2".equals(name) || "camel-olingo4".equals(name) || "camel-salesforce".equals(name).     if (special || special2) {         return false.     }     return pathname.isDirectory() || name.endsWith(".json"). }
false;public,static;1;12;;public static File findCamelCoreDirectory(File dir) {     if (dir == null) {         return null.     }     Path p = dir.toPath().resolve("core/camel-core").     if (Files.isDirectory(p)) {         return p.toFile().     } else {         // okay walk up the parent dir         return findCamelCoreDirectory(dir.getParentFile()).     } }
