commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Execute goal.  *  * @throws MojoExecutionException execution of the main class or one of the  *                                                        threads it generated failed.  * @throws MojoFailureException   something bad happened...  */ ;/**  * Execute goal.  *  * @throws MojoExecutionException execution of the main class or one of the  *                                                        threads it generated failed.  * @throws MojoFailureException   something bad happened...  */ public void execute() throws MojoExecutionException, MojoFailureException {     updatePomAndCommonBin(componentsDir, "camel components").     updatePomAndCommonBin(startersDir, "camel starters"). }
false;protected;2;52;;protected void updatePomAndCommonBin(File dir, String token) throws MojoExecutionException, MojoFailureException {     SortedSet<String> artifactIds = new TreeSet<>().     try {         Set<File> poms = new HashSet<>().         findComponentPoms(dir, poms).         for (File pom : poms) {             String aid = asArtifactId(pom).             if (isValidArtifactId(aid)) {                 artifactIds.add(aid).             }         }     } catch (IOException e) {         throw new MojoFailureException("Error due " + e.getMessage(), e).     }     getLog().debug("ArtifactIds: " + artifactIds).     // update pom.xml     StringBuilder sb = new StringBuilder().     for (String aid : artifactIds) {         sb.append("    <dependency>\n").         sb.append("      <groupId>org.apache.camel</groupId>\n").         sb.append("      <artifactId>" + aid + "</artifactId>\n").         sb.append("      <version>${project.version}</version>\n").         sb.append("    </dependency>\n").     }     String changed = sb.toString().     boolean updated = updateXmlFile(releasePom, token, changed, "    ").     if (updated) {         getLog().info("Updated apache-camel/pom.xml file").     } else {         getLog().debug("No changes to apache-camel/pom.xml file").     }     getLog().info("apache-camel/pom.xml contains " + artifactIds.size() + " " + token + " dependencies").     // update common-bin.xml     sb = new StringBuilder().     for (String aid : artifactIds) {         sb.append("        <include>org.apache.camel:" + aid + "</include>\n").     }     changed = sb.toString().     updated = updateXmlFile(commonBinXml, token, changed, "        ").     if (updated) {         getLog().info("Updated apache-camel/src/main/descriptors/common-bin.xml file").     } else {         getLog().debug("No changes to apache-camel/src/main/descriptors/common-bin.xml file").     }     getLog().info("apache-camel/src/main/descriptors/common-bin.xml contains " + artifactIds.size() + " " + token + " dependencies"). }
false;private;2;12;;private void findComponentPoms(File parentDir, Set<File> components) {     File[] files = parentDir.listFiles().     if (files != null) {         for (File file : files) {             if (file.isDirectory() && file.getName().startsWith("camel-")) {                 findComponentPoms(file, components).             } else if (parentDir.getName().startsWith("camel-") && file.getName().equals("pom.xml")) {                 components.add(file).             }         }     } }
false;private;1;8;;private String asArtifactId(File pom) throws IOException {     String text = loadText(new FileInputStream(pom)).     text = after(text, "</parent>").     if (text != null) {         return between(text, "<artifactId>", "</artifactId>").     }     return null. }
false;private;1;3;;private boolean isValidArtifactId(String aid) {     return aid != null && !aid.endsWith("-maven-plugin") && !aid.endsWith("-parent"). }
false;private;4;32;;private boolean updateXmlFile(File file, String token, String changed, String spaces) throws MojoExecutionException {     String start = "<!-- " + token + ": START -->".     String end = "<!-- " + token + ": END -->".     if (!file.exists()) {         return false.     }     try {         String text = loadText(new FileInputStream(file)).         String existing = between(text, start, end).         if (existing != null) {             // remove leading line breaks etc             existing = existing.trim().             changed = changed.trim().             if (existing.equals(changed)) {                 return false.             } else {                 String before = StringHelper.before(text, start).                 String after = StringHelper.after(text, end).                 text = before + start + "\n" + spaces + changed + "\n" + spaces + end + after.                 writeText(file, text).                 return true.             }         } else {             return false.         }     } catch (Exception e) {         throw new MojoExecutionException("Error reading file " + file + " Reason: " + e, e).     } }
