# id;timestamp;commentText;codeText;commentWords;codeWords
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1421166809;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,continue,if,line,equals,line,equals,break,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1421750422;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,continue,if,line,equals,line,equals,break,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1422620660;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\\\\\"", QUOT)___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1422623390;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1434728290;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1453833916;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1453833924;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1453833944;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1487246249;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1487246984;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1487257826;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1489423834;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1489430171;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1526315151;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        try {_            JsonObject output = (JsonObject) Jsoner.deserialize(json)__            for (String key : output.keySet()) {_                Map<?, ?> row = output.getMap(key)__                if (key.equals(group)) {_                    if (parseProperties) {_                        _                        for (Object obj : row.entrySet()) {_                            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put("name", entry.getKey().toString())___                            Map<String, String> newData = transformMap((Map<?, ?>) entry.getValue())__                            newRow.putAll(newData)__                            answer.add(newRow)__                        }_                    } else {_                        _                        Map<?, ?> newData = transformMap(row)__                        for (Object obj : newData.entrySet()) {_                            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put(entry.getKey().toString(), entry.getValue().toString())__                            answer.add(newRow)__                        }_                    }_                }_            }_        } catch (Exception e) {_            _            throw new RuntimeException("Cannot parse json", e)__        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,try,json,object,output,json,object,jsoner,deserialize,json,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,string,string,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,catch,exception,e,throw,new,runtime,exception,cannot,parse,json,e,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1531921124;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        try {_            JsonObject output = (JsonObject) Jsoner.deserialize(json)__            for (String key : output.keySet()) {_                Map<?, ?> row = output.getMap(key)__                if (key.equals(group)) {_                    if (parseProperties) {_                        _                        for (Object obj : row.entrySet()) {_                            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put("name", entry.getKey().toString())___                            Map<String, String> newData = transformMap((Map<?, ?>) entry.getValue())__                            newRow.putAll(newData)__                            answer.add(newRow)__                        }_                    } else {_                        _                        Map<?, ?> newData = transformMap(row)__                        for (Object obj : newData.entrySet()) {_                            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put(entry.getKey().toString(), entry.getValue().toString())__                            answer.add(newRow)__                        }_                    }_                }_            }_        } catch (Exception e) {_            _            throw new RuntimeException("Cannot parse json", e)__        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,try,json,object,output,json,object,jsoner,deserialize,json,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,string,string,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,catch,exception,e,throw,new,runtime,exception,cannot,parse,json,e,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1548703939;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        try {_            JsonObject output = (JsonObject) Jsoner.deserialize(json)__            for (String key : output.keySet()) {_                Map<?, ?> row = output.getMap(key)__                if (key.equals(group)) {_                    if (parseProperties) {_                        _                        for (Object obj : row.entrySet()) {_                            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put("name", entry.getKey().toString())___                            Map<String, String> newData = transformMap((Map<?, ?>) entry.getValue())__                            newRow.putAll(newData)__                            answer.add(newRow)__                        }_                    } else {_                        _                        Map<?, ?> newData = transformMap(row)__                        for (Object obj : newData.entrySet()) {_                            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put(entry.getKey().toString(), entry.getValue().toString())__                            answer.add(newRow)__                        }_                    }_                }_            }_        } catch (Exception e) {_            _            throw new RuntimeException("Cannot parse json", e)__        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,try,json,object,output,json,object,jsoner,deserialize,json,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,string,string,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,catch,exception,e,throw,new,runtime,exception,cannot,parse,json,e,return,answer
JSonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1549899153;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        try {_            JsonObject output = (JsonObject) Jsoner.deserialize(json)__            for (String key : output.keySet()) {_                Map<?, ?> row = output.getMap(key)__                if (key.equals(group)) {_                    if (parseProperties) {_                        _                        for (Object obj : row.entrySet()) {_                            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put("name", entry.getKey().toString())___                            Map<String, String> newData = transformMap((Map<?, ?>) entry.getValue())__                            newRow.putAll(newData)__                            answer.add(newRow)__                        }_                    } else {_                        _                        Map<?, ?> newData = transformMap(row)__                        for (Object obj : newData.entrySet()) {_                            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put(entry.getKey().toString(), entry.getValue().toString())__                            answer.add(newRow)__                        }_                    }_                }_            }_        } catch (Exception e) {_            _            throw new RuntimeException("Cannot parse json", e)__        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,try,json,object,output,json,object,jsoner,deserialize,json,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,string,string,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,catch,exception,e,throw,new,runtime,exception,cannot,parse,json,e,return,answer
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1453833944;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1487246249;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1487246984;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1487257826;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1489423834;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1489430171;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1506283401;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1506283402;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1506283402;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1506283403;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1526315151;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1531921124;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1548703939;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, Map<String, String> rows);1549899153;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, Map<String, String> rows) {_        String value = rows.get(key)__        if (value != null) {_            return value__        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,map,string,string,rows,string,value,rows,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1453833944;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1487246249;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1487246984;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1487257826;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1489423834;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1489430171;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1506283401;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1506283402;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1506283402;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1506283403;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1526315151;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1531921124;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1548703939;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> public static String getSafeValue(String key, List<Map<String, String>> rows);1549899153;Gets the value with the key in a safe way, eg returning an empty string if there was no value for the key.;public static String getSafeValue(String key, List<Map<String, String>> rows) {_        for (Map<String, String> row : rows) {_            String value = row.get(key)__            if (value != null) {_                return value__            }_        }_        return ""__    };gets,the,value,with,the,key,in,a,safe,way,eg,returning,an,empty,string,if,there,was,no,value,for,the,key;public,static,string,get,safe,value,string,key,list,map,string,string,rows,for,map,string,string,row,rows,string,value,row,get,key,if,value,null,return,value,return
JSonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1506283401;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        JsonObject output = Jsoner.deserialize(json, new JsonObject())__        for (String key : output.keySet()) {_            Map row = output.getMap(key)__            if (key.equals(group)) {_                if (parseProperties) {_                    _                    for (Object obj : row.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap()__                        newRow.put("name", entry.getKey().toString())___                        Map newData = transformMap((Map) entry.getValue())__                        newRow.putAll(newData)__                        answer.add(newRow)__                    }_                } else {_                    _                    Map newData = transformMap(row)__                    for (Object obj : newData.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap<>()__                        newRow.put(entry.getKey().toString(), entry.getValue().toString())__                        answer.add(newRow)__                    }_                }_            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,json,object,output,jsoner,deserialize,json,new,json,object,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,return,answer
JSonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1506283402;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        JsonObject output = Jsoner.deserialize(json, new JsonObject())__        for (String key : output.keySet()) {_            Map row = output.getMap(key)__            if (key.equals(group)) {_                if (parseProperties) {_                    _                    for (Object obj : row.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap()__                        newRow.put("name", entry.getKey().toString())___                        Map newData = transformMap((Map) entry.getValue())__                        newRow.putAll(newData)__                        answer.add(newRow)__                    }_                } else {_                    _                    Map newData = transformMap(row)__                    for (Object obj : newData.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap<>()__                        newRow.put(entry.getKey().toString(), entry.getValue().toString())__                        answer.add(newRow)__                    }_                }_            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,json,object,output,jsoner,deserialize,json,new,json,object,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,return,answer
JSonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1506283402;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        JsonObject output = Jsoner.deserialize(json, new JsonObject())__        for (String key : output.keySet()) {_            Map row = output.getMap(key)__            if (key.equals(group)) {_                if (parseProperties) {_                    _                    for (Object obj : row.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap()__                        newRow.put("name", entry.getKey().toString())___                        Map newData = transformMap((Map) entry.getValue())__                        newRow.putAll(newData)__                        answer.add(newRow)__                    }_                } else {_                    _                    Map newData = transformMap(row)__                    for (Object obj : newData.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap<>()__                        newRow.put(entry.getKey().toString(), entry.getValue().toString())__                        answer.add(newRow)__                    }_                }_            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,json,object,output,jsoner,deserialize,json,new,json,object,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,return,answer
JSonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1506283403;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        try {_            JsonObject output = (JsonObject) Jsoner.deserialize(json)__            for (String key : output.keySet()) {_                Map row = output.getMap(key)__                if (key.equals(group)) {_                    if (parseProperties) {_                        _                        for (Object obj : row.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap()__                            newRow.put("name", entry.getKey().toString())___                            Map newData = transformMap((Map) entry.getValue())__                            newRow.putAll(newData)__                            answer.add(newRow)__                        }_                    } else {_                        _                        Map newData = transformMap(row)__                        for (Object obj : newData.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put(entry.getKey().toString(), entry.getValue().toString())__                            answer.add(newRow)__                        }_                    }_                }_            }_        } catch (Exception e) {_            _            throw new RuntimeException("Cannot parse json", e)__        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,try,json,object,output,json,object,jsoner,deserialize,json,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,catch,exception,e,throw,new,runtime,exception,cannot,parse,json,e,return,answer
