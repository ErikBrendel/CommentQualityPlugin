commented;modifiers;parameterAmount;loc;comment;code
true;public;0;36;/**  * Execute goal.  *  * @throws org.apache.maven.plugin.MojoExecutionException execution of the main class or one of the  *                 threads it generated failed.  * @throws org.apache.maven.plugin.MojoFailureException something bad happened...  */ ;/**  * Execute goal.  *  * @throws org.apache.maven.plugin.MojoExecutionException execution of the main class or one of the  *                 threads it generated failed.  * @throws org.apache.maven.plugin.MojoFailureException something bad happened...  */ public void execute() throws MojoExecutionException, MojoFailureException {     File camelMetaDir = new File(outDir, "META-INF/services/org/apache/camel/").     camelMetaDir.mkdirs().     Set<File> jsonFiles = new TreeSet<>().     // find all json files in camel-core     if (buildDir != null && buildDir.isDirectory()) {         File target = new File(buildDir, "classes/org/apache/camel/model").         PackageHelper.findJsonFiles(target, jsonFiles, new PackageHelper.CamelComponentsModelFilter()).     }     List<String> models = new ArrayList<>().     // sort the names     for (File file : jsonFiles) {         String name = file.getName().         if (name.endsWith(".json")) {             // strip out .json from the name             String modelName = name.substring(0, name.length() - 5).             models.add(modelName).         }     }     Collections.sort(models).     StringBuilder sb = new StringBuilder().     sb.append("# " + GENERATED_MSG + NL).     for (String name : models) {         sb.append(name).append(NL).     }     Path outFile = camelMetaDir.toPath().resolve("model.properties").     updateResource(outFile, sb.toString()).     getLog().info("Generated " + outFile + " containing " + models.size() + " Camel models").     addResourceDirectory(outDir.toPath()). }
