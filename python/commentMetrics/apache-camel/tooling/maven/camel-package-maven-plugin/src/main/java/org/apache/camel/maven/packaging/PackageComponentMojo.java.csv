commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Execute goal.  *  * @throws MojoExecutionException execution of the main class or one of the  *                 threads it generated failed.  * @throws MojoFailureException something bad happened...  */ ;/**  * Execute goal.  *  * @throws MojoExecutionException execution of the main class or one of the  *                 threads it generated failed.  * @throws MojoFailureException something bad happened...  */ public void execute() throws MojoExecutionException, MojoFailureException {     prepareComponent(getLog(), project, projectHelper, buildDir, componentOutDir, buildContext). }
false;public,static;6;58;;public static int prepareComponent(Log log, MavenProject project, MavenProjectHelper projectHelper, File buildDir, File componentOutDir, BuildContext buildContext) throws MojoExecutionException {     File camelMetaDir = new File(componentOutDir, "META-INF/services/org/apache/camel/").     // can stop the build before the end and eclipse always needs to know about that directory     if (projectHelper != null) {         projectHelper.addResource(project, componentOutDir.getPath(), Collections.singletonList("**/component.properties"), Collections.emptyList()).     }     if (!PackageHelper.haveResourcesChanged(log, project, buildContext, "META-INF/services/org/apache/camel/component")) {         return 0.     }     StringBuilder buffer = new StringBuilder().     int count = 0.     Set<String> components = new HashSet<>().     File f = new File(project.getBasedir(), "target/classes").     f = new File(f, "META-INF/services/org/apache/camel/component").     if (f.exists() && f.isDirectory()) {         File[] files = f.listFiles().         if (files != null) {             for (File file : files) {                 // skip directories as there may be a sub .resolver directory                 if (file.isDirectory()) {                     continue.                 }                 String name = file.getName().                 if (name.charAt(0) != '.') {                     count++.                     if (buffer.length() > 0) {                         buffer.append(" ").                     }                     buffer.append(name).                     components.add(file.getName()).                 }             }         }     }     if (count > 0) {         // we need to enrich the component json files with data we know have from this plugin         enrichComponentJsonFiles(log, project, buildDir, components).     }     if (count > 0) {         String names = buffer.toString().         Path outFile = camelMetaDir.toPath().resolve("component.properties").         String properties = createProperties(project, "components", names).         updateResource(buildContext, outFile, properties).         log.info("Generated " + outFile + " containing " + count + " Camel " + (count > 1 ? "components: " : "component: ") + names).     } else {         log.debug("No META-INF/services/org/apache/camel/component directory found. Are you sure you have created a Camel component?").     }     return count. }
false;private,static;4;29;;private static void enrichComponentJsonFiles(Log log, MavenProject project, File buildDir, Set<String> components) throws MojoExecutionException {     final Set<File> files = PackageHelper.findJsonFiles(buildDir, p -> p.isDirectory() || p.getName().endsWith(".json")).     for (File file : files) {         // clip the .json suffix         String name = file.getName().substring(0, file.getName().length() - 5).         if (components.contains(name)) {             log.debug("Enriching component: " + name).             try {                 String text = loadText(new FileInputStream(file)).                 text = text.replace("@@@DESCRIPTION@@@", project.getDescription()).                 text = text.replace("@@@GROUPID@@@", project.getGroupId()).                 text = text.replace("@@@ARTIFACTID@@@", project.getArtifactId()).                 text = text.replace("@@@VERSIONID@@@", project.getVersion()).                 // special for deprecated where you can quickly specify that in the pom.xml name                 boolean deprecated = project.getName().contains("(deprecated)").                 if (deprecated) {                     // must start with 4 leading spaces as we want to replace the marker in the top of the file                     text = text.replaceFirst(" {4}\"deprecated\": false,", "    \"deprecated\": true,").                 }                 updateResource(null, file.toPath(), text).             } catch (IOException e) {                 throw new MojoExecutionException("Failed to update file " + file + ". Reason: " + e, e).             }         }     } }
