commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static File starterSrcDir(File baseDir, String artifactId) {     return new File(starterDir(baseDir, artifactId), "src/main/java"). }
false;public,static;2;3;;public static File starterResourceDir(File baseDir, String artifactId) {     return new File(starterDir(baseDir, artifactId), "src/main/resources"). }
false;public,static;2;7;;public static File starterDir(File baseDir, String artifactId) {     String starterName = artifactId + STARTER_SUFFIX.     File allStartersDir = allStartersDir(baseDir).     File starterDir = new File(allStartersDir, starterName).     return starterDir. }
false;public,static;1;4;;public static File allStartersDir(File baseDir) {     File allStartersDir = new File(camelProjectRoot(baseDir, "platforms"), "platforms/spring-boot/components-starter").     return allStartersDir. }
false;public,static;2;21;;public static File camelProjectRoot(File baseDir, String expectedDirName) {     // however looking for a dir named components-starter should be fine also (there is only 1 with such name)     try {         File root = baseDir.getCanonicalFile().         while (root != null) {             File[] names = root.listFiles(pathname -> pathname.getName().equals(expectedDirName)).             if (names != null && names.length == 1) {                 break.             }             root = root.getParentFile().         }         if (root == null) {             throw new IllegalStateException("Cannot find Apache Camel project root directory").         }         return root.     } catch (IOException e) {         throw new IllegalStateException("Error while getting directory", e).     } }
