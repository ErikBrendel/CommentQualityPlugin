commented;modifiers;parameterAmount;loc;comment;code
true;public;0;7;/**  * Execute goal.  *  * @throws MojoExecutionException execution of the main class or one of the  *                                                        threads it generated failed.  * @throws MojoFailureException   something bad happened...  */ ;/**  * Execute goal.  *  * @throws MojoExecutionException execution of the main class or one of the  *                                                        threads it generated failed.  * @throws MojoFailureException   something bad happened...  */ public void execute() throws MojoExecutionException, MojoFailureException {     Set<String> starters = findSpringBootStarters().     executeComponents(starters).     executeDataFormats(starters).     executeLanguages(starters).     executeOthers(starters). }
false;protected;1;97;;protected void executeComponents(Set<String> starters) throws MojoExecutionException, MojoFailureException {     getLog().info("Copying all Camel component json descriptors").     // lets use sorted set/maps     Set<File> jsonFiles = new TreeSet<>().     Set<File> componentFiles = new TreeSet<>().     // find all json files in components and camel-core     if (componentsDir != null && componentsDir.isDirectory()) {         File[] components = componentsDir.listFiles().         if (components != null) {             for (File dir : components) {                 if (dir.isDirectory() && !"target".equals(dir.getName())) {                     File target = new File(dir, "target/classes").                     // the directory must be in the list of known features                     if (!starters.contains(dir.getName())) {                         continue.                     }                     // special for some which is in a sub dir                     if ("camel-as2".equals(dir.getName())) {                         target = new File(dir, "camel-as2-component/target/classes").                     } else if ("camel-box".equals(dir.getName())) {                         target = new File(dir, "camel-box-component/target/classes").                     } else if ("camel-salesforce".equals(dir.getName())) {                         target = new File(dir, "camel-salesforce-component/target/classes").                     } else if ("camel-linkedin".equals(dir.getName())) {                         target = new File(dir, "camel-linkedin-component/target/classes").                     } else if ("camel-servicenow".equals(dir.getName())) {                         target = new File(dir, "camel-servicenow-component/target/classes").                     }                     findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter()).                 }             }         }     }     if (coreDir != null && coreDir.isDirectory()) {         File target = new File(coreDir, "target/classes").         findComponentFilesRecursive(target, jsonFiles, componentFiles, new CamelComponentsFileFilter()).     }     getLog().info("Found " + componentFiles.size() + " component.properties files").     getLog().info("Found " + jsonFiles.size() + " component json files").     // make sure to create out dir     componentsOutDir.mkdirs().     for (File file : jsonFiles) {         // for spring-boot we need to amend the json file to use -starter as the artifact-id         try {             String text = loadText(new FileInputStream(file)).             text = ARTIFACT_PATTERN.matcher(text).replaceFirst("\"artifactId\": \"camel-$1-starter\"").             // write new json file             File to = new File(componentsOutDir, file.getName()).             FileOutputStream fos = new FileOutputStream(to, false).             fos.write(text.getBytes()).             fos.close().         } catch (IOException e) {             throw new MojoFailureException("Cannot write json file " + file, e).         }     }     File all = new File(componentsOutDir, "../components.properties").     try {         FileOutputStream fos = new FileOutputStream(all, false).         String[] names = componentsOutDir.list().         List<String> components = new ArrayList<>().         // sort the names         for (String name : names) {             if (name.endsWith(".json")) {                 // strip out .json from the name                 String componentName = name.substring(0, name.length() - 5).                 components.add(componentName).             }         }         Collections.sort(components).         for (String name : components) {             fos.write(name.getBytes()).             fos.write("\n".getBytes()).         }         fos.close().     } catch (IOException e) {         throw new MojoFailureException("Error writing to file " + all).     } }
false;protected;1;81;;protected void executeDataFormats(Set<String> starters) throws MojoExecutionException, MojoFailureException {     getLog().info("Copying all Camel dataformat json descriptors").     // lets use sorted set/maps     Set<File> jsonFiles = new TreeSet<>().     Set<File> dataFormatFiles = new TreeSet<>().     // find all data formats from the components directory     if (componentsDir != null && componentsDir.isDirectory()) {         File[] dataFormats = componentsDir.listFiles().         if (dataFormats != null) {             for (File dir : dataFormats) {                 if (dir.isDirectory() && !"target".equals(dir.getName())) {                     // the directory must be in the list of known starters                     if (!starters.contains(dir.getName())) {                         continue.                     }                     File target = new File(dir, "target/classes").                     findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter()).                 }             }         }     }     if (coreDir != null && coreDir.isDirectory()) {         File target = new File(coreDir, "target/classes").         findDataFormatFilesRecursive(target, jsonFiles, dataFormatFiles, new CamelDataFormatsFileFilter()).     }     getLog().info("Found " + dataFormatFiles.size() + " dataformat.properties files").     getLog().info("Found " + jsonFiles.size() + " dataformat json files").     // make sure to create out dir     dataFormatsOutDir.mkdirs().     for (File file : jsonFiles) {         // for spring-boot we need to amend the json file to use -starter as the artifact-id         try {             String text = loadText(new FileInputStream(file)).             text = ARTIFACT_PATTERN.matcher(text).replaceFirst("\"artifactId\": \"camel-$1-starter\"").             // write new json file             File to = new File(dataFormatsOutDir, file.getName()).             FileOutputStream fos = new FileOutputStream(to, false).             fos.write(text.getBytes()).             fos.close().         } catch (IOException e) {             throw new MojoFailureException("Cannot write json file " + file, e).         }     }     File all = new File(dataFormatsOutDir, "../dataformats.properties").     try {         FileOutputStream fos = new FileOutputStream(all, false).         String[] names = dataFormatsOutDir.list().         List<String> dataFormats = new ArrayList<>().         // sort the names         for (String name : names) {             if (name.endsWith(".json")) {                 // strip out .json from the name                 String dataFormatName = name.substring(0, name.length() - 5).                 dataFormats.add(dataFormatName).             }         }         Collections.sort(dataFormats).         for (String name : dataFormats) {             fos.write(name.getBytes()).             fos.write("\n".getBytes()).         }         fos.close().     } catch (IOException e) {         throw new MojoFailureException("Error writing to file " + all).     } }
false;protected;1;81;;protected void executeLanguages(Set<String> starters) throws MojoExecutionException, MojoFailureException {     getLog().info("Copying all Camel language json descriptors").     // lets use sorted set/maps     Set<File> jsonFiles = new TreeSet<>().     Set<File> languageFiles = new TreeSet<>().     // find all languages from the components directory     if (componentsDir != null && componentsDir.isDirectory()) {         File[] languages = componentsDir.listFiles().         if (languages != null) {             for (File dir : languages) {                 // the directory must be in the list of known starters                 if (!starters.contains(dir.getName())) {                     continue.                 }                 if (dir.isDirectory() && !"target".equals(dir.getName())) {                     File target = new File(dir, "target/classes").                     findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter()).                 }             }         }     }     if (coreDir != null && coreDir.isDirectory()) {         File target = new File(coreDir, "target/classes").         findLanguageFilesRecursive(target, jsonFiles, languageFiles, new CamelLanguagesFileFilter()).     }     getLog().info("Found " + languageFiles.size() + " language.properties files").     getLog().info("Found " + jsonFiles.size() + " language json files").     // make sure to create out dir     languagesOutDir.mkdirs().     for (File file : jsonFiles) {         // for spring-boot we need to amend the json file to use -starter as the artifact-id         try {             String text = loadText(new FileInputStream(file)).             text = ARTIFACT_PATTERN.matcher(text).replaceFirst("\"artifactId\": \"camel-$1-starter\"").             // write new json file             File to = new File(languagesOutDir, file.getName()).             FileOutputStream fos = new FileOutputStream(to, false).             fos.write(text.getBytes()).             fos.close().         } catch (IOException e) {             throw new MojoFailureException("Cannot write json file " + file, e).         }     }     File all = new File(languagesOutDir, "../languages.properties").     try {         FileOutputStream fos = new FileOutputStream(all, false).         String[] names = languagesOutDir.list().         List<String> languages = new ArrayList<>().         // sort the names         for (String name : names) {             if (name.endsWith(".json")) {                 // strip out .json from the name                 String languageName = name.substring(0, name.length() - 5).                 languages.add(languageName).             }         }         Collections.sort(languages).         for (String name : languages) {             fos.write(name.getBytes()).             fos.write("\n".getBytes()).         }         fos.close().     } catch (IOException e) {         throw new MojoFailureException("Error writing to file " + all).     } }
false;protected;1;94;;protected void executeOthers(Set<String> starters) throws MojoExecutionException, MojoFailureException {     getLog().info("Copying all Camel other json descriptors").     // lets use sorted set/maps     Set<File> jsonFiles = new TreeSet<>().     Set<File> otherFiles = new TreeSet<>().     // find all other from the components directory     if (componentsDir != null && componentsDir.isDirectory()) {         File[] others = componentsDir.listFiles().         if (others != null) {             for (File dir : others) {                 // the directory must be in the list of known starters                 if (!starters.contains(dir.getName())) {                     continue.                 }                 // skip these special cases                 boolean special = "camel-core-osgi".equals(dir.getName()) || "camel-core-xml".equals(dir.getName()) || "camel-http-common".equals(dir.getName()) || "camel-jetty-common".equals(dir.getName()).                 boolean special2 = "camel-as2".equals(dir.getName()) || "camel-box".equals(dir.getName()) || "camel-linkedin".equals(dir.getName()) || "camel-olingo2".equals(dir.getName()) || "camel-olingo4".equals(dir.getName()) || "camel-servicenow".equals(dir.getName()) || "camel-salesforce".equals(dir.getName()).                 if (special || special2) {                     continue.                 }                 if (dir.isDirectory() && !"target".equals(dir.getName())) {                     File target = new File(dir, "target/classes").                     findOtherFilesRecursive(target, jsonFiles, otherFiles, new CamelOthersFileFilter()).                 }             }         }     }     getLog().info("Found " + otherFiles.size() + " other.properties files").     getLog().info("Found " + jsonFiles.size() + " other json files").     // make sure to create out dir     othersOutDir.mkdirs().     for (File file : jsonFiles) {         // for spring-boot we need to amend the json file to use -starter as the artifact-id         try {             String text = loadText(new FileInputStream(file)).             text = ARTIFACT_PATTERN.matcher(text).replaceFirst("\"artifactId\": \"camel-$1-starter\"").             // write new json file             File to = new File(othersOutDir, file.getName()).             FileOutputStream fos = new FileOutputStream(to, false).             fos.write(text.getBytes()).             fos.close().         } catch (IOException e) {             throw new MojoFailureException("Cannot write json file " + file, e).         }     }     File all = new File(othersOutDir, "../others.properties").     try {         FileOutputStream fos = new FileOutputStream(all, false).         String[] names = othersOutDir.list().         List<String> others = new ArrayList<>().         // sort the names         for (String name : names) {             if (name.endsWith(".json")) {                 // strip out .json from the name                 String otherName = name.substring(0, name.length() - 5).                 others.add(otherName).             }         }         Collections.sort(others).         for (String name : others) {             fos.write(name.getBytes()).             fos.write("\n".getBytes()).         }         fos.close().     } catch (IOException e) {         throw new MojoFailureException("Error writing to file " + all).     } }
false;private;4;18;;private void findComponentFilesRecursive(File dir, Set<File> found, Set<File> components, FileFilter filter) {     File[] files = dir.listFiles(filter).     if (files != null) {         for (File file : files) {             // skip files in root dirs as Camel does not store information there but others may do             boolean rootDir = "classes".equals(dir.getName()) || "META-INF".equals(dir.getName()).             boolean jsonFile = !rootDir && file.isFile() && file.getName().endsWith(".json").             boolean componentFile = !rootDir && file.isFile() && file.getName().equals("component.properties").             if (jsonFile) {                 found.add(file).             } else if (componentFile) {                 components.add(file).             } else if (file.isDirectory()) {                 findComponentFilesRecursive(file, found, components, filter).             }         }     } }
false;private;4;18;;private void findDataFormatFilesRecursive(File dir, Set<File> found, Set<File> dataFormats, FileFilter filter) {     File[] files = dir.listFiles(filter).     if (files != null) {         for (File file : files) {             // skip files in root dirs as Camel does not store information there but others may do             boolean rootDir = "classes".equals(dir.getName()) || "META-INF".equals(dir.getName()).             boolean jsonFile = !rootDir && file.isFile() && file.getName().endsWith(".json").             boolean dataFormatFile = !rootDir && file.isFile() && file.getName().equals("dataformat.properties").             if (jsonFile) {                 found.add(file).             } else if (dataFormatFile) {                 dataFormats.add(file).             } else if (file.isDirectory()) {                 findDataFormatFilesRecursive(file, found, dataFormats, filter).             }         }     } }
false;private;4;18;;private void findLanguageFilesRecursive(File dir, Set<File> found, Set<File> languages, FileFilter filter) {     File[] files = dir.listFiles(filter).     if (files != null) {         for (File file : files) {             // skip files in root dirs as Camel does not store information there but others may do             boolean rootDir = "classes".equals(dir.getName()) || "META-INF".equals(dir.getName()).             boolean jsonFile = !rootDir && file.isFile() && file.getName().endsWith(".json").             boolean languageFile = !rootDir && file.isFile() && file.getName().equals("language.properties").             if (jsonFile) {                 found.add(file).             } else if (languageFile) {                 languages.add(file).             } else if (file.isDirectory()) {                 findLanguageFilesRecursive(file, found, languages, filter).             }         }     } }
false;private;4;18;;private void findOtherFilesRecursive(File dir, Set<File> found, Set<File> others, FileFilter filter) {     File[] files = dir.listFiles(filter).     if (files != null) {         for (File file : files) {             // skip files in root dirs as Camel does not store information there but others may do             boolean rootDir = "classes".equals(dir.getName()) || "META-INF".equals(dir.getName()).             boolean jsonFile = rootDir && file.isFile() && file.getName().endsWith(".json").             boolean otherFile = !rootDir && file.isFile() && file.getName().equals("other.properties").             if (jsonFile) {                 found.add(file).             } else if (otherFile) {                 others.add(file).             } else if (file.isDirectory()) {                 findOtherFilesRecursive(file, found, others, filter).             }         }     } }
false;public;1;17;;@Override public boolean accept(File pathname) {     if (pathname.isDirectory() && pathname.getName().equals("model")) {         // do not check the camel-core model packages as there is no components there         return false.     }     if (pathname.isFile() && pathname.getName().endsWith(".json")) {         // must be a components json file         try {             String json = loadText(new FileInputStream(pathname)).             return json != null && json.contains("\"kind\": \"component\"").         } catch (IOException e) {         // ignore         }     }     return pathname.isDirectory() || (pathname.isFile() && pathname.getName().equals("component.properties")). }
false;public;1;17;;@Override public boolean accept(File pathname) {     if (pathname.isDirectory() && pathname.getName().equals("model")) {         // do not check the camel-core model packages as there is no components there         return false.     }     if (pathname.isFile() && pathname.getName().endsWith(".json")) {         // must be a dataformat json file         try {             String json = loadText(new FileInputStream(pathname)).             return json != null && json.contains("\"kind\": \"dataformat\"").         } catch (IOException e) {         // ignore         }     }     return pathname.isDirectory() || (pathname.isFile() && pathname.getName().equals("dataformat.properties")). }
false;public;1;17;;@Override public boolean accept(File pathname) {     if (pathname.isDirectory() && pathname.getName().equals("model")) {         // do not check the camel-core model packages as there is no components there         return false.     }     if (pathname.isFile() && pathname.getName().endsWith(".json")) {         // must be a language json file         try {             String json = loadText(new FileInputStream(pathname)).             return json != null && json.contains("\"kind\": \"language\"").         } catch (IOException e) {         // ignore         }     }     return pathname.isDirectory() || (pathname.isFile() && pathname.getName().equals("language.properties")). }
false;public;1;13;;@Override public boolean accept(File pathname) {     if (pathname.isFile() && pathname.getName().endsWith(".json")) {         // must be a language json file         try {             String json = loadText(new FileInputStream(pathname)).             return json != null && json.contains("\"kind\": \"other\"").         } catch (IOException e) {         // ignore         }     }     return pathname.isDirectory() || (pathname.isFile() && pathname.getName().equals("other.properties")). }
false;public,static;2;23;;public static void copyFile(File from, File to) throws IOException {     FileChannel in = null.     FileChannel out = null.     try (FileInputStream fis = new FileInputStream(from).         FileOutputStream fos = new FileOutputStream(to)) {         try {             in = fis.getChannel().             out = fos.getChannel().             long size = in.size().             long position = 0.             while (position < size) {                 position += in.transferTo(position, BUFFER_SIZE, out).             }         } finally {             if (in != null) {                 in.close().             }             if (out != null) {                 out.close().             }         }     } }
false;private;0;18;;private Set<String> findSpringBootStarters() {     Set<String> answer = new LinkedHashSet<>().     String[] names = componentsStarterDir.list().     if (names != null) {         for (String name : names) {             if (name.startsWith("camel-") && name.endsWith("-starter")) {                 // remove ending -starter                 String regular = name.substring(0, name.length() - 8).                 answer.add(regular).             }         }     }     getLog().info("Found " + answer.size() + " Camel Spring Boot starters from: " + componentsStarterDir).     return answer. }
