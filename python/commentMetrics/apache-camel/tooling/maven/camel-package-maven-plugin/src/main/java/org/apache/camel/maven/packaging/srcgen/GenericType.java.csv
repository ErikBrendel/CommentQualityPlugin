commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;46;;public static GenericType parse(String type, ClassLoader loader) throws ClassNotFoundException, IllegalArgumentException {     type = type.trim().     // Check if this is an array     if (type.endsWith("[]")) {         GenericType t = parse(type.substring(0, type.length() - 2), loader).         return new GenericType(Array.newInstance(t.getRawClass(), 0).getClass(), t).     }     // Check if this is a generic     int genericIndex = type.indexOf('<').     if (genericIndex > 0) {         if (!type.endsWith(">")) {             throw new IllegalArgumentException("Can not load type: " + type).         }         GenericType base = parse(type.substring(0, genericIndex), loader).         String[] params = type.substring(genericIndex + 1, type.length() - 1).split(",").         GenericType[] types = new GenericType[params.length].         for (int i = 0. i < params.length. i++) {             types[i] = parse(params[i], loader).         }         return new GenericType(base.getRawClass(), types).     }     // Primitive     if (isPrimitive(type)) {         return new GenericType(PRIMITIVE_CLASSES.get(type)).     }     // Extends     if (type.startsWith("? extends ")) {         String raw = type.substring("? extends ".length()).         return new GenericType(loadClass(loader, raw), BoundType.Extends).     }     // Super     if (type.startsWith("? super ")) {         String raw = type.substring("? extends ".length()).         return new GenericType(loadClass(loader, raw), BoundType.Super).     }     // Wildcard     if (type.equals("?")) {         return new GenericType(Object.class, BoundType.Extends).     }     // Class     if (loader != null) {         return new GenericType(loadClass(loader, type)).     } else {         throw new IllegalArgumentException("Unsupported loader: " + loader).     } }
false;static;1;3;;static boolean isPrimitive(String type) {     return PRIMITIVE_CLASSES.containsKey(type). }
false;private,static;2;18;;private static Class<?> loadClass(ClassLoader loader, String loadClassName) throws ClassNotFoundException {     Class<?> optionClass.     String org = loadClassName.     while (true) {         try {             optionClass = loader.loadClass(loadClassName).             break.         } catch (ClassNotFoundException e) {             int dotIndex = loadClassName.lastIndexOf('.').             if (dotIndex == -1) {                 throw new ClassNotFoundException(org).             } else {                 loadClassName = loadClassName.substring(0, dotIndex) + "$" + loadClassName.substring(dotIndex + 1).             }         }     }     return optionClass. }
false;public;0;3;;public Class<?> getRawClass() {     return clazz. }
false;public;1;6;;public GenericType getActualTypeArgument(int i) {     if (parameters.length == 0) {         return ALL.     }     return parameters[i]. }
false;public;0;3;;public int size() {     return parameters.length. }
false;public;0;32;;@Override public String toString() {     if (parameters.length == 0 && boundType == BoundType.Extends && clazz == Object.class) {         return "?".     }     StringBuilder sb = new StringBuilder().     if (boundType == BoundType.Extends) {         sb.append("? extends ").     } else if (boundType == BoundType.Super) {         sb.append("? super ").     }     Class cl = getRawClass().     if (cl.isArray()) {         if (parameters.length > 0) {             return parameters[0].toString() + "[]".         } else {             return cl.getComponentType().getName() + "[]".         }     }     sb.append(cl.getName()).     if (parameters.length > 0) {         sb.append("<").         for (int i = 0. i < parameters.length. i++) {             if (i > 0) {                 sb.append(", ").             }             sb.append(parameters[i].toString()).         }         sb.append(">").     }     return sb.toString(). }
false;public;0;9;;@Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + ((boundType == null) ? 0 : boundType.hashCode()).     result = prime * result + ((clazz == null) ? 0 : clazz.hashCode()).     result = prime * result + Arrays.hashCode(parameters).     return result. }
false;public;1;28;;public boolean equals(Object object) {     if (!(object instanceof GenericType)) {         return false.     }     GenericType other = (GenericType) object.     if (getRawClass() != other.getRawClass()) {         return false.     }     if (boundType != other.boundType) {         return false.     }     if (parameters == null) {         return other.parameters == null.     } else {         if (other.parameters == null) {             return false.         }         if (parameters.length != other.parameters.length) {             return false.         }         for (int i = 0. i < parameters.length. i++) {             if (!parameters[i].equals(other.parameters[i])) {                 return false.             }         }         return true.     } }
false;static;1;6;;static GenericType bound(GenericType type) {     if (type.boundType != BoundType.Exact) {         return new GenericType(type.getRawClass(), BoundType.Exact, type.parameters).     }     return type. }
false;static;1;3;;static BoundType boundType(GenericType type) {     return type.boundType. }
false;static;1;7;;static BoundType boundType(Type type) {     if (type instanceof WildcardType) {         WildcardType wct = (WildcardType) type.         return wct.getLowerBounds().length == 0 ? BoundType.Extends : BoundType.Super.     }     return BoundType.Exact. }
false;static;1;31;;static GenericType[] parametersOf(Type type) {     if (type instanceof Class) {         Class clazz = (Class) type.         if (clazz.isArray()) {             GenericType t = new GenericType(clazz.getComponentType()).             if (t.size() > 0) {                 return new GenericType[] { t }.             } else {                 return EMPTY.             }         } else {             return EMPTY.         }     }     if (type instanceof ParameterizedType) {         ParameterizedType pt = (ParameterizedType) type.         Type[] parameters = pt.getActualTypeArguments().         GenericType[] gts = new GenericType[parameters.length].         for (int i = 0. i < gts.length. i++) {             gts[i] = new GenericType(parameters[i]).         }         return gts.     }     if (type instanceof GenericArrayType) {         return new GenericType[] { new GenericType(((GenericArrayType) type).getGenericComponentType()) }.     }     if (type instanceof WildcardType) {         return EMPTY.     }     throw new IllegalStateException(). }
false;static;1;10;;static Class<?> getConcreteClass(Type type) {     Type ntype = collapse(type).     if (ntype instanceof Class) {         return (Class<?>) ntype.     }     if (ntype instanceof ParameterizedType) {         return getConcreteClass(collapse(((ParameterizedType) ntype).getRawType())).     }     throw new RuntimeException("Unknown type " + type). }
false;static;1;21;;static Type collapse(Type target) {     if (target instanceof Class || target instanceof ParameterizedType) {         return target.     } else if (target instanceof TypeVariable) {         return collapse(((TypeVariable<?>) target).getBounds()[0]).     } else if (target instanceof GenericArrayType) {         Type t = collapse(((GenericArrayType) target).getGenericComponentType()).         while (t instanceof ParameterizedType) {             t = collapse(((ParameterizedType) t).getRawType()).         }         return Array.newInstance((Class<?>) t, 0).getClass().     } else if (target instanceof WildcardType) {         WildcardType wct = (WildcardType) target.         if (wct.getLowerBounds().length == 0) {             return collapse(wct.getUpperBounds()[0]).         } else {             return collapse(wct.getLowerBounds()[0]).         }     }     throw new RuntimeException("Huh? " + target). }
