commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Execute goal.  *  * @throws org.apache.maven.plugin.MojoExecutionException execution of the main class or one of the  *                                                        threads it generated failed.  * @throws org.apache.maven.plugin.MojoFailureException   something bad happened...  */ ;/**  * Execute goal.  *  * @throws org.apache.maven.plugin.MojoExecutionException execution of the main class or one of the  *                                                        threads it generated failed.  * @throws org.apache.maven.plugin.MojoFailureException   something bad happened...  */ public void execute() throws MojoExecutionException, MojoFailureException {     prepareLanguage(getLog(), project, projectHelper, languageOutDir, schemaOutDir, buildContext). }
false;public,static;6;136;;public static int prepareLanguage(Log log, MavenProject project, MavenProjectHelper projectHelper, File languageOutDir, File schemaOutDir, BuildContext buildContext) throws MojoExecutionException {     File camelMetaDir = new File(languageOutDir, "META-INF/services/org/apache/camel/").     // can stop the build before the end and eclipse always needs to know about that directory     if (projectHelper != null) {         projectHelper.addResource(project, languageOutDir.getPath(), Collections.singletonList("**/language.properties"), Collections.emptyList()).     }     if (!PackageHelper.haveResourcesChanged(log, project, buildContext, "META-INF/services/org/apache/camel/language")) {         return 0.     }     Map<String, String> javaTypes = new HashMap<>().     StringBuilder buffer = new StringBuilder().     int count = 0.     File f = new File(project.getBasedir(), "target/classes").     f = new File(f, "META-INF/services/org/apache/camel/language").     if (f.exists() && f.isDirectory()) {         File[] files = f.listFiles().         if (files != null) {             for (File file : files) {                 String javaType = readClassFromCamelResource(file, buffer, buildContext).                 if (!file.isDirectory() && file.getName().charAt(0) != '.') {                     count++.                 }                 if (javaType != null) {                     javaTypes.put(file.getName(), javaType).                 }             }         }     }     // is this from Apache Camel then the data format is out of the box and     // we should enrich the json schema with more details     boolean apacheCamel = "org.apache.camel".equals(project.getGroupId()).     // and create json schema model file for this language     try {         if (apacheCamel && count > 0) {             File core = findCamelCoreDirectory(project.getBasedir()).             if (core != null) {                 for (Map.Entry<String, String> entry : javaTypes.entrySet()) {                     String name = entry.getKey().                     String javaType = entry.getValue().                     String modelName = asModelName(name).                     InputStream is = new FileInputStream(new File(core, "target/classes/org/apache/camel/model/language/" + modelName + ".json")).                     String json = loadText(is).                     LanguageModel languageModel = new LanguageModel().                     languageModel.setName(name).                     languageModel.setTitle("").                     languageModel.setModelName(modelName).                     languageModel.setLabel("").                     languageModel.setDescription("").                     languageModel.setJavaType(javaType).                     languageModel.setGroupId(project.getGroupId()).                     languageModel.setArtifactId(project.getArtifactId()).                     languageModel.setVersion(project.getVersion()).                     List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema("model", json, false).                     for (Map<String, String> row : rows) {                         if (row.containsKey("title")) {                             // title may be special for some                             // languages                             String title = asTitle(name, row.get("title")).                             languageModel.setTitle(title).                         }                         if (row.containsKey("description")) {                             // description may be special for some                             // languages                             String desc = asDescription(name, row.get("description")).                             languageModel.setDescription(desc).                         }                         if (row.containsKey("label")) {                             languageModel.setLabel(row.get("label")).                         }                         if (row.containsKey("deprecated")) {                             languageModel.setDeprecated(row.get("deprecated")).                         }                         if (row.containsKey("deprecationNote")) {                             languageModel.setDeprecationNote(row.get("deprecationNote")).                         }                         if (row.containsKey("javaType")) {                             languageModel.setModelJavaType(row.get("javaType")).                         }                         if (row.containsKey("firstVersion")) {                             languageModel.setFirstVersion(row.get("firstVersion")).                         }                     }                     if (log.isDebugEnabled()) {                         log.debug("Model: " + languageModel).                     }                     // build json schema for the data format                     String properties = after(json, "  \"properties\": {").                     String schema = createParameterJsonSchema(languageModel, properties).                     if (log.isDebugEnabled()) {                         log.debug("JSon schema\n" + schema).                     }                     // write this to the directory                     Path out = schemaOutDir.toPath().resolve(schemaSubDirectory(languageModel.getJavaType())).resolve(name + ".json").                     updateResource(buildContext, out, schema).                     if (log.isDebugEnabled()) {                         log.debug("Generated " + out + " containing JSon schema for " + name + " language").                     }                 }             } else {                 throw new MojoExecutionException("Error finding core/camel-core/target/camel-core-" + project.getVersion() + ".jar file. Make sure camel-core has been built first.").             }         }     } catch (Exception e) {         throw new MojoExecutionException("Error loading language model from camel-core. Reason: " + e, e).     }     if (count > 0) {         String names = buffer.toString().         Path outFile = camelMetaDir.toPath().resolve("language.properties").         String properties = createProperties(project, "languages", names).         updateResource(buildContext, outFile, properties).         log.info("Generated " + outFile + " containing " + count + " Camel " + (count > 1 ? "languages: " : "language: ") + names).     } else {         log.debug("No META-INF/services/org/apache/camel/language directory found. Are you sure you have created a Camel language?").     }     return count. }
false;private,static;3;30;;private static String readClassFromCamelResource(File file, StringBuilder buffer, BuildContext buildContext) throws MojoExecutionException {     // skip directories as there may be a sub .resolver directory such as in camel-script     if (file.isDirectory()) {         return null.     }     String name = file.getName().     if (name.charAt(0) != '.') {         if (buffer.length() > 0) {             buffer.append(" ").         }         buffer.append(name).     }     if (!buildContext.hasDelta(file)) {         // (but we do need the name above!)         return null.     }     // find out the javaType for each data format     try {         String text = loadText(new FileInputStream(file)).         Map<String, String> map = parseAsMap(text).         return map.get("class").     } catch (IOException e) {         throw new MojoExecutionException("Failed to read file " + file + ". Reason: " + e, e).     } }
false;private,static;1;9;;private static String asModelName(String name) {     // special for some languages     if ("bean".equals(name)) {         return "method".     } else if ("file".equals(name)) {         return "simple".     }     return name. }
false;private,static;2;7;;private static String asTitle(String name, String title) {     // special for some languages     if ("file".equals(name)) {         return "File".     }     return title. }
false;private,static;2;7;;private static String asDescription(String name, String description) {     // special for some languages     if ("file".equals(name)) {         return "For expressions and predicates using the file/simple language".     }     return description. }
false;private,static;1;5;;private static String schemaSubDirectory(String javaType) {     int idx = javaType.lastIndexOf('.').     String pckName = javaType.substring(0, idx).     return pckName.replace('.', '/'). }
false;private,static;2;32;;private static String createParameterJsonSchema(LanguageModel languageModel, String schema) {     StringBuilder buffer = new StringBuilder("{").     // language model     buffer.append("\n \"language\": {").     buffer.append("\n    \"name\": \"").append(languageModel.getName()).append("\",").     buffer.append("\n    \"kind\": \"").append("language").append("\",").     buffer.append("\n    \"modelName\": \"").append(languageModel.getModelName()).append("\",").     if (languageModel.getTitle() != null) {         buffer.append("\n    \"title\": \"").append(languageModel.getTitle()).append("\",").     }     if (languageModel.getDescription() != null) {         buffer.append("\n    \"description\": \"").append(languageModel.getDescription()).append("\",").     }     boolean deprecated = "true".equals(languageModel.getDeprecated()).     buffer.append("\n    \"deprecated\": ").append(deprecated).append(",").     if (languageModel.getFirstVersion() != null) {         buffer.append("\n    \"firstVersion\": \"").append(languageModel.getFirstVersion()).append("\",").     }     buffer.append("\n    \"label\": \"").append(languageModel.getLabel()).append("\",").     buffer.append("\n    \"javaType\": \"").append(languageModel.getJavaType()).append("\",").     if (languageModel.getModelJavaType() != null) {         buffer.append("\n    \"modelJavaType\": \"").append(languageModel.getModelJavaType()).append("\",").     }     buffer.append("\n    \"groupId\": \"").append(languageModel.getGroupId()).append("\",").     buffer.append("\n    \"artifactId\": \"").append(languageModel.getArtifactId()).append("\",").     buffer.append("\n    \"version\": \"").append(languageModel.getVersion()).append("\"").     buffer.append("\n  },").     buffer.append("\n  \"properties\": {").     buffer.append(schema).     return buffer.toString(). }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getTitle() {     return title. }
false;public;1;3;;public void setTitle(String title) {     this.title = title. }
false;public;0;3;;public String getModelName() {     return modelName. }
false;public;1;3;;public void setModelName(String modelName) {     this.modelName = modelName. }
false;public;0;3;;public String getModelJavaType() {     return modelJavaType. }
false;public;1;3;;public void setModelJavaType(String modelJavaType) {     this.modelJavaType = modelJavaType. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;1;3;;public void setDescription(String description) {     this.description = description. }
false;public;0;3;;public String getFirstVersion() {     return firstVersion. }
false;public;1;3;;public void setFirstVersion(String firstVersion) {     this.firstVersion = firstVersion. }
false;public;0;3;;public String getLabel() {     return label. }
false;public;1;3;;public void setLabel(String label) {     this.label = label. }
false;public;0;3;;public String getDeprecated() {     return deprecated. }
false;public;1;3;;public void setDeprecated(String deprecated) {     this.deprecated = deprecated. }
false;public;0;3;;public String getDeprecationNote() {     return deprecationNote. }
false;public;1;3;;public void setDeprecationNote(String deprecationNote) {     this.deprecationNote = deprecationNote. }
false;public;0;3;;public String getJavaType() {     return javaType. }
false;public;1;3;;public void setJavaType(String javaType) {     this.javaType = javaType. }
false;public;0;3;;public String getGroupId() {     return groupId. }
false;public;1;3;;public void setGroupId(String groupId) {     this.groupId = groupId. }
false;public;0;3;;public String getArtifactId() {     return artifactId. }
false;public;1;3;;public void setArtifactId(String artifactId) {     this.artifactId = artifactId. }
false;public;0;3;;public String getVersion() {     return version. }
false;public;1;3;;public void setVersion(String version) {     this.version = version. }
false;public;0;15;;@Override public String toString() {     return "LanguageModel[" + "name='" + name + '\'' + ", modelName='" + modelName + '\'' + ", title='" + title + '\'' + ", description='" + description + '\'' + ", label='" + label + '\'' + ", javaType='" + javaType + '\'' + ", modelJavaType='" + modelJavaType + '\'' + ", groupId='" + groupId + '\'' + ", artifactId='" + artifactId + '\'' + ", version='" + version + '\'' + ']'. }
