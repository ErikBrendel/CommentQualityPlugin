commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Execute goal.  *  * @throws MojoExecutionException execution of the main class or one of the  *                 threads it generated failed.  * @throws MojoFailureException something bad happened...  */ ;/**  * Execute goal.  *  * @throws MojoExecutionException execution of the main class or one of the  *                 threads it generated failed.  * @throws MojoFailureException something bad happened...  */ public void execute() throws MojoExecutionException, MojoFailureException {     processLegal(legalOutDir.toPath()). }
false;public;1;19;;public void processLegal(Path legalOutDir) throws MojoExecutionException {     // Only take care about camel legal stuff     if (!"org.apache.camel".equals(project.getGroupId())) {         return.     }     try (InputStream isLicense = getClass().getResourceAsStream("/camel-LICENSE.txt")) {         String license = IOUtils.toString(isLicense, StandardCharsets.UTF_8).         updateResource(legalOutDir.resolve("META-INF").resolve("LICENSE.txt"), license).     } catch (IOException e) {         throw new MojoExecutionException("Failed to write legal files. Reason: " + e, e).     }     try (InputStream isNotice = getClass().getResourceAsStream("/camel-NOTICE.txt")) {         String notice = IOUtils.toString(isNotice, StandardCharsets.UTF_8).         updateResource(legalOutDir.resolve("META-INF").resolve("NOTICE.txt"), notice).     } catch (IOException e) {         throw new MojoExecutionException("Failed to write legal files. Reason: " + e, e).     } }
