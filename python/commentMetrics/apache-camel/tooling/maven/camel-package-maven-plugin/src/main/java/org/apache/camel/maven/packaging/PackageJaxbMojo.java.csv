commented;modifiers;parameterAmount;loc;comment;code
true;public;0;9;/**  * Execute goal.  *  * @throws MojoExecutionException execution of the main class or one of the  *                 threads it generated failed.  * @throws MojoFailureException something bad happened...  */ ;/**  * Execute goal.  *  * @throws MojoExecutionException execution of the main class or one of the  *                 threads it generated failed.  * @throws MojoFailureException something bad happened...  */ public void execute() throws MojoExecutionException, MojoFailureException {     List<String> locations = new ArrayList<>().     locations.add(project.getBuild().getOutputDirectory()).     processClasses(createIndex(locations)).     Path path = jaxbIndexOutDir.toPath().     addResourceDirectory(path). }
false;private;1;41;;private void processClasses(IndexView index) {     Map<String, Set<String>> byPackage = new HashMap<>().     Stream.of(XmlRootElement.class, XmlEnum.class).map(Class::getName).map(DotName::createSimple).map(index::getAnnotations).flatMap(Collection::stream).map(AnnotationInstance::target).map(AnnotationTarget::asClass).map(ClassInfo::name).map(DotName::toString).forEach(name -> {         int idx = name.lastIndexOf('.').         String p = name.substring(0, idx).         String c = name.substring(idx + 1).         byPackage.computeIfAbsent(p, s -> new TreeSet<>()).add(c).     }).     Path jaxbIndexDir = jaxbIndexOutDir.toPath().     int count = 0.     for (Map.Entry<String, Set<String>> entry : byPackage.entrySet()) {         String fn = entry.getKey().replace('.', '/') + "/jaxb.index".         if (project.getCompileSourceRoots().stream().map(Paths::get).map(p -> p.resolve(fn)).anyMatch(Files::isRegularFile)) {             continue.         }         Path file = jaxbIndexDir.resolve(fn).         StringBuilder sb = new StringBuilder().         sb.append("# " + GENERATED_MSG + NL).         for (String s : entry.getValue()) {             sb.append(s).             sb.append(NL).         }         updateResource(file, sb.toString()).     }     getLog().info("Generated " + jaxbIndexOutDir + " containing " + count + " jaxb.index elements"). }
false;private;1;15;;private IndexView createIndex(List<String> locations) throws MojoExecutionException {     try {         Indexer indexer = new Indexer().         locations.stream().map(this::asFolder).filter(Files::isDirectory).flatMap(this::walk).filter(Files::isRegularFile).filter(p -> p.getFileName().toString().endsWith(".class")).forEach(p -> index(indexer, p)).         return indexer.complete().     } catch (IOError e) {         throw new MojoExecutionException("Error", e).     } }
false;private;1;15;;private Path asFolder(String p) {     if (p.endsWith(".jar")) {         File fp = new File(p).         try {             Map<String, String> env = new HashMap<>().             return FileSystems.newFileSystem(URI.create("jar:" + fp.toURI().toString()), env).getPath("/").         } catch (FileSystemAlreadyExistsException e) {             return FileSystems.getFileSystem(URI.create("jar:" + fp.toURI().toString())).getPath("/").         } catch (IOException e) {             throw new IOError(e).         }     } else {         return Paths.get(p).     } }
false;private;1;7;;private Stream<Path> walk(Path p) {     try {         return Files.walk(p).     } catch (IOException e) {         throw new IOError(e).     } }
false;private;2;7;;private void index(Indexer indexer, Path p) {     try (InputStream is = Files.newInputStream(p)) {         indexer.index(is).     } catch (IOException e) {         throw new IOError(e).     } }
