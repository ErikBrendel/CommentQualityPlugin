commented;modifiers;parameterAmount;loc;comment;code
false;;0;40;;DestinationGenerator createDestinationGenerator() throws MojoExecutionException {     final Class<DestinationGenerator> destinationGeneratorClass.     final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader().     final URL outputDirectory.     try {         outputDirectory = new File(project.getBuild().getOutputDirectory()).toURI().toURL().     } catch (final MalformedURLException e) {         throw new IllegalStateException(e).     }     final URL[] withOutput = new URL[] { outputDirectory }.     try (URLClassLoader classLoader = new URLClassLoader(withOutput, contextClassLoader)) {         @SuppressWarnings("unchecked")         final Class<DestinationGenerator> tmp = (Class) classLoader.loadClass(destinationGenerator).         if (!DestinationGenerator.class.isAssignableFrom(tmp)) {             throw new MojoExecutionException("The given destinationGenerator class (" + destinationGenerator + ") does not implement " + DestinationGenerator.class.getName() + " interface.").         }         destinationGeneratorClass = tmp.     } catch (final ClassNotFoundException | IOException e) {         throw new MojoExecutionException("The given destinationGenerator class (" + destinationGenerator + ") cannot be loaded, make sure that it is present in the COMPILE classpath scope of the project", e).     }     final DestinationGenerator destinationGeneratorObject.     try {         destinationGeneratorObject = destinationGeneratorClass.newInstance().     } catch (InstantiationException | IllegalAccessException e) {         throw new MojoExecutionException("The given destinationGenerator class (" + destinationGenerator + ") cannot be instantiated, make sure that it is declared as public and that all dependencies are present on the COMPILE classpath scope of the project", e).     }     return destinationGeneratorObject. }
false;;1;46;;void generateDto(String language) throws MojoExecutionException {     getLog().info("Generating DTO classes using io.swagger:swagger-codegen-maven-plugin:" + swaggerCodegenMavenPluginVersion).     // swagger-codegen-maven-plugin documentation and its supported options     // https://github.com/swagger-api/swagger-codegen/tree/master/modules/swagger-codegen-maven-plugin     List<MojoExecutor.Element> elements = new ArrayList<>().     elements.add(new MojoExecutor.Element("inputSpec", specificationUri)).     elements.add(new MojoExecutor.Element("language", language)).     elements.add(new MojoExecutor.Element("generateApis", "false")).     elements.add(new MojoExecutor.Element("generateModelTests", "false")).     elements.add(new MojoExecutor.Element("generateModelDocumentation", "false")).     elements.add(new MojoExecutor.Element("generateSupportingFiles", "false")).     if (modelOutput != null) {         elements.add(new MojoExecutor.Element("output", modelOutput)).     }     if (modelPackage != null) {         elements.add(new MojoExecutor.Element("modelPackage", modelPackage)).     }     if (modelNamePrefix != null) {         elements.add(new MojoExecutor.Element("modelNamePrefix", modelNamePrefix)).     }     if (modelNameSuffix != null) {         elements.add(new MojoExecutor.Element("modelNameSuffix", modelNameSuffix)).     }     if (modelWithXml != null) {         elements.add(new MojoExecutor.Element("withXml", modelPackage)).     }     executeMojo(plugin(groupId("io.swagger"), artifactId("swagger-codegen-maven-plugin"), version(swaggerCodegenMavenPluginVersion)), goal("generate"), configuration(elements.toArray(new MojoExecutor.Element[elements.size()])), executionEnvironment(mavenProject, mavenSession, pluginManager)). }
false;protected;0;12;;protected String detectRestComponentFromClasspath() {     for (Dependency dep : mavenProject.getDependencies()) {         if ("org.apache.camel".equals(dep.getGroupId())) {             String aid = dep.getArtifactId().             Optional<String> comp = Arrays.asList(DEFAULT_REST_CONSUMER_COMPONENTS).stream().filter(c -> aid.startsWith("camel-" + c)).findFirst().             if (comp.isPresent()) {                 return comp.get().             }         }     }     return null. }
false;protected;0;3;;protected boolean detectSpringBootFromClasspath() {     return mavenProject.getDependencies().stream().anyMatch(d -> "org.springframework.boot".equals(d.getGroupId())). }
false;protected;0;5;;protected String detectCamelVersionFromClasspath() {     return mavenProject.getDependencies().stream().filter(d -> "org.apache.camel".equals(d.getGroupId()) && ObjectHelper.isNotEmpty(d.getVersion())).findFirst().map(Dependency::getVersion).orElse(null). }
false;protected;0;9;;protected String detectSpringBootMainPackage() throws IOException {     for (String src : mavenProject.getCompileSourceRoots()) {         String d = findSpringSpringBootPackage(new File(src)).         if (d != null) {             return d.         }     }     return null. }
false;protected;1;19;;protected String findSpringSpringBootPackage(File dir) throws IOException {     File[] files = dir.listFiles().     if (files != null) {         for (File file : files) {             if (file.getName().endsWith(".java")) {                 String content = IOHelper.loadText(new FileInputStream(file)).                 if (content.contains("@SpringBootApplication")) {                     return grabPackageName(content).                 }             } else if (file.isDirectory()) {                 String packageName = findSpringSpringBootPackage(file).                 if (packageName != null) {                     return packageName.                 }             }         }     }     return null. }
false;protected;1;15;;protected String grabPackageName(String content) {     String[] lines = content.split("\\n").     for (String line : lines) {         line = line.trim().         if (line.startsWith("package ")) {             line = line.substring(8).             line = line.trim().             if (line.endsWith(".")) {                 line = line.substring(0, line.length() - 1).             }             return line.         }     }     return null. }
