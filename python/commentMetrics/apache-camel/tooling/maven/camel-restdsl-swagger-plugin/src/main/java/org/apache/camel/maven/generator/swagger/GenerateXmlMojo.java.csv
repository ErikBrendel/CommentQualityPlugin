commented;modifiers;parameterAmount;loc;comment;code
false;public;0;78;;@Override public void execute() throws MojoExecutionException {     if (skip) {         return.     }     final SwaggerParser swaggerParser = new SwaggerParser().     final Swagger swagger = swaggerParser.read(specificationUri).     if (swagger == null) {         throw new MojoExecutionException("Unable to generate REST DSL Swagger sources from specification: " + specificationUri + ", make sure that the specification is available at the given URI").     }     final RestDslXmlGenerator generator = RestDslGenerator.toXml(swagger).     if (blueprint) {         generator.withBlueprint().     }     if (ObjectHelper.isNotEmpty(filterOperation)) {         generator.withOperationFilter(filterOperation).     }     if (ObjectHelper.isNotEmpty(destinationGenerator)) {         final DestinationGenerator destinationGeneratorObject = createDestinationGenerator().         generator.withDestinationGenerator(destinationGeneratorObject).     }     if (restConfiguration) {         String comp = detectRestComponentFromClasspath().         if (comp != null) {             getLog().info("Detected Camel Rest component from classpath: " + comp).             generator.withRestComponent(comp).         } else {             comp = "servlet".             // is it spring boot?             String aid = "camel-servlet".             if (detectSpringBootFromClasspath()) {                 aid = "camel-servlet-starter".             }             String dep = "\n\t\t<dependency>" + "\n\t\t\t<groupId>org.apache.camel</groupId>" + "\n\t\t\t<artifactId>" + aid + "</artifactId>".             String ver = detectCamelVersionFromClasspath().             if (ver != null) {                 dep += "\n\t\t\t<version>" + ver + "</version>".             }             dep += "\n\t\t</dependency>\n".             getLog().info("Cannot detect Rest component from classpath. Will use servlet as Rest component.").             getLog().info("Add the following dependency in the Maven pom.xml file:\n" + dep + "\n").             generator.withRestComponent(comp).         }     }     try {         CamelContext camel = new DefaultCamelContext().         String xml = generator.generate(camel).         // ensure output folder is created         new File(outputDirectory).mkdirs().         File out = new File(outputDirectory, fileName).         FileOutputStream fos = new FileOutputStream(out).         fos.write(xml.getBytes()).         fos.close().     } catch (final Exception e) {         throw new MojoExecutionException("Unable to generate REST DSL Swagger sources from specification: " + specificationUri, e).     } }
