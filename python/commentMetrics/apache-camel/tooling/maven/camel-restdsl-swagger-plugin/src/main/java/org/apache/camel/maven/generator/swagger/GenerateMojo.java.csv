commented;modifiers;parameterAmount;loc;comment;code
false;public;0;110;;@Override public void execute() throws MojoExecutionException {     if (skip) {         return.     }     final SwaggerParser swaggerParser = new SwaggerParser().     final Swagger swagger = swaggerParser.read(specificationUri).     if (swagger == null) {         throw new MojoExecutionException("Unable to generate REST DSL Swagger sources from specification: " + specificationUri + ", make sure that the specification is available at the given URI").     }     final RestDslSourceCodeGenerator<Path> generator = RestDslGenerator.toPath(swagger).     if (ObjectHelper.isNotEmpty(filterOperation)) {         generator.withOperationFilter(filterOperation).     }     if (ObjectHelper.isNotEmpty(className)) {         generator.withClassName(className).     }     if (indent != null) {         generator.withIndent(indent.replace("\\t", "\t")).     }     if (ObjectHelper.isNotEmpty(packageName)) {         generator.withPackageName(packageName).     }     if (ObjectHelper.isNotEmpty(destinationGenerator)) {         final DestinationGenerator destinationGeneratorObject = createDestinationGenerator().         generator.withDestinationGenerator(destinationGeneratorObject).     }     final Path outputPath = new File(outputDirectory).toPath().     if (restConfiguration) {         String comp = detectRestComponentFromClasspath().         if (comp != null) {             getLog().info("Detected Camel Rest component from classpath: " + comp).             generator.withRestComponent(comp).         } else {             comp = "servlet".             // is it spring boot?             String aid = "camel-servlet".             if (detectSpringBootFromClasspath()) {                 aid = "camel-servlet-starter".             }             String dep = "\n\t\t<dependency>" + "\n\t\t\t<groupId>org.apache.camel</groupId>" + "\n\t\t\t<artifactId>" + aid + "</artifactId>".             String ver = detectCamelVersionFromClasspath().             if (ver != null) {                 dep += "\n\t\t\t<version>" + ver + "</version>".             }             dep += "\n\t\t</dependency>\n".             getLog().info("Cannot detect Rest component from classpath. Will use servlet as Rest component.").             getLog().info("Add the following dependency in the Maven pom.xml file:\n" + dep + "\n").             generator.withRestComponent("servlet").         }         if (ObjectHelper.isNotEmpty(apiContextPath)) {             generator.withApiContextPath(apiContextPath).         }         // if its a spring boot project and we use servlet then we should generate additional source code         if (detectSpringBootFromClasspath() && "servlet".equals(comp)) {             try {                 if (ObjectHelper.isEmpty(packageName)) {                     // if not explicit package name then try to use package where the spring boot application is located                     String pName = detectSpringBootMainPackage().                     if (pName != null) {                         packageName = pName.                         generator.withPackageName(packageName).                         getLog().info("Detected @SpringBootApplication, and will be using its package name: " + packageName).                     }                 }                 getLog().info("Generating Camel Rest Controller source with package name " + packageName + " in source directory: " + outputPath).                 SpringBootProjectSourceCodeGenerator.generator().withPackageName(packageName).generate(outputPath).                 // the Camel Rest Controller allows to use root as context-path                 generator.withRestContextPath("/").             } catch (final IOException e) {                 throw new MojoExecutionException("Unable to generate Camel Rest Controller source due " + e.getMessage(), e).             }         }     }     if (detectSpringBootFromClasspath()) {         generator.asSpringComponent().         generator.asSpringBootProject().     }     try {         getLog().info("Generating Camel DSL source in directory: " + outputPath).         generator.generate(outputPath).     } catch (final IOException e) {         throw new MojoExecutionException("Unable to generate REST DSL Swagger sources from specification: " + specificationUri, e).     } }
