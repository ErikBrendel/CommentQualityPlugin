commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;public boolean matches(Dependency artifact) {     Set<String> expanded = expand(selectors).     String coordinates = toCoordinates(artifact).     for (String e : expanded) {         if (SelectorUtils.match(e, coordinates)) {             return true.         }     }     return false. }
false;private;1;7;;private String toCoordinates(Dependency artifact) {     return String.format(ARTIFACT_FORMAT, artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getType(), artifact.getClassifier()). }
false;private;1;23;;private Set<String> expand(Collection<String> set) {     Set<String> result = new HashSet<>().     if (set != null) {         for (String exclusion : set) {             Matcher m = ARTIFACT_PATTERN.matcher(exclusion).             if (!m.matches()) {                 throw new IllegalArgumentException("Pattern: " + exclusion + " doesn't have the required format.").             }             String groupId = m.group("groupId").             String artifactId = m.group("artifactId").             String version = m.group("version").             String type = m.group("type").             String classifier = m.group("classifier").             version = version != null ? version : "*".             type = type != null ? type : "*".             classifier = classifier != null ? classifier : "*".             result.add(String.format(ARTIFACT_FORMAT, groupId, artifactId, version, type, classifier)).         }     }     return result. }
