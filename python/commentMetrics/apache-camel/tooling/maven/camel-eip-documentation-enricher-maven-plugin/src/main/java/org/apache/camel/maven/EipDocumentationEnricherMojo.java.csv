commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Override public void execute() throws MojoExecutionException, MojoFailureException {     if (pathToModelDir == null) {         throw new MojoExecutionException("pathToModelDir parameter must not be null").     }     // skip if input file does not exists     if (inputCamelSchemaFile == null || !inputCamelSchemaFile.exists()) {         getLog().info("Input Camel schema file: " + inputCamelSchemaFile + " does not exist. Skip EIP document enrichment").         return.     }     validateExists(inputCamelSchemaFile, "inputCamelSchemaFile").     validateIsFile(inputCamelSchemaFile, "inputCamelSchemaFile").     validateExists(camelCoreDir, "camelCoreDir").     validateExists(camelCoreXmlDir, "camelCoreXmlDir").     validateExists(camelSpringDir, "camelSpringDir").     validateIsDirectory(camelCoreDir, "camelCoreDir").     validateIsDirectory(camelCoreXmlDir, "camelCoreXmlDir").     validateIsDirectory(camelSpringDir, "camelSpringDir").     try {         runPlugin().     } catch (Exception e) {         throw new MojoExecutionException("Error during plugin execution", e).     }     if (deleteFilesAfterRun != null) {         deleteFilesAfterDone(deleteFilesAfterRun).     } }
false;private;0;36;;private void runPlugin() throws Exception {     Document document = XmlHelper.buildNamespaceAwareDocument(inputCamelSchemaFile).     XPath xPath = XmlHelper.buildXPath(new CamelSpringNamespace()).     DomFinder domFinder = new DomFinder(document, xPath).     DocumentationEnricher documentationEnricher = new DocumentationEnricher(document).     // include schema files from camel-core, camel-corem-xml and from camel-spring     File rootDir = new File(camelCoreDir, pathToModelDir).     Map<String, File> jsonFiles = PackageHelper.findJsonFiles(rootDir).     File rootDir2 = new File(camelCoreXmlDir, pathToCoreXmlModelDir).     Map<String, File> jsonFiles2 = PackageHelper.findJsonFiles(rootDir2).     File rootDir3 = new File(camelSpringDir, pathToSpringModelDir).     Map<String, File> jsonFiles3 = PackageHelper.findJsonFiles(rootDir3).     // merge the json files together     jsonFiles.putAll(jsonFiles2).     jsonFiles.putAll(jsonFiles3).     NodeList elementsAndTypes = domFinder.findElementsAndTypes().     documentationEnricher.enrichTopLevelElementsDocumentation(elementsAndTypes, jsonFiles).     Map<String, String> typeToNameMap = buildTypeToNameMap(elementsAndTypes).     Set<String> injectedTypes = new LinkedHashSet<>().     getLog().info("Found " + typeToNameMap.size() + " models to use when enriching the XSD schema").     for (Map.Entry<String, String> entry : typeToNameMap.entrySet()) {         String elementType = entry.getKey().         String elementName = entry.getValue().         if (jsonFileExistsForElement(jsonFiles, elementName)) {             getLog().debug("Enriching " + elementName).             File file = jsonFiles.get(elementName).             injectAttributesDocumentation(domFinder, documentationEnricher, file, elementType, injectedTypes).         }     }     saveToFile(document, outputCamelSchemaFile, XmlHelper.buildTransformer()). }
false;private;2;4;;private boolean jsonFileExistsForElement(Map<String, File> jsonFiles, String elementName) {     return jsonFiles.containsKey(elementName). }
false;private;1;7;;private void deleteFilesAfterDone(String deleteFiles) {     String[] names = deleteFiles.split(",").     for (String name : names) {         File file = new File(name).         FileUtil.deleteFile(file).     } }
true;private;5;21;/**  * Recursively injects documentation to complex type attributes and it's parents.  */ ;/**  * Recursively injects documentation to complex type attributes and it's parents.  */ private void injectAttributesDocumentation(DomFinder domFinder, DocumentationEnricher documentationEnricher, File jsonFile, String type, Set<String> injectedTypes) throws XPathExpressionException, IOException {     if (injectedTypes.contains(type)) {         return.     }     injectedTypes.add(type).     NodeList attributeElements = domFinder.findAttributesElements(type).     if (attributeElements.getLength() > 0) {         documentationEnricher.enrichTypeAttributesDocumentation(getLog(), attributeElements, jsonFile).     }     String baseType = domFinder.findBaseType(type).     if (baseType != null && !StringUtils.isEmpty(baseType)) {         baseType = truncateTypeNamespace(baseType).         injectAttributesDocumentation(domFinder, documentationEnricher, jsonFile, baseType, injectedTypes).     } }
false;private;1;16;;private Map<String, String> buildTypeToNameMap(NodeList elementsAndTypes) {     Map<String, String> typeToNameMap = new LinkedHashMap<>().     for (int i = 0. i < elementsAndTypes.getLength(). i++) {         Element item = (Element) elementsAndTypes.item(i).         String name = item.getAttribute(Constants.NAME_ATTRIBUTE_NAME).         String type = item.getAttribute(Constants.TYPE_ATTRIBUTE_NAME).         if (name != null && type != null) {             type = truncateTypeNamespace(type).             if (getLog().isDebugEnabled()) {                 getLog().debug(String.format("Putting attributes type:'%s', name:'%s'", name, type)).             }             typeToNameMap.put(type, name).         }     }     return typeToNameMap. }
false;private;1;3;;private String truncateTypeNamespace(String baseType) {     return baseType.replaceAll("tns:", ""). }
false;private;3;5;;private void saveToFile(Document document, File outputFile, Transformer transformer) throws FileNotFoundException, TransformerException {     StreamResult result = new StreamResult(new FileOutputStream(outputFile)).     DOMSource source = new DOMSource(document).     transformer.transform(source, result). }
false;private;2;5;;private void validateIsFile(File file, String name) throws MojoExecutionException {     if (!file.isFile()) {         throw new MojoExecutionException(name + "is not a file").     } }
false;private;2;5;;private void validateIsDirectory(File file, String name) throws MojoExecutionException {     if (!file.isDirectory()) {         throw new MojoExecutionException(name + "is not a directory").     } }
false;private;2;5;;private void validateExists(File file, String name) throws MojoExecutionException {     if (file == null || !file.exists()) {         throw new MojoExecutionException(name + " does not exist").     } }
