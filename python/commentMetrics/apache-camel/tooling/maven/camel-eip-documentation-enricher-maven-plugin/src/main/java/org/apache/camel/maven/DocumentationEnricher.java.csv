commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;public void enrichTopLevelElementsDocumentation(NodeList elements, Map<String, File> jsonFiles) throws IOException {     for (int i = 0. i < elements.getLength(). i++) {         Element item = (Element) elements.item(i).         String name = item.getAttribute(Constants.NAME_ATTRIBUTE_NAME).         if (jsonFiles.containsKey(name)) {             addElementDocumentation(item, jsonFiles.get(name)).         }     } }
false;public;3;6;;public void enrichTypeAttributesDocumentation(Log log, NodeList attributeElements, File jsonFile) throws IOException {     for (int j = 0. j < attributeElements.getLength(). j++) {         Element item = (Element) attributeElements.item(j).         addAttributeDocumentation(log, item, jsonFile).     } }
false;private;2;10;;private void addElementDocumentation(Element item, File jsonFile) throws IOException {     List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema(Constants.MODEL_ATTRIBUTE_NAME, PackageHelper.fileToString(jsonFile), false).     for (Map<String, String> row : rows) {         if (row.containsKey(Constants.DESCRIPTION_ATTRIBUTE_NAME)) {             String descriptionText = row.get(Constants.DESCRIPTION_ATTRIBUTE_NAME).             addDocumentation(item, descriptionText).             break.         }     } }
false;private;3;46;;private void addAttributeDocumentation(Log log, Element item, File jsonFile) throws IOException {     String name = item.getAttribute(Constants.NAME_ATTRIBUTE_NAME).     if (isNullOrEmpty(name)) {         return.     }     String descriptionText = null.     String defaultValueText = null.     String deprecatedText = null.     List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema(Constants.PROPERTIES_ATTRIBUTE_NAME, PackageHelper.fileToString(jsonFile), true).     for (Map<String, String> row : rows) {         if (name.equals(row.get(Constants.NAME_ATTRIBUTE_NAME))) {             descriptionText = row.get(Constants.DESCRIPTION_ATTRIBUTE_NAME).             defaultValueText = row.get(Constants.DEFAULT_VALUE_ATTRIBUTE_NAME).             deprecatedText = row.get(Constants.DEPRECATED_ATTRIBUTE_NAME).         }     }     // special as this option is only in camel-blueprint     if ("useBlueprintPropertyResolver".equals(name)) {         descriptionText = "Whether to automatic detect OSGi Blueprint property placeholder service in use, and bridge with Camel property placeholder." + " When enabled this allows you to only setup OSGi Blueprint property placeholder and Camel can use the properties in the <camelContext>.".         defaultValueText = "true".     }     if ("true".equals(deprecatedText)) {         descriptionText = "Deprecated: " + descriptionText.     }     if (!isNullOrEmpty(descriptionText)) {         String text = descriptionText.         if (!isNullOrEmpty(defaultValueText)) {             text += (!text.endsWith(".") ? "." : "") + (" Default value: " + defaultValueText).         }         addDocumentation(item, text).     } else {         // we should skip warning about these if no documentation as they are special         boolean skip = "customId".equals(name) || "inheritErrorHandler".equals(name) || "rest".equals(name) && jsonFile.getName().endsWith("route.json").         if (!skip) {             log.warn("Cannot find documentation for name: " + name + " in json schema: " + jsonFile).         }     } }
false;private;2;13;;private void addDocumentation(Element item, String textContent) {     Element annotation = document.createElement(Constants.XS_ANNOTATION_ELEMENT_NAME).     Element documentation = document.createElement(Constants.XS_DOCUMENTATION_ELEMENT_NAME).     documentation.setAttribute("xml:lang", "en").     CDATASection cdataDocumentationText = document.createCDATASection(formatTextContent(item, textContent)).     documentation.appendChild(cdataDocumentationText).     annotation.appendChild(documentation).     if (item.getFirstChild() != null) {         item.insertBefore(annotation, item.getFirstChild()).     } else {         item.appendChild(annotation).     } }
false;private;2;9;;private String formatTextContent(Element item, String textContent) {     StringBuilder stringBuilder = new StringBuilder().     stringBuilder.append(System.lineSeparator()).append(WordUtils.wrap(textContent, Constants.WRAP_LENGTH)).append(System.lineSeparator()).append(StringUtils.repeat(Constants.DEFAULT_XML_INTENTION, getNodeDepth(item))).     return stringBuilder.toString(). }
false;private;1;8;;private int getNodeDepth(Node item) {     int depth = 1.     while (item.getParentNode() != null) {         depth++.         item = item.getParentNode().     }     return depth. }
