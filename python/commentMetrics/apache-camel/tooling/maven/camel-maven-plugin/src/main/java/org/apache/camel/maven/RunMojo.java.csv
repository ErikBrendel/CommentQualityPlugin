# id;timestamp;commentText;codeText;commentWords;codeWords
RunMojo -> protected void afterBootstrapCamel() throws Exception;1385953128;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1385989174;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1388443957;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1427090237;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1434620118;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1447426886;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1447432935;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1451121248;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1451412030;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1451417222;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1457013337;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1457014530;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1473505412;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1481880031;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1482161686;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1488463207;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1488476333;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1489581676;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1511424277;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1524063336;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1540108164;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1547240981;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> protected void afterBootstrapCamel() throws Exception;1548788730;Allows plugin extensions to do custom logic after bootstrapping Camel.;protected void afterBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,after,bootstrapping,camel;protected,void,after,bootstrap,camel,throws,exception
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1317763232;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1317831924;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1325694383;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1325779288;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1326499990;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1326623920;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1327086444;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1334243189;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1334249092;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1336211001;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1346758596;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1347388466;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1349099486;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1360254699;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1360273693;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1187272534;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                URL testClasses = new File(project.getBuild().getTestOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + testClasses)__                path.add(testClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getSystemScopeDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId() + " to classpath")__                    path.add(classPathElement.getFile().toURL())__                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,url,test,classes,new,file,project,get,build,get,test,output,directory,to,url,get,log,debug,adding,to,classpath,test,classes,path,add,test,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,system,scope,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1189091341;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                URL testClasses = new File(project.getBuild().getTestOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + testClasses)__                path.add(testClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getSystemScopeDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId() + " to classpath")__                    path.add(classPathElement.getFile().toURL())__                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,url,test,classes,new,file,project,get,build,get,test,output,directory,to,url,get,log,debug,adding,to,classpath,test,classes,path,add,test,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,system,scope,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1189839305;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                URL testClasses = new File(project.getBuild().getTestOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + testClasses)__                path.add(testClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getSystemScopeDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId() + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,url,test,classes,new,file,project,get,build,get,test,output,directory,to,url,get,log,debug,adding,to,classpath,test,classes,path,add,test,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,system,scope,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1206583462;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                URL testClasses = new File(project.getBuild().getTestOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + testClasses)__                path.add(testClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getSystemScopeDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug(_                                   "Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,url,test,classes,new,file,project,get,build,get,test,output,directory,to,url,get,log,debug,adding,to,classpath,test,classes,path,add,test,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,system,scope,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1207386749;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                URL testClasses = new File(project.getBuild().getTestOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + testClasses)__                path.add(testClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getSystemScopeDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug(_                                   "Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,url,test,classes,new,file,project,get,build,get,test,output,directory,to,url,get,log,debug,adding,to,classpath,test,classes,path,add,test,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,system,scope,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1212331146;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                URL testClasses = new File(project.getBuild().getTestOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + testClasses)__                path.add(testClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getSystemScopeDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug(_                                   "Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,url,test,classes,new,file,project,get,build,get,test,output,directory,to,url,get,log,debug,adding,to,classpath,test,classes,path,add,test,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,system,scope,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1214324795;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                URL testClasses = new File(project.getBuild().getTestOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + testClasses)__                path.add(testClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getSystemScopeDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug(_                                   "Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,url,test,classes,new,file,project,get,build,get,test,output,directory,to,url,get,log,debug,adding,to,classpath,test,classes,path,add,test,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,system,scope,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1215270204;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                URL testClasses = new File(project.getBuild().getTestOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + testClasses)__                path.add(testClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getSystemScopeDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug(_                                   "Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,url,test,classes,new,file,project,get,build,get,test,output,directory,to,url,get,log,debug,adding,to,classpath,test,classes,path,add,test,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,system,scope,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1215417637;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                URL testClasses = new File(project.getBuild().getTestOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + testClasses)__                path.add(testClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getSystemScopeDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug(_                                   "Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,url,test,classes,new,file,project,get,build,get,test,output,directory,to,url,get,log,debug,adding,to,classpath,test,classes,path,add,test,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,system,scope,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1218042554;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                URL testClasses = new File(project.getBuild().getTestOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + testClasses)__                path.add(testClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getSystemScopeDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug(_                                   "Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,url,test,classes,new,file,project,get,build,get,test,output,directory,to,url,get,log,debug,adding,to,classpath,test,classes,path,add,test,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,system,scope,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1221674225;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getSystemScopeDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,system,scope,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1221720206;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1224637539;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1236234347;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1237977922;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1238053857;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1238054097;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1247130947;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1267540646;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException;1311876626;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(List path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set dependencies = project.getArtifacts()___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = (Artifact)iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,dependencies,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1187272534;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId() + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1189091341;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId() + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1189839305;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId() + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1206583462;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug(_                               "Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1207386749;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug(_                               "Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1212331146;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug(_                               "Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1214324795;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug(_                               "Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1215270204;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug(_                               "Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1215417637;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug(_                               "Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1218042554;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug(_                               "Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1221674225;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1221720206;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1224637539;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1236234347;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1237977922;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1238053857;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1238054097;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1247130947;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1267540646;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException;1311876626;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1187272534;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1189091341;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1189839305;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1206583462;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1207386749;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1212331146;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1214324795;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1215270204;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1215417637;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1218042554;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1221674225;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1221720206;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1224637539;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1236234347;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1237977922;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1238053857;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1238054097;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1247130947;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1267540646;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set determineRelevantPluginDependencies() throws MojoExecutionException;1311876626;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set determineRelevantPluginDependencies() throws MojoExecutionException {_        Set relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.EMPTY_SET__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1187272534;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotFile != null && dotEnabled) {_            args.add("-f")__            args.add(dotFile)__        }_        args.add("-d")__        args.add(duration)__        if (arguments != null) {_        args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass).getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,file,null,dot,enabled,args,add,f,args,add,dot,file,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1189091341;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotFile != null && dotEnabled) {_            args.add("-f")__            args.add(dotFile)__        }_        args.add("-d")__        args.add(duration)__        if (arguments != null) {_        args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass).getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,file,null,dot,enabled,args,add,f,args,add,dot,file,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1189839305;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && dotEnabled) {_            args.add("-o")__            args.add(dotDir)__        }_        args.add("-d")__        args.add(duration)__        if (arguments != null) {_        args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass).getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,dot,enabled,args,add,o,args,add,dot,dir,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1206583462;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog()_                .warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && dotEnabled) {_            args.add("-o")__            args.add(dotDir)__        }_        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog()_                .warn(_                      "Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,dot,enabled,args,add,o,args,add,dot,dir,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1207386749;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog()_                .warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && dotEnabled) {_            args.add("-o")__            args.add(dotDir)__        }__        if (applicationContextUri != null) {_            args.add("-a")__            args.add(applicationContextUri)__        }__        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog()_                .warn(_                      "Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,dot,enabled,args,add,o,args,add,dot,dir,if,application,context,uri,null,args,add,a,args,add,application,context,uri,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1212331146;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog()_                .warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && dotEnabled) {_            args.add("-o")__            args.add(dotDir)__        }__        if (applicationContextUri != null) {_            args.add("-a")__            args.add(applicationContextUri)__        }__        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog()_                .warn(_                      "Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,dot,enabled,args,add,o,args,add,dot,dir,if,application,context,uri,null,args,add,a,args,add,application,context,uri,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1214324795;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog()_                .warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && dotEnabled) {_            args.add("-o")__            args.add(dotDir)__        }_        if (debug) {_            args.add("-x")__        }_        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-a")__            args.add(applicationContextUri)__        }__        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog()_                .warn(_                      "Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,dot,enabled,args,add,o,args,add,dot,dir,if,debug,args,add,x,if,trace,args,add,t,if,application,context,uri,null,args,add,a,args,add,application,context,uri,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1215270204;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog()_                .warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && dotEnabled) {_            args.add("-o")__            args.add(dotDir)__        }_        if (debug) {_            args.add("-x")__        }_        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-a")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }__        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog()_                .warn(_                      "Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,dot,enabled,args,add,o,args,add,dot,dir,if,debug,args,add,x,if,trace,args,add,t,if,application,context,uri,null,args,add,a,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1215417637;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog()_                .warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && dotEnabled) {_            args.add("-o")__            args.add(dotDir)__        }_        if (debug) {_            args.add("-x")__        }_        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-a")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }__        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog()_                .warn(_                      "Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,dot,enabled,args,add,o,args,add,dot,dir,if,debug,args,add,x,if,trace,args,add,t,if,application,context,uri,null,args,add,a,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1218042554;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog()_                .warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && dotEnabled) {_            args.add("-o")__            args.add(dotDir)__        }_        if (debug) {_            args.add("-x")__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-a")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }__        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog()_                .warn(_                      "Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,dot,enabled,args,add,o,args,add,dot,dir,if,debug,args,add,x,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,a,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1221674225;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && dotEnabled) {_            args.add("-o")__            args.add(dotDir)__        }_        if (debug) {_            args.add("-x")__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-a")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }__        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog()_                .warn(_                      "Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,dot,enabled,args,add,o,args,add,dot,dir,if,debug,args,add,x,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,a,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1221720206;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && dotEnabled) {_            args.add("-o")__            args.add(dotDir)__        }_        if (debug) {_            args.add("-x")__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-a")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }__        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,dot,enabled,args,add,o,args,add,dot,dir,if,debug,args,add,x,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,a,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1224637539;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && dotEnabled) {_            args.add("-o")__            args.add(dotDir)__        }_        if (debug) {_            args.add("-x")__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }__        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,dot,enabled,args,add,o,args,add,dot,dir,if,debug,args,add,x,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1236234347;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (debug) {_            args.add("-x")__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }__        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,debug,args,add,x,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1237977922;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (debug) {_            args.add("-x")__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initate a camel context")__        }__        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,debug,args,add,x,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1238053857;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (debug) {_            args.add("-x")__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initate a camel context")__        }_        _        System.out.println("The mainClass is " + mainClass)___        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,debug,args,add,x,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initate,a,camel,context,system,out,println,the,main,class,is,main,class,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1238054097;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (debug) {_            args.add("-x")__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initate a camel context")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,debug,args,add,x,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1247130947;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initate a camel context")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1267540646;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1311876626;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1317763232;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1317831924;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1325694383;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1325779288;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1326499990;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1326623920;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1327086444;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1334243189;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using the org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking : ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,the,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1334249092;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            includePluginDependencies = true__            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,include,plugin,dependencies,true,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1336211001;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            includePluginDependencies = true__            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,include,plugin,dependencies,true,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1346758596;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            includePluginDependencies = true__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            includePluginDependencies = true__            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuffer msg = new StringBuffer("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,include,plugin,dependencies,true,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,include,plugin,dependencies,true,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,if,get,log,is,debug,enabled,string,buffer,msg,new,string,buffer,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1347388466;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            includePluginDependencies = true__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            includePluginDependencies = true__            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    System.err.println("*************************************")__                    System.err.println("Error occurred while running main from: " + mainClass)__                    e.printStackTrace()__                    System.err.println("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,include,plugin,dependencies,true,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,include,plugin,dependencies,true,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,system,err,println,system,err,println,error,occurred,while,running,main,from,main,class,e,print,stack,trace,system,err,println,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1349099486;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            includePluginDependencies = true__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            includePluginDependencies = true__            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,include,plugin,dependencies,true,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,include,plugin,dependencies,true,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1360254699;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            includePluginDependencies = true__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            includePluginDependencies = true__            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,include,plugin,dependencies,true,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,include,plugin,dependencies,true,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1360273693;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            includePluginDependencies = true__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            includePluginDependencies = true__            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,include,plugin,dependencies,true,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,include,plugin,dependencies,true,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1365230423;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,arguments,new,string,args,size,args,to,array,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1368004799;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1370248579;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1370525104;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1377246961;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1385292475;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }_        _        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")__        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1385953128;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader().loadClass(mainClass)_                        .getMethod("main", new Class[] {String[].class})__                    if (!main.isAccessible()) {_                        getLog().debug("Setting accessibility to true in order to invoke main().")__                        main.setAccessible(true)__                    }_                    main.invoke(main, new Object[] {arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,new,class,string,class,if,main,is,accessible,get,log,debug,setting,accessibility,to,true,in,order,to,invoke,main,main,set,accessible,true,main,invoke,main,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1385989174;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1388443957;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (dotDir != null && useDot) {_            args.add("-o")__            args.add(dotDir)__        }_        if (trace) {_            args.add("-t")__        }__        if (routesOutputFile != null) {_            args.add("-output")__            args.add(routesOutputFile)__        }        _        _        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,dot,dir,null,use,dot,args,add,o,args,add,dot,dir,if,trace,args,add,t,if,routes,output,file,null,args,add,output,args,add,routes,output,file,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1427090237;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1434620118;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1447426886;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1447432935;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI__        boolean usingBlueprintMain = useBlueprint__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,boolean,using,blueprint,main,use,blueprint,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1451121248;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI || detectCDIOnClassPath()__        boolean usingBlueprintMain = useBlueprint || detectBlueprintOnClassPathOrBlueprintXMLFiles()__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,detect,cdion,class,path,boolean,using,blueprint,main,use,blueprint,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1451412030;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI || detectCDIOnClassPath()__        boolean usingBlueprintMain = useBlueprint || detectBlueprintOnClassPathOrBlueprintXMLFiles()__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,detect,cdion,class,path,boolean,using,blueprint,main,use,blueprint,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1451417222;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI || detectCDIOnClassPath()__        boolean usingBlueprintMain = useBlueprint || detectBlueprintOnClassPathOrBlueprintXMLFiles()__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,detect,cdion,class,path,boolean,using,blueprint,main,use,blueprint,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1457013337;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI || detectCDIOnClassPath()__        boolean usingBlueprintMain = useBlueprint || detectBlueprintOnClassPathOrBlueprintXMLFiles()__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,detect,cdion,class,path,boolean,using,blueprint,main,use,blueprint,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1457014530;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false__        boolean useCdiMain = useCDI || detectCDIOnClassPath()__        boolean usingBlueprintMain = useBlueprint || detectBlueprintOnClassPathOrBlueprintXMLFiles()__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,use,cdi,detect,cdion,class,path,boolean,using,blueprint,main,use,blueprint,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1473505412;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {_        boolean usingSpringJavaConfigureMain = false___        boolean useCdiMain = false__        if (useCDI != null) {_            _            useCdiMain = useCDI__        } else {_            _            useCdiMain = detectCDIOnClassPath()__        }_        boolean usingBlueprintMain = false__        if (useBlueprint != null) {_            _            usingBlueprintMain = useBlueprint__        } else {_            _            usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles()__        }__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,false,if,use,cdi,null,use,cdi,main,use,cdi,else,use,cdi,main,detect,cdion,class,path,boolean,using,blueprint,main,false,if,use,blueprint,null,using,blueprint,main,use,blueprint,else,using,blueprint,main,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1481880031;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {__        String skip = System.getProperties().getProperty("maven.test.skip")__        if (skip == null || "false".equals(skip)) {_            _            getLog().info("You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true")__        }__        boolean usingSpringJavaConfigureMain = false___        boolean useCdiMain__        if (useCDI != null) {_            _            useCdiMain = useCDI__        } else {_            _            useCdiMain = detectCDIOnClassPath()__        }_        boolean usingBlueprintMain__        if (useBlueprint != null) {_            _            usingBlueprintMain = useBlueprint__        } else {_            _            usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles()__        }__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,string,skip,system,get,properties,get,property,maven,test,skip,if,skip,null,false,equals,skip,get,log,info,you,can,skip,tests,from,the,command,line,using,mvn,camel,run,dmaven,test,skip,true,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,if,use,cdi,null,use,cdi,main,use,cdi,else,use,cdi,main,detect,cdion,class,path,boolean,using,blueprint,main,if,use,blueprint,null,using,blueprint,main,use,blueprint,else,using,blueprint,main,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1482161686;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {__        String skip = System.getProperties().getProperty("maven.test.skip")__        if (skip == null || "false".equals(skip)) {_            _            getLog().info("You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true")__        }__        boolean usingSpringJavaConfigureMain = false___        boolean useCdiMain__        if (useCDI != null) {_            _            useCdiMain = useCDI__        } else {_            _            useCdiMain = detectCDIOnClassPath()__        }_        boolean usingBlueprintMain__        if (useBlueprint != null) {_            _            usingBlueprintMain = useBlueprint__        } else {_            _            usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles()__        }__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }_        if (fileWatcherDirectory != null) {_            args.add("-watch")__            args.add(fileWatcherDirectory)__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }_ _        args.add("-d")__        args.add(duration)__        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,string,skip,system,get,properties,get,property,maven,test,skip,if,skip,null,false,equals,skip,get,log,info,you,can,skip,tests,from,the,command,line,using,mvn,camel,run,dmaven,test,skip,true,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,if,use,cdi,null,use,cdi,main,use,cdi,else,use,cdi,main,detect,cdion,class,path,boolean,using,blueprint,main,if,use,blueprint,null,using,blueprint,main,use,blueprint,else,using,blueprint,main,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,file,watcher,directory,null,args,add,watch,args,add,file,watcher,directory,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,args,add,d,args,add,duration,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1488463207;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {__        String skip = System.getProperties().getProperty("maven.test.skip")__        if (skip == null || "false".equals(skip)) {_            _            getLog().info("You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true")__        }__        boolean usingSpringJavaConfigureMain = false___        boolean useCdiMain__        if (useCDI != null) {_            _            useCdiMain = useCDI__        } else {_            _            useCdiMain = detectCDIOnClassPath()__        }_        boolean usingBlueprintMain__        if (useBlueprint != null) {_            _            usingBlueprintMain = useBlueprint__        } else {_            _            usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles()__        }__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }_        if (fileWatcherDirectory != null) {_            args.add("-watch")__            args.add(fileWatcherDirectory)__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }__        if (!duration.equals("-1")) {_            args.add("-d")__            args.add(duration)__        }_        if (!durationMaxMessages.equals("-1")) {_            args.add("-dm")__            args.add(durationMaxMessages)__        }_        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,string,skip,system,get,properties,get,property,maven,test,skip,if,skip,null,false,equals,skip,get,log,info,you,can,skip,tests,from,the,command,line,using,mvn,camel,run,dmaven,test,skip,true,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,if,use,cdi,null,use,cdi,main,use,cdi,else,use,cdi,main,detect,cdion,class,path,boolean,using,blueprint,main,if,use,blueprint,null,using,blueprint,main,use,blueprint,else,using,blueprint,main,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,file,watcher,directory,null,args,add,watch,args,add,file,watcher,directory,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,if,duration,equals,1,args,add,d,args,add,duration,if,duration,max,messages,equals,1,args,add,dm,args,add,duration,max,messages,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1488476333;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {__        String skip = System.getProperties().getProperty("maven.test.skip")__        if (skip == null || "false".equals(skip)) {_            _            getLog().info("You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true")__        }__        boolean usingSpringJavaConfigureMain = false___        boolean useCdiMain__        if (useCDI != null) {_            _            useCdiMain = useCDI__        } else {_            _            useCdiMain = detectCDIOnClassPath()__        }_        boolean usingBlueprintMain__        if (useBlueprint != null) {_            _            usingBlueprintMain = useBlueprint__        } else {_            _            usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles()__        }__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }_        if (fileWatcherDirectory != null) {_            args.add("-watch")__            args.add(fileWatcherDirectory)__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }__        if (!duration.equals("-1")) {_            args.add("-d")__            args.add(duration)__        }_        if (!durationIdle.equals("-1")) {_            args.add("-di")__            args.add(durationIdle)__        }_        if (!durationMaxMessages.equals("-1")) {_            args.add("-dm")__            args.add(durationMaxMessages)__        }_        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,string,skip,system,get,properties,get,property,maven,test,skip,if,skip,null,false,equals,skip,get,log,info,you,can,skip,tests,from,the,command,line,using,mvn,camel,run,dmaven,test,skip,true,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,if,use,cdi,null,use,cdi,main,use,cdi,else,use,cdi,main,detect,cdion,class,path,boolean,using,blueprint,main,if,use,blueprint,null,using,blueprint,main,use,blueprint,else,using,blueprint,main,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,file,watcher,directory,null,args,add,watch,args,add,file,watcher,directory,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,if,duration,equals,1,args,add,d,args,add,duration,if,duration,idle,equals,1,args,add,di,args,add,duration,idle,if,duration,max,messages,equals,1,args,add,dm,args,add,duration,max,messages,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1489581676;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {__        String skip = System.getProperties().getProperty("maven.test.skip")__        if (skip == null || "false".equals(skip)) {_            _            getLog().info("You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true")__        }__        boolean usingSpringJavaConfigureMain = false___        boolean useCdiMain__        if (useCDI != null) {_            _            useCdiMain = useCDI__        } else {_            _            useCdiMain = detectCDIOnClassPath()__        }_        boolean usingBlueprintMain__        if (useBlueprint != null) {_            _            usingBlueprintMain = useBlueprint__        } else {_            _            usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles()__        }__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }_        if (fileWatcherDirectory != null) {_            args.add("-watch")__            args.add(fileWatcherDirectory)__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }__        if (!duration.equals("-1")) {_            args.add("-d")__            args.add(duration)__        }_        if (!durationIdle.equals("-1")) {_            args.add("-di")__            args.add(durationIdle)__        }_        if (!durationMaxMessages.equals("-1")) {_            args.add("-dm")__            args.add(durationMaxMessages)__        }_        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,string,skip,system,get,properties,get,property,maven,test,skip,if,skip,null,false,equals,skip,get,log,info,you,can,skip,tests,from,the,command,line,using,mvn,camel,run,dmaven,test,skip,true,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,if,use,cdi,null,use,cdi,main,use,cdi,else,use,cdi,main,detect,cdion,class,path,boolean,using,blueprint,main,if,use,blueprint,null,using,blueprint,main,use,blueprint,else,using,blueprint,main,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,file,watcher,directory,null,args,add,watch,args,add,file,watcher,directory,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,if,duration,equals,1,args,add,d,args,add,duration,if,duration,idle,equals,1,args,add,di,args,add,duration,idle,if,duration,max,messages,equals,1,args,add,dm,args,add,duration,max,messages,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1511424277;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {__        String skip = System.getProperties().getProperty("maven.test.skip")__        if (skip == null || "false".equals(skip)) {_            _            getLog().info("You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true")__        }__        boolean usingSpringJavaConfigureMain = false___        boolean useCdiMain__        if (useCDI != null) {_            _            useCdiMain = useCDI__        } else {_            _            useCdiMain = detectCDIOnClassPath()__        }_        boolean usingBlueprintMain__        if (useBlueprint != null) {_            _            usingBlueprintMain = useBlueprint__        } else {_            _            usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles()__        }__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<String>()__        if (trace) {_            args.add("-t")__        }_        if (fileWatcherDirectory != null) {_            args.add("-watch")__            args.add(fileWatcherDirectory)__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }__        if (!duration.equals("-1")) {_            args.add("-d")__            args.add(duration)__        }_        if (!durationIdle.equals("-1")) {_            args.add("-di")__            args.add(durationIdle)__        }_        if (!durationMaxMessages.equals("-1")) {_            args.add("-dm")__            args.add(durationMaxMessages)__        }_        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,string,skip,system,get,properties,get,property,maven,test,skip,if,skip,null,false,equals,skip,get,log,info,you,can,skip,tests,from,the,command,line,using,mvn,camel,run,dmaven,test,skip,true,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,if,use,cdi,null,use,cdi,main,use,cdi,else,use,cdi,main,detect,cdion,class,path,boolean,using,blueprint,main,if,use,blueprint,null,using,blueprint,main,use,blueprint,else,using,blueprint,main,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,string,if,trace,args,add,t,if,file,watcher,directory,null,args,add,watch,args,add,file,watcher,directory,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,if,duration,equals,1,args,add,d,args,add,duration,if,duration,idle,equals,1,args,add,di,args,add,duration,idle,if,duration,max,messages,equals,1,args,add,dm,args,add,duration,max,messages,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1524063336;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {__        String skip = System.getProperties().getProperty("maven.test.skip")__        if (skip == null || "false".equals(skip)) {_            _            getLog().info("You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true")__        }__        boolean usingSpringJavaConfigureMain = false___        boolean useCdiMain__        if (useCDI != null) {_            _            useCdiMain = useCDI__        } else {_            _            useCdiMain = detectCDIOnClassPath()__        }_        boolean usingBlueprintMain__        if (useBlueprint != null) {_            _            usingBlueprintMain = useBlueprint__        } else {_            _            usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles()__        }__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<>()__        if (trace) {_            args.add("-t")__        }_        if (fileWatcherDirectory != null) {_            args.add("-watch")__            args.add(fileWatcherDirectory)__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }__        if (!duration.equals("-1")) {_            args.add("-d")__            args.add(duration)__        }_        if (!durationIdle.equals("-1")) {_            args.add("-di")__            args.add(durationIdle)__        }_        if (!durationMaxMessages.equals("-1")) {_            args.add("-dm")__            args.add(durationMaxMessages)__        }_        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,string,skip,system,get,properties,get,property,maven,test,skip,if,skip,null,false,equals,skip,get,log,info,you,can,skip,tests,from,the,command,line,using,mvn,camel,run,dmaven,test,skip,true,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,if,use,cdi,null,use,cdi,main,use,cdi,else,use,cdi,main,detect,cdion,class,path,boolean,using,blueprint,main,if,use,blueprint,null,using,blueprint,main,use,blueprint,else,using,blueprint,main,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,if,trace,args,add,t,if,file,watcher,directory,null,args,add,watch,args,add,file,watcher,directory,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,if,duration,equals,1,args,add,d,args,add,duration,if,duration,idle,equals,1,args,add,di,args,add,duration,idle,if,duration,max,messages,equals,1,args,add,dm,args,add,duration,max,messages,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1540108164;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {__        String skip = System.getProperties().getProperty("maven.test.skip")__        if (skip == null || "false".equals(skip)) {_            _            getLog().info("You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true")__        }__        boolean usingSpringJavaConfigureMain = false___        boolean useCdiMain__        if (useCDI != null) {_            _            useCdiMain = useCDI__        } else {_            _            useCdiMain = detectCDIOnClassPath()__        }_        boolean usingBlueprintMain__        if (useBlueprint != null) {_            _            usingBlueprintMain = useBlueprint__        } else {_            _            usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles()__        }__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<>()__        if (trace) {_            args.add("-t")__        }_        if (fileWatcherDirectory != null) {_            args.add("-watch")__            args.add(fileWatcherDirectory)__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }__        if (!duration.equals("-1")) {_            args.add("-d")__            args.add(duration)__        }_        if (!durationIdle.equals("-1")) {_            args.add("-di")__            args.add(durationIdle)__        }_        if (!durationMaxMessages.equals("-1")) {_            args.add("-dm")__            args.add(durationMaxMessages)__        }_        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,string,skip,system,get,properties,get,property,maven,test,skip,if,skip,null,false,equals,skip,get,log,info,you,can,skip,tests,from,the,command,line,using,mvn,camel,run,dmaven,test,skip,true,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,if,use,cdi,null,use,cdi,main,use,cdi,else,use,cdi,main,detect,cdion,class,path,boolean,using,blueprint,main,if,use,blueprint,null,using,blueprint,main,use,blueprint,else,using,blueprint,main,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,if,trace,args,add,t,if,file,watcher,directory,null,args,add,watch,args,add,file,watcher,directory,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,if,duration,equals,1,args,add,d,args,add,duration,if,duration,idle,equals,1,args,add,di,args,add,duration,idle,if,duration,max,messages,equals,1,args,add,dm,args,add,duration,max,messages,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1547240981;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {__        String skip = System.getProperties().getProperty("maven.test.skip")__        if (skip == null || "false".equals(skip)) {_            _            getLog().info("You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true")__        }__        boolean usingSpringJavaConfigureMain = false___        boolean useCdiMain__        if (useCDI != null) {_            _            useCdiMain = useCDI__        } else {_            _            useCdiMain = detectCDIOnClassPath()__        }_        boolean usingBlueprintMain__        if (useBlueprint != null) {_            _            usingBlueprintMain = useBlueprint__        } else {_            _            usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles()__        }__        if (killAfter != -1) {_            getLog().warn("Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.")__        }__        _        List<String> args = new ArrayList<>()__        if (trace) {_            args.add("-t")__        }_        if (fileWatcherDirectory != null) {_            args.add("-watch")__            args.add(fileWatcherDirectory)__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }__        if (!duration.equals("-1")) {_            args.add("-d")__            args.add(duration)__        }_        if (!durationIdle.equals("-1")) {_            args.add("-di")__            args.add(durationIdle)__        }_        if (!durationMaxMessages.equals("-1")) {_            args.add("-dm")__            args.add(durationMaxMessages)__        }_        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(getClassLoader())__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,string,skip,system,get,properties,get,property,maven,test,skip,if,skip,null,false,equals,skip,get,log,info,you,can,skip,tests,from,the,command,line,using,mvn,camel,run,dmaven,test,skip,true,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,if,use,cdi,null,use,cdi,main,use,cdi,else,use,cdi,main,detect,cdion,class,path,boolean,using,blueprint,main,if,use,blueprint,null,using,blueprint,main,use,blueprint,else,using,blueprint,main,detect,blueprint,on,class,path,or,blueprint,xmlfiles,if,kill,after,1,get,log,warn,warning,kill,after,is,now,deprecated,do,you,need,it,please,comment,on,mexec,6,list,string,args,new,array,list,if,trace,args,add,t,if,file,watcher,directory,null,args,add,watch,args,add,file,watcher,directory,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,if,duration,equals,1,args,add,d,args,add,duration,if,duration,idle,equals,1,args,add,di,args,add,duration,idle,if,duration,max,messages,equals,1,args,add,dm,args,add,duration,max,messages,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,get,class,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> public void execute() throws MojoExecutionException, MojoFailureException;1548788730;Execute goal.__@throws MojoExecutionException execution of the main class or one of the_threads it generated failed._@throws MojoFailureException something bad happened...;public void execute() throws MojoExecutionException, MojoFailureException {__        String skip = System.getProperties().getProperty("maven.test.skip")__        if (skip == null || "false".equals(skip)) {_            _            getLog().info("You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true")__        }__        boolean usingSpringJavaConfigureMain = false___        boolean useCdiMain__        if (useCDI != null) {_            _            useCdiMain = useCDI__        } else {_            _            useCdiMain = detectCDIOnClassPath()__        }_        boolean usingBlueprintMain__        if (useBlueprint != null) {_            _            usingBlueprintMain = useBlueprint__        } else {_            _            usingBlueprintMain = detectBlueprintOnClassPathOrBlueprintXMLFiles()__        }__        _        List<String> args = new ArrayList<>()__        if (trace) {_            args.add("-t")__        }_        if (fileWatcherDirectory != null) {_            args.add("-watch")__            args.add(fileWatcherDirectory)__        }__        if (applicationContextUri != null) {_            args.add("-ac")__            args.add(applicationContextUri)__        } else if (fileApplicationContextUri != null) {_            args.add("-fa")__            args.add(fileApplicationContextUri)__        }_        _        if (configClasses != null) {_            args.add("-cc")__            args.add(configClasses)__            usingSpringJavaConfigureMain = true__        }        _        if (basedPackages != null) {_            args.add("-bp")__            args.add(basedPackages)__            usingSpringJavaConfigureMain = true__        }__        if (!duration.equals("-1")) {_            args.add("-d")__            args.add(duration)__        }_        if (!durationIdle.equals("-1")) {_            args.add("-di")__            args.add(durationIdle)__        }_        if (!durationMaxMessages.equals("-1")) {_            args.add("-dm")__            args.add(durationMaxMessages)__        }_        if (arguments != null) {_            args.addAll(Arrays.asList(arguments))__        }_        _        if (usingSpringJavaConfigureMain) {_            mainClass = "org.apache.camel.spring.javaconfig.Main"__            getLog().info("Using org.apache.camel.spring.javaconfig.Main to initiate a CamelContext")__        } else if (useCdiMain) {_            mainClass = "org.apache.camel.cdi.Main"__            _            extraPluginDependencyArtifactId = "camel-cdi"__            getLog().info("Using " + mainClass + " to initiate a CamelContext")__        } else if (usingBlueprintMain) {_            mainClass = "org.apache.camel.test.blueprint.Main"__            _            extraPluginDependencyArtifactId = "camel-test-blueprint"__            _            if (configAdminPid != null) {_                args.add("-pid")__                args.add(configAdminPid)__            }_            _            if (configAdminFileName != null) {_                args.add("-pf")__                args.add(configAdminFileName)__            }_            getLog().info("Using org.apache.camel.test.blueprint.Main to initiate a CamelContext")__        } else if (mainClass != null) {_            getLog().info("Using custom " + mainClass + " to initiate a CamelContext")__        } else {_            _            getLog().info("Using org.apache.camel.spring.Main to initiate a CamelContext")__            mainClass = "org.apache.camel.spring.Main"__        }__        arguments = new String[args.size()]__        args.toArray(arguments)__        _        if (getLog().isDebugEnabled()) {_            StringBuilder msg = new StringBuilder("Invoking: ")__            msg.append(mainClass)__            msg.append(".main(")__            for (int i = 0_ i < arguments.length_ i++) {_                if (i > 0) {_                    msg.append(", ")__                }_                msg.append(arguments[i])__            }_            msg.append(")")__            getLog().debug(msg)__        }__        final ClassLoader loader = getClassLoader()__        IsolatedThreadGroup threadGroup = new IsolatedThreadGroup(mainClass )__        final Thread bootstrapThread = new Thread(threadGroup, new Runnable() {_            public void run() {_                try {_                    beforeBootstrapCamel()___                    getLog().info("Starting Camel ...")__                    Method main = Thread.currentThread().getContextClassLoader()_                            .loadClass(mainClass).getMethod("main", String[].class)__                    main.invoke(null, new Object[]{arguments})___                    afterBootstrapCamel()__                } catch (Exception e) { _                    _                    getLog().error("*************************************")__                    getLog().error("Error occurred while running main from: " + mainClass)__                    getLog().error(e)__                    getLog().error("*************************************")__                    Thread.currentThread().getThreadGroup().uncaughtException(Thread.currentThread(), e)__                }_            }_        }, mainClass + ".main()")___        bootstrapThread.setContextClassLoader(loader)__        setSystemProperties()___        bootstrapThread.start()__        joinNonDaemonThreads(threadGroup)__        _        _        _        _        if (keepAlive) {_            getLog().warn("Warning: keepAlive is now deprecated and obsolete. Do you need it? Please comment on MEXEC-6.")__            waitFor(0)__        }__        if (cleanupDaemonThreads) {__            terminateThreads(threadGroup)___            try {_                threadGroup.destroy()__            } catch (IllegalThreadStateException e) {_                getLog().warn("Couldn't destroy threadgroup " + threadGroup, e)__            }_        }__        if (originalSystemProperties != null) {_            System.setProperties(originalSystemProperties)__        }__        synchronized (threadGroup) {_            if (threadGroup.uncaughtException != null) {_                throw new MojoExecutionException(null, threadGroup.uncaughtException)__            }_        }__        registerSourceRoots()__    };execute,goal,throws,mojo,execution,exception,execution,of,the,main,class,or,one,of,the,threads,it,generated,failed,throws,mojo,failure,exception,something,bad,happened;public,void,execute,throws,mojo,execution,exception,mojo,failure,exception,string,skip,system,get,properties,get,property,maven,test,skip,if,skip,null,false,equals,skip,get,log,info,you,can,skip,tests,from,the,command,line,using,mvn,camel,run,dmaven,test,skip,true,boolean,using,spring,java,configure,main,false,boolean,use,cdi,main,if,use,cdi,null,use,cdi,main,use,cdi,else,use,cdi,main,detect,cdion,class,path,boolean,using,blueprint,main,if,use,blueprint,null,using,blueprint,main,use,blueprint,else,using,blueprint,main,detect,blueprint,on,class,path,or,blueprint,xmlfiles,list,string,args,new,array,list,if,trace,args,add,t,if,file,watcher,directory,null,args,add,watch,args,add,file,watcher,directory,if,application,context,uri,null,args,add,ac,args,add,application,context,uri,else,if,file,application,context,uri,null,args,add,fa,args,add,file,application,context,uri,if,config,classes,null,args,add,cc,args,add,config,classes,using,spring,java,configure,main,true,if,based,packages,null,args,add,bp,args,add,based,packages,using,spring,java,configure,main,true,if,duration,equals,1,args,add,d,args,add,duration,if,duration,idle,equals,1,args,add,di,args,add,duration,idle,if,duration,max,messages,equals,1,args,add,dm,args,add,duration,max,messages,if,arguments,null,args,add,all,arrays,as,list,arguments,if,using,spring,java,configure,main,main,class,org,apache,camel,spring,javaconfig,main,get,log,info,using,org,apache,camel,spring,javaconfig,main,to,initiate,a,camel,context,else,if,use,cdi,main,main,class,org,apache,camel,cdi,main,extra,plugin,dependency,artifact,id,camel,cdi,get,log,info,using,main,class,to,initiate,a,camel,context,else,if,using,blueprint,main,main,class,org,apache,camel,test,blueprint,main,extra,plugin,dependency,artifact,id,camel,test,blueprint,if,config,admin,pid,null,args,add,pid,args,add,config,admin,pid,if,config,admin,file,name,null,args,add,pf,args,add,config,admin,file,name,get,log,info,using,org,apache,camel,test,blueprint,main,to,initiate,a,camel,context,else,if,main,class,null,get,log,info,using,custom,main,class,to,initiate,a,camel,context,else,get,log,info,using,org,apache,camel,spring,main,to,initiate,a,camel,context,main,class,org,apache,camel,spring,main,arguments,new,string,args,size,args,to,array,arguments,if,get,log,is,debug,enabled,string,builder,msg,new,string,builder,invoking,msg,append,main,class,msg,append,main,for,int,i,0,i,arguments,length,i,if,i,0,msg,append,msg,append,arguments,i,msg,append,get,log,debug,msg,final,class,loader,loader,get,class,loader,isolated,thread,group,thread,group,new,isolated,thread,group,main,class,final,thread,bootstrap,thread,new,thread,thread,group,new,runnable,public,void,run,try,before,bootstrap,camel,get,log,info,starting,camel,method,main,thread,current,thread,get,context,class,loader,load,class,main,class,get,method,main,string,class,main,invoke,null,new,object,arguments,after,bootstrap,camel,catch,exception,e,get,log,error,get,log,error,error,occurred,while,running,main,from,main,class,get,log,error,e,get,log,error,thread,current,thread,get,thread,group,uncaught,exception,thread,current,thread,e,main,class,main,bootstrap,thread,set,context,class,loader,loader,set,system,properties,bootstrap,thread,start,join,non,daemon,threads,thread,group,if,keep,alive,get,log,warn,warning,keep,alive,is,now,deprecated,and,obsolete,do,you,need,it,please,comment,on,mexec,6,wait,for,0,if,cleanup,daemon,threads,terminate,threads,thread,group,try,thread,group,destroy,catch,illegal,thread,state,exception,e,get,log,warn,couldn,t,destroy,threadgroup,thread,group,e,if,original,system,properties,null,system,set,properties,original,system,properties,synchronized,thread,group,if,thread,group,uncaught,exception,null,throw,new,mojo,execution,exception,null,thread,group,uncaught,exception,register,source,roots
RunMojo -> private void setSystemProperties();1187272534;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1189091341;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1189839305;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1206583462;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1207386749;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1212331146;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1214324795;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1215270204;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1215417637;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1218042554;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1221674225;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1221720206;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1224637539;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1236234347;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1237977922;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1238053857;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1238054097;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1247130947;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1267540646;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1311876626;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1317763232;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1317831924;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (int i = 0_ i < systemProperties.length_ i++) {_                Property systemProperty = systemProperties[i]__                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,int,i,0,i,system,properties,length,i,property,system,property,system,properties,i,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1325694383;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1325779288;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1326499990;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1326623920;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1327086444;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1334243189;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1334249092;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1336211001;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1346758596;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1347388466;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1349099486;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1360254699;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1360273693;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1365230423;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1368004799;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1370248579;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1370525104;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1377246961;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1385292475;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1385953128;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1385989174;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1388443957;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1427090237;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1434620118;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1447426886;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1447432935;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1451121248;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1451412030;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1451417222;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1457013337;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1457014530;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1473505412;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1481880031;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1482161686;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1488463207;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1488476333;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1489581676;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1511424277;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1524063336;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1540108164;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1547240981;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private void setSystemProperties();1548788730;Pass any given system properties to the java system properties.;private void setSystemProperties() {_        if (systemProperties != null) {_            originalSystemProperties = System.getProperties()__            for (Property systemProperty : systemProperties) {_                String value = systemProperty.getValue()__                System.setProperty(systemProperty.getKey(), value == null ? "" : value)__            }_        }_    };pass,any,given,system,properties,to,the,java,system,properties;private,void,set,system,properties,if,system,properties,null,original,system,properties,system,get,properties,for,property,system,property,system,properties,string,value,system,property,get,value,system,set,property,system,property,get,key,value,null,value
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1317763232;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1317831924;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1325694383;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1325779288;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1326499990;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1326623920;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1327086444;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1334243189;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1334249092;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1336211001;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1346758596;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1347388466;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1349099486;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1360254699;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1360273693;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1365230423;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1368004799;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1370248579;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1370525104;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1377246961;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1385292475;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1385953128;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1385989174;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1388443957;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1427090237;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1434620118;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1447426886;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1447432935;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1451121248;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1451412030;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1451417222;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            relevantDependencies = Collections.emptySet()__            getLog().debug("Plugin Dependencies will be excluded.")__        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,relevant,dependencies,collections,empty,set,get,log,debug,plugin,dependencies,will,be,excluded,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1457013337;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1457014530;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1473505412;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1481880031;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1482161686;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1488463207;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1488476333;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1489581676;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1511424277;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<Artifact>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,artifact,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1524063336;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1540108164;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1547240981;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException;1548788730;Determine all plugin dependencies relevant to the executable. Takes_includePlugins, and the executableDependency into consideration.__@return a set of Artifact objects. (Empty set is returned if there are no_relevant plugin dependencies.)_@throws MojoExecutionException;private Set<Artifact> determineRelevantPluginDependencies() throws MojoExecutionException {_        Set<Artifact> relevantDependencies__        if (this.includePluginDependencies) {_            if (this.executableDependency == null) {_                getLog().debug("All Plugin Dependencies will be included.")__                relevantDependencies = new HashSet<>(this.pluginDependencies)__            } else {_                getLog().debug("Selected plugin Dependencies will be included.")__                Artifact executableArtifact = this.findExecutableArtifact()__                Artifact executablePomArtifact = this.getExecutablePomArtifact(executableArtifact)__                relevantDependencies = this.resolveExecutableDependencies(executablePomArtifact, false)__            }_        } else {_            getLog().debug("Only Direct Plugin Dependencies will be included.")__            PluginDescriptor descriptor = (PluginDescriptor) getPluginContext().get("pluginDescriptor")__            try {_                relevantDependencies = artifactResolver_                    .resolveTransitively(MavenMetadataSource_                        .createArtifacts(this.artifactFactory,_                            descriptor.getPlugin().getDependencies(),_                            null, null, null),_                        this.project.getArtifact(),_                        Collections.emptyMap(),_                        this.localRepository,_                        this.remoteRepositories,_                        metadataSource,_                        new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME),_                        Collections.emptyList())_                    .getArtifacts()__            } catch (Exception ex) {_                throw new MojoExecutionException("Encountered problems resolving dependencies of the plugin "_                    + "in preparation for its execution.", ex)__            }_        }_        return relevantDependencies__    };determine,all,plugin,dependencies,relevant,to,the,executable,takes,include,plugins,and,the,executable,dependency,into,consideration,return,a,set,of,artifact,objects,empty,set,is,returned,if,there,are,no,relevant,plugin,dependencies,throws,mojo,execution,exception;private,set,artifact,determine,relevant,plugin,dependencies,throws,mojo,execution,exception,set,artifact,relevant,dependencies,if,this,include,plugin,dependencies,if,this,executable,dependency,null,get,log,debug,all,plugin,dependencies,will,be,included,relevant,dependencies,new,hash,set,this,plugin,dependencies,else,get,log,debug,selected,plugin,dependencies,will,be,included,artifact,executable,artifact,this,find,executable,artifact,artifact,executable,pom,artifact,this,get,executable,pom,artifact,executable,artifact,relevant,dependencies,this,resolve,executable,dependencies,executable,pom,artifact,false,else,get,log,debug,only,direct,plugin,dependencies,will,be,included,plugin,descriptor,descriptor,plugin,descriptor,get,plugin,context,get,plugin,descriptor,try,relevant,dependencies,artifact,resolver,resolve,transitively,maven,metadata,source,create,artifacts,this,artifact,factory,descriptor,get,plugin,get,dependencies,null,null,null,this,project,get,artifact,collections,empty,map,this,local,repository,this,remote,repositories,metadata,source,new,scope,artifact,filter,artifact,collections,empty,list,get,artifacts,catch,exception,ex,throw,new,mojo,execution,exception,encountered,problems,resolving,dependencies,of,the,plugin,in,preparation,for,its,execution,ex,return,relevant,dependencies
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1365230423;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact)__                    for (Artifact dep : deps) {__                        _                        if (dep.getArtifactId().equals("org.apache.aries.blueprint.core")) {_                            getLog().debug("Skipping org.apache.aries.blueprint.core -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                            continue__                        }__                        getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                + " to classpath")__                        path.add(dep.getFile().toURI().toURL())__                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,for,artifact,dep,deps,if,dep,get,artifact,id,equals,org,apache,aries,blueprint,core,get,log,debug,skipping,org,apache,aries,blueprint,core,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1368004799;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact)__                    for (Artifact dep : deps) {__                        _                        if (dep.getArtifactId().equals("org.apache.aries.blueprint.core")) {_                            getLog().debug("Skipping org.apache.aries.blueprint.core -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                            continue__                        }__                        getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                + " to classpath")__                        path.add(dep.getFile().toURI().toURL())__                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,for,artifact,dep,deps,if,dep,get,artifact,id,equals,org,apache,aries,blueprint,core,get,log,debug,skipping,org,apache,aries,blueprint,core,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1370248579;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact)__                    for (Artifact dep : deps) {__                        _                        if (dep.getArtifactId().equals("org.apache.aries.blueprint.core")) {_                            getLog().debug("Skipping org.apache.aries.blueprint.core -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                            continue__                        }__                        getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                + " to classpath")__                        path.add(dep.getFile().toURI().toURL())__                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,for,artifact,dep,deps,if,dep,get,artifact,id,equals,org,apache,aries,blueprint,core,get,log,debug,skipping,org,apache,aries,blueprint,core,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1370525104;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact)__                    for (Artifact dep : deps) {__                        _                        if (dep.getArtifactId().equals("org.apache.aries.blueprint.core")) {_                            getLog().debug("Skipping org.apache.aries.blueprint.core -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                            continue__                        }__                        getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                + " to classpath")__                        path.add(dep.getFile().toURI().toURL())__                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,for,artifact,dep,deps,if,dep,get,artifact,id,equals,org,apache,aries,blueprint,core,get,log,debug,skipping,org,apache,aries,blueprint,core,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1377246961;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact)__                    for (Artifact dep : deps) {__                        _                        if (dep.getArtifactId().equals("org.apache.aries.blueprint.core")) {_                            getLog().debug("Skipping org.apache.aries.blueprint.core -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                            continue__                        }__                        getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                + " to classpath")__                        path.add(dep.getFile().toURI().toURL())__                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,for,artifact,dep,deps,if,dep,get,artifact,id,equals,org,apache,aries,blueprint,core,get,log,debug,skipping,org,apache,aries,blueprint,core,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1385292475;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact)__                    for (Artifact dep : deps) {__                        _                        if (dep.getArtifactId().equals("org.apache.aries.blueprint.core")) {_                            getLog().debug("Skipping org.apache.aries.blueprint.core -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                            continue__                        }__                        getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                + " to classpath")__                        path.add(dep.getFile().toURI().toURL())__                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,for,artifact,dep,deps,if,dep,get,artifact,id,equals,org,apache,aries,blueprint,core,get,log,debug,skipping,org,apache,aries,blueprint,core,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1385953128;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact)__                    for (Artifact dep : deps) {__                        _                        if (dep.getArtifactId().equals("org.apache.aries.blueprint.core")) {_                            getLog().debug("Skipping org.apache.aries.blueprint.core -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                            continue__                        }__                        getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                + " to classpath")__                        path.add(dep.getFile().toURI().toURL())__                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,for,artifact,dep,deps,if,dep,get,artifact,id,equals,org,apache,aries,blueprint,core,get,log,debug,skipping,org,apache,aries,blueprint,core,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1385989174;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact)__                    for (Artifact dep : deps) {__                        _                        if (dep.getArtifactId().equals("org.apache.aries.blueprint.core")) {_                            getLog().debug("Skipping org.apache.aries.blueprint.core -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                            continue__                        }__                        getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                + " to classpath")__                        path.add(dep.getFile().toURI().toURL())__                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,for,artifact,dep,deps,if,dep,get,artifact,id,equals,org,apache,aries,blueprint,core,get,log,debug,skipping,org,apache,aries,blueprint,core,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1388443957;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact)__                    for (Artifact dep : deps) {__                        _                        if (dep.getArtifactId().equals("org.apache.aries.blueprint.core")) {_                            getLog().debug("Skipping org.apache.aries.blueprint.core -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                            continue__                        }__                        getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                + " to classpath")__                        path.add(dep.getFile().toURI().toURL())__                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,for,artifact,dep,deps,if,dep,get,artifact,id,equals,org,apache,aries,blueprint,core,get,log,debug,skipping,org,apache,aries,blueprint,core,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1427090237;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact)__                    for (Artifact dep : deps) {__                        _                        if (dep.getArtifactId().equals("org.apache.aries.blueprint.core")) {_                            getLog().debug("Skipping org.apache.aries.blueprint.core -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                            continue__                        }__                        getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                + " to classpath")__                        path.add(dep.getFile().toURI().toURL())__                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,for,artifact,dep,deps,if,dep,get,artifact,id,equals,org,apache,aries,blueprint,core,get,log,debug,skipping,org,apache,aries,blueprint,core,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1434620118;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {__                            _                            if (dep.getArtifactId().equals("org.apache.aries.blueprint.core")) {_                                getLog().debug("Skipping org.apache.aries.blueprint.core -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                                continue__                            }__                            _                            if ("test".equals(dep.getScope())) {_                                getLog().debug("Skipping test scoped -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                                continue__                            }_                            if ("provided".equals(dep.getScope())) {_                                getLog().debug("Skipping provided scoped -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                                continue__                            }__                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,if,dep,get,artifact,id,equals,org,apache,aries,blueprint,core,get,log,debug,skipping,org,apache,aries,blueprint,core,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,if,test,equals,dep,get,scope,get,log,debug,skipping,test,scoped,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,if,provided,equals,dep,get,scope,get,log,debug,skipping,provided,scoped,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1447426886;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            _                            if ("test".equals(dep.getScope())) {_                                getLog().debug("Skipping test scoped -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                                continue__                            }_                            if ("provided".equals(dep.getScope())) {_                                getLog().debug("Skipping provided scoped -> " + dep.getGroupId() + "/" + dep.getArtifactId() + "/" + dep.getVersion())__                                continue__                            }__                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,if,test,equals,dep,get,scope,get,log,debug,skipping,test,scoped,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,if,provided,equals,dep,get,scope,get,log,debug,skipping,provided,scoped,dep,get,group,id,dep,get,artifact,id,dep,get,version,continue,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1447432935;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1451121248;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1451412030;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1451417222;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1457013337;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1457014530;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1473505412;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1481880031;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1482161686;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1488463207;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1488476333;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1489581676;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1511424277;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<Artifact>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,artifact,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1524063336;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1540108164;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1547240981;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1548788730;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addExtraPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (extraPluginDependencyArtifactId == null && extendedPluginDependencyArtifactId == null) {_            return__        }__        try {_            Set<Artifact> artifacts = new HashSet<>(this.pluginDependencies)__            for (Artifact artifact : artifacts) {_                _                if (artifact.getArtifactId().equals(extraPluginDependencyArtifactId)_                        || artifact.getArtifactId().equals(extendedPluginDependencyArtifactId)) {_                    getLog().debug("Adding extra plugin dependency artifact: " + artifact.getArtifactId()_                            + " to classpath")__                    path.add(artifact.getFile().toURI().toURL())___                    _                    Set<Artifact> deps = resolveExecutableDependencies(artifact, true)__                    if (deps != null) {_                        for (Artifact dep : deps) {_                            getLog().debug("Adding extra plugin dependency artifact: " + dep.getArtifactId()_                                    + " to classpath")__                            path.add(dep.getFile().toURI().toURL())__                        }_                    }_                }_            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }_    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,extra,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,extra,plugin,dependency,artifact,id,null,extended,plugin,dependency,artifact,id,null,return,try,set,artifact,artifacts,new,hash,set,this,plugin,dependencies,for,artifact,artifact,artifacts,if,artifact,get,artifact,id,equals,extra,plugin,dependency,artifact,id,artifact,get,artifact,id,equals,extended,plugin,dependency,artifact,id,get,log,debug,adding,extra,plugin,dependency,artifact,artifact,get,artifact,id,to,classpath,path,add,artifact,get,file,to,uri,to,url,set,artifact,deps,resolve,executable,dependencies,artifact,true,if,deps,null,for,artifact,dep,deps,get,log,debug,adding,extra,plugin,dependency,artifact,dep,get,artifact,id,to,classpath,path,add,dep,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1385953128;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1385989174;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1388443957;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1427090237;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1434620118;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1447426886;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1447432935;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1451121248;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1451412030;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1451417222;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1457013337;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1457014530;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1473505412;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1481880031;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1482161686;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1488463207;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1488476333;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1489581676;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1511424277;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1524063336;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1540108164;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1547240981;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> protected void beforeBootstrapCamel() throws Exception;1548788730;Allows plugin extensions to do custom logic before bootstrapping Camel.;protected void beforeBootstrapCamel() throws Exception {_        _    };allows,plugin,extensions,to,do,custom,logic,before,bootstrapping,camel;protected,void,before,bootstrap,camel,throws,exception
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1317763232;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1317831924;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1325694383;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1325779288;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = (Artifact)iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,artifact,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1326499990;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1326623920;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1327086444;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1334243189;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1334249092;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1336211001;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1346758596;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1347388466;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1349099486;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1360254699;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException;1360273693;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(List<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,list,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void waitFor(long millis);1187272534;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1189091341;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1189839305;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1206583462;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1207386749;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1212331146;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1214324795;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1215270204;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1215417637;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1218042554;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1221674225;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1221720206;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1224637539;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1236234347;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1237977922;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1238053857;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1238054097;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1247130947;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1267540646;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1311876626;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1317763232;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1317831924;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1325694383;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1325779288;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1326499990;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1326623920;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1327086444;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1334243189;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1334249092;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1336211001;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1346758596;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1347388466;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1349099486;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1360254699;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1360273693;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1365230423;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1368004799;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1370248579;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1370525104;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1377246961;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1385292475;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1385953128;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1385989174;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1388443957;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1427090237;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1434620118;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1447426886;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1447432935;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1451121248;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1451412030;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1451417222;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1457013337;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1457014530;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1473505412;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1481880031;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1482161686;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1488463207;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1488476333;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1489581676;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1511424277;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1524063336;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1540108164;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1547240981;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void waitFor(long millis);1548788730;Stop program execution for nn millis.__@param millis the number of millis-seconds to wait for, <code>0</code>_stops program forever.;private void waitFor(long millis) {_        Object lock = new Object()__        synchronized (lock) {_            try {_                lock.wait(millis)__            } catch (InterruptedException e) {_                Thread.currentThread().interrupt()_ _                getLog().warn("Spuriously interrupted while waiting for " + millis + "ms", e)__            }_        }_    };stop,program,execution,for,nn,millis,param,millis,the,number,of,millis,seconds,to,wait,for,code,0,code,stops,program,forever;private,void,wait,for,long,millis,object,lock,new,object,synchronized,lock,try,lock,wait,millis,catch,interrupted,exception,e,thread,current,thread,interrupt,get,log,warn,spuriously,interrupted,while,waiting,for,millis,ms,e
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1365230423;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1368004799;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1370248579;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1370525104;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1377246961;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1385292475;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1385953128;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1385989174;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1388443957;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1427090237;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1434620118;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1447426886;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1447432935;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1451121248;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1451412030;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1451417222;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1457013337;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1457014530;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1473505412;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1481880031;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1482161686;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1488463207;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1488476333;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1489581676;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1511424277;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1524063336;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1540108164;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1547240981;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1548788730;Add any relevant project dependencies to the classpath. Takes_includeProjectDependencies into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantProjectDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (this.includeProjectDependencies) {_            try {_                getLog().debug("Project Dependencies will be included.")___                URL mainClasses = new File(project.getBuild().getOutputDirectory()).toURI().toURL()__                getLog().debug("Adding to classpath : " + mainClasses)__                path.add(mainClasses)___                Set<Artifact> dependencies = CastUtils.cast(project.getArtifacts())___                _                _                dependencies.addAll(getAllNonTestScopedDependencies())___                Iterator<Artifact> iter = dependencies.iterator()__                while (iter.hasNext()) {_                    Artifact classPathElement = iter.next()__                    getLog().debug("Adding project dependency artifact: " + classPathElement.getArtifactId()_                                       + " to classpath")__                    File file = classPathElement.getFile()__                    if (file != null) {_                        path.add(file.toURI().toURL())__                    }_                }__            } catch (MalformedURLException e) {_                throw new MojoExecutionException("Error during setting up classpath", e)__            }_        } else {_            getLog().debug("Project Dependencies will be excluded.")__        }__    };add,any,relevant,project,dependencies,to,the,classpath,takes,include,project,dependencies,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,project,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,this,include,project,dependencies,try,get,log,debug,project,dependencies,will,be,included,url,main,classes,new,file,project,get,build,get,output,directory,to,uri,to,url,get,log,debug,adding,to,classpath,main,classes,path,add,main,classes,set,artifact,dependencies,cast,utils,cast,project,get,artifacts,dependencies,add,all,get,all,non,test,scoped,dependencies,iterator,artifact,iter,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,get,log,debug,adding,project,dependency,artifact,class,path,element,get,artifact,id,to,classpath,file,file,class,path,element,get,file,if,file,null,path,add,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e,else,get,log,debug,project,dependencies,will,be,excluded
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1187272534;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1189091341;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1189839305;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1206583462;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1207386749;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1212331146;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1214324795;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1215270204;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1215417637;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1218042554;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1221674225;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1221720206;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1224637539;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1236234347;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1237977922;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1238053857;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1238054097;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1247130947;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1267540646;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1311876626;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List classpathURLs = new ArrayList()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,classpath,urls,new,array,list,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1317763232;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1317831924;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1325694383;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader((URL[])classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,url,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1325779288;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1326499990;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1326623920;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1327086444;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        getLog().info("Classpath = " + classpathURLs)__        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1334243189;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath = " + classpathURLs)__        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1334249092;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        this.addRelevantPluginDependenciesToClasspath(classpathURLs)__        this.addRelevantProjectDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath = " + classpathURLs)__        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,project,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1336211001;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath = " + classpathURLs)__        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1346758596;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath = " + classpathURLs)__        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1347388466;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath = " + classpathURLs)__        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1349099486;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath = " + classpathURLs)__        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1360254699;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath = " + classpathURLs)__        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1360273693;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        List<URL> classpathURLs = new ArrayList<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath = " + classpathURLs)__        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,list,url,classpath,urls,new,array,list,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,classpath,urls,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1365230423;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1368004799;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1370248579;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1370525104;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1377246961;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1385292475;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1385953128;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1385989174;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1388443957;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1427090237;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1434620118;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1447426886;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1447432935;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1451121248;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1451412030;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1451417222;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1457013337;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1457014530;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1473505412;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1481880031;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1482161686;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1488463207;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1488476333;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1489581676;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1511424277;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<URL>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,url,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1524063336;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1540108164;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1547240981;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private ClassLoader getClassLoader() throws MojoExecutionException;1548788730;Set up a classloader for the execution of the main class.__@return the classloader_@throws MojoExecutionException;private ClassLoader getClassLoader() throws MojoExecutionException {_        Set<URL> classpathURLs = new LinkedHashSet<>()__        _        this.addRelevantProjectDependenciesToClasspath(classpathURLs)__        _        this.addExtraPluginDependenciesToClasspath(classpathURLs)__        _        this.addRelevantPluginDependenciesToClasspath(classpathURLs)___        if (logClasspath) {_            getLog().info("Classpath:")__            for (URL url : classpathURLs) {_                getLog().info("  " + url.getFile().toString())__            }_        }_        return new URLClassLoader(classpathURLs.toArray(new URL[classpathURLs.size()]))__    };set,up,a,classloader,for,the,execution,of,the,main,class,return,the,classloader,throws,mojo,execution,exception;private,class,loader,get,class,loader,throws,mojo,execution,exception,set,url,classpath,urls,new,linked,hash,set,this,add,relevant,project,dependencies,to,classpath,classpath,urls,this,add,extra,plugin,dependencies,to,classpath,classpath,urls,this,add,relevant,plugin,dependencies,to,classpath,classpath,urls,if,log,classpath,get,log,info,classpath,for,url,url,classpath,urls,get,log,info,url,get,file,to,string,return,new,urlclass,loader,classpath,urls,to,array,new,url,classpath,urls,size
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1187272534;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact.getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1189091341;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact.getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1189839305;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact.getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1206583462;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1207386749;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1212331146;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1214324795;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1215270204;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1215417637;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1218042554;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1221674225;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1221720206;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1224637539;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1236234347;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1237977922;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1238053857;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1238054097;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1247130947;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1267540646;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1311876626;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1317763232;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1317831924;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1325694383;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1325779288;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1326499990;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1326623920;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1327086444;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1334243189;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1334249092;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1336211001;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1346758596;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1347388466;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1349099486;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1360254699;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1360273693;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1365230423;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1368004799;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1370248579;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1370525104;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1377246961;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1385292475;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1385953128;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1385989174;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1388443957;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1427090237;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1434620118;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1447426886;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1447432935;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1451121248;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1451412030;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1451417222;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1457013337;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1457014530;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1473505412;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1481880031;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1482161686;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1488463207;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1488476333;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1489581676;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1511424277;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1524063336;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1540108164;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1547240981;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact getExecutablePomArtifact(Artifact executableArtifact);1548788730;Get the artifact which refers to the POM of the executable artifact.__@param executableArtifact this artifact refers to the actual assembly._@return an artifact which refers to the POM of the executable artifact.;private Artifact getExecutablePomArtifact(Artifact executableArtifact) {_        return this.artifactFactory.createBuildArtifact(executableArtifact.getGroupId(), executableArtifact_            .getArtifactId(), executableArtifact.getVersion(), "pom")__    };get,the,artifact,which,refers,to,the,pom,of,the,executable,artifact,param,executable,artifact,this,artifact,refers,to,the,actual,assembly,return,an,artifact,which,refers,to,the,pom,of,the,executable,artifact;private,artifact,get,executable,pom,artifact,artifact,executable,artifact,return,this,artifact,factory,create,build,artifact,executable,artifact,get,group,id,executable,artifact,get,artifact,id,executable,artifact,get,version,pom
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1187272534;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a_POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency." + "  Specified executableToolAssembly is: " + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1189091341;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a_POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency." + "  Specified executableToolAssembly is: " + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1189839305;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a_POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency." + "  Specified executableToolAssembly is: " + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1206583462;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a_POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException(_                                             "No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1207386749;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a_POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException(_                                             "No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1212331146;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a_POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException(_                                             "No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1214324795;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a_POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException(_                                             "No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1215270204;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a_POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException(_                                             "No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1215417637;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a_POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException(_                                             "No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1218042554;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a_POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException(_                                             "No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1221674225;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a_POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1221720206;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1224637539;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1236234347;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1237977922;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1238053857;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1238054097;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1247130947;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1267540646;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1311876626;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1317763232;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1317831924;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Iterator iter = this.pluginDependencies.iterator()_ iter.hasNext()_) {_            Artifact pluginDep = (Artifact)iter.next()__            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,iterator,iter,this,plugin,dependencies,iterator,iter,has,next,artifact,plugin,dep,artifact,iter,next,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1325694383;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1325779288;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1326499990;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1326623920;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1327086444;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1334243189;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1334249092;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1336211001;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1346758596;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1347388466;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1349099486;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1360254699;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1360273693;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1365230423;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1368004799;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1370248579;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1370525104;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1377246961;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1385292475;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1385953128;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1385989174;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1388443957;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1427090237;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1434620118;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1447426886;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1447432935;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1451121248;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1451412030;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1451417222;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1457013337;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1457014530;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1473505412;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1481880031;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1482161686;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1488463207;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private Artifact findExecutableArtifact() throws MojoExecutionException;1488476333;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;private Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;private,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1365230423;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1368004799;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1370248579;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1370525104;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1377246961;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1385292475;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1385953128;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1385989174;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1388443957;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1427090237;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1434620118;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1447426886;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1447432935;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1451121248;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1451412030;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1451417222;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1457013337;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1457014530;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1473505412;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1481880031;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1482161686;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1488463207;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1488476333;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1489581676;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1511424277;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    if (getLog().isDebugEnabled()) {_                        getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    }_                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,if,get,log,is,debug,enabled,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1524063336;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    if (getLog().isDebugEnabled()) {_                        getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    }_                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,if,get,log,is,debug,enabled,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1540108164;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    if (getLog().isDebugEnabled()) {_                        getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    }_                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,if,get,log,is,debug,enabled,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1547240981;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    if (getLog().isDebugEnabled()) {_                        getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    }_                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,if,get,log,is,debug,enabled,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException;1548788730;Add any relevant project dependencies to the classpath. Indirectly takes_includePluginDependencies and ExecutableDependency into consideration.__@param path classpath of {@link java.net.URL} objects_@throws MojoExecutionException;private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {_        if (hasCommandlineArgs()) {_            arguments = parseCommandlineArgs()__        }__        try {_            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator()__            while (iter.hasNext()) {_                Artifact classPathElement = iter.next()___                _                _                if (classPathElement.getArtifactId().equals("org.osgi.core")) {_                    if (getLog().isDebugEnabled()) {_                        getLog().debug("Skipping org.osgi.core -> " + classPathElement.getGroupId() + "/" + classPathElement.getArtifactId() + "/" + classPathElement.getVersion())__                    }_                    continue__                }__                getLog().debug("Adding plugin dependency artifact: " + classPathElement.getArtifactId()_                                   + " to classpath")__                path.add(classPathElement.getFile().toURI().toURL())__            }_        } catch (MalformedURLException e) {_            throw new MojoExecutionException("Error during setting up classpath", e)__        }__    };add,any,relevant,project,dependencies,to,the,classpath,indirectly,takes,include,plugin,dependencies,and,executable,dependency,into,consideration,param,path,classpath,of,link,java,net,url,objects,throws,mojo,execution,exception;private,void,add,relevant,plugin,dependencies,to,classpath,set,url,path,throws,mojo,execution,exception,if,has,commandline,args,arguments,parse,commandline,args,try,iterator,artifact,iter,this,determine,relevant,plugin,dependencies,iterator,while,iter,has,next,artifact,class,path,element,iter,next,if,class,path,element,get,artifact,id,equals,org,osgi,core,if,get,log,is,debug,enabled,get,log,debug,skipping,org,osgi,core,class,path,element,get,group,id,class,path,element,get,artifact,id,class,path,element,get,version,continue,get,log,debug,adding,plugin,dependency,artifact,class,path,element,get,artifact,id,to,classpath,path,add,class,path,element,get,file,to,uri,to,url,catch,malformed,urlexception,e,throw,new,mojo,execution,exception,error,during,setting,up,classpath,e
RunMojo -> protected Artifact findExecutableArtifact() throws MojoExecutionException;1489581676;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;protected Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;protected,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> protected Artifact findExecutableArtifact() throws MojoExecutionException;1511424277;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;protected Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;protected,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> protected Artifact findExecutableArtifact() throws MojoExecutionException;1524063336;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;protected Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;protected,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> protected Artifact findExecutableArtifact() throws MojoExecutionException;1540108164;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;protected Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;protected,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> protected Artifact findExecutableArtifact() throws MojoExecutionException;1547240981;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;protected Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;protected,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
RunMojo -> protected Artifact findExecutableArtifact() throws MojoExecutionException;1548788730;Examine the plugin dependencies to find the executable artifact.__@return an artifact which refers to the actual executable tool (not a POM)_@throws MojoExecutionException;protected Artifact findExecutableArtifact() throws MojoExecutionException {_        _        __        Artifact executableTool = null__        for (Artifact pluginDep : this.pluginDependencies) {_            if (this.executableDependency.matches(pluginDep)) {_                executableTool = pluginDep__                break__            }_        }__        if (executableTool == null) {_            throw new MojoExecutionException("No dependency of the plugin matches the specified executableDependency."_                                                 + "  Specified executableToolAssembly is: "_                                                 + executableDependency.toString())__        }__        return executableTool__    };examine,the,plugin,dependencies,to,find,the,executable,artifact,return,an,artifact,which,refers,to,the,actual,executable,tool,not,a,pom,throws,mojo,execution,exception;protected,artifact,find,executable,artifact,throws,mojo,execution,exception,artifact,executable,tool,null,for,artifact,plugin,dep,this,plugin,dependencies,if,this,executable,dependency,matches,plugin,dep,executable,tool,plugin,dep,break,if,executable,tool,null,throw,new,mojo,execution,exception,no,dependency,of,the,plugin,matches,the,specified,executable,dependency,specified,executable,tool,assembly,is,executable,dependency,to,string,return,executable,tool
