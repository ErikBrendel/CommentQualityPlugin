commented;modifiers;parameterAmount;loc;comment;code
true;public;0;7;/**  * This method will run the mojo  */ ;/**  * This method will run the mojo  */ public void execute() throws MojoExecutionException {     try {         executeWithoutWrapping().     } catch (Exception e) {         throw new MojoExecutionException("Failed: " + e, e).     } }
false;public;0;11;;public void executeWithoutWrapping() throws MalformedURLException, ClassNotFoundException, NoSuchMethodException, IllegalAccessException, MojoExecutionException {     ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader().     try {         ClassLoader newLoader = createClassLoader(null).         Thread.currentThread().setContextClassLoader(newLoader).         runCamel(newLoader).     } finally {         Thread.currentThread().setContextClassLoader(oldClassLoader).     } }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public List<?> getClasspathElements() {     return classpathElements. }
false;public;1;3;;public void setClasspathElements(List<?> classpathElements) {     this.classpathElements = classpathElements. }
false;public;0;3;;public String getDuration() {     return duration. }
false;public;1;3;;public void setDuration(String duration) {     this.duration = duration. }
false;public;0;3;;public String getApplicationContextUri() {     return applicationContextUri. }
false;public;1;3;;public void setApplicationContextUri(String applicationContextUri) {     this.applicationContextUri = applicationContextUri. }
false;public;0;3;;public String getFileApplicationContextUri() {     return fileApplicationContextUri. }
false;public;1;3;;public void setFileApplicationContextUri(String fileApplicationContextUri) {     this.fileApplicationContextUri = fileApplicationContextUri. }
false;public;0;3;;public String getMainClass() {     return mainClass. }
false;public;1;3;;public void setMainClass(String mainClass) {     this.mainClass = mainClass. }
false;protected;1;16;;// Implementation methods // ------------------------------------------------------------------------- protected void runCamel(ClassLoader newLoader) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, MojoExecutionException {     getLog().debug("Running Camel in: " + newLoader).     Class<?> type = newLoader.loadClass(mainClass).     Method method = type.getMethod("main", String[].class).     String[] arguments = createArguments().     getLog().debug("Starting the Camel Main with arguments: " + Arrays.asList(arguments)).     try {         method.invoke(null, new Object[] { arguments }).     } catch (InvocationTargetException e) {         Throwable t = e.getTargetException().         throw new MojoExecutionException("Failed: " + t, t).     } }
false;protected;0;17;;protected String[] createArguments() {     List<String> args = new ArrayList<>(5).     if (applicationContextUri != null) {         args.add("-applicationContext").         args.add(applicationContextUri).     } else if (fileApplicationContextUri != null) {         args.add("-fileApplicationContext").         args.add(fileApplicationContextUri).     }     args.add("-duration").     args.add(getDuration()).     return args.toArray(new String[0]). }
false;public;1;14;;public ClassLoader createClassLoader(ClassLoader parent) throws MalformedURLException {     getLog().debug("Using classpath: " + classpathElements).     int size = classpathElements.size().     URL[] urls = new URL[size].     for (int i = 0. i < size. i++) {         String name = (String) classpathElements.get(i).         File file = new File(name).         urls[i] = file.toURI().toURL().         getLog().debug("URL: " + urls[i]).     }     URLClassLoader loader = new URLClassLoader(urls, parent).     return loader. }
