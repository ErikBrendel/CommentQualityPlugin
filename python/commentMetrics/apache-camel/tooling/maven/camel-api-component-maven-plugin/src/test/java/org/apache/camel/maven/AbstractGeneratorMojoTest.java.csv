commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;3;;protected void assertExists(File outFile) {     assertTrue("Generated file not found " + outFile.getPath(), outFile.exists()). }
false;protected;1;5;;protected void configureSourceGeneratorMojo(AbstractSourceGeneratorMojo mojo) {     configureGeneratorMojo(mojo).     mojo.generatedSrcDir = new File(OUT_DIR).     mojo.generatedTestDir = new File(OUT_DIR). }
false;public;0;4;;@Override public List getTestClasspathElements() throws DependencyResolutionRequiredException {     return Collections.EMPTY_LIST. }
false;public;0;4;;@Override public String getTestSourceDirectory() {     return OUT_DIR. }
false;public;0;12;;@Override public Build getBuild() {     return new Build() {          private static final long serialVersionUID = 1L.          @Override         public String getTestSourceDirectory() {             return OUT_DIR.         }     }. }
false;public;0;4;;@Override public String getGroupId() {     return "org.apache.camel.component". }
false;public;0;4;;@Override public String getArtifactId() {     return "camel-test". }
false;public;0;4;;@Override public String getVersion() {     return "1.0-SNAPSHOT". }
false;protected;1;40;;protected void configureGeneratorMojo(AbstractGeneratorMojo mojo) {     mojo.componentName = COMPONENT_NAME.     mojo.scheme = SCHEME.     mojo.outPackage = OUT_PACKAGE.     mojo.componentPackage = COMPONENT_PACKAGE.     mojo.project = new MavenProject((Model) null) {          @Override         public List getTestClasspathElements() throws DependencyResolutionRequiredException {             return Collections.EMPTY_LIST.         }          @Override         public Build getBuild() {             return new Build() {                  private static final long serialVersionUID = 1L.                  @Override                 public String getTestSourceDirectory() {                     return OUT_DIR.                 }             }.         }          @Override         public String getGroupId() {             return "org.apache.camel.component".         }          @Override         public String getArtifactId() {             return "camel-test".         }          @Override         public String getVersion() {             return "1.0-SNAPSHOT".         }     }. }
false;protected;0;3;;protected AbstractSourceGeneratorMojo createGeneratorMojo() {     return null. }
false;public;0;13;;@Test @SuppressWarnings("unchecked") public void shouldAddCompilationRootsByDefault() throws Exception {     AbstractSourceGeneratorMojo mojo = createGeneratorMojo().     Assume.assumeThat("Ignored because createGeneratorMojo is not implemented", mojo, notNullValue()).     // Differentiate target folders to simplify assertion     mojo.generatedSrcDir = new File(OUT_DIR.replace("-test-", "")).     mojo.generatedTestDir = new File(OUT_DIR).     mojo.execute().     assertCompileSourceRoots(mojo.project::getCompileSourceRoots, mojo.generatedSrcDir).     assertCompileSourceRoots(mojo.project::getTestCompileSourceRoots, mojo.generatedTestDir). }
false;public;0;14;;@Test public void shouldAddCompilationRootsByConfiguration() throws Exception {     File srcDir = new File(OUT_DIR.replace("-test-", "")).     File testDir = new File(OUT_DIR).     File[] empty = new File[0].     assertCompilationRootsByConfiguration(AbstractSourceGeneratorMojo.CompileRoots.source, srcDir, testDir, new File[] { srcDir, testDir }, empty).     assertCompilationRootsByConfiguration(AbstractSourceGeneratorMojo.CompileRoots.test, srcDir, testDir, empty, new File[] { srcDir, testDir }).     assertCompilationRootsByConfiguration(AbstractSourceGeneratorMojo.CompileRoots.all, srcDir, testDir, new File[] { srcDir }, new File[] { testDir }).     assertCompilationRootsByConfiguration(AbstractSourceGeneratorMojo.CompileRoots.none, srcDir, testDir, empty, empty). }
false;private;5;13;;private void assertCompilationRootsByConfiguration(AbstractSourceGeneratorMojo.CompileRoots compileRoots, File srcDir, File testDir, File[] expectedSource, File[] expectedTest) throws Exception {     AbstractSourceGeneratorMojo mojo = createGeneratorMojo().     Assume.assumeThat("Ignored because createGeneratorMojo is not implemented", mojo, notNullValue()).     mojo.generatedSrcDir = srcDir.     mojo.generatedTestDir = testDir.     mojo.addCompileSourceRoots = compileRoots.     mojo.execute().     assertCompileSourceRoots(mojo.project::getCompileSourceRoots, expectedSource).     assertCompileSourceRoots(mojo.project::getTestCompileSourceRoots, expectedTest). }
false;private;2;8;;private void assertCompileSourceRoots(Supplier<List<String>> roots, File... expectedSources) {     List<String> compileSourceRoots = roots.get().     Assert.assertThat(compileSourceRoots.size(), is(expectedSources.length)).     Assert.assertThat(compileSourceRoots, hasItems(Stream.of(expectedSources).map(File::getAbsolutePath).toArray(String[]::new))). }
