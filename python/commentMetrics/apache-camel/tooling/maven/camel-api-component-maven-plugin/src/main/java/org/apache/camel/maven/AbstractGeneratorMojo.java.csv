commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static void setSharedProjectState(boolean sharedProjectState) {     AbstractGeneratorMojo.sharedProjectState = sharedProjectState. }
false;protected,static;0;5;;protected static void clearSharedProjectState() {     if (!sharedProjectState) {         projectClassLoader = null.     } }
false;protected,static;0;18;;protected static VelocityEngine getEngine() throws MojoExecutionException {     if (engine == null) {         // initialize velocity to load resources from class loader and use Log4J         Properties velocityProperties = new Properties().         velocityProperties.setProperty(RuntimeConstants.RESOURCE_LOADER, "cloader").         velocityProperties.setProperty("cloader.resource.loader.class", ClasspathResourceLoader.class.getName()).         final Logger velocityLogger = LoggerFactory.getLogger("org.apache.camel.maven.Velocity").         velocityProperties.setProperty(RuntimeConstants.RUNTIME_LOG_NAME, velocityLogger.getName()).         try {             engine = new VelocityEngine(velocityProperties).             engine.init().         } catch (Exception e) {             throw new MojoExecutionException(e.getMessage(), e).         }     }     return engine. }
false;protected;0;23;;protected ClassLoader getProjectClassLoader() throws MojoExecutionException {     if (projectClassLoader == null) {         final List classpathElements.         try {             classpathElements = project.getTestClasspathElements().         } catch (org.apache.maven.artifact.DependencyResolutionRequiredException e) {             throw new MojoExecutionException(e.getMessage(), e).         }         final URL[] urls = new URL[classpathElements.size()].         int i = 0.         for (Iterator it = classpathElements.iterator(). it.hasNext(). i++) {             try {                 urls[i] = new File((String) it.next()).toURI().toURL().                 log.debug("Adding project path " + urls[i]).             } catch (MalformedURLException e) {                 throw new MojoExecutionException(e.getMessage(), e).             }         }         final ClassLoader tccl = Thread.currentThread().getContextClassLoader().         projectClassLoader = new URLClassLoader(urls, tccl != null ? tccl : getClass().getClassLoader()).     }     return projectClassLoader. }
false;protected;3;30;;protected void mergeTemplate(VelocityContext context, File outFile, String templateName) throws MojoExecutionException {     // ensure parent directories exist     final File outDir = outFile.getParentFile().     if (!outDir.isDirectory() && !outDir.mkdirs()) {         throw new MojoExecutionException("Error creating directory " + outDir).     }     // add generated date     context.put("generatedDate", new Date().toString()).     // add output package     context.put("packageName", outPackage).     context.put("newLine", "\n").     // load velocity template     Template template.     try {         template = getEngine().getTemplate(templateName, "UTF-8").     } catch (Exception e) {         throw new MojoExecutionException(e.getMessage(), e).     }     // generate file     try {         StringWriter writer = new StringWriter().         template.merge(context, writer).         updateResource(null, outFile.toPath(), writer.toString()).     } catch (VelocityException e) {         throw new MojoExecutionException(e.getMessage(), e).     } }
false;public,static;1;9;;public static String getCanonicalName(Class<?> type) {     // remove java.lang prefix for default Java package     String canonicalName = type.getCanonicalName().     final int pkgEnd = canonicalName.lastIndexOf('.').     if (pkgEnd > 0 && canonicalName.substring(0, pkgEnd).equals("java.lang")) {         canonicalName = canonicalName.substring(pkgEnd + 1).     }     return canonicalName. }
false;public,static;3;24;;public static void updateResource(BuildContext buildContext, Path out, String data) {     try {         if (data == null) {             if (Files.isRegularFile(out)) {                 Files.delete(out).                 refresh(buildContext, out).             }         } else {             if (Files.isRegularFile(out) && Files.isReadable(out)) {                 String content = new String(Files.readAllBytes(out), StandardCharsets.UTF_8).                 if (Objects.equals(content, data)) {                     return.                 }             }             Files.createDirectories(out.getParent()).             try (Writer w = Files.newBufferedWriter(out, StandardCharsets.UTF_8)) {                 w.append(data).             }             refresh(buildContext, out).         }     } catch (IOException e) {         throw new IOError(e).     } }
false;public,static;2;5;;public static void refresh(BuildContext buildContext, Path file) {     if (buildContext != null) {         buildContext.refresh(file.toFile()).     } }
