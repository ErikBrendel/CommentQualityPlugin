commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public void execute() throws MojoExecutionException, MojoFailureException {     RenderingContext context = new RenderingContext(reportOutputDirectory, getOutputName() + ".html").     SiteRendererSink sink = new SiteRendererSink(context).     Locale locale = Locale.getDefault().     try {         generate(sink, locale).     } catch (MavenReportException e) {         throw new MojoExecutionException(e.getMessage(), e).     } }
false;private;0;18;;private void loadApiCollection() throws MavenReportException {     try {         final Class<?> collectionClass = getProjectClassLoader().loadClass(outPackage + "." + componentName + "ApiCollection").         final Method getCollection = collectionClass.getMethod("getCollection").         this.collection = (ApiCollection) getCollection.invoke(null).     } catch (ClassNotFoundException e) {         throw new MavenReportException(e.getMessage(), e).     } catch (NoSuchMethodException e) {         throw new MavenReportException(e.getMessage(), e).     } catch (InvocationTargetException e) {         throw new MavenReportException(e.getMessage(), e).     } catch (IllegalAccessException e) {         throw new MavenReportException(e.getMessage(), e).     } catch (MojoExecutionException e) {         throw new MavenReportException(e.getMessage(), e).     } }
false;private;0;83;;private VelocityContext getDocumentContext() throws MavenReportException {     final VelocityContext context = new VelocityContext().     context.put("helper", this).     // project GAV     context.put("groupId", project.getGroupId()).     context.put("artifactId", project.getArtifactId()).     context.put("version", project.getVersion()).     // component URI format     // look for single API, no endpoint-prefix     @SuppressWarnings("unchecked")     final Set<String> apiNames = new TreeSet<String>(collection.getApiNames()).     context.put("apiNames", apiNames).     String suffix.     if (apiNames.size() == 1 && ((Set) apiNames).contains("")) {         suffix = "://endpoint?[options]".     } else {         suffix = "://endpoint-prefix/endpoint?[options]".     }     context.put("uriFormat", scheme + suffix).     // API helpers     final Map<String, ApiMethodHelper> apiHelpers = new TreeMap<>().     for (Object element : collection.getApiHelpers().entrySet()) {         Map.Entry entry = (Map.Entry) element.         apiHelpers.put(((ApiName) entry.getKey()).getName(), (ApiMethodHelper) entry.getValue()).     }     context.put("apiHelpers", apiHelpers).     // API methods and endpoint configurations     final Map<String, Class<? extends ApiMethod>> apiMethods = new TreeMap<>().     final Map<String, Class<?>> apiConfigs = new TreeMap<>().     for (Object element : collection.getApiMethods().entrySet()) {         Map.Entry entry = (Map.Entry) element.         final String name = ((ApiName) entry.getValue()).getName().         @SuppressWarnings("unchecked")         Class<? extends ApiMethod> apiMethod = (Class<? extends ApiMethod>) entry.getKey().         apiMethods.put(name, apiMethod).         Class<?> configClass.         try {             configClass = getProjectClassLoader().loadClass(getEndpointConfigName(apiMethod)).         } catch (ClassNotFoundException e) {             throw new MavenReportException(e.getMessage(), e).         } catch (MojoExecutionException e) {             throw new MavenReportException(e.getMessage(), e).         }         apiConfigs.put(name, configClass).     }     context.put("apiMethods", apiMethods).     context.put("apiConfigs", apiConfigs).     // API component properties     context.put("scheme", this.scheme).     context.put("componentName", this.componentName).     Class<?> configClass.     try {         configClass = getProjectClassLoader().loadClass(getComponentConfig()).     } catch (ClassNotFoundException e) {         throw new MavenReportException(e.getMessage(), e).     } catch (MojoExecutionException e) {         throw new MavenReportException(e.getMessage(), e).     }     context.put("componentConfig", configClass).     // get declared and derived fields for component config     // use get/set methods instead of fields, since this class could inherit others, that have private fields     // so getDeclaredFields() won't work, like it does for generated endpoint config classes!!!     final Map<String, String> configFields = new TreeMap<>().     do {         IntrospectionSupport.ClassInfo classInfo = IntrospectionSupport.cacheClass(configClass).         for (IntrospectionSupport.MethodInfo method : classInfo.methods) {             if (method.isSetter) {                 configFields.put(method.getterOrSetterShorthandName, getCanonicalName(method.method.getParameterTypes()[0])).             }         }         configClass = configClass.getSuperclass().     } while (configClass != null && !configClass.equals(Object.class)).     context.put("componentConfigFields", configFields).     return context. }
false;private;0;5;;private String getComponentConfig() {     StringBuilder builder = new StringBuilder(componentPackage).     builder.append(".").append(componentName).append("Configuration").     return builder.toString(). }
false;private;1;8;;private String getEndpointConfigName(Class<? extends ApiMethod> apiMethod) {     final String simpleName = apiMethod.getSimpleName().     StringBuilder builder = new StringBuilder(componentPackage).     builder.append(".").     builder.append(simpleName.substring(0, simpleName.indexOf("ApiMethod"))).     builder.append("EndpointConfiguration").     return builder.toString(). }
false;private;0;3;;private File getDocumentFile() {     return new File(getReportOutputDirectory(), getDocumentName() + ".html"). }
false;private;0;3;;private String getDocumentName() {     return this.componentName + "Component". }
false;public;2;11;;@Override public void generate(Sink sink, Locale locale) throws MavenReportException {     // load APICollection     loadApiCollection().     try {         mergeTemplate(getDocumentContext(), getDocumentFile(), "/api-document.vm").     } catch (MojoExecutionException e) {         throw new MavenReportException(e.getMessage(), e).     } }
false;public;0;4;;@Override public String getOutputName() {     return this.destDir + "/" + getDocumentName(). }
false;public;0;4;;@Override public String getCategoryName() {     return CATEGORY_PROJECT_REPORTS. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;7;;@Override public String getName(Locale locale) {     if (StringUtils.isEmpty(name)) {         return getBundle(locale).getString("report.cameldoc.name").     }     return name. }
false;public;1;3;;public void setDescription(String description) {     this.description = description. }
false;public;1;7;;@Override public String getDescription(Locale locale) {     if (StringUtils.isEmpty(description)) {         return getBundle(locale).getString("report.cameldoc.description").     }     return description. }
false;public;0;4;;@Override public File getReportOutputDirectory() {     return reportOutputDirectory. }
false;public;1;4;;@Override public void setReportOutputDirectory(File reportOutputDirectory) {     updateReportOutputDirectory(reportOutputDirectory). }
false;private;1;9;;private void updateReportOutputDirectory(File reportOutputDirectory) {     // append destDir if needed     if (this.destDir != null && reportOutputDirectory != null && !reportOutputDirectory.getAbsolutePath().endsWith(destDir)) {         this.reportOutputDirectory = new File(reportOutputDirectory, destDir).     } else {         this.reportOutputDirectory = reportOutputDirectory.     } }
false;public;0;3;;public String getDestDir() {     return destDir. }
false;public;1;4;;public void setDestDir(String destDir) {     this.destDir = destDir.     updateReportOutputDirectory(this.reportOutputDirectory). }
false;public;0;4;;@Override public boolean isExternalReport() {     return true. }
false;public;0;5;;@Override public boolean canGenerateReport() {     // TODO check for class availability??     return true. }
false;private;1;3;;private ResourceBundle getBundle(Locale locale) {     return ResourceBundle.getBundle("cameldoc-report", locale, getClass().getClassLoader()). }
false;public,static;3;124;;public static List<EndpointInfo> getEndpoints(Class<? extends ApiMethod> apiMethod, ApiMethodHelper<?> helper, Class<?> endpointConfig) {     // get list of valid options     final Set<String> validOptions = new HashSet<>().     for (Field field : endpointConfig.getDeclaredFields()) {         validOptions.add(field.getName()).     }     // create method name map     final Map<String, List<ApiMethod>> methodMap = new TreeMap<>().     for (ApiMethod method : apiMethod.getEnumConstants()) {         String methodName = method.getName().         List<ApiMethod> apiMethods = methodMap.get(methodName).         if (apiMethods == null) {             apiMethods = new ArrayList<>().             methodMap.put(methodName, apiMethods).         }         apiMethods.add(method).     }     // create method name to alias name map     final Map<String, Set<String>> aliasMap = new TreeMap<>().     final Map<String, Set<String>> aliasToMethodMap = helper.getAliases().     for (Map.Entry<String, Set<String>> entry : aliasToMethodMap.entrySet()) {         final String alias = entry.getKey().         for (String method : entry.getValue()) {             Set<String> aliases = aliasMap.get(method).             if (aliases == null) {                 aliases = new TreeSet<>().                 aliasMap.put(method, aliases).             }             aliases.add(alias).         }     }     // create options map and return type map     final Map<String, Set<String>> optionMap = new TreeMap<>().     final Map<String, Set<String>> returnType = new TreeMap<>().     for (Map.Entry<String, List<ApiMethod>> entry : methodMap.entrySet()) {         final String name = entry.getKey().         final List<ApiMethod> apiMethods = entry.getValue().         // count the number of times, every valid option shows up across methods         // and also collect return types         final Map<String, Integer> optionCount = new TreeMap<>().         final TreeSet<String> resultTypes = new TreeSet<>().         returnType.put(name, resultTypes).         for (ApiMethod method : apiMethods) {             for (String arg : method.getArgNames()) {                 if (validOptions.contains(arg)) {                     Integer count = optionCount.get(arg).                     if (count == null) {                         count = 1.                     } else {                         count += 1.                     }                     optionCount.put(arg, count).                 }             }             // wrap primitive result types             Class<?> resultType = method.getResultType().             if (resultType.isPrimitive()) {                 resultType = ClassUtils.primitiveToWrapper(resultType).             }             resultTypes.add(getCanonicalName(resultType)).         }         // collect method options         final TreeSet<String> options = new TreeSet<>().         optionMap.put(name, options).         final Set<String> mandatory = new TreeSet<>().         // generate optional and mandatory lists for overloaded methods         int nMethods = apiMethods.size().         for (ApiMethod method : apiMethods) {             final Set<String> optional = new TreeSet<>().             for (String arg : method.getArgNames()) {                 if (validOptions.contains(arg)) {                     final Integer count = optionCount.get(arg).                     if (count == nMethods) {                         mandatory.add(arg).                     } else {                         optional.add(arg).                     }                 }             }             if (!optional.isEmpty()) {                 options.add(optional.toString()).             }         }         if (!mandatory.isEmpty()) {             // strip [] from mandatory options             final String mandatoryOptions = mandatory.toString().             options.add(mandatoryOptions.substring(1, mandatoryOptions.length() - 1)).         }     }     // create endpoint data     final List<EndpointInfo> infos = new ArrayList<>().     for (Map.Entry<String, List<ApiMethod>> methodEntry : methodMap.entrySet()) {         final String endpoint = methodEntry.getKey().         // set endpoint name         EndpointInfo info = new EndpointInfo().         info.endpoint = endpoint.         info.aliases = convertSetToString(aliasMap.get(endpoint)).         info.options = convertSetToString(optionMap.get(endpoint)).         final Set<String> resultTypes = returnType.get(endpoint).         // get rid of void results         resultTypes.remove("void").         info.resultTypes = convertSetToString(resultTypes).         infos.add(info).     }     return infos. }
false;private,static;1;8;;private static String convertSetToString(Set<String> values) {     if (values != null && !values.isEmpty()) {         final String result = values.toString().         return result.substring(1, result.length() - 1).     } else {         return "".     } }
false;public,static;1;8;;public static String getCanonicalName(Field field) {     final Type fieldType = field.getGenericType().     if (fieldType instanceof ParameterizedType) {         return getCanonicalName((ParameterizedType) fieldType).     } else {         return getCanonicalName(field.getType()).     } }
false;private,static;1;24;;private static String getCanonicalName(ParameterizedType fieldType) {     final Type[] typeArguments = fieldType.getActualTypeArguments().     final int nArguments = typeArguments.length.     if (nArguments > 0) {         final StringBuilder result = new StringBuilder(getCanonicalName((Class<?>) fieldType.getRawType())).         result.append("&lt.").         int i = 0.         for (Type typeArg : typeArguments) {             if (typeArg instanceof ParameterizedType) {                 result.append(getCanonicalName((ParameterizedType) typeArg)).             } else {                 result.append(getCanonicalName((Class<?>) typeArg)).             }             if (++i < nArguments) {                 result.append(',').             }         }         result.append("&gt.").         return result.toString().     }     return getCanonicalName((Class<?>) fieldType.getRawType()). }
false;public;0;3;;public String getEndpoint() {     return endpoint. }
false;public;0;3;;public String getAliases() {     return aliases. }
false;public;0;3;;public String getOptions() {     return options. }
false;public;0;3;;public String getResultTypes() {     return resultTypes. }
