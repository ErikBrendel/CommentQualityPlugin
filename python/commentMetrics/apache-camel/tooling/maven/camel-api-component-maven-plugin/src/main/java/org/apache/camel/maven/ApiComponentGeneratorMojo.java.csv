commented;modifiers;parameterAmount;loc;comment;code
false;public;0;73;;@Override public void execute() throws MojoExecutionException, MojoFailureException {     if (apis == null || apis.length == 0) {         throw new MojoExecutionException("One or more API proxies are required").     }     // starting with a new project     clearSharedProjectState().     setSharedProjectState(true).     try {         // fix apiName for single API use-case since Maven configurator sets empty parameters as null!!!         if (apis.length == 1 && apis[0].getApiName() == null) {             apis[0].setApiName("").         }         // generate API methods for each API proxy         for (ApiProxy api : apis) {             // validate API configuration             api.validate().             // create the appropriate code generator if signatureFile or fromJavaDoc are specified             // this way users can skip generating API classes for duplicate proxy class references             final AbstractApiMethodGeneratorMojo apiMethodGenerator = getApiMethodGenerator(api).             if (apiMethodGenerator != null) {                 // configure API method properties and generate Proxy classes                 configureMethodGenerator(apiMethodGenerator, api).                 try {                     apiMethodGenerator.execute().                 } catch (Exception e) {                     final String msg = "Error generating source for " + api.getProxyClass() + ": " + e.getMessage().                     throw new MojoExecutionException(msg, e).                 }             } else {                 // make sure the proxy class is being generated elsewhere                 final String proxyClass = api.getProxyClass().                 boolean found = false.                 for (ApiProxy other : apis) {                     if (other != api && proxyClass.equals(other.getProxyClass())) {                         found = true.                         break.                     }                 }                 if (!found) {                     throw new MojoExecutionException("Missing one of fromSignatureFile or fromJavadoc for " + proxyClass).                 }             }             // set common aliases if needed             if (!aliases.isEmpty() && api.getAliases().isEmpty()) {                 api.setAliases(aliases).             }             // set common nullable options if needed             if (api.getNullableOptions() == null) {                 api.setNullableOptions(nullableOptions).             }         }         // generate ApiCollection         mergeTemplate(getApiContext(), getApiCollectionFile(), "/api-collection.vm").         // generate ApiName         mergeTemplate(getApiContext(), getApiNameFile(), "/api-name-enum.vm").     } finally {         // clear state for next Mojo         setSharedProjectState(false).         clearSharedProjectState().     } }
false;private;2;27;;private void configureMethodGenerator(AbstractApiMethodGeneratorMojo mojo, ApiProxy apiProxy) {     // set AbstractGeneratorMojo properties     mojo.componentName = componentName.     mojo.scheme = scheme.     mojo.outPackage = outPackage.     mojo.componentPackage = componentPackage.     mojo.project = project.     // set AbstractSourceGeneratorMojo properties     mojo.generatedSrcDir = generatedSrcDir.     mojo.generatedTestDir = generatedTestDir.     mojo.addCompileSourceRoots = addCompileSourceRoots.     // set AbstractAPIMethodBaseMojo properties     mojo.substitutions = apiProxy.getSubstitutions().length != 0 ? apiProxy.getSubstitutions() : substitutions.     mojo.excludeConfigNames = apiProxy.getExcludeConfigNames() != null ? apiProxy.getExcludeConfigNames() : excludeConfigNames.     mojo.excludeConfigTypes = apiProxy.getExcludeConfigTypes() != null ? apiProxy.getExcludeConfigTypes() : excludeConfigTypes.     mojo.extraOptions = apiProxy.getExtraOptions() != null ? apiProxy.getExtraOptions() : extraOptions.     // set AbstractAPIMethodGeneratorMojo properties     mojo.proxyClass = apiProxy.getProxyClass(). }
false;private;1;31;;private AbstractApiMethodGeneratorMojo getApiMethodGenerator(ApiProxy api) {     AbstractApiMethodGeneratorMojo apiMethodGenerator = null.     final File signatureFile = api.getFromSignatureFile().     if (signatureFile != null) {         final FileApiMethodGeneratorMojo fileMojo = new FileApiMethodGeneratorMojo().         fileMojo.signatureFile = signatureFile.         apiMethodGenerator = fileMojo.     } else {         final FromJavadoc apiFromJavadoc = api.getFromJavadoc().         if (apiFromJavadoc != null) {             final JavadocApiMethodGeneratorMojo javadocMojo = new JavadocApiMethodGeneratorMojo().             javadocMojo.excludePackages = apiFromJavadoc.getExcludePackages() != null ? apiFromJavadoc.getExcludePackages() : fromJavadoc.getExcludePackages().             javadocMojo.excludeClasses = apiFromJavadoc.getExcludeClasses() != null ? apiFromJavadoc.getExcludeClasses() : fromJavadoc.getExcludeClasses().             javadocMojo.includeMethods = apiFromJavadoc.getIncludeMethods() != null ? apiFromJavadoc.getIncludeMethods() : fromJavadoc.getIncludeMethods().             javadocMojo.excludeMethods = apiFromJavadoc.getExcludeMethods() != null ? apiFromJavadoc.getExcludeMethods() : fromJavadoc.getExcludeMethods().             javadocMojo.includeStaticMethods = apiFromJavadoc.getIncludeStaticMethods() != null ? apiFromJavadoc.getIncludeStaticMethods() : fromJavadoc.getIncludeStaticMethods().             apiMethodGenerator = javadocMojo.         }     }     return apiMethodGenerator. }
false;private;0;10;;private VelocityContext getApiContext() {     final VelocityContext context = new VelocityContext().     context.put("componentName", componentName).     context.put("componentPackage", componentPackage).     context.put("apis", apis).     context.put("helper", getClass()).     context.put("collectionName", getApiCollectionName()).     context.put("apiNameEnum", getApiNameEnum()).     return context. }
false;private;0;3;;private String getApiCollectionName() {     return componentName + "ApiCollection". }
false;private;0;3;;private String getApiNameEnum() {     return componentName + "ApiName". }
false;private;0;5;;private File getApiCollectionFile() {     final StringBuilder fileName = getFileBuilder().     fileName.append(getApiCollectionName()).append(".java").     return new File(generatedSrcDir, fileName.toString()). }
false;private;0;5;;private File getApiNameFile() {     final StringBuilder fileName = getFileBuilder().     fileName.append(getApiNameEnum()).append(".java").     return new File(generatedSrcDir, fileName.toString()). }
false;private;0;5;;private StringBuilder getFileBuilder() {     final StringBuilder fileName = new StringBuilder().     fileName.append(outPackage.replaceAll("\\.", Matcher.quoteReplacement(File.separator))).append(File.separator).     return fileName. }
false;public,static;1;4;;public static String getApiMethod(String proxyClass) {     String proxyClassWithCanonicalName = getProxyClassWithCanonicalName(proxyClass).     return proxyClassWithCanonicalName.substring(proxyClassWithCanonicalName.lastIndexOf('.') + 1) + "ApiMethod". }
false;public,static;1;4;;public static String getEndpointConfig(String proxyClass) {     String proxyClassWithCanonicalName = getProxyClassWithCanonicalName(proxyClass).     return proxyClassWithCanonicalName.substring(proxyClassWithCanonicalName.lastIndexOf('.') + 1) + "EndpointConfiguration". }
false;private,static;1;3;;private static String getProxyClassWithCanonicalName(String proxyClass) {     return proxyClass.replace("$", ""). }
false;public,static;1;18;;public static String getEnumConstant(String enumValue) {     if (enumValue == null || enumValue.isEmpty()) {         return "DEFAULT".     }     StringBuilder builder = new StringBuilder().     if (!Character.isJavaIdentifierStart(enumValue.charAt(0))) {         builder.append('_').     }     for (char c : enumValue.toCharArray()) {         char upperCase = Character.toUpperCase(c).         if (!Character.isJavaIdentifierPart(upperCase)) {             builder.append('_').         } else {             builder.append(upperCase).         }     }     return builder.toString(). }
false;public,static;1;17;;public static String getNullableOptionValues(String[] nullableOptions) {     if (nullableOptions == null || nullableOptions.length == 0) {         return "".     }     final StringBuilder builder = new StringBuilder().     final int nOptions = nullableOptions.length.     int i = 0.     for (String option : nullableOptions) {         builder.append('"').append(option).append('"').         if (++i < nOptions) {             builder.append(", ").         }     }     return builder.toString(). }
