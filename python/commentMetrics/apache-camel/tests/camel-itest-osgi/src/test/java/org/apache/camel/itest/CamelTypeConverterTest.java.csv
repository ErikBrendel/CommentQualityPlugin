commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;@Test public void testTypeConverterInSameBundleAsCamelRoute() throws Exception {     // install the camel blueprint xml file and the Camel converter we use in this test     URL blueprintUrl = ObjectHelper.loadResourceAsURL("org/apache/camel/itest/CamelTypeConverterTest.xml", CamelTypeConverterTest.class.getClassLoader()).     installBlueprintAsBundle("CamelTypeConverterTest", blueprintUrl, true, bundle -> {         // install converter         ((TinyBundle) bundle).add("META-INF/services/org/apache/camel/TypeConverter", new ByteArrayInputStream("org.apache.camel.itest.typeconverter.MyConverter".getBytes())).add(MyConverter.class, InnerClassStrategy.NONE).set(Constants.DYNAMICIMPORT_PACKAGE, "*").     }).     // lookup Camel from OSGi     CamelContext camel = getOsgiService(bundleContext, CamelContext.class).     final Pojo pojo = new Pojo().     String pojoName = "Constantine".     pojo.setName(pojoName).     final DefaultExchange exchange = new DefaultExchange(camel).     final String string = camel.getTypeConverter().mandatoryConvertTo(String.class, exchange, pojo).     LOG.info("POJO -> String: {}", string).     final Pojo copy = camel.getTypeConverter().mandatoryConvertTo(Pojo.class, exchange, string).     LOG.info("String -> POJO: {}", copy).     Assert.assertEquals(pojoName, copy.getName()). }
false;public;0;4;;@Configuration public Option[] configure() {     return CamelKarafTestSupport.configure("camel-test-karaf"). }
false;public;1;6;;@ProbeBuilder public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {     // Export Pojo class for TypeConverter bundle     probe.setHeader(Constants.EXPORT_PACKAGE, "org.apache.camel.itest").     return probe. }
