commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public ITestConfigBuilder module(String module) {     config.setModuleName(module).     return this. }
false;public;1;4;;public ITestConfigBuilder mavenGroup(String mavenGroup) {     config.setMavenGroup(mavenGroup).     return this. }
false;public;1;4;;public ITestConfigBuilder mavenVersion(String mavenVersion) {     config.setMavenVersion(mavenVersion).     return this. }
false;public;1;4;;public ITestConfigBuilder modulesPath(String path) {     config.setModulesPath(path).     return this. }
false;public;1;4;;public ITestConfigBuilder basePath(String basePath) {     config.setModuleBasePath(basePath).     return this. }
false;public;1;4;;public ITestConfigBuilder unitTestExpectedNumber(int number) {     config.setUnitTestsExpectedNumber(number).     return this. }
false;public;1;4;;public ITestConfigBuilder unitTestBasePackage(String pack) {     config.setUnitTestBasePackage(pack).     return this. }
false;public;1;4;;public ITestConfigBuilder unitTestInclusionPattern(String pattern) {     config.setUnitTestInclusionPattern(pattern).     return this. }
false;public;1;4;;public ITestConfigBuilder unitTestExclusionPattern(String pattern) {     config.setUnitTestExclusionPattern(pattern).     return this. }
false;public;1;4;;public ITestConfigBuilder autostart(Boolean autostart) {     config.setAutoStartComponent(autostart).     return this. }
false;public;2;7;;public ITestConfigBuilder resource(String file, String dest) {     if (config.getResources() == null) {         config.setResources(new HashMap<>()).     }     config.getResources().put(file, dest).     return this. }
false;public;1;7;;public ITestConfigBuilder dependency(String dependencyCanonicalForm) {     if (config.getAdditionalDependencies() == null) {         config.setAdditionalDependencies(new HashSet<>()).     }     config.getAdditionalDependencies().add(dependencyCanonicalForm).     return this. }
false;public;1;10;;public ITestConfigBuilder exclusion(String exclusionCanonicalForm) {     if (exclusionCanonicalForm.split(":").length != 2) {         throw new IllegalArgumentException("Expected exclusion in the form groupId:artifactId, got: " + exclusionCanonicalForm).     }     if (config.getMavenExclusions() == null) {         config.setMavenExclusions(new HashSet<String>()).     }     config.getMavenExclusions().add(exclusionCanonicalForm).     return this. }
false;public;1;3;;public ITestConfigBuilder resource(String file) {     return resource(file, file). }
false;public;1;7;;public ITestConfigBuilder disableJmx(String name) {     if (config.getJmxDisabledNames() == null) {         config.setJmxDisabledNames(new TreeSet<String>()).     }     config.getJmxDisabledNames().add(name).     return this. }
false;public;2;7;;public ITestConfigBuilder systemProperty(String name, String value) {     if (config.getSystemProperties() == null) {         config.setSystemProperties(new HashMap<String, String>()).     }     config.getSystemProperties().put(name, value).     return this. }
false;public;1;4;;public ITestConfigBuilder customLog(Boolean value) {     config.setUseCustomLog(value).     return this. }
false;public;1;7;;public ITestConfigBuilder ignoreLibraryMismatch(String libraryPrefix) {     if (config.getIgnoreLibraryMismatch() == null) {         config.setIgnoreLibraryMismatch(new HashSet<String>()).     }     config.getIgnoreLibraryMismatch().add(libraryPrefix).     return this. }
false;public;2;7;;public ITestConfigBuilder testLibraryVersion(String groupIdArtifactId, String version) {     if (config.getTestLibraryVersions() == null) {         config.setTestLibraryVersions(new HashMap<>()).     }     config.getTestLibraryVersions().put(groupIdArtifactId, version).     return this. }
false;public;1;4;;public ITestConfigBuilder includeTestDependencies(Boolean includeTestDependencies) {     config.setIncludeTestDependencies(includeTestDependencies).     return this. }
false;public;1;4;;public ITestConfigBuilder unitTestsEnabled(Boolean unitTestsEnabled) {     config.setUnitTestEnabled(unitTestsEnabled).     return this. }
false;public;1;4;;public ITestConfigBuilder springBootVersion(String springBootVersion) {     config.setSpringBootVersion(springBootVersion).     return this. }
false;public;0;94;;public ITestConfig build() {     // Checking conditions     if (config.getModuleName() == null) {         fail("ModuleName is required").     }     // Set the defaults     if (config.getUnitTestEnabled() == null) {         config.setUnitTestEnabled(booleanPropertyOr("unitTestEnabled", true)).     }     if (config.getMavenGroup() == null) {         config.setMavenGroup(propertyOr("mavenGroup", "org.apache.camel")).     }     if (config.getMavenVersion() == null) {         config.setMavenVersion(propertyOr("mavenVersion", null)).     }     if (config.getMavenOfflineResolution() == null) {         config.setMavenOfflineResolution(booleanPropertyOr("mavenOfflineResolution", false)).     }     if (config.getUnitTestInclusionPattern() == null) {         // All tests         config.setUnitTestInclusionPattern(propertyOr("unitTestInclusionPattern", "^.*Test$")).     }     if (config.getUnitTestExclusionPattern() == null) {         // Integration test         config.setUnitTestExclusionPattern(propertyOr("unitTestExclusionPattern", ".*(\\.integration\\..*|IntegrationTest$)")).     }     if (config.getIncludeTestDependencies() == null) {         config.setIncludeTestDependencies(booleanPropertyOr("includeTestDependencies", config.getUnitTestEnabled())).     }     if (config.getIncludeProvidedDependencies() == null) {         config.setIncludeProvidedDependencies(booleanPropertyOr("includeProvidedDependencies", false)).     }     if (config.getModulesPath() == null) {         config.setModulesPath(propertyOr("modulesPath", "../../components/")).     }     if (config.getModuleBasePath() == null) {         config.setModuleBasePath(config.getModulesPath() + config.getModuleName()).     }     if (config.getUnitTestBasePackage() == null) {         config.setUnitTestBasePackage(propertyOr("unitTestBasePackage", "org.apache.camel")).     }     if (config.getAutoStartComponent() == null) {         config.setAutoStartComponent(booleanPropertyOr("autostartComponent", true)).     }     if (config.getResources() == null) {         config.setResources(new HashMap<>()).     }     if (config.getAdditionalDependencies() == null) {         config.setAdditionalDependencies(new HashSet<>()).     }     if (config.getMavenExclusions() == null) {         config.setMavenExclusions(new HashSet<>()).     }     if (config.getJmxDisabledNames() == null) {         config.setJmxDisabledNames(new HashSet<>()).     }     if (config.getSystemProperties() == null) {         config.setSystemProperties(new HashMap<>()).     }     if (config.getUseCustomLog() == null) {         config.setUseCustomLog(booleanPropertyOr("useCustomLog", true)).     }     if (config.getIgnoreLibraryMismatch() == null) {         config.setIgnoreLibraryMismatch(new HashSet<>()).     }     if (config.getTestLibraryVersions() == null) {         config.setTestLibraryVersions(new HashMap<>()).     }     if (config.getSpringBootVersion() == null) {         config.setSpringBootVersion(propertyOr("springBootVersion", null)).     }     return config. }
false;private;1;3;;private void fail(String msg) {     throw new IllegalStateException("Configuration is not complete: " + msg). }
false;private;2;7;;private String propertyOr(String name, String defaultVal) {     String res = System.getProperty(CONFIG_PREFIX + name).     if (res == null) {         res = defaultVal.     }     return res. }
false;private;2;9;;private Boolean booleanPropertyOr(String name, Boolean defaultVal) {     String prop = propertyOr(name, null).     Boolean res = defaultVal.     if (prop != null) {         res = Boolean.valueOf(prop).     }     return res. }
false;private;2;9;;private Integer integerPropertyOr(String name, Integer defaultVal) {     String prop = propertyOr(name, null).     Integer res = defaultVal.     if (prop != null) {         res = Integer.valueOf(prop).     }     return res. }
