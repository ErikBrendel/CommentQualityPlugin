commented;modifiers;parameterAmount;loc;comment;code
false;private;0;11;;private boolean canUseCache() throws IOException {     if (CACHE_FILE.exists()) {         BasicFileAttributes attr = Files.readAttributes(CACHE_FILE.toPath(), BasicFileAttributes.class).         FileTime fileTime = attr != null ? attr.creationTime() : null.         Long time = fileTime != null ? fileTime.toMillis() : null.         // Update the cache every day         return time != null && time.compareTo(System.currentTimeMillis() - 1000 * 60 * 60 * 24) > 0.     }     return false. }
false;private;0;68;;private void retrieveUpstreamBOMVersions() throws Exception {     RepositorySystem system = newRepositorySystem().     DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession().     LocalRepository localRepo = new LocalRepository(LOCAL_REPO).     session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepo)).     String camelVersion = DependencyResolver.resolveCamelParentProperty("${project.version}").     List<Artifact> neededArtifacts = new LinkedList<>().     Artifact camelRoot = new DefaultArtifact("org.apache.camel:camel:pom:" + camelVersion).setFile(camelRoot("pom.xml")).     neededArtifacts.add(camelRoot).     Artifact camelParent = new DefaultArtifact("org.apache.camel:camel-parent:pom:" + camelVersion).setFile(camelRoot("parent/pom.xml")).     neededArtifacts.add(camelParent).     neededArtifacts.add(new DefaultArtifact("org.apache.camel:spring-boot:pom:" + camelVersion).setFile(camelRoot("platforms/spring-boot/pom.xml"))).     neededArtifacts.add(new DefaultArtifact("org.apache.camel:camel-spring-boot-dm:pom:" + camelVersion).setFile(camelRoot("platforms/spring-boot/spring-boot-dm/pom.xml"))).     neededArtifacts.add(new DefaultArtifact("org.apache.camel:camel-spring-boot-dependencies:pom:" + camelVersion).setFile(camelRoot("platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml"))).     Artifact camelStarterParent = new DefaultArtifact("org.apache.camel:camel-starter-parent:pom:" + camelVersion).setFile(camelRoot("platforms/spring-boot/spring-boot-dm/camel-starter-parent/pom.xml")).     neededArtifacts.add(camelStarterParent).     RemoteRepository localRepoDist = new RemoteRepository.Builder("org.apache.camel.itest.springboot", "default", new File(LOCAL_REPO).toURI().toString()).build().     for (Artifact artifact : neededArtifacts) {         DeployRequest deployRequest = new DeployRequest().         deployRequest.addArtifact(artifact).         deployRequest.setRepository(localRepoDist).         system.deploy(session, deployRequest).     }     RemoteRepository mavenCentral = new RemoteRepository.Builder("central", "default", "http://repo1.maven.org/maven2/").build().     RemoteRepository apacheSnapshots = new RemoteRepository.Builder("apache-snapshots", "default", "http://repository.apache.org/snapshots/").build().     RemoteRepository springMilestones = new RemoteRepository.Builder("spring-milestones", "default", "https://repo.spring.io/libs-milestone/").build().     this.versions = new TreeMap<>().     ArtifactDescriptorRequest springBootParentReq = new ArtifactDescriptorRequest(camelStarterParent, Arrays.asList(localRepoDist, mavenCentral, apacheSnapshots, springMilestones), null).     ArtifactDescriptorResult springBootParentRes = system.readArtifactDescriptor(session, springBootParentReq).     for (Dependency dependency : springBootParentRes.getManagedDependencies()) {         Artifact a = dependency.getArtifact().         String key = a.getGroupId() + ":" + a.getArtifactId().         versions.put(key, dependency.getArtifact().getVersion()).     }     Artifact springBootDependencies = new DefaultArtifact("org.springframework.boot:spring-boot-dependencies:pom:" + config.getSpringBootVersion()).     ArtifactDescriptorRequest springBootDependenciesReq = new ArtifactDescriptorRequest(springBootDependencies, Arrays.asList(localRepoDist, mavenCentral, apacheSnapshots, springMilestones), null).     ArtifactDescriptorResult springBootDependenciesRes = system.readArtifactDescriptor(session, springBootDependenciesReq).     for (Dependency dependency : springBootDependenciesRes.getManagedDependencies()) {         Artifact a = dependency.getArtifact().         String key = a.getGroupId() + ":" + a.getArtifactId().         versions.put(key, dependency.getArtifact().getVersion()).     } }
false;public,static;1;6;;public static BOMResolver getInstance(ITestConfig config) {     if (instance == null) {         instance = new BOMResolver(config).     }     return instance. }
false;public;2;3;;public String getBOMVersion(String groupId, String artifactId) {     return versions.get(groupId + ":" + artifactId). }
false;private;0;6;;private void cleanupLocalRepo() throws IOException {     File f = new File(LOCAL_REPO).     if (f.exists()) {         FileUtils.deleteDirectory(f).     } }
false;private;0;8;;private RepositorySystem newRepositorySystem() {     DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator().     locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class).     locator.addService(TransporterFactory.class, FileTransporterFactory.class).     locator.addService(TransporterFactory.class, HttpTransporterFactory.class).     RepositorySystem system = locator.getService(RepositorySystem.class).     return system. }
