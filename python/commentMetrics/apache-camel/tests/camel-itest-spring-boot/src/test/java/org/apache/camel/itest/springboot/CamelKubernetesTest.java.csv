commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@Deployment public static Archive<?> createSpringBootPackage() throws Exception {     return ArquillianPackager.springBootPackage(createTestConfig()). }
false;public,static;0;6;;public static ITestConfig createTestConfig() {     return new ITestConfigBuilder().module(inferModuleName(CamelKubernetesTest.class)).build(). }
false;public;0;21;;@Test public void componentTests() throws Exception {     this.runComponentTest(createTestConfig(), "kubernetes-config-maps").     this.runComponentTest(createTestConfig(), "kubernetes-deployments").     this.runComponentTest(createTestConfig(), "kubernetes-hpa").     this.runComponentTest(createTestConfig(), "kubernetes-job").     this.runComponentTest(createTestConfig(), "kubernetes-namespaces").     this.runComponentTest(createTestConfig(), "kubernetes-nodes").     this.runComponentTest(createTestConfig(), "kubernetes-persistent-volumes-claims").     this.runComponentTest(createTestConfig(), "kubernetes-persistent-volumes").     this.runComponentTest(createTestConfig(), "kubernetes-pods").     this.runComponentTest(createTestConfig(), "kubernetes-replication-controllers").     this.runComponentTest(createTestConfig(), "kubernetes-resources-quota").     this.runComponentTest(createTestConfig(), "kubernetes-secrets").     this.runComponentTest(createTestConfig(), "kubernetes-service-accounts").     this.runComponentTest(createTestConfig(), "kubernetes-services").     this.runComponentTest(createTestConfig(), "openshift-builds").     this.runComponentTest(createTestConfig(), "openshift-build-configs").     this.runModuleUnitTestsIfEnabled(config). }
