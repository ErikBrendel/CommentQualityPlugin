commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void run(String[] args) throws Exception {     this.launch(args). }
false;protected;3;9;;@Override protected void launch(String[] args, String mainClass, ClassLoader classLoader) throws Exception {     this.classLoader = classLoader.     MainMethodRunner runner = createMainMethodRunner(mainClass, args, classLoader).     Thread.currentThread().setContextClassLoader(classLoader).     runner.run(). }
false;protected;1;11;;@Override protected ClassLoader createClassLoader(URL[] urls) throws Exception {     // The spring classloader should not be built on top of the current classloader, it should just share the test classes if available     List<URL> parentUrls = Arrays.asList(((URLClassLoader) this.getClass().getClassLoader()).getURLs()).     List<URL> additionalURLs = parentUrls.stream().filter(u -> u.toString().startsWith("file") && !u.toString().endsWith(".jar")).collect(Collectors.toList()).     ArrayList<URL> newURLs = new ArrayList(Arrays.asList(urls)).     newURLs.addAll(additionalURLs).     return new LaunchedURLClassLoader(newURLs.toArray(new URL[0]), null). }
true;public;0;3;/**  * Returns the classloader used by spring, to communicate with it.  *  * @return the spring classloader  */ ;/**  * Returns the classloader used by spring, to communicate with it.  *  * @return the spring classloader  */ public ClassLoader getClassLoader() {     return classLoader. }
