commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;23;/**  * Retrieves a list of dependencies of the given scope  */ ;/**  * Retrieves a list of dependencies of the given scope  */ public static List<String> getDependencies(String pom, String scope) throws Exception {     String expression = "/project/dependencies/dependency[scope='" + scope + "']".     DocumentBuilder builder = factory.newDocumentBuilder().     Document doc = builder.parse(pom).     XPath xpath = xPathfactory.newXPath().     XPathExpression expr = xpath.compile(expression).     List<String> dependencies = new LinkedList<>().     NodeList nodes = (NodeList) expr.evaluate(doc, XPathConstants.NODESET).     for (int i = 0. i < nodes.getLength(). i++) {         Node node = nodes.item(i).         try (StringWriter writer = new StringWriter()) {             Transformer transformer = TransformerFactory.newInstance().newTransformer().             transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes").             transformer.transform(new DOMSource(node), new StreamResult(writer)).             String xml = writer.toString().             dependencies.add(xml).         }     }     return dependencies. }
false;public,static;2;14;;public static String resolveModuleOrParentProperty(File modulePom, String property) {     property = resolveProperty(modulePom, property, 0).     if (property != null && !isResolved(property)) {         property = resolveSpringBootParentProperty(property).     }     if (property != null && !isResolved(property)) {         property = resolveCamelParentProperty(property).     }     if (property != null && !isResolved(property)) {         property = resolveCamelProperty(property).     }     return property. }
false;public,static;1;8;;public static String resolveParentProperty(String property) {     property = resolveSpringBootParentProperty(property).     if (property != null && !isResolved(property)) {         property = resolveCamelParentProperty(property).     }     return property. }
false;public,static;1;3;;public static String resolveSpringBootParentProperty(String property) {     return resolveProperty(camelRoot("platforms/spring-boot/spring-boot-dm/pom.xml"), property, 0). }
false;public,static;1;3;;public static String resolveCamelParentProperty(String property) {     return resolveProperty(camelRoot("parent/pom.xml"), property, 0). }
false;public,static;1;3;;public static String resolveCamelProperty(String property) {     return resolveProperty(camelRoot("pom.xml"), property, 0). }
false;private,static;3;27;;private static String resolveProperty(File pom, String property, int depth) {     try {         property = property.trim().         if (!property.startsWith("${") || !property.endsWith("}")) {             throw new IllegalArgumentException("Wrong property reference: " + property).         }         String res.         if (property.equals("${project.version}")) {             res = getParentVersion(pom).         } else {             String p = property.substring(2).             p = p.substring(0, p.length() - 1).             res = getPropertyFromPom(pom, p).             if (res == null) {                 return property.             }         }         if (res != null && !isResolved(res) && depth < 5) {             res = resolveProperty(pom, res, depth + 1).         }         return res.     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;private,static;2;3;;private static String getPropertyFromPom(File pom, String property) throws Exception {     return xpath(pom, "/project/properties/" + property + "/text()"). }
false;private,static;1;3;;private static String getParentVersion(File pom) throws Exception {     return xpath(pom, "/project/parent/version/text()"). }
false;private,static;2;11;;private static String xpath(File pom, String expression) throws Exception {     DocumentBuilder builder = factory.newDocumentBuilder().     Document doc = builder.parse(pom).     XPath xpath = xPathfactory.newXPath().     XPathExpression expr = xpath.compile(expression).     String res = expr.evaluate(doc).     if (res != null && res.trim().length() == 0) {         res = null.     }     return res. }
false;private,static;1;3;;private static boolean isResolved(String value) {     return value != null && !value.startsWith("$"). }
