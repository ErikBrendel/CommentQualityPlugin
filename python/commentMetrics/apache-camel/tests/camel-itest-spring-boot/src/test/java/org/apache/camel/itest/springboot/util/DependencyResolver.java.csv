# id;timestamp;commentText;codeText;commentWords;codeWords
DependencyResolver -> public static String withVersion(String groupArtifact);1467628831;Gets a groupId and artifactId in the form "groupId:artifactId" and returns the current version from the pom._Uses {@link DependencyResolver#withVersion(String, String)} using a default prefix.__@param groupArtifact the groupId and artifactId in the form "groupId:artifactId"_@return the maven canonical form of the artifact "groupId:artifactId:version"_@throws RuntimeException if the version cannot be resolved;public static String withVersion(String groupArtifact) {_        return withVersion(DEFAULT_PREFIX, groupArtifact)__    };gets,a,group,id,and,artifact,id,in,the,form,group,id,artifact,id,and,returns,the,current,version,from,the,pom,uses,link,dependency,resolver,with,version,string,string,using,a,default,prefix,param,group,artifact,the,group,id,and,artifact,id,in,the,form,group,id,artifact,id,return,the,maven,canonical,form,of,the,artifact,group,id,artifact,id,version,throws,runtime,exception,if,the,version,cannot,be,resolved;public,static,string,with,version,string,group,artifact,return,with,version,group,artifact
DependencyResolver -> public static String withVersion(String groupArtifact);1467642392;Gets a groupId and artifactId in the form "groupId:artifactId" and returns the current version from the pom._Uses {@link DependencyResolver#withVersion(String, String)} using a default prefix.__@param groupArtifact the groupId and artifactId in the form "groupId:artifactId"_@return the maven canonical form of the artifact "groupId:artifactId:version";public static String withVersion(String groupArtifact) {_        return withVersion(DEFAULT_PREFIX, groupArtifact)__    };gets,a,group,id,and,artifact,id,in,the,form,group,id,artifact,id,and,returns,the,current,version,from,the,pom,uses,link,dependency,resolver,with,version,string,string,using,a,default,prefix,param,group,artifact,the,group,id,and,artifact,id,in,the,form,group,id,artifact,id,return,the,maven,canonical,form,of,the,artifact,group,id,artifact,id,version;public,static,string,with,version,string,group,artifact,return,with,version,group,artifact
DependencyResolver -> public static String withVersion(String groupArtifact);1467875996;Gets a groupId and artifactId in the form "groupId:artifactId" and returns the current version from the pom._Uses {@link DependencyResolver#withVersion(String, String)} using a default prefix.__@param groupArtifact the groupId and artifactId in the form "groupId:artifactId"_@return the maven canonical form of the artifact "groupId:artifactId:version";public static String withVersion(String groupArtifact) {_        return withVersion(DEFAULT_PREFIX, groupArtifact)__    };gets,a,group,id,and,artifact,id,in,the,form,group,id,artifact,id,and,returns,the,current,version,from,the,pom,uses,link,dependency,resolver,with,version,string,string,using,a,default,prefix,param,group,artifact,the,group,id,and,artifact,id,in,the,form,group,id,artifact,id,return,the,maven,canonical,form,of,the,artifact,group,id,artifact,id,version;public,static,string,with,version,string,group,artifact,return,with,version,group,artifact
DependencyResolver -> public static String withVersion(String groupArtifact);1471246043;Gets a groupId and artifactId in the form "groupId:artifactId" and returns the current version from the pom._Uses {@link DependencyResolver#withVersion(String, String)} using a default prefix.__@param groupArtifact the groupId and artifactId in the form "groupId:artifactId"_@return the maven canonical form of the artifact "groupId:artifactId:version";public static String withVersion(String groupArtifact) {_        return withVersion(DEFAULT_PREFIX, groupArtifact)__    };gets,a,group,id,and,artifact,id,in,the,form,group,id,artifact,id,and,returns,the,current,version,from,the,pom,uses,link,dependency,resolver,with,version,string,string,using,a,default,prefix,param,group,artifact,the,group,id,and,artifact,id,in,the,form,group,id,artifact,id,return,the,maven,canonical,form,of,the,artifact,group,id,artifact,id,version;public,static,string,with,version,string,group,artifact,return,with,version,group,artifact
DependencyResolver -> public static Set<String> getExclusions(String pom, String groupId, String artifactId) throws Exception;1467875996;Retrieves a list of transitive exclusions included in the pom, given the coordinate of a maven dependency._Useful to overcome limitations of Arquillian maven resolver.__@param pom the pom where dependencies should be looked up_@param groupId the group id of the dependency_@param artifactId the artifact id of the dependency_@return the set of exclusions in the form groupId:artifactId_@throws Exception if anything goes wrong;public static Set<String> getExclusions(String pom, String groupId, String artifactId) throws Exception {_        String expression = "/project/dependencies/dependency[groupId='" + groupId + "' and artifactId='" + artifactId + "']/exclusions"___        DocumentBuilder builder = factory.newDocumentBuilder()__        Document doc = builder.parse(pom)__        XPath xpath = xPathfactory.newXPath()__        XPathExpression expr = xpath.compile(expression)___        NodeList nodes = (NodeList) expr.evaluate(doc, XPathConstants.NODESET)__        if (nodes == null || nodes.getLength() < 1) {_            return Collections.emptySet()__        }__        Set<String> exclusionSet = new HashSet<>()___        NodeList exclusions = nodes.item(0).getChildNodes()__        for (int i = 0_ i < exclusions.getLength()_ i++) {_            Node exclusionNode = exclusions.item(i)__            if (exclusionNode instanceof Element) {_                Element exclusion = (Element) exclusionNode__                NodeList exclGroupIds = exclusion.getElementsByTagName("groupId")__                String exclGroupIdVal = exclGroupIds.getLength() == 0 ? null : exclGroupIds.item(0).getTextContent()__                NodeList exclArtifactIds = exclusion.getElementsByTagName("artifactId")__                String exclArtifactIdVal = exclGroupIds.getLength() == 0 ? null : exclArtifactIds.item(0).getTextContent()__                if (exclGroupIdVal != null && exclArtifactIdVal != null) {_                    exclusionSet.add(exclGroupIdVal + ":" + exclArtifactIdVal)__                }_            }_        }__        return exclusionSet__    };retrieves,a,list,of,transitive,exclusions,included,in,the,pom,given,the,coordinate,of,a,maven,dependency,useful,to,overcome,limitations,of,arquillian,maven,resolver,param,pom,the,pom,where,dependencies,should,be,looked,up,param,group,id,the,group,id,of,the,dependency,param,artifact,id,the,artifact,id,of,the,dependency,return,the,set,of,exclusions,in,the,form,group,id,artifact,id,throws,exception,if,anything,goes,wrong;public,static,set,string,get,exclusions,string,pom,string,group,id,string,artifact,id,throws,exception,string,expression,project,dependencies,dependency,group,id,group,id,and,artifact,id,artifact,id,exclusions,document,builder,builder,factory,new,document,builder,document,doc,builder,parse,pom,xpath,xpath,x,pathfactory,new,xpath,xpath,expression,expr,xpath,compile,expression,node,list,nodes,node,list,expr,evaluate,doc,xpath,constants,nodeset,if,nodes,null,nodes,get,length,1,return,collections,empty,set,set,string,exclusion,set,new,hash,set,node,list,exclusions,nodes,item,0,get,child,nodes,for,int,i,0,i,exclusions,get,length,i,node,exclusion,node,exclusions,item,i,if,exclusion,node,instanceof,element,element,exclusion,element,exclusion,node,node,list,excl,group,ids,exclusion,get,elements,by,tag,name,group,id,string,excl,group,id,val,excl,group,ids,get,length,0,null,excl,group,ids,item,0,get,text,content,node,list,excl,artifact,ids,exclusion,get,elements,by,tag,name,artifact,id,string,excl,artifact,id,val,excl,group,ids,get,length,0,null,excl,artifact,ids,item,0,get,text,content,if,excl,group,id,val,null,excl,artifact,id,val,null,exclusion,set,add,excl,group,id,val,excl,artifact,id,val,return,exclusion,set
DependencyResolver -> public static Set<String> getExclusions(String pom, String groupId, String artifactId) throws Exception;1471246043;Retrieves a list of transitive exclusions included in the pom, given the coordinate of a maven dependency._Useful to overcome limitations of Arquillian maven resolver.__@param pom the pom where dependencies should be looked up_@param groupId the group id of the dependency_@param artifactId the artifact id of the dependency_@return the set of exclusions in the form groupId:artifactId_@throws Exception if anything goes wrong;public static Set<String> getExclusions(String pom, String groupId, String artifactId) throws Exception {_        String expression = "/project/dependencies/dependency[groupId='" + groupId + "' and artifactId='" + artifactId + "']/exclusions"___        DocumentBuilder builder = factory.newDocumentBuilder()__        Document doc = builder.parse(pom)__        XPath xpath = xPathfactory.newXPath()__        XPathExpression expr = xpath.compile(expression)___        NodeList nodes = (NodeList) expr.evaluate(doc, XPathConstants.NODESET)__        if (nodes == null || nodes.getLength() < 1) {_            return Collections.emptySet()__        }__        Set<String> exclusionSet = new HashSet<>()___        NodeList exclusions = nodes.item(0).getChildNodes()__        for (int i = 0_ i < exclusions.getLength()_ i++) {_            Node exclusionNode = exclusions.item(i)__            if (exclusionNode instanceof Element) {_                Element exclusion = (Element) exclusionNode__                NodeList exclGroupIds = exclusion.getElementsByTagName("groupId")__                String exclGroupIdVal = exclGroupIds.getLength() == 0 ? null : exclGroupIds.item(0).getTextContent()__                NodeList exclArtifactIds = exclusion.getElementsByTagName("artifactId")__                String exclArtifactIdVal = exclGroupIds.getLength() == 0 ? null : exclArtifactIds.item(0).getTextContent()__                if (exclGroupIdVal != null && exclArtifactIdVal != null) {_                    exclusionSet.add(exclGroupIdVal + ":" + exclArtifactIdVal)__                }_            }_        }__        return exclusionSet__    };retrieves,a,list,of,transitive,exclusions,included,in,the,pom,given,the,coordinate,of,a,maven,dependency,useful,to,overcome,limitations,of,arquillian,maven,resolver,param,pom,the,pom,where,dependencies,should,be,looked,up,param,group,id,the,group,id,of,the,dependency,param,artifact,id,the,artifact,id,of,the,dependency,return,the,set,of,exclusions,in,the,form,group,id,artifact,id,throws,exception,if,anything,goes,wrong;public,static,set,string,get,exclusions,string,pom,string,group,id,string,artifact,id,throws,exception,string,expression,project,dependencies,dependency,group,id,group,id,and,artifact,id,artifact,id,exclusions,document,builder,builder,factory,new,document,builder,document,doc,builder,parse,pom,xpath,xpath,x,pathfactory,new,xpath,xpath,expression,expr,xpath,compile,expression,node,list,nodes,node,list,expr,evaluate,doc,xpath,constants,nodeset,if,nodes,null,nodes,get,length,1,return,collections,empty,set,set,string,exclusion,set,new,hash,set,node,list,exclusions,nodes,item,0,get,child,nodes,for,int,i,0,i,exclusions,get,length,i,node,exclusion,node,exclusions,item,i,if,exclusion,node,instanceof,element,element,exclusion,element,exclusion,node,node,list,excl,group,ids,exclusion,get,elements,by,tag,name,group,id,string,excl,group,id,val,excl,group,ids,get,length,0,null,excl,group,ids,item,0,get,text,content,node,list,excl,artifact,ids,exclusion,get,elements,by,tag,name,artifact,id,string,excl,artifact,id,val,excl,group,ids,get,length,0,null,excl,artifact,ids,item,0,get,text,content,if,excl,group,id,val,null,excl,artifact,id,val,null,exclusion,set,add,excl,group,id,val,excl,artifact,id,val,return,exclusion,set
DependencyResolver -> public static String withVersion(String prefix, String groupArtifact);1467628831;Gets a groupId and artifactId in the form "groupId:artifactId" and returns the current version from the pom._Versions are resolved from system properties when using surefire, and by looking at the poms when running from IDE.__@param prefix the prefix to use to lookup the property from surefire_@param groupArtifact the groupId and artifactId in the form "groupId:artifactId"_@return the maven canonical form of the artifact "groupId:artifactId:version"_@throws RuntimeException if the version cannot be resolved;public static String withVersion(String prefix, String groupArtifact) {_        String version = System.getProperty(prefix + groupArtifact)___        try {_            if (version == null) {_                _                version = resolveSurefireProperty(prefix + groupArtifact)__            }_        } catch (Exception e) {_            throw new IllegalStateException("Error while retrieving version for artifact: " + groupArtifact, e)__        }__        if (version == null) {_            throw new IllegalStateException("Cannot determine version for maven artifact: " + groupArtifact)__        } else if (!isResolved(version)) {_            throw new IllegalStateException("Cannot resolve version for maven artifact: " + groupArtifact + ". Missing property value: " + version)__        }__        return groupArtifact + ":" + version__    };gets,a,group,id,and,artifact,id,in,the,form,group,id,artifact,id,and,returns,the,current,version,from,the,pom,versions,are,resolved,from,system,properties,when,using,surefire,and,by,looking,at,the,poms,when,running,from,ide,param,prefix,the,prefix,to,use,to,lookup,the,property,from,surefire,param,group,artifact,the,group,id,and,artifact,id,in,the,form,group,id,artifact,id,return,the,maven,canonical,form,of,the,artifact,group,id,artifact,id,version,throws,runtime,exception,if,the,version,cannot,be,resolved;public,static,string,with,version,string,prefix,string,group,artifact,string,version,system,get,property,prefix,group,artifact,try,if,version,null,version,resolve,surefire,property,prefix,group,artifact,catch,exception,e,throw,new,illegal,state,exception,error,while,retrieving,version,for,artifact,group,artifact,e,if,version,null,throw,new,illegal,state,exception,cannot,determine,version,for,maven,artifact,group,artifact,else,if,is,resolved,version,throw,new,illegal,state,exception,cannot,resolve,version,for,maven,artifact,group,artifact,missing,property,value,version,return,group,artifact,version
DependencyResolver -> public static String withVersion(String prefix, String groupArtifact);1467642392;Gets a groupId and artifactId in the form "groupId:artifactId" and returns the current version from the pom._Versions are resolved from system properties when using surefire, and by looking at the poms when running from IDE.__@param prefix the prefix to use to lookup the property from surefire_@param groupArtifact the groupId and artifactId in the form "groupId:artifactId"_@return the maven canonical form of the artifact "groupId:artifactId:version";public static String withVersion(String prefix, String groupArtifact) {_        String version = System.getProperty(prefix + groupArtifact)___        try {_            if (version == null) {_                _                version = resolveSurefireProperty(prefix + groupArtifact)__            }_        } catch (Exception e) {_            _            System.out.println("RESOLVER ERROR>> Error while retrieving version for artifact: " + groupArtifact)__            e.printStackTrace()__            return groupArtifact__        }__        if (version == null) {_            System.out.println("RESOLVER ERROR>> Cannot determine version for maven artifact: " + groupArtifact)__            return groupArtifact__        } else if (!isResolved(version)) {_            System.out.println("RESOLVER ERROR>> Cannot resolve version for maven artifact: " + groupArtifact + ". Missing property value: " + version)__            return groupArtifact__        }__        return groupArtifact + ":" + version__    };gets,a,group,id,and,artifact,id,in,the,form,group,id,artifact,id,and,returns,the,current,version,from,the,pom,versions,are,resolved,from,system,properties,when,using,surefire,and,by,looking,at,the,poms,when,running,from,ide,param,prefix,the,prefix,to,use,to,lookup,the,property,from,surefire,param,group,artifact,the,group,id,and,artifact,id,in,the,form,group,id,artifact,id,return,the,maven,canonical,form,of,the,artifact,group,id,artifact,id,version;public,static,string,with,version,string,prefix,string,group,artifact,string,version,system,get,property,prefix,group,artifact,try,if,version,null,version,resolve,surefire,property,prefix,group,artifact,catch,exception,e,system,out,println,resolver,error,error,while,retrieving,version,for,artifact,group,artifact,e,print,stack,trace,return,group,artifact,if,version,null,system,out,println,resolver,error,cannot,determine,version,for,maven,artifact,group,artifact,return,group,artifact,else,if,is,resolved,version,system,out,println,resolver,error,cannot,resolve,version,for,maven,artifact,group,artifact,missing,property,value,version,return,group,artifact,return,group,artifact,version
DependencyResolver -> public static String withVersion(String prefix, String groupArtifact);1467875996;Gets a groupId and artifactId in the form "groupId:artifactId" and returns the current version from the pom._Versions are resolved from system properties when using surefire, and by looking at the poms when running from IDE.__@param prefix the prefix to use to lookup the property from surefire_@param groupArtifact the groupId and artifactId in the form "groupId:artifactId"_@return the maven canonical form of the artifact "groupId:artifactId:version";public static String withVersion(String prefix, String groupArtifact) {_        String version = System.getProperty(prefix + groupArtifact)___        try {_            if (version == null) {_                _                version = resolveSurefireProperty(prefix + groupArtifact)__            }_        } catch (Exception e) {_            _            System.out.println("RESOLVER ERROR>> Error while retrieving version for artifact: " + groupArtifact)__            e.printStackTrace()__            return groupArtifact__        }__        if (version == null) {_            System.out.println("RESOLVER ERROR>> Cannot determine version for maven artifact: " + groupArtifact)__            return groupArtifact__        } else if (!isResolved(version)) {_            System.out.println("RESOLVER ERROR>> Cannot resolve version for maven artifact: " + groupArtifact + ". Missing property value: " + version)__            return groupArtifact__        }__        return groupArtifact + ":" + version__    };gets,a,group,id,and,artifact,id,in,the,form,group,id,artifact,id,and,returns,the,current,version,from,the,pom,versions,are,resolved,from,system,properties,when,using,surefire,and,by,looking,at,the,poms,when,running,from,ide,param,prefix,the,prefix,to,use,to,lookup,the,property,from,surefire,param,group,artifact,the,group,id,and,artifact,id,in,the,form,group,id,artifact,id,return,the,maven,canonical,form,of,the,artifact,group,id,artifact,id,version;public,static,string,with,version,string,prefix,string,group,artifact,string,version,system,get,property,prefix,group,artifact,try,if,version,null,version,resolve,surefire,property,prefix,group,artifact,catch,exception,e,system,out,println,resolver,error,error,while,retrieving,version,for,artifact,group,artifact,e,print,stack,trace,return,group,artifact,if,version,null,system,out,println,resolver,error,cannot,determine,version,for,maven,artifact,group,artifact,return,group,artifact,else,if,is,resolved,version,system,out,println,resolver,error,cannot,resolve,version,for,maven,artifact,group,artifact,missing,property,value,version,return,group,artifact,return,group,artifact,version
DependencyResolver -> public static String withVersion(String prefix, String groupArtifact);1471246043;Gets a groupId and artifactId in the form "groupId:artifactId" and returns the current version from the pom._Versions are resolved from system properties when using surefire, and by looking at the poms when running from IDE.__@param prefix the prefix to use to lookup the property from surefire_@param groupArtifact the groupId and artifactId in the form "groupId:artifactId"_@return the maven canonical form of the artifact "groupId:artifactId:version";public static String withVersion(String prefix, String groupArtifact) {_        String version = System.getProperty(prefix + groupArtifact)___        try {_            if (version == null) {_                _                version = resolveSurefireProperty(prefix + groupArtifact)__            }_        } catch (Exception e) {_            _            System.out.println("RESOLVER ERROR>> Error while retrieving version for artifact: " + groupArtifact)__            e.printStackTrace()__            return groupArtifact__        }__        if (version == null) {_            System.out.println("RESOLVER ERROR>> Cannot determine version for maven artifact: " + groupArtifact)__            return groupArtifact__        } else if (!isResolved(version)) {_            System.out.println("RESOLVER ERROR>> Cannot resolve version for maven artifact: " + groupArtifact + ". Missing property value: " + version)__            return groupArtifact__        }__        return groupArtifact + ":" + version__    };gets,a,group,id,and,artifact,id,in,the,form,group,id,artifact,id,and,returns,the,current,version,from,the,pom,versions,are,resolved,from,system,properties,when,using,surefire,and,by,looking,at,the,poms,when,running,from,ide,param,prefix,the,prefix,to,use,to,lookup,the,property,from,surefire,param,group,artifact,the,group,id,and,artifact,id,in,the,form,group,id,artifact,id,return,the,maven,canonical,form,of,the,artifact,group,id,artifact,id,version;public,static,string,with,version,string,prefix,string,group,artifact,string,version,system,get,property,prefix,group,artifact,try,if,version,null,version,resolve,surefire,property,prefix,group,artifact,catch,exception,e,system,out,println,resolver,error,error,while,retrieving,version,for,artifact,group,artifact,e,print,stack,trace,return,group,artifact,if,version,null,system,out,println,resolver,error,cannot,determine,version,for,maven,artifact,group,artifact,return,group,artifact,else,if,is,resolved,version,system,out,println,resolver,error,cannot,resolve,version,for,maven,artifact,group,artifact,missing,property,value,version,return,group,artifact,return,group,artifact,version
DependencyResolver -> public static List<String> getDependencies(String pom, String scope) throws Exception;1474442175;Retrieves a list of dependencies of the given scope;public static List<String> getDependencies(String pom, String scope) throws Exception {_        String expression = "/project/dependencies/dependency[scope='" + scope + "']"___        DocumentBuilder builder = factory.newDocumentBuilder()__        Document doc = builder.parse(pom)__        XPath xpath = xPathfactory.newXPath()__        XPathExpression expr = xpath.compile(expression)___        List<String> dependencies = new LinkedList<>()__        NodeList nodes = (NodeList) expr.evaluate(doc, XPathConstants.NODESET)__        for (int i = 0_ i < nodes.getLength()_ i++) {_            Node node = nodes.item(i)__            try (StringWriter writer = new StringWriter()) {_                Transformer transformer = TransformerFactory.newInstance().newTransformer()__                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes")__                transformer.transform(new DOMSource(node), new StreamResult(writer))__                String xml = writer.toString()__                dependencies.add(xml)__            }_        }__        return dependencies__    };retrieves,a,list,of,dependencies,of,the,given,scope;public,static,list,string,get,dependencies,string,pom,string,scope,throws,exception,string,expression,project,dependencies,dependency,scope,scope,document,builder,builder,factory,new,document,builder,document,doc,builder,parse,pom,xpath,xpath,x,pathfactory,new,xpath,xpath,expression,expr,xpath,compile,expression,list,string,dependencies,new,linked,list,node,list,nodes,node,list,expr,evaluate,doc,xpath,constants,nodeset,for,int,i,0,i,nodes,get,length,i,node,node,nodes,item,i,try,string,writer,writer,new,string,writer,transformer,transformer,transformer,factory,new,instance,new,transformer,transformer,set,output,property,output,keys,yes,transformer,transform,new,domsource,node,new,stream,result,writer,string,xml,writer,to,string,dependencies,add,xml,return,dependencies
DependencyResolver -> public static List<String> getDependencies(String pom, String scope) throws Exception;1478248316;Retrieves a list of dependencies of the given scope;public static List<String> getDependencies(String pom, String scope) throws Exception {_        String expression = "/project/dependencies/dependency[scope='" + scope + "']"___        DocumentBuilder builder = factory.newDocumentBuilder()__        Document doc = builder.parse(pom)__        XPath xpath = xPathfactory.newXPath()__        XPathExpression expr = xpath.compile(expression)___        List<String> dependencies = new LinkedList<>()__        NodeList nodes = (NodeList) expr.evaluate(doc, XPathConstants.NODESET)__        for (int i = 0_ i < nodes.getLength()_ i++) {_            Node node = nodes.item(i)__            try (StringWriter writer = new StringWriter()) {_                Transformer transformer = TransformerFactory.newInstance().newTransformer()__                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes")__                transformer.transform(new DOMSource(node), new StreamResult(writer))__                String xml = writer.toString()__                dependencies.add(xml)__            }_        }__        return dependencies__    };retrieves,a,list,of,dependencies,of,the,given,scope;public,static,list,string,get,dependencies,string,pom,string,scope,throws,exception,string,expression,project,dependencies,dependency,scope,scope,document,builder,builder,factory,new,document,builder,document,doc,builder,parse,pom,xpath,xpath,x,pathfactory,new,xpath,xpath,expression,expr,xpath,compile,expression,list,string,dependencies,new,linked,list,node,list,nodes,node,list,expr,evaluate,doc,xpath,constants,nodeset,for,int,i,0,i,nodes,get,length,i,node,node,nodes,item,i,try,string,writer,writer,new,string,writer,transformer,transformer,transformer,factory,new,instance,new,transformer,transformer,set,output,property,output,keys,yes,transformer,transform,new,domsource,node,new,stream,result,writer,string,xml,writer,to,string,dependencies,add,xml,return,dependencies
DependencyResolver -> public static List<String> getDependencies(String pom, String scope) throws Exception;1506344157;Retrieves a list of dependencies of the given scope;public static List<String> getDependencies(String pom, String scope) throws Exception {_        String expression = "/project/dependencies/dependency[scope='" + scope + "']"___        DocumentBuilder builder = factory.newDocumentBuilder()__        Document doc = builder.parse(pom)__        XPath xpath = xPathfactory.newXPath()__        XPathExpression expr = xpath.compile(expression)___        List<String> dependencies = new LinkedList<>()__        NodeList nodes = (NodeList) expr.evaluate(doc, XPathConstants.NODESET)__        for (int i = 0_ i < nodes.getLength()_ i++) {_            Node node = nodes.item(i)__            try (StringWriter writer = new StringWriter()) {_                Transformer transformer = TransformerFactory.newInstance().newTransformer()__                transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes")__                transformer.transform(new DOMSource(node), new StreamResult(writer))__                String xml = writer.toString()__                dependencies.add(xml)__            }_        }__        return dependencies__    };retrieves,a,list,of,dependencies,of,the,given,scope;public,static,list,string,get,dependencies,string,pom,string,scope,throws,exception,string,expression,project,dependencies,dependency,scope,scope,document,builder,builder,factory,new,document,builder,document,doc,builder,parse,pom,xpath,xpath,x,pathfactory,new,xpath,xpath,expression,expr,xpath,compile,expression,list,string,dependencies,new,linked,list,node,list,nodes,node,list,expr,evaluate,doc,xpath,constants,nodeset,for,int,i,0,i,nodes,get,length,i,node,node,nodes,item,i,try,string,writer,writer,new,string,writer,transformer,transformer,transformer,factory,new,instance,new,transformer,transformer,set,output,property,output,keys,yes,transformer,transform,new,domsource,node,new,stream,result,writer,string,xml,writer,to,string,dependencies,add,xml,return,dependencies
