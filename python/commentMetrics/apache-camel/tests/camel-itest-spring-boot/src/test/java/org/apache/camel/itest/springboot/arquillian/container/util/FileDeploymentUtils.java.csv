commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;16;;public static void materializeClass(File entryDirectory, ClassAsset classAsset) throws DeploymentException, IOException {     File classDirectory.     if (classAsset.getSource().getPackage() != null) {         classDirectory = new File(entryDirectory, classAsset.getSource().getPackage().getName().replace(DELIMITER_CLASS_NAME_PATH, File.separatorChar)).         if (!classDirectory.mkdirs()) {             throw new DeploymentException("Could not create class package directory: " + classDirectory).         }     } else {         classDirectory = entryDirectory.     }     File classFile = new File(classDirectory, classAsset.getSource().getSimpleName().concat(EXTENSION_CLASS)).     classFile.createNewFile().     try (InputStream in = classAsset.openStream().         OutputStream out = new FileOutputStream(classFile)) {         copy(in, out).     } }
false;public,static;2;23;;public static void materializeSubdirectories(File entryDirectory, Node node) throws DeploymentException, IOException {     for (Node child : node.getChildren()) {         if (child.getAsset() == null) {             materializeSubdirectories(entryDirectory, child).         } else {             if (ClassPathDirectory.isMarkerFileArchivePath(child.getPath())) {                 // Do not materialize the marker file                 continue.             }             // E.g. META-INF/my-super-descriptor.xml             File resourceFile = new File(entryDirectory, child.getPath().get().replace(DELIMITER_RESOURCE_PATH, File.separatorChar)).             File resoureDirectory = resourceFile.getParentFile().             if (!resoureDirectory.exists() && !resoureDirectory.mkdirs()) {                 throw new DeploymentException("Could not create class path directory: " + entryDirectory).             }             resourceFile.createNewFile().             try (InputStream in = child.getAsset().openStream().                 OutputStream out = new FileOutputStream(resourceFile)) {                 copy(in, out).             }             child.getPath().get().         }     } }
false;public,static;2;8;;public static void copy(InputStream in, OutputStream out) throws IOException {     final byte[] buffer = new byte[8192].     int n = 0.     while (-1 != (n = in.read(buffer))) {         out.write(buffer, 0, n).     }     out.flush(). }
false;public;2;5;;@Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {     Files.delete(file).     return FileVisitResult.CONTINUE. }
false;public;2;5;;@Override public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {     Files.delete(dir).     return FileVisitResult.CONTINUE. }
false;public,static;1;15;;public static void deleteRecursively(Path directory) throws IOException {     Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {          @Override         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {             Files.delete(file).             return FileVisitResult.CONTINUE.         }          @Override         public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {             Files.delete(dir).             return FileVisitResult.CONTINUE.         }     }). }
false;public;2;5;;@Override public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {     Files.delete(file).     return FileVisitResult.CONTINUE. }
false;public,static;1;9;;public static void deleteContent(Path directory) throws IOException {     Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {          @Override         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {             Files.delete(file).             return FileVisitResult.CONTINUE.         }     }). }
