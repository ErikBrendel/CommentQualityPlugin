commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;6;;@AfterClass public static void stopService() {     if (endpoint != null) {         endpoint.stop().     } }
false;public,static;0;6;;@BeforeClass public static void startService() {     implementor = new GreeterImpl().     String address = "http://localhost:" + CXFTestSupport.getPort1() + "/CxfPayLoadProviderRouterTest/SoapContext/SoapPort".     endpoint = Endpoint.publish(address, implementor). }
false;protected;0;7;;@Override protected Properties useOverridePropertiesWithPropertiesComponent() {     Properties extra = new Properties().     extra.put("router.address", "http://localhost:" + CXFTestSupport.getPort2() + "/CxfPayloadProviderRouterTest/CamelContext/RouterPort").     extra.put("service.address", "http://localhost:" + CXFTestSupport.getPort1() + "/CxfPayLoadProviderRouterTest/SoapContext/SoapPort").     return extra. }
false;protected;0;4;;@Override protected String getBlueprintDescriptor() {     return "org/apache/camel/test/cxf/blueprint/CxfPayloadProviderRouterBeans.xml". }
false;public;0;7;;@Test public void testPublishEndpointUrl() throws Exception {     final String path = "CxfPayloadProviderRouterTest/CamelContext/RouterPort".     String response = template.requestBody("http://localhost:" + CXFTestSupport.getPort2() + "/" + path + "?wsdl", null, String.class).     assertTrue("Can't find the right service location.", response.indexOf(path) > 0). }
false;public;0;26;;@Test public void testInvokeGreetMeOverProvider() throws Exception {     Service service = Service.create(serviceName).     service.addPort(routerPortName, "http://schemas.xmlsoap.org/soap/", "http://localhost:" + CXFTestSupport.getPort2() + "/" + getClass().getSimpleName() + "/CamelContext/RouterPort").     Greeter greeter = service.getPort(routerPortName, Greeter.class).     org.apache.cxf.endpoint.Client client = org.apache.cxf.frontend.ClientProxy.getClient(greeter).     VerifyInboundInterceptor icp = new VerifyInboundInterceptor().     client.getInInterceptors().add(icp).     int ic = implementor.getInvocationCount().     icp.setCalled(false).     String reply = greeter.greetMe("test").     assertEquals("Got the wrong reply ", "Hello test", reply).     assertTrue("No Inbound message received", icp.isCalled()).     assertEquals("The target service not invoked", ++ic, implementor.getInvocationCount()).     icp.setCalled(false).     greeter.greetMeOneWay("call greetMe OneWay !").     assertFalse("An unnecessary inbound message", icp.isCalled()).     // wait a few seconds for the async oneway service to be invoked     Thread.sleep(3000).     assertEquals("The target service not invoked", ++ic, implementor.getInvocationCount()). }
false;public;1;4;;@Override public void handleMessage(Message message) throws Fault {     called = true. }
false;public;0;3;;public boolean isCalled() {     return called. }
false;public;1;3;;public void setCalled(boolean b) {     called = b. }
