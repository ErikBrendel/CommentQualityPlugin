commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected Properties useOverridePropertiesWithPropertiesComponent() {     Properties extra = new Properties().     extra.put("router.address", "http://localhost:" + CXFTestSupport.getPort1() + "/CxfConsumerWSRMTest/router").     return extra. }
false;protected;0;4;;@Override protected String getBlueprintDescriptor() {     return "org/apache/camel/test/cxf/blueprint/CxfConsumerWSRMBeans.xml". }
false;public;0;3;;public boolean isCreateCamelContextPerClass() {     return true. }
false;public;0;22;;@Test public void testInvokeGreeter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     Bus clientBus = context.getRegistry().lookupByNameAndType("client-bus", Bus.class).     assertNotNull(clientBus).     BusFactory.setThreadDefaultBus(clientBus).     try {         Service service = Service.create(SERVICE_NAME).         service.addPort(PORT_NAME, "http://schemas.xmlsoap.org/soap/", "http://localhost:" + CXFTestSupport.getPort1() + "/CxfConsumerWSRMTest/router").         Greeter greeter = service.getPort(PORT_NAME, Greeter.class).         greeter.greetMeOneWay("test").     } finally {         BusFactory.setThreadDefaultBus(null).     }     assertMockEndpointsSatisfied(). }
