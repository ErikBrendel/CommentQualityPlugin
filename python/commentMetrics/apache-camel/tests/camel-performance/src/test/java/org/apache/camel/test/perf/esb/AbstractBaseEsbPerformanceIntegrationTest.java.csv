commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Before @Override public void setUp() throws Exception {     server = new Server(9000).     ServerConnector connector0 = new ServerConnector(server).     connector0.setReuseAddress(true).     server.setConnectors(new Connector[] { connector0 }).     ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS).     context.setContextPath("/service").     server.setHandler(context).     context.addServlet(new ServletHolder(new EchoService()), "/EchoService").     server.start().     payload = readPayload().     super.setUp(). }
false;public;0;7;;@After @Override public void tearDown() throws Exception {     super.tearDown().     server.stop(). }
false;protected;0;3;;protected String readPayload() throws IOException {     return IOUtils.toString(getClass().getResourceAsStream("/1K_buyStocks.xml")). }
false;protected;2;12;;protected void send(String endpointUri, int messagesToSend) {     template.setDefaultEndpointUri(endpointUri).     Map<String, Object> headers = new HashMap<>().     headers.put("Content-Type", "text/xml.charset=UTF-8").     headers.put("SOAPAction", "urn:buyStocks.2").     headers.put("routing", "xadmin.server1.community#1.0##").     for (int i = 0. i < messagesToSend. i++) {         template.requestBodyAndHeaders(payload, headers).     } }
