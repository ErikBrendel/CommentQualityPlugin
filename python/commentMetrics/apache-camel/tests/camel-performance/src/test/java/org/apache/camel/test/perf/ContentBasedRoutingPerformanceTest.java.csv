commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testChoiceSimple() throws InterruptedException {     template.setDefaultEndpointUri("direct:choice-simple").     // warm up with 20.000 messages so that the JIT compiler kicks in     execute(20000).     resetMock(count).     StopWatch watch = new StopWatch().     execute(count).     assertMockEndpointsSatisfied().     log.warn("Ran {} tests in {}ms", count, watch.taken()). }
false;public;0;15;;@Test public void testChoiceExpression() throws InterruptedException {     template.setDefaultEndpointUri("direct:choice-expression").     // warm up with 20.000 messages so that the JIT compiler kicks in     execute(20000).     resetMock(count).     StopWatch watch = new StopWatch().     execute(count).     assertMockEndpointsSatisfied().     log.warn("Ran {} tests in {}ms", count, watch.taken()). }
false;public;0;15;;@Test public void testFilterSimple() throws InterruptedException {     template.setDefaultEndpointUri("direct:filter-simple").     // warm up with 20.000 messages so that the JIT compiler kicks in     execute(20000).     resetMock(count).     StopWatch watch = new StopWatch().     execute(count).     assertMockEndpointsSatisfied().     log.warn("Ran {} tests in {}ms", count, watch.taken()). }
false;public;0;15;;@Test public void testFilterExpression() throws InterruptedException {     template.setDefaultEndpointUri("direct:filter-expression").     // warm up with 20.000 messages so that the JIT compiler kicks in     execute(20000).     resetMock(count).     StopWatch watch = new StopWatch().     execute(count).     assertMockEndpointsSatisfied().     log.warn("Ran {} tests in {}ms", count, watch.taken()). }
false;public;0;19;;public void configure() throws Exception {     from("direct:filter-simple").filter().simple("${body} contains 'xadmin.server1.community#1.0##'").to("mock:end").     from("direct:filter-expression").filter(body().contains("<order><symbol>IBM</symbol><buyerID>asankha</buyerID>")).to("mock:end").     from("direct:choice-simple").choice().when().simple("${body} contains 'xadmin.server1.community#1.0##'").to("mock:end").     from("direct:choice-expression").choice().when(body().contains("<order><symbol>IBM</symbol><buyerID>asankha</buyerID>")).to("mock:end"). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:filter-simple").filter().simple("${body} contains 'xadmin.server1.community#1.0##'").to("mock:end").             from("direct:filter-expression").filter(body().contains("<order><symbol>IBM</symbol><buyerID>asankha</buyerID>")).to("mock:end").             from("direct:choice-simple").choice().when().simple("${body} contains 'xadmin.server1.community#1.0##'").to("mock:end").             from("direct:choice-expression").choice().when(body().contains("<order><symbol>IBM</symbol><buyerID>asankha</buyerID>")).to("mock:end").         }     }. }
