commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testChoice() throws InterruptedException {     template.setDefaultEndpointUri("direct:choice").     // warm up with 20.000 messages so that the JIT compiler kicks in     execute(20000).     resetMock(count).     StopWatch watch = new StopWatch().     execute(count).     assertMockEndpointsSatisfied().     log.warn("Ran {} tests in {}ms", count, watch.taken()). }
false;public;0;15;;@Test public void testFilter() throws InterruptedException {     template.setDefaultEndpointUri("direct:filter").     // warm up with 20.000 messages so that the JIT compiler kicks in     execute(20000).     resetMock(count).     StopWatch watch = new StopWatch().     execute(count).     assertMockEndpointsSatisfied().     log.warn("Ran {} tests in {}ms", count, watch.taken()). }
false;public;0;14;;public void configure() throws Exception {     Map<String, String> namespaces = new HashMap<>().     namespaces.put("soapenv", "http://schemas.xmlsoap.org/soap/envelope/").     namespaces.put("m", "http://services.samples/xsd").     from("direct:filter").filter().xpath("/soapenv:Envelope/soapenv:Body/m:buyStocks/order[1]/symbol='IBM'", namespaces).to("mock:end").     from("direct:choice").choice().when().xpath("/soapenv:Envelope/soapenv:Body/m:buyStocks/order[1]/symbol='IBM'", namespaces).to("mock:end"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             Map<String, String> namespaces = new HashMap<>().             namespaces.put("soapenv", "http://schemas.xmlsoap.org/soap/envelope/").             namespaces.put("m", "http://services.samples/xsd").             from("direct:filter").filter().xpath("/soapenv:Envelope/soapenv:Body/m:buyStocks/order[1]/symbol='IBM'", namespaces).to("mock:end").             from("direct:choice").choice().when().xpath("/soapenv:Envelope/soapenv:Body/m:buyStocks/order[1]/symbol='IBM'", namespaces).to("mock:end").         }     }. }
