commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;public void process(Exchange exchange) {     Message in = exchange.getIn().     in.setBody(body).     in.setHeader(headerName, headerValue).     // in.setHeader("testCase", getName()).     in.setHeader(Exchange.BEAN_METHOD_NAME, "execute"). }
false;public;4;12;;public void sendBodyAndHeader(String endpointUri, final Object body, final String headerName, final Object headerValue) {     template.send(endpointUri, new Processor() {          public void process(Exchange exchange) {             Message in = exchange.getIn().             in.setBody(body).             in.setHeader(headerName, headerValue).             // in.setHeader("testCase", getName()).             in.setHeader(Exchange.BEAN_METHOD_NAME, "execute").         }     }). }
false;public;0;4;;@Test public void testSendMessagesInWrongOrderButReceiveThemInCorrectOrder() throws Exception {     sendAndVerifyMessages("activemq:queue:batch"). }
false;public;0;4;;@Test public void testSendMessageToStream() throws Exception {     sendAndVerifyMessages("activemq:queue:stream"). }
false;private;1;14;;private void sendAndVerifyMessages(String endpointUri) throws Exception {     resultEndpoint.expectedBodiesReceived("msg1", "msg2", "msg3", "msg4", "msg5", "msg6").     sendBodyAndHeader(endpointUri, "msg4", "seqnum", 4L).     sendBodyAndHeader(endpointUri, "msg1", "seqnum", 1L).     sendBodyAndHeader(endpointUri, "msg3", "seqnum", 3L).     sendBodyAndHeader(endpointUri, "msg2", "seqnum", 2L).     sendBodyAndHeader(endpointUri, "msg6", "seqnum", 6L).     sendBodyAndHeader(endpointUri, "msg5", "seqnum", 5L).     resultEndpoint.assertIsSatisfied().     List<Exchange> list = resultEndpoint.getReceivedExchanges().     for (Exchange exchange : list) {         log.debug("Received: " + exchange).     } }
false;public;0;15;;@Override @Before public void setUp() throws Exception {     super.setUp().     resultEndpoint = getMockEndpoint("mock:result").     Object lookedUpBean = context.getRegistry().lookupByName("myBean1").     assertSame("Lookup of 'myBean' should return same object!", b1, lookedUpBean).     lookedUpBean = context.getRegistry().lookupByName("myBean2").     assertSame("Lookup of 'myBean' should return same object!", b2, lookedUpBean).     lookedUpBean = context.getRegistry().lookupByName("myBean3").     assertSame("Lookup of 'myBean' should return same object!", b3, lookedUpBean). }
false;public;0;21;;public void configure() {     from("activemq:queue:batch").to(callExecuteOnBean("myBean1")).resequence(header("seqnum")).batch(new BatchResequencerConfig(100, 2000L)).to(callExecuteOnBean("myBean2")).to("activemq:queue:stop").     from("activemq:queue:stream").to(callExecuteOnBean("myBean1")).resequence(header("seqnum")).stream().to(callExecuteOnBean("myBean2")).to("activemq:queue:stop").     from("activemq:queue:stop").to(callExecuteOnBean("myBean3")).to("mock:result"). }
false;protected;0;25;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("activemq:queue:batch").to(callExecuteOnBean("myBean1")).resequence(header("seqnum")).batch(new BatchResequencerConfig(100, 2000L)).to(callExecuteOnBean("myBean2")).to("activemq:queue:stop").             from("activemq:queue:stream").to(callExecuteOnBean("myBean1")).resequence(header("seqnum")).stream().to(callExecuteOnBean("myBean2")).to("activemq:queue:stop").             from("activemq:queue:stop").to(callExecuteOnBean("myBean3")).to("mock:result").         }     }. }
false;private,static;1;3;;private static String callExecuteOnBean(String beanName) {     return "bean:" + beanName + "?method=execute". }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;4;;@Override public String toString() {     return "MyBean:" + name. }
false;public;1;4;;public void read(@Body String body) {     this.body = body.     LOG.info(name + " read() method on " + this + " with body: " + body). }
false;public;0;4;;public void execute() {     LOG.info(name + " started").     LOG.info(name + " finished"). }
false;protected;1;12;;@Override protected void bindToRegistry(Registry registry) throws Exception {     // add ActiveMQ with embedded broker     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent amq = jmsComponentAutoAcknowledge(connectionFactory).     amq.setCamelContext(context).     registry.bind("activemq", amq).     registry.bind("myBean1", b1).     registry.bind("myBean2", b2).     registry.bind("myBean3", b3). }
