commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testJettyConstantSetHeader() throws Exception {     getMockEndpoint("mock:before").message(0).header("beer").isNull().     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hello World").     result.message(0).header("beer").isEqualTo("Carlsberg").     String reply = template.requestBody("http://localhost:" + port + "/beer", "Hello World", String.class).     assertEquals("Bye World", reply).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("jetty:http://localhost:" + port + "/beer").convertBodyTo(String.class).to("mock:before").setHeader("beer", constant("Carlsberg")).to("mock:result").transform(constant("Bye World")). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     port = AvailablePortFinder.getNextAvailable(8000).     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty:http://localhost:" + port + "/beer").convertBodyTo(String.class).to("mock:before").setHeader("beer", constant("Carlsberg")).to("mock:result").transform(constant("Bye World")).         }     }. }
