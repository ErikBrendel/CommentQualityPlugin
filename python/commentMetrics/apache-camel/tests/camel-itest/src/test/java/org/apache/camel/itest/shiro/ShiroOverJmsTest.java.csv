commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testShiroOverJms() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     Map<String, Object> headers = new HashMap<>().     headers.put(ShiroSecurityConstants.SHIRO_SECURITY_USERNAME, "ringo").     headers.put(ShiroSecurityConstants.SHIRO_SECURITY_PASSWORD, "starr").     template.requestBodyAndHeaders("direct:start", "Hello World", headers).     assertMockEndpointsSatisfied(). }
false;protected;1;9;;@Override protected void bindToRegistry(Registry registry) throws Exception {     // add ActiveMQ with embedded broker     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent amq = jmsComponentAutoAcknowledge(connectionFactory).     amq.setCamelContext(context).     registry.bind("jms", amq). }
false;public;0;18;;@Override public void configure() throws Exception {     final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase).     securityPolicy.setBase64(true).     errorHandler(deadLetterChannel("mock:error")).     from("direct:start").policy(securityPolicy).to("jms:queue:foo").to("mock:result").     from("jms:queue:foo").to("log:foo?showHeaders=true").policy(securityPolicy).to("mock:foo").transform().constant("Bye World"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             final ShiroSecurityPolicy securityPolicy = new ShiroSecurityPolicy("src/test/resources/securityconfig.ini", passPhrase).             securityPolicy.setBase64(true).             errorHandler(deadLetterChannel("mock:error")).             from("direct:start").policy(securityPolicy).to("jms:queue:foo").to("mock:result").             from("jms:queue:foo").to("log:foo?showHeaders=true").policy(securityPolicy).to("mock:foo").transform().constant("Bye World").         }     }. }
