commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void sendHttpGetRequestTest() {     String response = template.requestBody("http4://localhost:" + port1 + "/test?aa=bb&httpClient.socketTimeout=10000&httpClient.connectTimeout=10000" + "&bridgeEndpoint=true&throwExceptionOnFailure=false", null, String.class).     assertEquals("Get a wrong response", "aa=bb", response).     response = template.requestBodyAndHeader("direct:start1", null, Exchange.HTTP_QUERY, "aa=bb", String.class).     assertEquals("Get a wrong response", "aa=bb", response).     response = template.requestBodyAndHeader("direct:start2", null, Exchange.HTTP_QUERY, "aa=bb", String.class).     assertEquals("Get a wrong response", "aa=bb&2", response). }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     HttpMessage message = (HttpMessage) exchange.getIn().     assertNotNull(message.getRequest()).     assertEquals("GET", message.getRequest().getMethod()).     exchange.getOut().setBody(message.getRequest().getQueryString()). }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     HttpMessage message = (HttpMessage) exchange.getIn().     assertNotNull(message.getRequest()).     assertEquals("GET", message.getRequest().getMethod()).     exchange.getOut().setBody(message.getRequest().getQueryString() + "&2"). }
false;public;0;35;;@Override public void configure() throws Exception {     from("jetty:http://localhost:" + port1 + "/test").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             HttpMessage message = (HttpMessage) exchange.getIn().             assertNotNull(message.getRequest()).             assertEquals("GET", message.getRequest().getMethod()).             exchange.getOut().setBody(message.getRequest().getQueryString()).         }     }).     from("jetty:http://localhost:" + port2 + "/test").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             HttpMessage message = (HttpMessage) exchange.getIn().             assertNotNull(message.getRequest()).             assertEquals("GET", message.getRequest().getMethod()).             exchange.getOut().setBody(message.getRequest().getQueryString() + "&2").         }     }).     from("direct:start1").to("http4://localhost:" + port1 + "/test").     from("direct:start2").to("http4://localhost:" + port2 + "/test"). }
false;protected;0;42;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     port1 = AvailablePortFinder.getNextAvailable(8000).     port2 = AvailablePortFinder.getNextAvailable(9000).     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("jetty:http://localhost:" + port1 + "/test").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     HttpMessage message = (HttpMessage) exchange.getIn().                     assertNotNull(message.getRequest()).                     assertEquals("GET", message.getRequest().getMethod()).                     exchange.getOut().setBody(message.getRequest().getQueryString()).                 }             }).             from("jetty:http://localhost:" + port2 + "/test").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     HttpMessage message = (HttpMessage) exchange.getIn().                     assertNotNull(message.getRequest()).                     assertEquals("GET", message.getRequest().getMethod()).                     exchange.getOut().setBody(message.getRequest().getQueryString() + "&2").                 }             }).             from("direct:start1").to("http4://localhost:" + port1 + "/test").             from("direct:start2").to("http4://localhost:" + port2 + "/test").         }     }. }
