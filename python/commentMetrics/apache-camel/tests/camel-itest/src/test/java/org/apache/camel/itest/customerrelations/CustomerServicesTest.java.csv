commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@Test public void testCustomerService() throws Exception {     ClassPathXmlApplicationContext serverContext = null.     ClassPathXmlApplicationContext clientContext = null.     try {         serverContext = new ClassPathXmlApplicationContext(new String[] { "spring-config/server-applicationContext.xml" }).         Object server = serverContext.getBean("org.apache.camel.itest.customerrelations.CustomerServiceV1").         assertNotNull("We should get server here", server).         // add an interceptor to verify headers         EndpointImpl.class.cast(server).getServer().getEndpoint().getInInterceptors().add(new HeaderChecker(Phase.READ)).         clientContext = new ClassPathXmlApplicationContext(new String[] { "spring-config/client-applicationContext.xml" }).         CustomerServiceV1 customerService = clientContext.getBean("org.apache.camel.itest.customerrelations.CustomerServiceV1", CustomerServiceV1.class).         // CXF 2.1.2 only apply the SOAPAction for the request message (in SoapPreProtocolOutInterceptor)         // After went through the SOAP 1.1 specification, I got that the SOAPAction is only for the request message         // So I comment out this HeaderChecker Interceptor setting up code         /*JaxWsClientProxy.class.cast(Proxy.getInvocationHandler(customerService))                 .getClient().getInInterceptors().add(new HeaderChecker(Phase.READ)).*/         Customer customer = customerService.getCustomer("12345").         assertNotNull("We should get Customer here", customer).     } finally {         // we're done so let's properly close the application contexts         IOHelper.close(clientContext, serverContext).     } }
false;public;1;6;;public void handleMessage(Message message) throws Fault {     Map<String, List<String>> headers = CastUtils.cast((Map<?, ?>) message.get(Message.PROTOCOL_HEADERS)).     assertNotNull(headers).     assertEquals("\"getCustomer\"", headers.get("SOAPAction").get(0)). }
