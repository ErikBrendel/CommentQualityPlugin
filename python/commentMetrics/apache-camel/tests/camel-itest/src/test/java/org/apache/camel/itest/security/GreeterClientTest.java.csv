commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;17;;protected String sendMessageWithUsernameToken(String username, String password, String message) throws Exception {     final javax.xml.ws.Service svc = javax.xml.ws.Service.create(WSDL_LOC, SERVICE_QNAME).     final Greeter greeter = svc.getPort(PORT_QNAME, Greeter.class).     Client client = ClientProxy.getClient(greeter).     Map<String, Object> props = new HashMap<>().     props.put("action", "UsernameToken").     props.put("user", username).     // Set the password type to be plain text,     // so we can keep using the password to authenticate with spring security     props.put("passwordType", "PasswordText").     WSS4JOutInterceptor wss4jOut = new WSS4JOutInterceptor(props).     client.getOutInterceptors().add(wss4jOut).     ((BindingProvider) greeter).getRequestContext().put("password", password).     return greeter.greetMe(message). }
false;public;0;19;;@Test public void testServiceWithValidateUser() throws Exception {     String response = sendMessageWithUsernameToken("jim", "jimspassword", "CXF").     assertEquals(" Hello CXF", response).     try {         sendMessageWithUsernameToken("jim", "foo", "CXF").         fail("should fail").     } catch (Exception ex) {         String msg = ex.getMessage().         assertTrue("Get a wrong type exception.", ex instanceof SOAPFaultException).         assertTrue("Get a wrong exception message: " + msg, msg.startsWith("The security token could not be authenticated or authorized") || msg.startsWith("A security error was encountered when verifying the messag")).     } }
false;public;0;12;;@Test public void testServiceWithNotAuthorizedUser() throws Exception {     try {         // this user doesn't have the right to access the processor         sendMessageWithUsernameToken("bob", "bobspassword", "CXF").         fail("should fail").     } catch (Exception ex) {         assertTrue("Get a wrong type exception.", ex instanceof SOAPFaultException).         assertTrue("Get a wrong exception message", ex.getMessage().startsWith("Cannot access the processor which has been protected.")).         assertTrue("Get a wrong exception message", ex.getMessage().endsWith("Caused by: [org.springframework.security.access.AccessDeniedException - Access is denied]")).     } }
