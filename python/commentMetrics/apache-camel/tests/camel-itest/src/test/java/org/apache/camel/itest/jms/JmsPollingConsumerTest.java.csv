commented;modifiers;parameterAmount;loc;comment;code
true;public;0;13;/**  * Fails:  * Consumer is expected to read two messages from activemq:queue and concatenate their bodies.  * In this test, consumer bean is invoked from an activemq: route.  */ ;/**  * Fails:  * Consumer is expected to read two messages from activemq:queue and concatenate their bodies.  * In this test, consumer bean is invoked from an activemq: route.  */ @Test @DirtiesContext @Ignore("CAMEL-2305") public void testConsumerFromJMSRoute() throws Exception {     result.expectedBodiesReceived("foobar").     queue.sendBody("foo").     queue.sendBody("bar").     startConsumer.sendBody("go").     result.assertIsSatisfied(). }
true;public;0;12;/**  * Succeeds:  * Consumer is expected to read two messages from activemq:queue and concatenate their bodies.  * In this test, consumer bean is invoked from a direct: route.  */ ;/**  * Succeeds:  * Consumer is expected to read two messages from activemq:queue and concatenate their bodies.  * In this test, consumer bean is invoked from a direct: route.  */ @Test @DirtiesContext public void testConsumerFromDirectRoute() throws Exception {     result.expectedBodiesReceived("foobar").     queue.sendBody("foo").     queue.sendBody("bar").     startDirectConsumer.sendBody("go").     result.assertIsSatisfied(). }
false;public;0;12;;@Handler public String consume() {     StringBuilder result = new StringBuilder().     Exchange exchange.     while ((exchange = consumer.receive("activemq:queue", 2000)) != null) {         result.append(exchange.getIn().getBody(String.class)).     }     return result.toString(). }
