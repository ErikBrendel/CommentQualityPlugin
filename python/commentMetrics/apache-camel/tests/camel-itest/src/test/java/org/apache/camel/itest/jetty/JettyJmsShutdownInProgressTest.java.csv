commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void run() {     try {         Thread.sleep(2000).         JettyJmsShutdownInProgressTest.this.camelContext.stop().     } catch (Exception e) {     // ignore     } }
false;public;0;33;;@Test public void testShutdownInProgress() throws Exception {     Future<String> reply1 = template.asyncRequestBody(URL, "World", String.class).     Future<String> reply2 = template.asyncRequestBody(URL, "Camel", String.class).     // shutdown camel while in progress, wait 2 sec so the first req has been received in Camel route     Executors.newSingleThreadExecutor().execute(new Runnable() {          public void run() {             try {                 Thread.sleep(2000).                 JettyJmsShutdownInProgressTest.this.camelContext.stop().             } catch (Exception e) {             // ignore             }         }     }).     // wait a bit more before sending next     Thread.sleep(5000).     // this one should fail     try {         template.requestBody(URL, "Tiger", String.class).         Assert.fail("Should have thrown exception").     } catch (Exception e) {         HttpOperationFailedException hofe = (HttpOperationFailedException) e.getCause().         Assert.assertEquals(503, hofe.getStatusCode()).     }     // but the 2 first should still return valid replies     Assert.assertEquals("Bye World", reply1.get(10, TimeUnit.SECONDS)).     Assert.assertEquals("Bye Camel", reply2.get(10, TimeUnit.SECONDS)). }
