commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testJmsJettyAsyncTest() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(size).     getMockEndpoint("mock:result").expectsNoDuplicates(body()).     for (int i = 0. i < size. i++) {         template.sendBody("activemq:queue:inbox", "" + i).     }     assertMockEndpointsSatisfied(2, TimeUnit.MINUTES). }
false;public;0;11;;@Override public void configure() throws Exception {     // enable async consumer to process messages faster     from("activemq:queue:inbox?asyncConsumer=false").to("jetty:http://0.0.0.0:" + port + "/myapp").to("log:result?groupSize=10", "mock:result").     from("jetty:http://0.0.0.0:" + port + "/myapp").delay(100).transform(body().prepend("Bye ")). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     port = AvailablePortFinder.getNextAvailable(8000).     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // enable async consumer to process messages faster             from("activemq:queue:inbox?asyncConsumer=false").to("jetty:http://0.0.0.0:" + port + "/myapp").to("log:result?groupSize=10", "mock:result").             from("jetty:http://0.0.0.0:" + port + "/myapp").delay(100).transform(body().prepend("Bye ")).         }     }. }
false;protected;1;9;;@Override protected void bindToRegistry(Registry registry) throws Exception {     // add ActiveMQ with embedded broker     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent amq = jmsComponentAutoAcknowledge(connectionFactory).     amq.setCamelContext(context).     registry.bind("activemq", amq). }
