commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void test404() throws Exception {     // use requestBody to force a InOut message exchange pattern ( = request/reply)     // will send and wait for a response     Object out = template.requestBodyAndHeader(data, "<?xml version=\"1.0\"?><request><status id=\"123\"/></request>", "user", "unknown").     // compare response     assertEquals(noAccess, out). }
false;public;0;17;;@Test public void testRollback() throws Exception {     // will rollback forever so we run 3 times or more     rollback.expectedMinimumMessageCount(3).     // will send and wait for a response     try {         template.requestBodyAndHeader(data, "<?xml version=\"1.0\"?><request><status id=\"123\"/></request>", "user", "guest").         fail("Should throw an exception").     } catch (RuntimeCamelException e) {         assertTrue("Should timeout", e.getCause() instanceof ExchangeTimedOutException).     }     rollback.assertIsSatisfied(). }
false;public;0;10;;@Test public void testOK() throws Exception {     // use requestBody to force a InOut message exchange pattern ( = request/reply)     // will send and wait for a response     Object out = template.requestBodyAndHeader(data, "<?xml version=\"1.0\"?><request><status id=\"123\"/></request>", "user", "Claus").     // compare response     assertEquals(ok, out). }
