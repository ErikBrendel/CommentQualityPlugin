commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;32;;@Test public void testFlatpackDefaultValue() throws Exception {     CamelContext context = new DefaultCamelContext().     String json = context.getEipParameterJsonSchema("flatpack").     assertNotNull(json).     assertTrue(json.contains("\"name\": \"flatpack")).     // the default value is a bit tricky as its ", which is written escaped as \"     assertTrue(json.contains("\"textQualifier\": { \"kind\": \"attribute\", \"displayName\": \"Text Qualifier\", \"required\": false, \"type\": \"string\"" + ", \"javaType\": \"java.lang.String\", \"deprecated\": false, \"secret\": false")).     List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema("properties", json, true).     assertEquals(10, rows.size()).     Map<String, String> found = null.     for (Map<String, String> row : rows) {         if ("textQualifier".equals(row.get("name"))) {             found = row.             break.         }     }     assertNotNull(found).     assertEquals("textQualifier", found.get("name")).     assertEquals("attribute", found.get("kind")).     assertEquals("false", found.get("required")).     assertEquals("string", found.get("type")).     assertEquals("java.lang.String", found.get("javaType")).     assertEquals("false", found.get("deprecated")).     assertEquals("false", found.get("secret")).     assertEquals("If the text is qualified with a character. Uses quote character by default.", found.get("description")). }
false;public;0;33;;@Test public void testUniVocityTsvEscapeChar() throws Exception {     CamelContext context = new DefaultCamelContext().     String json = context.getEipParameterJsonSchema("univocity-tsv").     assertNotNull(json).     assertTrue(json.contains("\"name\": \"univocity-tsv")).     // the default value is a bit tricky as its \, which is written escaped as \\     assertTrue(json.contains("\"escapeChar\": { \"kind\": \"attribute\", \"displayName\": \"Escape Char\", \"required\": false, \"type\": \"string\", \"javaType\": \"java.lang.String\"," + " \"deprecated\": false, \"secret\": false, \"defaultValue\": \"\\\\\", \"description\": \"The escape character.\"")).     List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema("properties", json, true).     assertEquals(16, rows.size()).     Map<String, String> found = null.     for (Map<String, String> row : rows) {         if ("escapeChar".equals(row.get("name"))) {             found = row.             break.         }     }     assertNotNull(found).     assertEquals("escapeChar", found.get("name")).     assertEquals("attribute", found.get("kind")).     assertEquals("false", found.get("required")).     assertEquals("string", found.get("type")).     assertEquals("java.lang.String", found.get("javaType")).     assertEquals("false", found.get("deprecated")).     assertEquals("false", found.get("secret")).     assertEquals("\\", found.get("defaultValue")).     assertEquals("The escape character.", found.get("description")). }
