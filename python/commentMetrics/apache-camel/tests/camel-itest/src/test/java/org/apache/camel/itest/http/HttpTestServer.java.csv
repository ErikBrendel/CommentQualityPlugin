# id;timestamp;commentText;codeText;commentWords;codeWords
HttpTestServer -> public InetSocketAddress getServiceAddress();1296408582;Obtains the local address the server is listening on__@return the service address;public InetSocketAddress getServiceAddress() {_        ServerSocket ssock = servicedSocket_ _        if (ssock == null) {_            throw new IllegalStateException("not running")__        }_        return (InetSocketAddress) ssock.getLocalSocketAddress()__    };obtains,the,local,address,the,server,is,listening,on,return,the,service,address;public,inet,socket,address,get,service,address,server,socket,ssock,serviced,socket,if,ssock,null,throw,new,illegal,state,exception,not,running,return,inet,socket,address,ssock,get,local,socket,address
HttpTestServer -> public InetSocketAddress getServiceAddress();1297757789;Obtains the local address the server is listening on__@return the service address;public InetSocketAddress getServiceAddress() {_        ServerSocket ssock = servicedSocket_ _        if (ssock == null) {_            throw new IllegalStateException("not running")__        }_        return (InetSocketAddress) ssock.getLocalSocketAddress()__    };obtains,the,local,address,the,server,is,listening,on,return,the,service,address;public,inet,socket,address,get,service,address,server,socket,ssock,serviced,socket,if,ssock,null,throw,new,illegal,state,exception,not,running,return,inet,socket,address,ssock,get,local,socket,address
HttpTestServer -> public InetSocketAddress getServiceAddress();1325236348;Obtains the local address the server is listening on__@return the service address;public InetSocketAddress getServiceAddress() {_        ServerSocket ssock = servicedSocket_ _        if (ssock == null) {_            throw new IllegalStateException("not running")__        }_        return (InetSocketAddress) ssock.getLocalSocketAddress()__    };obtains,the,local,address,the,server,is,listening,on,return,the,service,address;public,inet,socket,address,get,service,address,server,socket,ssock,serviced,socket,if,ssock,null,throw,new,illegal,state,exception,not,running,return,inet,socket,address,ssock,get,local,socket,address
HttpTestServer -> public InetSocketAddress getServiceAddress();1325694383;Obtains the local address the server is listening on__@return the service address;public InetSocketAddress getServiceAddress() {_        ServerSocket ssock = servicedSocket_ _        if (ssock == null) {_            throw new IllegalStateException("not running")__        }_        return (InetSocketAddress) ssock.getLocalSocketAddress()__    };obtains,the,local,address,the,server,is,listening,on,return,the,service,address;public,inet,socket,address,get,service,address,server,socket,ssock,serviced,socket,if,ssock,null,throw,new,illegal,state,exception,not,running,return,inet,socket,address,ssock,get,local,socket,address
HttpTestServer -> public InetSocketAddress getServiceAddress();1325745470;Obtains the local address the server is listening on__@return the service address;public InetSocketAddress getServiceAddress() {_        ServerSocket ssock = servicedSocket_ _        if (ssock == null) {_            throw new IllegalStateException("not running")__        }_        return (InetSocketAddress) ssock.getLocalSocketAddress()__    };obtains,the,local,address,the,server,is,listening,on,return,the,service,address;public,inet,socket,address,get,service,address,server,socket,ssock,serviced,socket,if,ssock,null,throw,new,illegal,state,exception,not,running,return,inet,socket,address,ssock,get,local,socket,address
HttpTestServer -> public InetSocketAddress getServiceAddress();1331935855;Obtains the local address the server is listening on__@return the service address;public InetSocketAddress getServiceAddress() {_        ServerSocket ssock = servicedSocket_ _        if (ssock == null) {_            throw new IllegalStateException("not running")__        }_        return (InetSocketAddress) ssock.getLocalSocketAddress()__    };obtains,the,local,address,the,server,is,listening,on,return,the,service,address;public,inet,socket,address,get,service,address,server,socket,ssock,serviced,socket,if,ssock,null,throw,new,illegal,state,exception,not,running,return,inet,socket,address,ssock,get,local,socket,address
HttpTestServer -> public InetSocketAddress getServiceAddress();1461921869;Obtains the local address the server is listening on__@return the service address;public InetSocketAddress getServiceAddress() {_        ServerSocket ssock = servicedSocket_ _        if (ssock == null) {_            throw new IllegalStateException("not running")__        }_        return (InetSocketAddress) ssock.getLocalSocketAddress()__    };obtains,the,local,address,the,server,is,listening,on,return,the,service,address;public,inet,socket,address,get,service,address,server,socket,ssock,serviced,socket,if,ssock,null,throw,new,illegal,state,exception,not,running,return,inet,socket,address,ssock,get,local,socket,address
HttpTestServer -> public void start() throws Exception;1296408582;Starts this test server.;public void start() throws Exception {_        if (servicedSocket != null) {_            throw new IllegalStateException(this.toString() + " already running")__        }_        ServerSocket ssock__        if (sslcontext != null) {_            SSLServerSocketFactory sf = sslcontext.getServerSocketFactory()__            ssock = sf.createServerSocket()__        } else {_            ssock = new ServerSocket()__        }__        ssock.setReuseAddress(true)_ _        ssock.bind(TEST_SERVER_ADDR)__        servicedSocket = ssock___        listenerThread = new ListenerThread()__        listenerThread.setDaemon(false)__        listenerThread.start()__    };starts,this,test,server;public,void,start,throws,exception,if,serviced,socket,null,throw,new,illegal,state,exception,this,to,string,already,running,server,socket,ssock,if,sslcontext,null,sslserver,socket,factory,sf,sslcontext,get,server,socket,factory,ssock,sf,create,server,socket,else,ssock,new,server,socket,ssock,set,reuse,address,true,ssock,bind,serviced,socket,ssock,listener,thread,new,listener,thread,listener,thread,set,daemon,false,listener,thread,start
HttpTestServer -> public void start() throws Exception;1297757789;Starts this test server.;public void start() throws Exception {_        if (servicedSocket != null) {_            throw new IllegalStateException(this.toString() + " already running")__        }_        ServerSocket ssock__        if (sslcontext != null) {_            SSLServerSocketFactory sf = sslcontext.getServerSocketFactory()__            ssock = sf.createServerSocket()__        } else {_            ssock = new ServerSocket()__        }__        ssock.setReuseAddress(true)_ _        ssock.bind(TEST_SERVER_ADDR)__        servicedSocket = ssock___        listenerThread = new ListenerThread()__        listenerThread.setDaemon(false)__        listenerThread.start()__    };starts,this,test,server;public,void,start,throws,exception,if,serviced,socket,null,throw,new,illegal,state,exception,this,to,string,already,running,server,socket,ssock,if,sslcontext,null,sslserver,socket,factory,sf,sslcontext,get,server,socket,factory,ssock,sf,create,server,socket,else,ssock,new,server,socket,ssock,set,reuse,address,true,ssock,bind,serviced,socket,ssock,listener,thread,new,listener,thread,listener,thread,set,daemon,false,listener,thread,start
HttpTestServer -> public void start() throws Exception;1325236348;Starts this test server.;public void start() throws Exception {_        if (servicedSocket != null) {_            throw new IllegalStateException(this.toString() + " already running")__        }_        ServerSocket ssock__        if (sslcontext != null) {_            SSLServerSocketFactory sf = sslcontext.getServerSocketFactory()__            ssock = sf.createServerSocket()__        } else {_            ssock = new ServerSocket()__        }__        ssock.setReuseAddress(true)_ _        ssock.bind(TEST_SERVER_ADDR)__        servicedSocket = ssock___        listenerThread = new ListenerThread()__        listenerThread.setDaemon(false)__        listenerThread.start()__    };starts,this,test,server;public,void,start,throws,exception,if,serviced,socket,null,throw,new,illegal,state,exception,this,to,string,already,running,server,socket,ssock,if,sslcontext,null,sslserver,socket,factory,sf,sslcontext,get,server,socket,factory,ssock,sf,create,server,socket,else,ssock,new,server,socket,ssock,set,reuse,address,true,ssock,bind,serviced,socket,ssock,listener,thread,new,listener,thread,listener,thread,set,daemon,false,listener,thread,start
HttpTestServer -> public void start() throws Exception;1325694383;Starts this test server.;public void start() throws Exception {_        if (servicedSocket != null) {_            throw new IllegalStateException(this.toString() + " already running")__        }_        ServerSocket ssock__        if (sslcontext != null) {_            SSLServerSocketFactory sf = sslcontext.getServerSocketFactory()__            ssock = sf.createServerSocket()__        } else {_            ssock = new ServerSocket()__        }__        ssock.setReuseAddress(true)_ _        ssock.bind(TEST_SERVER_ADDR)__        servicedSocket = ssock___        listenerThread = new ListenerThread()__        listenerThread.setDaemon(false)__        listenerThread.start()__    };starts,this,test,server;public,void,start,throws,exception,if,serviced,socket,null,throw,new,illegal,state,exception,this,to,string,already,running,server,socket,ssock,if,sslcontext,null,sslserver,socket,factory,sf,sslcontext,get,server,socket,factory,ssock,sf,create,server,socket,else,ssock,new,server,socket,ssock,set,reuse,address,true,ssock,bind,serviced,socket,ssock,listener,thread,new,listener,thread,listener,thread,set,daemon,false,listener,thread,start
HttpTestServer -> public void start() throws Exception;1325745470;Starts this test server.;public void start() throws Exception {_        if (servicedSocket != null) {_            throw new IllegalStateException(this.toString() + " already running")__        }_        ServerSocket ssock__        if (sslcontext != null) {_            SSLServerSocketFactory sf = sslcontext.getServerSocketFactory()__            ssock = sf.createServerSocket()__        } else {_            ssock = new ServerSocket()__        }__        ssock.setReuseAddress(true)_ _        ssock.bind(TEST_SERVER_ADDR)__        servicedSocket = ssock___        listenerThread = new ListenerThread()__        listenerThread.setDaemon(false)__        listenerThread.start()__    };starts,this,test,server;public,void,start,throws,exception,if,serviced,socket,null,throw,new,illegal,state,exception,this,to,string,already,running,server,socket,ssock,if,sslcontext,null,sslserver,socket,factory,sf,sslcontext,get,server,socket,factory,ssock,sf,create,server,socket,else,ssock,new,server,socket,ssock,set,reuse,address,true,ssock,bind,serviced,socket,ssock,listener,thread,new,listener,thread,listener,thread,set,daemon,false,listener,thread,start
HttpTestServer -> public void start() throws Exception;1331935855;Starts this test server.;public void start() throws Exception {_        if (servicedSocket != null) {_            throw new IllegalStateException(this.toString() + " already running")__        }_        ServerSocket ssock__        if (sslcontext != null) {_            SSLServerSocketFactory sf = sslcontext.getServerSocketFactory()__            ssock = sf.createServerSocket()__        } else {_            ssock = new ServerSocket()__        }__        ssock.setReuseAddress(true)_ _        ssock.bind(TEST_SERVER_ADDR)__        servicedSocket = ssock___        listenerThread = new ListenerThread()__        listenerThread.setDaemon(false)__        listenerThread.start()__    };starts,this,test,server;public,void,start,throws,exception,if,serviced,socket,null,throw,new,illegal,state,exception,this,to,string,already,running,server,socket,ssock,if,sslcontext,null,sslserver,socket,factory,sf,sslcontext,get,server,socket,factory,ssock,sf,create,server,socket,else,ssock,new,server,socket,ssock,set,reuse,address,true,ssock,bind,serviced,socket,ssock,listener,thread,new,listener,thread,listener,thread,set,daemon,false,listener,thread,start
HttpTestServer -> public void start() throws Exception;1461921869;Starts this test server.;public void start() throws Exception {_        if (servicedSocket != null) {_            throw new IllegalStateException(this.toString() + " already running")__        }_        ServerSocket ssock__        if (sslcontext != null) {_            SSLServerSocketFactory sf = sslcontext.getServerSocketFactory()__            ssock = sf.createServerSocket()__        } else {_            ssock = new ServerSocket()__        }__        ssock.setReuseAddress(true)_ _        ssock.bind(TEST_SERVER_ADDR)__        servicedSocket = ssock___        listenerThread = new ListenerThread()__        listenerThread.setDaemon(false)__        listenerThread.start()__    };starts,this,test,server;public,void,start,throws,exception,if,serviced,socket,null,throw,new,illegal,state,exception,this,to,string,already,running,server,socket,ssock,if,sslcontext,null,sslserver,socket,factory,sf,sslcontext,get,server,socket,factory,ssock,sf,create,server,socket,else,ssock,new,server,socket,ssock,set,reuse,address,true,ssock,bind,serviced,socket,ssock,listener,thread,new,listener,thread,listener,thread,set,daemon,false,listener,thread,start
HttpTestServer -> public void stop() throws Exception;1296408582;Stops this test server.;public void stop() throws Exception {_        if (servicedSocket == null) {_            return_ _        }_        ListenerThread t = listenerThread__        if (t != null) {_            t.shutdown()__        }_        synchronized (workers) {_            for (Iterator<Worker> it = workers.iterator()_ it.hasNext()_ ) {_                Worker worker = it.next()__                worker.shutdown()__            }_        }_    };stops,this,test,server;public,void,stop,throws,exception,if,serviced,socket,null,return,listener,thread,t,listener,thread,if,t,null,t,shutdown,synchronized,workers,for,iterator,worker,it,workers,iterator,it,has,next,worker,worker,it,next,worker,shutdown
HttpTestServer -> public void stop() throws Exception;1297757789;Stops this test server.;public void stop() throws Exception {_        if (servicedSocket == null) {_            return_ _        }_        ListenerThread t = listenerThread__        if (t != null) {_            t.shutdown()__        }_        synchronized (workers) {_            for (Iterator<Worker> it = workers.iterator()_ it.hasNext()_) {_                Worker worker = it.next()__                worker.shutdown()__            }_        }_    };stops,this,test,server;public,void,stop,throws,exception,if,serviced,socket,null,return,listener,thread,t,listener,thread,if,t,null,t,shutdown,synchronized,workers,for,iterator,worker,it,workers,iterator,it,has,next,worker,worker,it,next,worker,shutdown
HttpTestServer -> public void stop() throws Exception;1325236348;Stops this test server.;public void stop() throws Exception {_        if (servicedSocket == null) {_            return_ _        }_        ListenerThread t = listenerThread__        if (t != null) {_            t.shutdown()__        }_        synchronized (workers) {_            for (Iterator<Worker> it = workers.iterator()_ it.hasNext()_) {_                Worker worker = it.next()__                worker.shutdown()__            }_        }_    };stops,this,test,server;public,void,stop,throws,exception,if,serviced,socket,null,return,listener,thread,t,listener,thread,if,t,null,t,shutdown,synchronized,workers,for,iterator,worker,it,workers,iterator,it,has,next,worker,worker,it,next,worker,shutdown
HttpTestServer -> public void stop() throws Exception;1325694383;Stops this test server.;public void stop() throws Exception {_        if (servicedSocket == null) {_            return_ _        }_        ListenerThread t = listenerThread__        if (t != null) {_            t.shutdown()__        }_        synchronized (workers) {_            for (Worker worker : workers) {_                worker.shutdown()__            }_        }_    };stops,this,test,server;public,void,stop,throws,exception,if,serviced,socket,null,return,listener,thread,t,listener,thread,if,t,null,t,shutdown,synchronized,workers,for,worker,worker,workers,worker,shutdown
HttpTestServer -> public void stop() throws Exception;1325745470;Stops this test server.;public void stop() throws Exception {_        if (servicedSocket == null) {_            return_ _        }_        ListenerThread t = listenerThread__        if (t != null) {_            t.shutdown()__        }_        synchronized (workers) {_            for (Worker worker : workers) {_                worker.shutdown()__            }_        }_    };stops,this,test,server;public,void,stop,throws,exception,if,serviced,socket,null,return,listener,thread,t,listener,thread,if,t,null,t,shutdown,synchronized,workers,for,worker,worker,workers,worker,shutdown
HttpTestServer -> public void stop() throws Exception;1331935855;Stops this test server.;public void stop() throws Exception {_        if (servicedSocket == null) {_            return_ _        }_        ListenerThread t = listenerThread__        if (t != null) {_            t.shutdown()__        }_        synchronized (workers) {_            for (Worker worker : workers) {_                worker.shutdown()__            }_        }_    };stops,this,test,server;public,void,stop,throws,exception,if,serviced,socket,null,return,listener,thread,t,listener,thread,if,t,null,t,shutdown,synchronized,workers,for,worker,worker,workers,worker,shutdown
HttpTestServer -> public void stop() throws Exception;1461921869;Stops this test server.;public void stop() throws Exception {_        if (servicedSocket == null) {_            return_ _        }_        ListenerThread t = listenerThread__        if (t != null) {_            t.shutdown()__        }_        synchronized (workers) {_            for (Worker worker : workers) {_                worker.shutdown()__            }_        }_    };stops,this,test,server;public,void,stop,throws,exception,if,serviced,socket,null,return,listener,thread,t,listener,thread,if,t,null,t,shutdown,synchronized,workers,for,worker,worker,workers,worker,shutdown
HttpTestServer -> public int getAcceptedConnectionCount();1296408582;Returns the number of connections this test server has accepted.;public int getAcceptedConnectionCount() {_        return acceptedConnections.get()__    };returns,the,number,of,connections,this,test,server,has,accepted;public,int,get,accepted,connection,count,return,accepted,connections,get
HttpTestServer -> public int getAcceptedConnectionCount();1297757789;Returns the number of connections this test server has accepted.;public int getAcceptedConnectionCount() {_        return acceptedConnections.get()__    };returns,the,number,of,connections,this,test,server,has,accepted;public,int,get,accepted,connection,count,return,accepted,connections,get
HttpTestServer -> public int getAcceptedConnectionCount();1325236348;Returns the number of connections this test server has accepted.;public int getAcceptedConnectionCount() {_        return acceptedConnections.get()__    };returns,the,number,of,connections,this,test,server,has,accepted;public,int,get,accepted,connection,count,return,accepted,connections,get
HttpTestServer -> public int getAcceptedConnectionCount();1325694383;Returns the number of connections this test server has accepted.;public int getAcceptedConnectionCount() {_        return acceptedConnections.get()__    };returns,the,number,of,connections,this,test,server,has,accepted;public,int,get,accepted,connection,count,return,accepted,connections,get
HttpTestServer -> public int getAcceptedConnectionCount();1325745470;Returns the number of connections this test server has accepted.;public int getAcceptedConnectionCount() {_        return acceptedConnections.get()__    };returns,the,number,of,connections,this,test,server,has,accepted;public,int,get,accepted,connection,count,return,accepted,connections,get
HttpTestServer -> public int getAcceptedConnectionCount();1331935855;Returns the number of connections this test server has accepted.;public int getAcceptedConnectionCount() {_        return acceptedConnections.get()__    };returns,the,number,of,connections,this,test,server,has,accepted;public,int,get,accepted,connection,count,return,accepted,connections,get
HttpTestServer -> public int getAcceptedConnectionCount();1461921869;Returns the number of connections this test server has accepted.;public int getAcceptedConnectionCount() {_        return acceptedConnections.get()__    };returns,the,number,of,connections,this,test,server,has,accepted;public,int,get,accepted,connection,count,return,accepted,connections,get
HttpTestServer -> protected HttpProcessor newProcessor();1296408582;Obtains an HTTP protocol processor with default interceptors.__@return  a protocol processor for server-side use;protected HttpProcessor newProcessor() {_        return new ImmutableHttpProcessor(_                new HttpResponseInterceptor[] {_                        new ResponseDate(),_                        new ResponseServer(),_                        new ResponseContent(),_                        new ResponseConnControl()_                })__    };obtains,an,http,protocol,processor,with,default,interceptors,return,a,protocol,processor,for,server,side,use;protected,http,processor,new,processor,return,new,immutable,http,processor,new,http,response,interceptor,new,response,date,new,response,server,new,response,content,new,response,conn,control
HttpTestServer -> protected HttpProcessor newProcessor();1297757789;Obtains an HTTP protocol processor with default interceptors.__@return  a protocol processor for server-side use;protected HttpProcessor newProcessor() {_        return new ImmutableHttpProcessor(new HttpResponseInterceptor[] {new ResponseDate(),_                                                                         new ResponseServer(),_                                                                         new ResponseContent(),_                                                                         new ResponseConnControl()})__    };obtains,an,http,protocol,processor,with,default,interceptors,return,a,protocol,processor,for,server,side,use;protected,http,processor,new,processor,return,new,immutable,http,processor,new,http,response,interceptor,new,response,date,new,response,server,new,response,content,new,response,conn,control
HttpTestServer -> protected HttpProcessor newProcessor();1325236348;Obtains an HTTP protocol processor with default interceptors.__@return  a protocol processor for server-side use;protected HttpProcessor newProcessor() {_        return new ImmutableHttpProcessor(new HttpResponseInterceptor[] {new ResponseDate(),_                                                                         new ResponseServer(),_                                                                         new ResponseContent(),_                                                                         new ResponseConnControl()})__    };obtains,an,http,protocol,processor,with,default,interceptors,return,a,protocol,processor,for,server,side,use;protected,http,processor,new,processor,return,new,immutable,http,processor,new,http,response,interceptor,new,response,date,new,response,server,new,response,content,new,response,conn,control
HttpTestServer -> protected HttpProcessor newProcessor();1325694383;Obtains an HTTP protocol processor with default interceptors.__@return  a protocol processor for server-side use;protected HttpProcessor newProcessor() {_        return new ImmutableHttpProcessor(new HttpResponseInterceptor[] {new ResponseDate(),_                                                                         new ResponseServer(),_                                                                         new ResponseContent(),_                                                                         new ResponseConnControl()})__    };obtains,an,http,protocol,processor,with,default,interceptors,return,a,protocol,processor,for,server,side,use;protected,http,processor,new,processor,return,new,immutable,http,processor,new,http,response,interceptor,new,response,date,new,response,server,new,response,content,new,response,conn,control
HttpTestServer -> protected HttpProcessor newProcessor();1325745470;Obtains an HTTP protocol processor with default interceptors.__@return  a protocol processor for server-side use;protected HttpProcessor newProcessor() {_        return new ImmutableHttpProcessor(new HttpResponseInterceptor[] {new ResponseDate(),_                                                                         new ResponseServer(),_                                                                         new ResponseContent(),_                                                                         new ResponseConnControl()})__    };obtains,an,http,protocol,processor,with,default,interceptors,return,a,protocol,processor,for,server,side,use;protected,http,processor,new,processor,return,new,immutable,http,processor,new,http,response,interceptor,new,response,date,new,response,server,new,response,content,new,response,conn,control
HttpTestServer -> protected HttpProcessor newProcessor();1331935855;Obtains an HTTP protocol processor with default interceptors.__@return  a protocol processor for server-side use;protected HttpProcessor newProcessor() {_        return new ImmutableHttpProcessor(new HttpResponseInterceptor[] {new ResponseDate(),_                                                                         new ResponseServer(),_                                                                         new ResponseContent(),_                                                                         new ResponseConnControl()})__    };obtains,an,http,protocol,processor,with,default,interceptors,return,a,protocol,processor,for,server,side,use;protected,http,processor,new,processor,return,new,immutable,http,processor,new,http,response,interceptor,new,response,date,new,response,server,new,response,content,new,response,conn,control
HttpTestServer -> protected HttpProcessor newProcessor();1461921869;Obtains an HTTP protocol processor with default interceptors.__@return  a protocol processor for server-side use;protected HttpProcessor newProcessor() {_        return new ImmutableHttpProcessor(new HttpResponseInterceptor[] {new ResponseDate(),_                                                                         new ResponseServer(),_                                                                         new ResponseContent(),_                                                                         new ResponseConnControl()})__    };obtains,an,http,protocol,processor,with,default,interceptors,return,a,protocol,processor,for,server,side,use;protected,http,processor,new,processor,return,new,immutable,http,processor,new,http,response,interceptor,new,response,date,new,response,server,new,response,content,new,response,conn,control
HttpTestServer -> public void unregister(String pattern);1296408582;Unregisters a handler from the local registry.__@param pattern   the URL pattern;public void unregister(String pattern) {_        handlerRegistry.unregister(pattern)__    };unregisters,a,handler,from,the,local,registry,param,pattern,the,url,pattern;public,void,unregister,string,pattern,handler,registry,unregister,pattern
HttpTestServer -> public void unregister(String pattern);1297757789;Unregisters a handler from the local registry.__@param pattern   the URL pattern;public void unregister(String pattern) {_        handlerRegistry.unregister(pattern)__    };unregisters,a,handler,from,the,local,registry,param,pattern,the,url,pattern;public,void,unregister,string,pattern,handler,registry,unregister,pattern
HttpTestServer -> public void unregister(String pattern);1325236348;Unregisters a handler from the local registry.__@param pattern   the URL pattern;public void unregister(String pattern) {_        handlerRegistry.unregister(pattern)__    };unregisters,a,handler,from,the,local,registry,param,pattern,the,url,pattern;public,void,unregister,string,pattern,handler,registry,unregister,pattern
HttpTestServer -> public void unregister(String pattern);1325694383;Unregisters a handler from the local registry.__@param pattern   the URL pattern;public void unregister(String pattern) {_        handlerRegistry.unregister(pattern)__    };unregisters,a,handler,from,the,local,registry,param,pattern,the,url,pattern;public,void,unregister,string,pattern,handler,registry,unregister,pattern
HttpTestServer -> public void unregister(String pattern);1325745470;Unregisters a handler from the local registry.__@param pattern   the URL pattern;public void unregister(String pattern) {_        handlerRegistry.unregister(pattern)__    };unregisters,a,handler,from,the,local,registry,param,pattern,the,url,pattern;public,void,unregister,string,pattern,handler,registry,unregister,pattern
HttpTestServer -> public void unregister(String pattern);1331935855;Unregisters a handler from the local registry.__@param pattern   the URL pattern;public void unregister(String pattern) {_        handlerRegistry.unregister(pattern)__    };unregisters,a,handler,from,the,local,registry,param,pattern,the,url,pattern;public,void,unregister,string,pattern,handler,registry,unregister,pattern
HttpTestServer -> public void unregister(String pattern);1461921869;Unregisters a handler from the local registry.__@param pattern   the URL pattern;public void unregister(String pattern) {_        handlerRegistry.unregister(pattern)__    };unregisters,a,handler,from,the,local,registry,param,pattern,the,url,pattern;public,void,unregister,string,pattern,handler,registry,unregister,pattern
HttpTestServer -> public HttpTestServer(final SSLContext sslcontext);1296408582;Creates a new test server with SSL/TLS encryption.__@param sslcontext SSL context;public HttpTestServer(final SSLContext sslcontext) {_        this(null, null, null, null, null, sslcontext)__    };creates,a,new,test,server,with,ssl,tls,encryption,param,sslcontext,ssl,context;public,http,test,server,final,sslcontext,sslcontext,this,null,null,null,null,null,sslcontext
HttpTestServer -> public HttpTestServer(final SSLContext sslcontext);1297757789;Creates a new test server with SSL/TLS encryption.__@param sslcontext SSL context;public HttpTestServer(final SSLContext sslcontext) {_        this(null, null, null, null, null, sslcontext)__    };creates,a,new,test,server,with,ssl,tls,encryption,param,sslcontext,ssl,context;public,http,test,server,final,sslcontext,sslcontext,this,null,null,null,null,null,sslcontext
HttpTestServer -> public HttpTestServer(final SSLContext sslcontext);1325236348;Creates a new test server with SSL/TLS encryption.__@param sslcontext SSL context;public HttpTestServer(final SSLContext sslcontext) {_        this(null, null, null, null, null, sslcontext)__    };creates,a,new,test,server,with,ssl,tls,encryption,param,sslcontext,ssl,context;public,http,test,server,final,sslcontext,sslcontext,this,null,null,null,null,null,sslcontext
HttpTestServer -> public HttpTestServer(final SSLContext sslcontext);1325694383;Creates a new test server with SSL/TLS encryption.__@param sslcontext SSL context;public HttpTestServer(final SSLContext sslcontext) {_        this(null, null, null, null, null, sslcontext)__    };creates,a,new,test,server,with,ssl,tls,encryption,param,sslcontext,ssl,context;public,http,test,server,final,sslcontext,sslcontext,this,null,null,null,null,null,sslcontext
HttpTestServer -> public HttpTestServer(final SSLContext sslcontext);1325745470;Creates a new test server with SSL/TLS encryption.__@param sslcontext SSL context;public HttpTestServer(final SSLContext sslcontext) {_        this(null, null, null, null, null, sslcontext)__    };creates,a,new,test,server,with,ssl,tls,encryption,param,sslcontext,ssl,context;public,http,test,server,final,sslcontext,sslcontext,this,null,null,null,null,null,sslcontext
HttpTestServer -> public HttpTestServer(final SSLContext sslcontext);1331935855;Creates a new test server with SSL/TLS encryption.__@param sslcontext SSL context;public HttpTestServer(final SSLContext sslcontext) {_        this(null, null, null, null, null, sslcontext)__    };creates,a,new,test,server,with,ssl,tls,encryption,param,sslcontext,ssl,context;public,http,test,server,final,sslcontext,sslcontext,this,null,null,null,null,null,sslcontext
HttpTestServer -> public HttpTestServer(final SSLContext sslcontext);1461921869;Creates a new test server with SSL/TLS encryption.__@param sslcontext SSL context;public HttpTestServer(final SSLContext sslcontext) {_        this(null, null, null, null, null, sslcontext)__    };creates,a,new,test,server,with,ssl,tls,encryption,param,sslcontext,ssl,context;public,http,test,server,final,sslcontext,sslcontext,this,null,null,null,null,null,sslcontext
HttpTestServer -> public void register(String pattern, HttpRequestHandler handler);1296408582;Registers a handler with the local registry.__@param pattern   the URL pattern to match_@param handler   the handler to apply;public void register(String pattern, HttpRequestHandler handler) {_        handlerRegistry.register(pattern, handler)__    };registers,a,handler,with,the,local,registry,param,pattern,the,url,pattern,to,match,param,handler,the,handler,to,apply;public,void,register,string,pattern,http,request,handler,handler,handler,registry,register,pattern,handler
HttpTestServer -> public void register(String pattern, HttpRequestHandler handler);1297757789;Registers a handler with the local registry.__@param pattern   the URL pattern to match_@param handler   the handler to apply;public void register(String pattern, HttpRequestHandler handler) {_        handlerRegistry.register(pattern, handler)__    };registers,a,handler,with,the,local,registry,param,pattern,the,url,pattern,to,match,param,handler,the,handler,to,apply;public,void,register,string,pattern,http,request,handler,handler,handler,registry,register,pattern,handler
HttpTestServer -> public void register(String pattern, HttpRequestHandler handler);1325236348;Registers a handler with the local registry.__@param pattern   the URL pattern to match_@param handler   the handler to apply;public void register(String pattern, HttpRequestHandler handler) {_        handlerRegistry.register(pattern, handler)__    };registers,a,handler,with,the,local,registry,param,pattern,the,url,pattern,to,match,param,handler,the,handler,to,apply;public,void,register,string,pattern,http,request,handler,handler,handler,registry,register,pattern,handler
HttpTestServer -> public void register(String pattern, HttpRequestHandler handler);1325694383;Registers a handler with the local registry.__@param pattern   the URL pattern to match_@param handler   the handler to apply;public void register(String pattern, HttpRequestHandler handler) {_        handlerRegistry.register(pattern, handler)__    };registers,a,handler,with,the,local,registry,param,pattern,the,url,pattern,to,match,param,handler,the,handler,to,apply;public,void,register,string,pattern,http,request,handler,handler,handler,registry,register,pattern,handler
HttpTestServer -> public void register(String pattern, HttpRequestHandler handler);1325745470;Registers a handler with the local registry.__@param pattern   the URL pattern to match_@param handler   the handler to apply;public void register(String pattern, HttpRequestHandler handler) {_        handlerRegistry.register(pattern, handler)__    };registers,a,handler,with,the,local,registry,param,pattern,the,url,pattern,to,match,param,handler,the,handler,to,apply;public,void,register,string,pattern,http,request,handler,handler,handler,registry,register,pattern,handler
HttpTestServer -> public void register(String pattern, HttpRequestHandler handler);1331935855;Registers a handler with the local registry.__@param pattern   the URL pattern to match_@param handler   the handler to apply;public void register(String pattern, HttpRequestHandler handler) {_        handlerRegistry.register(pattern, handler)__    };registers,a,handler,with,the,local,registry,param,pattern,the,url,pattern,to,match,param,handler,the,handler,to,apply;public,void,register,string,pattern,http,request,handler,handler,handler,registry,register,pattern,handler
HttpTestServer -> public void register(String pattern, HttpRequestHandler handler);1461921869;Registers a handler with the local registry.__@param pattern   the URL pattern to match_@param handler   the handler to apply;public void register(String pattern, HttpRequestHandler handler) {_        handlerRegistry.register(pattern, handler)__    };registers,a,handler,with,the,local,registry,param,pattern,the,url,pattern,to,match,param,handler,the,handler,to,apply;public,void,register,string,pattern,http,request,handler,handler,handler,registry,register,pattern,handler
HttpTestServer -> public void registerDefaultHandlers();1296408582;{@link #register Registers} a set of default request handlers._<pre>_URI pattern      Handler_-----------      -------_/echo/*          {@link EchoHandler EchoHandler}_/random/*        {@link RandomHandler RandomHandler}_</pre>;public void registerDefaultHandlers() {_        handlerRegistry.register("/echo/*", new EchoHandler())__        handlerRegistry.register("/random/*", new RandomHandler())__    };link,register,registers,a,set,of,default,request,handlers,pre,uri,pattern,handler,echo,link,echo,handler,echo,handler,random,link,random,handler,random,handler,pre;public,void,register,default,handlers,handler,registry,register,echo,new,echo,handler,handler,registry,register,random,new,random,handler
HttpTestServer -> public void registerDefaultHandlers();1297757789;{@link #register Registers} a set of default request handlers._<pre>_URI pattern      Handler_-----------      -------_/echo/*          {@link EchoHandler EchoHandler}_/random/*        {@link RandomHandler RandomHandler}_</pre>;public void registerDefaultHandlers() {_        handlerRegistry.register("/echo/*", new EchoHandler())__        handlerRegistry.register("/random/*", new RandomHandler())__    };link,register,registers,a,set,of,default,request,handlers,pre,uri,pattern,handler,echo,link,echo,handler,echo,handler,random,link,random,handler,random,handler,pre;public,void,register,default,handlers,handler,registry,register,echo,new,echo,handler,handler,registry,register,random,new,random,handler
HttpTestServer -> public void registerDefaultHandlers();1325236348;{@link #register Registers} a set of default request handlers._<pre>_URI pattern      Handler_-----------      -------_/echo/*          {@link EchoHandler EchoHandler}_/random/*        {@link RandomHandler RandomHandler}_</pre>;public void registerDefaultHandlers() {_        handlerRegistry.register("/echo/*", new EchoHandler())__        handlerRegistry.register("/random/*", new RandomHandler())__    };link,register,registers,a,set,of,default,request,handlers,pre,uri,pattern,handler,echo,link,echo,handler,echo,handler,random,link,random,handler,random,handler,pre;public,void,register,default,handlers,handler,registry,register,echo,new,echo,handler,handler,registry,register,random,new,random,handler
HttpTestServer -> public void registerDefaultHandlers();1325694383;{@link #register Registers} a set of default request handlers._<pre>_URI pattern      Handler_-----------      -------_/echo/*          {@link EchoHandler EchoHandler}_/random/*        {@link RandomHandler RandomHandler}_</pre>;public void registerDefaultHandlers() {_        handlerRegistry.register("/echo/*", new EchoHandler())__        handlerRegistry.register("/random/*", new RandomHandler())__    };link,register,registers,a,set,of,default,request,handlers,pre,uri,pattern,handler,echo,link,echo,handler,echo,handler,random,link,random,handler,random,handler,pre;public,void,register,default,handlers,handler,registry,register,echo,new,echo,handler,handler,registry,register,random,new,random,handler
HttpTestServer -> public void registerDefaultHandlers();1325745470;{@link #register Registers} a set of default request handlers._<pre>_URI pattern      Handler_-----------      -------_/echo/*          {@link EchoHandler EchoHandler}_/random/*        {@link RandomHandler RandomHandler}_</pre>;public void registerDefaultHandlers() {_        handlerRegistry.register("/echo/*", new EchoHandler())__        handlerRegistry.register("/random/*", new RandomHandler())__    };link,register,registers,a,set,of,default,request,handlers,pre,uri,pattern,handler,echo,link,echo,handler,echo,handler,random,link,random,handler,random,handler,pre;public,void,register,default,handlers,handler,registry,register,echo,new,echo,handler,handler,registry,register,random,new,random,handler
HttpTestServer -> public void registerDefaultHandlers();1331935855;{@link #register Registers} a set of default request handlers._<pre>_URI pattern      Handler_-----------      -------_/echo/*          {@link EchoHandler EchoHandler}_/random/*        {@link RandomHandler RandomHandler}_</pre>;public void registerDefaultHandlers() {_        handlerRegistry.register("/echo/*", new EchoHandler())__        handlerRegistry.register("/random/*", new RandomHandler())__    };link,register,registers,a,set,of,default,request,handlers,pre,uri,pattern,handler,echo,link,echo,handler,echo,handler,random,link,random,handler,random,handler,pre;public,void,register,default,handlers,handler,registry,register,echo,new,echo,handler,handler,registry,register,random,new,random,handler
HttpTestServer -> public void registerDefaultHandlers();1461921869;{@link #register Registers} a set of default request handlers._<pre>_URI pattern      Handler_-----------      -------_/echo/*          {@link EchoHandler EchoHandler}_/random/*        {@link RandomHandler RandomHandler}_</pre>;public void registerDefaultHandlers() {_        handlerRegistry.register("/echo/*", new EchoHandler())__        handlerRegistry.register("/random/*", new RandomHandler())__    };link,register,registers,a,set,of,default,request,handlers,pre,uri,pattern,handler,echo,link,echo,handler,echo,handler,random,link,random,handler,random,handler,pre;public,void,register,default,handlers,handler,registry,register,echo,new,echo,handler,handler,registry,register,random,new,random,handler
HttpTestServer -> public HttpTestServer(             final BasicHttpProcessor proc,             final ConnectionReuseStrategy reuseStrat,             final HttpResponseFactory responseFactory,             final HttpExpectationVerifier expectationVerifier,             final HttpParams params,             final SSLContext sslcontext);1296408582;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param reuseStrat the connection reuse strategy to be used by the_server, or <code>null</code> to use_{@link #newConnectionReuseStrategy() default}_strategy._@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters_@param sslcontext optional SSL context if the server is to leverage_SSL/TLS transport security;public HttpTestServer(_            final BasicHttpProcessor proc,_            final ConnectionReuseStrategy reuseStrat,_            final HttpResponseFactory responseFactory,_            final HttpExpectationVerifier expectationVerifier,_            final HttpParams params,_            final SSLContext sslcontext) {_        super()__        this.handlerRegistry = new HttpRequestHandlerRegistry()__        this.workers = Collections.synchronizedSet(new HashSet<Worker>())__        this.httpservice = new HttpService(_            proc != null ? proc : newProcessor(),_            reuseStrat != null ? reuseStrat: newConnectionReuseStrategy(),_            responseFactory != null ? responseFactory: newHttpResponseFactory(),_            handlerRegistry,_            expectationVerifier,_            params != null ? params : newDefaultParams())__        this.sslcontext = sslcontext__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,reuse,strat,the,connection,reuse,strategy,to,be,used,by,the,server,or,code,null,code,to,use,link,new,connection,reuse,strategy,default,strategy,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters,param,sslcontext,optional,ssl,context,if,the,server,is,to,leverage,ssl,tls,transport,security;public,http,test,server,final,basic,http,processor,proc,final,connection,reuse,strategy,reuse,strat,final,http,response,factory,response,factory,final,http,expectation,verifier,expectation,verifier,final,http,params,params,final,sslcontext,sslcontext,super,this,handler,registry,new,http,request,handler,registry,this,workers,collections,synchronized,set,new,hash,set,worker,this,httpservice,new,http,service,proc,null,proc,new,processor,reuse,strat,null,reuse,strat,new,connection,reuse,strategy,response,factory,null,response,factory,new,http,response,factory,handler,registry,expectation,verifier,params,null,params,new,default,params,this,sslcontext,sslcontext
HttpTestServer -> public HttpTestServer(             final BasicHttpProcessor proc,             final ConnectionReuseStrategy reuseStrat,             final HttpResponseFactory responseFactory,             final HttpExpectationVerifier expectationVerifier,             final HttpParams params,             final SSLContext sslcontext);1297757789;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param reuseStrat the connection reuse strategy to be used by the_server, or <code>null</code> to use_{@link #newConnectionReuseStrategy() default}_strategy._@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters_@param sslcontext optional SSL context if the server is to leverage_SSL/TLS transport security;public HttpTestServer(_            final BasicHttpProcessor proc,_            final ConnectionReuseStrategy reuseStrat,_            final HttpResponseFactory responseFactory,_            final HttpExpectationVerifier expectationVerifier,_            final HttpParams params,_            final SSLContext sslcontext) {_        super()__        this.handlerRegistry = new HttpRequestHandlerRegistry()__        this.workers = Collections.synchronizedSet(new HashSet<Worker>())__        this.httpservice = new HttpService(_            proc != null ? proc : newProcessor(),_            reuseStrat != null ? reuseStrat : newConnectionReuseStrategy(),_            responseFactory != null ? responseFactory : newHttpResponseFactory(),_            handlerRegistry,_            expectationVerifier,_            params != null ? params : newDefaultParams())__        this.sslcontext = sslcontext__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,reuse,strat,the,connection,reuse,strategy,to,be,used,by,the,server,or,code,null,code,to,use,link,new,connection,reuse,strategy,default,strategy,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters,param,sslcontext,optional,ssl,context,if,the,server,is,to,leverage,ssl,tls,transport,security;public,http,test,server,final,basic,http,processor,proc,final,connection,reuse,strategy,reuse,strat,final,http,response,factory,response,factory,final,http,expectation,verifier,expectation,verifier,final,http,params,params,final,sslcontext,sslcontext,super,this,handler,registry,new,http,request,handler,registry,this,workers,collections,synchronized,set,new,hash,set,worker,this,httpservice,new,http,service,proc,null,proc,new,processor,reuse,strat,null,reuse,strat,new,connection,reuse,strategy,response,factory,null,response,factory,new,http,response,factory,handler,registry,expectation,verifier,params,null,params,new,default,params,this,sslcontext,sslcontext
HttpTestServer -> public HttpTestServer(             final BasicHttpProcessor proc,             final ConnectionReuseStrategy reuseStrat,             final HttpResponseFactory responseFactory,             final HttpExpectationVerifier expectationVerifier,             final HttpParams params,             final SSLContext sslcontext);1325236348;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param reuseStrat the connection reuse strategy to be used by the_server, or <code>null</code> to use_{@link #newConnectionReuseStrategy() default}_strategy._@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters_@param sslcontext optional SSL context if the server is to leverage_SSL/TLS transport security;public HttpTestServer(_            final BasicHttpProcessor proc,_            final ConnectionReuseStrategy reuseStrat,_            final HttpResponseFactory responseFactory,_            final HttpExpectationVerifier expectationVerifier,_            final HttpParams params,_            final SSLContext sslcontext) {_        super()__        this.handlerRegistry = new HttpRequestHandlerRegistry()__        this.workers = Collections.synchronizedSet(new HashSet<Worker>())__        this.httpservice = new HttpService(_            proc != null ? proc : newProcessor(),_            reuseStrat != null ? reuseStrat : newConnectionReuseStrategy(),_            responseFactory != null ? responseFactory : newHttpResponseFactory(),_            handlerRegistry,_            expectationVerifier,_            params != null ? params : newDefaultParams())__        this.sslcontext = sslcontext__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,reuse,strat,the,connection,reuse,strategy,to,be,used,by,the,server,or,code,null,code,to,use,link,new,connection,reuse,strategy,default,strategy,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters,param,sslcontext,optional,ssl,context,if,the,server,is,to,leverage,ssl,tls,transport,security;public,http,test,server,final,basic,http,processor,proc,final,connection,reuse,strategy,reuse,strat,final,http,response,factory,response,factory,final,http,expectation,verifier,expectation,verifier,final,http,params,params,final,sslcontext,sslcontext,super,this,handler,registry,new,http,request,handler,registry,this,workers,collections,synchronized,set,new,hash,set,worker,this,httpservice,new,http,service,proc,null,proc,new,processor,reuse,strat,null,reuse,strat,new,connection,reuse,strategy,response,factory,null,response,factory,new,http,response,factory,handler,registry,expectation,verifier,params,null,params,new,default,params,this,sslcontext,sslcontext
HttpTestServer -> public HttpTestServer(             final BasicHttpProcessor proc,             final ConnectionReuseStrategy reuseStrat,             final HttpResponseFactory responseFactory,             final HttpExpectationVerifier expectationVerifier,             final HttpParams params,             final SSLContext sslcontext);1325694383;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param reuseStrat the connection reuse strategy to be used by the_server, or <code>null</code> to use_{@link #newConnectionReuseStrategy() default}_strategy._@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters_@param sslcontext optional SSL context if the server is to leverage_SSL/TLS transport security;public HttpTestServer(_            final BasicHttpProcessor proc,_            final ConnectionReuseStrategy reuseStrat,_            final HttpResponseFactory responseFactory,_            final HttpExpectationVerifier expectationVerifier,_            final HttpParams params,_            final SSLContext sslcontext) {_        super()__        this.handlerRegistry = new HttpRequestHandlerRegistry()__        this.workers = Collections.synchronizedSet(new HashSet<Worker>())__        this.httpservice = new HttpService(_            proc != null ? proc : newProcessor(),_            reuseStrat != null ? reuseStrat : newConnectionReuseStrategy(),_            responseFactory != null ? responseFactory : newHttpResponseFactory(),_            handlerRegistry,_            expectationVerifier,_            params != null ? params : newDefaultParams())__        this.sslcontext = sslcontext__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,reuse,strat,the,connection,reuse,strategy,to,be,used,by,the,server,or,code,null,code,to,use,link,new,connection,reuse,strategy,default,strategy,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters,param,sslcontext,optional,ssl,context,if,the,server,is,to,leverage,ssl,tls,transport,security;public,http,test,server,final,basic,http,processor,proc,final,connection,reuse,strategy,reuse,strat,final,http,response,factory,response,factory,final,http,expectation,verifier,expectation,verifier,final,http,params,params,final,sslcontext,sslcontext,super,this,handler,registry,new,http,request,handler,registry,this,workers,collections,synchronized,set,new,hash,set,worker,this,httpservice,new,http,service,proc,null,proc,new,processor,reuse,strat,null,reuse,strat,new,connection,reuse,strategy,response,factory,null,response,factory,new,http,response,factory,handler,registry,expectation,verifier,params,null,params,new,default,params,this,sslcontext,sslcontext
HttpTestServer -> public HttpTestServer(             final BasicHttpProcessor proc,             final ConnectionReuseStrategy reuseStrat,             final HttpResponseFactory responseFactory,             final HttpExpectationVerifier expectationVerifier,             final HttpParams params,             final SSLContext sslcontext);1325745470;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param reuseStrat the connection reuse strategy to be used by the_server, or <code>null</code> to use_{@link #newConnectionReuseStrategy() default}_strategy._@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters_@param sslcontext optional SSL context if the server is to leverage_SSL/TLS transport security;public HttpTestServer(_            final BasicHttpProcessor proc,_            final ConnectionReuseStrategy reuseStrat,_            final HttpResponseFactory responseFactory,_            final HttpExpectationVerifier expectationVerifier,_            final HttpParams params,_            final SSLContext sslcontext) {_        this.handlerRegistry = new HttpRequestHandlerRegistry()__        this.workers = Collections.synchronizedSet(new HashSet<Worker>())__        this.httpservice = new HttpService(_            proc != null ? proc : newProcessor(),_            reuseStrat != null ? reuseStrat : newConnectionReuseStrategy(),_            responseFactory != null ? responseFactory : newHttpResponseFactory(),_            handlerRegistry,_            expectationVerifier,_            params != null ? params : newDefaultParams())__        this.sslcontext = sslcontext__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,reuse,strat,the,connection,reuse,strategy,to,be,used,by,the,server,or,code,null,code,to,use,link,new,connection,reuse,strategy,default,strategy,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters,param,sslcontext,optional,ssl,context,if,the,server,is,to,leverage,ssl,tls,transport,security;public,http,test,server,final,basic,http,processor,proc,final,connection,reuse,strategy,reuse,strat,final,http,response,factory,response,factory,final,http,expectation,verifier,expectation,verifier,final,http,params,params,final,sslcontext,sslcontext,this,handler,registry,new,http,request,handler,registry,this,workers,collections,synchronized,set,new,hash,set,worker,this,httpservice,new,http,service,proc,null,proc,new,processor,reuse,strat,null,reuse,strat,new,connection,reuse,strategy,response,factory,null,response,factory,new,http,response,factory,handler,registry,expectation,verifier,params,null,params,new,default,params,this,sslcontext,sslcontext
HttpTestServer -> public HttpTestServer(             final BasicHttpProcessor proc,             final ConnectionReuseStrategy reuseStrat,             final HttpResponseFactory responseFactory,             final HttpExpectationVerifier expectationVerifier,             final HttpParams params,             final SSLContext sslcontext);1331935855;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param reuseStrat the connection reuse strategy to be used by the_server, or <code>null</code> to use_{@link #newConnectionReuseStrategy() default}_strategy._@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters_@param sslcontext optional SSL context if the server is to leverage_SSL/TLS transport security;public HttpTestServer(_            final BasicHttpProcessor proc,_            final ConnectionReuseStrategy reuseStrat,_            final HttpResponseFactory responseFactory,_            final HttpExpectationVerifier expectationVerifier,_            final HttpParams params,_            final SSLContext sslcontext) {_        this.handlerRegistry = new HttpRequestHandlerRegistry()__        this.workers = Collections.synchronizedSet(new HashSet<Worker>())__        this.httpservice = new HttpService(_            proc != null ? proc : newProcessor(),_            reuseStrat != null ? reuseStrat : newConnectionReuseStrategy(),_            responseFactory != null ? responseFactory : newHttpResponseFactory(),_            handlerRegistry,_            expectationVerifier,_            params != null ? params : newDefaultParams())__        this.sslcontext = sslcontext__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,reuse,strat,the,connection,reuse,strategy,to,be,used,by,the,server,or,code,null,code,to,use,link,new,connection,reuse,strategy,default,strategy,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters,param,sslcontext,optional,ssl,context,if,the,server,is,to,leverage,ssl,tls,transport,security;public,http,test,server,final,basic,http,processor,proc,final,connection,reuse,strategy,reuse,strat,final,http,response,factory,response,factory,final,http,expectation,verifier,expectation,verifier,final,http,params,params,final,sslcontext,sslcontext,this,handler,registry,new,http,request,handler,registry,this,workers,collections,synchronized,set,new,hash,set,worker,this,httpservice,new,http,service,proc,null,proc,new,processor,reuse,strat,null,reuse,strat,new,connection,reuse,strategy,response,factory,null,response,factory,new,http,response,factory,handler,registry,expectation,verifier,params,null,params,new,default,params,this,sslcontext,sslcontext
HttpTestServer -> public HttpTestServer(             final BasicHttpProcessor proc,             final ConnectionReuseStrategy reuseStrat,             final HttpResponseFactory responseFactory,             final HttpExpectationVerifier expectationVerifier,             final HttpParams params,             final SSLContext sslcontext);1461921869;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param reuseStrat the connection reuse strategy to be used by the_server, or <code>null</code> to use_{@link #newConnectionReuseStrategy() default}_strategy._@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters_@param sslcontext optional SSL context if the server is to leverage_SSL/TLS transport security;public HttpTestServer(_            final BasicHttpProcessor proc,_            final ConnectionReuseStrategy reuseStrat,_            final HttpResponseFactory responseFactory,_            final HttpExpectationVerifier expectationVerifier,_            final HttpParams params,_            final SSLContext sslcontext) {_        this.handlerRegistry = new HttpRequestHandlerRegistry()__        this.workers = Collections.synchronizedSet(new HashSet<Worker>())__        this.httpservice = new HttpService(_            proc != null ? proc : newProcessor(),_            reuseStrat != null ? reuseStrat : newConnectionReuseStrategy(),_            responseFactory != null ? responseFactory : newHttpResponseFactory(),_            handlerRegistry,_            expectationVerifier,_            params != null ? params : newDefaultParams())__        this.sslcontext = sslcontext__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,reuse,strat,the,connection,reuse,strategy,to,be,used,by,the,server,or,code,null,code,to,use,link,new,connection,reuse,strategy,default,strategy,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters,param,sslcontext,optional,ssl,context,if,the,server,is,to,leverage,ssl,tls,transport,security;public,http,test,server,final,basic,http,processor,proc,final,connection,reuse,strategy,reuse,strat,final,http,response,factory,response,factory,final,http,expectation,verifier,expectation,verifier,final,http,params,params,final,sslcontext,sslcontext,this,handler,registry,new,http,request,handler,registry,this,workers,collections,synchronized,set,new,hash,set,worker,this,httpservice,new,http,service,proc,null,proc,new,processor,reuse,strat,null,reuse,strat,new,connection,reuse,strategy,response,factory,null,response,factory,new,http,response,factory,handler,registry,expectation,verifier,params,null,params,new,default,params,this,sslcontext,sslcontext
HttpTestServer -> protected HttpParams newDefaultParams();1296408582;Obtains a set of reasonable default parameters for a server.__@return  default parameters;protected HttpParams newDefaultParams() {_        HttpParams params = new SyncBasicHttpParams()__        params_            .setIntParameter(CoreConnectionPNames.SO_TIMEOUT, 60000)_            .setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE, 8 * 1024)_            .setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, false)_            .setBooleanParameter(CoreConnectionPNames.TCP_NODELAY, true)_            .setParameter(CoreProtocolPNames.ORIGIN_SERVER,_                          "LocalTestServer/1.1")__        return params__    };obtains,a,set,of,reasonable,default,parameters,for,a,server,return,default,parameters;protected,http,params,new,default,params,http,params,params,new,sync,basic,http,params,params,set,int,parameter,core,connection,pnames,60000,set,int,parameter,core,connection,pnames,8,1024,set,boolean,parameter,core,connection,pnames,false,set,boolean,parameter,core,connection,pnames,true,set,parameter,core,protocol,pnames,local,test,server,1,1,return,params
HttpTestServer -> protected HttpParams newDefaultParams();1297757789;Obtains a set of reasonable default parameters for a server.__@return  default parameters;protected HttpParams newDefaultParams() {_        HttpParams params = new SyncBasicHttpParams()__        params_            .setIntParameter(CoreConnectionPNames.SO_TIMEOUT, 60000)_            .setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE, 8 * 1024)_            .setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, false)_            .setBooleanParameter(CoreConnectionPNames.TCP_NODELAY, true)_            .setParameter(CoreProtocolPNames.ORIGIN_SERVER,_                          "LocalTestServer/1.1")__        return params__    };obtains,a,set,of,reasonable,default,parameters,for,a,server,return,default,parameters;protected,http,params,new,default,params,http,params,params,new,sync,basic,http,params,params,set,int,parameter,core,connection,pnames,60000,set,int,parameter,core,connection,pnames,8,1024,set,boolean,parameter,core,connection,pnames,false,set,boolean,parameter,core,connection,pnames,true,set,parameter,core,protocol,pnames,local,test,server,1,1,return,params
HttpTestServer -> protected HttpParams newDefaultParams();1325236348;Obtains a set of reasonable default parameters for a server.__@return  default parameters;protected HttpParams newDefaultParams() {_        HttpParams params = new SyncBasicHttpParams()__        params_            .setIntParameter(CoreConnectionPNames.SO_TIMEOUT, 60000)_            .setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE, 8 * 1024)_            .setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, false)_            .setBooleanParameter(CoreConnectionPNames.TCP_NODELAY, true)_            .setParameter(CoreProtocolPNames.ORIGIN_SERVER,_                          "LocalTestServer/1.1")__        return params__    };obtains,a,set,of,reasonable,default,parameters,for,a,server,return,default,parameters;protected,http,params,new,default,params,http,params,params,new,sync,basic,http,params,params,set,int,parameter,core,connection,pnames,60000,set,int,parameter,core,connection,pnames,8,1024,set,boolean,parameter,core,connection,pnames,false,set,boolean,parameter,core,connection,pnames,true,set,parameter,core,protocol,pnames,local,test,server,1,1,return,params
HttpTestServer -> protected HttpParams newDefaultParams();1325694383;Obtains a set of reasonable default parameters for a server.__@return  default parameters;protected HttpParams newDefaultParams() {_        HttpParams params = new SyncBasicHttpParams()__        params_            .setIntParameter(CoreConnectionPNames.SO_TIMEOUT, 60000)_            .setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE, 8 * 1024)_            .setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, false)_            .setBooleanParameter(CoreConnectionPNames.TCP_NODELAY, true)_            .setParameter(CoreProtocolPNames.ORIGIN_SERVER,_                          "LocalTestServer/1.1")__        return params__    };obtains,a,set,of,reasonable,default,parameters,for,a,server,return,default,parameters;protected,http,params,new,default,params,http,params,params,new,sync,basic,http,params,params,set,int,parameter,core,connection,pnames,60000,set,int,parameter,core,connection,pnames,8,1024,set,boolean,parameter,core,connection,pnames,false,set,boolean,parameter,core,connection,pnames,true,set,parameter,core,protocol,pnames,local,test,server,1,1,return,params
HttpTestServer -> protected HttpParams newDefaultParams();1325745470;Obtains a set of reasonable default parameters for a server.__@return  default parameters;protected HttpParams newDefaultParams() {_        HttpParams params = new SyncBasicHttpParams()__        params_            .setIntParameter(CoreConnectionPNames.SO_TIMEOUT, 60000)_            .setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE, 8 * 1024)_            .setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, false)_            .setBooleanParameter(CoreConnectionPNames.TCP_NODELAY, true)_            .setParameter(CoreProtocolPNames.ORIGIN_SERVER,_                          "LocalTestServer/1.1")__        return params__    };obtains,a,set,of,reasonable,default,parameters,for,a,server,return,default,parameters;protected,http,params,new,default,params,http,params,params,new,sync,basic,http,params,params,set,int,parameter,core,connection,pnames,60000,set,int,parameter,core,connection,pnames,8,1024,set,boolean,parameter,core,connection,pnames,false,set,boolean,parameter,core,connection,pnames,true,set,parameter,core,protocol,pnames,local,test,server,1,1,return,params
HttpTestServer -> protected HttpParams newDefaultParams();1331935855;Obtains a set of reasonable default parameters for a server.__@return  default parameters;protected HttpParams newDefaultParams() {_        HttpParams params = new SyncBasicHttpParams()__        params_            .setIntParameter(CoreConnectionPNames.SO_TIMEOUT, 60000)_            .setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE, 8 * 1024)_            .setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, false)_            .setBooleanParameter(CoreConnectionPNames.TCP_NODELAY, true)_            .setParameter(CoreProtocolPNames.ORIGIN_SERVER,_                          "LocalTestServer/1.1")__        return params__    };obtains,a,set,of,reasonable,default,parameters,for,a,server,return,default,parameters;protected,http,params,new,default,params,http,params,params,new,sync,basic,http,params,params,set,int,parameter,core,connection,pnames,60000,set,int,parameter,core,connection,pnames,8,1024,set,boolean,parameter,core,connection,pnames,false,set,boolean,parameter,core,connection,pnames,true,set,parameter,core,protocol,pnames,local,test,server,1,1,return,params
HttpTestServer -> protected HttpParams newDefaultParams();1461921869;Obtains a set of reasonable default parameters for a server.__@return  default parameters;protected HttpParams newDefaultParams() {_        HttpParams params = new SyncBasicHttpParams()__        params_            .setIntParameter(CoreConnectionPNames.SO_TIMEOUT, 60000)_            .setIntParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE, 8 * 1024)_            .setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, false)_            .setBooleanParameter(CoreConnectionPNames.TCP_NODELAY, true)_            .setParameter(CoreProtocolPNames.ORIGIN_SERVER,_                          "LocalTestServer/1.1")__        return params__    };obtains,a,set,of,reasonable,default,parameters,for,a,server,return,default,parameters;protected,http,params,new,default,params,http,params,params,new,sync,basic,http,params,params,set,int,parameter,core,connection,pnames,60000,set,int,parameter,core,connection,pnames,8,1024,set,boolean,parameter,core,connection,pnames,false,set,boolean,parameter,core,connection,pnames,true,set,parameter,core,protocol,pnames,local,test,server,1,1,return,params
HttpTestServer -> public HttpTestServer(             BasicHttpProcessor proc,             HttpParams params);1296408582;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters;public HttpTestServer(_            BasicHttpProcessor proc,_            HttpParams params) {_        this(proc, null, null, null, params, null)__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters;public,http,test,server,basic,http,processor,proc,http,params,params,this,proc,null,null,null,params,null
HttpTestServer -> public HttpTestServer(             BasicHttpProcessor proc,             HttpParams params);1297757789;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters;public HttpTestServer(_            BasicHttpProcessor proc,_            HttpParams params) {_        this(proc, null, null, null, params, null)__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters;public,http,test,server,basic,http,processor,proc,http,params,params,this,proc,null,null,null,params,null
HttpTestServer -> public HttpTestServer(             BasicHttpProcessor proc,             HttpParams params);1325236348;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters;public HttpTestServer(_            BasicHttpProcessor proc,_            HttpParams params) {_        this(proc, null, null, null, params, null)__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters;public,http,test,server,basic,http,processor,proc,http,params,params,this,proc,null,null,null,params,null
HttpTestServer -> public HttpTestServer(             BasicHttpProcessor proc,             HttpParams params);1325694383;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters;public HttpTestServer(_            BasicHttpProcessor proc,_            HttpParams params) {_        this(proc, null, null, null, params, null)__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters;public,http,test,server,basic,http,processor,proc,http,params,params,this,proc,null,null,null,params,null
HttpTestServer -> public HttpTestServer(             BasicHttpProcessor proc,             HttpParams params);1325745470;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters;public HttpTestServer(_            BasicHttpProcessor proc,_            HttpParams params) {_        this(proc, null, null, null, params, null)__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters;public,http,test,server,basic,http,processor,proc,http,params,params,this,proc,null,null,null,params,null
HttpTestServer -> public HttpTestServer(             BasicHttpProcessor proc,             HttpParams params);1331935855;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters;public HttpTestServer(_            BasicHttpProcessor proc,_            HttpParams params) {_        this(proc, null, null, null, params, null)__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters;public,http,test,server,basic,http,processor,proc,http,params,params,this,proc,null,null,null,params,null
HttpTestServer -> public HttpTestServer(             BasicHttpProcessor proc,             HttpParams params);1461921869;Creates a new test server.__@param proc      the HTTP processors to be used by the server, or_<code>null</code> to use a_{@link #newProcessor default} processor_@param params    the parameters to be used by the server, or_<code>null</code> to use_{@link #newDefaultParams default} parameters;public HttpTestServer(_            BasicHttpProcessor proc,_            HttpParams params) {_        this(proc, null, null, null, params, null)__    };creates,a,new,test,server,param,proc,the,http,processors,to,be,used,by,the,server,or,code,null,code,to,use,a,link,new,processor,default,processor,param,params,the,parameters,to,be,used,by,the,server,or,code,null,code,to,use,link,new,default,params,default,parameters;public,http,test,server,basic,http,processor,proc,http,params,params,this,proc,null,null,null,params,null
