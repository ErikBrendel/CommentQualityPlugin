commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     from(timerEndPointURI).to(providerEndPointURI).to(mockEndPointURI). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(timerEndPointURI).to(providerEndPointURI).to(mockEndPointURI).         }     }. }
false;public;0;6;;public void configure() throws Exception {     replaceFromWith(directEndPointURI).     interceptSendToEndpoint(providerEndPointURI).to("mock:intercepted").skipSendToOriginalEndpoint(). }
false;public;0;26;;@Test public void testIsUseAdviceWith() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          public void configure() throws Exception {             replaceFromWith(directEndPointURI).             interceptSendToEndpoint(providerEndPointURI).to("mock:intercepted").skipSendToOriginalEndpoint().         }     }).     // we must manually start when we are done with all the advice with     context.start().     getMockEndpoint(mockEndPointURI).expectedBodiesReceived("a trigger").     getMockEndpoint("mock:intercepted").expectedBodiesReceived("a trigger").     template.sendBody(directEndPointURI, "a trigger").     assertMockEndpointsSatisfied().     assertNotNull(context.hasEndpoint(directEndPointURI)).     assertNotNull(context.hasEndpoint(mockEndPointURI)). }
false;public;0;4;;@Override public boolean isUseAdviceWith() {     return true. }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return true. }
