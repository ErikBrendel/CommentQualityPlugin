commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testJmsInOnlyHttpPostIssue() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenCompleted(1).from("jms*").create().     template.sendBody("jms:queue:in", "Hello World").     assertTrue("Should complete the JMS route", notify.matchesMockWaitTime()). }
false;public;0;5;;@Test public void testJmsInOutHttpPostIssue() throws Exception {     String out = template.requestBody("jms:queue:in", "Hello World", String.class).     assertEquals("OK", out). }
false;public;1;9;;@Override public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     assertEquals("name=Hello World", body).     exchange.getOut().setBody("OK").     exchange.getOut().setHeader(CONTENT_TYPE, "text/plain").     exchange.getOut().setHeader(HTTP_RESPONSE_CODE, 200). }
false;public;0;20;;public void configure() {     from("jms:queue:in").setBody().simple("name=${body}").setHeader(CONTENT_TYPE).constant("application/x-www-form-urlencoded").setHeader(HTTP_METHOD).constant("POST").to("http://localhost:" + port + "/myservice").     from("jetty:http://0.0.0.0:" + port + "/myservice").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             assertEquals("name=Hello World", body).             exchange.getOut().setBody("OK").             exchange.getOut().setHeader(CONTENT_TYPE, "text/plain").             exchange.getOut().setHeader(HTTP_RESPONSE_CODE, 200).         }     }). }
false;protected;0;27;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     port = AvailablePortFinder.getNextAvailable(8000).     return new RouteBuilder() {          public void configure() {             from("jms:queue:in").setBody().simple("name=${body}").setHeader(CONTENT_TYPE).constant("application/x-www-form-urlencoded").setHeader(HTTP_METHOD).constant("POST").to("http://localhost:" + port + "/myservice").             from("jetty:http://0.0.0.0:" + port + "/myservice").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     assertEquals("name=Hello World", body).                     exchange.getOut().setBody("OK").                     exchange.getOut().setHeader(CONTENT_TYPE, "text/plain").                     exchange.getOut().setHeader(HTTP_RESPONSE_CODE, 200).                 }             }).         }     }. }
false;protected;1;9;;@Override protected void bindToRegistry(Registry registry) throws Exception {     // add ActiveMQ with embedded broker     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent amq = jmsComponentAutoAcknowledge(connectionFactory).     amq.setCamelContext(context).     registry.bind("jms", amq). }
