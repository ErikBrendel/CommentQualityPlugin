commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testPollEnrichJms() throws Exception {     template.sendBody("jms:queue:foo", "Bye World").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() {     from("direct:start").pollEnrich("jms:queue:foo", 5000).to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").pollEnrich("jms:queue:foo", 5000).to("mock:result").         }     }. }
false;protected;1;11;;@Override protected void bindToRegistry(Registry registry) throws Exception {     deleteDirectory("activemq-data").     // add ActiveMQ with embedded broker which must be persistent     ConnectionFactory connectionFactory = CamelJmsTestHelper.createPersistentConnectionFactory().     JmsComponent amq = jmsComponentAutoAcknowledge(connectionFactory).     amq.setCamelContext(context).     registry.bind("jms", amq). }
