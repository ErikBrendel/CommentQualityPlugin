commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Override public void configure() throws Exception {     onException(Exception.class).markRollbackOnly().     from("direct:start").transacted("PROPAGATION_REQUIRES_NEW").to("activemq:queue:start").     from("activemq:queue:result1").transacted("PROPAGATION_REQUIRES_NEW").to("mock:result1").     from("activemq:queue:result2").transacted("PROPAGATION_REQUIRES_NEW").to("mock:result2").     from("activemq:queue:ActiveMQ.DLQ").transacted("PROPAGATION_REQUIRES_NEW").to("mock:dlq").     from("activemq:queue:start").transacted("PROPAGATION_REQUIRES_NEW").setExchangePattern(ExchangePattern.InOnly).to("activemq:queue:result1").to("direct:route2").choice().when(body().contains("Neverland")).throwException(new RuntimeException("Expected!")).     from("direct:route2").transacted("PROPAGATION_REQUIRES_NEW").setExchangePattern(ExchangePattern.InOnly).to("activemq:queue:result2"). }
false;public;0;30;;@Before public void setUpRoute() throws Exception {     camelContext.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).markRollbackOnly().             from("direct:start").transacted("PROPAGATION_REQUIRES_NEW").to("activemq:queue:start").             from("activemq:queue:result1").transacted("PROPAGATION_REQUIRES_NEW").to("mock:result1").             from("activemq:queue:result2").transacted("PROPAGATION_REQUIRES_NEW").to("mock:result2").             from("activemq:queue:ActiveMQ.DLQ").transacted("PROPAGATION_REQUIRES_NEW").to("mock:dlq").             from("activemq:queue:start").transacted("PROPAGATION_REQUIRES_NEW").setExchangePattern(ExchangePattern.InOnly).to("activemq:queue:result1").to("direct:route2").choice().when(body().contains("Neverland")).throwException(new RuntimeException("Expected!")).             from("direct:route2").transacted("PROPAGATION_REQUIRES_NEW").setExchangePattern(ExchangePattern.InOnly).to("activemq:queue:result2").         }     }). }
false;public;0;12;;@Test public void testSendThrowingException() throws Exception {     result1.expectedMessageCount(0).     result2.expectedMessageCount(1).     dlq.expectedMessageCount(1).     start.sendBody("Single ticket to Neverland please!").     result2.assertIsSatisfied().     dlq.assertIsSatisfied().     result1.assertIsSatisfied(). }
false;public;0;12;;@Test public void testSend() throws Exception {     result1.expectedMessageCount(1).     result2.expectedMessageCount(1).     dlq.expectedMessageCount(0).     start.sendBody("Piotr Klimczak").     result1.assertIsSatisfied().     result2.assertIsSatisfied().     dlq.assertIsSatisfied(). }
