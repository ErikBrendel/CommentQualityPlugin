commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testRequestOnly() throws Exception {     getMockEndpoint("mock:validate").expectedMessageCount(1).     // even though its request only the message is still continued being processed     getMockEndpoint("mock:order").expectedMessageCount(1).     template.sendBody("jms:queue:order", "Order: Camel in Action").     order += "C".     assertMockEndpointsSatisfied().     // B should be last (either ABC or BAC depending on threading)     assertEquals(3, order.length()).     assertTrue(order.endsWith("B")). }
false;public;0;15;;@Test public void testRequestReply() throws Exception {     getMockEndpoint("mock:validate").expectedMessageCount(1).     // even though its request only the message is still continued being processed     getMockEndpoint("mock:order").expectedMessageCount(1).     String response = template.requestBody("jms:queue:order", "Order: Camel in Action", String.class).     order += "C".     assertMockEndpointsSatisfied().     // should be in strict ABC order as we do request/reply     assertEquals("ABC", order).     assertEquals("Order OK", response). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     order = "".     super.setUp(). }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("validateOrder", new MyValidateOrderBean()).     jndi.bind("handleOrder", new MyHandleOrderBean()).     return jndi. }
false;protected;1;8;;@Override protected void bindToRegistry(Registry registry) throws Exception {     // add ActiveMQ with embedded broker     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent amq = jmsComponentAutoAcknowledge(connectionFactory).     amq.setCamelContext(context).     registry.bind("jms", amq). }
false;public;0;22;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // just a unit test but imaging using your own data format that does complex     // and CPU heavy processing for decrypting the message     DataFormat mySecureDataFormat = new StringDataFormat("iso-8859-1").     // list on the JMS queue for new orders     from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500).to("bean:handleOrder").to("mock:order"). // END SNIPPET: e1 }
false;protected;0;27;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // just a unit test but imaging using your own data format that does complex             // and CPU heavy processing for decrypting the message             DataFormat mySecureDataFormat = new StringDataFormat("iso-8859-1").             // list on the JMS queue for new orders             from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500).to("bean:handleOrder").to("mock:order").         // END SNIPPET: e1         }     }. }
false;public;1;4;;public void validateOrder(byte[] payload) {     order += "A". // noop }
false;public;1;5;;public String handleOrder(String message) {     order += "B".     return "Order OK". // noop }
