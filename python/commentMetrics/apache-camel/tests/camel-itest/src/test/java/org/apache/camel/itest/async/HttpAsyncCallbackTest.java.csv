commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testAsyncAndSyncAtSameTimeWithHttp() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("Hello Claus", "Hello Hadrian", "Hello Willem").     // START SNIPPET: e3     MyCallback callback = new MyCallback().     // Send 3 async request/reply message to the http endpoint     // where we let the callback handle gathering the responses     String url = "http://localhost:" + getPort() + "/myservice".     template.asyncCallbackRequestBody(url, "Claus", callback).     template.asyncCallbackRequestBody(url, "Hadrian", callback).     template.asyncCallbackRequestBody(url, "Willem", callback).     // END SNIPPET: e3     assertMockEndpointsSatisfied().     assertTrue("Should get 3 callbacks", LATCH.await(10, TimeUnit.SECONDS)).     // assert that we got all the correct data in our callback     assertTrue("Claus is missing", callback.getData().contains("Hello Claus")).     assertTrue("Hadrian is missing", callback.getData().contains("Hello Hadrian")).     assertTrue("Willem is missing", callback.getData().contains("Hello Willem")). }
false;public;1;9;;@Override public void onComplete(Exchange exchange) {     // this method is invoked when the exchange was a success and we can get the response     String body = exchange.getOut().getBody(String.class).     data.add(body).     // the latch is used for testing purposes     LATCH.countDown(). }
false;public;0;3;;public List<String> getData() {     return data. }
false;public;0;11;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // The mocks are here for unit test     // Simulate a slow http service (delaying a bit) we want to invoke async     from("jetty:http://0.0.0.0:" + getPort() + "/myservice").delay(300).transform(body().prepend("Hello ")).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;16;;// END SNIPPET: e2 @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // The mocks are here for unit test             // Simulate a slow http service (delaying a bit) we want to invoke async             from("jetty:http://0.0.0.0:" + getPort() + "/myservice").delay(300).transform(body().prepend("Hello ")).to("mock:result").         // END SNIPPET: e1         }     }. }
