commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Ignore("TODO: investigate for Camel 3.0") @Test public void testNettyHttpClientChunked() throws Exception {     invokeService(port1, true). }
false;public;0;4;;@Test public void testNettyHttpRouteClientChunked() throws Exception {     invokeService(port2, false). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Camel in chunks."). }
false;private;2;15;;private void invokeService(int port, boolean checkChunkedHeader) {     Exchange out = template.request("netty-http:http://localhost:" + port + "/test", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Camel in chunks.").         }     }).     assertNotNull(out).     assertEquals("Bye Camel in chunks.", out.getOut().getBody(String.class)).     if (checkChunkedHeader) {         assertEquals("chunked", out.getOut().getHeader("Transfer-Encoding")).     } }
false;public;0;15;;@Override public void configure() throws Exception {     port1 = AvailablePortFinder.getNextAvailable(8000).     port2 = AvailablePortFinder.getNextAvailable(9000).     // use jetty as server as it supports sending response as chunked encoding     from("jetty:http://localhost:" + port1 + "/test").setHeader("Transfer-Encoding", constant("chunked")).transform().simple("Bye ${body}").     // set up a netty http proxy     from("netty-http:http://localhost:" + port2 + "/test").to("netty-http:http://localhost:" + port1 + "/test?bridgeEndpoint=true&throwExceptionOnFailure=false"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             port1 = AvailablePortFinder.getNextAvailable(8000).             port2 = AvailablePortFinder.getNextAvailable(9000).             // use jetty as server as it supports sending response as chunked encoding             from("jetty:http://localhost:" + port1 + "/test").setHeader("Transfer-Encoding", constant("chunked")).transform().simple("Bye ${body}").             // set up a netty http proxy             from("netty-http:http://localhost:" + port2 + "/test").to("netty-http:http://localhost:" + port1 + "/test?bridgeEndpoint=true&throwExceptionOnFailure=false").         }     }. }
