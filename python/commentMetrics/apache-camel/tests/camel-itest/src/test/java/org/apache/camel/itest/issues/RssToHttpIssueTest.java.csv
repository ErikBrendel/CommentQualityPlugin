commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test @Ignore public void testRssToHttpIssueTest() throws Exception {     // ignore as it requires to be online for testing     MockEndpoint mock = getMockEndpoint("mock:end").     mock.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     Namespaces ns = new Namespaces("atom", "http://www.w3.org/2005/Atom").     from("rss:http://www.plosone.org/article/feed").marshal().rss().setHeader(Exchange.HTTP_URI).xpath("//atom:entry/atom:link[@type=\"application/pdf\"]/@href", ns).to("http://dummy").to("mock:end"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             Namespaces ns = new Namespaces("atom", "http://www.w3.org/2005/Atom").             from("rss:http://www.plosone.org/article/feed").marshal().rss().setHeader(Exchange.HTTP_URI).xpath("//atom:entry/atom:link[@type=\"application/pdf\"]/@href", ns).to("http://dummy").to("mock:end").         }     }. }
