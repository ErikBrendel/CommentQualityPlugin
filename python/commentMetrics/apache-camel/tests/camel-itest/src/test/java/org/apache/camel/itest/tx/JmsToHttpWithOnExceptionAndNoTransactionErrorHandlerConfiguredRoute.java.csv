commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public boolean matches(Exchange exchange) {     HttpOperationFailedException e = exchange.getException(HttpOperationFailedException.class).     return e != null && e.getStatusCode() == 404. }
false;public;1;23;;public void process(Exchange exchange) throws Exception {     // first hit is always a error code 500 to force the caller to retry     if (counter++ < 1) {         // simulate http error 500         exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).         exchange.getOut().setBody("Damn some internal server error").         return.     }     String user = exchange.getIn().getHeader("user", String.class).     if ("unknown".equals(user)) {         // no page for a unknown user         exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404).         exchange.getOut().setBody("Page does not exists").         return.     } else if ("guest".equals(user)) {         // not okay for guest user         exchange.getOut().setBody(nok).         return.     }     exchange.getOut().setBody(ok). }
false;public;0;59;;public void configure() throws Exception {     port = AvailablePortFinder.getNextAvailable(8000).     // if its a 404 then regard it as handled     onException(HttpOperationFailedException.class).onWhen(new Predicate() {          public boolean matches(Exchange exchange) {             HttpOperationFailedException e = exchange.getException(HttpOperationFailedException.class).             return e != null && e.getStatusCode() == 404.         }     }).handled(true).to("mock:404").transform(constant(noAccess)).     from("activemq:queue:data").policy(required).to("http://localhost:" + port + "/sender").convertBodyTo(String.class).choice().when().xpath("/reply/status != 'ok'").to("mock:rollback").rollback().otherwise().end().     // this is our http router     from("jetty:http://localhost:" + port + "/sender").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // first hit is always a error code 500 to force the caller to retry             if (counter++ < 1) {                 // simulate http error 500                 exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).                 exchange.getOut().setBody("Damn some internal server error").                 return.             }             String user = exchange.getIn().getHeader("user", String.class).             if ("unknown".equals(user)) {                 // no page for a unknown user                 exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404).                 exchange.getOut().setBody("Page does not exists").                 return.             } else if ("guest".equals(user)) {                 // not okay for guest user                 exchange.getOut().setBody(nok).                 return.             }             exchange.getOut().setBody(ok).         }     }). }
