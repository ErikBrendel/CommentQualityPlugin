commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testHttpJmsAsync() throws Exception {     try {         template.requestBody("http://0.0.0.0:" + getPort() + "/myservice", "Hello World", String.class).         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         HttpOperationFailedException cause = assertIsInstanceOf(HttpOperationFailedException.class, e.getCause()).         assertEquals(504, cause.getStatusCode()).     } }
false;protected;1;8;;@Override protected void bindToRegistry(Registry registry) throws Exception {     // add ActiveMQ with embedded broker     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent amq = jmsComponentAutoAcknowledge(connectionFactory).     amq.setCamelContext(context).     registry.bind("jms", amq). }
false;public;0;14;;@Override public void configure() throws Exception {     // a lot of timeouts in the play :)     // jetty will timeout after 2 seconds     fromF("jetty:http://0.0.0.0:%s/myservice?continuationTimeout=2000", getPort()).to("jms:queue:foo?requestTimeout=5000").     from("jms:queue:foo").delayer(10000).transform(constant("Bye World")). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // a lot of timeouts in the play :)             // jetty will timeout after 2 seconds             fromF("jetty:http://0.0.0.0:%s/myservice?continuationTimeout=2000", getPort()).to("jms:queue:foo?requestTimeout=5000").             from("jms:queue:foo").delayer(10000).transform(constant("Bye World")).         }     }. }
