commented;modifiers;parameterAmount;loc;comment;code
true;public;1;19;/**  * It attempts to get the password from the private  * alias/passwords map.  */ ;/**  * It attempts to get the password from the private  * alias/passwords map.  */ public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {     for (Callback callback : callbacks) {         String pass = passwords.get(getIdentifier(callback)).         String type = getPasswordType(callback).         if (type.endsWith("#PasswordDigest")) {             if (pass != null) {                 setPassword(callback, pass).                 return.             }         }         if (type.endsWith("#PasswordText")) {             // Code for CXF 2.4.X             if (getPassword(callback) == null) {                 setPassword(callback, pass).                 return.             }         }     } }
false;private;2;7;;private void setPassword(Callback callback, String pass) {     try {         callback.getClass().getMethod("setPassword", String.class).invoke(callback, pass).     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;private;1;7;;private String getPassword(Callback callback) {     try {         return (String) callback.getClass().getMethod("getPassword").invoke(callback).     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;private;1;7;;private String getIdentifier(Callback cb) {     try {         return (String) cb.getClass().getMethod("getIdentifier").invoke(cb).     } catch (Exception e) {         throw new RuntimeException(e).     } }
true;public;2;3;/**  * Add an alias/password pair to the callback mechanism.  */ ;/**  * Add an alias/password pair to the callback mechanism.  */ public void setAliasPassword(String alias, String password) {     passwords.put(alias, password). }
false;private;1;20;;private String getPasswordType(Callback pc) {     try {         Method getType = null.         try {             getType = pc.getClass().getMethod("getPasswordType").         } catch (NoSuchMethodException ex) {         // keep looking         } catch (SecurityException ex) {         // keep looking         }         if (getType == null) {             getType = pc.getClass().getMethod("getType").         }         String result = (String) getType.invoke(pc).         return result.     } catch (Exception ex) {         return null.     } }
