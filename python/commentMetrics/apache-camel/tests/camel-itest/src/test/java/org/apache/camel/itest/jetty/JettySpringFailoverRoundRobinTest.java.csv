commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/itest/jetty/JettySpringFailoverRoundRobinTest.xml"). }
false;public;0;24;;@Test public void testJettySpringFailoverRoundRobin() throws Exception {     getMockEndpoint("mock:bad").expectedMessageCount(1).     getMockEndpoint("mock:bad2").expectedMessageCount(1).     getMockEndpoint("mock:good").expectedMessageCount(1).     getMockEndpoint("mock:good2").expectedMessageCount(0).     String reply = template.requestBody("direct:start", null, String.class).     assertEquals("Good", reply).     assertMockEndpointsSatisfied().     // reset mocks and send a message again to see that round robin     // continue where it should     resetMocks().     getMockEndpoint("mock:bad").expectedMessageCount(0).     getMockEndpoint("mock:bad2").expectedMessageCount(0).     getMockEndpoint("mock:good").expectedMessageCount(0).     getMockEndpoint("mock:good2").expectedMessageCount(1).     reply = template.requestBody("direct:start", null, String.class).     assertEquals("Also good", reply). }
