commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;11;;@Test public void testDocumentation() throws Exception {     CamelContext context = new DefaultCamelContext().     String json = context.getEipParameterJsonSchema("from").     log.info(json).     assertNotNull("Should have found json for from", json).     assertTrue(json.contains("\"name\": \"from\"")).     assertTrue(json.contains("\"uri\": { \"kind\": \"attribute\"")).     assertTrue(json.contains("\"ref\": { \"kind\": \"attribute\"")). }
false;public;0;13;;@Test public void testSplitDocumentation() throws Exception {     CamelContext context = new DefaultCamelContext().     String json = context.getEipParameterJsonSchema("split").     log.info(json).     assertNotNull("Should have found json for split", json).     assertTrue(json.contains("\"name\": \"split\"")).     // there should be javadoc included     assertTrue(json.contains("If enabled then processing each splitted messages occurs concurrently.")).     // and it support outputs     assertTrue(json.contains("\"outputs\": { \"kind\": \"element\", \"displayName\": \"Outputs\", \"required\": true, \"type\": \"array\", \"javaType\"")). }
false;public;0;10;;@Test public void testSimpleDocumentation() throws Exception {     CamelContext context = new DefaultCamelContext().     String json = context.getEipParameterJsonSchema("simple").     log.info(json).     assertNotNull("Should have found json for simple", json).     assertTrue(json.contains("\"label\": \"language,core,java\"")).     assertTrue(json.contains("\"name\": \"simple\"")). }
false;public;0;11;;@Test public void testFailOverDocumentation() throws Exception {     CamelContext context = new DefaultCamelContext().     String json = context.getEipParameterJsonSchema("failover").     log.info(json).     assertNotNull("Should have found json for failover", json).     assertTrue(json.contains("\"name\": \"failover\"")).     assertTrue(json.contains("\"exception\": { \"kind\": \"element\", \"displayName\": \"Exception\", \"required\": false, \"type\": \"array\"" + ", \"javaType\": \"java.util.List<java.lang.String>\", \"deprecated\": false")). }
false;public;0;6;;@Test public void testNotFound() throws Exception {     CamelContext context = new DefaultCamelContext().     String json = context.getEipParameterJsonSchema("unknown").     assertNull("Should not have found json for unknown", json). }
