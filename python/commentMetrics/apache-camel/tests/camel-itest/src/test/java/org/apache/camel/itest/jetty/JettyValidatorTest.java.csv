commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testValidRequest() throws Exception {     InputStream inputStream = this.getClass().getResourceAsStream("ValidRequest.xml").     assertNotNull("the inputStream should not be null", inputStream).     String response = template.requestBody("http://localhost:" + port + "/test", inputStream, String.class).     assertEquals("The response should be ok", response, "<ok/>"). }
false;public;0;8;;@Test public void testInvalidRequest() throws Exception {     InputStream inputStream = this.getClass().getResourceAsStream("InvalidRequest.xml").     assertNotNull("the inputStream should not be null", inputStream).     String response = template.requestBody("http://localhost:" + port + "/test", inputStream, String.class).     assertEquals("The response should be error", response, "<error/>"). }
false;public;0;12;;public void configure() {     from("jetty:http://localhost:" + port + "/test").convertBodyTo(String.class).to("log:in").doTry().to("validator:OptimizationRequest.xsd").transform(constant("<ok/>")).doCatch(ValidationException.class).transform(constant("<error/>")).end().to("log:out"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     port = AvailablePortFinder.getNextAvailable(8000).     return new RouteBuilder() {          public void configure() {             from("jetty:http://localhost:" + port + "/test").convertBodyTo(String.class).to("log:in").doTry().to("validator:OptimizationRequest.xsd").transform(constant("<ok/>")).doCatch(ValidationException.class).transform(constant("<error/>")).end().to("log:out").         }     }. }
