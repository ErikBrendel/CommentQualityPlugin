commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testGetRootPath() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hi! /someservice").     template.sendBody("direct:root", "").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testGetWithRelativePath() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hi! /someservice/relative").     template.sendBody("direct:relative", "").     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String path = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).     exchange.getOut().setBody("Hi! " + path). }
false;public;0;21;;@Override public void configure() throws Exception {     from(targetConsumerUri).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String path = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).             exchange.getOut().setBody("Hi! " + path).         }     }).     from(sourceUri).to(targetProducerUri).     from("direct:root").to(sourceProducerUri).to("mock:result").     from("direct:relative").to(sourceProducerUri + "/relative").to("mock:result"). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(targetConsumerUri).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String path = exchange.getIn().getHeader(Exchange.HTTP_URI, String.class).                     exchange.getOut().setBody("Hi! " + path).                 }             }).             from(sourceUri).to(targetProducerUri).             from("direct:root").to(sourceProducerUri).to("mock:result").             from("direct:relative").to(sourceProducerUri + "/relative").to("mock:result").         }     }. }
