commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testSyncAndSyncAtSameTimeWithHttp() throws Exception {     // START SNIPPET: e2     MockEndpoint mock = getMockEndpoint("mock:result").     // We expect the http job to complete before the name job     mock.expectedBodiesReceived("Bye World", "Claus").     // Send a sync request/reply message to the http endpoint     String response = template.requestBody("http://0.0.0.0:" + getPort() + "/myservice", "Hello World", String.class).     assertEquals("Bye World", response).     // Send a sync request/reply message to the direct endpoint     String name = template.requestBody("direct:name", "Give me a name", String.class).     assertEquals("Claus", name).     assertMockEndpointsSatisfied(). // END SNIPPET: e2 }
false;public;0;15;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // The mocks are here for unit test     // Some other service to return a name, this is invoked synhronously     from("direct:name").transform(constant("Claus")).to("mock:result").     // Simulate a slow http service (delaying 1 sec) we want to invoke async     fromF("jetty:http://0.0.0.0:%s/myservice", getPort()).delay(1000).transform(constant("Bye World")).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // The mocks are here for unit test             // Some other service to return a name, this is invoked synhronously             from("direct:name").transform(constant("Claus")).to("mock:result").             // Simulate a slow http service (delaying 1 sec) we want to invoke async             fromF("jetty:http://0.0.0.0:%s/myservice", getPort()).delay(1000).transform(constant("Bye World")).to("mock:result").         // END SNIPPET: e1         }     }. }
