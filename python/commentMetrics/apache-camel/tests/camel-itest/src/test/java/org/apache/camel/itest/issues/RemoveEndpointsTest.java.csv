commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testRemoveAllEndpoints() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:jms-queue").     mock.expectedMessageCount(1).     assertEquals(7, context.getEndpoints().size()).     template.sendBody("direct:foo", "Hello World").     assertMockEndpointsSatisfied().     Collection<Endpoint> list = context.removeEndpoints("*").     // all have been removed     assertEquals(7, list.size()).     assertEquals(0, context.getEndpoints().size()). }
false;protected;1;9;;@Override protected void bindToRegistry(Registry registry) throws Exception {     // add ActiveMQ with embedded broker     ConnectionFactory connectionFactory = CamelJmsTestHelper.createConnectionFactory().     JmsComponent amq = jmsComponentAutoAcknowledge(connectionFactory).     amq.setCamelContext(context).     registry.bind("jms", amq). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:foo").to("jms:queue:foo").     from("jms:queue:foo").to("mock:jms-queue").     from("jms:topic:bar").to("mock:jms-topic").     from("seda:mem-queue").to("mock:seda-queue"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").to("jms:queue:foo").             from("jms:queue:foo").to("mock:jms-queue").             from("jms:topic:bar").to("mock:jms-topic").             from("seda:mem-queue").to("mock:seda-queue").         }     }. }
