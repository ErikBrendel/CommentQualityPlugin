commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testJettyFailoverRoundRobin() throws Exception {     getMockEndpoint("mock:bad").expectedMessageCount(1).     getMockEndpoint("mock:bad2").expectedMessageCount(1).     getMockEndpoint("mock:good").expectedMessageCount(1).     getMockEndpoint("mock:good2").expectedMessageCount(0).     String reply = template.requestBody("direct:start", null, String.class).     assertEquals("Good", reply).     assertMockEndpointsSatisfied().     // reset mocks and send a message again to see that round robin     // continue where it should     resetMocks().     getMockEndpoint("mock:bad").expectedMessageCount(0).     getMockEndpoint("mock:bad2").expectedMessageCount(0).     getMockEndpoint("mock:good").expectedMessageCount(0).     getMockEndpoint("mock:good2").expectedMessageCount(1).     reply = template.requestBody("direct:start", null, String.class).     assertEquals("Also good", reply). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).     exchange.getIn().setBody("Something bad happened"). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 404).     exchange.getIn().setBody("Not found"). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Good"). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Also good"). }
false;public;0;47;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").loadBalance().failover(-1, false, true).to(bad, bad2, good, good2).     // END SNIPPET: e1     from(bad).to("mock:bad").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).             exchange.getIn().setBody("Something bad happened").         }     }).     from(bad2).to("mock:bad2").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 404).             exchange.getIn().setBody("Not found").         }     }).     from(good).to("mock:good").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Good").         }     }).     from(good2).to("mock:good2").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Also good").         }     }). }
false;protected;0;52;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").loadBalance().failover(-1, false, true).to(bad, bad2, good, good2).             // END SNIPPET: e1             from(bad).to("mock:bad").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 500).                     exchange.getIn().setBody("Something bad happened").                 }             }).             from(bad2).to("mock:bad2").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE, 404).                     exchange.getIn().setBody("Not found").                 }             }).             from(good).to("mock:good").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody("Good").                 }             }).             from(good2).to("mock:good2").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody("Also good").                 }             }).         }     }. }
