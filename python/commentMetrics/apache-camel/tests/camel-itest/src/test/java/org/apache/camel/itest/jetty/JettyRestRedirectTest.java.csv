commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testRedirectInvocation() throws Exception {     String response = template.requestBody("http4://localhost:" + port + "/metadata/profile/tag", "<hello>Camel</hello>", String.class).     assertEquals("It should support the redirect out of box.", "Mock profile", response). }
false;public;1;5;;@Override public void process(Exchange ex) throws Exception {     ex.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 303).     ex.getOut().setHeader("Location", "/metadata/profile/1"). }
false;public;0;15;;public void configure() {     restConfiguration().component("jetty").host("localhost").scheme("http").port(port).     rest("/metadata/profile").get("/{id}").to("direct:profileLookup").post("/tag").to("direct:tag").     from("direct:profileLookup").transform().constant("Mock profile").     from("direct:tag").log("${headers}").process(new Processor() {          @Override         public void process(Exchange ex) throws Exception {             ex.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 303).             ex.getOut().setHeader("Location", "/metadata/profile/1").         }     }).log("${headers}").transform().constant("Redirecting..."). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     port = AvailablePortFinder.getNextAvailable(8000).     return new RouteBuilder() {          public void configure() {             restConfiguration().component("jetty").host("localhost").scheme("http").port(port).             rest("/metadata/profile").get("/{id}").to("direct:profileLookup").post("/tag").to("direct:tag").             from("direct:profileLookup").transform().constant("Mock profile").             from("direct:tag").log("${headers}").process(new Processor() {                  @Override                 public void process(Exchange ex) throws Exception {                     ex.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 303).                     ex.getOut().setHeader("Location", "/metadata/profile/1").                 }             }).log("${headers}").transform().constant("Redirecting...").         }     }. }
