commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;6;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     Endpoint endpoint = new PerformanceTestEndpoint(uri, this).     setProperties(endpoint, parameters).     return endpoint. }
false;public,static;2;4;;public static int getHeaderValue(Exchange exchange, String header) {     Integer value = exchange.getContext().getTypeConverter().convertTo(Integer.class, exchange, exchange.getIn().getHeader(header)).     return value != null ? value : header.equals(HEADER_THREADS) ? DEFAULT_THREADS : header.equals(HEADER_ITERATIONS) ? DEFAULT_ITERATIONS : 0. }
false;public;1;10;;@Override public Consumer createConsumer(Processor processor) throws Exception {     synchronized (this) {         if (consumer != null && processor != consumer.getProcessor()) {             throw new Exception("PerformanceTestEndpoint doesn not support multiple consumers per Endpoint").         }         consumer = new PerformanceTestConsumer(this, processor).     }     return consumer. }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new PerformanceTestProducer(this). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public Consumer getConsumer() {     return consumer. }
false;public;0;10;;@Override public Exchange call() throws Exception {     Exchange exch = ExchangeHelper.createCopy(exchange, false).     try {         consumer.getProcessor().process(exch).     } catch (final Exception e) {         exch.setException(e).     }     return exch. }
false;public;1;33;;@Override public void process(final Exchange exchange) throws Exception {     final int count = getHeaderValue(exchange, HEADER_ITERATIONS).     final int threads = getHeaderValue(exchange, HEADER_THREADS).     PerformanceTestEndpoint endpoint = (PerformanceTestEndpoint) getEndpoint().     if (endpoint != null) {         final DefaultConsumer consumer = (DefaultConsumer) endpoint.getConsumer().         ExecutorService executor = exchange.getContext().getExecutorServiceManager().newFixedThreadPool(this, "perf", threads).         CompletionService<Exchange> tasks = new ExecutorCompletionService<>(executor).         // long it takes         for (int i = 0. i < count. i++) {             tasks.submit(new Callable<Exchange>() {                  @Override                 public Exchange call() throws Exception {                     Exchange exch = ExchangeHelper.createCopy(exchange, false).                     try {                         consumer.getProcessor().process(exch).                     } catch (final Exception e) {                         exch.setException(e).                     }                     return exch.                 }             }).         }         for (int i = 0. i < count. i++) {             // Future<Exchange> result = tasks.take().             // wait for all exchanges to complete             tasks.take().         }     } }
false;public;2;10;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     try {         this.process(exchange).     } catch (Exception e) {         exchange.setException(e).     }     callback.done(true).     return true. }
false;public;1;5;;@Override public CompletableFuture<Exchange> processAsync(Exchange exchange) {     // TODO Auto-generated method stub     return null. }
