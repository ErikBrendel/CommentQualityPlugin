commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testDurableSharedTopic() throws Exception {     final String expectedBody = "Hello World".     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Hello World").     MockEndpoint mock2 = getMockEndpoint("mock:result2").     mock2.expectedMessageCount(1).     mock2.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", expectedBody).     mock.assertIsSatisfied().     mock2.assertIsSatisfied(). }
false;public;0;13;;public void configure() {     from("direct:start").to(TEST_DESTINATION_NAME).     from(TEST_DESTINATION_NAME).to("log:test.log.1?showBody=true", "mock:result").     from(TEST_DESTINATION_NAME + "?subscriptionName=sharedTest&subscriptionShared=true&subscriptionDurable=true").to("log:test.log.2?showBody=true", "mock:result2").     from(TEST_DESTINATION_NAME + "?subscriptionName=sharedTest&subscriptionShared=true&subscriptionDurable=true").to("log:test.log.3?showBody=true", "mock:result2"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").to(TEST_DESTINATION_NAME).             from(TEST_DESTINATION_NAME).to("log:test.log.1?showBody=true", "mock:result").             from(TEST_DESTINATION_NAME + "?subscriptionName=sharedTest&subscriptionShared=true&subscriptionDurable=true").to("log:test.log.2?showBody=true", "mock:result2").             from(TEST_DESTINATION_NAME + "?subscriptionName=sharedTest&subscriptionShared=true&subscriptionDurable=true").to("log:test.log.3?showBody=true", "mock:result2").         }     }. }
