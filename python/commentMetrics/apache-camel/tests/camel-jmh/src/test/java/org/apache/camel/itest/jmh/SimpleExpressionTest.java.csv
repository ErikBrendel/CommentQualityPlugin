commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void launchBenchmark() throws Exception {     Options opt = new OptionsBuilder().include(this.getClass().getName() + ".*").mode(Mode.All).timeUnit(TimeUnit.MICROSECONDS).warmupTime(TimeValue.seconds(1)).warmupIterations(2).measurementTime(TimeValue.seconds(10)).measurementIterations(2).threads(2).forks(1).shouldFailOnError(true).shouldDoGC(true).build().     new Runner(opt).run(). }
false;public;0;13;;@Setup(Level.Trial) public void initialize() {     camel = new DefaultCamelContext().     try {         camel.start().         exchange = new DefaultExchange(camel).         exchange.getIn().setBody("World").         simple = camel.resolveLanguage("simple").     } catch (Exception e) {     // ignore     } }
false;public;0;8;;@TearDown(Level.Trial) public void close() {     try {         camel.stop().     } catch (Exception e) {     // ignore     } }
false;public;2;9;;@Benchmark @Measurement(batchSize = 1000) public void simpleExpression(BenchmarkState state, Blackhole bh) {     String out = state.simple.createExpression(state.expression).evaluate(state.exchange, String.class).     if (!out.equals("Hello World")) {         throw new IllegalArgumentException("Evaluation failed").     }     bh.consume(out). }
