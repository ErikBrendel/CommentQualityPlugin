commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void launchBenchmark() throws Exception {     Options opt = new OptionsBuilder().include(this.getClass().getName() + ".*").mode(Mode.SampleTime).timeUnit(TimeUnit.MILLISECONDS).warmupTime(TimeValue.seconds(1)).warmupIterations(2).measurementTime(TimeValue.seconds(5)).measurementIterations(5).threads(1).forks(1).shouldFailOnError(true).shouldDoGC(true).measurementBatchSize(1000000).build().     new Runner(opt).run(). }
false;public;0;6;;@Setup(Level.Trial) public void initialize() {     camelMap = new CaseInsensitiveMap().     cedarsoftMap = new com.cedarsoftware.util.CaseInsensitiveMap().     hashMap = new HashMap(). }
false;private;1;5;;private Map<String, Object> generateRandomMap(int size) {     return IntStream.range(0, size).boxed().collect(Collectors.toMap(i -> randomAlphabetic(10), i -> randomAlphabetic(10))). }
false;public;2;16;;@Benchmark public void camelMapSimpleCase(MapsBenchmarkState state, Blackhole bh) {     Map map = state.camelMap.     map.put("foo", "Hello World").     Object o1 = map.get("foo").     bh.consume(o1).     Object o2 = map.get("FOO").     bh.consume(o2).     map.put("BAR", "Bye World").     Object o3 = map.get("bar").     bh.consume(o3).     Object o4 = map.get("BAR").     bh.consume(o4). }
false;public;2;16;;@Benchmark public void cedarsoftMapSimpleCase(MapsBenchmarkState state, Blackhole bh) {     Map map = state.cedarsoftMap.     map.put("foo", "Hello World").     Object o1 = map.get("foo").     bh.consume(o1).     Object o2 = map.get("FOO").     bh.consume(o2).     map.put("BAR", "Bye World").     Object o3 = map.get("bar").     bh.consume(o3).     Object o4 = map.get("BAR").     bh.consume(o4). }
false;public;2;16;;@Benchmark public void hashMapSimpleCase(MapsBenchmarkState state, Blackhole bh) {     Map map = state.hashMap.     map.put("foo", "Hello World").     Object o1 = map.get("foo").     bh.consume(o1).     Object o2 = map.get("FOO").     bh.consume(o2).     map.put("BAR", "Bye World").     Object o3 = map.get("bar").     bh.consume(o3).     Object o4 = map.get("BAR").     bh.consume(o4). }
false;public;3;19;;@Benchmark public void camelMapComplexCase(MapsBenchmarkState mapsBenchmarkState, MapsSourceDataBenchmarkState sourceDataState, Blackhole blackhole) {     // step 1 - initialize map with existing elements     Map map = mapsBenchmarkState.camelMap.     // step 2 - add elements one by one     sourceDataState.map2.entrySet().forEach(entry -> blackhole.consume(map.put(entry.getKey(), entry.getValue()))).     // step 3 - remove elements one by one     sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.get(key))).     // step 4 - remove elements one by one     sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.remove(key))).     // step 5 - add couple of element at once     map.putAll(sourceDataState.map1).     blackhole.consume(map). }
false;public;3;19;;@Benchmark public void cedarsoftMapComplexCase(MapsBenchmarkState mapsBenchmarkState, MapsSourceDataBenchmarkState sourceDataState, Blackhole blackhole) {     // step 1 - initialize map with existing elements     Map map = mapsBenchmarkState.cedarsoftMap.     // step 2 - add elements one by one     sourceDataState.map2.entrySet().forEach(entry -> blackhole.consume(map.put(entry.getKey(), entry.getValue()))).     // step 3 - remove elements one by one     sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.get(key))).     // step 4 - remove elements one by one     sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.remove(key))).     // step 5 - add couple of element at once     map.putAll(sourceDataState.map1).     blackhole.consume(map). }
false;public;3;19;;@Benchmark public void hashMapComplexCase(MapsBenchmarkState mapsBenchmarkState, MapsSourceDataBenchmarkState sourceDataState, Blackhole blackhole) {     // step 1 - initialize map with existing elements     Map map = mapsBenchmarkState.hashMap.     // step 2 - add elements one by one     sourceDataState.map2.entrySet().forEach(entry -> blackhole.consume(map.put(entry.getKey(), entry.getValue()))).     // step 3 - remove elements one by one     sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.get(key))).     // step 4 - remove elements one by one     sourceDataState.map1.keySet().forEach(key -> blackhole.consume(map.remove(key))).     // step 5 - add couple of element at once     map.putAll(sourceDataState.map1).     blackhole.consume(map). }
