commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void launchBenchmark() throws Exception {     Options opt = new OptionsBuilder().include(this.getClass().getName() + ".*").mode(Mode.All).timeUnit(TimeUnit.MICROSECONDS).warmupTime(TimeValue.seconds(1)).warmupIterations(2).measurementTime(TimeValue.seconds(1)).measurementIterations(2).threads(2).forks(1).shouldFailOnError(true).shouldDoGC(true).build().     new Runner(opt).run(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("log:foo").to("log:bar").to("mock:result?retainFirst=0"). }
false;public;0;16;;@Setup(Level.Trial) public void initialize() {     camel = new DefaultCamelContext().     try {         camel.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:start").to("log:foo").to("log:bar").to("mock:result?retainFirst=0").             }         }).         camel.start().         producer = camel.createProducerTemplate().     } catch (Exception e) {     // ignore     } }
false;public;0;9;;@TearDown(Level.Trial) public void close() {     try {         producer.stop().         camel.stop().     } catch (Exception e) {     // ignore     } }
false;public;2;6;;@Benchmark @Measurement(batchSize = 1000) public void simpleMockTest(BenchmarkState state, Blackhole bh) {     ProducerTemplate template = state.producer.     template.sendBody("direct:start", "Hello World"). }
