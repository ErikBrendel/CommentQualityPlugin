commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void launchBenchmark() throws Exception {     Options opt = new OptionsBuilder().include(this.getClass().getName() + ".*").mode(Mode.All).timeUnit(TimeUnit.MICROSECONDS).warmupTime(TimeValue.seconds(1)).warmupIterations(2).measurementTime(TimeValue.seconds(1)).measurementIterations(2).threads(2).forks(1).shouldFailOnError(true).shouldDoGC(true).build().     new Runner(opt).run(). }
false;public;0;4;;@Setup(Level.Invocation) public void initialize() {     camel = new DefaultCamelContext(). }
false;public;0;8;;@TearDown(Level.Invocation) public void close() {     try {         camel.stop().     } catch (Exception e) {     // ignore     } }
false;public;2;17;;@Benchmark @Measurement(batchSize = 1000) public void load(BenchmarkState state, Blackhole bh) {     int size = 0.     try {         state.camel.start().         size = state.camel.getTypeConverterRegistry().size().         bh.consume(size).     } catch (Exception e) {     // ignore     }     if (size < 200) {         throw new IllegalArgumentException("Should have 200+ type converters loaded").     } }
false;public;2;18;;@Benchmark @Measurement(batchSize = 1000) public void notLoad(BenchmarkState state, Blackhole bh) {     int size = 0.     try {         state.camel.setLoadTypeConverters(false).         state.camel.start().         size = state.camel.getTypeConverterRegistry().size().         bh.consume(size).     } catch (Exception e) {     // ignore     }     if (size > 200) {         throw new IllegalArgumentException("Should not load additional type converters from classpath").     } }
