commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testValidateJsonComponent() throws Exception {     for (String name : catalog.findComponentNames()) {         String json = catalog.componentJSonSchema(name).         LOG.info("Validating {} component", name).         LOG.debug("with JSon: {}", json).         // validate we can parse the json         ObjectMapper mapper = new ObjectMapper().         JsonNode tree = mapper.readTree(json).         assertNotNull(tree).         assertTrue(name, tree.has("component")).         assertTrue(name, tree.has("componentProperties")).         assertTrue(name, tree.has("properties")).     } }
false;public;0;16;;@Test public void testValidateJsonDataFormats() throws Exception {     for (String name : catalog.findDataFormatNames()) {         String json = catalog.dataFormatJSonSchema(name).         LOG.info("Validating {} dataformat", name).         LOG.debug("with JSon: {}", json).         // validate we can parse the json         ObjectMapper mapper = new ObjectMapper().         JsonNode tree = mapper.readTree(json).         assertNotNull(tree).         assertTrue(name, tree.has("dataformat")).         assertTrue(name, tree.has("properties")).     } }
false;public;0;16;;@Test public void testValidateJsonLanguages() throws Exception {     for (String name : catalog.findLanguageNames()) {         String json = catalog.languageJSonSchema(name).         LOG.info("Validating {} language", name).         LOG.debug("with JSon: {}", json).         // validate we can parse the json         ObjectMapper mapper = new ObjectMapper().         JsonNode tree = mapper.readTree(json).         assertNotNull(tree).         assertTrue(name, tree.has("language")).         assertTrue(name, tree.has("properties")).     } }
false;public;0;16;;@Test public void testValidateJsonModels() throws Exception {     for (String name : catalog.findModelNames()) {         String json = catalog.modelJSonSchema(name).         LOG.info("Validating {} model", name).         LOG.debug("with JSon: {}", json).         // validate we can parse the json         ObjectMapper mapper = new ObjectMapper().         JsonNode tree = mapper.readTree(json).         assertNotNull(tree).         assertTrue(name, tree.has("model")).         assertTrue(name, tree.has("properties")).     } }
