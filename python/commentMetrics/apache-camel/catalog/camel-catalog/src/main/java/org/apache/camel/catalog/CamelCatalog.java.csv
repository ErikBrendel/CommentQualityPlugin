commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the {@link JSonSchemaResolver} used by this catalog.  *  * @return the resolver  */ ;/**  * Returns the {@link JSonSchemaResolver} used by this catalog.  *  * @return the resolver  */ JSonSchemaResolver getJSonSchemaResolver().
true;;1;1;/**  * To use a custom {@link JSonSchemaResolver} with this catalog.  *  * @param resolver  the custom resolver  */ ;/**  * To use a custom {@link JSonSchemaResolver} with this catalog.  *  * @param resolver  the custom resolver  */ void setJSonSchemaResolver(JSonSchemaResolver resolver).
true;;1;1;/**  * To plugin a custom {@link RuntimeProvider} that amends the catalog to only include information that is supported on the runtime.  */ ;/**  * To plugin a custom {@link RuntimeProvider} that amends the catalog to only include information that is supported on the runtime.  */ void setRuntimeProvider(RuntimeProvider provider).
true;;0;1;/**  * Gets the {@link RuntimeProvider} in use.  */ ;/**  * Gets the {@link RuntimeProvider} in use.  */ RuntimeProvider getRuntimeProvider().
true;;0;1;/**  * Enables caching of the resources which makes the catalog faster, but keeps data in memory during caching.  * <p/>  * The catalog does not cache by default.  */ ;/**  * Enables caching of the resources which makes the catalog faster, but keeps data in memory during caching.  * <p/>  * The catalog does not cache by default.  */ void enableCache().
true;;0;1;/**  * Whether caching has been enabled.  */ ;/**  * Whether caching has been enabled.  */ boolean isCaching().
true;;1;1;/**  * To plugin a custom {@link SuggestionStrategy} to provide suggestion for unknown options  */ ;/**  * To plugin a custom {@link SuggestionStrategy} to provide suggestion for unknown options  */ void setSuggestionStrategy(SuggestionStrategy suggestionStrategy).
true;;0;1;/**  * Gets the {@link SuggestionStrategy} in use  */ ;/**  * Gets the {@link SuggestionStrategy} in use  */ SuggestionStrategy getSuggestionStrategy().
true;;1;1;/**  * To plugin a custom {@link VersionManager} to load other versions of Camel the catalog should use.  */ ;/**  * To plugin a custom {@link VersionManager} to load other versions of Camel the catalog should use.  */ void setVersionManager(VersionManager versionManager).
true;;0;1;/**  * Gets the {@link VersionManager} in use  */ ;/**  * Gets the {@link VersionManager} in use  */ VersionManager getVersionManager().
true;;2;1;/**  * Adds a 3rd party component to this catalog.  *  * @param name      the component name  * @param className the fully qualified class name for the component class  */ ;/**  * Adds a 3rd party component to this catalog.  *  * @param name      the component name  * @param className the fully qualified class name for the component class  */ void addComponent(String name, String className).
true;;3;1;/**  * Adds a 3rd party component to this catalog.  *  * @param name       the component name  * @param className  the fully qualified class name for the component class  * @param jsonSchema the component JSon schema  */ ;/**  * Adds a 3rd party component to this catalog.  *  * @param name       the component name  * @param className  the fully qualified class name for the component class  * @param jsonSchema the component JSon schema  */ void addComponent(String name, String className, String jsonSchema).
true;;2;1;/**  * Adds a 3rd party data format to this catalog.  *  * @param name      the data format name  * @param className the fully qualified class name for the data format class  */ ;/**  * Adds a 3rd party data format to this catalog.  *  * @param name      the data format name  * @param className the fully qualified class name for the data format class  */ void addDataFormat(String name, String className).
true;;3;1;/**  * Adds a 3rd party data format to this catalog.  *  * @param name      the data format name  * @param className the fully qualified class name for the data format class  * @param jsonSchema the data format JSon schema  */ ;/**  * Adds a 3rd party data format to this catalog.  *  * @param name      the data format name  * @param className the fully qualified class name for the data format class  * @param jsonSchema the data format JSon schema  */ void addDataFormat(String name, String className, String jsonSchema).
true;;0;1;/**  * The version of this Camel Catalog  */ ;/**  * The version of this Camel Catalog  */ String getCatalogVersion().
true;;1;1;/**  * Attempt to load the Camel version to be used by the catalog.  * <p/>  * Loading the camel-catalog JAR of the given version of choice may require internet access  * to download the JAR from Maven central. You can pre download the JAR and install in a local  * Maven repository to avoid internet access for offline environments.  * <p/>  * When loading a new version the cache will be invalidated.  * <p/>  * <b>Important:</b> When loading a new runtime provider version, then its strongly advised to  * load the same/corresponding version first using {@link #loadVersion(String)}.  *  * @param version  the Camel version such as <tt>2.17.1</tt>  * @return <tt>true</tt> if the version was loaded, <tt>false</tt> if not.  */ ;/**  * Attempt to load the Camel version to be used by the catalog.  * <p/>  * Loading the camel-catalog JAR of the given version of choice may require internet access  * to download the JAR from Maven central. You can pre download the JAR and install in a local  * Maven repository to avoid internet access for offline environments.  * <p/>  * When loading a new version the cache will be invalidated.  * <p/>  * <b>Important:</b> When loading a new runtime provider version, then its strongly advised to  * load the same/corresponding version first using {@link #loadVersion(String)}.  *  * @param version  the Camel version such as <tt>2.17.1</tt>  * @return <tt>true</tt> if the version was loaded, <tt>false</tt> if not.  */ boolean loadVersion(String version).
true;;0;1;/**  * Gets the current loaded Camel version used by the catalog.  */ ;/**  * Gets the current loaded Camel version used by the catalog.  */ String getLoadedVersion().
true;;0;1;/**  * Gets the current loaded runtime provider version used by the catalog.  */ ;/**  * Gets the current loaded runtime provider version used by the catalog.  */ String getRuntimeProviderLoadedVersion().
true;;3;1;/**  * Attempt to load the runtime provider version to be used by the catalog.  * <p/>  * Loading the runtime provider JAR of the given version of choice may require internet access  * to download the JAR from Maven central. You can pre download the JAR and install in a local  * Maven repository to avoid internet access for offline environments.  * <p/>  * <b>Important:</b> When loading a new runtime provider version, then its strongly advised to  * load the same/corresponding version first using {@link #loadVersion(String)}.  *  * @param groupId  the runtime provider Maven groupId  * @param artifactId  the runtime provider Maven artifactId  * @param version  the runtime provider Maven version  * @return <tt>true</tt> if the version was loaded, <tt>false</tt> if not.  */ ;/**  * Attempt to load the runtime provider version to be used by the catalog.  * <p/>  * Loading the runtime provider JAR of the given version of choice may require internet access  * to download the JAR from Maven central. You can pre download the JAR and install in a local  * Maven repository to avoid internet access for offline environments.  * <p/>  * <b>Important:</b> When loading a new runtime provider version, then its strongly advised to  * load the same/corresponding version first using {@link #loadVersion(String)}.  *  * @param groupId  the runtime provider Maven groupId  * @param artifactId  the runtime provider Maven artifactId  * @param version  the runtime provider Maven version  * @return <tt>true</tt> if the version was loaded, <tt>false</tt> if not.  */ boolean loadRuntimeProviderVersion(String groupId, String artifactId, String version).
true;;0;1;/**  * Find all the component names from the Camel catalog  */ ;/**  * Find all the component names from the Camel catalog  */ List<String> findComponentNames().
true;;0;1;/**  * Find all the data format names from the Camel catalog  */ ;/**  * Find all the data format names from the Camel catalog  */ List<String> findDataFormatNames().
true;;0;1;/**  * Find all the language names from the Camel catalog  */ ;/**  * Find all the language names from the Camel catalog  */ List<String> findLanguageNames().
true;;0;1;/**  * Find all the model names from the Camel catalog  */ ;/**  * Find all the model names from the Camel catalog  */ List<String> findModelNames().
true;;0;1;/**  * Find all the other (miscellaneous) names from the Camel catalog  */ ;/**  * Find all the other (miscellaneous) names from the Camel catalog  */ List<String> findOtherNames().
true;;1;1;/**  * Find all the component names from the Camel catalog that matches the label  */ ;/**  * Find all the component names from the Camel catalog that matches the label  */ List<String> findComponentNames(String filter).
true;;1;1;/**  * Find all the data format names from the Camel catalog that matches the label  */ ;/**  * Find all the data format names from the Camel catalog that matches the label  */ List<String> findDataFormatNames(String filter).
true;;1;1;/**  * Find all the language names from the Camel catalog that matches the label  */ ;/**  * Find all the language names from the Camel catalog that matches the label  */ List<String> findLanguageNames(String filter).
true;;1;1;/**  * Find all the model names from the Camel catalog that matches the label  */ ;/**  * Find all the model names from the Camel catalog that matches the label  */ List<String> findModelNames(String filter).
true;;1;1;/**  * Find all the other (miscellaneous) names from the Camel catalog that matches the label  */ ;/**  * Find all the other (miscellaneous) names from the Camel catalog that matches the label  */ List<String> findOtherNames(String filter).
true;;1;1;/**  * Returns the component information as JSon format.  *  * @param name the component name  * @return component details in JSon  */ ;/**  * Returns the component information as JSon format.  *  * @param name the component name  * @return component details in JSon  */ String componentJSonSchema(String name).
true;;1;1;/**  * Returns the data format information as JSon format.  *  * @param name the data format name  * @return data format details in JSon  */ ;/**  * Returns the data format information as JSon format.  *  * @param name the data format name  * @return data format details in JSon  */ String dataFormatJSonSchema(String name).
true;;1;1;/**  * Returns the language information as JSon format.  *  * @param name the language name  * @return language details in JSon  */ ;/**  * Returns the language information as JSon format.  *  * @param name the language name  * @return language details in JSon  */ String languageJSonSchema(String name).
true;;1;1;/**  * Returns the other (miscellaneous) information as JSon format.  *  * @param name the other (miscellaneous) name  * @return other (miscellaneous) details in JSon  */ ;/**  * Returns the other (miscellaneous) information as JSon format.  *  * @param name the other (miscellaneous) name  * @return other (miscellaneous) details in JSon  */ String otherJSonSchema(String name).
true;;1;1;/**  * Returns the model information as JSon format.  *  * @param name the model name  * @return model details in JSon  */ ;/**  * Returns the model information as JSon format.  *  * @param name the model name  * @return model details in JSon  */ String modelJSonSchema(String name).
true;;1;1;/**  * Returns the component documentation as Ascii doc format.  *  * @param name the component name  * @return component documentation in ascii doc format.  */ ;/**  * Returns the component documentation as Ascii doc format.  *  * @param name the component name  * @return component documentation in ascii doc format.  */ String componentAsciiDoc(String name).
true;;1;1;/**  * Returns the component documentation as HTML format.  *  * @param name the component name  * @return component documentation in html format.  */ ;/**  * Returns the component documentation as HTML format.  *  * @param name the component name  * @return component documentation in html format.  */ String componentHtmlDoc(String name).
true;;1;1;/**  * Returns the data format documentation as Ascii doc format.  *  * @param name the data format name  * @return data format documentation in ascii doc format.  */ ;/**  * Returns the data format documentation as Ascii doc format.  *  * @param name the data format name  * @return data format documentation in ascii doc format.  */ String dataFormatAsciiDoc(String name).
true;;1;1;/**  * Returns the data format documentation as HTML format.  *  * @param name the data format name  * @return data format documentation in HTML format.  */ ;/**  * Returns the data format documentation as HTML format.  *  * @param name the data format name  * @return data format documentation in HTML format.  */ String dataFormatHtmlDoc(String name).
true;;1;1;/**  * Returns the language documentation as Ascii doc format.  *  * @param name the language name  * @return language documentation in ascii doc format.  */ ;/**  * Returns the language documentation as Ascii doc format.  *  * @param name the language name  * @return language documentation in ascii doc format.  */ String languageAsciiDoc(String name).
true;;1;1;/**  * Returns the language documentation as HTML format.  *  * @param name the language name  * @return language documentation in HTML format.  */ ;/**  * Returns the language documentation as HTML format.  *  * @param name the language name  * @return language documentation in HTML format.  */ String languageHtmlDoc(String name).
true;;1;1;/**  * Returns the other (miscellaneous) documentation as Ascii doc format.  *  * @param name the other (miscellaneous) name  * @return other (miscellaneous) documentation in ascii doc format.  */ ;/**  * Returns the other (miscellaneous) documentation as Ascii doc format.  *  * @param name the other (miscellaneous) name  * @return other (miscellaneous) documentation in ascii doc format.  */ String otherAsciiDoc(String name).
true;;1;1;/**  * Returns the other (miscellaneous) documentation as HTML format.  *  * @param name the other (miscellaneous) name  * @return other (miscellaneous) documentation in HTML format.  */ ;/**  * Returns the other (miscellaneous) documentation as HTML format.  *  * @param name the other (miscellaneous) name  * @return other (miscellaneous) documentation in HTML format.  */ String otherHtmlDoc(String name).
true;;0;1;/**  * Find all the unique label names all the components are using.  *  * @return a set of all the labels.  */ ;/**  * Find all the unique label names all the components are using.  *  * @return a set of all the labels.  */ Set<String> findComponentLabels().
true;;0;1;/**  * Find all the unique label names all the data formats are using.  *  * @return a set of all the labels.  */ ;/**  * Find all the unique label names all the data formats are using.  *  * @return a set of all the labels.  */ Set<String> findDataFormatLabels().
true;;0;1;/**  * Find all the unique label names all the languages are using.  *  * @return a set of all the labels.  */ ;/**  * Find all the unique label names all the languages are using.  *  * @return a set of all the labels.  */ Set<String> findLanguageLabels().
true;;0;1;/**  * Find all the unique label names all the models are using.  *  * @return a set of all the labels.  */ ;/**  * Find all the unique label names all the models are using.  *  * @return a set of all the labels.  */ Set<String> findModelLabels().
true;;0;1;/**  * Find all the unique label names all the other (miscellaneous) are using.  *  * @return a set of all the labels.  */ ;/**  * Find all the unique label names all the other (miscellaneous) are using.  *  * @return a set of all the labels.  */ Set<String> findOtherLabels().
true;;0;1;/**  * Returns the Apache Camel Maven Archetype catalog in XML format.  *  * @return the catalog in XML  */ ;/**  * Returns the Apache Camel Maven Archetype catalog in XML format.  *  * @return the catalog in XML  */ String archetypeCatalogAsXml().
true;;0;1;/**  * Returns the Camel Spring XML schema  *  * @return the spring XML schema  */ ;/**  * Returns the Camel Spring XML schema  *  * @return the spring XML schema  */ String springSchemaAsXml().
true;;0;1;/**  * Returns the Camel Blueprint XML schema  *  * @return the blueprint XML schema  */ ;/**  * Returns the Camel Blueprint XML schema  *  * @return the blueprint XML schema  */ String blueprintSchemaAsXml().
true;;1;1;/**  * Parses the endpoint uri and constructs a key/value properties of each option  *  * @param uri  the endpoint uri  * @return properties as key value pairs of each endpoint option  */ ;/**  * Parses the endpoint uri and constructs a key/value properties of each option  *  * @param uri  the endpoint uri  * @return properties as key value pairs of each endpoint option  */ Map<String, String> endpointProperties(String uri) throws URISyntaxException.
true;;1;1;/**  * Parses the endpoint uri and constructs a key/value properties of only the lenient properties (eg custom options)  * <p/>  * For example using the HTTP components to provide query parameters in the endpoint uri.  *  * @param uri  the endpoint uri  * @return properties as key value pairs of each lenient properties  */ ;/**  * Parses the endpoint uri and constructs a key/value properties of only the lenient properties (eg custom options)  * <p/>  * For example using the HTTP components to provide query parameters in the endpoint uri.  *  * @param uri  the endpoint uri  * @return properties as key value pairs of each lenient properties  */ Map<String, String> endpointLenientProperties(String uri) throws URISyntaxException.
true;;1;1;/**  * Validates the pattern whether its a valid time pattern.  *  * @param pattern  the pattern such as 5000, 5s, 5sec, 4min, 4m30s, 1h, etc.  * @return <tt>true</tt> if valid, <tt>false</tt> if invalid  */ ;/**  * Validates the pattern whether its a valid time pattern.  *  * @param pattern  the pattern such as 5000, 5s, 5sec, 4min, 4m30s, 1h, etc.  * @return <tt>true</tt> if valid, <tt>false</tt> if invalid  */ boolean validateTimePattern(String pattern).
true;;1;1;/**  * Parses and validates the endpoint uri and constructs a key/value properties of each option.  *  * @param uri  the endpoint uri  * @return validation result  */ ;/**  * Parses and validates the endpoint uri and constructs a key/value properties of each option.  *  * @param uri  the endpoint uri  * @return validation result  */ EndpointValidationResult validateEndpointProperties(String uri).
true;;2;1;/**  * Parses and validates the endpoint uri and constructs a key/value properties of each option.  * <p/>  * The option ignoreLenientProperties can be used to ignore components that uses lenient properties.  * When this is true, then the uri validation is stricter but would fail on properties that are not part of the component  * but in the uri because of using lenient properties.  * For example using the HTTP components to provide query parameters in the endpoint uri.  *  * @param uri  the endpoint uri  * @param ignoreLenientProperties  whether to ignore components that uses lenient properties.  * @return validation result  */ ;/**  * Parses and validates the endpoint uri and constructs a key/value properties of each option.  * <p/>  * The option ignoreLenientProperties can be used to ignore components that uses lenient properties.  * When this is true, then the uri validation is stricter but would fail on properties that are not part of the component  * but in the uri because of using lenient properties.  * For example using the HTTP components to provide query parameters in the endpoint uri.  *  * @param uri  the endpoint uri  * @param ignoreLenientProperties  whether to ignore components that uses lenient properties.  * @return validation result  */ EndpointValidationResult validateEndpointProperties(String uri, boolean ignoreLenientProperties).
true;;4;1;/**  * Parses and validates the endpoint uri and constructs a key/value properties of each option.  * <p/>  * The option ignoreLenientProperties can be used to ignore components that uses lenient properties.  * When this is true, then the uri validation is stricter but would fail on properties that are not part of the component  * but in the uri because of using lenient properties.  * For example using the HTTP components to provide query parameters in the endpoint uri.  *  * @param uri  the endpoint uri  * @param ignoreLenientProperties  whether to ignore components that uses lenient properties.  * @param consumerOnly whether the endpoint is only used as a consumer  * @param producerOnly whether the endpoint is only used as a producer  * @return validation result  */ ;/**  * Parses and validates the endpoint uri and constructs a key/value properties of each option.  * <p/>  * The option ignoreLenientProperties can be used to ignore components that uses lenient properties.  * When this is true, then the uri validation is stricter but would fail on properties that are not part of the component  * but in the uri because of using lenient properties.  * For example using the HTTP components to provide query parameters in the endpoint uri.  *  * @param uri  the endpoint uri  * @param ignoreLenientProperties  whether to ignore components that uses lenient properties.  * @param consumerOnly whether the endpoint is only used as a consumer  * @param producerOnly whether the endpoint is only used as a producer  * @return validation result  */ EndpointValidationResult validateEndpointProperties(String uri, boolean ignoreLenientProperties, boolean consumerOnly, boolean producerOnly).
true;;3;1;/**  * Parses and validates the language as a predicate  * <p/>  * <b>Important:</b> This requires having <tt>camel-core</tt> and the language dependencies on the classpath  *  * @param classLoader a custom classloader to use for loading the language from the classpath, or <tt>null</tt> for using default classloader  * @param language the name of the language  * @param text  the predicate text  * @return validation result  */ ;/**  * Parses and validates the language as a predicate  * <p/>  * <b>Important:</b> This requires having <tt>camel-core</tt> and the language dependencies on the classpath  *  * @param classLoader a custom classloader to use for loading the language from the classpath, or <tt>null</tt> for using default classloader  * @param language the name of the language  * @param text  the predicate text  * @return validation result  */ LanguageValidationResult validateLanguagePredicate(ClassLoader classLoader, String language, String text).
true;;3;1;/**  * Parses and validates the language as an expression  * <p/>  * <b>Important:</b> This requires having <tt>camel-core</tt> and the language dependencies on the classpath  *  * @param classLoader a custom classloader to use for loading the language from the classpath, or <tt>null</tt> for using default classloader  * @param language the name of the language  * @param text  the expression text  * @return validation result  */ ;/**  * Parses and validates the language as an expression  * <p/>  * <b>Important:</b> This requires having <tt>camel-core</tt> and the language dependencies on the classpath  *  * @param classLoader a custom classloader to use for loading the language from the classpath, or <tt>null</tt> for using default classloader  * @param language the name of the language  * @param text  the expression text  * @return validation result  */ LanguageValidationResult validateLanguageExpression(ClassLoader classLoader, String language, String text).
true;;1;1;/**  * Returns the component name from the given endpoint uri  *  * @param uri  the endpoint uri  * @return the component name (aka scheme), or <tt>null</tt> if not possible to determine  */ ;/**  * Returns the component name from the given endpoint uri  *  * @param uri  the endpoint uri  * @return the component name (aka scheme), or <tt>null</tt> if not possible to determine  */ String endpointComponentName(String uri).
true;;3;1;/**  * Creates an endpoint uri in Java style from the information from the properties  *  * @param scheme the endpoint schema  * @param properties the properties as key value pairs  * @param encode whether to URL encode the returned uri or not  * @return the constructed endpoint uri  * @throws java.net.URISyntaxException is thrown if there is encoding error  */ ;/**  * Creates an endpoint uri in Java style from the information from the properties  *  * @param scheme the endpoint schema  * @param properties the properties as key value pairs  * @param encode whether to URL encode the returned uri or not  * @return the constructed endpoint uri  * @throws java.net.URISyntaxException is thrown if there is encoding error  */ String asEndpointUri(String scheme, Map<String, String> properties, boolean encode) throws URISyntaxException.
true;;3;1;/**  * Creates an endpoint uri in XML style from the information from the properties  *  * @param scheme the endpoint schema  * @param properties the properties as key value pairs  * @param encode whether to URL encode the returned uri or not  * @return the constructed endpoint uri  * @throws java.net.URISyntaxException is thrown if there is encoding error  */ ;/**  * Creates an endpoint uri in XML style from the information from the properties  *  * @param scheme the endpoint schema  * @param properties the properties as key value pairs  * @param encode whether to URL encode the returned uri or not  * @return the constructed endpoint uri  * @throws java.net.URISyntaxException is thrown if there is encoding error  */ String asEndpointUriXml(String scheme, Map<String, String> properties, boolean encode) throws URISyntaxException.
true;;0;1;/**  * Lists all the components summary details in JSon  */ ;/**  * Lists all the components summary details in JSon  */ String listComponentsAsJson().
true;;0;1;/**  * Lists all the data formats summary details in JSon  */ ;/**  * Lists all the data formats summary details in JSon  */ String listDataFormatsAsJson().
true;;0;1;/**  * Lists all the languages summary details in JSon  */ ;/**  * Lists all the languages summary details in JSon  */ String listLanguagesAsJson().
true;;0;1;/**  * Lists all the models (EIPs) summary details in JSon  */ ;/**  * Lists all the models (EIPs) summary details in JSon  */ String listModelsAsJson().
true;;0;1;/**  * Lists all the others (miscellaneous) summary details in JSon  */ ;/**  * Lists all the others (miscellaneous) summary details in JSon  */ String listOthersAsJson().
true;;0;1;/**  * Reports a summary what the catalog contains in JSon  */ ;/**  * Reports a summary what the catalog contains in JSon  */ String summaryAsJson().
