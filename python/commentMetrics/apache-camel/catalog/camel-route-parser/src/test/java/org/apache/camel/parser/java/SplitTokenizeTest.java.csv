commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testSplitTokenizerA() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("Claus", "James", "Willem").     template.sendBody("direct:a", "Claus,James,Willem").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testSplitTokenizerB() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("Claus", "James", "Willem").     template.sendBodyAndHeader("direct:b", "Hello World", "myHeader", "Claus,James,Willem").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testSplitTokenizerC() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("Claus", "James", "Willem").     template.sendBody("direct:c", "Claus James Willem").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testSplitTokenizerD() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("[Claus]", "[James]", "[Willem]").     template.sendBody("direct:d", "[Claus][James][Willem]").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testSplitTokenizerE() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("<person>Claus</person>", "<person>James</person>", "<person>Willem</person>").     String xml = "<persons><person>Claus</person><person>James</person><person>Willem</person></persons>".     template.sendBody("direct:e", xml).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testSplitTokenizerEWithSlash() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     String xml = "<persons><person attr='/' /></persons>".     mock.expectedBodiesReceived("<person attr='/' />").     template.sendBody("direct:e", xml).     mock.assertIsSatisfied().     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testSplitTokenizerF() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("<person name=\"Claus\"/>", "<person>James</person>", "<person>Willem</person>").     String xml = "<persons><person/><person name=\"Claus\"/><person>James</person><person>Willem</person></persons>".     template.sendBody("direct:f", xml).     assertMockEndpointsSatisfied(). }
false;public;0;31;;@Override public void configure() throws Exception {     from("direct:a").split().tokenize(",").to("mock:split").     from("direct:b").split().tokenize(",", "myHeader").to("mock:split").     from("direct:c").split().tokenize("(\\W+)\\s*", null, true).to("mock:split").     from("direct:d").split().tokenizePair("[", "]", true).to("mock:split").     from("direct:e").split().tokenizeXML("person").to("mock:split").     from("direct:f").split().xpath("//person").filter().simple("${body}").to("mock:split"). }
false;protected;0;36;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").split().tokenize(",").to("mock:split").             from("direct:b").split().tokenize(",", "myHeader").to("mock:split").             from("direct:c").split().tokenize("(\\W+)\\s*", null, true).to("mock:split").             from("direct:d").split().tokenizePair("[", "]", true).to("mock:split").             from("direct:e").split().tokenizeXML("person").to("mock:split").             from("direct:f").split().xpath("//person").filter().simple("${body}").to("mock:split").         }     }. }
