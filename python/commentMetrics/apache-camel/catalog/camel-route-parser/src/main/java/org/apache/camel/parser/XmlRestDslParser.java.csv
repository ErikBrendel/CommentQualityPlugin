commented;modifiers;parameterAmount;loc;comment;code
true;public,static;3;15;/**  * Parses the XML file and build a rest configuration model of the discovered rest configurations in the XML source file.  *  * @param xml                     the xml file as input stream  * @param baseDir                 the base of the source code  * @param fullyQualifiedFileName  the fully qualified source code file name  * @return a list of rest configurations (often there is only one)  */ ;/**  * Parses the XML file and build a rest configuration model of the discovered rest configurations in the XML source file.  *  * @param xml                     the xml file as input stream  * @param baseDir                 the base of the source code  * @param fullyQualifiedFileName  the fully qualified source code file name  * @return a list of rest configurations (often there is only one)  */ public static List<RestConfigurationDetails> parseRestConfiguration(InputStream xml, String baseDir, String fullyQualifiedFileName) {     // try parse it as dom     Document dom = null.     try {         dom = XmlLineNumberParser.parseXml(xml).     } catch (Exception e) {     // ignore as the xml file may not be valid at this point     }     if (dom != null) {         CamelXmlRestDslParserHelper parser = new CamelXmlRestDslParserHelper().         return parser.parseRestConfiguration(dom, baseDir, fullyQualifiedFileName).     }     return Collections.EMPTY_LIST. }
true;public,static;3;16;/**  * Parses the java source class and build a rest service model of the discovered rest services in the java source class.  *  * @param xml                     the xml file as input stream  * @param baseDir                 the base of the source code  * @param fullyQualifiedFileName  the fully qualified source code file name  * @return a list of rest services  */ ;/**  * Parses the java source class and build a rest service model of the discovered rest services in the java source class.  *  * @param xml                     the xml file as input stream  * @param baseDir                 the base of the source code  * @param fullyQualifiedFileName  the fully qualified source code file name  * @return a list of rest services  */ public static List<RestServiceDetails> parseRestService(InputStream xml, String baseDir, String fullyQualifiedFileName) {     // try parse it as dom     Document dom = null.     try {         dom = XmlLineNumberParser.parseXml(xml).     } catch (Exception e) {     // ignore as the xml file may not be valid at this point     }     if (dom != null) {         CamelXmlRestDslParserHelper parser = new CamelXmlRestDslParserHelper().         return parser.parseRestService(dom, baseDir, fullyQualifiedFileName).     }     return Collections.EMPTY_LIST. }
