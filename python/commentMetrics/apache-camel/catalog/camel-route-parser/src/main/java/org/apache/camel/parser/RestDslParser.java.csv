commented;modifiers;parameterAmount;loc;comment;code
true;public,static;4;27;/**  * Parses the java source class and build a rest configuration model of the discovered rest configurations in the java source class.  *  * @param clazz                   the java source class  * @param baseDir                 the base of the source code  * @param fullyQualifiedFileName  the fully qualified source code file name  * @return a list of rest configurations (often there is only one)  */ ;/**  * Parses the java source class and build a rest configuration model of the discovered rest configurations in the java source class.  *  * @param clazz                   the java source class  * @param baseDir                 the base of the source code  * @param fullyQualifiedFileName  the fully qualified source code file name  * @return a list of rest configurations (often there is only one)  */ public static List<RestConfigurationDetails> parseRestConfiguration(JavaClassSource clazz, String baseDir, String fullyQualifiedFileName, boolean includeInlinedRouteBuilders) {     List<MethodSource<JavaClassSource>> methods = new ArrayList<>().     MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz).     if (method != null) {         methods.add(method).     }     if (includeInlinedRouteBuilders) {         List<MethodSource<JavaClassSource>> inlinedMethods = CamelJavaParserHelper.findInlinedConfigureMethods(clazz).         if (!inlinedMethods.isEmpty()) {             methods.addAll(inlinedMethods).         }     }     CamelJavaRestDslParserHelper parser = new CamelJavaRestDslParserHelper().     List<RestConfigurationDetails> list = new ArrayList<>().     for (MethodSource<JavaClassSource> configureMethod : methods) {         // there may be multiple route builder configure methods         List<RestConfigurationDetails> details = parser.parseRestConfiguration(clazz, baseDir, fullyQualifiedFileName, configureMethod).         list.addAll(details).     }     // we end up parsing bottom->up so reverse list     Collections.reverse(list).     return list. }
true;public,static;4;27;/**  * Parses the java source class and build a rest service model of the discovered rest services in the java source class.  *  * @param clazz                   the java source class  * @param baseDir                 the base of the source code  * @param fullyQualifiedFileName  the fully qualified source code file name  * @return a list of rest services  */ ;/**  * Parses the java source class and build a rest service model of the discovered rest services in the java source class.  *  * @param clazz                   the java source class  * @param baseDir                 the base of the source code  * @param fullyQualifiedFileName  the fully qualified source code file name  * @return a list of rest services  */ public static List<RestServiceDetails> parseRestService(JavaClassSource clazz, String baseDir, String fullyQualifiedFileName, boolean includeInlinedRouteBuilders) {     List<MethodSource<JavaClassSource>> methods = new ArrayList<>().     MethodSource<JavaClassSource> method = CamelJavaParserHelper.findConfigureMethod(clazz).     if (method != null) {         methods.add(method).     }     if (includeInlinedRouteBuilders) {         List<MethodSource<JavaClassSource>> inlinedMethods = CamelJavaParserHelper.findInlinedConfigureMethods(clazz).         if (!inlinedMethods.isEmpty()) {             methods.addAll(inlinedMethods).         }     }     CamelJavaRestDslParserHelper parser = new CamelJavaRestDslParserHelper().     List<RestServiceDetails> list = new ArrayList<>().     for (MethodSource<JavaClassSource> configureMethod : methods) {         // there may be multiple route builder configure methods         List<RestServiceDetails> details = parser.parseRestService(clazz, baseDir, fullyQualifiedFileName, configureMethod).         list.addAll(details).     }     // we end up parsing bottom->up so reverse list     Collections.reverse(list).     return list. }
