commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Configures the directory for the download cache.  * <p/>  * The default folder is <tt>USER_HOME/.groovy/grape</tt>  *  * @param directory the directory.  */ ;/**  * Configures the directory for the download cache.  * <p/>  * The default folder is <tt>USER_HOME/.groovy/grape</tt>  *  * @param directory the directory.  */ public void setCacheDirectory(String directory) {     this.cacheDirectory = directory. }
true;public;1;3;/**  * Sets whether to log errors and warnings to System.out.  * By default nothing is logged.  */ ;/**  * Sets whether to log errors and warnings to System.out.  * By default nothing is logged.  */ public void setLog(boolean log) {     this.log = log. }
true;public;1;3;/**  * Sets the timeout in millis (http.socket.timeout) when downloading via http/https protocols.  * <p/>  * The default value is 10000  */ ;/**  * Sets the timeout in millis (http.socket.timeout) when downloading via http/https protocols.  * <p/>  * The default value is 10000  */ public void setHttpClientTimeout(int timeout) {     httpClient.setTimeout(timeout). }
true;public;2;6;/**  * To add a 3rd party Maven repository.  *  * @param name the repository name  * @param url  the repository url  */ ;/**  * To add a 3rd party Maven repository.  *  * @param name the repository name  * @param url  the repository url  */ public void addMavenRepository(String name, String url) {     Map<String, Object> repo = new HashMap<>().     repo.put("name", name).     repo.put("root", url).     Grape.addResolver(repo). }
false;public;0;4;;@Override public String getLoadedVersion() {     return version. }
false;public;1;28;;@Override public boolean loadVersion(String version) {     try {         URLHandlerRegistry.setDefault(httpClient).         if (cacheDirectory != null) {             System.setProperty("grape.root", cacheDirectory).         }         Grape.setEnableAutoDownload(true).         Map<String, Object> param = new HashMap<>().         param.put("classLoader", classLoader).         param.put("group", "org.apache.camel").         param.put("module", "camel-catalog").         param.put("version", version).         Grape.grab(param).         this.version = version.         return true.     } catch (Exception e) {         if (log) {             System.out.print("WARN: Cannot load version " + version + " due " + e.getMessage()).         }         return false.     } }
false;public;0;4;;@Override public String getRuntimeProviderLoadedVersion() {     return runtimeProviderVersion. }
false;public;3;24;;@Override public boolean loadRuntimeProviderVersion(String groupId, String artifactId, String version) {     try {         URLHandlerRegistry.setDefault(httpClient).         Grape.setEnableAutoDownload(true).         Map<String, Object> param = new HashMap<>().         param.put("classLoader", classLoader).         param.put("group", groupId).         param.put("module", artifactId).         param.put("version", version).         Grape.grab(param).         this.runtimeProviderVersion = version.         return true.     } catch (Exception e) {         if (log) {             System.out.print("WARN: Cannot load runtime provider version " + version + " due " + e.getMessage()).         }         return false.     } }
false;public;1;16;;@Override public InputStream getResourceAsStream(String name) {     InputStream is = null.     if (runtimeProviderVersion != null) {         is = doGetResourceAsStream(name, runtimeProviderVersion).     }     if (is == null && version != null) {         is = doGetResourceAsStream(name, version).     }     if (is == null) {         is = MavenVersionManager.class.getClassLoader().getResourceAsStream(name).     }     return is. }
false;private;2;26;;private InputStream doGetResourceAsStream(String name, String version) {     if (version == null) {         return null.     }     try {         URL found = null.         Enumeration<URL> urls = classLoader.getResources(name).         while (urls.hasMoreElements()) {             URL url = urls.nextElement().             if (url.getPath().contains(version)) {                 found = url.                 break.             }         }         if (found != null) {             return found.openStream().         }     } catch (IOException e) {         if (log) {             System.out.print("WARN: Cannot open resource " + name + " and version " + version + " due " + e.getMessage()).         }     }     return null. }
false;public;0;6;;@Override public void close() throws IOException {     // the http client uses this MultiThreadedHttpConnectionManager for handling http connections     // and we should ensure its shutdown to not leak connections/threads     MultiThreadedHttpConnectionManager.shutdownAll(). }
