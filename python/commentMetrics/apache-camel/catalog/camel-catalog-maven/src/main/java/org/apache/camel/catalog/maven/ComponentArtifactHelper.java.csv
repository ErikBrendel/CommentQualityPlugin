commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;15;;public static Properties loadComponentProperties(boolean log, ClassLoader classLoader) {     Properties answer = new Properties().     try {         // load the component files using the recommended way by a component.properties file         InputStream is = classLoader.getResourceAsStream("META-INF/services/org/apache/camel/component.properties").         if (is != null) {             answer.load(is).         }     } catch (Throwable e) {         if (log) {             System.out.println("WARN: Error loading META-INF/services/org/apache/camel/component.properties file due " + e.getMessage()).         }     }     return answer. }
false;public,static;3;16;;public static String extractComponentJavaType(boolean log, ClassLoader classLoader, String scheme) {     try {         InputStream is = classLoader.getResourceAsStream("META-INF/services/org/apache/camel/component/" + scheme).         if (is != null) {             Properties props = new Properties().             props.load(is).             return (String) props.get("class").         }     } catch (Throwable e) {         if (log) {             System.out.println("WARN: Error loading META-INF/services/org/apache/camel/component/" + scheme + " file due " + e.getMessage()).         }     }     return null. }
false;public,static;3;27;;public static String loadComponentJSonSchema(boolean log, ClassLoader classLoader, String scheme) {     String answer = null.     String path = null.     String javaType = extractComponentJavaType(log, classLoader, scheme).     if (javaType != null) {         int pos = javaType.lastIndexOf(".").         path = javaType.substring(0, pos).         path = path.replace('.', '/').         path = path + "/" + scheme + ".json".     }     if (path != null) {         try {             InputStream is = classLoader.getResourceAsStream(path).             if (is != null) {                 answer = loadText(is).             }         } catch (Throwable e) {             if (log) {                 System.out.println("WARN: Error loading " + path + " file due " + e.getMessage()).             }         }     }     return answer. }
