commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Sets whether to log errors and warnings to System.out.  * By default nothing is logged.  */ ;/**  * Sets whether to log errors and warnings to System.out.  * By default nothing is logged.  */ public void setLog(boolean log) {     this.log = log. }
false;public;1;4;;@Override public void setCacheDirectory(String directory) {     this.cacheDirectory = directory. }
false;public;2;7;;@Override public void addMavenRepository(String name, String url) {     Map<String, Object> repo = new HashMap<>().     repo.put("name", name).     repo.put("root", url).     Grape.addResolver(repo). }
false;public;4;45;;@Override public Set<String> addArtifactToCatalog(CamelCatalog camelCatalog, String groupId, String artifactId, String version) {     final Set<String> names = new LinkedHashSet<>().     try {         if (cacheDirectory != null) {             if (log) {                 System.out.println("DEBUG: Using cache directory: " + cacheDirectory).             }             System.setProperty("grape.root", cacheDirectory).         }         Grape.setEnableAutoDownload(true).         try (final GroovyClassLoader classLoader = new GroovyClassLoader()) {             Map<String, Object> param = new HashMap<>().             param.put("classLoader", classLoader).             param.put("group", groupId).             param.put("module", artifactId).             param.put("version", version).             // no need to download transitive dependencies as we only need to check the component itself             param.put("validate", false).             param.put("transitive", false).             if (log) {                 System.out.println("Downloading " + groupId + ":" + artifactId + ":" + version).             }             Grape.grab(param).             // the classloader can load content from the downloaded JAR             if (camelCatalog != null) {                 scanCamelComponents(camelCatalog, classLoader, names).             }         }     } catch (Exception e) {         if (log) {             System.out.println("WARN: Error during add components from artifact " + groupId + ":" + artifactId + ":" + version + " due " + e.getMessage()).         }     }     return names. }
false;protected;3;26;;protected void scanCamelComponents(CamelCatalog camelCatalog, ClassLoader classLoader, Set<String> names) {     // is there any custom Camel components in this library?     Properties properties = loadComponentProperties(log, classLoader).     if (properties != null) {         String components = (String) properties.get("components").         if (components != null) {             String[] part = components.split("\\s").             for (String scheme : part) {                 if (!camelCatalog.findComponentNames().contains(scheme)) {                     // find the class name                     String javaType = extractComponentJavaType(log, classLoader, scheme).                     if (javaType != null) {                         String json = loadComponentJSonSchema(log, classLoader, scheme).                         if (json != null) {                             if (log) {                                 System.out.println("Adding component: " + scheme).                             }                             camelCatalog.addComponent(scheme, javaType, json).                             names.add(scheme).                         }                     }                 }             }         }     } }
