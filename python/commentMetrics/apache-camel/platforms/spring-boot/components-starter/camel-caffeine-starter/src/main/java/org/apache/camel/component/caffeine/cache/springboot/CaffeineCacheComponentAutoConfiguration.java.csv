commented;modifiers;parameterAmount;loc;comment;code
false;public;0;52;;@Lazy @Bean(name = "caffeine-cache-component") @ConditionalOnMissingBean(CaffeineCacheComponent.class) public CaffeineCacheComponent configureCaffeineCacheComponent() throws Exception {     CaffeineCacheComponent component = new CaffeineCacheComponent().     component.setCamelContext(camelContext).     Map<String, Object> parameters = new HashMap<>().     IntrospectionSupport.getProperties(configuration, parameters, null, false).     for (Map.Entry<String, Object> entry : parameters.entrySet()) {         Object value = entry.getValue().         Class<?> paramClass = value.getClass().         if (paramClass.getName().endsWith("NestedConfiguration")) {             Class nestedClass = null.             try {                 nestedClass = (Class) paramClass.getDeclaredField("CAMEL_NESTED_CLASS").get(null).                 HashMap<String, Object> nestedParameters = new HashMap<>().                 IntrospectionSupport.getProperties(value, nestedParameters, null, false).                 Object nestedProperty = nestedClass.newInstance().                 CamelPropertiesHelper.setCamelProperties(camelContext, nestedProperty, nestedParameters, false).                 entry.setValue(nestedProperty).             } catch (NoSuchFieldException e) {             }         }     }     CamelPropertiesHelper.setCamelProperties(camelContext, component, parameters, false).     if (ObjectHelper.isNotEmpty(customizers)) {         for (ComponentCustomizer<CaffeineCacheComponent> customizer : customizers) {             boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.caffeine-cache.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate(applicationContext.getEnvironment(), "camel.component.customizer", "camel.component.caffeine-cache.customizer").             if (useCustomizer) {                 LOGGER.debug("Configure component {}, with customizer {}", component, customizer).                 customizer.customize(component).             }         }     }     return component. }
