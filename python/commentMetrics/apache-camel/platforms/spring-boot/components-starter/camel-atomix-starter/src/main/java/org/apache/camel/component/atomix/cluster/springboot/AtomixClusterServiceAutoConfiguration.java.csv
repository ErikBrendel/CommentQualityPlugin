commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Bean(name = "atomix-cluster-service") @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON) @ConditionalOnProperty(prefix = "camel.component.atomix.cluster.service", name = "mode", havingValue = "node") public CamelClusterService atomixClusterService() {     AtomixClusterService service = new AtomixClusterService().     service.setNodes(configuration.getNodes().stream().map(Address::new).collect(Collectors.toList())).     ObjectHelper.ifNotEmpty(configuration.isEphemeral(), service::setEphemeral).     ObjectHelper.ifNotEmpty(configuration.getId(), service::setId).     ObjectHelper.ifNotEmpty(configuration.getAddress(), service::setAddress).     ObjectHelper.ifNotEmpty(configuration.getStoragePath(), service::setStoragePath).     ObjectHelper.ifNotEmpty(configuration.getStorageLevel(), service::setStorageLevel).     ObjectHelper.ifNotEmpty(configuration.getConfigurationUri(), service::setConfigurationUri).     ObjectHelper.ifNotEmpty(configuration.getAttributes(), service::setAttributes).     ObjectHelper.ifNotEmpty(configuration.getOrder(), service::setOrder).     return service. }
false;public;0;14;;@Bean(name = "atomix-cluster-client-service") @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON) @ConditionalOnProperty(prefix = "camel.component.atomix.cluster.service", name = "mode", havingValue = "client") public CamelClusterService atomixClusterClientService() {     AtomixClusterClientService service = new AtomixClusterClientService().     service.setNodes(configuration.getNodes().stream().map(Address::new).collect(Collectors.toList())).     ObjectHelper.ifNotEmpty(configuration.getId(), service::setId).     ObjectHelper.ifNotEmpty(configuration.getConfigurationUri(), service::setConfigurationUri).     ObjectHelper.ifNotEmpty(configuration.getAttributes(), service::setAttributes).     ObjectHelper.ifNotEmpty(configuration.getOrder(), service::setOrder).     return service. }
