commented;modifiers;parameterAmount;loc;comment;code
false;public;0;42;;@Override public DataFormat newInstance() {     SyslogDataFormat dataformat = new SyslogDataFormat().     if (CamelContextAware.class.isAssignableFrom(SyslogDataFormat.class)) {         CamelContextAware contextAware = CamelContextAware.class.cast(dataformat).         if (contextAware != null) {             contextAware.setCamelContext(camelContext).         }     }     try {         Map<String, Object> parameters = new HashMap<>().         IntrospectionSupport.getProperties(configuration, parameters, null, false).         CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false).     } catch (Exception e) {         throw new RuntimeCamelException(e).     }     if (ObjectHelper.isNotEmpty(customizers)) {         for (DataFormatCustomizer<SyslogDataFormat> customizer : customizers) {             boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate(applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.syslog.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate(applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.syslog.customizer").             if (useCustomizer) {                 LOGGER.debug("Configure dataformat {}, with customizer {}", dataformat, customizer).                 customizer.customize(dataformat).             }         }     }     return dataformat. }
false;public;0;48;;@Bean(name = "syslog-dataformat-factory") @ConditionalOnMissingBean(SyslogDataFormat.class) public DataFormatFactory configureSyslogDataFormatFactory() throws Exception {     return new DataFormatFactory() {          @Override         public DataFormat newInstance() {             SyslogDataFormat dataformat = new SyslogDataFormat().             if (CamelContextAware.class.isAssignableFrom(SyslogDataFormat.class)) {                 CamelContextAware contextAware = CamelContextAware.class.cast(dataformat).                 if (contextAware != null) {                     contextAware.setCamelContext(camelContext).                 }             }             try {                 Map<String, Object> parameters = new HashMap<>().                 IntrospectionSupport.getProperties(configuration, parameters, null, false).                 CamelPropertiesHelper.setCamelProperties(camelContext, dataformat, parameters, false).             } catch (Exception e) {                 throw new RuntimeCamelException(e).             }             if (ObjectHelper.isNotEmpty(customizers)) {                 for (DataFormatCustomizer<SyslogDataFormat> customizer : customizers) {                     boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate(applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.syslog.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate(applicationContext.getEnvironment(), "camel.dataformat.customizer", "camel.dataformat.syslog.customizer").                     if (useCustomizer) {                         LOGGER.debug("Configure dataformat {}, with customizer {}", dataformat, customizer).                         customizer.customize(dataformat).                     }                 }             }             return dataformat.         }     }. }
