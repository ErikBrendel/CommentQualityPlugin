commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Publisher<Exchange> fromStream(String s) {     return null. }
false;public;2;4;;@Override public <T> Publisher<T> fromStream(String s, Class<T> aClass) {     return null. }
false;public;1;4;;@Override public Subscriber<Exchange> streamSubscriber(String s) {     return null. }
false;public;2;4;;@Override public <T> Subscriber<T> streamSubscriber(String s, Class<T> aClass) {     return null. }
false;public;2;4;;@Override public Publisher<Exchange> toStream(String s, Object o) {     return null. }
false;public;1;4;;@Override public Function<?, ? extends Publisher<Exchange>> toStream(String s) {     return null. }
false;public;3;4;;@Override public <T> Publisher<T> toStream(String s, Object o, Class<T> aClass) {     return null. }
false;public;2;4;;@Override public <T> Function<Object, Publisher<T>> toStream(String s, Class<T> aClass) {     return null. }
false;public;1;4;;@Override public Publisher<Exchange> from(String s) {     return null. }
false;public;2;4;;@Override public <T> Publisher<T> from(String s, Class<T> aClass) {     return null. }
false;public;1;4;;@Override public Subscriber<Exchange> subscriber(String s) {     return null. }
false;public;2;4;;@Override public <T> Subscriber<T> subscriber(String s, Class<T> aClass) {     return null. }
false;public;2;4;;@Override public Publisher<Exchange> to(String s, Object o) {     return null. }
false;public;1;4;;@Override public Function<Object, Publisher<Exchange>> to(String s) {     return null. }
false;public;3;4;;@Override public <T> Publisher<T> to(String s, Object o, Class<T> aClass) {     return null. }
false;public;2;4;;@Override public <T> Function<Object, Publisher<T>> to(String s, Class<T> aClass) {     return null. }
false;public;2;4;;@Override public void process(String s, Function<? super Publisher<Exchange>, ?> function) { }
false;public;3;4;;@Override public <T> void process(String s, Class<T> aClass, Function<? super Publisher<T>, ?> function) { }
false;public;2;4;;@Override public void attachCamelProducer(String s, ReactiveStreamsProducer producer) { }
false;public;1;4;;@Override public void detachCamelProducer(String s) { }
false;public;2;4;;@Override public void sendCamelExchange(String s, Exchange exchange) { }
false;public;2;4;;@Override public ReactiveStreamsCamelSubscriber attachCamelConsumer(String s, ReactiveStreamsConsumer consumer) {     return null. }
false;public;1;4;;@Override public void detachCamelConsumer(String s) { }
false;public;0;4;;@Override public void start() throws Exception { }
false;public;0;4;;@Override public void stop() throws Exception { }
false;public;0;4;;@Override public String getId() {     return id. }
