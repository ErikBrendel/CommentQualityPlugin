commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void test() throws Exception {     ProducerTemplate template = context.createProducerTemplate().     String result = template.requestBody("seda:get-say-hello", "test", String.class).     Assert.assertEquals("Hello World", result).     Assert.assertEquals("true", context.getRestConfiguration().getDataFormatProperties().get("prettyPrint")).     Assert.assertEquals("My cool API", context.getRestConfiguration().getApiProperties().get("api.title")).     Assert.assertEquals("1.0.0", context.getRestConfiguration().getApiProperties().get("api.version")).     Assert.assertEquals("true", context.getRestConfiguration().getApiProperties().get("cors")).     Assert.assertEquals("123", context.getRestConfiguration().getCorsHeaders().get("foo")).     Assert.assertEquals("456", context.getRestConfiguration().getCorsHeaders().get("bar")). }
false;public;0;4;;@Bean(name = "dummy-rest") public RestConsumerFactory dummyRestConsumerFactory() {     return new TestConsumerFactory(). }
false;public;0;7;;@Override public void configure() throws Exception {     rest("/say/hello").get().to("direct:hello").     from("direct:hello").transform().constant("Hello World"). }
false;public;0;12;;@Bean public RouteBuilder routeBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             rest("/say/hello").get().to("direct:hello").             from("direct:hello").transform().constant("Hello World").         }     }. }
false;public;0;3;;public Object getDummy() {     return dummy. }
false;public;1;3;;public void setDummy(Object dummy) {     this.dummy = dummy. }
false;public;9;34;;@Override public Consumer createConsumer(CamelContext camelContext, Processor processor, String verb, String basePath, String uriTemplate, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters) throws Exception {     // just use a seda endpoint for testing purpose     String id.     if (uriTemplate != null) {         id = DefaultUuidGenerator.generateSanitizedId(basePath + uriTemplate).     } else {         id = DefaultUuidGenerator.generateSanitizedId(basePath).     }     // remove leading dash as we add that ourselves     if (id.startsWith("-")) {         id = id.substring(1).     }     if (configuration.getConsumerProperties() != null) {         String ref = (String) configuration.getConsumerProperties().get("dummy").         if (ref != null) {             dummy = CamelContextHelper.mandatoryLookup(camelContext, ref.substring(1)).         }     }     SedaEndpoint seda = camelContext.getEndpoint("seda:" + verb + "-" + id, SedaEndpoint.class).     return seda.createConsumer(processor). }
false;public;5;18;;@Override public Consumer createApiConsumer(CamelContext camelContext, Processor processor, String contextPath, RestConfiguration configuration, Map<String, Object> parameters) throws Exception {     // just use a seda endpoint for testing purpose     String id = DefaultUuidGenerator.generateSanitizedId(contextPath).     // remove leading dash as we add that ourselves     if (id.startsWith("-")) {         id = id.substring(1).     }     SedaEndpoint seda = camelContext.getEndpoint("seda:api:" + "-" + id, SedaEndpoint.class).     return seda.createConsumer(processor). }
