commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testBeans() throws Exception {     Map<String, HystrixConfigurationDefinition> beans = context.getBeansOfType(HystrixConfigurationDefinition.class).     Assert.assertEquals(4, beans.size()).     Assert.assertEquals("global-group", beans.get(HystrixConstants.DEFAULT_HYSTRIX_CONFIGURATION_ID).getGroupKey()).     Assert.assertEquals("bean-group", beans.get("bean-conf").getGroupKey()).     Assert.assertEquals("conf-1-group", beans.get("conf-1").getGroupKey()).     Assert.assertEquals("conf-2-group", beans.get("conf-2").getGroupKey()). }
false;public;0;8;;@Test public void testConfigurations() throws Exception {     HystrixProcessor processor1 = findHystrixProcessor(camelContext.getRoute("hystrix-route-1").navigate()).     HystrixProcessor processor2 = findHystrixProcessor(camelContext.getRoute("hystrix-route-2").navigate()).     Assert.assertEquals("conf-1-group", processor1.getHystrixGroupKey()).     Assert.assertEquals("conf-2-group", processor2.getHystrixGroupKey()). }
false;private;1;12;;// ********************************************** // Helper // ********************************************** private HystrixProcessor findHystrixProcessor(Navigate<Processor> navigate) throws Exception {     for (Processor processor : navigate.next()) {         if (processor instanceof HystrixProcessor) {             return (HystrixProcessor) processor.         }         if (processor instanceof Navigate) {             return findHystrixProcessor((Navigate<Processor>) processor).         }     }     throw new IllegalStateException("Unable to find an HystrixProcessor instance"). }
