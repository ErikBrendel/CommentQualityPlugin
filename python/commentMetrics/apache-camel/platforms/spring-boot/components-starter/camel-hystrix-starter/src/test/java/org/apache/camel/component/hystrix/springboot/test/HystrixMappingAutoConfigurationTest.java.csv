commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testHystrixServletMapping() throws Exception {     CountDownLatch pingFound = new CountDownLatch(1).     Consumer<String> consumer = s -> {         if (s != null && s.toLowerCase().contains("ping")) {             pingFound.countDown().         }     }.     URL hystrix = new URL("http://localhost:" + serverPort + "/hystrix.stream").     try (InputStream stream = consume(hystrix, consumer)) {         // Hystrix stream is infinite, we stop reading it after the first ping (or timeout)         assertTrue(pingFound.await(5, TimeUnit.SECONDS)).     } }
false;public;0;11;;@Override public void run() {     try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {         String line.         while ((line = reader.readLine()) != null) {             consumer.accept(line).         }     } catch (IOException ex) {         LOG.error("Consumer thread is terminating", ex).     } }
false;private;2;17;;private InputStream consume(URL url, final Consumer<String> consumer) throws IOException {     final InputStream stream = url.openConnection().getInputStream().     new Thread() {          @Override         public void run() {             try (BufferedReader reader = new BufferedReader(new InputStreamReader(stream))) {                 String line.                 while ((line = reader.readLine()) != null) {                     consumer.accept(line).                 }             } catch (IOException ex) {                 LOG.error("Consumer thread is terminating", ex).             }         }     }.start().     return stream. }
