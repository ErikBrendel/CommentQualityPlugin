commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Bean(name = HystrixConstants.DEFAULT_HYSTRIX_CONFIGURATION_ID) @ConditionalOnClass(CamelContext.class) @ConditionalOnMissingBean(name = HystrixConstants.DEFAULT_HYSTRIX_CONFIGURATION_ID) public HystrixConfigurationDefinition defaultHystrixConfigurationDefinition() throws Exception {     Map<String, Object> properties = new HashMap<>().     IntrospectionSupport.getProperties(config, properties, null, false).     HystrixConfigurationDefinition definition = new HystrixConfigurationDefinition().     IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(), definition, properties).     return definition. }
false;public;0;28;;@PostConstruct public void postConstruct() {     if (beanFactory == null) {         return.     }     Map<String, Object> properties = new HashMap<>().     for (Map.Entry<String, HystrixConfigurationDefinitionCommon> entry : config.getConfigurations().entrySet()) {         // clear the properties map for reuse         properties.clear().         // extract properties         IntrospectionSupport.getProperties(entry.getValue(), properties, null, false).         try {             HystrixConfigurationDefinition definition = new HystrixConfigurationDefinition().             IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(), definition, properties).             // Registry the definition             beanFactory.registerSingleton(entry.getKey(), definition).         } catch (Exception e) {             throw new BeanCreationException(entry.getKey(), e).         }     } }
