commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testComponentConfiguration() throws Exception {     Assert.assertNotNull(configurations).     Assert.assertEquals(2, configurations.size()).     Assert.assertNotNull(component).     Assert.assertNotNull(component.getCachesConfigurations()).     Assert.assertEquals(2, component.getCachesConfigurations().size()).     Assert.assertTrue(component.getCachesConfigurations().containsKey("myConfig1")).     Assert.assertTrue(component.getCachesConfigurations().containsKey("myConfig2")).     Assert.assertFalse(component.getCachesConfigurations().containsKey(CACHE_CONFIG_ID)). }
false;public;1;13;;@Override public void customize(EhcacheComponent component) {     component.addCachesConfigurations(Collections.singletonMap(CACHE_CONFIG_ID, CacheConfigurationBuilder.newCacheConfigurationBuilder(String.class, String.class, ResourcePoolsBuilder.newResourcePoolsBuilder().heap(2100, EntryUnit.ENTRIES).offheap(2, MemoryUnit.MB)).build())). }
false;public;0;19;;@Order(Ordered.HIGHEST_PRECEDENCE) @Bean public ComponentCustomizer<EhcacheComponent> customizer() {     return new ComponentCustomizer<EhcacheComponent>() {          @Override         public void customize(EhcacheComponent component) {             component.addCachesConfigurations(Collections.singletonMap(CACHE_CONFIG_ID, CacheConfigurationBuilder.newCacheConfigurationBuilder(String.class, String.class, ResourcePoolsBuilder.newResourcePoolsBuilder().heap(2100, EntryUnit.ENTRIES).offheap(2, MemoryUnit.MB)).build())).         }     }. }
false;public;0;10;;@Bean public CacheConfiguration<?, ?> myConfig1() {     return CacheConfigurationBuilder.newCacheConfigurationBuilder(String.class, String.class, ResourcePoolsBuilder.newResourcePoolsBuilder().heap(100, EntryUnit.ENTRIES).offheap(1, MemoryUnit.MB)).build(). }
false;public;0;10;;@Bean public CacheConfiguration<?, ?> myConfig2() {     return CacheConfigurationBuilder.newCacheConfigurationBuilder(String.class, String.class, ResourcePoolsBuilder.newResourcePoolsBuilder().heap(2100, EntryUnit.ENTRIES).offheap(2, MemoryUnit.MB)).build(). }
