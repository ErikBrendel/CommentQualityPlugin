commented;modifiers;parameterAmount;loc;comment;code
false;public;0;38;;@Bean(name = "tokenize-language") @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) @ConditionalOnMissingBean(TokenizeLanguage.class) public TokenizeLanguage configureTokenizeLanguage() throws Exception {     TokenizeLanguage language = new TokenizeLanguage().     if (CamelContextAware.class.isAssignableFrom(TokenizeLanguage.class)) {         CamelContextAware contextAware = CamelContextAware.class.cast(language).         if (contextAware != null) {             contextAware.setCamelContext(camelContext).         }     }     Map<String, Object> parameters = new HashMap<>().     IntrospectionSupport.getProperties(configuration, parameters, null, false).     CamelPropertiesHelper.setCamelProperties(camelContext, language, parameters, false).     if (ObjectHelper.isNotEmpty(customizers)) {         for (LanguageCustomizer<TokenizeLanguage> customizer : customizers) {             boolean useCustomizer = (customizer instanceof HasId) ? HierarchicalPropertiesEvaluator.evaluate(applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.tokenize.customizer", ((HasId) customizer).getId()) : HierarchicalPropertiesEvaluator.evaluate(applicationContext.getEnvironment(), "camel.language.customizer", "camel.language.tokenize.customizer").             if (useCustomizer) {                 LOGGER.debug("Configure language {}, with customizer {}", language, customizer).                 customizer.customize(language).             }         }     }     return language. }
