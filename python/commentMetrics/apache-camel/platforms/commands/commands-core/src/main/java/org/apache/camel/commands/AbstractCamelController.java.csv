commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;@Override public List<Map<String, String>> getCamelContexts(String filter) throws Exception {     List<Map<String, String>> answer = new ArrayList<>().     List<Map<String, String>> context = getCamelContexts().     if (filter != null) {         filter = wildcardAsRegex(filter).     } else {         filter = "*".     }     for (Map<String, String> entry : context) {         String name = entry.get("name").         if (name.equalsIgnoreCase(filter) || matchWildcard(name, filter) || name.matches(filter)) {             answer.add(entry).         }     }     return answer. }
false;protected;3;27;;protected Map<String, Object> loadProperties(String json, String group, Map<String, Object> answer) {     List<Map<String, String>> kv = JSonSchemaHelper.parseJsonSchema(group, json, true).     if (kv.isEmpty()) {         return answer.     }     Map<String, Object> groupkv = new LinkedHashMap<>().     answer.put(group, groupkv).     for (Map<String, String> map : kv) {         boolean first = true.         Map<String, Object> properties = new LinkedHashMap<>().         for (Map.Entry<String, String> entry : map.entrySet()) {             if (first) {                 if (!ObjectHelper.equal(entry.getKey(), "name")) {                     throw new IllegalStateException("First entry should be the property name").                 }                 groupkv.put(entry.getValue(), properties).                 first = false.             } else {                 properties.put(entry.getKey(), entry.getValue()).             }         }     }     return answer. }
