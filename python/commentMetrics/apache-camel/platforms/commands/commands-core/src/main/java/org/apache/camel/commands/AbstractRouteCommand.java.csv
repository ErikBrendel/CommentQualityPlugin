commented;modifiers;parameterAmount;loc;comment;code
false;public;3;21;;public Object execute(CamelController camelController, PrintStream out, PrintStream err) throws Exception {     List<Map<String, String>> camelRoutes = camelController.getRoutes(context, RegexUtil.wildcardAsRegex(route)).     if (camelRoutes == null || camelRoutes.isEmpty()) {         err.println("Camel routes using " + route + " not found.").         return null.     }     // we want the routes sorted     Collections.sort(camelRoutes, new RouteComparator()).     for (Map<String, String> row : camelRoutes) {         String camelContextName = row.get("camelContextName").         String routeId = row.get("routeId").         if (camelController instanceof LocalCamelController) {             executeLocal((LocalCamelController) camelController, camelContextName, routeId, out, err).         } else {             executeOnRoute(camelController, camelContextName, routeId, out, err).         }     }     return null. }
false;private;5;19;;private void executeLocal(LocalCamelController camelController, String camelContextName, String routeId, PrintStream out, PrintStream err) throws Exception {     CamelContext camelContext = camelController.getLocalCamelContext(context).     if (camelContext == null) {         err.println("Camel context " + context + " not found.").         return.     }     // Setting thread context classloader to the bundle classloader to enable legacy code that relies on it     ClassLoader oldClassloader = Thread.currentThread().getContextClassLoader().     ClassLoader applicationContextClassLoader = camelContext.getApplicationContextClassLoader().     if (applicationContextClassLoader != null) {         Thread.currentThread().setContextClassLoader(applicationContextClassLoader).     }     try {         executeOnRoute(camelController, camelContextName, routeId, out, err).     } finally {         Thread.currentThread().setContextClassLoader(oldClassloader).     } }
false;public,abstract;5;1;;public abstract void executeOnRoute(CamelController camelController, String contextName, String routeId, PrintStream out, PrintStream err) throws Exception.
false;public;2;12;;@Override public int compare(Map<String, String> route1, Map<String, String> route2) {     // sort by camel context first     String camel1 = route1.get("camelContextName").     String camel2 = route2.get("camelContextName").     if (camel1.equals(camel2)) {         return route1.get("routeId").compareTo(route2.get("routeId")).     } else {         return camel1.compareTo(camel2).     } }
