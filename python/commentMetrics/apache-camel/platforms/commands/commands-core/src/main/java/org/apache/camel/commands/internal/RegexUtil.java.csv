commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;35;/**  * convert a wild card containing * and ? to the equivalent regex  *  * @param wildcard wildcard string describing a file.  * @return regex string that could be fed to Pattern.compile  */ ;/**  * convert a wild card containing * and ? to the equivalent regex  *  * @param wildcard wildcard string describing a file.  * @return regex string that could be fed to Pattern.compile  */ public static String wildcardAsRegex(String wildcard) {     StringBuilder sb = new StringBuilder().     for (int i = 0. i < wildcard.length(). i++) {         final char c = wildcard.charAt(i).         switch(c) {             case '*':                 sb.append(".*?").                 break.             case '?':                 sb.append(".").                 break.             // chars that have magic regex meaning. They need quoting to be taken literally             case '$':             case '(':             case ')':             case '+':             case '-':             case '.':             case '[':             case '\\':             case ']':             case '^':             case '{':             case '|':             case '}':                 sb.append('\\').                 sb.append(c).                 break.             default:                 sb.append(c).                 break.         }     }     return sb.toString(). }
