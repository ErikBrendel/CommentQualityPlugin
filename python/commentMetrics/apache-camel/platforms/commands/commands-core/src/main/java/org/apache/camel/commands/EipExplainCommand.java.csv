commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;54;;@Override protected Object performContextCommand(CamelController camelController, String contextName, PrintStream out, PrintStream err) throws Exception {     String json = camelController.explainEipAsJSon(context, nameOrId, verbose).     if (json == null) {         return null.     }     out.println("Context:       " + context).     // use a basic json parser     List<Map<String, String>> options = JSonSchemaHelper.parseJsonSchema("properties", json, true).     for (Map<String, String> option : options) {         out.print("Option:        ").         out.println(option.get("name")).         String kind = option.get("kind").         if (kind != null) {             out.print("Kind:          ").             out.println(kind).         }         String type = option.get("type").         if (type != null) {             out.print("Type:          ").             out.println(type).         }         String javaType = option.get("javaType").         if (javaType != null) {             out.print("Java Type:     ").             out.println(javaType).         }         String value = option.get("value").         if (value != null) {             out.print("Value:         ").             out.println(value).         }         String defaultValue = option.get("defaultValue").         if (defaultValue != null) {             out.print("Default Value: ").             out.println(defaultValue).         }         String description = option.get("description").         if (description != null) {             out.print("Description:   ").             out.println(description).         }         out.println().     }     if (options.isEmpty()) {         out.println().     }     return null. }
