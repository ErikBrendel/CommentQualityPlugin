commented;modifiers;parameterAmount;loc;comment;code
false;public;3;23;;@Override public Object execute(CamelController camelController, PrintStream out, PrintStream err) throws Exception {     if (camelController instanceof LocalCamelController) {         return executeLocal((LocalCamelController) camelController, out, err).     } else {         boolean found = false.         List<Map<String, String>> contexts = camelController.getCamelContexts().         for (Map<String, String> entry : contexts) {             String name = entry.get("name").             if (context.equals(name)) {                 found = true.                 break.             }         }         if (!found) {             err.println("Camel context " + context + " not found.").             return null.         } else {             return performContextCommand(camelController, context, out, err).         }     } }
false;protected;3;16;;protected Object executeLocal(LocalCamelController camelController, PrintStream out, PrintStream err) throws Exception {     CamelContext camelContext = camelController.getLocalCamelContext(context).     if (camelContext == null) {         err.println("Camel context " + context + " not found.").         return null.     }     // Setting thread context classloader to the bundle classloader to enable legacy code that relies on it     ClassLoader oldClassloader = Thread.currentThread().getContextClassLoader().     Thread.currentThread().setContextClassLoader(camelContext.getApplicationContextClassLoader()).     try {         return performContextCommand(camelController, camelContext.getName(), out, err).     } finally {         Thread.currentThread().setContextClassLoader(oldClassloader).     } }
true;protected,abstract;4;1;/**  * Perform Context-specific command  *  * @param camelController the Camel controller  * @param contextName     the Camel context name  * @param out             the output printer stream  * @param err             the error print stream  * @return response from command, or <tt>null</tt> if nothing to return  * @throws Exception is thrown if error executing command  */ ;/**  * Perform Context-specific command  *  * @param camelController the Camel controller  * @param contextName     the Camel context name  * @param out             the output printer stream  * @param err             the error print stream  * @return response from command, or <tt>null</tt> if nothing to return  * @throws Exception is thrown if error executing command  */ protected abstract Object performContextCommand(CamelController camelController, String contextName, PrintStream out, PrintStream err) throws Exception.
