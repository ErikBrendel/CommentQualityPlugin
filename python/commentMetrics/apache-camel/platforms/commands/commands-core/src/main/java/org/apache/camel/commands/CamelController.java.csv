commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Gets information about a given Camel context by the given name.  *  * @param name the Camel context name.  * @return a list of key/value pairs with CamelContext information  * @throws java.lang.Exception can be thrown  */ ;/**  * Gets information about a given Camel context by the given name.  *  * @param name the Camel context name.  * @return a list of key/value pairs with CamelContext information  * @throws java.lang.Exception can be thrown  */ Map<String, Object> getCamelContextInformation(String name) throws Exception.
true;;0;1;/**  * Get the list of Camel context.  *  * @return a list of key/value pairs with CamelContext information  * @throws java.lang.Exception can be thrown  */ ;/**  * Get the list of Camel context.  *  * @return a list of key/value pairs with CamelContext information  * @throws java.lang.Exception can be thrown  */ List<Map<String, String>> getCamelContexts() throws Exception.
true;;1;1;/**  * Get the list of Camel context filter by reg ex.  *  * @param filter           the filter which supports * and ? as wildcards  * @return a list of key/value pairs with CamelContext information  * @throws java.lang.Exception can be thrown  */ ;/**  * Get the list of Camel context filter by reg ex.  *  * @param filter           the filter which supports * and ? as wildcards  * @return a list of key/value pairs with CamelContext information  * @throws java.lang.Exception can be thrown  */ List<Map<String, String>> getCamelContexts(String filter) throws Exception.
true;;3;1;/**  * Returns detailed CamelContext and route statistics as XML identified by a ID and a Camel context.  *  * @param camelContextName  the Camel context.  * @param fullStats         whether to include verbose stats  * @param includeProcessors whether to embed per processor stats from the route  * @return the CamelContext statistics as XML  * @throws java.lang.Exception can be thrown  */ ;/**  * Returns detailed CamelContext and route statistics as XML identified by a ID and a Camel context.  *  * @param camelContextName  the Camel context.  * @param fullStats         whether to include verbose stats  * @param includeProcessors whether to embed per processor stats from the route  * @return the CamelContext statistics as XML  * @throws java.lang.Exception can be thrown  */ String getCamelContextStatsAsXml(String camelContextName, boolean fullStats, boolean includeProcessors) throws Exception.
true;;4;1;/**  * Browses the inflight exchanges  *  * @param camelContextName        the Camel context.  * @param route                   the Camel route ID  * @param limit                   maximum number of exchanges to return  * @param sortByLongestDuration   <tt>true</tt> to sort by longest duration, <tt>false</tt> to sort by exchange id  * @return a list of key/value pairs with inflight exchange information  * @throws java.lang.Exception can be thrown  */ ;/**  * Browses the inflight exchanges  *  * @param camelContextName        the Camel context.  * @param route                   the Camel route ID  * @param limit                   maximum number of exchanges to return  * @param sortByLongestDuration   <tt>true</tt> to sort by longest duration, <tt>false</tt> to sort by exchange id  * @return a list of key/value pairs with inflight exchange information  * @throws java.lang.Exception can be thrown  */ List<Map<String, Object>> browseInflightExchanges(String camelContextName, String route, int limit, boolean sortByLongestDuration) throws Exception.
true;;1;1;/**  * Starts the given Camel context.  *  * @param camelContextName the Camel context.  * @throws java.lang.Exception can be thrown  */ ;/**  * Starts the given Camel context.  *  * @param camelContextName the Camel context.  * @throws java.lang.Exception can be thrown  */ void startContext(String camelContextName) throws Exception.
true;;1;1;/**  * Stops the given Camel context.  *  * @param camelContextName the Camel context.  * @throws java.lang.Exception can be thrown  */ ;/**  * Stops the given Camel context.  *  * @param camelContextName the Camel context.  * @throws java.lang.Exception can be thrown  */ void stopContext(String camelContextName) throws Exception.
true;;1;1;/**  * Suspends the given Camel context.  *  * @param camelContextName the Camel context.  * @throws java.lang.Exception can be thrown  */ ;/**  * Suspends the given Camel context.  *  * @param camelContextName the Camel context.  * @throws java.lang.Exception can be thrown  */ void suspendContext(String camelContextName) throws Exception.
true;;1;1;/**  * Resumes the given Camel context.  *  * @param camelContextName the Camel context.  * @throws java.lang.Exception can be thrown  */ ;/**  * Resumes the given Camel context.  *  * @param camelContextName the Camel context.  * @throws java.lang.Exception can be thrown  */ void resumeContext(String camelContextName) throws Exception.
true;;1;1;/**  * Get all routes. If Camel context name is null, all routes from all contexts are listed.  *  * @param camelContextName the Camel context name. If null, all contexts are considered.  * @return a list of key/value pairs with routes information  * @throws java.lang.Exception can be thrown  */ ;/**  * Get all routes. If Camel context name is null, all routes from all contexts are listed.  *  * @param camelContextName the Camel context name. If null, all contexts are considered.  * @return a list of key/value pairs with routes information  * @throws java.lang.Exception can be thrown  */ List<Map<String, String>> getRoutes(String camelContextName) throws Exception.
true;;2;1;/**  * Get all routes filtered by the regex.  *  * @param camelContextName the Camel context name. If null, all contexts are considered.  * @param filter           the filter which supports * and ? as wildcards  * @return a list of key/value pairs with routes information  * @throws java.lang.Exception can be thrown  */ ;/**  * Get all routes filtered by the regex.  *  * @param camelContextName the Camel context name. If null, all contexts are considered.  * @param filter           the filter which supports * and ? as wildcards  * @return a list of key/value pairs with routes information  * @throws java.lang.Exception can be thrown  */ List<Map<String, String>> getRoutes(String camelContextName, String filter) throws Exception.
true;;1;1;/**  * Reset all the route stats for the given Camel context  *  * @param camelContextName the Camel context.  * @throws java.lang.Exception can be thrown  */ ;/**  * Reset all the route stats for the given Camel context  *  * @param camelContextName the Camel context.  * @throws java.lang.Exception can be thrown  */ void resetRouteStats(String camelContextName) throws Exception.
true;;2;1;/**  * Starts the given route  *  * @param camelContextName the Camel context.  * @param routeId          the route ID.  * @throws java.lang.Exception can be thrown  */ ;/**  * Starts the given route  *  * @param camelContextName the Camel context.  * @param routeId          the route ID.  * @throws java.lang.Exception can be thrown  */ void startRoute(String camelContextName, String routeId) throws Exception.
true;;2;1;/**  * Stops the given route  *  * @param camelContextName the Camel context.  * @param routeId          the route ID.  * @throws java.lang.Exception can be thrown  */ ;/**  * Stops the given route  *  * @param camelContextName the Camel context.  * @param routeId          the route ID.  * @throws java.lang.Exception can be thrown  */ void stopRoute(String camelContextName, String routeId) throws Exception.
true;;2;1;/**  * Suspends the given route  *  * @param camelContextName the Camel context.  * @param routeId          the route ID.  * @throws java.lang.Exception can be thrown  */ ;/**  * Suspends the given route  *  * @param camelContextName the Camel context.  * @param routeId          the route ID.  * @throws java.lang.Exception can be thrown  */ void suspendRoute(String camelContextName, String routeId) throws Exception.
true;;2;1;/**  * Resumes the given route  *  * @param camelContextName the Camel context.  * @param routeId          the route ID.  * @throws java.lang.Exception can be thrown  */ ;/**  * Resumes the given route  *  * @param camelContextName the Camel context.  * @param routeId          the route ID.  * @throws java.lang.Exception can be thrown  */ void resumeRoute(String camelContextName, String routeId) throws Exception.
true;;2;1;/**  * Return the definition of a route as XML identified by a ID and a Camel context.  *  * @param routeId          the route ID.  * @param camelContextName the Camel context.  * @return the route model as XML  * @throws java.lang.Exception can be thrown  */ ;/**  * Return the definition of a route as XML identified by a ID and a Camel context.  *  * @param routeId          the route ID.  * @param camelContextName the Camel context.  * @return the route model as XML  * @throws java.lang.Exception can be thrown  */ String getRouteModelAsXml(String routeId, String camelContextName) throws Exception.
true;;4;1;/**  * Returns detailed route statistics as XML identified by a ID and a Camel context.  *  * @param routeId           the route ID.  * @param camelContextName  the Camel context.  * @param fullStats         whether to include verbose stats  * @param includeProcessors whether to embed per processor stats from the route  * @return the route statistics as XML  * @throws java.lang.Exception can be thrown  */ ;/**  * Returns detailed route statistics as XML identified by a ID and a Camel context.  *  * @param routeId           the route ID.  * @param camelContextName  the Camel context.  * @param fullStats         whether to include verbose stats  * @param includeProcessors whether to embed per processor stats from the route  * @return the route statistics as XML  * @throws java.lang.Exception can be thrown  */ String getRouteStatsAsXml(String routeId, String camelContextName, boolean fullStats, boolean includeProcessors) throws Exception.
true;;1;1;/**  * Return the endpoints  *  * @param camelContextName the Camel context.  * @return a list of key/value pairs with endpoint information  * @throws java.lang.Exception can be thrown  */ ;/**  * Return the endpoints  *  * @param camelContextName the Camel context.  * @return a list of key/value pairs with endpoint information  * @throws java.lang.Exception can be thrown  */ List<Map<String, String>> getEndpoints(String camelContextName) throws Exception.
true;;1;1;/**  * Return endpoint runtime statistics  *  * @param camelContextName the Camel context  * @return a list of key/value pairs with endpoint runtime statistics  * @throws java.lang.Exception can be thrown  */ ;/**  * Return endpoint runtime statistics  *  * @param camelContextName the Camel context  * @return a list of key/value pairs with endpoint runtime statistics  * @throws java.lang.Exception can be thrown  */ List<Map<String, String>> getEndpointRuntimeStatistics(String camelContextName) throws Exception.
true;;1;1;/**  * Return the definition of the REST services as XML for the given Camel context.  *  * @param camelContextName the Camel context.  * @return the REST model as xml  * @throws java.lang.Exception can be thrown  */ ;/**  * Return the definition of the REST services as XML for the given Camel context.  *  * @param camelContextName the Camel context.  * @return the REST model as xml  * @throws java.lang.Exception can be thrown  */ String getRestModelAsXml(String camelContextName) throws Exception.
true;;1;1;/**  * Return the REST services API documentation as JSon (requires camel-swagger-java on classpath)  *  * @param camelContextName the Camel context.  * @return the REST API documentation as JSon  * @throws java.lang.Exception can be thrown  */ ;/**  * Return the REST services API documentation as JSon (requires camel-swagger-java on classpath)  *  * @param camelContextName the Camel context.  * @return the REST API documentation as JSon  * @throws java.lang.Exception can be thrown  */ String getRestApiDocAsJson(String camelContextName) throws Exception.
true;;1;1;/**  * Return the REST services for the given Camel context.  *  * @param camelContextName the Camel context.  * @return a list of key/value pairs with REST information  * @throws java.lang.Exception can be thrown  */ ;/**  * Return the REST services for the given Camel context.  *  * @param camelContextName the Camel context.  * @return a list of key/value pairs with REST information  * @throws java.lang.Exception can be thrown  */ List<Map<String, String>> getRestServices(String camelContextName) throws Exception.
true;;3;1;/**  * Explains an endpoint uri  *  * @param camelContextName the Camel context.  * @param uri              the endpoint uri  * @param allOptions       whether to explain all options, or only the explicit configured options from the uri  * @return a JSON schema with explanation of the options  * @throws java.lang.Exception can be thrown  */ ;/**  * Explains an endpoint uri  *  * @param camelContextName the Camel context.  * @param uri              the endpoint uri  * @param allOptions       whether to explain all options, or only the explicit configured options from the uri  * @return a JSON schema with explanation of the options  * @throws java.lang.Exception can be thrown  */ String explainEndpointAsJSon(String camelContextName, String uri, boolean allOptions) throws Exception.
true;;3;1;/**  * Explains an EIP  *  * @param camelContextName the Camel context.  * @param nameOrId         the name of the EIP ({@link org.apache.camel.NamedNode#getShortName()} or a node id to refer to a specific node from the routes.  * @param allOptions       whether to explain all options, or only the explicit configured options from the uri  * @return a JSON schema with explanation of the options  * @throws java.lang.Exception can be thrown  */ ;/**  * Explains an EIP  *  * @param camelContextName the Camel context.  * @param nameOrId         the name of the EIP ({@link org.apache.camel.NamedNode#getShortName()} or a node id to refer to a specific node from the routes.  * @param allOptions       whether to explain all options, or only the explicit configured options from the uri  * @return a JSON schema with explanation of the options  * @throws java.lang.Exception can be thrown  */ String explainEipAsJSon(String camelContextName, String nameOrId, boolean allOptions) throws Exception.
true;;1;1;/**  * Lists Components which are in use or available on the classpath and include information  *  * @param camelContextName the Camel context.  * @return a list of key/value pairs with component information  * @throws java.lang.Exception can be thrown  */ ;/**  * Lists Components which are in use or available on the classpath and include information  *  * @param camelContextName the Camel context.  * @return a list of key/value pairs with component information  * @throws java.lang.Exception can be thrown  */ List<Map<String, String>> listComponents(String camelContextName) throws Exception.
true;;1;1;/**  * Return the transformers  *  * @param camelContextName the Camel context.  * @return a list of key/value pairs with transformer information  * @throws java.lang.Exception can be thrown  */ ;/**  * Return the transformers  *  * @param camelContextName the Camel context.  * @return a list of key/value pairs with transformer information  * @throws java.lang.Exception can be thrown  */ List<Map<String, String>> getTransformers(String camelContextName) throws Exception.
true;;1;1;/**  * Return the validators  *  * @param camelContextName the Camel context.  * @return a list of key/value pairs with validator information  * @throws java.lang.Exception can be thrown  */ ;/**  * Return the validators  *  * @param camelContextName the Camel context.  * @return a list of key/value pairs with validator information  * @throws java.lang.Exception can be thrown  */ List<Map<String, String>> getValidators(String camelContextName) throws Exception.
