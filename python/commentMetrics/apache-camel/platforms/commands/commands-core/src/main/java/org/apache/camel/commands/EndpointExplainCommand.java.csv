commented;modifiers;parameterAmount;loc;comment;code
false;protected;4;87;;@Override protected Object performContextCommand(CamelController camelController, String contextName, PrintStream out, PrintStream err) throws Exception {     List<Map<String, String>> endpoints = camelController.getEndpoints(contextName).     if (endpoints == null || endpoints.isEmpty()) {         return null.     }     // filter endpoints     if (filter != null) {         Iterator<Map<String, String>> it = endpoints.iterator().         while (it.hasNext()) {             Map<String, String> row = it.next().             if (!PatternHelper.matchPattern(row.get("uri"), filter)) {                 // did not match                 it.remove().             }         }     }     for (Map<String, String> row : endpoints) {         String json = camelController.explainEndpointAsJSon(context, row.get("uri"), verbose).         if (json == null) {             continue.         }         out.println("Context:       " + context).         // sanitize and mask uri so we dont see passwords         String uri = URISupport.sanitizeUri(row.get("uri")).         String header = "Uri:           " + uri.         out.println(header).         for (int i = 0. i < header.length(). i++) {             out.print('-').         }         out.println().         // use a basic json parser         List<Map<String, String>> options = JSonSchemaHelper.parseJsonSchema("properties", json, true).         for (Map<String, String> option : options) {             out.print("Option:        ").             out.println(option.get("name")).             String kind = option.get("kind").             if (kind != null) {                 out.print("Kind:          ").                 out.println(kind).             }             String group = option.get("group").             if (group != null) {                 out.print("Group:         ").                 out.println(group).             }             String type = option.get("type").             if (type != null) {                 out.print("Type:          ").                 out.println(type).             }             String javaType = option.get("javaType").             if (javaType != null) {                 out.print("Java Type:     ").                 out.println(javaType).             }             String value = option.get("value").             if (value != null) {                 out.print("Value:         ").                 out.println(value).             }             String defaultValue = option.get("defaultValue").             if (defaultValue != null) {                 out.print("Default Value: ").                 out.println(defaultValue).             }             String description = option.get("description").             if (description != null) {                 out.print("Description:   ").                 out.println(description).             }             out.println().         }         if (options.isEmpty()) {             out.println().         }     }     return null. }
