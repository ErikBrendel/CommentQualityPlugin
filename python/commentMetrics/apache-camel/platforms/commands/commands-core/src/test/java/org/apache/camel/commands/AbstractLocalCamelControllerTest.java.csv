commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Override public void configure() throws Exception {     transformer().fromType("xml:foo").toType("json:bar").withJava(DummyTransformer.class).     validator().type("xml:foo").withJava(DummyValidator.class).     from("direct:start1").id("route1").delay(100).to("mock:result1").     from("direct:start2").id("route2").delay(100).to("mock:result2").     from("direct:start3").id("route3").delay(100).to("mock:result3"). }
false;public;0;4;;@Before public void startContext() throws Exception {     context.start(). }
false;public;0;4;;@After public void stopContext() throws Exception {     context.stop(). }
false;public;0;13;;@Test public void testBrowseInflightExchangesWithMoreRoutes() throws Exception {     context.createProducerTemplate().asyncSendBody("direct:start1", "Start one").     context.createProducerTemplate().asyncSendBody("direct:start2", "Start two").     context.createProducerTemplate().asyncSendBody("direct:start3", "Start three").     // let the exchange proceed     Thread.sleep(50).     final List<Map<String, Object>> inflightExchanges = localCamelController.browseInflightExchanges("context1", null, 0, false).     assertEquals("Context should contain three inflight exchanges", 3, inflightExchanges.size()). }
false;public;0;6;;@Test public void testBrowseInflightExchangesWithNoRoutes() throws Exception {     final List<Map<String, Object>> inflightExchanges = localCamelController.browseInflightExchanges("context1", null, 0, false).     assertTrue("Context without routes should not have any inflight exchanges", inflightExchanges.isEmpty()). }
false;public;0;11;;@Test public void testBrowseInflightExchangesWithOneRoute() throws Exception {     context.createProducerTemplate().asyncSendBody("direct:start1", "Start one").     // let the exchange proceed     Thread.sleep(50).     final List<Map<String, Object>> inflightExchanges = localCamelController.browseInflightExchanges("context1", null, 0, false).     assertEquals("Context should contain one inflight exchange", 1, inflightExchanges.size()). }
false;public;0;13;;@Test public void testBrowseInflightExchangesWithSpecificRoute() throws Exception {     context.createProducerTemplate().asyncSendBody("direct:start1", "Start one").     context.createProducerTemplate().asyncSendBody("direct:start2", "Start two").     context.createProducerTemplate().asyncSendBody("direct:start3", "Start three").     // let the exchanges proceed     Thread.sleep(50).     final List<Map<String, Object>> inflightExchanges = localCamelController.browseInflightExchanges("context1", "route2", 0, false).     assertEquals("Context should contain one inflight exchange for specific route", 1, inflightExchanges.size()). }
false;public;0;12;;@Test public void testTransformer() throws Exception {     List<Map<String, String>> transformers = localCamelController.getTransformers("context1").     assertEquals(1, transformers.size()).     Map<String, String> dummyTransformer = transformers.get(0).     assertEquals("context1", dummyTransformer.get("camelContextName")).     assertEquals("DummyTransformer[scheme='null', from='xml:foo', to='json:bar']", dummyTransformer.get("description")).     assertEquals(null, dummyTransformer.get("scheme")).     assertEquals("xml:foo", dummyTransformer.get("from")).     assertEquals("json:bar", dummyTransformer.get("to")).     assertEquals("Started", dummyTransformer.get("state")). }
false;public;0;10;;@Test public void testValidator() throws Exception {     List<Map<String, String>> validators = localCamelController.getValidators("context1").     assertEquals(1, validators.size()).     Map<String, String> dummyValidator = validators.get(0).     assertEquals("context1", dummyValidator.get("camelContextName")).     assertEquals("DummyValidator[type='xml:foo']", dummyValidator.get("description")).     assertEquals("xml:foo", dummyValidator.get("type")).     assertEquals("Started", dummyValidator.get("state")). }
false;public;3;3;;@Override public void transform(Message message, DataType from, DataType to) throws Exception { }
false;public;2;3;;@Override public void validate(Message message, DataType type) throws ValidationException { }
