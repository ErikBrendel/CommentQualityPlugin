commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testValidatorList() throws Exception {     String out = doTest(false).     assertTrue(out.contains("xml:foo")).     assertTrue(out.contains("java:" + this.getClass().getName())).     assertTrue(out.contains("custom")).     assertTrue(out.contains("Started")).     assertFalse(out.contains("ProcessorValidator[")).     assertFalse(out.contains("processor='validate(body)'")).     assertFalse(out.contains("processor='sendTo(direct://validator)'")).     assertFalse(out.contains("MyValidator[")). }
false;public;0;12;;@Test public void testValidatorListVerbose() throws Exception {     String out = doTest(true).     assertTrue(out.contains("xml:foo")).     assertTrue(out.contains("java:" + this.getClass().getName())).     assertTrue(out.contains("custom")).     assertTrue(out.contains("Started")).     assertTrue(out.contains("ProcessorValidator[")).     assertTrue(out.contains("processor='validate(body)'")).     assertTrue(out.contains("processor='sendTo(direct://validator)'")).     assertTrue(out.contains("MyValidator[")). }
false;private;1;32;;private String doTest(boolean verbose) throws Exception {     CamelContext context = new DefaultCamelContext().     EndpointValidatorDefinition evd = new EndpointValidatorDefinition().     evd.setType("xml:foo").     evd.setUri("direct:validator").     context.adapt(ModelCamelContext.class).getValidators().add(evd).     PredicateValidatorDefinition pvd = new PredicateValidatorDefinition().     pvd.setType(this.getClass()).     pvd.setExpression(new ExpressionDefinition(ExpressionBuilder.bodyExpression())).     context.adapt(ModelCamelContext.class).getValidators().add(pvd).     CustomValidatorDefinition cvd = new CustomValidatorDefinition().     cvd.setType("custom").     cvd.setClassName(MyValidator.class.getName()).     context.adapt(ModelCamelContext.class).getValidators().add(cvd).     context.setNameStrategy(new ExplicitCamelContextNameStrategy("foobar")).     context.start().     CamelController controller = new DummyCamelController(context).     OutputStream os = new ByteArrayOutputStream().     PrintStream ps = new PrintStream(os).     ValidatorListCommand command = new ValidatorListCommand(null, false, verbose, false).     command.execute(controller, ps, null).     String out = os.toString().     assertNotNull(out).     LOG.info("\n\n{}\n", out).     context.stop().     return out. }
false;public;2;4;;@Override public void validate(Message message, DataType type) throws ValidationException {     return. }
