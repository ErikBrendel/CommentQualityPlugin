commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testTransformerList() throws Exception {     String out = doTest(false).     assertTrue(out.contains("xml:foo")).     assertTrue(out.contains("json:bar")).     assertTrue(out.contains("java:" + this.getClass().getName())).     assertTrue(out.contains("xml:test")).     assertTrue(out.contains("custom")).     assertTrue(out.contains("Started")).     assertFalse(out.contains("ProcessorTransformer[")).     assertFalse(out.contains("DataFormatTransformer[")).     assertFalse(out.contains("MyTransformer[")). }
false;public;0;13;;@Test public void testTransformerListVerbose() throws Exception {     String out = doTest(true).     assertTrue(out.contains("xml:foo")).     assertTrue(out.contains("json:bar")).     assertTrue(out.contains("java:" + this.getClass().getName())).     assertTrue(out.contains("xml:test")).     assertTrue(out.contains("custom")).     assertTrue(out.contains("Started")).     assertTrue(out.contains("ProcessorTransformer[")).     assertTrue(out.contains("DataFormatTransformer[")).     assertTrue(out.contains("MyTransformer[")). }
false;private;1;34;;private String doTest(boolean verbose) throws Exception {     CamelContext context = new DefaultCamelContext().     EndpointTransformerDefinition etd = new EndpointTransformerDefinition().     etd.setFromType("xml:foo").     etd.setToType("json:bar").     etd.setUri("direct:transformer").     context.adapt(ModelCamelContext.class).getTransformers().add(etd).     DataFormatTransformerDefinition dftd = new DataFormatTransformerDefinition().     dftd.setFromType(this.getClass()).     dftd.setToType("xml:test").     dftd.setDataFormatType(new StringDataFormat()).     context.adapt(ModelCamelContext.class).getTransformers().add(dftd).     CustomTransformerDefinition ctd = new CustomTransformerDefinition().     ctd.setScheme("custom").     ctd.setClassName(MyTransformer.class.getName()).     context.adapt(ModelCamelContext.class).getTransformers().add(ctd).     context.setNameStrategy(new ExplicitCamelContextNameStrategy("foobar")).     context.start().     CamelController controller = new DummyCamelController(context).     OutputStream os = new ByteArrayOutputStream().     PrintStream ps = new PrintStream(os).     TransformerListCommand command = new TransformerListCommand(null, false, verbose, false).     command.execute(controller, ps, null).     String out = os.toString().     assertNotNull(out).     LOG.info("\n\n{}\n", out).     context.stop().     return out. }
false;public;3;4;;@Override public void transform(Message message, DataType from, DataType to) throws Exception {     return. }
