commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setBundleContext(BundleContext bundleContext) {     this.bundleContext = bundleContext. }
false;public;2;4;;@Override public int compare(CamelContext o1, CamelContext o2) {     return o1.getName().compareTo(o2.getName()). }
false;public;0;29;;@Override public List<CamelContext> getLocalCamelContexts() {     List<CamelContext> camelContexts = new ArrayList<>().     try {         ServiceReference<?>[] references = bundleContext.getServiceReferences(CamelContext.class.getName(), null).         if (references != null) {             for (ServiceReference<?> reference : references) {                 if (reference != null) {                     CamelContext camelContext = (CamelContext) bundleContext.getService(reference).                     if (camelContext != null) {                         camelContexts.add(camelContext).                     }                 }             }         }     } catch (Exception e) {         LOG.warn("Cannot retrieve the list of Camel contexts.", e).     }     // sort the list     Collections.sort(camelContexts, new Comparator<CamelContext>() {          @Override         public int compare(CamelContext o1, CamelContext o2) {             return o1.getName().compareTo(o2.getName()).         }     }).     return camelContexts. }
false;public;0;24;;@Override public List<Map<String, String>> getCamelContexts() throws Exception {     List<Map<String, String>> answer = new ArrayList<>().     List<CamelContext> camelContexts = getLocalCamelContexts().     for (CamelContext camelContext : camelContexts) {         Map<String, String> row = new LinkedHashMap<>().         row.put("name", camelContext.getName()).         row.put("state", camelContext.getStatus().name()).         row.put("uptime", camelContext.getUptime()).         if (camelContext.getExtension(ManagedCamelContext.class).getManagedCamelContext() != null) {             row.put("exchangesTotal", "" + camelContext.getExtension(ManagedCamelContext.class).getManagedCamelContext().getExchangesTotal()).             row.put("exchangesInflight", "" + camelContext.getExtension(ManagedCamelContext.class).getManagedCamelContext().getExchangesInflight()).             row.put("exchangesFailed", "" + camelContext.getExtension(ManagedCamelContext.class).getManagedCamelContext().getExchangesFailed()).         } else {             row.put("exchangesTotal", "0").             row.put("exchangesInflight", "0").             row.put("exchangesFailed", "0").         }         answer.add(row).     }     return answer. }
false;public;1;10;;@Override public void startContext(String camelContextName) throws Exception {     final CamelContext context = getLocalCamelContext(camelContextName).     if (context != null) {         ObjectHelper.callWithTCCL(() -> {             context.start().             return null.         }, getClassLoader(context)).     } }
false;public;1;10;;@Override public void resumeContext(String camelContextName) throws Exception {     final CamelContext context = getLocalCamelContext(camelContextName).     if (context != null) {         ObjectHelper.callWithTCCL(() -> {             context.resume().             return null.         }, getClassLoader(context)).     } }
false;public;2;10;;@Override public void startRoute(String camelContextName, final String routeId) throws Exception {     final CamelContext context = getLocalCamelContext(camelContextName).     if (context != null) {         ObjectHelper.callWithTCCL(() -> {             context.getRouteController().startRoute(routeId).             return null.         }, getClassLoader(context)).     } }
false;public;2;10;;@Override public void resumeRoute(String camelContextName, final String routeId) throws Exception {     final CamelContext context = getLocalCamelContext(camelContextName).     if (context != null) {         ObjectHelper.callWithTCCL(() -> {             context.getRouteController().resumeRoute(routeId).             return null.         }, getClassLoader(context)).     } }
true;private;1;3;/**  * Gets classloader associated with {@link CamelContext}  * @param context  * @return  */ ;/**  * Gets classloader associated with {@link CamelContext}  * @param context  * @return  */ private ClassLoader getClassLoader(CamelContext context) {     return context.getApplicationContextClassLoader(). }
