commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;5;/**  * Allow this route to be run as an application  */ ;/**  * Allow this route to be run as an application  */ public static void main(String[] args) throws Exception {     Main main = new Main().     main.setConfigClass(CamelPrometheusExample.class).     main.run(). }
false;protected;1;5;;@Override protected void setupCamelContext(CamelContext camelContext) {     camelContext.addRoutePolicyFactory(new MicrometerRoutePolicyFactory()).     camelContext.setMessageHistoryFactory(new MicrometerMessageHistoryFactory()). }
true;public;0;34;/**  * Set up registry. When using Spring Boot, this is provided for you, and you have to provide  * a bean of type MeterRegistryCustomizer in order to apply common tags, filters, etc.  */ ;/**  * Set up registry. When using Spring Boot, this is provided for you, and you have to provide  * a bean of type MeterRegistryCustomizer in order to apply common tags, filters, etc.  */ @Bean(name = MicrometerConstants.METRICS_REGISTRY_NAME) public PrometheusMeterRegistry meterRegistry() {     PrometheusMeterRegistry meterRegistry = new PrometheusMeterRegistry(PrometheusConfig.DEFAULT).     DistributionStatisticConfigFilter timerMeterFilter = new DistributionStatisticConfigFilter().andAppliesTo(ROUTE_POLICIES).orAppliesTo(MESSAGE_HISTORIES).setPublishPercentileHistogram(true).setMinimumExpectedDuration(Duration.ofMillis(1L)).setMaximumExpectedDuration(Duration.ofMillis(150L)).     DistributionStatisticConfigFilter summaryMeterFilter = new DistributionStatisticConfigFilter().andAppliesTo(DISTRIBUTION_SUMMARIES).setPublishPercentileHistogram(true).setMinimumExpectedValue(1L).setMaximumExpectedValue(100L).     meterRegistry.config().commonTags(Tags.of("application", "CamelPrometheusExample")).meterFilter(timerMeterFilter).meterFilter(summaryMeterFilter).     // Add JVM metrics. Using Spring Boot, these are added automatically     new ClassLoaderMetrics().bindTo(meterRegistry).     new JvmMemoryMetrics().bindTo(meterRegistry).     new JvmGcMetrics().bindTo(meterRegistry).     new ProcessorMetrics().bindTo(meterRegistry).     new JvmThreadMetrics().bindTo(meterRegistry).     return meterRegistry. }
