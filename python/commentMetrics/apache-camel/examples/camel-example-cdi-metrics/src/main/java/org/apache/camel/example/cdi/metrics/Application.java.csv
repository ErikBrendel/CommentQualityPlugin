commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@Override public void configure() {     onException().handled(true).maximumRedeliveries(2).logStackTrace(false).logExhausted(false).log(LoggingLevel.ERROR, "Failed processing ${body}").to("metrics:meter:redelivery?mark=2").to("metrics:meter:error").     from("timer:stream?period=1000").routeId("unreliable-service").setBody(header(Exchange.TIMER_COUNTER).prepend("event #")).log("Processing ${body}...").to("metrics:meter:generated").bean(UnreliableService.class).filter(header(Exchange.REDELIVERED)).log(LoggingLevel.WARN, "Processed ${body} after ${header.CamelRedeliveryCounter} retries").setHeader(MetricsConstants.HEADER_METER_MARK, header(Exchange.REDELIVERY_COUNTER)).to("metrics:meter:redelivery").end().log("Successfully processed ${body}").to("metrics:meter:success"). }
false;;2;6;;@Produces @Metric(name = "success-ratio") // Register a custom gauge that's the ratio of the 'success' meter on the 'generated' meter Gauge<Double> successRatio(Meter success, Meter generated) {     return () -> Ratio.of(success.getOneMinuteRate(), generated.getOneMinuteRate()).getValue(). }
false;;1;8;;@Produces @Singleton Slf4jReporter reporter(MetricRegistry registry) {     return Slf4jReporter.forRegistry(registry).convertRatesTo(TimeUnit.SECONDS).convertDurationsTo(TimeUnit.MILLISECONDS).build(). }
false;;2;3;;void onStart(@Observes CamelContextStartedEvent event, Slf4jReporter reporter) {     reporter.start(10L, TimeUnit.SECONDS). }
false;;1;3;;void onStop(@Disposes Slf4jReporter reporter) {     reporter.stop(). }
false;;1;4;;void configure(@Observes MetricsConfiguration config) {     // Force Metrics CDI to use absolute names     config.useAbsoluteName(true). }
