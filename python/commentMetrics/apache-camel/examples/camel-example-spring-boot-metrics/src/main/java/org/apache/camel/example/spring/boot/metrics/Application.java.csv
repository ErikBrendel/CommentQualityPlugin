# id;timestamp;commentText;codeText;commentWords;codeWords
Application -> @Bean(destroyMethod = "stop")     public GraphiteReporter graphiteReporter();1472813310;Create reporter bean and tell Spring to call stop() when shutting down._UPD must be enabled in carbon.conf__@return graphite reporter;@Bean(destroyMethod = "stop")_    public GraphiteReporter graphiteReporter() {_        final GraphiteSender graphite = new GraphiteUDP(new InetSocketAddress("localhost", 2003))__        final GraphiteReporter reporter = GraphiteReporter.forRegistry(metricRegistry).prefixedWith("camel-spring-boot").convertRatesTo(TimeUnit.SECONDS)_            .convertDurationsTo(TimeUnit.MILLISECONDS).filter(MetricFilter.ALL).build(graphite)__        reporter.start(5, TimeUnit.SECONDS)__        return reporter__    };create,reporter,bean,and,tell,spring,to,call,stop,when,shutting,down,upd,must,be,enabled,in,carbon,conf,return,graphite,reporter;bean,destroy,method,stop,public,graphite,reporter,graphite,reporter,final,graphite,sender,graphite,new,graphite,udp,new,inet,socket,address,localhost,2003,final,graphite,reporter,reporter,graphite,reporter,for,registry,metric,registry,prefixed,with,camel,spring,boot,convert,rates,to,time,unit,seconds,convert,durations,to,time,unit,milliseconds,filter,metric,filter,all,build,graphite,reporter,start,5,time,unit,seconds,return,reporter
Application -> @Bean(destroyMethod = "stop")     public GraphiteReporter graphiteReporter();1472813633;Create reporter bean and tell Spring to call stop() when shutting down._UPD must be enabled in carbon.conf__@return graphite reporter;@Bean(destroyMethod = "stop")_    public GraphiteReporter graphiteReporter() {_        final GraphiteSender graphite = new GraphiteUDP(new InetSocketAddress("localhost", 2003))__        final GraphiteReporter reporter = GraphiteReporter.forRegistry(metricRegistry).prefixedWith("camel-spring-boot").convertRatesTo(TimeUnit.SECONDS)_            .convertDurationsTo(TimeUnit.MILLISECONDS).filter(MetricFilter.ALL).build(graphite)__        reporter.start(5, TimeUnit.SECONDS)__        return reporter__    };create,reporter,bean,and,tell,spring,to,call,stop,when,shutting,down,upd,must,be,enabled,in,carbon,conf,return,graphite,reporter;bean,destroy,method,stop,public,graphite,reporter,graphite,reporter,final,graphite,sender,graphite,new,graphite,udp,new,inet,socket,address,localhost,2003,final,graphite,reporter,reporter,graphite,reporter,for,registry,metric,registry,prefixed,with,camel,spring,boot,convert,rates,to,time,unit,seconds,convert,durations,to,time,unit,milliseconds,filter,metric,filter,all,build,graphite,reporter,start,5,time,unit,seconds,return,reporter
Application -> @Bean(destroyMethod = "stop")     public GraphiteReporter graphiteReporter();1550214039;Create reporter bean and tell Spring to call stop() when shutting down._UPD must be enabled in carbon.conf__@return graphite reporter;@Bean(destroyMethod = "stop")_    public GraphiteReporter graphiteReporter() {_        final GraphiteSender graphite = new GraphiteUDP(new InetSocketAddress("localhost", 2003))__        final GraphiteReporter reporter = GraphiteReporter.forRegistry(metricRegistry()).prefixedWith("camel-spring-boot").convertRatesTo(TimeUnit.SECONDS)_            .convertDurationsTo(TimeUnit.MILLISECONDS).filter(MetricFilter.ALL).build(graphite)__        reporter.start(5, TimeUnit.SECONDS)__        return reporter__    };create,reporter,bean,and,tell,spring,to,call,stop,when,shutting,down,upd,must,be,enabled,in,carbon,conf,return,graphite,reporter;bean,destroy,method,stop,public,graphite,reporter,graphite,reporter,final,graphite,sender,graphite,new,graphite,udp,new,inet,socket,address,localhost,2003,final,graphite,reporter,reporter,graphite,reporter,for,registry,metric,registry,prefixed,with,camel,spring,boot,convert,rates,to,time,unit,seconds,convert,durations,to,time,unit,milliseconds,filter,metric,filter,all,build,graphite,reporter,start,5,time,unit,seconds,return,reporter
Application -> @Bean(destroyMethod = "stop")     public GraphiteReporter graphiteReporter();1550214124;Create reporter bean and tell Spring to call stop() when shutting down._UPD must be enabled in carbon.conf__@return graphite reporter;@Bean(destroyMethod = "stop")_    public GraphiteReporter graphiteReporter() {_        final GraphiteSender graphite = new GraphiteUDP(new InetSocketAddress("localhost", 2003))__        final GraphiteReporter reporter = GraphiteReporter.forRegistry(metricRegistry()).prefixedWith("camel-spring-boot").convertRatesTo(TimeUnit.SECONDS)_            .convertDurationsTo(TimeUnit.MILLISECONDS).filter(MetricFilter.ALL).build(graphite)__        reporter.start(5, TimeUnit.SECONDS)__        return reporter__    };create,reporter,bean,and,tell,spring,to,call,stop,when,shutting,down,upd,must,be,enabled,in,carbon,conf,return,graphite,reporter;bean,destroy,method,stop,public,graphite,reporter,graphite,reporter,final,graphite,sender,graphite,new,graphite,udp,new,inet,socket,address,localhost,2003,final,graphite,reporter,reporter,graphite,reporter,for,registry,metric,registry,prefixed,with,camel,spring,boot,convert,rates,to,time,unit,seconds,convert,durations,to,time,unit,milliseconds,filter,metric,filter,all,build,graphite,reporter,start,5,time,unit,seconds,return,reporter
Application -> @Bean     public RouteBuilder fastRoute();1472813310;@return timed route that logs output every 2 seconds;@Bean_    public RouteBuilder fastRoute() {_        return new RouteBuilder() {_            @Override_            public void configure() throws Exception {_                from("timer://foo?period=2000").routeId("fast-route").setBody().constant("Fast hello world!").log("${body}")__            }_        }__    };return,timed,route,that,logs,output,every,2,seconds;bean,public,route,builder,fast,route,return,new,route,builder,override,public,void,configure,throws,exception,from,timer,foo,period,2000,route,id,fast,route,set,body,constant,fast,hello,world,log,body
Application -> @Bean     public RouteBuilder fastRoute();1472813633;@return timed route that logs output every 2 seconds;@Bean_    public RouteBuilder fastRoute() {_        return new RouteBuilder() {_            @Override_            public void configure() throws Exception {_                from("timer://foo?period=2000").routeId("fast-route").setBody().constant("Fast hello world!").log("${body}")__            }_        }__    };return,timed,route,that,logs,output,every,2,seconds;bean,public,route,builder,fast,route,return,new,route,builder,override,public,void,configure,throws,exception,from,timer,foo,period,2000,route,id,fast,route,set,body,constant,fast,hello,world,log,body
Application -> @Bean     public RouteBuilder fastRoute();1550214039;@return timed route that logs output every 2 seconds;@Bean_    public RouteBuilder fastRoute() {_        return new RouteBuilder() {_            @Override_            public void configure() throws Exception {_                from("timer://foo?period=2000").routeId("fast-route").setBody().constant("Fast hello world!").log("${body}")__            }_        }__    };return,timed,route,that,logs,output,every,2,seconds;bean,public,route,builder,fast,route,return,new,route,builder,override,public,void,configure,throws,exception,from,timer,foo,period,2000,route,id,fast,route,set,body,constant,fast,hello,world,log,body
Application -> @Bean     public RouteBuilder fastRoute();1550214124;@return timed route that logs output every 2 seconds;@Bean_    public RouteBuilder fastRoute() {_        return new RouteBuilder() {_            @Override_            public void configure() throws Exception {_                from("timer://foo?period=2000").routeId("fast-route").setBody().constant("Fast hello world!").log("${body}")__            }_        }__    };return,timed,route,that,logs,output,every,2,seconds;bean,public,route,builder,fast,route,return,new,route,builder,override,public,void,configure,throws,exception,from,timer,foo,period,2000,route,id,fast,route,set,body,constant,fast,hello,world,log,body
Application -> @Bean     public RouteBuilder slowRoute();1472813310;@return timed route that logs output every 6 seconds;@Bean_    public RouteBuilder slowRoute() {_        return new RouteBuilder() {_            @Override_            public void configure() throws Exception {_                from("timer://foo?period=6000").routeId("slow-route").setBody().constant("Slow hello world!").log("${body}")__            }_        }__    };return,timed,route,that,logs,output,every,6,seconds;bean,public,route,builder,slow,route,return,new,route,builder,override,public,void,configure,throws,exception,from,timer,foo,period,6000,route,id,slow,route,set,body,constant,slow,hello,world,log,body
Application -> @Bean     public RouteBuilder slowRoute();1472813633;@return timed route that logs output every 6 seconds;@Bean_    public RouteBuilder slowRoute() {_        return new RouteBuilder() {_            @Override_            public void configure() throws Exception {_                from("timer://foo?period=6000").routeId("slow-route").setBody().constant("Slow hello world!").log("${body}")__            }_        }__    };return,timed,route,that,logs,output,every,6,seconds;bean,public,route,builder,slow,route,return,new,route,builder,override,public,void,configure,throws,exception,from,timer,foo,period,6000,route,id,slow,route,set,body,constant,slow,hello,world,log,body
Application -> @Bean     public RouteBuilder slowRoute();1550214039;@return timed route that logs output every 6 seconds;@Bean_    public RouteBuilder slowRoute() {_        return new RouteBuilder() {_            @Override_            public void configure() throws Exception {_                from("timer://foo?period=6000").routeId("slow-route").setBody().constant("Slow hello world!").log("${body}")__            }_        }__    };return,timed,route,that,logs,output,every,6,seconds;bean,public,route,builder,slow,route,return,new,route,builder,override,public,void,configure,throws,exception,from,timer,foo,period,6000,route,id,slow,route,set,body,constant,slow,hello,world,log,body
Application -> @Bean     public RouteBuilder slowRoute();1550214124;@return timed route that logs output every 6 seconds;@Bean_    public RouteBuilder slowRoute() {_        return new RouteBuilder() {_            @Override_            public void configure() throws Exception {_                from("timer://foo?period=6000").routeId("slow-route").setBody().constant("Slow hello world!").log("${body}")__            }_        }__    };return,timed,route,that,logs,output,every,6,seconds;bean,public,route,builder,slow,route,return,new,route,builder,override,public,void,configure,throws,exception,from,timer,foo,period,6000,route,id,slow,route,set,body,constant,slow,hello,world,log,body
Application -> public static void main(String[] args);1472813310;@param args no command line args required;public static void main(String[] args) {_        LOG.info(" *** Starting Camel Metrics Example Application ***")__        SpringApplication.run(Application.class, args)__    };param,args,no,command,line,args,required;public,static,void,main,string,args,log,info,starting,camel,metrics,example,application,spring,application,run,application,class,args
Application -> public static void main(String[] args);1472813633;@param args no command line args required;public static void main(String[] args) {_        LOG.info(" *** Starting Camel Metrics Example Application ***")__        SpringApplication.run(Application.class, args)__    };param,args,no,command,line,args,required;public,static,void,main,string,args,log,info,starting,camel,metrics,example,application,spring,application,run,application,class,args
Application -> public static void main(String[] args);1550214039;@param args no command line args required;public static void main(String[] args) {_        LOG.info(" *** Starting Camel Metrics Example Application ***")__        SpringApplication.run(Application.class, args)__    };param,args,no,command,line,args,required;public,static,void,main,string,args,log,info,starting,camel,metrics,example,application,spring,application,run,application,class,args
Application -> public static void main(String[] args);1550214124;@param args no command line args required;public static void main(String[] args) {_        LOG.info(" *** Starting Camel Metrics Example Application ***")__        SpringApplication.run(Application.class, args)__    };param,args,no,command,line,args,required;public,static,void,main,string,args,log,info,starting,camel,metrics,example,application,spring,application,run,application,class,args
