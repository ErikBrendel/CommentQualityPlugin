commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;4;/**  * @param args no command line args required  */ ;/**  * @param args no command line args required  */ public static void main(String[] args) {     LOG.info(" *** Starting Camel Metrics Example Application ***").     SpringApplication.run(Application.class, args). }
true;public;0;8;/**  * Create reporter bean and tell Spring to call stop() when shutting down.  * UPD must be enabled in carbon.conf  *  * @return graphite reporter  */ ;/**  * Create reporter bean and tell Spring to call stop() when shutting down.  * UPD must be enabled in carbon.conf  *  * @return graphite reporter  */ @Bean(destroyMethod = "stop") public GraphiteReporter graphiteReporter() {     final GraphiteSender graphite = new GraphiteUDP(new InetSocketAddress("localhost", 2003)).     final GraphiteReporter reporter = GraphiteReporter.forRegistry(metricRegistry()).prefixedWith("camel-spring-boot").convertRatesTo(TimeUnit.SECONDS).convertDurationsTo(TimeUnit.MILLISECONDS).filter(MetricFilter.ALL).build(graphite).     reporter.start(5, TimeUnit.SECONDS).     return reporter. }
false;public;0;4;;@Override public void configure() throws Exception {     from("timer://foo?period=6000").routeId("slow-route").setBody().constant("Slow hello world!").log("${body}"). }
true;public;0;9;/**  * @return timed route that logs output every 6 seconds  */ ;/**  * @return timed route that logs output every 6 seconds  */ @Bean public RouteBuilder slowRoute() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer://foo?period=6000").routeId("slow-route").setBody().constant("Slow hello world!").log("${body}").         }     }. }
false;public;0;4;;@Override public void configure() throws Exception {     from("timer://foo?period=2000").routeId("fast-route").setBody().constant("Fast hello world!").log("${body}"). }
true;public;0;9;/**  * @return timed route that logs output every 2 seconds  */ ;/**  * @return timed route that logs output every 2 seconds  */ @Bean public RouteBuilder fastRoute() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer://foo?period=2000").routeId("fast-route").setBody().constant("Fast hello world!").log("${body}").         }     }. }
false;;0;4;;@Bean MetricRegistry metricRegistry() {     return new MetricRegistry(). }
false;public;1;7;;@Override public void beforeApplicationStart(CamelContext context) {     LOG.info("Configuring Camel metrics on all routes").     MetricsRoutePolicyFactory fac = new MetricsRoutePolicyFactory().     fac.setMetricsRegistry(metricRegistry()).     context.addRoutePolicyFactory(fac). }
false;public;1;4;;@Override public void afterApplicationStart(CamelContext camelContext) { // noop }
false;;0;17;;@Bean CamelContextConfiguration contextConfiguration() {     return new CamelContextConfiguration() {          @Override         public void beforeApplicationStart(CamelContext context) {             LOG.info("Configuring Camel metrics on all routes").             MetricsRoutePolicyFactory fac = new MetricsRoutePolicyFactory().             fac.setMetricsRegistry(metricRegistry()).             context.addRoutePolicyFactory(fac).         }          @Override         public void afterApplicationStart(CamelContext camelContext) {         // noop         }     }. }
