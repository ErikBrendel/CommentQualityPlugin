commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;15;;@BeforeClass public static void setupFreePort() throws Exception {     // find a free port number, and write that in the custom.properties file     // which we will use for the unit tests, to avoid port number in use problems     int port = AvailablePortFinder.getNextAvailable().     String bank1 = "tcp.port=" + port.     File custom = new File("target/custom.properties").     FileOutputStream fos = new FileOutputStream(custom).     fos.write(bank1.getBytes()).     fos.close().     appCtx = new ClassPathXmlApplicationContext("/META-INF/spring/camel-server.xml", "camel-client-remoting.xml").     appCtx.start(). }
false;public,static;0;4;;@AfterClass public static void stopSpring() {     appCtx.stop(). }
false;public;0;10;;@Test public void testCamelRemotingInvocation() {     // just get the proxy to the service and we as the client can use the "proxy" as it was     // a local object we are invoking. Camel will under the covers do the remote communication     // to the remote ActiveMQ server and fetch the response.     Multiplier multiplier = appCtx.getBean("multiplierProxy", Multiplier.class).     int response = multiplier.multiply(33).     assertEquals("Get a wrong response", 99, response). }
