commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;16;;public static void main(String[] args) throws Exception {     Main main = new Main().     main.addRouteBuilder(new MyRouteBuilder()).     // setup correlation manager and its timeout (when a request has not received a response within the given time millis)     MyCorrelationManager manager = new MyCorrelationManager().     // set timeout for each request message that did not receive a reply message     manager.setTimeout(5000).     // set the logging level when a timeout was hit, ny default its DEBUG     manager.setTimeoutLoggingLevel(LoggingLevel.INFO).     main.bind("myEncoder", new MyCodecEncoderFactory()).     main.bind("myDecoder", new MyCodecDecoderFactory()).     main.bind("myManager", manager).     main.run(args). }
false;public;0;3;;public int increment() {     return ++counter. }
false;public;0;4;;public String word() {     int ran = new Random().nextInt(words.length).     return words[ran]. }
false;public;0;25;;@Override public void configure() throws Exception {     // lets build a special custom error message for timeout     onException(ExchangeTimedOutException.class).continued(true).setBody(simple("#${header.corId}:${header.word}-Time out error!!!")).     from("timer:trigger").setHeader("corId", method(this, "increment")).setHeader("word", method(this, "word")).setBody(simple("#${header.corId}:${header.word}")).log("Request:  ${id}:${body}").to("netty4:tcp://localhost:4444?sync=true&encoders=#myEncoder&decoders=#myDecoder" + "&producerPoolEnabled=false&correlationManager=#myManager").log("Response: ${id}:${body}"). }
