commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(HazelcastConstants.OPERATION, HazelcastOperation.PUBLISH).     String payload = "Test " + UUID.randomUUID().     exchange.getIn().setBody(payload). }
false;public;0;29;;@Override public void configure() throws Exception {     // setup hazelcast     ClientConfig config = new ClientConfig().     config.getNetworkConfig().addAddress("hazelcast").     config.getNetworkConfig().setSSLConfig(new SSLConfig().setEnabled(false)).     config.setGroupConfig(new GroupConfig("someGroup")).     HazelcastInstance instance = HazelcastClient.newHazelcastClient(config).     // setup camel hazelcast     HazelcastTopicComponent hazelcast = new HazelcastTopicComponent().     hazelcast.setHazelcastInstance(instance).     getContext().addComponent("hazelcast-topic", hazelcast).     from("timer:foo?period=5000").log("Producer side: Sending data to Hazelcast topic..").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(HazelcastConstants.OPERATION, HazelcastOperation.PUBLISH).             String payload = "Test " + UUID.randomUUID().             exchange.getIn().setBody(payload).         }     }).to("hazelcast-topic:foo").     from("hazelcast-topic:foo").log("Consumer side: Detected following action: $simple{in.header.CamelHazelcastListenerAction}"). }
