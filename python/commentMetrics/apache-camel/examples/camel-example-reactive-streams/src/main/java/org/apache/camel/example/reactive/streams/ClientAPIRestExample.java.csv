commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@PostConstruct public void setup() {     // Rest endpoint to retrieve all orders: http://localhost:8080/camel/orders     camel.process("rest:get:orders", exchange -> Flux.from(exchange).flatMap(ex -> allOrders())).     // Rest endpoint to retrieve an order.     // Try: http://localhost:8080/camel/orders/1     // Or: http://localhost:8080/camel/orders/xxx     camel.process("rest:get:orders/{orderId}", exchange -> Flux.from(exchange).map(ex -> ex.getIn().getHeader("orderId", String.class)).flatMap(this::toOrderInfo).map(Object.class::cast).switchIfEmpty(Flux.from(exchange).doOnNext(ex -> ex.getOut().setBody("Not found")).doOnNext(ex -> ex.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 404)))). }
false;private;1;7;;private Publisher<String> toOrderInfo(String orderId) {     // Simulate a retrieval from DB     return allOrders().filter(// Ensure the order exists     o -> o.equals(orderId)).map(// Add detailed info     "Detailed Info on "::concat).next(). }
false;private;0;3;;private Flux<String> allOrders() {     return Flux.just("1", "2"). }
