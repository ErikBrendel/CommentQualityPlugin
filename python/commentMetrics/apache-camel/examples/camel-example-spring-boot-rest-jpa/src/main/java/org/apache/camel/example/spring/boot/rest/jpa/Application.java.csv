commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static void main(String[] args) {     SpringApplication.run(Application.class, args). }
false;public;0;20;;@Override public void configure() {     restConfiguration().contextPath("/camel-rest-jpa").apiContextPath("/api-doc").apiProperty("api.title", "Camel REST API").apiProperty("api.version", "1.0").apiProperty("cors", "true").apiContextRouteId("doc-api").port(env.getProperty("server.port", "8080")).bindingMode(RestBindingMode.json).     rest("/books").description("Books REST service").get("/").description("The list of all the books").route().routeId("books-api").bean(Database.class, "findBooks").endRest().get("order/{id}").description("Details of an order by id").route().routeId("order-api").bean(Database.class, "findOrder(${header.id})"). }
false;public;0;17;;@Override public void configure() {     // A first route generates some orders and queue them in DB     from("timer:new-order?delay=1s&period={{example.generateOrderPeriod:2s}}").routeId("generate-order").bean("orderService", "generateOrder").to("jpa:org.apache.camel.example.spring.boot.rest.jpa.Order").log("Inserted new order ${body.id}").     // A second route polls the DB for new orders and processes them     from("jpa:org.apache.camel.example.spring.boot.rest.jpa.Order" + "?consumer.namedQuery=new-orders" + "&consumer.delay={{example.processOrderPeriod:5s}}" + "&consumeDelete=false").routeId("process-order").log("Processed order #id ${body.id} with ${body.amount} copies of the «${body.book.description}» book"). }
