commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void newOrderTest() {     // Wait for maximum 5s until the first order gets inserted and processed     NotifyBuilder notify = new NotifyBuilder(camelContext).fromRoute("generate-order").whenDone(1).and().fromRoute("process-order").whenDone(1).create().     assertThat(notify.matches(5, TimeUnit.SECONDS)).isTrue().     // Then call the REST API     ResponseEntity<Order> response = restTemplate.getForEntity("/camel-rest-jpa/books/order/1", Order.class).     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK).     Order order = response.getBody().     assertThat(order.getId()).isEqualTo(1).     assertThat(order.getAmount()).isBetween(1, 10).     assertThat(order.getBook().getItem()).isIn("Camel", "ActiveMQ").     assertThat(order.getBook().getDescription()).isIn("Camel in Action", "ActiveMQ in Action").     assertThat(order.isProcessed()).isTrue(). }
false;public;0;15;;@Test public void booksTest() {     ResponseEntity<List<Book>> response = restTemplate.exchange("/camel-rest-jpa/books", HttpMethod.GET, null, new ParameterizedTypeReference<List<Book>>() {     }).     assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK).     List<Book> books = response.getBody().     assertThat(books).hasSize(2).     assertThat(books).element(0).hasFieldOrPropertyWithValue("item", "Camel").hasFieldOrPropertyWithValue("description", "Camel in Action").     assertThat(books).element(1).hasFieldOrPropertyWithValue("item", "ActiveMQ").hasFieldOrPropertyWithValue("description", "ActiveMQ in Action"). }
