commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Override public void configure() {     from("timer:client?period=10s").routeId("kubernetes-client").onException(KubernetesClientException.class).handled(true).log(LoggingLevel.ERROR, "${exception.message}").log("Stopping the Kubernetes route...").to("controlbus:route?routeId=kubernetes-client&action=stop&async=true&loggingLevel=DEBUG").end().to("kubernetes-pods://{{kubernetes-master-url:{{env:KUBERNETES_MASTER}}}}?oauthToken={{kubernetes-oauth-token:}}&operation=listPods").log("We currently have ${body.size()} pods:").process(exchange -> {         List<Pod> pods = exchange.getIn().getBody(List.class).         // Compute the length of the longer pod name         String tty = "%-" + (pods.stream().mapToInt(pod -> pod.getMetadata().getName().length()).max().orElse(30) + 2) + "s %-9s %-9s %-10s %s".         // Emulates the output of 'kubectl get pods'         System.out.println(String.format(tty, "NAME", "READY", "STATUS", "RESTARTS", "AGE")).         pods.stream().map(pod -> String.format(tty, pod.getMetadata().getName(), pod.getStatus().getContainerStatuses().stream().filter(ContainerStatus::getReady).count() + "/" + pod.getStatus().getContainerStatuses().size(), pod.getStatus().getPhase(), pod.getStatus().getContainerStatuses().stream().mapToInt(ContainerStatus::getRestartCount).sum(), formatDuration(Duration.between(ZonedDateTime.parse(pod.getStatus().getStartTime()), ZonedDateTime.now())))).forEach(System.out::println).     }). }
true;static;1;11;// Let's format duration the kubectl way! ;// Let's format duration the kubectl way! static String formatDuration(Duration duration) {     if (Duration.ofDays(1).compareTo(duration) < 0) {         return duration.toDays() + "d".     } else if (Duration.ofHours(1).compareTo(duration) < 0) {         return duration.toHours() + "h".     } else if (Duration.ofMinutes(1).compareTo(duration) < 0) {         return duration.toMinutes() + "m".     } else {         return duration.getSeconds() + "s".     } }
false;;0;9;;@Produces @ApplicationScoped @Named("properties") // "properties" component bean that Camel uses to lookup properties PropertiesComponent properties() {     PropertiesComponent component = new PropertiesComponent().     component.setLocation("classpath:application.properties").     return component. }
