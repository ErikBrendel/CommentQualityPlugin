commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;45;/**  * Allow this route to be run as an application  */ ;/**  * Allow this route to be run as an application  */ public static void main(String[] args) throws Exception {     System.setProperty("soapEndpointPort", "9006").     System.setProperty("restEndpointPort", "9002").     CamelContext context = new DefaultCamelContext().     PropertiesComponent pc = new PropertiesComponent().     context.addComponent("properties", pc).     context.start().     context.addRoutes(new CamelRouterBuilder()).     Thread.sleep(1000).     // JAXWSClient invocation     JAXWSClient jaxwsClient = new JAXWSClient().     BookStore bookStore = jaxwsClient.getBookStore().     bookStore.addBook(new Book("Camel User Guide", 123L)).     Book book = bookStore.getBook(123L).     System.out.println("Get the book with id 123. " + book).     try {         book = bookStore.getBook(124L).         System.out.println("Get the book with id 124. " + book).     } catch (Exception exception) {         System.out.println("Expected exception received: " + exception).     }     // JAXRSClient invocation     JAXRSClient jaxrsClient = new JAXRSClient().     bookStore = jaxrsClient.getBookStore().     bookStore.addBook(new Book("Karaf User Guide", 124L)).     book = bookStore.getBook(124L).     System.out.println("Get the book with id 124. " + book).     try {         book = bookStore.getBook(126L).         System.out.println("Get the book with id 126. " + book).     } catch (Exception exception) {         System.out.println("Expected exception received: " + exception).     }     Thread.sleep(1000).     context.stop().     System.exit(0). }
false;public;0;11;;public void configure() {     errorHandler(noErrorHandler()).     // populate the message queue with some messages     from(SOAP_ENDPOINT_URI).process(new MappingProcessor(new BookStoreImpl(false))).     from(REST_ENDPOINT_URI).process(new MappingProcessor(new BookStoreImpl(true))). }
false;public;1;10;;public void process(Exchange exchange) throws Exception {     String operationName = exchange.getIn().getHeader(CxfConstants.OPERATION_NAME, String.class).     Method method = findMethod(operationName, exchange.getIn().getBody(Object[].class)).     try {         Object response = method.invoke(instance, exchange.getIn().getBody(Object[].class)).         exchange.getOut().setBody(response).     } catch (InvocationTargetException e) {         throw (Exception) e.getCause().     } }
false;private;2;3;;private Method findMethod(String operationName, Object[] parameters) throws SecurityException, NoSuchMethodException {     return beanClass.getMethod(operationName, getParameterTypes(parameters)). }
false;private;1;12;;private Class<?>[] getParameterTypes(Object[] parameters) {     if (parameters == null) {         return new Class[0].     }     Class<?>[] answer = new Class[parameters.length].     int i = 0.     for (Object object : parameters) {         answer[i] = object.getClass().         i++.     }     return answer. }
