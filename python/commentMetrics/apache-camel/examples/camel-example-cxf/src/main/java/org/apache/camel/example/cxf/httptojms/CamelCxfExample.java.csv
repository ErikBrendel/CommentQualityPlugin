commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Override public void configure() throws Exception {     // Set system properties for use with Camel property placeholders for running the example tests.     System.setProperty("routerPort", String.valueOf(AvailablePortFinder.getNextAvailable())).     System.setProperty("servicePort", String.valueOf(AvailablePortFinder.getNextAvailable())).     CxfComponent cxfComponent = new CxfComponent(getContext()).     CxfEndpoint serviceEndpoint = new CxfEndpoint(SERVICE_ADDRESS, cxfComponent).     serviceEndpoint.setServiceClass(Greeter.class).     // Here we just pass the exception back, don't need to use errorHandler     errorHandler(noErrorHandler()).     from(ROUTER_ENDPOINT_URI).to(serviceEndpoint). }
false;public;0;8;;public void configure() {     CxfComponent cxfComponent = new CxfComponent(getContext()).     CxfEndpoint serviceEndpoint = new CxfEndpoint(SERVICE_ADDRESS, cxfComponent).     serviceEndpoint.setServiceClass(Greeter.class).     // Here we just pass the exception back, don't need to use errorHandler     errorHandler(noErrorHandler()).     from(ROUTER_ENDPOINT_URI).to(serviceEndpoint). }
false;public,static;1;53;;public static void main(String[] args) throws Exception {     // Set system properties for use with Camel property placeholders for running the examples.     System.setProperty("routerPort", "9001").     System.setProperty("servicePort", "9003").     // START SNIPPET: e1     CamelContext context = new DefaultCamelContext().     // END SNIPPET: e1     PropertiesComponent pc = new PropertiesComponent().     context.addComponent("properties", pc).     // Set up the JMS broker and the CXF SOAP over JMS server     // START SNIPPET: e2     JmsBroker broker = new JmsBroker().     Server server = new Server().     try {         broker.start().         server.start().         // END SNIPPET: e2         // Add some configuration by hand ...         // START SNIPPET: e3         context.addRoutes(new RouteBuilder() {              public void configure() {                 CxfComponent cxfComponent = new CxfComponent(getContext()).                 CxfEndpoint serviceEndpoint = new CxfEndpoint(SERVICE_ADDRESS, cxfComponent).                 serviceEndpoint.setServiceClass(Greeter.class).                 // Here we just pass the exception back, don't need to use errorHandler                 errorHandler(noErrorHandler()).                 from(ROUTER_ENDPOINT_URI).to(serviceEndpoint).             }         }).         // END SNIPPET: e3         String address = ROUTER_ADDRESS.replace("{{routerPort}}", System.getProperty("routerPort")).         // Starting the routing context         // Using the CXF Client to kick off the invocations         // START SNIPPET: e4         context.start().         Client client = new Client(address + "?wsdl").         // END SNIPPET: e4         // Now everything is set up - let's start the context         client.invoke().         Thread.sleep(1000).         context.stop().     } catch (Exception ex) {         ex.printStackTrace().     } finally {         server.stop().         broker.stop().         System.exit(0).     } }
