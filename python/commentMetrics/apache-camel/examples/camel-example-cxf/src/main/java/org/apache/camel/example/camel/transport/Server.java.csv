commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void prepare() throws Exception {     // Set a system property used to configure the server.  The examples all run on port 9091.     // however, the unit tests must run on a dynamic port.  As such, we make the port configurable     // in the Spring context.     System.setProperty("port", "9001").     // setup the Camel context for the Camel transport     // START SNIPPET: e1     SpringBusFactory bf = new SpringBusFactory().     BusFactory.setDefaultBus(null).     Bus bus = bf.createBus("/org/apache/camel/example/camel/transport/CamelDestination.xml").     BusFactory.setDefaultBus(bus). // END SNIPPET: e1 }
false;public;0;15;;public void start() throws Exception {     // start the endpoints     System.out.println("Starting Server").     // START SNIPPET: e2     GreeterImpl implementor = new GreeterImpl().     implementor.setSuffix("EndpointA").     String address = "camel://direct:EndpointA".     endpointA = Endpoint.publish(address, implementor).     implementor = new GreeterImpl().     implementor.setSuffix("EndpointB").     address = "camel://direct:EndpointB".     endpointB = Endpoint.publish(address, implementor). // END SNIPPET: e2 }
false;public;0;8;;public void stop() {     if (endpointA != null) {         endpointA.stop().     }     if (endpointB != null) {         endpointB.stop().     } }
false;public,static;1;12;;public static void main(String[] args) throws Exception {     Server server = new Server().     server.prepare().     server.start().     System.out.println("Server ready...").     Thread.sleep(5 * 60 * 1000).     System.out.println("Server exiting").     server.stop().     System.exit(0). }
