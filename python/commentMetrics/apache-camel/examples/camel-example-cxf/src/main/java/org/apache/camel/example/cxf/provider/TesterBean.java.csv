commented;modifiers;parameterAmount;loc;comment;code
false;public;1;22;;public SOAPMessage processSOAP(Exchange exchange) {     // Since the Camel-CXF endpoint uses a list to store the parameters     // and bean component uses the bodyAs expression to get the value     // we'll need to deal with the parameters ourself     SOAPMessage soapMessage = (SOAPMessage) exchange.getIn().getBody(List.class).get(0).     if (soapMessage == null) {         System.out.println("Incoming null message detected...").         return createDefaultSoapMessage("Greetings from Apache Camel!!!!", "null").     }     try {         SOAPPart sp = soapMessage.getSOAPPart().         SOAPEnvelope se = sp.getEnvelope().         SOAPBody sb = se.getBody().         String requestText = sb.getFirstChild().getTextContent().         System.out.println(requestText).         return createDefaultSoapMessage("Greetings from Apache Camel!!!!", requestText).     } catch (Exception e) {         e.printStackTrace().         return createDefaultSoapMessage("Greetings from Apache Camel!!!!", e.getClass().getName()).     } }
false;public,static;2;18;;public static SOAPMessage createDefaultSoapMessage(String responseMessage, String requestMessage) {     try {         SOAPMessage soapMessage = MessageFactory.newInstance().createMessage().         SOAPBody body = soapMessage.getSOAPPart().getEnvelope().getBody().         QName payloadName = new QName("http://apache.org/hello_world_soap_http/types", "greetMeResponse", "ns1").         SOAPBodyElement payload = body.addBodyElement(payloadName).         SOAPElement message = payload.addChildElement("responseType").         message.addTextNode(responseMessage + " Request was  " + requestMessage).         return soapMessage.     } catch (SOAPException e) {         e.printStackTrace().         throw new RuntimeException(e).     } }
