commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void configure() {     from("test-jms:queue:test.queue").to("file://test"). }
false;public,static;1;43;;public static void main(String[] args) throws Exception {     // START SNIPPET: e1     CamelContext context = new DefaultCamelContext().     // END SNIPPET: e1     // Set up the ActiveMQ JMS Components     // START SNIPPET: e2     ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost?broker.persistent=false").     // Note we can explicit name the component     context.addComponent("test-jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory)).     // END SNIPPET: e2     // Add some configuration by hand ...     // START SNIPPET: e3     context.addRoutes(new RouteBuilder() {          public void configure() {             from("test-jms:queue:test.queue").to("file://test").         }     }).     // END SNIPPET: e3     // Camel template - a handy class for kicking off exchanges     // START SNIPPET: e4     ProducerTemplate template = context.createProducerTemplate().     // END SNIPPET: e4     // Now everything is set up - lets start the context     context.start().     // START SNIPPET: e5     for (int i = 0. i < 10. i++) {         template.sendBody("test-jms:queue:test.queue", "Test Message: " + i).     }     // END SNIPPET: e5     // wait a bit and then stop     Thread.sleep(1000).     context.stop(). }
