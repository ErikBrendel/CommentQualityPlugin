commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void beforeClass() throws Exception {     TestUtils.buildTestXml(). }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext ctx = super.createCamelContext().     ctx.disableJMX().     return ctx. }
false;protected;0;4;;@Override protected int getShutdownTimeout() {     return 300. }
false;public;0;7;;@Test public void test() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(TestUtils.getNumOfRecords()).create().     boolean matches = notify.matches(TestUtils.getMaxWaitTime(), TimeUnit.MILLISECONDS).     log.info("Processed XML file with {} records", TestUtils.getNumOfRecords()).     assertTrue("Test completed", matches). }
false;public;0;8;;@Override public void configure() throws Exception {     from("file:" + TestUtils.getBasePath() + "?readLock=changed&noop=true").split(body().tokenizeXML("record", "records")).streaming().stopOnException().to("log:org.apache.camel.example.bigxml?level=DEBUG&groupInterval=100&groupDelay=100&groupActiveOnly=false").end(). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:" + TestUtils.getBasePath() + "?readLock=changed&noop=true").split(body().tokenizeXML("record", "records")).streaming().stopOnException().to("log:org.apache.camel.example.bigxml?level=DEBUG&groupInterval=100&groupDelay=100&groupActiveOnly=false").end().         }     }. }
