commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext ctx = super.createCamelContext().     ctx.disableJMX().     return ctx. }
false;protected;0;4;;@Override protected int getShutdownTimeout() {     return 300. }
false;public;0;14;;@Test public void test() throws Exception {     MockEndpoint mock = context.getEndpoint("mock:result", MockEndpoint.class).     mock.expectedMessageCount(1).     mock.assertIsSatisfied().     Map<String, Integer> top20 = ((MyAggregationStrategy) mock.getReceivedExchanges().get(0).getIn().getHeader("myAggregation")).getTop20Artists().     top20.forEach((k, v) -> log.info("{}, {}", k, v)).     assertEquals(20, top20.size()).     assertEquals(35, (int) top20.get("madonna")).     assertEquals(26, (int) top20.get("elton john")).     assertEquals(17, (int) top20.get("the beatles")). }
false;public;0;24;;@Override public void configure() throws Exception {     // @formatter:off     from("file:" + BASEPATH + "?noop=true&idempotent=true").split(body().tokenize("\n")).streaming().parallelProcessing().choice().when(simple("${exchangeProperty.CamelSplitIndex} > 0")).doTry().unmarshal().bindy(BindyType.Csv, SongRecord.class).to("seda:aggregate").doCatch(Exception.class).setBody(simple("${exchangeProperty.CamelSplitIndex}:${body}")).transform(body().append("\n")).to("file:" + BASEPATH + "?fileName=waste.log&fileExist=append").end().     from("seda:aggregate?concurrentConsumers=10").bean(MyAggregationStrategy.class, "setArtistHeader").aggregate(new MyAggregationStrategy()).header("artist").completionPredicate(header("CamelSplitComplete").isEqualTo(true)).to("mock:result"). // @formatter:on }
false;protected;0;29;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // @formatter:off             from("file:" + BASEPATH + "?noop=true&idempotent=true").split(body().tokenize("\n")).streaming().parallelProcessing().choice().when(simple("${exchangeProperty.CamelSplitIndex} > 0")).doTry().unmarshal().bindy(BindyType.Csv, SongRecord.class).to("seda:aggregate").doCatch(Exception.class).setBody(simple("${exchangeProperty.CamelSplitIndex}:${body}")).transform(body().append("\n")).to("file:" + BASEPATH + "?fileName=waste.log&fileExist=append").end().             from("seda:aggregate?concurrentConsumers=10").bean(MyAggregationStrategy.class, "setArtistHeader").aggregate(new MyAggregationStrategy()).header("artist").completionPredicate(header("CamelSplitComplete").isEqualTo(true)).to("mock:result").         // @formatter:on         }     }. }
false;public;2;12;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     Message newIn = newExchange.getIn().     String artist = (String) newIn.getHeader("artist").     if (map.containsKey(artist)) {         map.put(artist, map.get(artist) + 1).     } else {         map.put(artist, 1).     }     newIn.setHeader("myAggregation", this).     return newExchange. }
false;public;2;3;;public void setArtistHeader(Exchange exchange, SongRecord song) {     exchange.getOut().setHeader("artist", song.getArtist()). }
false;public;0;8;;public Map<String, Integer> getTop20Artists() {     return map.entrySet().stream().sorted(Map.Entry.<String, Integer>comparingByValue().reversed()).limit(20).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new)). }
