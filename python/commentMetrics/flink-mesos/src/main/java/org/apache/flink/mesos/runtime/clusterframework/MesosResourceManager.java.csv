# id;timestamp;commentText;codeText;commentWords;codeWords
MesosResourceManager -> private void recoverWorkers() throws Exception;1498718472;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest,String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskRouter.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if(toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,router,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1498718493;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest,String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if(toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1498718494;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1501258657;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1501485811;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1501587915;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1503156321;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1503156481;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1504477043;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1508597556;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1509547920;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1509547921;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1510152676;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1516890809;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1516971021;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1517302807;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1517915730;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1519406528;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1521804760;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1525961911;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1530393587;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1530683488;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers() throws Exception;1532290976;Recover framework/worker information persisted by a prior incarnation of the RM.;private void recoverWorkers() throws Exception {_		_		_		final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()___		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())___				switch(worker.state()) {_					case New:_						_						workerStore.removeWorker(worker.taskID())__						break__					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recover,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,void,recover,workers,throws,exception,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,switch,worker,state,case,new,worker,store,remove,worker,worker,task,id,break,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1498718472;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			workerStore.start()__		}_		catch(Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		schedulerCallbackHandler = new SchedulerProxyV2(getSelf())___		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		}_		catch(Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(schedulerCallbackHandler, false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator()__		reconciliationCoordinator = createReconciliationCoordinator()__		taskRouter = createTaskRouter()___		_		try {_			recoverWorkers()__		}_		catch(Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,scheduler,callback,handler,new,scheduler,proxy,v2,get,self,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,scheduler,callback,handler,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,reconciliation,coordinator,create,reconciliation,coordinator,task,router,create,task,router,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1498718493;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			workerStore.start()__		}_		catch(Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		schedulerCallbackHandler = new SchedulerProxyV2(getSelf())___		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		}_		catch(Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(schedulerCallbackHandler, false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator()__		reconciliationCoordinator = createReconciliationCoordinator()__		taskMonitor = createTaskRouter()___		_		try {_			recoverWorkers()__		}_		catch(Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,scheduler,callback,handler,new,scheduler,proxy,v2,get,self,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,scheduler,callback,handler,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,reconciliation,coordinator,create,reconciliation,coordinator,task,monitor,create,task,router,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1498718494;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1501258657;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1501485811;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1501587915;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1503156321;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1503156481;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1504477043;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1508597556;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1509547920;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1509547921;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1510152676;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1516890809;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1516971021;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1517302807;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1517915730;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1519406528;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1521804760;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1525961911;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1530393587;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1530683488;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @Override 	protected void initialize() throws ResourceManagerException;1532290976;Starts the Mesos-specifics.;@Override_	protected void initialize() throws ResourceManagerException {_		_		try {_			this.workerStore = mesosServices.createMesosWorkerStore(flinkConfig, getRpcService().getExecutor())__			workerStore.start()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to initialize the worker store.", e)__		}__		_		__		Protos.FrameworkInfo.Builder frameworkInfo = mesosConfig.frameworkInfo()_			.clone()_			.setCheckpoint(true)__		try {_			Option<Protos.FrameworkID> frameworkID = workerStore.getFrameworkID()__			if (frameworkID.isEmpty()) {_				LOG.info("Registering as new framework.")__			} else {_				LOG.info("Recovery scenario: re-registering using framework ID {}.", frameworkID.get().getValue())__				frameworkInfo.setId(frameworkID.get())__			}_		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover the framework ID.", e)__		}__		MesosConfiguration initializedMesosConfig = mesosConfig.withFrameworkInfo(frameworkInfo)__		MesosConfiguration.logMesosConfig(LOG, initializedMesosConfig)__		schedulerDriver = initializedMesosConfig.createDriver(_			new MesosResourceManagerSchedulerCallback(),_			false)___		_		selfActor = createSelfActor()__		connectionMonitor = createConnectionMonitor()__		launchCoordinator = createLaunchCoordinator(schedulerDriver, selfActor)__		reconciliationCoordinator = createReconciliationCoordinator(schedulerDriver)__		taskMonitor = createTaskMonitor(schedulerDriver)___		_		try {_			recoverWorkers()__		} catch (Exception e) {_			throw new ResourceManagerException("Unable to recover Mesos worker state.", e)__		}__		_		try {_			LaunchableMesosWorker.configureArtifactServer(artifactServer, taskManagerContainerSpec)__		}_		catch (IOException e) {_			throw new ResourceManagerException("Unable to configure the artifact server with TaskManager artifacts.", e)__		}__		_		connectionMonitor.tell(new ConnectionMonitor.Start(), selfActor)__		schedulerDriver.start()___		LOG.info("Mesos resource manager initialized.")__	};starts,the,mesos,specifics;override,protected,void,initialize,throws,resource,manager,exception,try,this,worker,store,mesos,services,create,mesos,worker,store,flink,config,get,rpc,service,get,executor,worker,store,start,catch,exception,e,throw,new,resource,manager,exception,unable,to,initialize,the,worker,store,e,protos,framework,info,builder,framework,info,mesos,config,framework,info,clone,set,checkpoint,true,try,option,protos,framework,id,framework,id,worker,store,get,framework,id,if,framework,id,is,empty,log,info,registering,as,new,framework,else,log,info,recovery,scenario,re,registering,using,framework,id,framework,id,get,get,value,framework,info,set,id,framework,id,get,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,the,framework,id,e,mesos,configuration,initialized,mesos,config,mesos,config,with,framework,info,framework,info,mesos,configuration,log,mesos,config,log,initialized,mesos,config,scheduler,driver,initialized,mesos,config,create,driver,new,mesos,resource,manager,scheduler,callback,false,self,actor,create,self,actor,connection,monitor,create,connection,monitor,launch,coordinator,create,launch,coordinator,scheduler,driver,self,actor,reconciliation,coordinator,create,reconciliation,coordinator,scheduler,driver,task,monitor,create,task,monitor,scheduler,driver,try,recover,workers,catch,exception,e,throw,new,resource,manager,exception,unable,to,recover,mesos,worker,state,e,try,launchable,mesos,worker,configure,artifact,server,artifact,server,task,manager,container,spec,catch,ioexception,e,throw,new,resource,manager,exception,unable,to,configure,the,artifact,server,with,task,manager,artifacts,e,connection,monitor,tell,new,connection,monitor,start,self,actor,scheduler,driver,start,log,info,mesos,resource,manager,initialized
MesosResourceManager -> @RpcMethod 	public void taskTerminated(TaskMonitor.TaskTerminated message);1498718472;Handles a termination notification from a task monitor.;@RpcMethod_	public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		}_		catch(Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if(!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}. " +_				"State: {} Reason: {} ({})", id, status.getState(), status.getReason(), status.getMessage())___			_		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;rpc,method,public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,state,reason,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> @RpcMethod 	public void taskTerminated(TaskMonitor.TaskTerminated message);1498718493;Handles a termination notification from a task monitor.;@RpcMethod_	public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		}_		catch(Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if(!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())___			_		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;rpc,method,public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> protected void reregistered(ReRegistered message);1498718494;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1501258657;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1501485811;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1501587915;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1503156321;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1503156481;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1504477043;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1508597556;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1509547920;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1509547921;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1510152676;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1516890809;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1516971021;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1517302807;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1517915730;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1519406528;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1521804760;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1525961911;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1530393587;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1530683488;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1532290976;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1533306679;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1534403158;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1538127492;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1538127495;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1539176686;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1539582211;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void reregistered(ReRegistered message);1550005039;Called when reconnected to Mesos following a failover event.;protected void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;protected,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> @RpcMethod 	public void reconcile(ReconciliationCoordinator.Reconcile message);1498718472;Handles a reconciliation request from a task monitor.;@RpcMethod_	public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;rpc,method,public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> @RpcMethod 	public void reconcile(ReconciliationCoordinator.Reconcile message);1498718493;Handles a reconciliation request from a task monitor.;@RpcMethod_	public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;rpc,method,public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1498718494;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1501258657;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1501485811;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1501587915;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1503156321;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1503156481;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1504477043;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1508597556;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1509547920;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1509547921;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1510152676;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1516890809;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1516971021;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1517302807;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1517915730;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1519406528;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1521804760;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1525961911;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1530393587;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1530683488;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1532290976;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1533306679;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1534403158;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1538127492;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1538127495;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1539176686;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1539582211;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> public void acceptOffers(AcceptOffers msg);1550005039;Accept offers as advised by the launch coordinator.__<p>Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,p,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> @RpcMethod 	public void resourceOffers(ResourceOffers message);1498718472;Called when resource offers are made to the framework.;@RpcMethod_	public void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;rpc,method,public,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> @RpcMethod 	public void resourceOffers(ResourceOffers message);1498718493;Called when resource offers are made to the framework.;@RpcMethod_	public void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;rpc,method,public,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> @RpcMethod 	public void disconnected(Disconnected message);1498718472;Called when disconnected from Mesos.;@RpcMethod_	public void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskRouter.tell(message, selfActor)__	};called,when,disconnected,from,mesos;rpc,method,public,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,router,tell,message,self,actor
MesosResourceManager -> @RpcMethod 	public void disconnected(Disconnected message);1498718493;Called when disconnected from Mesos.;@RpcMethod_	public void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;rpc,method,public,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> @RpcMethod 	public void acceptOffers(AcceptOffers msg);1498718472;Accept offers as advised by the launch coordinator.__Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;@RpcMethod_	public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() != Protos.Offer.Operation.Type.LAUNCH) {_					continue__				}_				for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_					MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__					assert (worker != null)___					worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__					workerStore.putWorker(worker)__					workersInLaunch.put(extractResourceID(worker.taskID()), worker)___					LOG.info("Launching Mesos task {} on host {}.",_						worker.taskID().getValue(), worker.hostname().get())___					toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskRouter.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}_		catch(Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;rpc,method,public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,continue,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,router,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> @RpcMethod 	public void acceptOffers(AcceptOffers msg);1498718493;Accept offers as advised by the launch coordinator.__Acceptance is routed through the RM to update the persistent state before_forwarding the message to Mesos.;@RpcMethod_	public void acceptOffers(AcceptOffers msg) {_		try {_			List<TaskMonitor.TaskGoalStateUpdated> toMonitor = new ArrayList<>(msg.operations().size())___			_			for (Protos.Offer.Operation op : msg.operations()) {_				if (op.getType() == Protos.Offer.Operation.Type.LAUNCH) {_					for (Protos.TaskInfo info : op.getLaunch().getTaskInfosList()) {_						MesosWorkerStore.Worker worker = workersInNew.remove(extractResourceID(info.getTaskId()))__						assert (worker != null)___						worker = worker.launchWorker(info.getSlaveId(), msg.hostname())__						workerStore.putWorker(worker)__						workersInLaunch.put(extractResourceID(worker.taskID()), worker)___						LOG.info("Launching Mesos task {} on host {}.",_							worker.taskID().getValue(), worker.hostname().get())___						toMonitor.add(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)))__					}_				}_			}__			_			for (TaskMonitor.TaskGoalStateUpdated update : toMonitor) {_				taskMonitor.tell(update, selfActor)__			}__			_			schedulerDriver.acceptOffers(msg.offerIds(), msg.operations(), msg.filters())__		}_		catch(Exception ex) {_			onFatalError(new ResourceManagerException("unable to accept offers", ex))__		}_	};accept,offers,as,advised,by,the,launch,coordinator,acceptance,is,routed,through,the,rm,to,update,the,persistent,state,before,forwarding,the,message,to,mesos;rpc,method,public,void,accept,offers,accept,offers,msg,try,list,task,monitor,task,goal,state,updated,to,monitor,new,array,list,msg,operations,size,for,protos,offer,operation,op,msg,operations,if,op,get,type,protos,offer,operation,type,launch,for,protos,task,info,info,op,get,launch,get,task,infos,list,mesos,worker,store,worker,worker,workers,in,new,remove,extract,resource,id,info,get,task,id,assert,worker,null,worker,worker,launch,worker,info,get,slave,id,msg,hostname,worker,store,put,worker,worker,workers,in,launch,put,extract,resource,id,worker,task,id,worker,log,info,launching,mesos,task,on,host,worker,task,id,get,value,worker,hostname,get,to,monitor,add,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,for,task,monitor,task,goal,state,updated,update,to,monitor,task,monitor,tell,update,self,actor,scheduler,driver,accept,offers,msg,offer,ids,msg,operations,msg,filters,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,accept,offers,ex
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1498718494;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1501258657;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1501485811;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1501587915;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1503156321;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1503156481;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1504477043;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1508597556;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1509547920;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1509547921;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1510152676;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1516890809;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1516971021;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1517302807;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1517915730;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1519406528;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1521804760;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1525961911;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1530393587;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1530683488;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1532290976;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1533306679;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1534403158;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1538127492;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1538127495;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1539176686;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1539582211;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void offerRescinded(OfferRescinded message);1550005039;Called when resource offers are rescinded.;protected void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;protected,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> @RpcMethod 	public void statusUpdate(StatusUpdate message);1498718472;Handles a task status update from Mesos.;@RpcMethod_	public void statusUpdate(StatusUpdate message) {_		taskRouter.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;rpc,method,public,void,status,update,status,update,message,task,router,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> @RpcMethod 	public void statusUpdate(StatusUpdate message);1498718493;Handles a task status update from Mesos.;@RpcMethod_	public void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;rpc,method,public,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> @RpcMethod 	public void error(Error message);1498718472;Called when an error is reported by the scheduler callback.;@RpcMethod_	public void error(Error message) {_		onFatalError(new ResourceManagerException("Connection to Mesos failed", new Exception(message.message())))__	};called,when,an,error,is,reported,by,the,scheduler,callback;rpc,method,public,void,error,error,message,on,fatal,error,new,resource,manager,exception,connection,to,mesos,failed,new,exception,message,message
MesosResourceManager -> @RpcMethod 	public void error(Error message);1498718493;Called when an error is reported by the scheduler callback.;@RpcMethod_	public void error(Error message) {_		onFatalError(new ResourceManagerException("Connection to Mesos failed", new Exception(message.message())))__	};called,when,an,error,is,reported,by,the,scheduler,callback;rpc,method,public,void,error,error,message,on,fatal,error,new,resource,manager,exception,connection,to,mesos,failed,new,exception,message,message
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1498718494;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1501258657;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1501485811;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1501587915;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1503156321;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1503156481;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1504477043;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1508597556;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1509547920;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1509547921;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1510152676;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1516890809;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1516971021;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1517302807;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1517915730;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1519406528;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1521804760;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1525961911;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1530393587;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1530683488;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1532290976;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1533306679;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1534403158;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1538127492;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1538127495;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1539176686;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1539582211;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> protected void resourceOffers(ResourceOffers message);1550005039;Called when resource offers are made to the framework.;protected void resourceOffers(ResourceOffers message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,made,to,the,framework;protected,void,resource,offers,resource,offers,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts);1533306679;Recovers given framework/worker information.__@see #getWorkersAsync();private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts) {_		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				switch(worker.state()) {_					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						final LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recovers,given,framework,worker,information,see,get,workers,async;private,void,recover,workers,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,switch,worker,state,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,final,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts);1534403158;Recovers given framework/worker information.__@see #getWorkersAsync();private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts) {_		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				switch(worker.state()) {_					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						final LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recovers,given,framework,worker,information,see,get,workers,async;private,void,recover,workers,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,switch,worker,state,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,final,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts);1538127492;Recovers given framework/worker information.__@see #getWorkersAsync();private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts) {_		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				switch(worker.state()) {_					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						final LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID(), worker.profile())__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recovers,given,framework,worker,information,see,get,workers,async;private,void,recover,workers,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,switch,worker,state,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,final,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,worker,profile,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts);1538127495;Recovers given framework/worker information.__@see #getWorkersAsync();private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts) {_		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				switch(worker.state()) {_					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						final LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID())__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recovers,given,framework,worker,information,see,get,workers,async;private,void,recover,workers,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,switch,worker,state,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,final,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts);1539176686;Recovers given framework/worker information.__@see #getWorkersAsync();private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts) {_		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				switch(worker.state()) {_					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						final LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID())__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recovers,given,framework,worker,information,see,get,workers,async;private,void,recover,workers,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,switch,worker,state,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,final,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts);1539582211;Recovers given framework/worker information.__@see #getWorkersAsync();private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts) {_		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				switch(worker.state()) {_					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						final LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID())__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recovers,given,framework,worker,information,see,get,workers,async;private,void,recover,workers,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,switch,worker,state,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,final,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts);1550005039;Recovers given framework/worker information.__@see #getWorkersAsync();private void recoverWorkers(final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts) {_		assert(workersInNew.isEmpty())__		assert(workersInLaunch.isEmpty())__		assert(workersBeingReturned.isEmpty())___		if (!tasksFromPreviousAttempts.isEmpty()) {_			LOG.info("Retrieved {} TaskManagers from previous attempt", tasksFromPreviousAttempts.size())___			List<Tuple2<TaskRequest, String>> toAssign = new ArrayList<>(tasksFromPreviousAttempts.size())___			for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_				switch(worker.state()) {_					case Launched:_						workersInLaunch.put(extractResourceID(worker.taskID()), worker)__						final LaunchableMesosWorker launchable = createLaunchableMesosWorker(worker.taskID())__						toAssign.add(new Tuple2<>(launchable.taskRequest(), worker.hostname().get()))__						break__					case Released:_						workersBeingReturned.put(extractResourceID(worker.taskID()), worker)__						break__				}_				taskMonitor.tell(new TaskMonitor.TaskGoalStateUpdated(extractGoalState(worker)), selfActor)__			}__			_			if (toAssign.size() >= 1) {_				launchCoordinator.tell(new LaunchCoordinator.Assign(toAssign), selfActor)__			}_		}_	};recovers,given,framework,worker,information,see,get,workers,async;private,void,recover,workers,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,assert,workers,in,new,is,empty,assert,workers,in,launch,is,empty,assert,workers,being,returned,is,empty,if,tasks,from,previous,attempts,is,empty,log,info,retrieved,task,managers,from,previous,attempt,tasks,from,previous,attempts,size,list,tuple2,task,request,string,to,assign,new,array,list,tasks,from,previous,attempts,size,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,switch,worker,state,case,launched,workers,in,launch,put,extract,resource,id,worker,task,id,worker,final,launchable,mesos,worker,launchable,create,launchable,mesos,worker,worker,task,id,to,assign,add,new,tuple2,launchable,task,request,worker,hostname,get,break,case,released,workers,being,returned,put,extract,resource,id,worker,task,id,worker,break,task,monitor,tell,new,task,monitor,task,goal,state,updated,extract,goal,state,worker,self,actor,if,to,assign,size,1,launch,coordinator,tell,new,launch,coordinator,assign,to,assign,self,actor
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1498718472;Extracts the Mesos task goal state from the worker information._@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1498718493;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1498718494;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1501258657;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1501485811;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1501587915;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1503156321;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1503156481;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1504477043;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1508597556;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1509547920;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1509547921;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1510152676;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1516890809;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1516971021;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1517302807;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1517915730;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1519406528;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1521804760;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1525961911;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1530393587;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1530683488;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1532290976;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1533306679;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1534403158;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1538127492;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1538127495;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1539176686;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1539582211;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker);1550005039;Extracts the Mesos task goal state from the worker information.__@param worker the persistent worker information._@return goal state information for the {@Link TaskMonitor}.;static TaskMonitor.TaskGoalState extractGoalState(MesosWorkerStore.Worker worker) {_		switch(worker.state()) {_			case New: return new TaskMonitor.New(worker.taskID())__			case Launched: return new TaskMonitor.Launched(worker.taskID(), worker.slaveID().get())__			case Released: return new TaskMonitor.Released(worker.taskID(), worker.slaveID().get())__			default: throw new IllegalArgumentException("unsupported worker state")__		}_	};extracts,the,mesos,task,goal,state,from,the,worker,information,param,worker,the,persistent,worker,information,return,goal,state,information,for,the,link,task,monitor;static,task,monitor,task,goal,state,extract,goal,state,mesos,worker,store,worker,worker,switch,worker,state,case,new,return,new,task,monitor,new,worker,task,id,case,launched,return,new,task,monitor,launched,worker,task,id,worker,slave,id,get,case,released,return,new,task,monitor,released,worker,task,id,worker,slave,id,get,default,throw,new,illegal,argument,exception,unsupported,worker,state
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1498718472;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1498718493;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1498718494;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1501258657;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1501485811;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1501587915;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1503156321;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1503156481;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1504477043;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1508597556;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1509547920;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1509547921;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1510152676;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1516890809;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1516971021;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1517302807;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1517915730;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1519406528;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1521804760;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1525961911;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1530393587;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1530683488;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1532290976;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1533306679;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1534403158;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1538127492;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1538127495;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1539176686;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1539582211;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> private static TaskSchedulerBuilder createOptimizer();1550005039;Creates the Fenzo optimizer (builder)._The builder is an indirection to facilitate unit testing of the Launch Coordinator.;private static TaskSchedulerBuilder createOptimizer() {_		return new TaskSchedulerBuilder() {_			TaskScheduler.Builder builder = new TaskScheduler.Builder()___			@Override_			public TaskSchedulerBuilder withLeaseRejectAction(Action1<VirtualMachineLease> action) {_				builder.withLeaseRejectAction(action)__				return this__			}__			@Override_			public TaskScheduler build() {_				return builder.build()__			}_		}__	};creates,the,fenzo,optimizer,builder,the,builder,is,an,indirection,to,facilitate,unit,testing,of,the,launch,coordinator;private,static,task,scheduler,builder,create,optimizer,return,new,task,scheduler,builder,task,scheduler,builder,builder,new,task,scheduler,builder,override,public,task,scheduler,builder,with,lease,reject,action,action1,virtual,machine,lease,action,builder,with,lease,reject,action,action,return,this,override,public,task,scheduler,build,return,builder,build
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1498718494;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())___			_		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1501258657;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())___			_		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1501485811;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())___			_		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1501587915;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())___			_		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1503156321;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())___			_		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1503156481;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1504477043;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1508597556;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1509547920;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1509547921;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1510152676;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1516890809;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1516971021;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1517302807;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1517915730;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1519406528;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1521804760;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1525961911;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__			startNewWorker(launched.profile())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,start,new,worker,launched,profile,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1530393587;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__			startNewWorker(launched.profile())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,start,new,worker,launched,profile,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1530683488;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__			startNewWorker(launched.profile())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,start,new,worker,launched,profile,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1532290976;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__			startNewWorker(launched.profile())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,start,new,worker,launched,profile,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1533306679;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__			startNewWorker(launched.profile())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,start,new,worker,launched,profile,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1534403158;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__			startNewWorker(launched.profile())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,start,new,worker,launched,profile,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1538127492;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__			startNewWorker(launched.profile())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,start,new,worker,launched,profile,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1538127495;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__			startNewWorker(launched.profile())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,start,new,worker,launched,profile,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1539176686;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__			startNewWorker(launched.profile())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,start,new,worker,launched,profile,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1539582211;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__			startNewWorker(launched.profile())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,start,new,worker,launched,profile,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> public void taskTerminated(TaskMonitor.TaskTerminated message);1550005039;Handles a termination notification from a task monitor.;public void taskTerminated(TaskMonitor.TaskTerminated message) {_		Protos.TaskID taskID = message.taskID()__		Protos.TaskStatus status = message.status()___		_		final ResourceID id = extractResourceID(taskID)___		boolean existed__		try {_			existed = workerStore.removeWorker(taskID)__		} catch (Exception ex) {_			onFatalError(new ResourceManagerException("unable to remove worker", ex))__			return__		}__		if (!existed) {_			LOG.info("Received a termination notice for an unrecognized worker: {}", id)__			return__		}__		_		assert(!workersInNew.containsKey(id))__		if (workersBeingReturned.remove(id) != null) {_			_			LOG.info("Worker {} finished successfully with message: {}",_				id, status.getMessage())__		} else {_			_			final MesosWorkerStore.Worker launched = workersInLaunch.remove(id)__			assert(launched != null)__			LOG.info("Worker {} failed with status: {}, reason: {}, message: {}.",_				id, status.getState(), status.getReason(), status.getMessage())__			startNewWorker(launched.profile())__		}__		closeTaskManagerConnection(id, new Exception(status.getMessage()))__	};handles,a,termination,notification,from,a,task,monitor;public,void,task,terminated,task,monitor,task,terminated,message,protos,task,id,task,id,message,task,id,protos,task,status,status,message,status,final,resource,id,id,extract,resource,id,task,id,boolean,existed,try,existed,worker,store,remove,worker,task,id,catch,exception,ex,on,fatal,error,new,resource,manager,exception,unable,to,remove,worker,ex,return,if,existed,log,info,received,a,termination,notice,for,an,unrecognized,worker,id,return,assert,workers,in,new,contains,key,id,if,workers,being,returned,remove,id,null,log,info,worker,finished,successfully,with,message,id,status,get,message,else,final,mesos,worker,store,worker,launched,workers,in,launch,remove,id,assert,launched,null,log,info,worker,failed,with,status,reason,message,id,status,get,state,status,get,reason,status,get,message,start,new,worker,launched,profile,close,task,manager,connection,id,new,exception,status,get,message
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1498718472;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				resourceProfile.getMemoryInMB() < 0 ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				resourceProfile.getHeapMemoryInMB(),_				resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactResolver,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,get,memory,in,mb,0,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,get,heap,memory,in,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,resolver,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1498718493;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				resourceProfile.getMemoryInMB() < 0 ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				resourceProfile.getHeapMemoryInMB(),_				resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactResolver,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,get,memory,in,mb,0,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,get,heap,memory,in,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,resolver,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1498718494;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				resourceProfile.getMemoryInMB() < 0 ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				resourceProfile.getHeapMemoryInMB(),_				resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactResolver,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,get,memory,in,mb,0,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,get,heap,memory,in,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,resolver,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1501258657;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				resourceProfile.getMemoryInMB() < 0 ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				resourceProfile.getHeapMemoryInMB(),_				resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactResolver,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,get,memory,in,mb,0,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,get,heap,memory,in,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,resolver,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1501485811;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				resourceProfile.getMemoryInMB() < 0 ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				resourceProfile.getHeapMemoryInMB(),_				resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactResolver,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,get,memory,in,mb,0,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,get,heap,memory,in,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,resolver,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1501587915;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				resourceProfile.getMemoryInMB() < 0 ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				resourceProfile.getHeapMemoryInMB(),_				resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactResolver,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,get,memory,in,mb,0,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,get,heap,memory,in,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,resolver,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1503156321;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1503156481;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1504477043;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1508597556;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1509547920;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1509547921;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1510152676;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1516890809;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1516971021;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.dockerParameters(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,docker,parameters,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1517302807;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.gpus(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.dockerParameters(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,gpus,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,docker,parameters,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1517915730;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.gpus(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.dockerParameters(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,gpus,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,docker,parameters,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1519406528;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.gpus(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.dockerParameters(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,gpus,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,docker,parameters,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1521804760;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.gpus(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.dockerParameters(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,gpus,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,docker,parameters,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1525961911;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.gpus(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.dockerParameters(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,gpus,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,docker,parameters,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1530393587;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.gpus(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.dockerParameters(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname(),_			taskManagerParameters.uris()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,gpus,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,docker,parameters,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,task,manager,parameters,uris,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1530683488;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.gpus(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.dockerParameters(),_			taskManagerParameters.dockerForcePullImage(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname(),_			taskManagerParameters.uris()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,gpus,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,docker,parameters,task,manager,parameters,docker,force,pull,image,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,task,manager,parameters,uris,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1532290976;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.gpus(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.dockerParameters(),_			taskManagerParameters.dockerForcePullImage(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname(),_			taskManagerParameters.uris()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,gpus,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,docker,parameters,task,manager,parameters,docker,force,pull,image,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,task,manager,parameters,uris,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1533306679;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.gpus(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.dockerParameters(),_			taskManagerParameters.dockerForcePullImage(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname(),_			taskManagerParameters.uris()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,gpus,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,docker,parameters,task,manager,parameters,docker,force,pull,image,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,task,manager,parameters,uris,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile);1534403158;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID, ResourceProfile resourceProfile) {__		_		MesosTaskManagerParameters params = new MesosTaskManagerParameters(_			resourceProfile.getCpuCores() < 1.0 ? taskManagerParameters.cpus() : resourceProfile.getCpuCores(),_			taskManagerParameters.gpus(),_			taskManagerParameters.containerType(),_			taskManagerParameters.containerImageName(),_			new ContaineredTaskManagerParameters(_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerTotalMemoryMB() : resourceProfile.getMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerHeapSizeMB() : resourceProfile.getHeapMemoryInMB(),_				ResourceProfile.UNKNOWN.equals(resourceProfile) ? taskManagerParameters.containeredParameters().taskManagerDirectMemoryLimitMB() : resourceProfile.getDirectMemoryInMB(),_				1,_				new HashMap<>(taskManagerParameters.containeredParameters().taskManagerEnv())),_			taskManagerParameters.containerVolumes(),_			taskManagerParameters.dockerParameters(),_			taskManagerParameters.dockerForcePullImage(),_			taskManagerParameters.constraints(),_			taskManagerParameters.command(),_			taskManagerParameters.bootstrapCommand(),_			taskManagerParameters.getTaskManagerHostname(),_			taskManagerParameters.uris()_		)___		LOG.debug("LaunchableMesosWorker parameters: {}", params)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				params,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,resource,profile,resource,profile,mesos,task,manager,parameters,params,new,mesos,task,manager,parameters,resource,profile,get,cpu,cores,1,0,task,manager,parameters,cpus,resource,profile,get,cpu,cores,task,manager,parameters,gpus,task,manager,parameters,container,type,task,manager,parameters,container,image,name,new,containered,task,manager,parameters,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,total,memory,mb,resource,profile,get,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,heap,size,mb,resource,profile,get,heap,memory,in,mb,resource,profile,unknown,equals,resource,profile,task,manager,parameters,containered,parameters,task,manager,direct,memory,limit,mb,resource,profile,get,direct,memory,in,mb,1,new,hash,map,task,manager,parameters,containered,parameters,task,manager,env,task,manager,parameters,container,volumes,task,manager,parameters,docker,parameters,task,manager,parameters,docker,force,pull,image,task,manager,parameters,constraints,task,manager,parameters,command,task,manager,parameters,bootstrap,command,task,manager,parameters,get,task,manager,hostname,task,manager,parameters,uris,log,debug,launchable,mesos,worker,parameters,params,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,params,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private Future<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1501258657;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private Future<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return new FlinkFuture<>(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				new ApplyFunction<Throwable, Boolean>() {_					@Override_					public Boolean apply(Throwable throwable) {_						_						actorSystem.stop(actorRef)___						log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___						return true__					}_				})__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,new,flink,future,patterns,graceful,stop,actor,ref,timeout,exceptionally,new,apply,function,throwable,boolean,override,public,boolean,apply,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private Future<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1501485811;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private Future<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return new FlinkFuture<>(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				new ApplyFunction<Throwable, Boolean>() {_					@Override_					public Boolean apply(Throwable throwable) {_						_						actorSystem.stop(actorRef)___						log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___						return true__					}_				})__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,new,flink,future,patterns,graceful,stop,actor,ref,timeout,exceptionally,new,apply,function,throwable,boolean,override,public,boolean,apply,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1501587915;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1503156321;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1503156481;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1504477043;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1508597556;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1509547920;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1509547921;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1510152676;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1516890809;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1516971021;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1517302807;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1517915730;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1519406528;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1521804760;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1525961911;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1530393587;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1530683488;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout);1532290976;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout for the graceful shut down_@return Future containing the result of the graceful shut down;private CompletableFuture<Boolean> stopActor(final ActorRef actorRef, FiniteDuration timeout) {_		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return true__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,future,containing,the,result,of,the,graceful,shut,down;private,completable,future,boolean,stop,actor,final,actor,ref,actor,ref,finite,duration,timeout,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,true
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1498718494;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1501258657;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1501485811;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1501587915;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1503156321;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1503156481;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1504477043;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1508597556;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1509547920;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1509547921;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1510152676;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1516890809;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1516971021;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1517302807;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1517915730;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1519406528;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1521804760;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1525961911;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1530393587;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1530683488;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1532290976;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1533306679;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1534403158;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1538127492;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1538127495;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1539176686;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1539582211;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> protected void statusUpdate(StatusUpdate message);1550005039;Handles a task status update from Mesos.;protected void statusUpdate(StatusUpdate message) {_		taskMonitor.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		schedulerDriver.acknowledgeStatusUpdate(message.status())__	};handles,a,task,status,update,from,mesos;protected,void,status,update,status,update,message,task,monitor,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,scheduler,driver,acknowledge,status,update,message,status
MesosResourceManager -> private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync();1533306679;Fetches framework/worker information persisted by a prior incarnation of the RM.;private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync() {_		_		_		return CompletableFuture.supplyAsync(() -> {_			try {_				final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()__				for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_					if (worker.state() == MesosWorkerStore.WorkerState.New) {_						_						workerStore.removeWorker(worker.taskID())__					}_				}_				return tasksFromPreviousAttempts__			} catch (final Exception e) {_				throw new CompletionException(new ResourceManagerException(e))__			}_		}, getRpcService().getExecutor())__	};fetches,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,completable,future,list,mesos,worker,store,worker,get,workers,async,return,completable,future,supply,async,try,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,if,worker,state,mesos,worker,store,worker,state,new,worker,store,remove,worker,worker,task,id,return,tasks,from,previous,attempts,catch,final,exception,e,throw,new,completion,exception,new,resource,manager,exception,e,get,rpc,service,get,executor
MesosResourceManager -> private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync();1534403158;Fetches framework/worker information persisted by a prior incarnation of the RM.;private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync() {_		_		_		return CompletableFuture.supplyAsync(() -> {_			try {_				final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()__				for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_					if (worker.state() == MesosWorkerStore.WorkerState.New) {_						_						workerStore.removeWorker(worker.taskID())__					}_				}_				return tasksFromPreviousAttempts__			} catch (final Exception e) {_				throw new CompletionException(new ResourceManagerException(e))__			}_		}, getRpcService().getExecutor())__	};fetches,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,completable,future,list,mesos,worker,store,worker,get,workers,async,return,completable,future,supply,async,try,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,if,worker,state,mesos,worker,store,worker,state,new,worker,store,remove,worker,worker,task,id,return,tasks,from,previous,attempts,catch,final,exception,e,throw,new,completion,exception,new,resource,manager,exception,e,get,rpc,service,get,executor
MesosResourceManager -> private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync();1538127492;Fetches framework/worker information persisted by a prior incarnation of the RM.;private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync() {_		_		_		return CompletableFuture.supplyAsync(() -> {_			try {_				final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()__				for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_					if (worker.state() == MesosWorkerStore.WorkerState.New) {_						_						workerStore.removeWorker(worker.taskID())__					}_				}_				return tasksFromPreviousAttempts__			} catch (final Exception e) {_				throw new CompletionException(new ResourceManagerException(e))__			}_		}, getRpcService().getExecutor())__	};fetches,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,completable,future,list,mesos,worker,store,worker,get,workers,async,return,completable,future,supply,async,try,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,if,worker,state,mesos,worker,store,worker,state,new,worker,store,remove,worker,worker,task,id,return,tasks,from,previous,attempts,catch,final,exception,e,throw,new,completion,exception,new,resource,manager,exception,e,get,rpc,service,get,executor
MesosResourceManager -> private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync();1538127495;Fetches framework/worker information persisted by a prior incarnation of the RM.;private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync() {_		_		_		return CompletableFuture.supplyAsync(() -> {_			try {_				final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()__				for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_					if (worker.state() == MesosWorkerStore.WorkerState.New) {_						_						workerStore.removeWorker(worker.taskID())__					}_				}_				return tasksFromPreviousAttempts__			} catch (final Exception e) {_				throw new CompletionException(new ResourceManagerException(e))__			}_		}, getRpcService().getExecutor())__	};fetches,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,completable,future,list,mesos,worker,store,worker,get,workers,async,return,completable,future,supply,async,try,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,if,worker,state,mesos,worker,store,worker,state,new,worker,store,remove,worker,worker,task,id,return,tasks,from,previous,attempts,catch,final,exception,e,throw,new,completion,exception,new,resource,manager,exception,e,get,rpc,service,get,executor
MesosResourceManager -> private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync();1539176686;Fetches framework/worker information persisted by a prior incarnation of the RM.;private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync() {_		_		_		return CompletableFuture.supplyAsync(() -> {_			try {_				final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()__				for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_					if (worker.state() == MesosWorkerStore.WorkerState.New) {_						_						workerStore.removeWorker(worker.taskID())__					}_				}_				return tasksFromPreviousAttempts__			} catch (final Exception e) {_				throw new CompletionException(new ResourceManagerException(e))__			}_		}, getRpcService().getExecutor())__	};fetches,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,completable,future,list,mesos,worker,store,worker,get,workers,async,return,completable,future,supply,async,try,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,if,worker,state,mesos,worker,store,worker,state,new,worker,store,remove,worker,worker,task,id,return,tasks,from,previous,attempts,catch,final,exception,e,throw,new,completion,exception,new,resource,manager,exception,e,get,rpc,service,get,executor
MesosResourceManager -> private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync();1539582211;Fetches framework/worker information persisted by a prior incarnation of the RM.;private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync() {_		_		_		return CompletableFuture.supplyAsync(() -> {_			try {_				final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()__				for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_					if (worker.state() == MesosWorkerStore.WorkerState.New) {_						_						workerStore.removeWorker(worker.taskID())__					}_				}_				return tasksFromPreviousAttempts__			} catch (final Exception e) {_				throw new CompletionException(new ResourceManagerException(e))__			}_		}, getRpcService().getExecutor())__	};fetches,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,completable,future,list,mesos,worker,store,worker,get,workers,async,return,completable,future,supply,async,try,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,if,worker,state,mesos,worker,store,worker,state,new,worker,store,remove,worker,worker,task,id,return,tasks,from,previous,attempts,catch,final,exception,e,throw,new,completion,exception,new,resource,manager,exception,e,get,rpc,service,get,executor
MesosResourceManager -> private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync();1550005039;Fetches framework/worker information persisted by a prior incarnation of the RM.;private CompletableFuture<List<MesosWorkerStore.Worker>> getWorkersAsync() {_		_		_		return CompletableFuture.supplyAsync(() -> {_			try {_				final List<MesosWorkerStore.Worker> tasksFromPreviousAttempts = workerStore.recoverWorkers()__				for (final MesosWorkerStore.Worker worker : tasksFromPreviousAttempts) {_					if (worker.state() == MesosWorkerStore.WorkerState.New) {_						_						workerStore.removeWorker(worker.taskID())__					}_				}_				return tasksFromPreviousAttempts__			} catch (final Exception e) {_				throw new CompletionException(new ResourceManagerException(e))__			}_		}, getRpcService().getExecutor())__	};fetches,framework,worker,information,persisted,by,a,prior,incarnation,of,the,rm;private,completable,future,list,mesos,worker,store,worker,get,workers,async,return,completable,future,supply,async,try,final,list,mesos,worker,store,worker,tasks,from,previous,attempts,worker,store,recover,workers,for,final,mesos,worker,store,worker,worker,tasks,from,previous,attempts,if,worker,state,mesos,worker,store,worker,state,new,worker,store,remove,worker,worker,task,id,return,tasks,from,previous,attempts,catch,final,exception,e,throw,new,completion,exception,new,resource,manager,exception,e,get,rpc,service,get,executor
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout);1533306679;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout  for the graceful shut down_@return A future that finishes with {@code true} iff. the actor could be stopped gracefully_or {@code actorRef} was {@code null}.;private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout) {_		if (actorRef == null) {_			return CompletableFuture.completedFuture(true)__		}__		return FutureUtils.<Boolean>toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return false__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,a,future,that,finishes,with,code,true,iff,the,actor,could,be,stopped,gracefully,or,code,actor,ref,was,code,null;private,completable,future,boolean,stop,actor,nullable,final,actor,ref,actor,ref,finite,duration,timeout,if,actor,ref,null,return,completable,future,completed,future,true,return,future,utils,boolean,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,false
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout);1534403158;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout  for the graceful shut down_@return A future that finishes with {@code true} iff. the actor could be stopped gracefully_or {@code actorRef} was {@code null}.;private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout) {_		if (actorRef == null) {_			return CompletableFuture.completedFuture(true)__		}__		return FutureUtils.<Boolean>toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return false__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,a,future,that,finishes,with,code,true,iff,the,actor,could,be,stopped,gracefully,or,code,actor,ref,was,code,null;private,completable,future,boolean,stop,actor,nullable,final,actor,ref,actor,ref,finite,duration,timeout,if,actor,ref,null,return,completable,future,completed,future,true,return,future,utils,boolean,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,false
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout);1538127492;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout  for the graceful shut down_@return A future that finishes with {@code true} iff. the actor could be stopped gracefully_or {@code actorRef} was {@code null}.;private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout) {_		if (actorRef == null) {_			return CompletableFuture.completedFuture(true)__		}__		return FutureUtils.<Boolean>toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return false__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,a,future,that,finishes,with,code,true,iff,the,actor,could,be,stopped,gracefully,or,code,actor,ref,was,code,null;private,completable,future,boolean,stop,actor,nullable,final,actor,ref,actor,ref,finite,duration,timeout,if,actor,ref,null,return,completable,future,completed,future,true,return,future,utils,boolean,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,false
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout);1538127495;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout  for the graceful shut down_@return A future that finishes with {@code true} iff. the actor could be stopped gracefully_or {@code actorRef} was {@code null}.;private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout) {_		if (actorRef == null) {_			return CompletableFuture.completedFuture(true)__		}__		return FutureUtils.<Boolean>toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return false__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,a,future,that,finishes,with,code,true,iff,the,actor,could,be,stopped,gracefully,or,code,actor,ref,was,code,null;private,completable,future,boolean,stop,actor,nullable,final,actor,ref,actor,ref,finite,duration,timeout,if,actor,ref,null,return,completable,future,completed,future,true,return,future,utils,boolean,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,false
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout);1539176686;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout  for the graceful shut down_@return A future that finishes with {@code true} iff. the actor could be stopped gracefully_or {@code actorRef} was {@code null}.;private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout) {_		if (actorRef == null) {_			return CompletableFuture.completedFuture(true)__		}__		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return false__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,a,future,that,finishes,with,code,true,iff,the,actor,could,be,stopped,gracefully,or,code,actor,ref,was,code,null;private,completable,future,boolean,stop,actor,nullable,final,actor,ref,actor,ref,finite,duration,timeout,if,actor,ref,null,return,completable,future,completed,future,true,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,false
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout);1539582211;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout  for the graceful shut down_@return A future that finishes with {@code true} iff. the actor could be stopped gracefully_or {@code actorRef} was {@code null}.;private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout) {_		if (actorRef == null) {_			return CompletableFuture.completedFuture(true)__		}__		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return false__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,a,future,that,finishes,with,code,true,iff,the,actor,could,be,stopped,gracefully,or,code,actor,ref,was,code,null;private,completable,future,boolean,stop,actor,nullable,final,actor,ref,actor,ref,finite,duration,timeout,if,actor,ref,null,return,completable,future,completed,future,true,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,false
MesosResourceManager -> private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout);1550005039;Tries to shut down the given actor gracefully.__@param actorRef specifying the actor to shut down_@param timeout  for the graceful shut down_@return A future that finishes with {@code true} iff. the actor could be stopped gracefully_or {@code actorRef} was {@code null}.;private CompletableFuture<Boolean> stopActor(@Nullable final ActorRef actorRef, FiniteDuration timeout) {_		if (actorRef == null) {_			return CompletableFuture.completedFuture(true)__		}__		return FutureUtils.toJava(Patterns.gracefulStop(actorRef, timeout))_			.exceptionally(_				(Throwable throwable) -> {_					_					actorSystem.stop(actorRef)___					log.warn("Could not stop actor {} gracefully.", actorRef.path(), throwable)___					return false__				}_			)__	};tries,to,shut,down,the,given,actor,gracefully,param,actor,ref,specifying,the,actor,to,shut,down,param,timeout,for,the,graceful,shut,down,return,a,future,that,finishes,with,code,true,iff,the,actor,could,be,stopped,gracefully,or,code,actor,ref,was,code,null;private,completable,future,boolean,stop,actor,nullable,final,actor,ref,actor,ref,finite,duration,timeout,if,actor,ref,null,return,completable,future,completed,future,true,return,future,utils,to,java,patterns,graceful,stop,actor,ref,timeout,exceptionally,throwable,throwable,actor,system,stop,actor,ref,log,warn,could,not,stop,actor,gracefully,actor,ref,path,throwable,return,false
MesosResourceManager -> protected void disconnected(Disconnected message);1498718494;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1501258657;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1501485811;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1501587915;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1503156321;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1503156481;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1504477043;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1508597556;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1509547920;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1509547921;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1510152676;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1516890809;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1516971021;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1517302807;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1517915730;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1519406528;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1521804760;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1525961911;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1530393587;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1530683488;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1532290976;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1533306679;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1534403158;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1538127492;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1538127495;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1539176686;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1539582211;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> protected void disconnected(Disconnected message);1550005039;Called when disconnected from Mesos.;protected void disconnected(Disconnected message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,disconnected,from,mesos;protected,void,disconnected,disconnected,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1498718494;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1501258657;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1501485811;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1501587915;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1503156321;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1503156481;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1504477043;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1508597556;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1509547920;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1509547921;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1510152676;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1516890809;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1516971021;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1517302807;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1517915730;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1519406528;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1521804760;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1525961911;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1530393587;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1530683488;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1532290976;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1533306679;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1534403158;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1538127492;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1538127495;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1539176686;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1539582211;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> public void reconcile(ReconciliationCoordinator.Reconcile message);1550005039;Handles a reconciliation request from a task monitor.;public void reconcile(ReconciliationCoordinator.Reconcile message) {_		_		reconciliationCoordinator.tell(message, selfActor)__	};handles,a,reconciliation,request,from,a,task,monitor;public,void,reconcile,reconciliation,coordinator,reconcile,message,reconciliation,coordinator,tell,message,self,actor
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1498718472;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1498718493;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1498718494;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1501258657;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1501485811;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1501587915;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1503156321;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1503156481;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1504477043;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1508597556;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1509547920;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1509547921;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1510152676;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1516890809;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1516971021;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1517302807;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1517915730;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1519406528;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1521804760;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1525961911;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1530393587;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1530683488;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1532290976;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1533306679;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1534403158;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1538127492;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1538127495;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1539176686;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1539582211;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> static ResourceID extractResourceID(Protos.TaskID taskId);1550005039;Extracts a unique ResourceID from the Mesos task.__@param taskId the Mesos TaskID_@return The ResourceID for the container;static ResourceID extractResourceID(Protos.TaskID taskId) {_		return new ResourceID(taskId.getValue())__	};extracts,a,unique,resource,id,from,the,mesos,task,param,task,id,the,mesos,task,id,return,the,resource,id,for,the,container;static,resource,id,extract,resource,id,protos,task,id,task,id,return,new,resource,id,task,id,get,value
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID);1538127492;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID) {_		LOG.debug("LaunchableMesosWorker parameters: {}", taskManagerParameters)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				taskManagerParameters,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,log,debug,launchable,mesos,worker,parameters,task,manager,parameters,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,task,manager,parameters,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID);1538127495;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID) {_		LOG.debug("LaunchableMesosWorker parameters: {}", taskManagerParameters)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				taskManagerParameters,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,log,debug,launchable,mesos,worker,parameters,task,manager,parameters,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,task,manager,parameters,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID);1539176686;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID) {_		LOG.debug("LaunchableMesosWorker parameters: {}", taskManagerParameters)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				taskManagerParameters,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,log,debug,launchable,mesos,worker,parameters,task,manager,parameters,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,task,manager,parameters,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID);1539582211;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID) {_		LOG.debug("LaunchableMesosWorker parameters: {}", taskManagerParameters)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				taskManagerParameters,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,log,debug,launchable,mesos,worker,parameters,task,manager,parameters,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,task,manager,parameters,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID);1550005039;Creates a launchable task for Fenzo to process.;private LaunchableMesosWorker createLaunchableMesosWorker(Protos.TaskID taskID) {_		LOG.debug("LaunchableMesosWorker parameters: {}", taskManagerParameters)___		LaunchableMesosWorker launchable =_			new LaunchableMesosWorker(_				artifactServer,_				taskManagerParameters,_				taskManagerContainerSpec,_				taskID,_				mesosConfig)___		return launchable__	};creates,a,launchable,task,for,fenzo,to,process;private,launchable,mesos,worker,create,launchable,mesos,worker,protos,task,id,task,id,log,debug,launchable,mesos,worker,parameters,task,manager,parameters,launchable,mesos,worker,launchable,new,launchable,mesos,worker,artifact,server,task,manager,parameters,task,manager,container,spec,task,id,mesos,config,return,launchable
MesosResourceManager -> @RpcMethod 	public void offerRescinded(OfferRescinded message);1498718472;Called when resource offers are rescinded.;@RpcMethod_	public void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;rpc,method,public,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> @RpcMethod 	public void offerRescinded(OfferRescinded message);1498718493;Called when resource offers are rescinded.;@RpcMethod_	public void offerRescinded(OfferRescinded message) {_		launchCoordinator.tell(message, selfActor)__	};called,when,resource,offers,are,rescinded;rpc,method,public,void,offer,rescinded,offer,rescinded,message,launch,coordinator,tell,message,self,actor
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1498718472;Callback when a worker was started._@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		}__		_		_		return null__	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1498718493;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1498718494;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1501258657;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1501485811;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1501587915;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1503156321;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1503156481;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1504477043;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1508597556;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1509547920;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1509547921;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1510152676;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1516890809;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1516971021;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1517302807;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1517915730;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1519406528;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1521804760;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1525961911;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1530393587;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1530683488;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1532290976;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1533306679;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1534403158;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1538127492;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1538127495;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1539176686;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1539582211;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @Override 	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID);1550005039;Callback when a worker was started.__@param resourceID The worker resource id (as provided by the TaskExecutor);@Override_	protected RegisteredMesosWorkerNode workerStarted(ResourceID resourceID) {__		_		MesosWorkerStore.Worker inLaunch = workersInLaunch.get(resourceID)__		if (inLaunch != null) {_			return new RegisteredMesosWorkerNode(inLaunch)__		} else {_			_			_			return null__		}_	};callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id,as,provided,by,the,task,executor;override,protected,registered,mesos,worker,node,worker,started,resource,id,resource,id,mesos,worker,store,worker,in,launch,workers,in,launch,get,resource,id,if,in,launch,null,return,new,registered,mesos,worker,node,in,launch,else,return,null
MesosResourceManager -> @RpcMethod 	public void reregistered(ReRegistered message);1498718472;Called when reconnected to Mesos following a failover event.;@RpcMethod_	public void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskRouter.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;rpc,method,public,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,router,tell,message,self,actor
MesosResourceManager -> @RpcMethod 	public void reregistered(ReRegistered message);1498718493;Called when reconnected to Mesos following a failover event.;@RpcMethod_	public void reregistered(ReRegistered message) {_		connectionMonitor.tell(message, selfActor)__		launchCoordinator.tell(message, selfActor)__		reconciliationCoordinator.tell(message, selfActor)__		taskMonitor.tell(message, selfActor)__	};called,when,reconnected,to,mesos,following,a,failover,event;rpc,method,public,void,reregistered,re,registered,message,connection,monitor,tell,message,self,actor,launch,coordinator,tell,message,self,actor,reconciliation,coordinator,tell,message,self,actor,task,monitor,tell,message,self,actor
