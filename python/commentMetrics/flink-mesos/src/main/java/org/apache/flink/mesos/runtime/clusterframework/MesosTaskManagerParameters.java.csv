# id;timestamp;commentText;codeText;commentWords;codeWords
MesosTaskManagerParameters -> public List<String> uris();1530393587;Get custom artifact URIs.;public List<String> uris() {_		return uris__	};get,custom,artifact,uris;public,list,string,uris,return,uris
MesosTaskManagerParameters -> public List<String> uris();1530683488;Get custom artifact URIs.;public List<String> uris() {_		return uris__	};get,custom,artifact,uris;public,list,string,uris,return,uris
MesosTaskManagerParameters -> public List<String> uris();1533830558;Get custom artifact URIs.;public List<String> uris() {_		return uris__	};get,custom,artifact,uris;public,list,string,uris,return,uris
MesosTaskManagerParameters -> public static List<String> buildUris(Option<String> uris);1530393587;Build a list of URIs for providing custom artifacts to Mesos tasks._@param uris a comma delimited optional string listing artifact URIs;public static List<String> buildUris(Option<String> uris) {_		if (uris.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<String> urisList = new ArrayList<>()__			for (String uri : uris.get().split(",")) {_				urisList.add(uri.trim())__			}_			return urisList__		}_	};build,a,list,of,uris,for,providing,custom,artifacts,to,mesos,tasks,param,uris,a,comma,delimited,optional,string,listing,artifact,uris;public,static,list,string,build,uris,option,string,uris,if,uris,is,empty,return,collections,empty,list,else,list,string,uris,list,new,array,list,for,string,uri,uris,get,split,uris,list,add,uri,trim,return,uris,list
MesosTaskManagerParameters -> public static List<String> buildUris(Option<String> uris);1530683488;Build a list of URIs for providing custom artifacts to Mesos tasks._@param uris a comma delimited optional string listing artifact URIs;public static List<String> buildUris(Option<String> uris) {_		if (uris.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<String> urisList = new ArrayList<>()__			for (String uri : uris.get().split(",")) {_				urisList.add(uri.trim())__			}_			return urisList__		}_	};build,a,list,of,uris,for,providing,custom,artifacts,to,mesos,tasks,param,uris,a,comma,delimited,optional,string,listing,artifact,uris;public,static,list,string,build,uris,option,string,uris,if,uris,is,empty,return,collections,empty,list,else,list,string,uris,list,new,array,list,for,string,uri,uris,get,split,uris,list,add,uri,trim,return,uris,list
MesosTaskManagerParameters -> public static List<String> buildUris(Option<String> uris);1533830558;Build a list of URIs for providing custom artifacts to Mesos tasks._@param uris a comma delimited optional string listing artifact URIs;public static List<String> buildUris(Option<String> uris) {_		if (uris.isEmpty()) {_			return Collections.emptyList()__		} else {_			List<String> urisList = new ArrayList<>()__			for (String uri : uris.get().split(",")) {_				urisList.add(uri.trim())__			}_			return urisList__		}_	};build,a,list,of,uris,for,providing,custom,artifacts,to,mesos,tasks,param,uris,a,comma,delimited,optional,string,listing,artifact,uris;public,static,list,string,build,uris,option,string,uris,if,uris,is,empty,return,collections,empty,list,else,list,string,uris,list,new,array,list,for,string,uri,uris,get,split,uris,list,add,uri,trim,return,uris,list
MesosTaskManagerParameters -> public String command();1503156321;Get the command.;public String command() {_		return command__	};get,the,command;public,string,command,return,command
MesosTaskManagerParameters -> public String command();1516971021;Get the command.;public String command() {_		return command__	};get,the,command;public,string,command,return,command
MesosTaskManagerParameters -> public String command();1517302807;Get the command.;public String command() {_		return command__	};get,the,command;public,string,command,return,command
MesosTaskManagerParameters -> public String command();1518451454;Get the command.;public String command() {_		return command__	};get,the,command;public,string,command,return,command
MesosTaskManagerParameters -> public String command();1523527073;Get the command.;public String command() {_		return command__	};get,the,command;public,string,command,return,command
MesosTaskManagerParameters -> public String command();1530393587;Get the command.;public String command() {_		return command__	};get,the,command;public,string,command,return,command
MesosTaskManagerParameters -> public String command();1530683488;Get the command.;public String command() {_		return command__	};get,the,command;public,string,command,return,command
MesosTaskManagerParameters -> public String command();1533830558;Get the command.;public String command() {_		return command__	};get,the,command;public,string,command,return,command
MesosTaskManagerParameters -> public Option<String> bootstrapCommand();1493976970;Get the bootstrap command.;public Option<String> bootstrapCommand() { return bootstrapCommand_	};get,the,bootstrap,command;public,option,string,bootstrap,command,return,bootstrap,command
MesosTaskManagerParameters -> public Option<String> bootstrapCommand();1493976971;Get the bootstrap command.;public Option<String> bootstrapCommand() { return bootstrapCommand_	};get,the,bootstrap,command;public,option,string,bootstrap,command,return,bootstrap,command
MesosTaskManagerParameters -> public Option<String> bootstrapCommand();1495720586;Get the bootstrap command.;public Option<String> bootstrapCommand() {_		return bootstrapCommand__	};get,the,bootstrap,command;public,option,string,bootstrap,command,return,bootstrap,command
MesosTaskManagerParameters -> public Option<String> bootstrapCommand();1503156321;Get the bootstrap command.;public Option<String> bootstrapCommand() {_		return bootstrapCommand__	};get,the,bootstrap,command;public,option,string,bootstrap,command,return,bootstrap,command
MesosTaskManagerParameters -> public Option<String> bootstrapCommand();1516971021;Get the bootstrap command.;public Option<String> bootstrapCommand() {_		return bootstrapCommand__	};get,the,bootstrap,command;public,option,string,bootstrap,command,return,bootstrap,command
MesosTaskManagerParameters -> public Option<String> bootstrapCommand();1517302807;Get the bootstrap command.;public Option<String> bootstrapCommand() {_		return bootstrapCommand__	};get,the,bootstrap,command;public,option,string,bootstrap,command,return,bootstrap,command
MesosTaskManagerParameters -> public Option<String> bootstrapCommand();1518451454;Get the bootstrap command.;public Option<String> bootstrapCommand() {_		return bootstrapCommand__	};get,the,bootstrap,command;public,option,string,bootstrap,command,return,bootstrap,command
MesosTaskManagerParameters -> public Option<String> bootstrapCommand();1523527073;Get the bootstrap command.;public Option<String> bootstrapCommand() {_		return bootstrapCommand__	};get,the,bootstrap,command;public,option,string,bootstrap,command,return,bootstrap,command
MesosTaskManagerParameters -> public Option<String> bootstrapCommand();1530393587;Get the bootstrap command.;public Option<String> bootstrapCommand() {_		return bootstrapCommand__	};get,the,bootstrap,command;public,option,string,bootstrap,command,return,bootstrap,command
MesosTaskManagerParameters -> public Option<String> bootstrapCommand();1530683488;Get the bootstrap command.;public Option<String> bootstrapCommand() {_		return bootstrapCommand__	};get,the,bootstrap,command;public,option,string,bootstrap,command,return,bootstrap,command
MesosTaskManagerParameters -> public Option<String> bootstrapCommand();1533830558;Get the bootstrap command.;public Option<String> bootstrapCommand() {_		return bootstrapCommand__	};get,the,bootstrap,command;public,option,string,bootstrap,command,return,bootstrap,command
MesosTaskManagerParameters -> public int gpus();1517302807;Get the GPU units to use for the TaskManager Process.;public int gpus() {_		return gpus__	};get,the,gpu,units,to,use,for,the,task,manager,process;public,int,gpus,return,gpus
MesosTaskManagerParameters -> public int gpus();1518451454;Get the GPU units to use for the TaskManager Process.;public int gpus() {_		return gpus__	};get,the,gpu,units,to,use,for,the,task,manager,process;public,int,gpus,return,gpus
MesosTaskManagerParameters -> public int gpus();1523527073;Get the GPU units to use for the TaskManager Process.;public int gpus() {_		return gpus__	};get,the,gpu,units,to,use,for,the,task,manager,process;public,int,gpus,return,gpus
MesosTaskManagerParameters -> public int gpus();1530393587;Get the GPU units to use for the TaskManager Process.;public int gpus() {_		return gpus__	};get,the,gpu,units,to,use,for,the,task,manager,process;public,int,gpus,return,gpus
MesosTaskManagerParameters -> public int gpus();1530683488;Get the GPU units to use for the TaskManager Process.;public int gpus() {_		return gpus__	};get,the,gpu,units,to,use,for,the,task,manager,process;public,int,gpus,return,gpus
MesosTaskManagerParameters -> public int gpus();1533830558;Get the GPU units to use for the TaskManager Process.;public int gpus() {_		return gpus__	};get,the,gpu,units,to,use,for,the,task,manager,process;public,int,gpus,return,gpus
MesosTaskManagerParameters -> public ContainerType containerType();1480980565;Get the container type (Mesos or Docker).  The default is Mesos.__Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1481907119;Get the container type (Mesos or Docker).  The default is Mesos.__Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1493364252;Get the container type (Mesos or Docker).  The default is Mesos.__Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1493364279;Get the container type (Mesos or Docker).  The default is Mesos.__Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1493976970;Get the container type (Mesos or Docker).  The default is Mesos.__Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1493976971;Get the container type (Mesos or Docker).  The default is Mesos.__Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1495720586;Get the container type (Mesos or Docker).  The default is Mesos.__<p>Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,p,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1503156321;Get the container type (Mesos or Docker).  The default is Mesos.__<p>Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,p,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1516971021;Get the container type (Mesos or Docker).  The default is Mesos.__<p>Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,p,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1517302807;Get the container type (Mesos or Docker).  The default is Mesos.__<p>Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,p,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1518451454;Get the container type (Mesos or Docker).  The default is Mesos.__<p>Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,p,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1523527073;Get the container type (Mesos or Docker).  The default is Mesos.__<p>Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,p,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1530393587;Get the container type (Mesos or Docker).  The default is Mesos.__<p>Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,p,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1530683488;Get the container type (Mesos or Docker).  The default is Mesos.__<p>Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,p,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public ContainerType containerType();1533830558;Get the container type (Mesos or Docker).  The default is Mesos.__<p>Mesos provides a facility for a framework to specify which containerizer to use.;public ContainerType containerType() {_		return containerType__	};get,the,container,type,mesos,or,docker,the,default,is,mesos,p,mesos,provides,a,facility,for,a,framework,to,specify,which,containerizer,to,use;public,container,type,container,type,return,container,type
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1493364252;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1493364279;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1493976970;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1493976971;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1495720586;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1503156321;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1516971021;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1517302807;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1518451454;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1523527073;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1530393587;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1530683488;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes);1533830558;Used to build volume specs for mesos. This allows for mounting additional volumes into a container__@param containerVolumes a comma delimited optional string of [host_path:]container_path[:RO|RW] that_defines mount points for a container volume. If None or empty string, returns_an empty iterator;public static List<Protos.Volume> buildVolumes(Option<String> containerVolumes) {_		if (containerVolumes.isEmpty()) {_			return Collections.emptyList()__		} else {_			String[] volumeSpecifications = containerVolumes.get().split(",")___			List<Protos.Volume> volumes = new ArrayList<>(volumeSpecifications.length)___			for (String volumeSpecification : volumeSpecifications) {_				if (!volumeSpecification.trim().isEmpty()) {_					Protos.Volume.Builder volume = Protos.Volume.newBuilder()__					volume.setMode(Protos.Volume.Mode.RW)___					String[] parts = volumeSpecification.split(":")___					switch (parts.length) {_						case 1:_							volume.setContainerPath(parts[0])__							break__						case 2:_							try {_								Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[1].trim().toUpperCase())__								volume.setMode(mode)_									.setContainerPath(parts[0])__							} catch (IllegalArgumentException e) {_								volume.setHostPath(parts[0])_									.setContainerPath(parts[1])__							}_							break__						case 3:_							Protos.Volume.Mode mode = Protos.Volume.Mode.valueOf(parts[2].trim().toUpperCase())__							volume.setMode(mode)_								.setHostPath(parts[0])_								.setContainerPath(parts[1])__							break__						default:_							throw new IllegalArgumentException("volume specification is invalid, given: " + volumeSpecification)__					}__					volumes.add(volume.build())__				}_			}_			return volumes__		}_	};used,to,build,volume,specs,for,mesos,this,allows,for,mounting,additional,volumes,into,a,container,param,container,volumes,a,comma,delimited,optional,string,of,ro,rw,that,defines,mount,points,for,a,container,volume,if,none,or,empty,string,returns,an,empty,iterator;public,static,list,protos,volume,build,volumes,option,string,container,volumes,if,container,volumes,is,empty,return,collections,empty,list,else,string,volume,specifications,container,volumes,get,split,list,protos,volume,volumes,new,array,list,volume,specifications,length,for,string,volume,specification,volume,specifications,if,volume,specification,trim,is,empty,protos,volume,builder,volume,protos,volume,new,builder,volume,set,mode,protos,volume,mode,rw,string,parts,volume,specification,split,switch,parts,length,case,1,volume,set,container,path,parts,0,break,case,2,try,protos,volume,mode,mode,protos,volume,mode,value,of,parts,1,trim,to,upper,case,volume,set,mode,mode,set,container,path,parts,0,catch,illegal,argument,exception,e,volume,set,host,path,parts,0,set,container,path,parts,1,break,case,3,protos,volume,mode,mode,protos,volume,mode,value,of,parts,2,trim,to,upper,case,volume,set,mode,mode,set,host,path,parts,0,set,container,path,parts,1,break,default,throw,new,illegal,argument,exception,volume,specification,is,invalid,given,volume,specification,volumes,add,volume,build,return,volumes
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1480980565;Create the Mesos TaskManager parameters._@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if(cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch(containerTypeString) {_			case ConfigConstants.MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case ConfigConstants.MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if(imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		return new MesosTaskManagerParameters(_			cpus,_			containerType,_			Option.apply(imageName),_			containeredParameters)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,config,constants,container,type,container,type,mesos,break,case,config,constants,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,return,new,mesos,task,manager,parameters,cpus,container,type,option,apply,image,name,containered,parameters
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1481907119;Create the Mesos TaskManager parameters._@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if(cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch(containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if(imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		return new MesosTaskManagerParameters(_			cpus,_			containerType,_			Option.apply(imageName),_			containeredParameters)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,return,new,mesos,task,manager,parameters,cpus,container,type,option,apply,image,name,containered,parameters
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1493364252;Create the Mesos TaskManager parameters._@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if(cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch(containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if(imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		return new MesosTaskManagerParameters(_			cpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,_			containerVolumes)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,list,protos,volume,container,volumes,build,volumes,container,vol,opt,return,new,mesos,task,manager,parameters,cpus,container,type,option,apply,image,name,containered,parameters,container,volumes
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1493364279;Create the Mesos TaskManager parameters._@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if(cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch(containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if(imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		return new MesosTaskManagerParameters(_			cpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,			_			containerVolumes,_			constraints)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,list,protos,volume,container,volumes,build,volumes,container,vol,opt,return,new,mesos,task,manager,parameters,cpus,container,type,option,apply,image,name,containered,parameters,container,volumes,constraints
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1493976970;Create the Mesos TaskManager parameters._@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if(cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch(containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if(imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		_		Option<String> tmHostname = Option.apply(flinkConfig.getString(MESOS_TM_HOSTNAME))___		_		Option<String> tmBootstrapCommand = Option.apply(flinkConfig.getString(MESOS_TM_BOOTSTRAP_CMD))___		return new MesosTaskManagerParameters(_			cpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,			_			containerVolumes,_			constraints,_			tmBootstrapCommand,_			tmHostname)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,list,protos,volume,container,volumes,build,volumes,container,vol,opt,option,string,tm,hostname,option,apply,flink,config,get,string,option,string,tm,bootstrap,command,option,apply,flink,config,get,string,return,new,mesos,task,manager,parameters,cpus,container,type,option,apply,image,name,containered,parameters,container,volumes,constraints,tm,bootstrap,command,tm,hostname
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1493976971;Create the Mesos TaskManager parameters._@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if(cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch(containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if(imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		_		Option<String> taskManagerHostname = Option.apply(flinkConfig.getString(MESOS_TM_HOSTNAME))___		_		Option<String> tmBootstrapCommand = Option.apply(flinkConfig.getString(MESOS_TM_BOOTSTRAP_CMD))___		return new MesosTaskManagerParameters(_			cpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,			_			containerVolumes,_			constraints,_			tmBootstrapCommand,_			taskManagerHostname)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,list,protos,volume,container,volumes,build,volumes,container,vol,opt,option,string,task,manager,hostname,option,apply,flink,config,get,string,option,string,tm,bootstrap,command,option,apply,flink,config,get,string,return,new,mesos,task,manager,parameters,cpus,container,type,option,apply,image,name,containered,parameters,container,volumes,constraints,tm,bootstrap,command,task,manager,hostname
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1495720586;Create the Mesos TaskManager parameters.__@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if (cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch (containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if (imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		_		Option<String> taskManagerHostname = Option.apply(flinkConfig.getString(MESOS_TM_HOSTNAME))___		_		Option<String> tmBootstrapCommand = Option.apply(flinkConfig.getString(MESOS_TM_BOOTSTRAP_CMD))___		return new MesosTaskManagerParameters(_			cpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,_			containerVolumes,_			constraints,_			tmBootstrapCommand,_			taskManagerHostname)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,list,protos,volume,container,volumes,build,volumes,container,vol,opt,option,string,task,manager,hostname,option,apply,flink,config,get,string,option,string,tm,bootstrap,command,option,apply,flink,config,get,string,return,new,mesos,task,manager,parameters,cpus,container,type,option,apply,image,name,containered,parameters,container,volumes,constraints,tm,bootstrap,command,task,manager,hostname
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1503156321;Create the Mesos TaskManager parameters.__@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if (cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch (containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if (imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		_		Option<String> taskManagerHostname = Option.apply(flinkConfig.getString(MESOS_TM_HOSTNAME))___		_		String tmCommand = flinkConfig.getString(MESOS_TM_CMD)__		Option<String> tmBootstrapCommand = Option.apply(flinkConfig.getString(MESOS_TM_BOOTSTRAP_CMD))___		return new MesosTaskManagerParameters(_			cpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,_			containerVolumes,_			constraints,_			tmCommand,_			tmBootstrapCommand,_			taskManagerHostname)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,list,protos,volume,container,volumes,build,volumes,container,vol,opt,option,string,task,manager,hostname,option,apply,flink,config,get,string,string,tm,command,flink,config,get,string,option,string,tm,bootstrap,command,option,apply,flink,config,get,string,return,new,mesos,task,manager,parameters,cpus,container,type,option,apply,image,name,containered,parameters,container,volumes,constraints,tm,command,tm,bootstrap,command,task,manager,hostname
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1516971021;Create the Mesos TaskManager parameters.__@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if (cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch (containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if (imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		Option<String> dockerParamsOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_DOCKER_PARAMETERS))___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		List<Protos.Parameter> dockerParameters = buildDockerParameters(dockerParamsOpt)___		_		Option<String> taskManagerHostname = Option.apply(flinkConfig.getString(MESOS_TM_HOSTNAME))___		_		String tmCommand = flinkConfig.getString(MESOS_TM_CMD)__		Option<String> tmBootstrapCommand = Option.apply(flinkConfig.getString(MESOS_TM_BOOTSTRAP_CMD))___		return new MesosTaskManagerParameters(_			cpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,_			containerVolumes,_			dockerParameters,_			constraints,_			tmCommand,_			tmBootstrapCommand,_			taskManagerHostname)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,option,string,docker,params,opt,option,string,apply,flink,config,get,string,list,protos,volume,container,volumes,build,volumes,container,vol,opt,list,protos,parameter,docker,parameters,build,docker,parameters,docker,params,opt,option,string,task,manager,hostname,option,apply,flink,config,get,string,string,tm,command,flink,config,get,string,option,string,tm,bootstrap,command,option,apply,flink,config,get,string,return,new,mesos,task,manager,parameters,cpus,container,type,option,apply,image,name,containered,parameters,container,volumes,docker,parameters,constraints,tm,command,tm,bootstrap,command,task,manager,hostname
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1517302807;Create the Mesos TaskManager parameters.__@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if (cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		int gpus = flinkConfig.getInteger(MESOS_RM_TASKS_GPUS)___		if (gpus < 0) {_			throw new IllegalConfigurationException(MESOS_RM_TASKS_GPUS.key() +_				" cannot be negative")__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch (containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if (imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		Option<String> dockerParamsOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_DOCKER_PARAMETERS))___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		List<Protos.Parameter> dockerParameters = buildDockerParameters(dockerParamsOpt)___		_		Option<String> taskManagerHostname = Option.apply(flinkConfig.getString(MESOS_TM_HOSTNAME))___		_		String tmCommand = flinkConfig.getString(MESOS_TM_CMD)__		Option<String> tmBootstrapCommand = Option.apply(flinkConfig.getString(MESOS_TM_BOOTSTRAP_CMD))___		return new MesosTaskManagerParameters(_			cpus,_			gpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,_			containerVolumes,_			dockerParameters,_			constraints,_			tmCommand,_			tmBootstrapCommand,_			taskManagerHostname)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,int,gpus,flink,config,get,integer,if,gpus,0,throw,new,illegal,configuration,exception,key,cannot,be,negative,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,option,string,docker,params,opt,option,string,apply,flink,config,get,string,list,protos,volume,container,volumes,build,volumes,container,vol,opt,list,protos,parameter,docker,parameters,build,docker,parameters,docker,params,opt,option,string,task,manager,hostname,option,apply,flink,config,get,string,string,tm,command,flink,config,get,string,option,string,tm,bootstrap,command,option,apply,flink,config,get,string,return,new,mesos,task,manager,parameters,cpus,gpus,container,type,option,apply,image,name,containered,parameters,container,volumes,docker,parameters,constraints,tm,command,tm,bootstrap,command,task,manager,hostname
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1518451454;Create the Mesos TaskManager parameters.__@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if (cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		int gpus = flinkConfig.getInteger(MESOS_RM_TASKS_GPUS)___		if (gpus < 0) {_			throw new IllegalConfigurationException(MESOS_RM_TASKS_GPUS.key() +_				" cannot be negative")__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch (containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if (imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		Option<String> dockerParamsOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_DOCKER_PARAMETERS))___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		List<Protos.Parameter> dockerParameters = buildDockerParameters(dockerParamsOpt)___		_		Option<String> taskManagerHostname = Option.apply(flinkConfig.getString(MESOS_TM_HOSTNAME))___		_		String tmCommand = flinkConfig.getString(MESOS_TM_CMD)__		Option<String> tmBootstrapCommand = Option.apply(flinkConfig.getString(MESOS_TM_BOOTSTRAP_CMD))___		return new MesosTaskManagerParameters(_			cpus,_			gpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,_			containerVolumes,_			dockerParameters,_			constraints,_			tmCommand,_			tmBootstrapCommand,_			taskManagerHostname)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,int,gpus,flink,config,get,integer,if,gpus,0,throw,new,illegal,configuration,exception,key,cannot,be,negative,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,option,string,docker,params,opt,option,string,apply,flink,config,get,string,list,protos,volume,container,volumes,build,volumes,container,vol,opt,list,protos,parameter,docker,parameters,build,docker,parameters,docker,params,opt,option,string,task,manager,hostname,option,apply,flink,config,get,string,string,tm,command,flink,config,get,string,option,string,tm,bootstrap,command,option,apply,flink,config,get,string,return,new,mesos,task,manager,parameters,cpus,gpus,container,type,option,apply,image,name,containered,parameters,container,volumes,docker,parameters,constraints,tm,command,tm,bootstrap,command,task,manager,hostname
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1523527073;Create the Mesos TaskManager parameters.__@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if (cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		int gpus = flinkConfig.getInteger(MESOS_RM_TASKS_GPUS)___		if (gpus < 0) {_			throw new IllegalConfigurationException(MESOS_RM_TASKS_GPUS.key() +_				" cannot be negative")__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch (containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if (imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		Option<String> dockerParamsOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_DOCKER_PARAMETERS))___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		List<Protos.Parameter> dockerParameters = buildDockerParameters(dockerParamsOpt)___		_		Option<String> taskManagerHostname = Option.apply(flinkConfig.getString(MESOS_TM_HOSTNAME))___		_		String tmCommand = flinkConfig.getString(MESOS_TM_CMD)__		Option<String> tmBootstrapCommand = Option.apply(flinkConfig.getString(MESOS_TM_BOOTSTRAP_CMD))___		return new MesosTaskManagerParameters(_			cpus,_			gpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,_			containerVolumes,_			dockerParameters,_			constraints,_			tmCommand,_			tmBootstrapCommand,_			taskManagerHostname)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,int,gpus,flink,config,get,integer,if,gpus,0,throw,new,illegal,configuration,exception,key,cannot,be,negative,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,option,string,docker,params,opt,option,string,apply,flink,config,get,string,list,protos,volume,container,volumes,build,volumes,container,vol,opt,list,protos,parameter,docker,parameters,build,docker,parameters,docker,params,opt,option,string,task,manager,hostname,option,apply,flink,config,get,string,string,tm,command,flink,config,get,string,option,string,tm,bootstrap,command,option,apply,flink,config,get,string,return,new,mesos,task,manager,parameters,cpus,gpus,container,type,option,apply,image,name,containered,parameters,container,volumes,docker,parameters,constraints,tm,command,tm,bootstrap,command,task,manager,hostname
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1530393587;Create the Mesos TaskManager parameters.__@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if (cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		int gpus = flinkConfig.getInteger(MESOS_RM_TASKS_GPUS)___		if (gpus < 0) {_			throw new IllegalConfigurationException(MESOS_RM_TASKS_GPUS.key() +_				" cannot be negative")__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch (containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if (imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		Option<String> dockerParamsOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_DOCKER_PARAMETERS))___		Option<String> uriParamsOpt = Option.<String>apply(flinkConfig.getString(MESOS_TM_URIS))___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		List<Protos.Parameter> dockerParameters = buildDockerParameters(dockerParamsOpt)___		List<String> uris = buildUris(uriParamsOpt)___		_		Option<String> taskManagerHostname = Option.apply(flinkConfig.getString(MESOS_TM_HOSTNAME))___		_		String tmCommand = flinkConfig.getString(MESOS_TM_CMD)__		Option<String> tmBootstrapCommand = Option.apply(flinkConfig.getString(MESOS_TM_BOOTSTRAP_CMD))___		return new MesosTaskManagerParameters(_			cpus,_			gpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,_			containerVolumes,_			dockerParameters,_			constraints,_			tmCommand,_			tmBootstrapCommand,_			taskManagerHostname,_			uris)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,int,gpus,flink,config,get,integer,if,gpus,0,throw,new,illegal,configuration,exception,key,cannot,be,negative,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,option,string,docker,params,opt,option,string,apply,flink,config,get,string,option,string,uri,params,opt,option,string,apply,flink,config,get,string,list,protos,volume,container,volumes,build,volumes,container,vol,opt,list,protos,parameter,docker,parameters,build,docker,parameters,docker,params,opt,list,string,uris,build,uris,uri,params,opt,option,string,task,manager,hostname,option,apply,flink,config,get,string,string,tm,command,flink,config,get,string,option,string,tm,bootstrap,command,option,apply,flink,config,get,string,return,new,mesos,task,manager,parameters,cpus,gpus,container,type,option,apply,image,name,containered,parameters,container,volumes,docker,parameters,constraints,tm,command,tm,bootstrap,command,task,manager,hostname,uris
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1530683488;Create the Mesos TaskManager parameters.__@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if (cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		int gpus = flinkConfig.getInteger(MESOS_RM_TASKS_GPUS)___		if (gpus < 0) {_			throw new IllegalConfigurationException(MESOS_RM_TASKS_GPUS.key() +_				" cannot be negative")__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch (containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if (imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		Option<String> dockerParamsOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_DOCKER_PARAMETERS))___		Option<String> uriParamsOpt = Option.<String>apply(flinkConfig.getString(MESOS_TM_URIS))___		boolean dockerForcePullImage = flinkConfig.getBoolean(MESOS_RM_CONTAINER_DOCKER_FORCE_PULL_IMAGE)___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		List<Protos.Parameter> dockerParameters = buildDockerParameters(dockerParamsOpt)___		List<String> uris = buildUris(uriParamsOpt)___		_		Option<String> taskManagerHostname = Option.apply(flinkConfig.getString(MESOS_TM_HOSTNAME))___		_		String tmCommand = flinkConfig.getString(MESOS_TM_CMD)__		Option<String> tmBootstrapCommand = Option.apply(flinkConfig.getString(MESOS_TM_BOOTSTRAP_CMD))___		return new MesosTaskManagerParameters(_			cpus,_			gpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,_			containerVolumes,_			dockerParameters,_			dockerForcePullImage,_			constraints,_			tmCommand,_			tmBootstrapCommand,_			taskManagerHostname,_			uris)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,int,gpus,flink,config,get,integer,if,gpus,0,throw,new,illegal,configuration,exception,key,cannot,be,negative,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,option,string,docker,params,opt,option,string,apply,flink,config,get,string,option,string,uri,params,opt,option,string,apply,flink,config,get,string,boolean,docker,force,pull,image,flink,config,get,boolean,list,protos,volume,container,volumes,build,volumes,container,vol,opt,list,protos,parameter,docker,parameters,build,docker,parameters,docker,params,opt,list,string,uris,build,uris,uri,params,opt,option,string,task,manager,hostname,option,apply,flink,config,get,string,string,tm,command,flink,config,get,string,option,string,tm,bootstrap,command,option,apply,flink,config,get,string,return,new,mesos,task,manager,parameters,cpus,gpus,container,type,option,apply,image,name,containered,parameters,container,volumes,docker,parameters,docker,force,pull,image,constraints,tm,command,tm,bootstrap,command,task,manager,hostname,uris
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create(Configuration flinkConfig);1533830558;Create the Mesos TaskManager parameters.__@param flinkConfig the TM configuration.;public static MesosTaskManagerParameters create(Configuration flinkConfig) {__		List<ConstraintEvaluator> constraints = parseConstraints(flinkConfig.getString(MESOS_CONSTRAINTS_HARD_HOSTATTR))__		_		ContaineredTaskManagerParameters containeredParameters = ContaineredTaskManagerParameters.create(_			flinkConfig,_			flinkConfig.getInteger(MESOS_RM_TASKS_MEMORY_MB),_			flinkConfig.getInteger(MESOS_RM_TASKS_SLOTS))___		double cpus = flinkConfig.getDouble(MESOS_RM_TASKS_CPUS)__		if (cpus <= 0.0) {_			cpus = Math.max(containeredParameters.numSlots(), 1.0)__		}__		int gpus = flinkConfig.getInteger(MESOS_RM_TASKS_GPUS)___		if (gpus < 0) {_			throw new IllegalConfigurationException(MESOS_RM_TASKS_GPUS.key() +_				" cannot be negative")__		}__		_		String imageName = flinkConfig.getString(MESOS_RM_CONTAINER_IMAGE_NAME)___		ContainerType containerType__		String containerTypeString = flinkConfig.getString(MESOS_RM_CONTAINER_TYPE)__		switch (containerTypeString) {_			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_MESOS:_				containerType = ContainerType.MESOS__				break__			case MESOS_RESOURCEMANAGER_TASKS_CONTAINER_TYPE_DOCKER:_				containerType = ContainerType.DOCKER__				if (imageName == null || imageName.length() == 0) {_					throw new IllegalConfigurationException(MESOS_RM_CONTAINER_IMAGE_NAME.key() +_						" must be specified for docker container type")__				}_				break__			default:_				throw new IllegalConfigurationException("invalid container type: " + containerTypeString)__		}__		Option<String> containerVolOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_VOLUMES))___		Option<String> dockerParamsOpt = Option.<String>apply(flinkConfig.getString(MESOS_RM_CONTAINER_DOCKER_PARAMETERS))___		Option<String> uriParamsOpt = Option.<String>apply(flinkConfig.getString(MESOS_TM_URIS))___		boolean dockerForcePullImage = flinkConfig.getBoolean(MESOS_RM_CONTAINER_DOCKER_FORCE_PULL_IMAGE)___		List<Protos.Volume> containerVolumes = buildVolumes(containerVolOpt)___		List<Protos.Parameter> dockerParameters = buildDockerParameters(dockerParamsOpt)___		List<String> uris = buildUris(uriParamsOpt)___		_		Option<String> taskManagerHostname = Option.apply(flinkConfig.getString(MESOS_TM_HOSTNAME))___		_		String tmCommand = flinkConfig.getString(MESOS_TM_CMD)__		Option<String> tmBootstrapCommand = Option.apply(flinkConfig.getString(MESOS_TM_BOOTSTRAP_CMD))___		return new MesosTaskManagerParameters(_			cpus,_			gpus,_			containerType,_			Option.apply(imageName),_			containeredParameters,_			containerVolumes,_			dockerParameters,_			dockerForcePullImage,_			constraints,_			tmCommand,_			tmBootstrapCommand,_			taskManagerHostname,_			uris)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration;public,static,mesos,task,manager,parameters,create,configuration,flink,config,list,constraint,evaluator,constraints,parse,constraints,flink,config,get,string,containered,task,manager,parameters,containered,parameters,containered,task,manager,parameters,create,flink,config,flink,config,get,integer,flink,config,get,integer,double,cpus,flink,config,get,double,if,cpus,0,0,cpus,math,max,containered,parameters,num,slots,1,0,int,gpus,flink,config,get,integer,if,gpus,0,throw,new,illegal,configuration,exception,key,cannot,be,negative,string,image,name,flink,config,get,string,container,type,container,type,string,container,type,string,flink,config,get,string,switch,container,type,string,case,container,type,container,type,mesos,break,case,container,type,container,type,docker,if,image,name,null,image,name,length,0,throw,new,illegal,configuration,exception,key,must,be,specified,for,docker,container,type,break,default,throw,new,illegal,configuration,exception,invalid,container,type,container,type,string,option,string,container,vol,opt,option,string,apply,flink,config,get,string,option,string,docker,params,opt,option,string,apply,flink,config,get,string,option,string,uri,params,opt,option,string,apply,flink,config,get,string,boolean,docker,force,pull,image,flink,config,get,boolean,list,protos,volume,container,volumes,build,volumes,container,vol,opt,list,protos,parameter,docker,parameters,build,docker,parameters,docker,params,opt,list,string,uris,build,uris,uri,params,opt,option,string,task,manager,hostname,option,apply,flink,config,get,string,string,tm,command,flink,config,get,string,option,string,tm,bootstrap,command,option,apply,flink,config,get,string,return,new,mesos,task,manager,parameters,cpus,gpus,container,type,option,apply,image,name,containered,parameters,container,volumes,docker,parameters,docker,force,pull,image,constraints,tm,command,tm,bootstrap,command,task,manager,hostname,uris
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1472484771;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1480980565;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1481907119;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1493364252;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1493364279;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1493976970;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1493976971;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1495720586;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1503156321;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1516971021;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1517302807;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1518451454;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1523527073;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1530393587;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1530683488;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public ContaineredTaskManagerParameters containeredParameters();1533830558;Get the common containered parameters.;public ContaineredTaskManagerParameters containeredParameters() {_		return containeredParameters__	};get,the,common,containered,parameters;public,containered,task,manager,parameters,containered,parameters,return,containered,parameters
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create( 		Configuration flinkConfig, 		ContaineredTaskManagerParameters containeredParameters);1472484430;Create the Mesos TaskManager parameters._@param flinkConfig the TM configuration._@param containeredParameters additional containered parameters.;public static MesosTaskManagerParameters create(_		Configuration flinkConfig,_		ContaineredTaskManagerParameters containeredParameters) {__		double cpus = flinkConfig.getDouble(ConfigConstants.MESOS_RESOURCEMANAGER_TASKS_CPUS,_			Math.max(containeredParameters.numSlots(), 1.0))___		return new MesosTaskManagerParameters(cpus, containeredParameters)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration,param,containered,parameters,additional,containered,parameters;public,static,mesos,task,manager,parameters,create,configuration,flink,config,containered,task,manager,parameters,containered,parameters,double,cpus,flink,config,get,double,config,constants,math,max,containered,parameters,num,slots,1,0,return,new,mesos,task,manager,parameters,cpus,containered,parameters
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create( 		Configuration flinkConfig, 		ContaineredTaskManagerParameters containeredParameters);1472484766;Create the Mesos TaskManager parameters._@param flinkConfig the TM configuration._@param containeredParameters additional containered parameters.;public static MesosTaskManagerParameters create(_		Configuration flinkConfig,_		ContaineredTaskManagerParameters containeredParameters) {__		double cpus = flinkConfig.getDouble(ConfigConstants.MESOS_RESOURCEMANAGER_TASKS_CPUS,_			Math.max(containeredParameters.numSlots(), 1.0))___		return new MesosTaskManagerParameters(cpus, containeredParameters)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration,param,containered,parameters,additional,containered,parameters;public,static,mesos,task,manager,parameters,create,configuration,flink,config,containered,task,manager,parameters,containered,parameters,double,cpus,flink,config,get,double,config,constants,math,max,containered,parameters,num,slots,1,0,return,new,mesos,task,manager,parameters,cpus,containered,parameters
MesosTaskManagerParameters -> public static MesosTaskManagerParameters create( 		Configuration flinkConfig, 		ContaineredTaskManagerParameters containeredParameters);1472484771;Create the Mesos TaskManager parameters._@param flinkConfig the TM configuration._@param containeredParameters additional containered parameters.;public static MesosTaskManagerParameters create(_		Configuration flinkConfig,_		ContaineredTaskManagerParameters containeredParameters) {__		double cpus = flinkConfig.getDouble(ConfigConstants.MESOS_RESOURCEMANAGER_TASKS_CPUS,_			Math.max(containeredParameters.numSlots(), 1.0))___		return new MesosTaskManagerParameters(cpus, containeredParameters)__	};create,the,mesos,task,manager,parameters,param,flink,config,the,tm,configuration,param,containered,parameters,additional,containered,parameters;public,static,mesos,task,manager,parameters,create,configuration,flink,config,containered,task,manager,parameters,containered,parameters,double,cpus,flink,config,get,double,config,constants,math,max,containered,parameters,num,slots,1,0,return,new,mesos,task,manager,parameters,cpus,containered,parameters
MesosTaskManagerParameters -> public Option<String> getTaskManagerHostname();1493976970;Get the taskManager hostname.;public Option<String> getTaskManagerHostname() { return taskManagerHostname_ };get,the,task,manager,hostname;public,option,string,get,task,manager,hostname,return,task,manager,hostname
MesosTaskManagerParameters -> public Option<String> getTaskManagerHostname();1493976971;Get the taskManager hostname.;public Option<String> getTaskManagerHostname() { return taskManagerHostname_ };get,the,task,manager,hostname;public,option,string,get,task,manager,hostname,return,task,manager,hostname
MesosTaskManagerParameters -> public Option<String> getTaskManagerHostname();1495720586;Get the taskManager hostname.;public Option<String> getTaskManagerHostname() {_		return taskManagerHostname__	};get,the,task,manager,hostname;public,option,string,get,task,manager,hostname,return,task,manager,hostname
MesosTaskManagerParameters -> public Option<String> getTaskManagerHostname();1503156321;Get the taskManager hostname.;public Option<String> getTaskManagerHostname() {_		return taskManagerHostname__	};get,the,task,manager,hostname;public,option,string,get,task,manager,hostname,return,task,manager,hostname
MesosTaskManagerParameters -> public Option<String> getTaskManagerHostname();1516971021;Get the taskManager hostname.;public Option<String> getTaskManagerHostname() {_		return taskManagerHostname__	};get,the,task,manager,hostname;public,option,string,get,task,manager,hostname,return,task,manager,hostname
MesosTaskManagerParameters -> public Option<String> getTaskManagerHostname();1517302807;Get the taskManager hostname.;public Option<String> getTaskManagerHostname() {_		return taskManagerHostname__	};get,the,task,manager,hostname;public,option,string,get,task,manager,hostname,return,task,manager,hostname
MesosTaskManagerParameters -> public Option<String> getTaskManagerHostname();1518451454;Get the taskManager hostname.;public Option<String> getTaskManagerHostname() {_		return taskManagerHostname__	};get,the,task,manager,hostname;public,option,string,get,task,manager,hostname,return,task,manager,hostname
MesosTaskManagerParameters -> public Option<String> getTaskManagerHostname();1523527073;Get the taskManager hostname.;public Option<String> getTaskManagerHostname() {_		return taskManagerHostname__	};get,the,task,manager,hostname;public,option,string,get,task,manager,hostname,return,task,manager,hostname
MesosTaskManagerParameters -> public Option<String> getTaskManagerHostname();1530393587;Get the taskManager hostname.;public Option<String> getTaskManagerHostname() {_		return taskManagerHostname__	};get,the,task,manager,hostname;public,option,string,get,task,manager,hostname,return,task,manager,hostname
MesosTaskManagerParameters -> public Option<String> getTaskManagerHostname();1530683488;Get the taskManager hostname.;public Option<String> getTaskManagerHostname() {_		return taskManagerHostname__	};get,the,task,manager,hostname;public,option,string,get,task,manager,hostname,return,task,manager,hostname
MesosTaskManagerParameters -> public Option<String> getTaskManagerHostname();1533830558;Get the taskManager hostname.;public Option<String> getTaskManagerHostname() {_		return taskManagerHostname__	};get,the,task,manager,hostname;public,option,string,get,task,manager,hostname,return,task,manager,hostname
MesosTaskManagerParameters -> public double cpus();1472484771;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1480980565;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1481907119;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1493364252;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1493364279;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1493976970;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1493976971;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1495720586;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1503156321;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1516971021;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1517302807;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1518451454;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1523527073;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1530393587;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1530683488;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public double cpus();1533830558;Get the CPU units to use for the TaskManager process.;public double cpus() {_		return cpus__	};get,the,cpu,units,to,use,for,the,task,manager,process;public,double,cpus,return,cpus
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1493364252;Get the container volumes string;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1493364279;Get the container volumes string;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1493976970;Get the container volumes string;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1493976971;Get the container volumes string;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1495720586;Get the container volumes string.;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1503156321;Get the container volumes string.;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1516971021;Get the container volumes string.;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1517302807;Get the container volumes string.;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1518451454;Get the container volumes string.;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1523527073;Get the container volumes string.;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1530393587;Get the container volumes string.;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1530683488;Get the container volumes string.;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<Protos.Volume> containerVolumes();1533830558;Get the container volumes string.;public List<Protos.Volume> containerVolumes() {_		return containerVolumes__	};get,the,container,volumes,string;public,list,protos,volume,container,volumes,return,container,volumes
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1493364279;Get the placement constraints;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1493976970;Get the placement constraints;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1493976971;Get the placement constraints;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1495720586;Get the placement constraints.;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1503156321;Get the placement constraints.;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1516971021;Get the placement constraints.;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1517302807;Get the placement constraints.;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1518451454;Get the placement constraints.;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1523527073;Get the placement constraints.;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1530393587;Get the placement constraints.;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1530683488;Get the placement constraints.;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<ConstraintEvaluator> constraints();1533830558;Get the placement constraints.;public List<ConstraintEvaluator> constraints() {_		return constraints__	};get,the,placement,constraints;public,list,constraint,evaluator,constraints,return,constraints
MesosTaskManagerParameters -> public List<Protos.Parameter> dockerParameters();1516971021;Get Docker runtime parameters.;public List<Protos.Parameter> dockerParameters() {_		return dockerParameters__	};get,docker,runtime,parameters;public,list,protos,parameter,docker,parameters,return,docker,parameters
MesosTaskManagerParameters -> public List<Protos.Parameter> dockerParameters();1517302807;Get Docker runtime parameters.;public List<Protos.Parameter> dockerParameters() {_		return dockerParameters__	};get,docker,runtime,parameters;public,list,protos,parameter,docker,parameters,return,docker,parameters
MesosTaskManagerParameters -> public List<Protos.Parameter> dockerParameters();1518451454;Get Docker runtime parameters.;public List<Protos.Parameter> dockerParameters() {_		return dockerParameters__	};get,docker,runtime,parameters;public,list,protos,parameter,docker,parameters,return,docker,parameters
MesosTaskManagerParameters -> public List<Protos.Parameter> dockerParameters();1523527073;Get Docker runtime parameters.;public List<Protos.Parameter> dockerParameters() {_		return dockerParameters__	};get,docker,runtime,parameters;public,list,protos,parameter,docker,parameters,return,docker,parameters
MesosTaskManagerParameters -> public List<Protos.Parameter> dockerParameters();1530393587;Get Docker runtime parameters.;public List<Protos.Parameter> dockerParameters() {_		return dockerParameters__	};get,docker,runtime,parameters;public,list,protos,parameter,docker,parameters,return,docker,parameters
MesosTaskManagerParameters -> public List<Protos.Parameter> dockerParameters();1530683488;Get Docker runtime parameters.;public List<Protos.Parameter> dockerParameters() {_		return dockerParameters__	};get,docker,runtime,parameters;public,list,protos,parameter,docker,parameters,return,docker,parameters
MesosTaskManagerParameters -> public List<Protos.Parameter> dockerParameters();1533830558;Get Docker runtime parameters.;public List<Protos.Parameter> dockerParameters() {_		return dockerParameters__	};get,docker,runtime,parameters;public,list,protos,parameter,docker,parameters,return,docker,parameters
MesosTaskManagerParameters -> public boolean dockerForcePullImage();1530683488;Get Docker option to force pull image.;public boolean dockerForcePullImage() {_		return dockerForcePullImage__	};get,docker,option,to,force,pull,image;public,boolean,docker,force,pull,image,return,docker,force,pull,image
MesosTaskManagerParameters -> public boolean dockerForcePullImage();1533830558;Get Docker option to force pull image.;public boolean dockerForcePullImage() {_		return dockerForcePullImage__	};get,docker,option,to,force,pull,image;public,boolean,docker,force,pull,image,return,docker,force,pull,image
MesosTaskManagerParameters -> public Option<String> containerImageName();1480980565;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1481907119;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1493364252;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1493364279;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1493976970;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1493976971;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1495720586;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1503156321;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1516971021;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1517302807;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1518451454;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1523527073;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1530393587;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1530683488;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
MesosTaskManagerParameters -> public Option<String> containerImageName();1533830558;Get the container image name.;public Option<String> containerImageName() {_		return containerImageName__	};get,the,container,image,name;public,option,string,container,image,name,return,container,image,name
