# id;timestamp;commentText;codeText;commentWords;codeWords
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation);1512557432;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param allocation the resource allocation (available resources)._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())___		_		Set<String> roles = mesosConfiguration.roles()__		taskInfo.addAllResources(allocation.takeScalar("cpus", taskRequest.getCPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("mem", taskRequest.getMemory(), roles))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskManagerHostname)__		}__		_		List<Protos.Resource> portResources = allocation.takeRanges("ports", TM_PORT_KEYS.length, roles)__		taskInfo.addAllResources(portResources)__		Iterator<String> portsToAssign = Iterators.forArray(TM_PORT_KEYS)__		rangeValues(portResources).forEach(port -> dynamicProperties.setLong(portsToAssign.next(), port))__		if (portsToAssign.hasNext()) {_			throw new IllegalArgumentException("insufficient # of ports assigned")__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,allocation,the,resource,allocation,available,resources,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,mesos,resource,allocation,allocation,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,set,string,roles,mesos,configuration,roles,task,info,add,all,resources,allocation,take,scalar,cpus,task,request,get,cpus,roles,task,info,add,all,resources,allocation,take,scalar,mem,task,request,get,memory,roles,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,config,constants,task,manager,hostname,list,protos,resource,port,resources,allocation,take,ranges,ports,length,roles,task,info,add,all,resources,port,resources,iterator,string,ports,to,assign,iterators,for,array,range,values,port,resources,for,each,port,dynamic,properties,set,long,ports,to,assign,next,port,if,ports,to,assign,has,next,throw,new,illegal,argument,exception,insufficient,of,ports,assigned,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation);1516971021;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param allocation the resource allocation (available resources)._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())___		_		Set<String> roles = mesosConfiguration.roles()__		taskInfo.addAllResources(allocation.takeScalar("cpus", taskRequest.getCPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("mem", taskRequest.getMemory(), roles))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskManagerHostname)__		}__		_		List<Protos.Resource> portResources = allocation.takeRanges("ports", TM_PORT_KEYS.length, roles)__		taskInfo.addAllResources(portResources)__		Iterator<String> portsToAssign = Iterators.forArray(TM_PORT_KEYS)__		rangeValues(portResources).forEach(port -> dynamicProperties.setLong(portsToAssign.next(), port))__		if (portsToAssign.hasNext()) {_			throw new IllegalArgumentException("insufficient # of ports assigned")__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.addAllParameters(params.dockerParameters())_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,allocation,the,resource,allocation,available,resources,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,mesos,resource,allocation,allocation,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,set,string,roles,mesos,configuration,roles,task,info,add,all,resources,allocation,take,scalar,cpus,task,request,get,cpus,roles,task,info,add,all,resources,allocation,take,scalar,mem,task,request,get,memory,roles,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,config,constants,task,manager,hostname,list,protos,resource,port,resources,allocation,take,ranges,ports,length,roles,task,info,add,all,resources,port,resources,iterator,string,ports,to,assign,iterators,for,array,range,values,port,resources,for,each,port,dynamic,properties,set,long,ports,to,assign,next,port,if,ports,to,assign,has,next,throw,new,illegal,argument,exception,insufficient,of,ports,assigned,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,add,all,parameters,params,docker,parameters,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation);1517302807;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param allocation the resource allocation (available resources)._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())___		_		Set<String> roles = mesosConfiguration.roles()__		taskInfo.addAllResources(allocation.takeScalar("cpus", taskRequest.getCPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("gpus", taskRequest.getGPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("mem", taskRequest.getMemory(), roles))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskManagerHostname)__		}__		_		List<Protos.Resource> portResources = allocation.takeRanges("ports", TM_PORT_KEYS.length, roles)__		taskInfo.addAllResources(portResources)__		Iterator<String> portsToAssign = Iterators.forArray(TM_PORT_KEYS)__		rangeValues(portResources).forEach(port -> dynamicProperties.setLong(portsToAssign.next(), port))__		if (portsToAssign.hasNext()) {_			throw new IllegalArgumentException("insufficient # of ports assigned")__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.addAllParameters(params.dockerParameters())_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,allocation,the,resource,allocation,available,resources,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,mesos,resource,allocation,allocation,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,set,string,roles,mesos,configuration,roles,task,info,add,all,resources,allocation,take,scalar,cpus,task,request,get,cpus,roles,task,info,add,all,resources,allocation,take,scalar,gpus,task,request,get,gpus,roles,task,info,add,all,resources,allocation,take,scalar,mem,task,request,get,memory,roles,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,config,constants,task,manager,hostname,list,protos,resource,port,resources,allocation,take,ranges,ports,length,roles,task,info,add,all,resources,port,resources,iterator,string,ports,to,assign,iterators,for,array,range,values,port,resources,for,each,port,dynamic,properties,set,long,ports,to,assign,next,port,if,ports,to,assign,has,next,throw,new,illegal,argument,exception,insufficient,of,ports,assigned,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,add,all,parameters,params,docker,parameters,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation);1530393587;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param allocation the resource allocation (available resources)._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())___		_		Set<String> roles = mesosConfiguration.roles()__		taskInfo.addAllResources(allocation.takeScalar("cpus", taskRequest.getCPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("gpus", taskRequest.getGPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("mem", taskRequest.getMemory(), roles))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskManagerHostname)__		}__		_		List<Protos.Resource> portResources = allocation.takeRanges("ports", TM_PORT_KEYS.length, roles)__		taskInfo.addAllResources(portResources)__		Iterator<String> portsToAssign = Iterators.forArray(TM_PORT_KEYS)__		rangeValues(portResources).forEach(port -> dynamicProperties.setLong(portsToAssign.next(), port))__		if (portsToAssign.hasNext()) {_			throw new IllegalArgumentException("insufficient # of ports assigned")__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (String uri : params.uris()) {_			cmd.addUris(CommandInfo.URI.newBuilder().setValue(uri))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.addAllParameters(params.dockerParameters())_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,allocation,the,resource,allocation,available,resources,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,mesos,resource,allocation,allocation,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,set,string,roles,mesos,configuration,roles,task,info,add,all,resources,allocation,take,scalar,cpus,task,request,get,cpus,roles,task,info,add,all,resources,allocation,take,scalar,gpus,task,request,get,gpus,roles,task,info,add,all,resources,allocation,take,scalar,mem,task,request,get,memory,roles,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,config,constants,task,manager,hostname,list,protos,resource,port,resources,allocation,take,ranges,ports,length,roles,task,info,add,all,resources,port,resources,iterator,string,ports,to,assign,iterators,for,array,range,values,port,resources,for,each,port,dynamic,properties,set,long,ports,to,assign,next,port,if,ports,to,assign,has,next,throw,new,illegal,argument,exception,insufficient,of,ports,assigned,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,string,uri,params,uris,cmd,add,uris,command,info,uri,new,builder,set,value,uri,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,add,all,parameters,params,docker,parameters,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation);1530683488;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param allocation the resource allocation (available resources)._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())___		_		Set<String> roles = mesosConfiguration.roles()__		taskInfo.addAllResources(allocation.takeScalar("cpus", taskRequest.getCPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("gpus", taskRequest.getGPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("mem", taskRequest.getMemory(), roles))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskManagerHostname)__		}__		_		List<Protos.Resource> portResources = allocation.takeRanges("ports", TM_PORT_KEYS.length, roles)__		taskInfo.addAllResources(portResources)__		Iterator<String> portsToAssign = Iterators.forArray(TM_PORT_KEYS)__		rangeValues(portResources).forEach(port -> dynamicProperties.setLong(portsToAssign.next(), port))__		if (portsToAssign.hasNext()) {_			throw new IllegalArgumentException("insufficient # of ports assigned")__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (String uri : params.uris()) {_			cmd.addUris(CommandInfo.URI.newBuilder().setValue(uri))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.addAllParameters(params.dockerParameters())_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get())_						.setForcePullImage(params.dockerForcePullImage()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,allocation,the,resource,allocation,available,resources,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,mesos,resource,allocation,allocation,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,set,string,roles,mesos,configuration,roles,task,info,add,all,resources,allocation,take,scalar,cpus,task,request,get,cpus,roles,task,info,add,all,resources,allocation,take,scalar,gpus,task,request,get,gpus,roles,task,info,add,all,resources,allocation,take,scalar,mem,task,request,get,memory,roles,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,config,constants,task,manager,hostname,list,protos,resource,port,resources,allocation,take,ranges,ports,length,roles,task,info,add,all,resources,port,resources,iterator,string,ports,to,assign,iterators,for,array,range,values,port,resources,for,each,port,dynamic,properties,set,long,ports,to,assign,next,port,if,ports,to,assign,has,next,throw,new,illegal,argument,exception,insufficient,of,ports,assigned,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,string,uri,params,uris,cmd,add,uris,command,info,uri,new,builder,set,value,uri,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,add,all,parameters,params,docker,parameters,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,set,force,pull,image,params,docker,force,pull,image,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation);1531485571;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param allocation the resource allocation (available resources)._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())___		_		Set<String> roles = mesosConfiguration.roles()__		taskInfo.addAllResources(allocation.takeScalar("cpus", taskRequest.getCPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("gpus", taskRequest.getGPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("mem", taskRequest.getMemory(), roles))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskManagerHostname)__		}__		_		Set<String> tmPortKeys = extractPortKeys(containerSpec.getDynamicConfiguration())__		List<Protos.Resource> portResources = allocation.takeRanges("ports", tmPortKeys.size(), roles)__		taskInfo.addAllResources(portResources)__		Iterator<String> portsToAssign = tmPortKeys.iterator()__		rangeValues(portResources).forEach(port -> dynamicProperties.setLong(portsToAssign.next(), port))__		if (portsToAssign.hasNext()) {_			throw new IllegalArgumentException("insufficient # of ports assigned")__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (String uri : params.uris()) {_			cmd.addUris(CommandInfo.URI.newBuilder().setValue(uri))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.addAllParameters(params.dockerParameters())_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get())_						.setForcePullImage(params.dockerForcePullImage()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,allocation,the,resource,allocation,available,resources,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,mesos,resource,allocation,allocation,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,set,string,roles,mesos,configuration,roles,task,info,add,all,resources,allocation,take,scalar,cpus,task,request,get,cpus,roles,task,info,add,all,resources,allocation,take,scalar,gpus,task,request,get,gpus,roles,task,info,add,all,resources,allocation,take,scalar,mem,task,request,get,memory,roles,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,config,constants,task,manager,hostname,set,string,tm,port,keys,extract,port,keys,container,spec,get,dynamic,configuration,list,protos,resource,port,resources,allocation,take,ranges,ports,tm,port,keys,size,roles,task,info,add,all,resources,port,resources,iterator,string,ports,to,assign,tm,port,keys,iterator,range,values,port,resources,for,each,port,dynamic,properties,set,long,ports,to,assign,next,port,if,ports,to,assign,has,next,throw,new,illegal,argument,exception,insufficient,of,ports,assigned,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,string,uri,params,uris,cmd,add,uris,command,info,uri,new,builder,set,value,uri,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,add,all,parameters,params,docker,parameters,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,set,force,pull,image,params,docker,force,pull,image,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation);1540376774;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param allocation the resource allocation (available resources)._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())___		_		Set<String> roles = mesosConfiguration.roles()__		taskInfo.addAllResources(allocation.takeScalar("cpus", taskRequest.getCPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("gpus", taskRequest.getGPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("mem", taskRequest.getMemory(), roles))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(TaskManagerOptions.HOST, taskManagerHostname)__		}__		_		Set<String> tmPortKeys = extractPortKeys(containerSpec.getDynamicConfiguration())__		List<Protos.Resource> portResources = allocation.takeRanges("ports", tmPortKeys.size(), roles)__		taskInfo.addAllResources(portResources)__		Iterator<String> portsToAssign = tmPortKeys.iterator()__		rangeValues(portResources).forEach(port -> dynamicProperties.setLong(portsToAssign.next(), port))__		if (portsToAssign.hasNext()) {_			throw new IllegalArgumentException("insufficient # of ports assigned")__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (String uri : params.uris()) {_			cmd.addUris(CommandInfo.URI.newBuilder().setValue(uri))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.addAllParameters(params.dockerParameters())_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get())_						.setForcePullImage(params.dockerForcePullImage()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,allocation,the,resource,allocation,available,resources,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,mesos,resource,allocation,allocation,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,set,string,roles,mesos,configuration,roles,task,info,add,all,resources,allocation,take,scalar,cpus,task,request,get,cpus,roles,task,info,add,all,resources,allocation,take,scalar,gpus,task,request,get,gpus,roles,task,info,add,all,resources,allocation,take,scalar,mem,task,request,get,memory,roles,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,task,manager,options,host,task,manager,hostname,set,string,tm,port,keys,extract,port,keys,container,spec,get,dynamic,configuration,list,protos,resource,port,resources,allocation,take,ranges,ports,tm,port,keys,size,roles,task,info,add,all,resources,port,resources,iterator,string,ports,to,assign,tm,port,keys,iterator,range,values,port,resources,for,each,port,dynamic,properties,set,long,ports,to,assign,next,port,if,ports,to,assign,has,next,throw,new,illegal,argument,exception,insufficient,of,ports,assigned,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,string,uri,params,uris,cmd,add,uris,command,info,uri,new,builder,set,value,uri,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,add,all,parameters,params,docker,parameters,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,set,force,pull,image,params,docker,force,pull,image,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation);1543820477;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param allocation the resource allocation (available resources)._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())___		_		Set<String> roles = mesosConfiguration.roles()__		taskInfo.addAllResources(allocation.takeScalar("cpus", taskRequest.getCPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("gpus", taskRequest.getGPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("mem", taskRequest.getMemory(), roles))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(TaskManagerOptions.HOST, taskManagerHostname)__		}__		_		Set<String> tmPortKeys = extractPortKeys(containerSpec.getDynamicConfiguration())__		List<Protos.Resource> portResources = allocation.takeRanges("ports", tmPortKeys.size(), roles)__		taskInfo.addAllResources(portResources)__		Iterator<String> portsToAssign = tmPortKeys.iterator()__		rangeValues(portResources).forEach(port -> dynamicProperties.setLong(portsToAssign.next(), port))__		if (portsToAssign.hasNext()) {_			throw new IllegalArgumentException("insufficient # of ports assigned")__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (String uri : params.uris()) {_			cmd.addUris(CommandInfo.URI.newBuilder().setValue(uri))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.addAllParameters(params.dockerParameters())_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get())_						.setForcePullImage(params.dockerForcePullImage()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,allocation,the,resource,allocation,available,resources,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,mesos,resource,allocation,allocation,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,set,string,roles,mesos,configuration,roles,task,info,add,all,resources,allocation,take,scalar,cpus,task,request,get,cpus,roles,task,info,add,all,resources,allocation,take,scalar,gpus,task,request,get,gpus,roles,task,info,add,all,resources,allocation,take,scalar,mem,task,request,get,memory,roles,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,task,manager,options,host,task,manager,hostname,set,string,tm,port,keys,extract,port,keys,container,spec,get,dynamic,configuration,list,protos,resource,port,resources,allocation,take,ranges,ports,tm,port,keys,size,roles,task,info,add,all,resources,port,resources,iterator,string,ports,to,assign,tm,port,keys,iterator,range,values,port,resources,for,each,port,dynamic,properties,set,long,ports,to,assign,next,port,if,ports,to,assign,has,next,throw,new,illegal,argument,exception,insufficient,of,ports,assigned,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,string,uri,params,uris,cmd,add,uris,command,info,uri,new,builder,set,value,uri,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,add,all,parameters,params,docker,parameters,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,set,force,pull,image,params,docker,force,pull,image,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation);1543820500;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param allocation the resource allocation (available resources)._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())___		_		Set<String> roles = mesosConfiguration.roles()__		taskInfo.addAllResources(allocation.takeScalar("cpus", taskRequest.getCPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("gpus", taskRequest.getGPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("mem", taskRequest.getMemory(), roles))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(TaskManagerOptions.HOST, taskManagerHostname)__		}__		_		Set<String> tmPortKeys = extractPortKeys(containerSpec.getDynamicConfiguration())__		List<Protos.Resource> portResources = allocation.takeRanges("ports", tmPortKeys.size(), roles)__		taskInfo.addAllResources(portResources)__		Iterator<String> portsToAssign = tmPortKeys.iterator()__		rangeValues(portResources).forEach(port -> dynamicProperties.setLong(portsToAssign.next(), port))__		if (portsToAssign.hasNext()) {_			throw new IllegalArgumentException("insufficient # of ports assigned")__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (String uri : params.uris()) {_			cmd.addUris(CommandInfo.URI.newBuilder().setValue(uri))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.addAllParameters(params.dockerParameters())_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get())_						.setForcePullImage(params.dockerForcePullImage()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,allocation,the,resource,allocation,available,resources,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,mesos,resource,allocation,allocation,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,set,string,roles,mesos,configuration,roles,task,info,add,all,resources,allocation,take,scalar,cpus,task,request,get,cpus,roles,task,info,add,all,resources,allocation,take,scalar,gpus,task,request,get,gpus,roles,task,info,add,all,resources,allocation,take,scalar,mem,task,request,get,memory,roles,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,task,manager,options,host,task,manager,hostname,set,string,tm,port,keys,extract,port,keys,container,spec,get,dynamic,configuration,list,protos,resource,port,resources,allocation,take,ranges,ports,tm,port,keys,size,roles,task,info,add,all,resources,port,resources,iterator,string,ports,to,assign,tm,port,keys,iterator,range,values,port,resources,for,each,port,dynamic,properties,set,long,ports,to,assign,next,port,if,ports,to,assign,has,next,throw,new,illegal,argument,exception,insufficient,of,ports,assigned,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,string,uri,params,uris,cmd,add,uris,command,info,uri,new,builder,set,value,uri,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,add,all,parameters,params,docker,parameters,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,set,force,pull,image,params,docker,force,pull,image,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation);1543820506;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param allocation the resource allocation (available resources)._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())___		_		Set<String> roles = mesosConfiguration.roles()__		taskInfo.addAllResources(allocation.takeScalar("cpus", taskRequest.getCPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("gpus", taskRequest.getGPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("mem", taskRequest.getMemory(), roles))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(TaskManagerOptions.HOST, taskManagerHostname)__		}__		_		Set<String> tmPortKeys = extractPortKeys(containerSpec.getDynamicConfiguration())__		List<Protos.Resource> portResources = allocation.takeRanges("ports", tmPortKeys.size(), roles)__		taskInfo.addAllResources(portResources)__		Iterator<String> portsToAssign = tmPortKeys.iterator()__		rangeValues(portResources).forEach(port -> dynamicProperties.setLong(portsToAssign.next(), port))__		if (portsToAssign.hasNext()) {_			throw new IllegalArgumentException("insufficient # of ports assigned")__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (String uri : params.uris()) {_			cmd.addUris(CommandInfo.URI.newBuilder().setValue(uri))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.addAllParameters(params.dockerParameters())_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get())_						.setForcePullImage(params.dockerForcePullImage()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,allocation,the,resource,allocation,available,resources,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,mesos,resource,allocation,allocation,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,set,string,roles,mesos,configuration,roles,task,info,add,all,resources,allocation,take,scalar,cpus,task,request,get,cpus,roles,task,info,add,all,resources,allocation,take,scalar,gpus,task,request,get,gpus,roles,task,info,add,all,resources,allocation,take,scalar,mem,task,request,get,memory,roles,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,task,manager,options,host,task,manager,hostname,set,string,tm,port,keys,extract,port,keys,container,spec,get,dynamic,configuration,list,protos,resource,port,resources,allocation,take,ranges,ports,tm,port,keys,size,roles,task,info,add,all,resources,port,resources,iterator,string,ports,to,assign,tm,port,keys,iterator,range,values,port,resources,for,each,port,dynamic,properties,set,long,ports,to,assign,next,port,if,ports,to,assign,has,next,throw,new,illegal,argument,exception,insufficient,of,ports,assigned,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,string,uri,params,uris,cmd,add,uris,command,info,uri,new,builder,set,value,uri,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,add,all,parameters,params,docker,parameters,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,set,force,pull,image,params,docker,force,pull,image,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation);1543820511;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param allocation the resource allocation (available resources)._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, MesosResourceAllocation allocation) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())___		_		Set<String> roles = mesosConfiguration.roles()__		taskInfo.addAllResources(allocation.takeScalar("cpus", taskRequest.getCPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("gpus", taskRequest.getGPUs(), roles))__		taskInfo.addAllResources(allocation.takeScalar("mem", taskRequest.getMemory(), roles))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(TaskManagerOptions.HOST, taskManagerHostname)__		}__		_		Set<String> tmPortKeys = extractPortKeys(containerSpec.getDynamicConfiguration())__		List<Protos.Resource> portResources = allocation.takeRanges("ports", tmPortKeys.size(), roles)__		taskInfo.addAllResources(portResources)__		Iterator<String> portsToAssign = tmPortKeys.iterator()__		rangeValues(portResources).forEach(port -> dynamicProperties.setLong(portsToAssign.next(), port))__		if (portsToAssign.hasNext()) {_			throw new IllegalArgumentException("insufficient # of ports assigned")__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (String uri : params.uris()) {_			cmd.addUris(CommandInfo.URI.newBuilder().setValue(uri))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.addAllParameters(params.dockerParameters())_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get())_						.setForcePullImage(params.dockerForcePullImage()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,allocation,the,resource,allocation,available,resources,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,mesos,resource,allocation,allocation,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,set,string,roles,mesos,configuration,roles,task,info,add,all,resources,allocation,take,scalar,cpus,task,request,get,cpus,roles,task,info,add,all,resources,allocation,take,scalar,gpus,task,request,get,gpus,roles,task,info,add,all,resources,allocation,take,scalar,mem,task,request,get,memory,roles,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,task,manager,options,host,task,manager,hostname,set,string,tm,port,keys,extract,port,keys,container,spec,get,dynamic,configuration,list,protos,resource,port,resources,allocation,take,ranges,ports,tm,port,keys,size,roles,task,info,add,all,resources,port,resources,iterator,string,ports,to,assign,tm,port,keys,iterator,range,values,port,resources,for,each,port,dynamic,properties,set,long,ports,to,assign,next,port,if,ports,to,assign,has,next,throw,new,illegal,argument,exception,insufficient,of,ports,assigned,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,string,uri,params,uris,cmd,add,uris,command,info,uri,new,builder,set,value,uri,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,add,all,parameters,params,docker,parameters,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,set,force,pull,image,params,docker,force,pull,image,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1472484430;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		final Configuration dynamicProperties = new Configuration()___		_		final Protos.TaskInfo.Builder taskInfo = template_			.clone()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))__		__		_		if (assignment.getAssignedPorts().size() != TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		final Protos.Environment.Builder environmentBuilder = taskInfo.getCommandBuilder().getEnvironmentBuilder()___		_		environmentBuilder_			.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		String dynamicPropertiesEncoded = FlinkMesosSessionCli.encodeDynamicProperties(dynamicProperties)__		environmentBuilder_			.addVariables(variable(MesosConfigKeys.ENV_DYNAMIC_PROPERTIES, dynamicPropertiesEncoded))___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,final,configuration,dynamic,properties,new,configuration,final,protos,task,info,builder,task,info,template,clone,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,final,protos,environment,builder,environment,builder,task,info,get,command,builder,get,environment,builder,environment,builder,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,string,dynamic,properties,encoded,flink,mesos,session,cli,encode,dynamic,properties,dynamic,properties,environment,builder,add,variables,variable,mesos,config,keys,dynamic,properties,encoded,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1472484766;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		final Configuration dynamicProperties = new Configuration()___		_		final Protos.TaskInfo.Builder taskInfo = template_			.clone()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))__		__		_		if (assignment.getAssignedPorts().size() != TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		final Protos.Environment.Builder environmentBuilder = taskInfo.getCommandBuilder().getEnvironmentBuilder()___		_		environmentBuilder_			.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		String dynamicPropertiesEncoded = FlinkMesosSessionCli.encodeDynamicProperties(dynamicProperties)__		environmentBuilder_			.addVariables(variable(MesosConfigKeys.ENV_DYNAMIC_PROPERTIES, dynamicPropertiesEncoded))___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,final,configuration,dynamic,properties,new,configuration,final,protos,task,info,builder,task,info,template,clone,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,final,protos,environment,builder,environment,builder,task,info,get,command,builder,get,environment,builder,environment,builder,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,string,dynamic,properties,encoded,flink,mesos,session,cli,encode,dynamic,properties,dynamic,properties,environment,builder,add,variables,variable,mesos,config,keys,dynamic,properties,encoded,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1472484771;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		final Configuration dynamicProperties = new Configuration()___		_		final Protos.TaskInfo.Builder taskInfo = template_			.clone()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))___		_		if (assignment.getAssignedPorts().size() < TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		final Protos.Environment.Builder environmentBuilder = taskInfo.getCommandBuilder().getEnvironmentBuilder()___		_		environmentBuilder_			.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		String dynamicPropertiesEncoded = FlinkMesosSessionCli.encodeDynamicProperties(dynamicProperties)__		environmentBuilder_			.addVariables(variable(MesosConfigKeys.ENV_DYNAMIC_PROPERTIES, dynamicPropertiesEncoded))___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,final,configuration,dynamic,properties,new,configuration,final,protos,task,info,builder,task,info,template,clone,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,final,protos,environment,builder,environment,builder,task,info,get,command,builder,get,environment,builder,environment,builder,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,string,dynamic,properties,encoded,flink,mesos,session,cli,encode,dynamic,properties,dynamic,properties,environment,builder,add,variables,variable,mesos,config,keys,dynamic,properties,encoded,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1480980565;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		if (assignment.getAssignedPorts().size() < TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		for(ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")___		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		StringBuilder launchCommand = new StringBuilder("$FLINK_HOME/bin/mesos-taskmanager.sh ")__		launchCommand.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = null__		switch(params.containerType()) {_			case MESOS:_				if(params.containerImageName().isDefined()) {_					containerInfo = Protos.ContainerInfo.newBuilder()_						.setType(Protos.ContainerInfo.Type.MESOS)_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_						.setImage(Protos.Image.newBuilder()_							.setType(Protos.Image.Type.DOCKER)_							.setDocker(Protos.Image.Docker.newBuilder()_								.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo = Protos.ContainerInfo.newBuilder()_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}_		if(containerInfo != null) {_			taskInfo.setContainer(containerInfo)__		}__		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,string,builder,launch,command,new,string,builder,bin,mesos,taskmanager,sh,launch,command,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,null,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,protos,container,info,new,builder,set,type,protos,container,info,type,mesos,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,protos,container,info,new,builder,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,if,container,info,null,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1481907119;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		if (assignment.getAssignedPorts().size() < TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		for(ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")___		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		StringBuilder launchCommand = new StringBuilder("$FLINK_HOME/bin/mesos-taskmanager.sh ")__		launchCommand.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = null__		switch(params.containerType()) {_			case MESOS:_				if(params.containerImageName().isDefined()) {_					containerInfo = Protos.ContainerInfo.newBuilder()_						.setType(Protos.ContainerInfo.Type.MESOS)_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_						.setImage(Protos.Image.newBuilder()_							.setType(Protos.Image.Type.DOCKER)_							.setDocker(Protos.Image.Docker.newBuilder()_								.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo = Protos.ContainerInfo.newBuilder()_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}_		if(containerInfo != null) {_			taskInfo.setContainer(containerInfo)__		}__		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,string,builder,launch,command,new,string,builder,bin,mesos,taskmanager,sh,launch,command,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,null,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,protos,container,info,new,builder,set,type,protos,container,info,type,mesos,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,protos,container,info,new,builder,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,if,container,info,null,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1493364252;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		if (assignment.getAssignedPorts().size() < TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		for(ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")___		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		StringBuilder launchCommand = new StringBuilder("$FLINK_HOME/bin/mesos-taskmanager.sh ")__		launchCommand.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch(params.containerType()) {_			case MESOS:_				if(params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__					containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)____		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,string,builder,launch,command,new,string,builder,bin,mesos,taskmanager,sh,launch,command,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1493364279;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		if (assignment.getAssignedPorts().size() < TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		for(ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")___		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		StringBuilder launchCommand = new StringBuilder("$FLINK_HOME/bin/mesos-taskmanager.sh ")__		launchCommand.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch(params.containerType()) {_			case MESOS:_				if(params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__					containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)____		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,string,builder,launch,command,new,string,builder,bin,mesos,taskmanager,sh,launch,command,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1493975290;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		if (assignment.getAssignedPorts().size() < TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		for(ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		StringBuilder launchCommand = new StringBuilder("$FLINK_HOME/bin/mesos-taskmanager.sh ")__		launchCommand.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch(params.containerType()) {_			case MESOS:_				if(params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__					containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)____		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,string,builder,launch,command,new,string,builder,bin,mesos,taskmanager,sh,launch,command,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1493976970;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		if(params.getTaskManagerHostname().isDefined()) {_			final String taskManagerHostName = params.getTaskManagerHostname().get().replace("_TASK",taskID.getValue())__			dynamicProperties.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskManagerHostName)__		}__		_		if (assignment.getAssignedPorts().size() < TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		for(ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if(params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand.append("$FLINK_HOME/bin/mesos-taskmanager.sh ")__		launchCommand.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch(params.containerType()) {_			case MESOS:_				if(params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__					containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)____		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,if,params,get,task,manager,hostname,is,defined,final,string,task,manager,host,name,params,get,task,manager,hostname,get,replace,task,id,get,value,dynamic,properties,set,string,config,constants,task,manager,host,name,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,bin,mesos,taskmanager,sh,launch,command,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1493976971;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if(taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskManagerHostname)__		}__		_		if (assignment.getAssignedPorts().size() < TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		for(ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		Option<String> bootstrapCmdOption = params.bootstrapCommand()___		final String bootstrapCommand = bootstrapCmdOption.isDefined() ? bootstrapCmdOption.get() + " && " : ""__		final String launchCommand = bootstrapCommand + "$FLINK_HOME/bin/mesos-taskmanager.sh " + ContainerSpecification.formatSystemProperties(dynamicProperties)___		cmd.setValue(launchCommand)___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch(params.containerType()) {_			case MESOS:_				if(params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__					containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)____		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,config,constants,task,manager,hostname,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,option,string,bootstrap,cmd,option,params,bootstrap,command,final,string,bootstrap,command,bootstrap,cmd,option,is,defined,bootstrap,cmd,option,get,final,string,launch,command,bootstrap,command,bin,mesos,taskmanager,sh,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1495720586;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskManagerHostname)__		}__		_		if (assignment.getAssignedPorts().size() < TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		Option<String> bootstrapCmdOption = params.bootstrapCommand()___		final String bootstrapCommand = bootstrapCmdOption.isDefined() ? bootstrapCmdOption.get() + " && " : ""__		final String launchCommand = bootstrapCommand + "$FLINK_HOME/bin/mesos-taskmanager.sh " + ContainerSpecification.formatSystemProperties(dynamicProperties)___		cmd.setValue(launchCommand)___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,config,constants,task,manager,hostname,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,option,string,bootstrap,cmd,option,params,bootstrap,command,final,string,bootstrap,command,bootstrap,cmd,option,is,defined,bootstrap,cmd,option,get,final,string,launch,command,bootstrap,command,bin,mesos,taskmanager,sh,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1503156321;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", assignment.getRequest().getMemory()))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskManagerHostname)__		}__		_		if (assignment.getAssignedPorts().size() < TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,assignment,get,request,get,cpus,add,resources,scalar,mem,assignment,get,request,get,memory,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,config,constants,task,manager,hostname,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,range,port,port,dynamic,properties,set,integer,key,port,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> @Override 	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment);1505381221;Construct the TaskInfo needed to launch the worker._@param slaveId the assigned slave._@param assignment the assignment details._@return a fully-baked TaskInfo.;@Override_	public Protos.TaskInfo launch(Protos.SlaveID slaveId, TaskAssignmentResult assignment) {__		ContaineredTaskManagerParameters tmParams = params.containeredParameters()___		final Configuration dynamicProperties = new Configuration()___		_		dynamicProperties.addAll(containerSpec.getDynamicConfiguration())___		_		final Protos.TaskInfo.Builder taskInfo = Protos.TaskInfo.newBuilder()_			.setSlaveId(slaveId)_			.setTaskId(taskID)_			.setName(taskID.getValue())_			.addResources(scalar("cpus", mesosConfiguration.frameworkInfo().getRole(), assignment.getRequest().getCPUs()))_			.addResources(scalar("mem", mesosConfiguration.frameworkInfo().getRole(), assignment.getRequest().getMemory()))___		final Protos.CommandInfo.Builder cmd = taskInfo.getCommandBuilder()__		final Protos.Environment.Builder env = cmd.getEnvironmentBuilder()__		final StringBuilder jvmArgs = new StringBuilder()___		_		Option<String> taskManagerHostnameOption = params.getTaskManagerHostname()___		if (taskManagerHostnameOption.isDefined()) {_			_			final String taskManagerHostname = MesosTaskManagerParameters.TASK_ID_PATTERN_				.matcher(taskManagerHostnameOption.get())_				.replaceAll(Matcher.quoteReplacement(taskID.getValue()))___			dynamicProperties.setString(ConfigConstants.TASK_MANAGER_HOSTNAME_KEY, taskManagerHostname)__		}__		_		if (assignment.getAssignedPorts().size() < TM_PORT_KEYS.length) {_			throw new IllegalArgumentException("unsufficient # of ports assigned")__		}_		for (int i = 0_ i < TM_PORT_KEYS.length_ i++) {_			int port = assignment.getAssignedPorts().get(i)__			String key = TM_PORT_KEYS[i]__			taskInfo.addResources(ranges("ports", mesosConfiguration.frameworkInfo().getRole(), range(port, port)))__			dynamicProperties.setInteger(key, port)__		}__		_		for (ContainerSpecification.Artifact artifact : containerSpec.getArtifacts()) {_			cmd.addUris(Utils.uri(resolver, artifact))__		}__		_		for (Map.Entry<String, String> entry : params.containeredParameters().taskManagerEnv().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}_		for (Map.Entry<String, String> entry : containerSpec.getEnvironmentVariables().entrySet()) {_			env.addVariables(variable(entry.getKey(), entry.getValue()))__		}__		_		env.addVariables(variable(MesosConfigKeys.ENV_FLINK_CONTAINER_ID, taskInfo.getTaskId().getValue()))___		_		jvmArgs.append(" -Xms").append(tmParams.taskManagerHeapSizeMB()).append("m")__		jvmArgs.append(" -Xmx").append(tmParams.taskManagerHeapSizeMB()).append("m")__		if (tmParams.taskManagerDirectMemoryLimitMB() >= 0) {_			jvmArgs.append(" -XX:MaxDirectMemorySize=").append(tmParams.taskManagerDirectMemoryLimitMB()).append("m")__		}__		_		jvmArgs.append(' ').append(_			ContainerSpecification.formatSystemProperties(containerSpec.getSystemProperties()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_JVM_ARGS, jvmArgs.toString()))___		_		env.addVariables(variable(MesosConfigKeys.ENV_TASK_NAME, taskInfo.getTaskId().getValue()))__		env.addVariables(variable(MesosConfigKeys.ENV_FRAMEWORK_NAME, mesosConfiguration.frameworkInfo().getName()))___		_		StringBuilder launchCommand = new StringBuilder()__		if (params.bootstrapCommand().isDefined()) {_			launchCommand.append(params.bootstrapCommand().get()).append(" && ")__		}_		launchCommand_			.append(params.command())_			.append(" ")_			.append(ContainerSpecification.formatSystemProperties(dynamicProperties))__		cmd.setValue(launchCommand.toString())___		_		Protos.ContainerInfo.Builder containerInfo = Protos.ContainerInfo.newBuilder()__		_		_		containerInfo.setType(Protos.ContainerInfo.Type.MESOS)__		switch (params.containerType()) {_			case MESOS:_				if (params.containerImageName().isDefined()) {_					containerInfo_						.setMesos(Protos.ContainerInfo.MesosInfo.newBuilder()_							.setImage(Protos.Image.newBuilder()_								.setType(Protos.Image.Type.DOCKER)_								.setDocker(Protos.Image.Docker.newBuilder()_									.setName(params.containerImageName().get()))))__				}_				break___			case DOCKER:_				assert(params.containerImageName().isDefined())__				containerInfo_					.setType(Protos.ContainerInfo.Type.DOCKER)_					.setDocker(Protos.ContainerInfo.DockerInfo.newBuilder()_						.setNetwork(Protos.ContainerInfo.DockerInfo.Network.HOST)_						.setImage(params.containerImageName().get()))__				break___			default:_				throw new IllegalStateException("unsupported container type")__		}__		_		containerInfo.addAllVolumes(params.containerVolumes())__		taskInfo.setContainer(containerInfo)___		return taskInfo.build()__	};construct,the,task,info,needed,to,launch,the,worker,param,slave,id,the,assigned,slave,param,assignment,the,assignment,details,return,a,fully,baked,task,info;override,public,protos,task,info,launch,protos,slave,id,slave,id,task,assignment,result,assignment,containered,task,manager,parameters,tm,params,params,containered,parameters,final,configuration,dynamic,properties,new,configuration,dynamic,properties,add,all,container,spec,get,dynamic,configuration,final,protos,task,info,builder,task,info,protos,task,info,new,builder,set,slave,id,slave,id,set,task,id,task,id,set,name,task,id,get,value,add,resources,scalar,cpus,mesos,configuration,framework,info,get,role,assignment,get,request,get,cpus,add,resources,scalar,mem,mesos,configuration,framework,info,get,role,assignment,get,request,get,memory,final,protos,command,info,builder,cmd,task,info,get,command,builder,final,protos,environment,builder,env,cmd,get,environment,builder,final,string,builder,jvm,args,new,string,builder,option,string,task,manager,hostname,option,params,get,task,manager,hostname,if,task,manager,hostname,option,is,defined,final,string,task,manager,hostname,mesos,task,manager,parameters,matcher,task,manager,hostname,option,get,replace,all,matcher,quote,replacement,task,id,get,value,dynamic,properties,set,string,config,constants,task,manager,hostname,if,assignment,get,assigned,ports,size,length,throw,new,illegal,argument,exception,unsufficient,of,ports,assigned,for,int,i,0,i,length,i,int,port,assignment,get,assigned,ports,get,i,string,key,i,task,info,add,resources,ranges,ports,mesos,configuration,framework,info,get,role,range,port,port,dynamic,properties,set,integer,key,port,for,container,specification,artifact,artifact,container,spec,get,artifacts,cmd,add,uris,utils,uri,resolver,artifact,for,map,entry,string,string,entry,params,containered,parameters,task,manager,env,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,for,map,entry,string,string,entry,container,spec,get,environment,variables,entry,set,env,add,variables,variable,entry,get,key,entry,get,value,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,jvm,args,append,xms,append,tm,params,task,manager,heap,size,mb,append,m,jvm,args,append,xmx,append,tm,params,task,manager,heap,size,mb,append,m,if,tm,params,task,manager,direct,memory,limit,mb,0,jvm,args,append,xx,max,direct,memory,size,append,tm,params,task,manager,direct,memory,limit,mb,append,m,jvm,args,append,append,container,specification,format,system,properties,container,spec,get,system,properties,env,add,variables,variable,mesos,config,keys,jvm,args,to,string,env,add,variables,variable,mesos,config,keys,task,info,get,task,id,get,value,env,add,variables,variable,mesos,config,keys,mesos,configuration,framework,info,get,name,string,builder,launch,command,new,string,builder,if,params,bootstrap,command,is,defined,launch,command,append,params,bootstrap,command,get,append,launch,command,append,params,command,append,append,container,specification,format,system,properties,dynamic,properties,cmd,set,value,launch,command,to,string,protos,container,info,builder,container,info,protos,container,info,new,builder,container,info,set,type,protos,container,info,type,mesos,switch,params,container,type,case,mesos,if,params,container,image,name,is,defined,container,info,set,mesos,protos,container,info,mesos,info,new,builder,set,image,protos,image,new,builder,set,type,protos,image,type,docker,set,docker,protos,image,docker,new,builder,set,name,params,container,image,name,get,break,case,docker,assert,params,container,image,name,is,defined,container,info,set,type,protos,container,info,type,docker,set,docker,protos,container,info,docker,info,new,builder,set,network,protos,container,info,docker,info,network,host,set,image,params,container,image,name,get,break,default,throw,new,illegal,state,exception,unsupported,container,type,container,info,add,all,volumes,params,container,volumes,task,info,set,container,container,info,return,task,info,build
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1503156321;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1505381221;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1512557432;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1516971021;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1517302807;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1530393587;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1530683488;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1531485571;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1540376774;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1543820477;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1543820500;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1543820506;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException;1543820511;Configures an artifact server to serve the artifacts associated with a container specification._@param server the server to configure._@param container the container with artifacts to serve._@throws IOException if the artifacts cannot be accessed.;static void configureArtifactServer(MesosArtifactServer server, ContainerSpecification container) throws IOException {_		_		for (ContainerSpecification.Artifact artifact : container.getArtifacts()) {_			server.addPath(artifact.source, artifact.dest)__		}_	};configures,an,artifact,server,to,serve,the,artifacts,associated,with,a,container,specification,param,server,the,server,to,configure,param,container,the,container,with,artifacts,to,serve,throws,ioexception,if,the,artifacts,cannot,be,accessed;static,void,configure,artifact,server,mesos,artifact,server,server,container,specification,container,throws,ioexception,for,container,specification,artifact,artifact,container,get,artifacts,server,add,path,artifact,source,artifact,dest
LaunchableMesosWorker -> static Set<String> extractPortKeys(Configuration config);1531485571;Get the port keys representing the TM's configured endpoints. This includes mandatory TM endpoints such as_data and rpc as well as optionally configured endpoints for services such as prometheus reporter__@param config to extract the port keys from_@return A deterministically ordered Set of port keys to expose from the TM container;static Set<String> extractPortKeys(Configuration config) {_		final LinkedHashSet<String> tmPortKeys = new LinkedHashSet<>(Arrays.asList(TM_PORT_KEYS))___		final String portKeys = config.getString(PORT_ASSIGNMENTS)___		Arrays.stream(portKeys.split(","))_			.map(String::trim)_			.peek(key -> LOG.debug("Adding port key " + key + " to mesos request"))_			.forEach(tmPortKeys::add)___		return tmPortKeys__	};get,the,port,keys,representing,the,tm,s,configured,endpoints,this,includes,mandatory,tm,endpoints,such,as,data,and,rpc,as,well,as,optionally,configured,endpoints,for,services,such,as,prometheus,reporter,param,config,to,extract,the,port,keys,from,return,a,deterministically,ordered,set,of,port,keys,to,expose,from,the,tm,container;static,set,string,extract,port,keys,configuration,config,final,linked,hash,set,string,tm,port,keys,new,linked,hash,set,arrays,as,list,final,string,port,keys,config,get,string,arrays,stream,port,keys,split,map,string,trim,peek,key,log,debug,adding,port,key,key,to,mesos,request,for,each,tm,port,keys,add,return,tm,port,keys
LaunchableMesosWorker -> static Set<String> extractPortKeys(Configuration config);1540376774;Get the port keys representing the TM's configured endpoints. This includes mandatory TM endpoints such as_data and rpc as well as optionally configured endpoints for services such as prometheus reporter__@param config to extract the port keys from_@return A deterministically ordered Set of port keys to expose from the TM container;static Set<String> extractPortKeys(Configuration config) {_		final LinkedHashSet<String> tmPortKeys = new LinkedHashSet<>(Arrays.asList(TM_PORT_KEYS))___		final String portKeys = config.getString(PORT_ASSIGNMENTS)___		Arrays.stream(portKeys.split(","))_			.map(String::trim)_			.peek(key -> LOG.debug("Adding port key " + key + " to mesos request"))_			.forEach(tmPortKeys::add)___		return tmPortKeys__	};get,the,port,keys,representing,the,tm,s,configured,endpoints,this,includes,mandatory,tm,endpoints,such,as,data,and,rpc,as,well,as,optionally,configured,endpoints,for,services,such,as,prometheus,reporter,param,config,to,extract,the,port,keys,from,return,a,deterministically,ordered,set,of,port,keys,to,expose,from,the,tm,container;static,set,string,extract,port,keys,configuration,config,final,linked,hash,set,string,tm,port,keys,new,linked,hash,set,arrays,as,list,final,string,port,keys,config,get,string,arrays,stream,port,keys,split,map,string,trim,peek,key,log,debug,adding,port,key,key,to,mesos,request,for,each,tm,port,keys,add,return,tm,port,keys
LaunchableMesosWorker -> static Set<String> extractPortKeys(Configuration config);1543820477;Get the port keys representing the TM's configured endpoints. This includes mandatory TM endpoints such as_data and rpc as well as optionally configured endpoints for services such as prometheus reporter__@param config to extract the port keys from_@return A deterministically ordered Set of port keys to expose from the TM container;static Set<String> extractPortKeys(Configuration config) {_		final LinkedHashSet<String> tmPortKeys = new LinkedHashSet<>(Arrays.asList(TM_PORT_KEYS))___		final String portKeys = config.getString(PORT_ASSIGNMENTS)___		if (portKeys != null) {_			Arrays.stream(portKeys.split(","))_				.map(String::trim)_				.peek(key -> LOG.debug("Adding port key " + key + " to mesos request"))_				.forEach(tmPortKeys::add)__		}__		return tmPortKeys__	};get,the,port,keys,representing,the,tm,s,configured,endpoints,this,includes,mandatory,tm,endpoints,such,as,data,and,rpc,as,well,as,optionally,configured,endpoints,for,services,such,as,prometheus,reporter,param,config,to,extract,the,port,keys,from,return,a,deterministically,ordered,set,of,port,keys,to,expose,from,the,tm,container;static,set,string,extract,port,keys,configuration,config,final,linked,hash,set,string,tm,port,keys,new,linked,hash,set,arrays,as,list,final,string,port,keys,config,get,string,if,port,keys,null,arrays,stream,port,keys,split,map,string,trim,peek,key,log,debug,adding,port,key,key,to,mesos,request,for,each,tm,port,keys,add,return,tm,port,keys
LaunchableMesosWorker -> static Set<String> extractPortKeys(Configuration config);1543820500;Get the port keys representing the TM's configured endpoints. This includes mandatory TM endpoints such as_data and rpc as well as optionally configured endpoints for services such as prometheus reporter__@param config to extract the port keys from_@return A deterministically ordered Set of port keys to expose from the TM container;static Set<String> extractPortKeys(Configuration config) {_		final LinkedHashSet<String> tmPortKeys = new LinkedHashSet<>(Arrays.asList(TM_PORT_KEYS))___		final String portKeys = config.getString(PORT_ASSIGNMENTS)___		if (portKeys != null) {_			Arrays.stream(portKeys.split(","))_				.map(String::trim)_				.peek(key -> LOG.debug("Adding port key {} to mesos request"))_				.forEach(tmPortKeys::add)__		}__		return tmPortKeys__	};get,the,port,keys,representing,the,tm,s,configured,endpoints,this,includes,mandatory,tm,endpoints,such,as,data,and,rpc,as,well,as,optionally,configured,endpoints,for,services,such,as,prometheus,reporter,param,config,to,extract,the,port,keys,from,return,a,deterministically,ordered,set,of,port,keys,to,expose,from,the,tm,container;static,set,string,extract,port,keys,configuration,config,final,linked,hash,set,string,tm,port,keys,new,linked,hash,set,arrays,as,list,final,string,port,keys,config,get,string,if,port,keys,null,arrays,stream,port,keys,split,map,string,trim,peek,key,log,debug,adding,port,key,to,mesos,request,for,each,tm,port,keys,add,return,tm,port,keys
LaunchableMesosWorker -> static Set<String> extractPortKeys(Configuration config);1543820506;Get the port keys representing the TM's configured endpoints. This includes mandatory TM endpoints such as_data and rpc as well as optionally configured endpoints for services such as prometheus reporter__@param config to extract the port keys from_@return A deterministically ordered Set of port keys to expose from the TM container;static Set<String> extractPortKeys(Configuration config) {_		final LinkedHashSet<String> tmPortKeys = new LinkedHashSet<>(Arrays.asList(TM_PORT_KEYS))___		final String portKeys = config.getString(PORT_ASSIGNMENTS)___		if (portKeys != null) {_			Arrays.stream(portKeys.split(","))_				.map(String::trim)_				.peek(key -> LOG.debug("Adding port key {} to mesos request"))_				.forEach(tmPortKeys::add)__		}__		return Collections.unmodifiableSet(tmPortKeys)__	};get,the,port,keys,representing,the,tm,s,configured,endpoints,this,includes,mandatory,tm,endpoints,such,as,data,and,rpc,as,well,as,optionally,configured,endpoints,for,services,such,as,prometheus,reporter,param,config,to,extract,the,port,keys,from,return,a,deterministically,ordered,set,of,port,keys,to,expose,from,the,tm,container;static,set,string,extract,port,keys,configuration,config,final,linked,hash,set,string,tm,port,keys,new,linked,hash,set,arrays,as,list,final,string,port,keys,config,get,string,if,port,keys,null,arrays,stream,port,keys,split,map,string,trim,peek,key,log,debug,adding,port,key,to,mesos,request,for,each,tm,port,keys,add,return,collections,unmodifiable,set,tm,port,keys
LaunchableMesosWorker -> static Set<String> extractPortKeys(Configuration config);1543820511;Get the port keys representing the TM's configured endpoints. This includes mandatory TM endpoints such as_data and rpc as well as optionally configured endpoints for services such as prometheus reporter__@param config to extract the port keys from_@return A deterministically ordered Set of port keys to expose from the TM container;static Set<String> extractPortKeys(Configuration config) {_		final LinkedHashSet<String> tmPortKeys = new LinkedHashSet<>(TM_PORT_KEYS)___		final String portKeys = config.getString(PORT_ASSIGNMENTS)___		if (portKeys != null) {_			Arrays.stream(portKeys.split(","))_				.map(String::trim)_				.peek(key -> LOG.debug("Adding port key {} to mesos request"))_				.forEach(tmPortKeys::add)__		}__		return Collections.unmodifiableSet(tmPortKeys)__	};get,the,port,keys,representing,the,tm,s,configured,endpoints,this,includes,mandatory,tm,endpoints,such,as,data,and,rpc,as,well,as,optionally,configured,endpoints,for,services,such,as,prometheus,reporter,param,config,to,extract,the,port,keys,from,return,a,deterministically,ordered,set,of,port,keys,to,expose,from,the,tm,container;static,set,string,extract,port,keys,configuration,config,final,linked,hash,set,string,tm,port,keys,new,linked,hash,set,final,string,port,keys,config,get,string,if,port,keys,null,arrays,stream,port,keys,split,map,string,trim,peek,key,log,debug,adding,port,key,to,mesos,request,for,each,tm,port,keys,add,return,collections,unmodifiable,set,tm,port,keys
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1493976970;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)__		_		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1493976971;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)__		_		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1495720586;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1503156321;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1505381221;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1512557432;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1516971021;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1517302807;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1530393587;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1530683488;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1531485571;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1540376774;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1543820477;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1543820500;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1543820506;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID, 			MesosConfiguration mesosConfiguration);1543820511;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID,_			MesosConfiguration mesosConfiguration) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.params = Preconditions.checkNotNull(params)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.mesosConfiguration = Preconditions.checkNotNull(mesosConfiguration)___		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,mesos,configuration,mesos,configuration,this,resolver,preconditions,check,not,null,resolver,this,container,spec,preconditions,check,not,null,container,spec,this,params,preconditions,check,not,null,params,this,task,id,preconditions,check,not,null,task,id,this,mesos,configuration,preconditions,check,not,null,mesos,configuration,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 		MesosArtifactResolver resolver, MesosTaskManagerParameters params, 		ContainerSpecification containerSpec, Protos.TaskID taskID);1480980565;Construct a launchable Mesos worker._@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_		MesosArtifactResolver resolver, MesosTaskManagerParameters params,_		ContainerSpecification containerSpec, Protos.TaskID taskID) {_		this.resolver = resolver__		this.params = params__		this.containerSpec = containerSpec__		this.taskID = taskID__		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,this,resolver,resolver,this,params,params,this,container,spec,container,spec,this,task,id,task,id,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 		MesosArtifactResolver resolver, MesosTaskManagerParameters params, 		ContainerSpecification containerSpec, Protos.TaskID taskID);1481907119;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_		MesosArtifactResolver resolver, MesosTaskManagerParameters params,_		ContainerSpecification containerSpec, Protos.TaskID taskID) {_		this.resolver = resolver__		this.params = params__		this.containerSpec = containerSpec__		this.taskID = taskID__		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,this,resolver,resolver,this,params,params,this,container,spec,container,spec,this,task,id,task,id,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker(MesosTaskManagerParameters params, Protos.TaskInfo.Builder template, Protos.TaskID taskID);1472484430;Construct a launchable Mesos worker._@param params the TM parameters such as memory, cpu to acquire._@param template a template for the TaskInfo to be constructed at launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(MesosTaskManagerParameters params, Protos.TaskInfo.Builder template, Protos.TaskID taskID) {_		this.params = params__		this.template = template__		this.taskID = taskID__		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,template,a,template,for,the,task,info,to,be,constructed,at,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,task,manager,parameters,params,protos,task,info,builder,template,protos,task,id,task,id,this,params,params,this,template,template,this,task,id,task,id,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker(MesosTaskManagerParameters params, Protos.TaskInfo.Builder template, Protos.TaskID taskID);1472484766;Construct a launchable Mesos worker._@param params the TM parameters such as memory, cpu to acquire._@param template a template for the TaskInfo to be constructed at launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(MesosTaskManagerParameters params, Protos.TaskInfo.Builder template, Protos.TaskID taskID) {_		this.params = params__		this.template = template__		this.taskID = taskID__		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,template,a,template,for,the,task,info,to,be,constructed,at,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,task,manager,parameters,params,protos,task,info,builder,template,protos,task,id,task,id,this,params,params,this,template,template,this,task,id,task,id,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker(MesosTaskManagerParameters params, Protos.TaskInfo.Builder template, Protos.TaskID taskID);1472484771;Construct a launchable Mesos worker._@param params the TM parameters such as memory, cpu to acquire._@param template a template for the TaskInfo to be constructed at launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(MesosTaskManagerParameters params, Protos.TaskInfo.Builder template, Protos.TaskID taskID) {_		this.params = params__		this.template = template__		this.taskID = taskID__		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,template,a,template,for,the,task,info,to,be,constructed,at,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,task,manager,parameters,params,protos,task,info,builder,template,protos,task,id,task,id,this,params,params,this,template,template,this,task,id,task,id,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID);1493364252;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.params = Preconditions.checkNotNull(params)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,this,resolver,preconditions,check,not,null,resolver,this,params,preconditions,check,not,null,params,this,container,spec,preconditions,check,not,null,container,spec,this,task,id,preconditions,check,not,null,task,id,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID);1493364279;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.params = Preconditions.checkNotNull(params)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,this,resolver,preconditions,check,not,null,resolver,this,params,preconditions,check,not,null,params,this,container,spec,preconditions,check,not,null,container,spec,this,task,id,preconditions,check,not,null,task,id,this,task,request,new,request
LaunchableMesosWorker -> public LaunchableMesosWorker( 			MesosArtifactResolver resolver, 			MesosTaskManagerParameters params, 			ContainerSpecification containerSpec, 			Protos.TaskID taskID);1493975290;Construct a launchable Mesos worker._@param resolver The resolver for retrieving artifacts (e.g. jars, configuration)_@param params the TM parameters such as memory, cpu to acquire._@param containerSpec an abstract container specification for launch time._@param taskID the taskID for this worker.;public LaunchableMesosWorker(_			MesosArtifactResolver resolver,_			MesosTaskManagerParameters params,_			ContainerSpecification containerSpec,_			Protos.TaskID taskID) {_		this.resolver = Preconditions.checkNotNull(resolver)__		this.params = Preconditions.checkNotNull(params)__		this.containerSpec = Preconditions.checkNotNull(containerSpec)__		this.taskID = Preconditions.checkNotNull(taskID)__		this.taskRequest = new Request()__	};construct,a,launchable,mesos,worker,param,resolver,the,resolver,for,retrieving,artifacts,e,g,jars,configuration,param,params,the,tm,parameters,such,as,memory,cpu,to,acquire,param,container,spec,an,abstract,container,specification,for,launch,time,param,task,id,the,task,id,for,this,worker;public,launchable,mesos,worker,mesos,artifact,resolver,resolver,mesos,task,manager,parameters,params,container,specification,container,spec,protos,task,id,task,id,this,resolver,preconditions,check,not,null,resolver,this,params,preconditions,check,not,null,params,this,container,spec,preconditions,check,not,null,container,spec,this,task,id,preconditions,check,not,null,task,id,this,task,request,new,request
