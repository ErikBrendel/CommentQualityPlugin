# id;timestamp;commentText;codeText;commentWords;codeWords
MesosEntrypointUtils -> public static void applyOverlays( 		Configuration configuration, ContainerSpecification containerSpec) throws IOException;1503156321;Generate a container specification as a TaskManager template.__<p>This code is extremely Mesos-specific and registers all the artifacts that the TaskManager_needs (such as JAR file, config file, ...) and all environment variables into a container specification._The Mesos fetcher then ensures that those artifacts will be copied into the task's sandbox directory._A lightweight HTTP server serves the artifacts to the fetcher.;public static void applyOverlays(_		Configuration configuration, ContainerSpecification containerSpec) throws IOException {__		_		CompositeContainerOverlay overlay = new CompositeContainerOverlay(_			FlinkDistributionOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopUserOverlay.newBuilder().fromEnvironment(configuration).build(),_			KeytabOverlay.newBuilder().fromEnvironment(configuration).build(),_			Krb5ConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			SSLStoreOverlay.newBuilder().fromEnvironment(configuration).build()_		)___		_		overlay.configure(containerSpec)__	};generate,a,container,specification,as,a,task,manager,template,p,this,code,is,extremely,mesos,specific,and,registers,all,the,artifacts,that,the,task,manager,needs,such,as,jar,file,config,file,and,all,environment,variables,into,a,container,specification,the,mesos,fetcher,then,ensures,that,those,artifacts,will,be,copied,into,the,task,s,sandbox,directory,a,lightweight,http,server,serves,the,artifacts,to,the,fetcher;public,static,void,apply,overlays,configuration,configuration,container,specification,container,spec,throws,ioexception,composite,container,overlay,overlay,new,composite,container,overlay,flink,distribution,overlay,new,builder,from,environment,configuration,build,hadoop,conf,overlay,new,builder,from,environment,configuration,build,hadoop,user,overlay,new,builder,from,environment,configuration,build,keytab,overlay,new,builder,from,environment,configuration,build,krb5conf,overlay,new,builder,from,environment,configuration,build,sslstore,overlay,new,builder,from,environment,configuration,build,overlay,configure,container,spec
MesosEntrypointUtils -> public static void applyOverlays( 		Configuration configuration, ContainerSpecification containerSpec) throws IOException;1503160934;Generate a container specification as a TaskManager template.__<p>This code is extremely Mesos-specific and registers all the artifacts that the TaskManager_needs (such as JAR file, config file, ...) and all environment variables into a container specification._The Mesos fetcher then ensures that those artifacts will be copied into the task's sandbox directory._A lightweight HTTP server serves the artifacts to the fetcher.;public static void applyOverlays(_		Configuration configuration, ContainerSpecification containerSpec) throws IOException {__		_		CompositeContainerOverlay overlay = new CompositeContainerOverlay(_			FlinkDistributionOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopUserOverlay.newBuilder().fromEnvironment(configuration).build(),_			KeytabOverlay.newBuilder().fromEnvironment(configuration).build(),_			Krb5ConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			SSLStoreOverlay.newBuilder().fromEnvironment(configuration).build()_		)___		_		overlay.configure(containerSpec)__	};generate,a,container,specification,as,a,task,manager,template,p,this,code,is,extremely,mesos,specific,and,registers,all,the,artifacts,that,the,task,manager,needs,such,as,jar,file,config,file,and,all,environment,variables,into,a,container,specification,the,mesos,fetcher,then,ensures,that,those,artifacts,will,be,copied,into,the,task,s,sandbox,directory,a,lightweight,http,server,serves,the,artifacts,to,the,fetcher;public,static,void,apply,overlays,configuration,configuration,container,specification,container,spec,throws,ioexception,composite,container,overlay,overlay,new,composite,container,overlay,flink,distribution,overlay,new,builder,from,environment,configuration,build,hadoop,conf,overlay,new,builder,from,environment,configuration,build,hadoop,user,overlay,new,builder,from,environment,configuration,build,keytab,overlay,new,builder,from,environment,configuration,build,krb5conf,overlay,new,builder,from,environment,configuration,build,sslstore,overlay,new,builder,from,environment,configuration,build,overlay,configure,container,spec
MesosEntrypointUtils -> public static void applyOverlays( 		Configuration configuration, ContainerSpecification containerSpec) throws IOException;1515177485;Generate a container specification as a TaskManager template.__<p>This code is extremely Mesos-specific and registers all the artifacts that the TaskManager_needs (such as JAR file, config file, ...) and all environment variables into a container specification._The Mesos fetcher then ensures that those artifacts will be copied into the task's sandbox directory._A lightweight HTTP server serves the artifacts to the fetcher.;public static void applyOverlays(_		Configuration configuration, ContainerSpecification containerSpec) throws IOException {__		_		CompositeContainerOverlay overlay = new CompositeContainerOverlay(_			FlinkDistributionOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopUserOverlay.newBuilder().fromEnvironment(configuration).build(),_			KeytabOverlay.newBuilder().fromEnvironment(configuration).build(),_			Krb5ConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			SSLStoreOverlay.newBuilder().fromEnvironment(configuration).build()_		)___		_		overlay.configure(containerSpec)__	};generate,a,container,specification,as,a,task,manager,template,p,this,code,is,extremely,mesos,specific,and,registers,all,the,artifacts,that,the,task,manager,needs,such,as,jar,file,config,file,and,all,environment,variables,into,a,container,specification,the,mesos,fetcher,then,ensures,that,those,artifacts,will,be,copied,into,the,task,s,sandbox,directory,a,lightweight,http,server,serves,the,artifacts,to,the,fetcher;public,static,void,apply,overlays,configuration,configuration,container,specification,container,spec,throws,ioexception,composite,container,overlay,overlay,new,composite,container,overlay,flink,distribution,overlay,new,builder,from,environment,configuration,build,hadoop,conf,overlay,new,builder,from,environment,configuration,build,hadoop,user,overlay,new,builder,from,environment,configuration,build,keytab,overlay,new,builder,from,environment,configuration,build,krb5conf,overlay,new,builder,from,environment,configuration,build,sslstore,overlay,new,builder,from,environment,configuration,build,overlay,configure,container,spec
MesosEntrypointUtils -> public static void applyOverlays( 		Configuration configuration, ContainerSpecification containerSpec) throws IOException;1516265159;Generate a container specification as a TaskManager template.__<p>This code is extremely Mesos-specific and registers all the artifacts that the TaskManager_needs (such as JAR file, config file, ...) and all environment variables into a container specification._The Mesos fetcher then ensures that those artifacts will be copied into the task's sandbox directory._A lightweight HTTP server serves the artifacts to the fetcher.;public static void applyOverlays(_		Configuration configuration, ContainerSpecification containerSpec) throws IOException {__		_		CompositeContainerOverlay overlay = new CompositeContainerOverlay(_			FlinkDistributionOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopUserOverlay.newBuilder().fromEnvironment(configuration).build(),_			KeytabOverlay.newBuilder().fromEnvironment(configuration).build(),_			Krb5ConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			SSLStoreOverlay.newBuilder().fromEnvironment(configuration).build()_		)___		_		overlay.configure(containerSpec)__	};generate,a,container,specification,as,a,task,manager,template,p,this,code,is,extremely,mesos,specific,and,registers,all,the,artifacts,that,the,task,manager,needs,such,as,jar,file,config,file,and,all,environment,variables,into,a,container,specification,the,mesos,fetcher,then,ensures,that,those,artifacts,will,be,copied,into,the,task,s,sandbox,directory,a,lightweight,http,server,serves,the,artifacts,to,the,fetcher;public,static,void,apply,overlays,configuration,configuration,container,specification,container,spec,throws,ioexception,composite,container,overlay,overlay,new,composite,container,overlay,flink,distribution,overlay,new,builder,from,environment,configuration,build,hadoop,conf,overlay,new,builder,from,environment,configuration,build,hadoop,user,overlay,new,builder,from,environment,configuration,build,keytab,overlay,new,builder,from,environment,configuration,build,krb5conf,overlay,new,builder,from,environment,configuration,build,sslstore,overlay,new,builder,from,environment,configuration,build,overlay,configure,container,spec
MesosEntrypointUtils -> public static void applyOverlays( 		Configuration configuration, ContainerSpecification containerSpec) throws IOException;1517302807;Generate a container specification as a TaskManager template.__<p>This code is extremely Mesos-specific and registers all the artifacts that the TaskManager_needs (such as JAR file, config file, ...) and all environment variables into a container specification._The Mesos fetcher then ensures that those artifacts will be copied into the task's sandbox directory._A lightweight HTTP server serves the artifacts to the fetcher.;public static void applyOverlays(_		Configuration configuration, ContainerSpecification containerSpec) throws IOException {__		_		CompositeContainerOverlay overlay = new CompositeContainerOverlay(_			FlinkDistributionOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopUserOverlay.newBuilder().fromEnvironment(configuration).build(),_			KeytabOverlay.newBuilder().fromEnvironment(configuration).build(),_			Krb5ConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			SSLStoreOverlay.newBuilder().fromEnvironment(configuration).build()_		)___		_		overlay.configure(containerSpec)__	};generate,a,container,specification,as,a,task,manager,template,p,this,code,is,extremely,mesos,specific,and,registers,all,the,artifacts,that,the,task,manager,needs,such,as,jar,file,config,file,and,all,environment,variables,into,a,container,specification,the,mesos,fetcher,then,ensures,that,those,artifacts,will,be,copied,into,the,task,s,sandbox,directory,a,lightweight,http,server,serves,the,artifacts,to,the,fetcher;public,static,void,apply,overlays,configuration,configuration,container,specification,container,spec,throws,ioexception,composite,container,overlay,overlay,new,composite,container,overlay,flink,distribution,overlay,new,builder,from,environment,configuration,build,hadoop,conf,overlay,new,builder,from,environment,configuration,build,hadoop,user,overlay,new,builder,from,environment,configuration,build,keytab,overlay,new,builder,from,environment,configuration,build,krb5conf,overlay,new,builder,from,environment,configuration,build,sslstore,overlay,new,builder,from,environment,configuration,build,overlay,configure,container,spec
MesosEntrypointUtils -> public static void applyOverlays( 		Configuration configuration, ContainerSpecification containerSpec) throws IOException;1531993383;Generate a container specification as a TaskManager template.__<p>This code is extremely Mesos-specific and registers all the artifacts that the TaskManager_needs (such as JAR file, config file, ...) and all environment variables into a container specification._The Mesos fetcher then ensures that those artifacts will be copied into the task's sandbox directory._A lightweight HTTP server serves the artifacts to the fetcher.;public static void applyOverlays(_		Configuration configuration, ContainerSpecification containerSpec) throws IOException {__		_		CompositeContainerOverlay overlay = new CompositeContainerOverlay(_			FlinkDistributionOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			HadoopUserOverlay.newBuilder().fromEnvironment(configuration).build(),_			KeytabOverlay.newBuilder().fromEnvironment(configuration).build(),_			Krb5ConfOverlay.newBuilder().fromEnvironment(configuration).build(),_			SSLStoreOverlay.newBuilder().fromEnvironment(configuration).build()_		)___		_		overlay.configure(containerSpec)__	};generate,a,container,specification,as,a,task,manager,template,p,this,code,is,extremely,mesos,specific,and,registers,all,the,artifacts,that,the,task,manager,needs,such,as,jar,file,config,file,and,all,environment,variables,into,a,container,specification,the,mesos,fetcher,then,ensures,that,those,artifacts,will,be,copied,into,the,task,s,sandbox,directory,a,lightweight,http,server,serves,the,artifacts,to,the,fetcher;public,static,void,apply,overlays,configuration,configuration,container,specification,container,spec,throws,ioexception,composite,container,overlay,overlay,new,composite,container,overlay,flink,distribution,overlay,new,builder,from,environment,configuration,build,hadoop,conf,overlay,new,builder,from,environment,configuration,build,hadoop,user,overlay,new,builder,from,environment,configuration,build,keytab,overlay,new,builder,from,environment,configuration,build,krb5conf,overlay,new,builder,from,environment,configuration,build,sslstore,overlay,new,builder,from,environment,configuration,build,overlay,configure,container,spec
MesosEntrypointUtils -> public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname);1503156321;Loads and validates the Mesos scheduler configuration._@param flinkConfig the global configuration._@param hostname the hostname to advertise to the Mesos master.;public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname) {__		Protos.FrameworkInfo.Builder frameworkInfo = Protos.FrameworkInfo.newBuilder()_			.setHostname(hostname)__		Protos.Credential.Builder credential = null___		if (!flinkConfig.contains(MesosOptions.MASTER_URL)) {_			throw new IllegalConfigurationException(MesosOptions.MASTER_URL.key() + " must be configured.")__		}_		String masterUrl = flinkConfig.getString(MesosOptions.MASTER_URL)___		Duration failoverTimeout = FiniteDuration.apply(_			flinkConfig.getInteger(_				MesosOptions.FAILOVER_TIMEOUT_SECONDS),_				TimeUnit.SECONDS)__		frameworkInfo.setFailoverTimeout(failoverTimeout.toSeconds())___		frameworkInfo.setName(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_NAME))___		frameworkInfo.setRole(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_ROLE))___		frameworkInfo.setUser(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_USER))___		if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL)) {_			frameworkInfo.setPrincipal(flinkConfig.getString(_				MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL))___			credential = Protos.Credential.newBuilder()__			credential.setPrincipal(frameworkInfo.getPrincipal())___			_			_			if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET)) {_				credential.setSecret(flinkConfig.getString(_					MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET))__			}_		}__		MesosConfiguration mesos =_			new MesosConfiguration(masterUrl, frameworkInfo, scala.Option.apply(credential))___		return mesos__	};loads,and,validates,the,mesos,scheduler,configuration,param,flink,config,the,global,configuration,param,hostname,the,hostname,to,advertise,to,the,mesos,master;public,static,mesos,configuration,create,mesos,scheduler,configuration,configuration,flink,config,string,hostname,protos,framework,info,builder,framework,info,protos,framework,info,new,builder,set,hostname,hostname,protos,credential,builder,credential,null,if,flink,config,contains,mesos,options,throw,new,illegal,configuration,exception,mesos,options,key,must,be,configured,string,master,url,flink,config,get,string,mesos,options,duration,failover,timeout,finite,duration,apply,flink,config,get,integer,mesos,options,time,unit,seconds,framework,info,set,failover,timeout,failover,timeout,to,seconds,framework,info,set,name,flink,config,get,string,mesos,options,framework,info,set,role,flink,config,get,string,mesos,options,framework,info,set,user,flink,config,get,string,mesos,options,if,flink,config,contains,mesos,options,framework,info,set,principal,flink,config,get,string,mesos,options,credential,protos,credential,new,builder,credential,set,principal,framework,info,get,principal,if,flink,config,contains,mesos,options,credential,set,secret,flink,config,get,string,mesos,options,mesos,configuration,mesos,new,mesos,configuration,master,url,framework,info,scala,option,apply,credential,return,mesos
MesosEntrypointUtils -> public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname);1503160934;Loads and validates the Mesos scheduler configuration._@param flinkConfig the global configuration._@param hostname the hostname to advertise to the Mesos master.;public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname) {__		Protos.FrameworkInfo.Builder frameworkInfo = Protos.FrameworkInfo.newBuilder()_			.setHostname(hostname)__		Protos.Credential.Builder credential = null___		if (!flinkConfig.contains(MesosOptions.MASTER_URL)) {_			throw new IllegalConfigurationException(MesosOptions.MASTER_URL.key() + " must be configured.")__		}_		String masterUrl = flinkConfig.getString(MesosOptions.MASTER_URL)___		Duration failoverTimeout = FiniteDuration.apply(_			flinkConfig.getInteger(_				MesosOptions.FAILOVER_TIMEOUT_SECONDS),_				TimeUnit.SECONDS)__		frameworkInfo.setFailoverTimeout(failoverTimeout.toSeconds())___		frameworkInfo.setName(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_NAME))___		frameworkInfo.setRole(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_ROLE))___		frameworkInfo.setUser(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_USER))___		if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL)) {_			frameworkInfo.setPrincipal(flinkConfig.getString(_				MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL))___			credential = Protos.Credential.newBuilder()__			credential.setPrincipal(frameworkInfo.getPrincipal())___			_			_			if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET)) {_				credential.setSecret(flinkConfig.getString(_					MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET))__			}_		}__		MesosConfiguration mesos =_			new MesosConfiguration(masterUrl, frameworkInfo, scala.Option.apply(credential))___		return mesos__	};loads,and,validates,the,mesos,scheduler,configuration,param,flink,config,the,global,configuration,param,hostname,the,hostname,to,advertise,to,the,mesos,master;public,static,mesos,configuration,create,mesos,scheduler,configuration,configuration,flink,config,string,hostname,protos,framework,info,builder,framework,info,protos,framework,info,new,builder,set,hostname,hostname,protos,credential,builder,credential,null,if,flink,config,contains,mesos,options,throw,new,illegal,configuration,exception,mesos,options,key,must,be,configured,string,master,url,flink,config,get,string,mesos,options,duration,failover,timeout,finite,duration,apply,flink,config,get,integer,mesos,options,time,unit,seconds,framework,info,set,failover,timeout,failover,timeout,to,seconds,framework,info,set,name,flink,config,get,string,mesos,options,framework,info,set,role,flink,config,get,string,mesos,options,framework,info,set,user,flink,config,get,string,mesos,options,if,flink,config,contains,mesos,options,framework,info,set,principal,flink,config,get,string,mesos,options,credential,protos,credential,new,builder,credential,set,principal,framework,info,get,principal,if,flink,config,contains,mesos,options,credential,set,secret,flink,config,get,string,mesos,options,mesos,configuration,mesos,new,mesos,configuration,master,url,framework,info,scala,option,apply,credential,return,mesos
MesosEntrypointUtils -> public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname);1515177485;Loads and validates the Mesos scheduler configuration._@param flinkConfig the global configuration._@param hostname the hostname to advertise to the Mesos master.;public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname) {__		Protos.FrameworkInfo.Builder frameworkInfo = Protos.FrameworkInfo.newBuilder()_			.setHostname(hostname)__		Protos.Credential.Builder credential = null___		if (!flinkConfig.contains(MesosOptions.MASTER_URL)) {_			throw new IllegalConfigurationException(MesosOptions.MASTER_URL.key() + " must be configured.")__		}_		String masterUrl = flinkConfig.getString(MesosOptions.MASTER_URL)___		Duration failoverTimeout = FiniteDuration.apply(_			flinkConfig.getInteger(_				MesosOptions.FAILOVER_TIMEOUT_SECONDS),_				TimeUnit.SECONDS)__		frameworkInfo.setFailoverTimeout(failoverTimeout.toSeconds())___		frameworkInfo.setName(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_NAME))___		frameworkInfo.setRole(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_ROLE))___		frameworkInfo.setUser(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_USER))___		if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL)) {_			frameworkInfo.setPrincipal(flinkConfig.getString(_				MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL))___			credential = Protos.Credential.newBuilder()__			credential.setPrincipal(frameworkInfo.getPrincipal())___			_			_			if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET)) {_				credential.setSecret(flinkConfig.getString(_					MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET))__			}_		}__		MesosConfiguration mesos =_			new MesosConfiguration(masterUrl, frameworkInfo, scala.Option.apply(credential))___		return mesos__	};loads,and,validates,the,mesos,scheduler,configuration,param,flink,config,the,global,configuration,param,hostname,the,hostname,to,advertise,to,the,mesos,master;public,static,mesos,configuration,create,mesos,scheduler,configuration,configuration,flink,config,string,hostname,protos,framework,info,builder,framework,info,protos,framework,info,new,builder,set,hostname,hostname,protos,credential,builder,credential,null,if,flink,config,contains,mesos,options,throw,new,illegal,configuration,exception,mesos,options,key,must,be,configured,string,master,url,flink,config,get,string,mesos,options,duration,failover,timeout,finite,duration,apply,flink,config,get,integer,mesos,options,time,unit,seconds,framework,info,set,failover,timeout,failover,timeout,to,seconds,framework,info,set,name,flink,config,get,string,mesos,options,framework,info,set,role,flink,config,get,string,mesos,options,framework,info,set,user,flink,config,get,string,mesos,options,if,flink,config,contains,mesos,options,framework,info,set,principal,flink,config,get,string,mesos,options,credential,protos,credential,new,builder,credential,set,principal,framework,info,get,principal,if,flink,config,contains,mesos,options,credential,set,secret,flink,config,get,string,mesos,options,mesos,configuration,mesos,new,mesos,configuration,master,url,framework,info,scala,option,apply,credential,return,mesos
MesosEntrypointUtils -> public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname);1516265159;Loads and validates the Mesos scheduler configuration._@param flinkConfig the global configuration._@param hostname the hostname to advertise to the Mesos master.;public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname) {__		Protos.FrameworkInfo.Builder frameworkInfo = Protos.FrameworkInfo.newBuilder()_			.setHostname(hostname)__		Protos.Credential.Builder credential = null___		if (!flinkConfig.contains(MesosOptions.MASTER_URL)) {_			throw new IllegalConfigurationException(MesosOptions.MASTER_URL.key() + " must be configured.")__		}_		String masterUrl = flinkConfig.getString(MesosOptions.MASTER_URL)___		Duration failoverTimeout = FiniteDuration.apply(_			flinkConfig.getInteger(_				MesosOptions.FAILOVER_TIMEOUT_SECONDS),_				TimeUnit.SECONDS)__		frameworkInfo.setFailoverTimeout(failoverTimeout.toSeconds())___		frameworkInfo.setName(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_NAME))___		frameworkInfo.setRole(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_ROLE))___		frameworkInfo.setUser(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_USER))___		if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL)) {_			frameworkInfo.setPrincipal(flinkConfig.getString(_				MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL))___			credential = Protos.Credential.newBuilder()__			credential.setPrincipal(frameworkInfo.getPrincipal())___			_			_			if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET)) {_				credential.setSecret(flinkConfig.getString(_					MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET))__			}_		}__		MesosConfiguration mesos =_			new MesosConfiguration(masterUrl, frameworkInfo, scala.Option.apply(credential))___		return mesos__	};loads,and,validates,the,mesos,scheduler,configuration,param,flink,config,the,global,configuration,param,hostname,the,hostname,to,advertise,to,the,mesos,master;public,static,mesos,configuration,create,mesos,scheduler,configuration,configuration,flink,config,string,hostname,protos,framework,info,builder,framework,info,protos,framework,info,new,builder,set,hostname,hostname,protos,credential,builder,credential,null,if,flink,config,contains,mesos,options,throw,new,illegal,configuration,exception,mesos,options,key,must,be,configured,string,master,url,flink,config,get,string,mesos,options,duration,failover,timeout,finite,duration,apply,flink,config,get,integer,mesos,options,time,unit,seconds,framework,info,set,failover,timeout,failover,timeout,to,seconds,framework,info,set,name,flink,config,get,string,mesos,options,framework,info,set,role,flink,config,get,string,mesos,options,framework,info,set,user,flink,config,get,string,mesos,options,if,flink,config,contains,mesos,options,framework,info,set,principal,flink,config,get,string,mesos,options,credential,protos,credential,new,builder,credential,set,principal,framework,info,get,principal,if,flink,config,contains,mesos,options,credential,set,secret,flink,config,get,string,mesos,options,mesos,configuration,mesos,new,mesos,configuration,master,url,framework,info,scala,option,apply,credential,return,mesos
MesosEntrypointUtils -> public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname);1517302807;Loads and validates the Mesos scheduler configuration._@param flinkConfig the global configuration._@param hostname the hostname to advertise to the Mesos master.;public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname) {__		Protos.FrameworkInfo.Builder frameworkInfo = Protos.FrameworkInfo.newBuilder()_			.setHostname(hostname)__		Protos.Credential.Builder credential = null___		if (!flinkConfig.contains(MesosOptions.MASTER_URL)) {_			throw new IllegalConfigurationException(MesosOptions.MASTER_URL.key() + " must be configured.")__		}_		String masterUrl = flinkConfig.getString(MesosOptions.MASTER_URL)___		Duration failoverTimeout = FiniteDuration.apply(_			flinkConfig.getInteger(_				MesosOptions.FAILOVER_TIMEOUT_SECONDS),_				TimeUnit.SECONDS)__		frameworkInfo.setFailoverTimeout(failoverTimeout.toSeconds())___		frameworkInfo.setName(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_NAME))___		frameworkInfo.setRole(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_ROLE))___		frameworkInfo.setUser(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_USER))___		if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL)) {_			frameworkInfo.setPrincipal(flinkConfig.getString(_				MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL))___			credential = Protos.Credential.newBuilder()__			credential.setPrincipal(frameworkInfo.getPrincipal())___			_			_			if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET)) {_				credential.setSecret(flinkConfig.getString(_					MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET))__			}_		}__		MesosConfiguration mesos =_			new MesosConfiguration(masterUrl, frameworkInfo, scala.Option.apply(credential))___		return mesos__	};loads,and,validates,the,mesos,scheduler,configuration,param,flink,config,the,global,configuration,param,hostname,the,hostname,to,advertise,to,the,mesos,master;public,static,mesos,configuration,create,mesos,scheduler,configuration,configuration,flink,config,string,hostname,protos,framework,info,builder,framework,info,protos,framework,info,new,builder,set,hostname,hostname,protos,credential,builder,credential,null,if,flink,config,contains,mesos,options,throw,new,illegal,configuration,exception,mesos,options,key,must,be,configured,string,master,url,flink,config,get,string,mesos,options,duration,failover,timeout,finite,duration,apply,flink,config,get,integer,mesos,options,time,unit,seconds,framework,info,set,failover,timeout,failover,timeout,to,seconds,framework,info,set,name,flink,config,get,string,mesos,options,framework,info,set,role,flink,config,get,string,mesos,options,framework,info,set,user,flink,config,get,string,mesos,options,if,flink,config,contains,mesos,options,framework,info,set,principal,flink,config,get,string,mesos,options,credential,protos,credential,new,builder,credential,set,principal,framework,info,get,principal,if,flink,config,contains,mesos,options,credential,set,secret,flink,config,get,string,mesos,options,mesos,configuration,mesos,new,mesos,configuration,master,url,framework,info,scala,option,apply,credential,return,mesos
MesosEntrypointUtils -> public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname);1531993383;Loads and validates the Mesos scheduler configuration._@param flinkConfig the global configuration._@param hostname the hostname to advertise to the Mesos master.;public static MesosConfiguration createMesosSchedulerConfiguration(Configuration flinkConfig, String hostname) {__		Protos.FrameworkInfo.Builder frameworkInfo = Protos.FrameworkInfo.newBuilder()_			.setHostname(hostname)__		Protos.Credential.Builder credential = null___		if (!flinkConfig.contains(MesosOptions.MASTER_URL)) {_			throw new IllegalConfigurationException(MesosOptions.MASTER_URL.key() + " must be configured.")__		}_		String masterUrl = flinkConfig.getString(MesosOptions.MASTER_URL)___		Duration failoverTimeout = FiniteDuration.apply(_			flinkConfig.getInteger(_				MesosOptions.FAILOVER_TIMEOUT_SECONDS),_				TimeUnit.SECONDS)__		frameworkInfo.setFailoverTimeout(failoverTimeout.toSeconds())___		frameworkInfo.setName(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_NAME))___		frameworkInfo.setRole(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_ROLE))___		frameworkInfo.setUser(flinkConfig.getString(_			MesosOptions.RESOURCEMANAGER_FRAMEWORK_USER))___		if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL)) {_			frameworkInfo.setPrincipal(flinkConfig.getString(_				MesosOptions.RESOURCEMANAGER_FRAMEWORK_PRINCIPAL))___			credential = Protos.Credential.newBuilder()__			credential.setPrincipal(frameworkInfo.getPrincipal())___			_			_			if (flinkConfig.contains(MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET)) {_				credential.setSecret(flinkConfig.getString(_					MesosOptions.RESOURCEMANAGER_FRAMEWORK_SECRET))__			}_		}__		MesosConfiguration mesos =_			new MesosConfiguration(masterUrl, frameworkInfo, scala.Option.apply(credential))___		return mesos__	};loads,and,validates,the,mesos,scheduler,configuration,param,flink,config,the,global,configuration,param,hostname,the,hostname,to,advertise,to,the,mesos,master;public,static,mesos,configuration,create,mesos,scheduler,configuration,configuration,flink,config,string,hostname,protos,framework,info,builder,framework,info,protos,framework,info,new,builder,set,hostname,hostname,protos,credential,builder,credential,null,if,flink,config,contains,mesos,options,throw,new,illegal,configuration,exception,mesos,options,key,must,be,configured,string,master,url,flink,config,get,string,mesos,options,duration,failover,timeout,finite,duration,apply,flink,config,get,integer,mesos,options,time,unit,seconds,framework,info,set,failover,timeout,failover,timeout,to,seconds,framework,info,set,name,flink,config,get,string,mesos,options,framework,info,set,role,flink,config,get,string,mesos,options,framework,info,set,user,flink,config,get,string,mesos,options,if,flink,config,contains,mesos,options,framework,info,set,principal,flink,config,get,string,mesos,options,credential,protos,credential,new,builder,credential,set,principal,framework,info,get,principal,if,flink,config,contains,mesos,options,credential,set,secret,flink,config,get,string,mesos,options,mesos,configuration,mesos,new,mesos,configuration,master,url,framework,info,scala,option,apply,credential,return,mesos
MesosEntrypointUtils -> public static Configuration loadConfiguration(Configuration dynamicProperties, Logger log);1516265159;Loads the global configuration, adds the given dynamic properties configuration, and sets_the temp directory paths.__@param dynamicProperties dynamic properties to integrate_@param log logger instance_@return the loaded and adapted global configuration;public static Configuration loadConfiguration(Configuration dynamicProperties, Logger log) {_		Configuration configuration =_			GlobalConfiguration.loadConfigurationWithDynamicProperties(dynamicProperties)___		_		final Map<String, String> envs = System.getenv()__		final String tmpDirs = envs.get(MesosConfigKeys.ENV_FLINK_TMP_DIR)___		_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			log.info("Overriding Mesos' temporary file directories with those " +_				"specified in the Flink config: " + configuration.getValue(CoreOptions.TMP_DIRS))__		}_		else if (tmpDirs != null) {_			log.info("Setting directories for temporary files to: {}", tmpDirs)__			configuration.setString(CoreOptions.TMP_DIRS, tmpDirs)__		}__		return configuration__	};loads,the,global,configuration,adds,the,given,dynamic,properties,configuration,and,sets,the,temp,directory,paths,param,dynamic,properties,dynamic,properties,to,integrate,param,log,logger,instance,return,the,loaded,and,adapted,global,configuration;public,static,configuration,load,configuration,configuration,dynamic,properties,logger,log,configuration,configuration,global,configuration,load,configuration,with,dynamic,properties,dynamic,properties,final,map,string,string,envs,system,getenv,final,string,tmp,dirs,envs,get,mesos,config,keys,if,configuration,contains,core,options,log,info,overriding,mesos,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,tmp,dirs,null,log,info,setting,directories,for,temporary,files,to,tmp,dirs,configuration,set,string,core,options,tmp,dirs,return,configuration
MesosEntrypointUtils -> public static Configuration loadConfiguration(Configuration dynamicProperties, Logger log);1517302807;Loads the global configuration, adds the given dynamic properties configuration, and sets_the temp directory paths.__@param dynamicProperties dynamic properties to integrate_@param log logger instance_@return the loaded and adapted global configuration;public static Configuration loadConfiguration(Configuration dynamicProperties, Logger log) {_		Configuration configuration =_			GlobalConfiguration.loadConfigurationWithDynamicProperties(dynamicProperties)___		_		final Map<String, String> envs = System.getenv()__		final String tmpDirs = envs.get(MesosConfigKeys.ENV_FLINK_TMP_DIR)___		_		if (configuration.contains(CoreOptions.TMP_DIRS)) {_			log.info("Overriding Mesos' temporary file directories with those " +_				"specified in the Flink config: " + configuration.getValue(CoreOptions.TMP_DIRS))__		}_		else if (tmpDirs != null) {_			log.info("Setting directories for temporary files to: {}", tmpDirs)__			configuration.setString(CoreOptions.TMP_DIRS, tmpDirs)__		}__		return configuration__	};loads,the,global,configuration,adds,the,given,dynamic,properties,configuration,and,sets,the,temp,directory,paths,param,dynamic,properties,dynamic,properties,to,integrate,param,log,logger,instance,return,the,loaded,and,adapted,global,configuration;public,static,configuration,load,configuration,configuration,dynamic,properties,logger,log,configuration,configuration,global,configuration,load,configuration,with,dynamic,properties,dynamic,properties,final,map,string,string,envs,system,getenv,final,string,tmp,dirs,envs,get,mesos,config,keys,if,configuration,contains,core,options,log,info,overriding,mesos,temporary,file,directories,with,those,specified,in,the,flink,config,configuration,get,value,core,options,else,if,tmp,dirs,null,log,info,setting,directories,for,temporary,files,to,tmp,dirs,configuration,set,string,core,options,tmp,dirs,return,configuration
MesosEntrypointUtils -> public static Configuration loadConfiguration(Configuration dynamicProperties, Logger log);1531993383;Loads the global configuration, adds the given dynamic properties configuration, and sets_the temp directory paths.__@param dynamicProperties dynamic properties to integrate_@param log logger instance_@return the loaded and adapted global configuration;public static Configuration loadConfiguration(Configuration dynamicProperties, Logger log) {_		Configuration configuration =_			GlobalConfiguration.loadConfigurationWithDynamicProperties(dynamicProperties)___		_		final Map<String, String> envs = System.getenv()__		final String tmpDirs = envs.get(MesosConfigKeys.ENV_FLINK_TMP_DIR)___		BootstrapTools.updateTmpDirectoriesInConfiguration(configuration, tmpDirs)___		return configuration__	};loads,the,global,configuration,adds,the,given,dynamic,properties,configuration,and,sets,the,temp,directory,paths,param,dynamic,properties,dynamic,properties,to,integrate,param,log,logger,instance,return,the,loaded,and,adapted,global,configuration;public,static,configuration,load,configuration,configuration,dynamic,properties,logger,log,configuration,configuration,global,configuration,load,configuration,with,dynamic,properties,dynamic,properties,final,map,string,string,envs,system,getenv,final,string,tmp,dirs,envs,get,mesos,config,keys,bootstrap,tools,update,tmp,directories,in,configuration,configuration,tmp,dirs,return,configuration
