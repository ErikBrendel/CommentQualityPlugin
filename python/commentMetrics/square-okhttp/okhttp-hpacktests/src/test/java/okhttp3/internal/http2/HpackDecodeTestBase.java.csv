commented;modifiers;parameterAmount;loc;comment;code
true;protected,static;1;14;/**  * Reads all stories in the folders provided, asserts if no story found.  */ ;/**  * Reads all stories in the folders provided, asserts if no story found.  */ protected static Collection<Story[]> createStories(String[] interopTests) throws Exception {     List<Story[]> result = new ArrayList<>().     for (String interopTestName : interopTests) {         List<Story> stories = HpackJsonUtil.readStories(interopTestName).         if (stories.isEmpty()) {             fail("No stories for: " + interopTestName).         }         for (Story story : stories) {             result.add(new Story[] { story }).         }     }     return result. }
true;protected;0;3;/**  * Expects wire to be set for all cases, and compares the decoder's output to expected headers.  */ ;/**  * Expects wire to be set for all cases, and compares the decoder's output to expected headers.  */ protected void testDecoder() throws Exception {     testDecoder(story). }
false;protected;1;8;;protected void testDecoder(Story story) throws Exception {     for (Case caze : story.getCases()) {         bytesIn.write(caze.getWire()).         hpackReader.readHeaders().         assertSetEquals(String.format("seqno=%d", caze.getSeqno()), caze.getHeaders(), hpackReader.getAndResetHeaderList()).     } }
true;private,static;3;4;/**  * Checks if {@code expected} and {@code observed} are equal when viewed as a set and headers are  * deduped.  *  * TODO: See if duped headers should be preserved on decode and verify.  */ ;/**  * Checks if {@code expected} and {@code observed} are equal when viewed as a set and headers are  * deduped.  *  * TODO: See if duped headers should be preserved on decode and verify.  */ private static void assertSetEquals(String message, List<Header> expected, List<Header> observed) {     assertEquals(message, new LinkedHashSet<>(expected), new LinkedHashSet<>(observed)). }
false;protected;0;3;;protected Story getStory() {     return story. }
