commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void simple() {     Request request = fromArgs("http://example.com").createRequest().     assertEquals("GET", request.method()).     assertEquals("http://example.com/", request.url().toString()).     assertNull(request.body()). }
false;public;0;6;;@Test public void put() throws IOException {     Request request = fromArgs("-X", "PUT", "-d", "foo", "http://example.com").createRequest().     assertEquals("PUT", request.method()).     assertEquals("http://example.com/", request.url().toString()).     assertEquals(3, request.body().contentLength()). }
false;public;0;8;;@Test public void dataPost() {     Request request = fromArgs("-d", "foo", "http://example.com").createRequest().     RequestBody body = request.body().     assertEquals("POST", request.method()).     assertEquals("http://example.com/", request.url().toString()).     assertEquals("application/x-www-form-urlencoded. charset=utf-8", body.contentType().toString()).     assertEquals("foo", bodyAsString(body)). }
false;public;0;8;;@Test public void dataPut() {     Request request = fromArgs("-d", "foo", "-X", "PUT", "http://example.com").createRequest().     RequestBody body = request.body().     assertEquals("PUT", request.method()).     assertEquals("http://example.com/", request.url().toString()).     assertEquals("application/x-www-form-urlencoded. charset=utf-8", body.contentType().toString()).     assertEquals("foo", bodyAsString(body)). }
false;public;0;9;;@Test public void contentTypeHeader() {     Request request = fromArgs("-d", "foo", "-H", "Content-Type: application/json", "http://example.com").createRequest().     RequestBody body = request.body().     assertEquals("POST", request.method()).     assertEquals("http://example.com/", request.url().toString()).     assertEquals("application/json. charset=utf-8", body.contentType().toString()).     assertEquals("foo", bodyAsString(body)). }
false;public;0;7;;@Test public void referer() {     Request request = fromArgs("-e", "foo", "http://example.com").createRequest().     assertEquals("GET", request.method()).     assertEquals("http://example.com/", request.url().toString()).     assertEquals("foo", request.header("Referer")).     assertNull(request.body()). }
false;public;0;7;;@Test public void userAgent() {     Request request = fromArgs("-A", "foo", "http://example.com").createRequest().     assertEquals("GET", request.method()).     assertEquals("http://example.com/", request.url().toString()).     assertEquals("foo", request.header("User-Agent")).     assertNull(request.body()). }
false;public;0;5;;@Test public void headerSplitWithDate() {     Request request = fromArgs("-H", "If-Modified-Since: Mon, 18 Aug 2014 15:16:06 GMT", "http://example.com").createRequest().     assertEquals("Mon, 18 Aug 2014 15:16:06 GMT", request.header("If-Modified-Since")). }
false;private,static;1;9;;private static String bodyAsString(RequestBody body) {     try {         Buffer buffer = new Buffer().         body.writeTo(buffer).         return buffer.readString(body.contentType().charset()).     } catch (IOException e) {         throw new RuntimeException(e).     } }
