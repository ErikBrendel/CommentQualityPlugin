commented;modifiers;parameterAmount;loc;comment;code
false;static;1;3;;static Main fromArgs(String... args) {     return SingleCommand.singleCommand(Main.class).parse(args). }
false;public,static;1;3;;public static void main(String... args) {     fromArgs(args).run(). }
false;private,static;0;11;;private static String versionString() {     try {         Properties prop = new Properties().         InputStream in = Main.class.getResourceAsStream("/okcurl-version.properties").         prop.load(in).         in.close().         return prop.getProperty("version").     } catch (IOException e) {         throw new AssertionError("Could not load okcurl-version.properties.").     } }
false;private,static;0;3;;private static String protocols() {     return Joiner.on(", ").join(Protocol.values()). }
false;public;0;42;;@Override public void run() {     if (showHelpIfRequested()) {         return.     }     if (version) {         System.out.println(NAME + " " + versionString()).         System.out.println("Protocols: " + protocols()).         return.     }     if (showHttp2Frames) {         enableHttp2FrameLogging().     }     client = createClient().     Request request = createRequest().     try {         Response response = client.newCall(request).execute().         if (showHeaders) {             System.out.println(StatusLine.get(response)).             Headers headers = response.headers().             for (int i = 0, size = headers.size(). i < size. i++) {                 System.out.println(headers.name(i) + ": " + headers.value(i)).             }             System.out.println().         }         // Stream the response to the System.out as it is returned from the server.         Sink out = Okio.sink(System.out).         BufferedSource source = response.body().source().         while (!source.exhausted()) {             out.write(source.getBuffer(), source.getBuffer().size()).             out.flush().         }         response.body().close().     } catch (IOException e) {         e.printStackTrace().     } finally {         close().     } }
false;private;0;24;;private OkHttpClient createClient() {     OkHttpClient.Builder builder = new OkHttpClient.Builder().     builder.followSslRedirects(followRedirects).     if (connectTimeout != DEFAULT_TIMEOUT) {         builder.connectTimeout(connectTimeout, SECONDS).     }     if (readTimeout != DEFAULT_TIMEOUT) {         builder.readTimeout(readTimeout, SECONDS).     }     if (callTimeout != DEFAULT_TIMEOUT) {         builder.callTimeout(callTimeout, SECONDS).     }     if (allowInsecure) {         X509TrustManager trustManager = createInsecureTrustManager().         SSLSocketFactory sslSocketFactory = createInsecureSslSocketFactory(trustManager).         builder.sslSocketFactory(sslSocketFactory, trustManager).         builder.hostnameVerifier(createInsecureHostnameVerifier()).     }     if (verbose) {         HttpLoggingInterceptor.Logger logger = System.out::println.         builder.eventListenerFactory(new LoggingEventListener.Factory(logger)).     }     return builder.build(). }
false;private;0;9;;private String getRequestMethod() {     if (method != null) {         return method.     }     if (data != null) {         return "POST".     }     return "GET". }
false;private;0;20;;private RequestBody getRequestBody() {     if (data == null) {         return null.     }     String bodyData = data.     String mimeType = "application/x-www-form-urlencoded".     if (headers != null) {         for (String header : headers) {             String[] parts = header.split(":", -1).             if ("Content-Type".equalsIgnoreCase(parts[0])) {                 mimeType = parts[1].trim().                 headers.remove(header).                 break.             }         }     }     return RequestBody.create(MediaType.parse(mimeType), bodyData). }
false;;0;19;;Request createRequest() {     Request.Builder request = new Request.Builder().     request.url(url).     request.method(getRequestMethod(), getRequestBody()).     if (headers != null) {         for (String header : headers) {             String[] parts = header.split(":", 2).             request.header(parts[0], parts[1]).         }     }     if (referer != null) {         request.header("Referer", referer).     }     request.header("User-Agent", userAgent).     return request.build(). }
false;private;0;3;;private void close() {     // Close any persistent connections.     client.connectionPool().evictAll(). }
false;public;2;2;;@Override public void checkClientTrusted(X509Certificate[] chain, String authType) { }
false;public;2;2;;@Override public void checkServerTrusted(X509Certificate[] chain, String authType) { }
false;public;0;3;;@Override public X509Certificate[] getAcceptedIssuers() {     return new X509Certificate[0]. }
false;private,static;0;13;;private static X509TrustManager createInsecureTrustManager() {     return new X509TrustManager() {          @Override         public void checkClientTrusted(X509Certificate[] chain, String authType) {         }          @Override         public void checkServerTrusted(X509Certificate[] chain, String authType) {         }          @Override         public X509Certificate[] getAcceptedIssuers() {             return new X509Certificate[0].         }     }. }
false;private,static;1;9;;private static SSLSocketFactory createInsecureSslSocketFactory(TrustManager trustManager) {     try {         SSLContext context = Platform.get().getSSLContext().         context.init(null, new TrustManager[] { trustManager }, null).         return context.getSocketFactory().     } catch (Exception e) {         throw new AssertionError(e).     } }
false;private,static;0;3;;private static HostnameVerifier createInsecureHostnameVerifier() {     return (name, session) -> true. }
false;public;1;3;;@Override public String format(LogRecord record) {     return Util.format("%s%n", record.getMessage()). }
false;private,static;0;12;;private static void enableHttp2FrameLogging() {     frameLogger = Logger.getLogger(Http2.class.getName()).     frameLogger.setLevel(Level.FINE).     ConsoleHandler handler = new ConsoleHandler().     handler.setLevel(Level.FINE).     handler.setFormatter(new SimpleFormatter() {          @Override         public String format(LogRecord record) {             return Util.format("%s%n", record.getMessage()).         }     }).     frameLogger.addHandler(handler). }
