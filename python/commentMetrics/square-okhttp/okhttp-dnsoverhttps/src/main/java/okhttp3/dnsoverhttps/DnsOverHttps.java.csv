commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;9;;private static Dns buildBootstrapClient(Builder builder) {     List<InetAddress> hosts = builder.bootstrapDnsHosts.     if (hosts != null) {         return new BootstrapDns(builder.url.host(), hosts).     } else {         return builder.systemDns.     } }
false;public;0;3;;public HttpUrl url() {     return url. }
false;public;0;3;;public boolean post() {     return post. }
false;public;0;3;;public boolean includeIPv6() {     return includeIPv6. }
false;public;0;3;;public OkHttpClient client() {     return client. }
false;public;0;3;;public boolean resolvePrivateAddresses() {     return resolvePrivateAddresses. }
false;public;0;3;;public boolean resolvePublicAddresses() {     return resolvePublicAddresses. }
false;public;1;15;;@Override public List<InetAddress> lookup(String hostname) throws UnknownHostException {     if (!resolvePrivateAddresses || !resolvePublicAddresses) {         boolean privateHost = isPrivateHost(hostname).         if (privateHost && !resolvePrivateAddresses) {             throw new UnknownHostException("private hosts not resolved").         }         if (!privateHost && !resolvePublicAddresses) {             throw new UnknownHostException("public hosts not resolved").         }     }     return lookupHttps(hostname). }
false;private;1;19;;private List<InetAddress> lookupHttps(String hostname) throws UnknownHostException {     List<Call> networkRequests = new ArrayList<>(2).     List<Exception> failures = new ArrayList<>(2).     List<InetAddress> results = new ArrayList<>(5).     buildRequest(hostname, networkRequests, results, failures, DnsRecordCodec.TYPE_A).     if (includeIPv6) {         buildRequest(hostname, networkRequests, results, failures, DnsRecordCodec.TYPE_AAAA).     }     executeRequests(hostname, networkRequests, results, failures).     if (!results.isEmpty()) {         return results.     }     return throwBestFailure(hostname, failures). }
false;private;5;11;;private void buildRequest(String hostname, List<Call> networkRequests, List<InetAddress> results, List<Exception> failures, int type) {     Request request = buildRequest(hostname, type).     Response response = getCacheOnlyResponse(request).     if (response != null) {         processResponse(response, hostname, results, failures).     } else {         networkRequests.add(client.newCall(request)).     } }
false;public;2;6;;@Override public void onFailure(Call call, IOException e) {     synchronized (failures) {         failures.add(e).     }     latch.countDown(). }
false;public;2;4;;@Override public void onResponse(Call call, Response response) {     processResponse(response, hostname, responses, failures).     latch.countDown(). }
false;private;4;26;;private void executeRequests(final String hostname, List<Call> networkRequests, final List<InetAddress> responses, final List<Exception> failures) {     final CountDownLatch latch = new CountDownLatch(networkRequests.size()).     for (Call call : networkRequests) {         call.enqueue(new Callback() {              @Override             public void onFailure(Call call, IOException e) {                 synchronized (failures) {                     failures.add(e).                 }                 latch.countDown().             }              @Override             public void onResponse(Call call, Response response) {                 processResponse(response, hostname, responses, failures).                 latch.countDown().             }         }).     }     try {         latch.await().     } catch (InterruptedException e) {         failures.add(e).     } }
false;private;4;13;;private void processResponse(Response response, String hostname, List<InetAddress> results, List<Exception> failures) {     try {         List<InetAddress> addresses = readResponse(hostname, response).         synchronized (results) {             results.addAll(addresses).         }     } catch (Exception e) {         synchronized (failures) {             failures.add(e).         }     } }
false;private;2;21;;private List<InetAddress> throwBestFailure(String hostname, List<Exception> failures) throws UnknownHostException {     if (failures.size() == 0) {         throw new UnknownHostException(hostname).     }     Exception failure = failures.get(0).     if (failure instanceof UnknownHostException) {         throw (UnknownHostException) failure.     }     UnknownHostException unknownHostException = new UnknownHostException(hostname).     unknownHostException.initCause(failure).     for (int i = 1. i < failures.size(). i++) {         Util.addSuppressedIfPossible(unknownHostException, failures.get(i)).     }     throw unknownHostException. }
false;private;1;18;;@Nullable private Response getCacheOnlyResponse(Request request) {     if (!post && client.cache() != null) {         try {             Request cacheRequest = request.newBuilder().cacheControl(CacheControl.FORCE_CACHE).build().             Response cacheResponse = client.newCall(cacheRequest).execute().             if (cacheResponse.code() != 504) {                 return cacheResponse.             }         } catch (IOException ioe) {         // Failures are ignored as we can fallback to the network         // and hopefully repopulate the cache.         }     }     return null. }
false;private;2;27;;private List<InetAddress> readResponse(String hostname, Response response) throws Exception {     if (response.cacheResponse() == null && response.protocol() != Protocol.HTTP_2) {         Platform.get().log(Platform.WARN, "Incorrect protocol: " + response.protocol(), null).     }     try {         if (!response.isSuccessful()) {             throw new IOException("response: " + response.code() + " " + response.message()).         }         ResponseBody body = response.body().         if (body.contentLength() > MAX_RESPONSE_SIZE) {             throw new IOException("response size exceeds limit (" + MAX_RESPONSE_SIZE + " bytes): " + body.contentLength() + " bytes").         }         ByteString responseBytes = body.source().readByteString().         return DnsRecordCodec.decodeAnswers(hostname, responseBytes).     } finally {         response.close().     } }
false;private;2;16;;private Request buildRequest(String hostname, int type) {     Request.Builder requestBuilder = new Request.Builder().header("Accept", DNS_MESSAGE.toString()).     ByteString query = DnsRecordCodec.encodeQuery(hostname, type).     if (post) {         requestBuilder = requestBuilder.url(url).post(RequestBody.create(DNS_MESSAGE, query)).     } else {         String encoded = query.base64Url().replace("=", "").         HttpUrl requestUrl = url.newBuilder().addQueryParameter("dns", encoded).build().         requestBuilder = requestBuilder.url(requestUrl).     }     return requestBuilder.build(). }
false;static;1;3;;static boolean isPrivateHost(String host) {     return PublicSuffixDatabase.get().getEffectiveTldPlusOne(host) == null. }
false;public;0;3;;public DnsOverHttps build() {     return new DnsOverHttps(this). }
false;public;1;4;;public Builder client(OkHttpClient client) {     this.client = client.     return this. }
false;public;1;4;;public Builder url(HttpUrl url) {     this.url = url.     return this. }
false;public;1;4;;public Builder includeIPv6(boolean includeIPv6) {     this.includeIPv6 = includeIPv6.     return this. }
false;public;1;4;;public Builder post(boolean post) {     this.post = post.     return this. }
false;public;1;4;;public Builder resolvePrivateAddresses(boolean resolvePrivateAddresses) {     this.resolvePrivateAddresses = resolvePrivateAddresses.     return this. }
false;public;1;4;;public Builder resolvePublicAddresses(boolean resolvePublicAddresses) {     this.resolvePublicAddresses = resolvePublicAddresses.     return this. }
false;public;1;4;;public Builder bootstrapDnsHosts(@Nullable List<InetAddress> bootstrapDnsHosts) {     this.bootstrapDnsHosts = bootstrapDnsHosts.     return this. }
false;public;1;3;;public Builder bootstrapDnsHosts(InetAddress... bootstrapDnsHosts) {     return bootstrapDnsHosts(Arrays.asList(bootstrapDnsHosts)). }
false;public;1;4;;public Builder systemDns(Dns systemDns) {     this.systemDns = systemDns.     return this. }
