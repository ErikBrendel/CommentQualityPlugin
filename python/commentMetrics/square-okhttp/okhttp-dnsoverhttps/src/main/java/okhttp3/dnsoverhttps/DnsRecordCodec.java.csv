commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;28;;public static ByteString encodeQuery(String host, int type) {     Buffer buf = new Buffer().     // query id     buf.writeShort(0).     // flags with recursion     buf.writeShort(256).     // question count     buf.writeShort(1).     // answerCount     buf.writeShort(0).     // authorityResourceCount     buf.writeShort(0).     // additional     buf.writeShort(0).     Buffer nameBuf = new Buffer().     final String[] labels = host.split("\\.").     for (String label : labels) {         long utf8ByteCount = Utf8.size(label).         if (utf8ByteCount != label.length()) {             throw new IllegalArgumentException("non-ascii hostname: " + host).         }         nameBuf.writeByte((byte) utf8ByteCount).         nameBuf.writeUtf8(label).     }     // end     nameBuf.writeByte(0).     nameBuf.copyTo(buf, 0, nameBuf.size()).     buf.writeShort(type).     // CLASS_IN     buf.writeShort(1).     return buf.readByteString(). }
false;public,static;2;51;;public static List<InetAddress> decodeAnswers(String hostname, ByteString byteString) throws Exception {     List<InetAddress> result = new ArrayList<>().     Buffer buf = new Buffer().     buf.write(byteString).     // query id     buf.readShort().     final int flags = buf.readShort() & 0xffff.     if (flags >> 15 == 0) {         throw new IllegalArgumentException("not a response").     }     byte responseCode = (byte) (flags & 0xf).     if (responseCode == NXDOMAIN) {         throw new UnknownHostException(hostname + ": NXDOMAIN").     } else if (responseCode == SERVFAIL) {         throw new UnknownHostException(hostname + ": SERVFAIL").     }     final int questionCount = buf.readShort() & 0xffff.     final int answerCount = buf.readShort() & 0xffff.     // authority record count     buf.readShort().     // additional record count     buf.readShort().     for (int i = 0. i < questionCount. i++) {         // name         skipName(buf).         // type         buf.readShort().         // class         buf.readShort().     }     for (int i = 0. i < answerCount. i++) {         // name         skipName(buf).         int type = buf.readShort() & 0xffff.         // class         buf.readShort().         // ttl         final long ttl = buf.readInt() & 0xffffffffL.         final int length = buf.readShort() & 0xffff.         if (type == TYPE_A || type == TYPE_AAAA) {             byte[] bytes = new byte[length].             buf.read(bytes).             result.add(InetAddress.getByAddress(bytes)).         } else {             buf.skip(length).         }     }     return result. }
false;private,static;1;16;;private static void skipName(Buffer in) throws EOFException {     // 0 - 63 bytes     int length = in.readByte().     if (length < 0) {         // compressed name pointer, first two bits are 1         // drop second byte of compression offset         in.skip(1).     } else {         while (length > 0) {             // skip each part of the domain name             in.skip(length).             length = in.readByte().         }     } }
