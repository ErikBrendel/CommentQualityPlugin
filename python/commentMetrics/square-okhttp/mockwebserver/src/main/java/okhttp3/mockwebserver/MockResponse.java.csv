commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override public MockResponse clone() {     try {         MockResponse result = (MockResponse) super.clone().         result.headers = headers.build().newBuilder().         result.promises = new ArrayList<>(promises).         return result.     } catch (CloneNotSupportedException e) {         throw new AssertionError().     } }
true;public;0;3;/**  * Returns the HTTP response line, such as "HTTP/1.1 200 OK".  */ ;/**  * Returns the HTTP response line, such as "HTTP/1.1 200 OK".  */ public String getStatus() {     return status. }
false;public;1;15;;public MockResponse setResponseCode(int code) {     String reason = "Mock Response".     if (code >= 100 && code < 200) {         reason = "Informational".     } else if (code >= 200 && code < 300) {         reason = "OK".     } else if (code >= 300 && code < 400) {         reason = "Redirection".     } else if (code >= 400 && code < 500) {         reason = "Client Error".     } else if (code >= 500 && code < 600) {         reason = "Server Error".     }     return setStatus("HTTP/1.1 " + code + " " + reason). }
false;public;1;4;;public MockResponse setStatus(String status) {     this.status = status.     return this. }
true;public;0;3;/**  * Returns the HTTP headers, such as "Content-Length: 0".  */ ;/**  * Returns the HTTP headers, such as "Content-Length: 0".  */ public Headers getHeaders() {     return headers.build(). }
false;public;0;3;;public Headers getTrailers() {     return trailers.build(). }
true;public;0;4;/**  * Removes all HTTP headers including any "Content-Length" and "Transfer-encoding" headers that  * were added by default.  */ ;/**  * Removes all HTTP headers including any "Content-Length" and "Transfer-encoding" headers that  * were added by default.  */ public MockResponse clearHeaders() {     headers = new Headers.Builder().     return this. }
true;public;1;4;/**  * Adds {@code header} as an HTTP header. For well-formed HTTP {@code header} should contain a  * name followed by a colon and a value.  */ ;/**  * Adds {@code header} as an HTTP header. For well-formed HTTP {@code header} should contain a  * name followed by a colon and a value.  */ public MockResponse addHeader(String header) {     headers.add(header).     return this. }
true;public;2;4;/**  * Adds a new header with the name and value. This may be used to add multiple headers with the  * same name.  */ ;/**  * Adds a new header with the name and value. This may be used to add multiple headers with the  * same name.  */ public MockResponse addHeader(String name, Object value) {     headers.add(name, String.valueOf(value)).     return this. }
true;public;2;4;/**  * Adds a new header with the name and value. This may be used to add multiple headers with the  * same name. Unlike {@link #addHeader(String, Object)} this does not validate the name and  * value.  */ ;/**  * Adds a new header with the name and value. This may be used to add multiple headers with the  * same name. Unlike {@link #addHeader(String, Object)} this does not validate the name and  * value.  */ public MockResponse addHeaderLenient(String name, Object value) {     Internal.instance.addLenient(headers, name, String.valueOf(value)).     return this. }
true;public;2;4;/**  * Removes all headers named {@code name}, then adds a new header with the name and value.  */ ;/**  * Removes all headers named {@code name}, then adds a new header with the name and value.  */ public MockResponse setHeader(String name, Object value) {     removeHeader(name).     return addHeader(name, value). }
true;public;1;4;/**  * Replaces all headers with those specified.  */ ;/**  * Replaces all headers with those specified.  */ public MockResponse setHeaders(Headers headers) {     this.headers = headers.newBuilder().     return this. }
true;public;1;4;/**  * Replaces all trailers with those specified.  */ ;/**  * Replaces all trailers with those specified.  */ public MockResponse setTrailers(Headers trailers) {     this.trailers = trailers.newBuilder().     return this. }
true;public;1;4;/**  * Removes all headers named {@code name}.  */ ;/**  * Removes all headers named {@code name}.  */ public MockResponse removeHeader(String name) {     headers.removeAll(name).     return this. }
false;;0;3;;boolean isDuplex() {     return duplexResponseBody != null. }
false;;0;3;;DuplexResponseBody getDuplexResponseBody() {     return duplexResponseBody. }
true;public;0;3;/**  * Returns a copy of the raw HTTP payload.  */ ;/**  * Returns a copy of the raw HTTP payload.  */ public Buffer getBody() {     return body != null ? body.clone() : null. }
false;public;1;5;;public MockResponse setBody(Buffer body) {     setHeader("Content-Length", body.size()).     // Defensive copy.     this.body = body.clone().     return this. }
true;public;1;3;/**  * Sets the response body to the UTF-8 encoded bytes of {@code body}.  */ ;/**  * Sets the response body to the UTF-8 encoded bytes of {@code body}.  */ public MockResponse setBody(String body) {     return setBody(new Buffer().writeUtf8(body)). }
false;;1;4;;MockResponse setBody(DuplexResponseBody duplexResponseBody) {     this.duplexResponseBody = duplexResponseBody.     return this. }
true;public;2;17;/**  * Sets the response body to {@code body}, chunked every {@code maxChunkSize} bytes.  */ ;/**  * Sets the response body to {@code body}, chunked every {@code maxChunkSize} bytes.  */ public MockResponse setChunkedBody(Buffer body, int maxChunkSize) {     removeHeader("Content-Length").     headers.add(CHUNKED_BODY_HEADER).     Buffer bytesOut = new Buffer().     while (!body.exhausted()) {         long chunkSize = Math.min(body.size(), maxChunkSize).         bytesOut.writeHexadecimalUnsignedLong(chunkSize).         bytesOut.writeUtf8("\r\n").         bytesOut.write(body, chunkSize).         bytesOut.writeUtf8("\r\n").     }     // Last chunk. Trailers follow!     bytesOut.writeUtf8("0\r\n").     this.body = bytesOut.     return this. }
true;public;2;3;/**  * Sets the response body to the UTF-8 encoded bytes of {@code body}, chunked every {@code  * maxChunkSize} bytes.  */ ;/**  * Sets the response body to the UTF-8 encoded bytes of {@code body}, chunked every {@code  * maxChunkSize} bytes.  */ public MockResponse setChunkedBody(String body, int maxChunkSize) {     return setChunkedBody(new Buffer().writeUtf8(body), maxChunkSize). }
false;public;0;3;;public SocketPolicy getSocketPolicy() {     return socketPolicy. }
false;public;1;4;;public MockResponse setSocketPolicy(SocketPolicy socketPolicy) {     this.socketPolicy = socketPolicy.     return this. }
false;public;0;3;;public int getHttp2ErrorCode() {     return http2ErrorCode. }
true;public;1;4;/**  * Sets the <a href="https://tools.ietf.org/html/rfc7540#section-7">HTTP/2 error code</a> to be  * returned when resetting the stream. This is only valid with {@link  * SocketPolicy#RESET_STREAM_AT_START}.  */ ;/**  * Sets the <a href="https://tools.ietf.org/html/rfc7540#section-7">HTTP/2 error code</a> to be  * returned when resetting the stream. This is only valid with {@link  * SocketPolicy#RESET_STREAM_AT_START}.  */ public MockResponse setHttp2ErrorCode(int http2ErrorCode) {     this.http2ErrorCode = http2ErrorCode.     return this. }
true;public;3;6;/**  * Throttles the request reader and response writer to sleep for the given period after each  * series of {@code bytesPerPeriod} bytes are transferred. Use this to simulate network behavior.  */ ;/**  * Throttles the request reader and response writer to sleep for the given period after each  * series of {@code bytesPerPeriod} bytes are transferred. Use this to simulate network behavior.  */ public MockResponse throttleBody(long bytesPerPeriod, long period, TimeUnit unit) {     this.throttleBytesPerPeriod = bytesPerPeriod.     this.throttlePeriodAmount = period.     this.throttlePeriodUnit = unit.     return this. }
false;public;0;3;;public long getThrottleBytesPerPeriod() {     return throttleBytesPerPeriod. }
false;public;1;3;;public long getThrottlePeriod(TimeUnit unit) {     return unit.convert(throttlePeriodAmount, throttlePeriodUnit). }
true;public;2;5;/**  * Set the delayed time of the response body to {@code delay}. This applies to the response body  * only. response headers are not affected.  */ ;/**  * Set the delayed time of the response body to {@code delay}. This applies to the response body  * only. response headers are not affected.  */ public MockResponse setBodyDelay(long delay, TimeUnit unit) {     bodyDelayAmount = delay.     bodyDelayUnit = unit.     return this. }
false;public;1;3;;public long getBodyDelay(TimeUnit unit) {     return unit.convert(bodyDelayAmount, bodyDelayUnit). }
false;public;2;5;;public MockResponse setHeadersDelay(long delay, TimeUnit unit) {     headersDelayAmount = delay.     headersDelayUnit = unit.     return this. }
false;public;1;3;;public long getHeadersDelay(TimeUnit unit) {     return unit.convert(headersDelayAmount, headersDelayUnit). }
true;public;1;4;/**  * When {@link MockWebServer#setProtocols(java.util.List) protocols} include {@linkplain  * okhttp3.Protocol#HTTP_2}, this attaches a pushed stream to this response.  */ ;/**  * When {@link MockWebServer#setProtocols(java.util.List) protocols} include {@linkplain  * okhttp3.Protocol#HTTP_2}, this attaches a pushed stream to this response.  */ public MockResponse withPush(PushPromise promise) {     this.promises.add(promise).     return this. }
true;public;0;3;/**  * Returns the streams the server will push with this response.  */ ;/**  * Returns the streams the server will push with this response.  */ public List<PushPromise> getPushPromises() {     return promises. }
true;public;1;4;/**  * When {@linkplain MockWebServer#setProtocols(java.util.List) protocols} include {@linkplain  * okhttp3.Protocol#HTTP_2 HTTP/2}, this pushes {@code settings} before writing the response.  */ ;/**  * When {@linkplain MockWebServer#setProtocols(java.util.List) protocols} include {@linkplain  * okhttp3.Protocol#HTTP_2 HTTP/2}, this pushes {@code settings} before writing the response.  */ public MockResponse withSettings(Settings settings) {     this.settings = settings.     return this. }
false;public;0;3;;public Settings getSettings() {     return settings. }
true;public;1;8;/**  * Attempts to perform a web socket upgrade on the connection. This will overwrite any previously  * set status or body.  */ ;/**  * Attempts to perform a web socket upgrade on the connection. This will overwrite any previously  * set status or body.  */ public MockResponse withWebSocketUpgrade(WebSocketListener listener) {     setStatus("HTTP/1.1 101 Switching Protocols").     setHeader("Connection", "Upgrade").     setHeader("Upgrade", "websocket").     body = null.     webSocketListener = listener.     return this. }
false;public;0;3;;public WebSocketListener getWebSocketListener() {     return webSocketListener. }
false;public;0;3;;@Override public String toString() {     return status. }
