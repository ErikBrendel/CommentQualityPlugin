commented;modifiers;parameterAmount;loc;comment;code
false;public;1;21;;@Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {     // To permit interactive/browser testing, ignore requests for favicons.     final String requestLine = request.getRequestLine().     if (requestLine != null && requestLine.equals("GET /favicon.ico HTTP/1.1")) {         logger.info("served " + requestLine).         return new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_FOUND).     }     if (failFastResponse != null && responseQueue.peek() == null) {         // Fail fast if there's no response queued up.         return failFastResponse.     }     MockResponse result = responseQueue.take().     // other threads waiting on take() will also return.     if (result == DEAD_LETTER)         responseQueue.add(DEAD_LETTER).     return result. }
false;public;0;6;;@Override public MockResponse peek() {     MockResponse peek = responseQueue.peek().     if (peek != null)         return peek.     if (failFastResponse != null)         return failFastResponse.     return super.peek(). }
false;public;1;3;;public void enqueueResponse(MockResponse response) {     responseQueue.add(response). }
false;public;0;3;;@Override public void shutdown() {     responseQueue.add(DEAD_LETTER). }
false;public;1;6;;public void setFailFast(boolean failFast) {     MockResponse failFastResponse = failFast ? new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_FOUND) : null.     setFailFast(failFastResponse). }
false;public;1;3;;public void setFailFast(MockResponse failFastResponse) {     this.failFastResponse = failFastResponse. }
