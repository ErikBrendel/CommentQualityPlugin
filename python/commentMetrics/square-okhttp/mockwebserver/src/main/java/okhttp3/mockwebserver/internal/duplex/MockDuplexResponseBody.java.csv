commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public MockDuplexResponseBody receiveRequest(String expected) {     actions.add((request, requestBody, responseBody) -> {         assertEquals(expected, requestBody.readUtf8(Utf8.size(expected))).     }).     return this. }
false;public;0;6;;public MockDuplexResponseBody exhaustRequest() {     actions.add((request, requestBody, responseBody) -> {         assertTrue(requestBody.exhausted()).     }).     return this. }
false;public;0;10;;public MockDuplexResponseBody requestIOException() {     actions.add((request, requestBody, responseBody) -> {         try {             requestBody.exhausted().             fail().         } catch (IOException expected) {         }     }).     return this. }
false;public;1;7;;public MockDuplexResponseBody sendResponse(String s) {     actions.add((request, requestBody, responseBody) -> {         responseBody.writeUtf8(s).         responseBody.flush().     }).     return this. }
false;public;0;6;;public MockDuplexResponseBody exhaustResponse() {     actions.add((request, requestBody, responseBody) -> {         responseBody.close().     }).     return this. }
false;public;2;10;;public MockDuplexResponseBody sleep(long duration, TimeUnit unit) {     actions.add((request, requestBody, responseBody) -> {         try {             Thread.sleep(unit.toMillis(duration)).         } catch (InterruptedException e) {             throw new AssertionError(e).         }     }).     return this. }
false;public;3;11;;@Override public void onRequest(RecordedRequest request, BufferedSource requestBody, BufferedSink responseBody) {     FutureTask<Void> futureTask = new FutureTask<>(() -> {         for (Action action. (action = actions.poll()) != null. ) {             action.execute(request, requestBody, responseBody).         }         // Success!         return null.     }).     results.add(futureTask).     futureTask.run(). }
true;public;0;5;/**  * Returns once the duplex conversation completes successfully.  */ ;/**  * Returns once the duplex conversation completes successfully.  */ public void awaitSuccess() throws Exception {     FutureTask<Void> futureTask = results.poll(5, TimeUnit.SECONDS).     if (futureTask == null)         throw new AssertionError("no onRequest call received").     futureTask.get(5, TimeUnit.SECONDS). }
false;;3;2;;void execute(RecordedRequest request, BufferedSource requestBody, BufferedSink responseBody) throws IOException.
