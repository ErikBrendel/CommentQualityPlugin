commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;1;1;/**  * Returns a response to satisfy {@code request}. This method may block (for instance, to wait on  * a CountdownLatch).  */ ;/**  * Returns a response to satisfy {@code request}. This method may block (for instance, to wait on  * a CountdownLatch).  */ public abstract MockResponse dispatch(RecordedRequest request) throws InterruptedException.
true;public;0;3;/**  * Returns an early guess of the next response, used for policy on how an incoming request should  * be received. The default implementation returns an empty response. Mischievous implementations  * can return other values to test HTTP edge cases, such as unhappy socket policies or throttled  * request bodies.  */ ;/**  * Returns an early guess of the next response, used for policy on how an incoming request should  * be received. The default implementation returns an empty response. Mischievous implementations  * can return other values to test HTTP edge cases, such as unhappy socket policies or throttled  * request bodies.  */ public MockResponse peek() {     return new MockResponse().setSocketPolicy(SocketPolicy.KEEP_OPEN). }
true;public;0;2;/**  * Release any resources held by this dispatcher. Any requests that are currently being dispatched  * should return immediately. Responses returned after shutdown will not be transmitted: their  * socket connections have already been closed.  */ ;/**  * Release any resources held by this dispatcher. Any requests that are currently being dispatched  * should return immediately. Responses returned after shutdown will not be transmitted: their  * socket connections have already been closed.  */ public void shutdown() { }
