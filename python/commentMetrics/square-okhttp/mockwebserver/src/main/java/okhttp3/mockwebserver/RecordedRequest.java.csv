commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public HttpUrl getRequestUrl() {     return requestUrl. }
false;public;0;3;;public String getRequestLine() {     return requestLine. }
false;public;0;3;;public String getMethod() {     return method. }
false;public;0;3;;public String getPath() {     return path. }
true;public;0;3;/**  * Returns all headers.  */ ;/**  * Returns all headers.  */ public Headers getHeaders() {     return headers. }
true;public;1;4;/**  * Returns the first header named {@code name}, or null if no such header exists.  */ ;/**  * Returns the first header named {@code name}, or null if no such header exists.  */ public String getHeader(String name) {     List<String> values = headers.values(name).     return values.isEmpty() ? null : values.get(0). }
true;public;0;3;/**  * Returns the sizes of the chunks of this request's body, or an empty list if the request's body  * was empty or unchunked.  */ ;/**  * Returns the sizes of the chunks of this request's body, or an empty list if the request's body  * was empty or unchunked.  */ public List<Integer> getChunkSizes() {     return chunkSizes. }
true;public;0;3;/**  * Returns the total size of the body of this POST request (before truncation).  */ ;/**  * Returns the total size of the body of this POST request (before truncation).  */ public long getBodySize() {     return bodySize. }
true;public;0;3;/**  * Returns the body of this POST request. This may be truncated.  */ ;/**  * Returns the body of this POST request. This may be truncated.  */ public Buffer getBody() {     return body. }
true;public;0;3;/**  * @deprecated Use {@link #getBody() getBody().readUtf8()}.  */ ;/**  * @deprecated Use {@link #getBody() getBody().readUtf8()}.  */ public String getUtf8Body() {     return getBody().readUtf8(). }
true;public;0;3;/**  * Returns the index of this request on its HTTP connection. Since a single HTTP connection may  * serve multiple requests, each request is assigned its own sequence number.  */ ;/**  * Returns the index of this request on its HTTP connection. Since a single HTTP connection may  * serve multiple requests, each request is assigned its own sequence number.  */ public int getSequenceNumber() {     return sequenceNumber. }
true;public;0;3;/**  * Returns the connection's TLS version or null if the connection doesn't use SSL.  */ ;/**  * Returns the connection's TLS version or null if the connection doesn't use SSL.  */ public TlsVersion getTlsVersion() {     return handshake != null ? handshake.tlsVersion() : null. }
true;public;0;3;/**  * Returns the TLS handshake of the connection that carried this request, or null if the request  * was received without TLS.  */ ;/**  * Returns the TLS handshake of the connection that carried this request, or null if the request  * was received without TLS.  */ public Handshake getHandshake() {     return handshake. }
false;public;0;3;;@Override public String toString() {     return requestLine. }
