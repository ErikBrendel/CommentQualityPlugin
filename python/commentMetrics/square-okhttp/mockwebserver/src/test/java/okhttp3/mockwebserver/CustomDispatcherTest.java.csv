commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@After public void tearDown() throws Exception {     mockWebServer.shutdown(). }
false;public;1;5;;@Override public MockResponse dispatch(RecordedRequest request) {     requestsMade.add(request).     return new MockResponse(). }
false;public;0;18;;@Test public void simpleDispatch() throws Exception {     mockWebServer.start().     final List<RecordedRequest> requestsMade = new ArrayList<>().     final Dispatcher dispatcher = new Dispatcher() {          @Override         public MockResponse dispatch(RecordedRequest request) {             requestsMade.add(request).             return new MockResponse().         }     }.     assertEquals(0, requestsMade.size()).     mockWebServer.setDispatcher(dispatcher).     final URL url = mockWebServer.url("/").url().     final HttpURLConnection conn = (HttpURLConnection) url.openConnection().     // Force the connection to hit the "server".     conn.getResponseCode().     // Make sure our dispatcher got the request.     assertEquals(1, requestsMade.size()). }
false;public;1;7;;@Override public MockResponse dispatch(RecordedRequest request) throws InterruptedException {     if (request.getPath().equals(firstRequest)) {         latch.await().     }     return new MockResponse(). }
false;public;0;29;;@Test public void outOfOrderResponses() throws Exception {     AtomicInteger firstResponseCode = new AtomicInteger().     AtomicInteger secondResponseCode = new AtomicInteger().     mockWebServer.start().     final String secondRequest = "/bar".     final String firstRequest = "/foo".     final CountDownLatch latch = new CountDownLatch(1).     final Dispatcher dispatcher = new Dispatcher() {          @Override         public MockResponse dispatch(RecordedRequest request) throws InterruptedException {             if (request.getPath().equals(firstRequest)) {                 latch.await().             }             return new MockResponse().         }     }.     mockWebServer.setDispatcher(dispatcher).     final Thread startsFirst = buildRequestThread(firstRequest, firstResponseCode).     startsFirst.start().     final Thread endsFirst = buildRequestThread(secondRequest, secondResponseCode).     endsFirst.start().     endsFirst.join().     // First response is still waiting.     assertEquals(0, firstResponseCode.get()).     // Second response is done.     assertEquals(200, secondResponseCode.get()).     latch.countDown().     startsFirst.join().     // And now it's done!     assertEquals(200, firstResponseCode.get()).     // (Still done).     assertEquals(200, secondResponseCode.get()). }
false;private;2;11;;private Thread buildRequestThread(String path, AtomicInteger responseCode) {     return new Thread(() -> {         URL url = mockWebServer.url(path).url().         HttpURLConnection conn.         try {             conn = (HttpURLConnection) url.openConnection().             // Force the connection to hit the "server".             responseCode.set(conn.getResponseCode()).         } catch (IOException ignored) {         }     }). }
