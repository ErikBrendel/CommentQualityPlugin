commented;modifiers;parameterAmount;loc;comment;code
false;private;0;29;;private void run() throws Exception {     ServerSocket serverSocket = new ServerSocket(8888).     serverSocket.setReuseAddress(true).     while (true) {         Socket socket = null.         try {             socket = serverSocket.accept().             SSLSocket sslSocket = doSsl(socket).             String protocolString = Platform.get().getSelectedProtocol(sslSocket).             Protocol protocol = protocolString != null ? Protocol.get(protocolString) : null.             if (protocol != Protocol.HTTP_2) {                 throw new ProtocolException("Protocol " + protocol + " unsupported").             }             Http2Connection connection = new Http2Connection.Builder(false).socket(sslSocket).listener(this).build().             connection.start().         } catch (IOException e) {             logger.log(Level.INFO, "Http2Server connection failure: " + e).             Util.closeQuietly(socket).         } catch (Exception e) {             logger.log(Level.WARNING, "Http2Server unexpected failure", e).             Util.closeQuietly(socket).         }     } }
false;private;1;9;;private SSLSocket doSsl(Socket socket) throws IOException {     SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true).     sslSocket.setUseClientMode(false).     Platform.get().configureTlsExtensions(sslSocket, null, Collections.singletonList(Protocol.HTTP_2)).     sslSocket.startHandshake().     return sslSocket. }
false;public;1;29;;@Override public void onStream(Http2Stream stream) throws IOException {     try {         Headers requestHeaders = stream.takeHeaders().         String path = null.         for (int i = 0, size = requestHeaders.size(). i < size. i++) {             if (requestHeaders.name(i).equals(Header.TARGET_PATH_UTF8)) {                 path = requestHeaders.value(i).                 break.             }         }         if (path == null) {             // TODO: send bad request error             throw new AssertionError().         }         File file = new File(baseDirectory + path).         if (file.isDirectory()) {             serveDirectory(stream, file.listFiles()).         } else if (file.exists()) {             serveFile(stream, file).         } else {             send404(stream, path).         }     } catch (IOException e) {         Platform.get().log(INFO, "Failure serving Http2Stream: " + e.getMessage(), null).     } }
false;private;2;11;;private void send404(Http2Stream stream, String path) throws IOException {     List<Header> responseHeaders = Arrays.asList(new Header(":status", "404"), new Header(":version", "HTTP/1.1"), new Header("content-type", "text/plain")).     stream.writeHeaders(responseHeaders, false, false).     BufferedSink out = Okio.buffer(stream.getSink()).     out.writeUtf8("Not found: " + path).     out.close(). }
false;private;2;14;;private void serveDirectory(Http2Stream stream, File[] files) throws IOException {     List<Header> responseHeaders = Arrays.asList(new Header(":status", "200"), new Header(":version", "HTTP/1.1"), new Header("content-type", "text/html. charset=UTF-8")).     stream.writeHeaders(responseHeaders, false, false).     BufferedSink out = Okio.buffer(stream.getSink()).     for (File file : files) {         String target = file.isDirectory() ? (file.getName() + "/") : file.getName().         out.writeUtf8("<a href='" + target + "'>" + target + "</a><br>").     }     out.close(). }
false;private;2;11;;private void serveFile(Http2Stream stream, File file) throws IOException {     List<Header> responseHeaders = Arrays.asList(new Header(":status", "200"), new Header(":version", "HTTP/1.1"), new Header("content-type", contentType(file))).     stream.writeHeaders(responseHeaders, false, false).     try (Source source = Okio.source(file).         BufferedSink sink = Okio.buffer(stream.getSink())) {         sink.writeAll(source).     } }
false;private;1;10;;private String contentType(File file) {     if (file.getName().endsWith(".css"))         return "text/css".     if (file.getName().endsWith(".gif"))         return "image/gif".     if (file.getName().endsWith(".html"))         return "text/html".     if (file.getName().endsWith(".jpeg"))         return "image/jpeg".     if (file.getName().endsWith(".jpg"))         return "image/jpeg".     if (file.getName().endsWith(".js"))         return "application/javascript".     if (file.getName().endsWith(".png"))         return "image/png".     return "text/plain". }
false;public,static;1;10;;public static void main(String... args) throws Exception {     if (args.length != 1 || args[0].startsWith("-")) {         System.out.println("Usage: Http2Server <base directory>").         return.     }     Http2Server server = new Http2Server(new File(args[0]), localhost().sslContext().getSocketFactory()).     server.run(). }
