commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static Huffman get() {     return INSTANCE. }
false;;2;25;;void encode(ByteString data, BufferedSink sink) throws IOException {     long current = 0.     int n = 0.     for (int i = 0. i < data.size(). i++) {         int b = data.getByte(i) & 0xFF.         int code = CODES[b].         int nbits = CODE_LENGTHS[b].         current <<= nbits.         current |= code.         n += nbits.         while (n >= 8) {             n -= 8.             sink.writeByte(((int) (current >> n))).         }     }     if (n > 0) {         current <<= (8 - n).         current |= (0xFF >>> n).         sink.writeByte((int) current).     } }
false;;1;10;;int encodedLength(ByteString bytes) {     long len = 0.     for (int i = 0. i < bytes.size(). i++) {         int b = bytes.getByte(i) & 0xFF.         len += CODE_LENGTHS[b].     }     return (int) ((len + 7) >> 3). }
false;;1;37;;byte[] decode(byte[] buf) {     ByteArrayOutputStream baos = new ByteArrayOutputStream().     Node node = root.     int current = 0.     int nbits = 0.     for (int i = 0. i < buf.length. i++) {         int b = buf[i] & 0xFF.         current = (current << 8) | b.         nbits += 8.         while (nbits >= 8) {             int c = (current >>> (nbits - 8)) & 0xFF.             node = node.children[c].             if (node.children == null) {                 // terminal node                 baos.write(node.symbol).                 nbits -= node.terminalBits.                 node = root.             } else {                 // non-terminal node                 nbits -= 8.             }         }     }     while (nbits > 0) {         int c = (current << (8 - nbits)) & 0xFF.         node = node.children[c].         if (node.children != null || node.terminalBits > nbits) {             break.         }         baos.write(node.symbol).         nbits -= node.terminalBits.         node = root.     }     return baos.toByteArray(). }
false;private;0;5;;private void buildTree() {     for (int i = 0. i < CODE_LENGTHS.length. i++) {         addCode(i, CODES[i], CODE_LENGTHS[i]).     } }
false;private;3;23;;private void addCode(int sym, int code, byte len) {     Node terminal = new Node(sym, len).     Node current = root.     while (len > 8) {         len -= 8.         int i = ((code >>> len) & 0xFF).         if (current.children == null) {             throw new IllegalStateException("invalid dictionary: prefix not unique").         }         if (current.children[i] == null) {             current.children[i] = new Node().         }         current = current.children[i].     }     int shift = 8 - len.     int start = (code << shift) & 0xFF.     int end = 1 << shift.     for (int i = start. i < start + end. i++) {         current.children[i] = terminal.     } }
