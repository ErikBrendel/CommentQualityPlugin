commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Override @Nullable public Connection connection() {     return exchange != null ? exchange.connection() : null. }
false;public;0;3;;@Override public int connectTimeoutMillis() {     return connectTimeout. }
false;public;2;5;;@Override public Interceptor.Chain withConnectTimeout(int timeout, TimeUnit unit) {     int millis = checkDuration("timeout", timeout, unit).     return new RealInterceptorChain(interceptors, transmitter, exchange, index, request, call, millis, readTimeout, writeTimeout). }
false;public;0;3;;@Override public int readTimeoutMillis() {     return readTimeout. }
false;public;2;5;;@Override public Interceptor.Chain withReadTimeout(int timeout, TimeUnit unit) {     int millis = checkDuration("timeout", timeout, unit).     return new RealInterceptorChain(interceptors, transmitter, exchange, index, request, call, connectTimeout, millis, writeTimeout). }
false;public;0;3;;@Override public int writeTimeoutMillis() {     return writeTimeout. }
false;public;2;5;;@Override public Interceptor.Chain withWriteTimeout(int timeout, TimeUnit unit) {     int millis = checkDuration("timeout", timeout, unit).     return new RealInterceptorChain(interceptors, transmitter, exchange, index, request, call, connectTimeout, readTimeout, millis). }
false;public;0;3;;public Transmitter transmitter() {     return transmitter. }
false;public;0;4;;public Exchange exchange() {     if (exchange == null)         throw new IllegalStateException().     return exchange. }
false;public;0;3;;@Override public Call call() {     return call. }
false;public;0;3;;@Override public Request request() {     return request. }
false;public;1;3;;@Override public Response proceed(Request request) throws IOException {     return proceed(request, transmitter, exchange). }
false;public;3;42;;public Response proceed(Request request, Transmitter transmitter, @Nullable Exchange exchange) throws IOException {     if (index >= interceptors.size())         throw new AssertionError().     calls++.     // If we already have a stream, confirm that the incoming request will use it.     if (this.exchange != null && !this.exchange.connection().supportsUrl(request.url())) {         throw new IllegalStateException("network interceptor " + interceptors.get(index - 1) + " must retain the same host and port").     }     // If we already have a stream, confirm that this is the only call to chain.proceed().     if (this.exchange != null && calls > 1) {         throw new IllegalStateException("network interceptor " + interceptors.get(index - 1) + " must call proceed() exactly once").     }     // Call the next interceptor in the chain.     RealInterceptorChain next = new RealInterceptorChain(interceptors, transmitter, exchange, index + 1, request, call, connectTimeout, readTimeout, writeTimeout).     Interceptor interceptor = interceptors.get(index).     Response response = interceptor.intercept(next).     // Confirm that the next interceptor made its required call to chain.proceed().     if (exchange != null && index + 1 < interceptors.size() && next.calls != 1) {         throw new IllegalStateException("network interceptor " + interceptor + " must call proceed() exactly once").     }     // Confirm that the intercepted response isn't null.     if (response == null) {         throw new NullPointerException("interceptor " + interceptor + " returned null").     }     if (response.body() == null) {         throw new IllegalStateException("interceptor " + interceptor + " returned a response with no body").     }     return response. }
