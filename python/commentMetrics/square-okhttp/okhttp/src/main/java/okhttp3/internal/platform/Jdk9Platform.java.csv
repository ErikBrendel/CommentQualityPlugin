commented;modifiers;parameterAmount;loc;comment;code
false;public;3;16;;@Override public void configureTlsExtensions(SSLSocket sslSocket, String hostname, List<Protocol> protocols) {     try {         SSLParameters sslParameters = sslSocket.getSSLParameters().         List<String> names = alpnProtocolNames(protocols).         setProtocolMethod.invoke(sslParameters, new Object[] { names.toArray(new String[names.size()]) }).         sslSocket.setSSLParameters(sslParameters).     } catch (IllegalAccessException | InvocationTargetException e) {         throw new AssertionError("failed to set SSL parameters", e).     } }
false;public;1;16;;@Override @Nullable public String getSelectedProtocol(SSLSocket socket) {     try {         String protocol = (String) getProtocolMethod.invoke(socket).         // be used. Observed if you didn't specify SSLParameters.setApplicationProtocols         if (protocol == null || protocol.equals("")) {             return null.         }         return protocol.     } catch (IllegalAccessException | InvocationTargetException e) {         throw new AssertionError("failed to get ALPN selected protocol", e).     } }
false;public;1;8;;@Override public X509TrustManager trustManager(SSLSocketFactory sslSocketFactory) {     // sun.security.ssl to unnamed module @xxx     throw new UnsupportedOperationException("clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on JDK 9+"). }
false;public,static;0;14;;public static Jdk9Platform buildIfSupported() {     // Find JDK 9 new methods     try {         Method setProtocolMethod = SSLParameters.class.getMethod("setApplicationProtocols", String[].class).         Method getProtocolMethod = SSLSocket.class.getMethod("getApplicationProtocol").         return new Jdk9Platform(setProtocolMethod, getProtocolMethod).     } catch (NoSuchMethodException ignored) {     // pre JDK 9     }     return null. }
