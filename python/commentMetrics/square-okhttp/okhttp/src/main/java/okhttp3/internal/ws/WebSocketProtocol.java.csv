commented;modifiers;parameterAmount;loc;comment;code
false;static;2;11;;static void toggleMask(Buffer.UnsafeCursor cursor, byte[] key) {     int keyIndex = 0.     int keyLength = key.length.     do {         byte[] buffer = cursor.data.         for (int i = cursor.start, end = cursor.end. i < end. i++, keyIndex++) {             // Reassign to prevent overflow breaking counter.             keyIndex %= keyLength.             buffer[i] = (byte) (buffer[i] ^ key[keyIndex]).         }     } while (cursor.next() != -1). }
false;static;1;9;;static String closeCodeExceptionMessage(int code) {     if (code < 1000 || code >= 5000) {         return "Code must be in range [1000,5000): " + code.     } else if ((code >= 1004 && code <= 1006) || (code >= 1012 && code <= 2999)) {         return "Code " + code + " is reserved and may not be used.".     } else {         return null.     } }
false;static;1;4;;static void validateCloseCode(int code) {     String message = closeCodeExceptionMessage(code).     if (message != null)         throw new IllegalArgumentException(message). }
false;public,static;1;3;;public static String acceptHeader(String key) {     return ByteString.encodeUtf8(key + WebSocketProtocol.ACCEPT_MAGIC).sha1().base64(). }
