commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Describes the request that the server intends to push a response for.  *  * @param streamId server-initiated stream ID: an even number.  * @param requestHeaders minimally includes {@code :method}, {@code :scheme}, {@code :authority},  * and {@code :path}.  */ ;/**  * Describes the request that the server intends to push a response for.  *  * @param streamId server-initiated stream ID: an even number.  * @param requestHeaders minimally includes {@code :method}, {@code :scheme}, {@code :authority},  * and {@code :path}.  */ boolean onRequest(int streamId, List<Header> requestHeaders).
true;;3;1;/**  * The response headers corresponding to a pushed request.  When {@code last} is true, there are  * no data frames to follow.  *  * @param streamId server-initiated stream ID: an even number.  * @param responseHeaders minimally includes {@code :status}.  * @param last when true, there is no response data.  */ ;/**  * The response headers corresponding to a pushed request.  When {@code last} is true, there are  * no data frames to follow.  *  * @param streamId server-initiated stream ID: an even number.  * @param responseHeaders minimally includes {@code :status}.  * @param last when true, there is no response data.  */ boolean onHeaders(int streamId, List<Header> responseHeaders, boolean last).
true;;4;2;/**  * A chunk of response data corresponding to a pushed request.  This data must either be read or  * skipped.  *  * @param streamId server-initiated stream ID: an even number.  * @param source location of data corresponding with this stream ID.  * @param byteCount number of bytes to read or skip from the source.  * @param last when true, there are no data frames to follow.  */ ;/**  * A chunk of response data corresponding to a pushed request.  This data must either be read or  * skipped.  *  * @param streamId server-initiated stream ID: an even number.  * @param source location of data corresponding with this stream ID.  * @param byteCount number of bytes to read or skip from the source.  * @param last when true, there are no data frames to follow.  */ boolean onData(int streamId, BufferedSource source, int byteCount, boolean last) throws IOException.
true;;2;1;/**  * Indicates the reason why this stream was canceled.  */ ;/**  * Indicates the reason why this stream was canceled.  */ void onReset(int streamId, ErrorCode errorCode).
false;public;2;3;;@Override public boolean onRequest(int streamId, List<Header> requestHeaders) {     return true. }
false;public;3;3;;@Override public boolean onHeaders(int streamId, List<Header> responseHeaders, boolean last) {     return true. }
false;public;4;5;;@Override public boolean onData(int streamId, BufferedSource source, int byteCount, boolean last) throws IOException {     source.skip(byteCount).     return true. }
false;public;2;2;;@Override public void onReset(int streamId, ErrorCode errorCode) { }
