commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the original request that initiated this web socket.  */ ;/**  * Returns the original request that initiated this web socket.  */ Request request().
true;;0;1;/**  * Returns the size in bytes of all messages enqueued to be transmitted to the server. This  * doesn't include framing overhead. It also doesn't include any bytes buffered by the operating  * system or network intermediaries. This method returns 0 if no messages are waiting  * in the queue. If may return a nonzero value after the web socket has been canceled. this  * indicates that enqueued messages were not transmitted.  */ ;/**  * Returns the size in bytes of all messages enqueued to be transmitted to the server. This  * doesn't include framing overhead. It also doesn't include any bytes buffered by the operating  * system or network intermediaries. This method returns 0 if no messages are waiting  * in the queue. If may return a nonzero value after the web socket has been canceled. this  * indicates that enqueued messages were not transmitted.  */ long queueSize().
true;;1;1;/**  * Attempts to enqueue {@code text} to be UTF-8 encoded and sent as a the data of a text (type  * {@code 0x1}) message.  *  * <p>This method returns true if the message was enqueued. Messages that would overflow the  * outgoing message buffer will be rejected and trigger a {@linkplain #close graceful shutdown} of  * this web socket. This method returns false in that case, and in any other case where this  * web socket is closing, closed, or canceled.  *  * <p>This method returns immediately.  */ ;/**  * Attempts to enqueue {@code text} to be UTF-8 encoded and sent as a the data of a text (type  * {@code 0x1}) message.  *  * <p>This method returns true if the message was enqueued. Messages that would overflow the  * outgoing message buffer will be rejected and trigger a {@linkplain #close graceful shutdown} of  * this web socket. This method returns false in that case, and in any other case where this  * web socket is closing, closed, or canceled.  *  * <p>This method returns immediately.  */ boolean send(String text).
true;;1;1;/**  * Attempts to enqueue {@code bytes} to be sent as a the data of a binary (type {@code 0x2})  * message.  *  * <p>This method returns true if the message was enqueued. Messages that would overflow the  * outgoing message buffer (16 MiB) will be rejected and trigger a  * {@linkplain #close graceful shutdown} of this web socket. This method returns false in that  * case, and in any other case where this web socket is closing, closed, or canceled.  *  * <p>This method returns immediately.  */ ;/**  * Attempts to enqueue {@code bytes} to be sent as a the data of a binary (type {@code 0x2})  * message.  *  * <p>This method returns true if the message was enqueued. Messages that would overflow the  * outgoing message buffer (16 MiB) will be rejected and trigger a  * {@linkplain #close graceful shutdown} of this web socket. This method returns false in that  * case, and in any other case where this web socket is closing, closed, or canceled.  *  * <p>This method returns immediately.  */ boolean send(ByteString bytes).
true;;2;1;/**  * Attempts to initiate a graceful shutdown of this web socket. Any already-enqueued messages will  * be transmitted before the close message is sent but subsequent calls to {@link #send} will  * return false and their messages will not be enqueued.  *  * <p>This returns true if a graceful shutdown was initiated by this call. It returns false if  * a graceful shutdown was already underway or if the web socket is already closed or canceled.  *  * @param code Status code as defined by <a  * href="http://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4 of RFC 6455</a>.  * @param reason Reason for shutting down or {@code null}.  * @throws IllegalArgumentException if code is invalid.  */ ;/**  * Attempts to initiate a graceful shutdown of this web socket. Any already-enqueued messages will  * be transmitted before the close message is sent but subsequent calls to {@link #send} will  * return false and their messages will not be enqueued.  *  * <p>This returns true if a graceful shutdown was initiated by this call. It returns false if  * a graceful shutdown was already underway or if the web socket is already closed or canceled.  *  * @param code Status code as defined by <a  * href="http://tools.ietf.org/html/rfc6455#section-7.4">Section 7.4 of RFC 6455</a>.  * @param reason Reason for shutting down or {@code null}.  * @throws IllegalArgumentException if code is invalid.  */ boolean close(int code, @Nullable String reason).
true;;0;1;/**  * Immediately and violently release resources held by this web socket, discarding any enqueued  * messages. This does nothing if the web socket has already been closed or canceled.  */ ;/**  * Immediately and violently release resources held by this web socket, discarding any enqueued  * messages. This does nothing if the web socket has already been closed or canceled.  */ void cancel().
true;;2;1;/**  * Creates a new web socket and immediately returns it. Creating a web socket initiates an  * asynchronous process to connect the socket. Once that succeeds or fails, {@code listener}  * will be notified. The caller must either close or cancel the returned web socket when it is  * no longer in use.  */ ;/**  * Creates a new web socket and immediately returns it. Creating a web socket initiates an  * asynchronous process to connect the socket. Once that succeeds or fails, {@code listener}  * will be notified. The caller must either close or cancel the returned web socket when it is  * no longer in use.  */ WebSocket newWebSocket(Request request, WebSocketListener listener).
