commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;47;/**  * Returns a media type for {@code string}.  *  * @throws IllegalArgumentException if {@code string} is not a well-formed media type.  */ ;/**  * Returns a media type for {@code string}.  *  * @throws IllegalArgumentException if {@code string} is not a well-formed media type.  */ public static MediaType get(String string) {     Matcher typeSubtype = TYPE_SUBTYPE.matcher(string).     if (!typeSubtype.lookingAt()) {         throw new IllegalArgumentException("No subtype found for: \"" + string + '"').     }     String type = typeSubtype.group(1).toLowerCase(Locale.US).     String subtype = typeSubtype.group(2).toLowerCase(Locale.US).     String charset = null.     Matcher parameter = PARAMETER.matcher(string).     for (int s = typeSubtype.end(). s < string.length(). s = parameter.end()) {         parameter.region(s, string.length()).         if (!parameter.lookingAt()) {             throw new IllegalArgumentException("Parameter is not formatted correctly: \"" + string.substring(s) + "\" for: \"" + string + '"').         }         String name = parameter.group(1).         if (name == null || !name.equalsIgnoreCase("charset"))             continue.         String charsetParameter.         String token = parameter.group(2).         if (token != null) {             // If the token is 'single-quoted' it's invalid! But we're lenient and strip the quotes.             charsetParameter = (token.startsWith("'") && token.endsWith("'") && token.length() > 2) ? token.substring(1, token.length() - 1) : token.         } else {             // Value is "double-quoted". That's valid and our regex group already strips the quotes.             charsetParameter = parameter.group(3).         }         if (charset != null && !charsetParameter.equalsIgnoreCase(charset)) {             throw new IllegalArgumentException("Multiple charsets defined: \"" + charset + "\" and: \"" + charsetParameter + "\" for: \"" + string + '"').         }         charset = charsetParameter.     }     return new MediaType(string, type, subtype, charset). }
true;public,static;1;7;/**  * Returns a media type for {@code string}, or null if {@code string} is not a well-formed media  * type.  */ ;/**  * Returns a media type for {@code string}, or null if {@code string} is not a well-formed media  * type.  */ @Nullable public static MediaType parse(String string) {     try {         return get(string).     } catch (IllegalArgumentException ignored) {         return null.     } }
true;public;0;3;/**  * Returns the high-level media type, such as "text", "image", "audio", "video", or  * "application".  */ ;/**  * Returns the high-level media type, such as "text", "image", "audio", "video", or  * "application".  */ public String type() {     return type. }
true;public;0;3;/**  * Returns a specific media subtype, such as "plain" or "png", "mpeg", "mp4" or "xml".  */ ;/**  * Returns a specific media subtype, such as "plain" or "png", "mpeg", "mp4" or "xml".  */ public String subtype() {     return subtype. }
true;public;0;3;/**  * Returns the charset of this media type, or null if this media type doesn't specify a charset.  */ ;/**  * Returns the charset of this media type, or null if this media type doesn't specify a charset.  */ @Nullable public Charset charset() {     return charset(null). }
true;public;1;7;/**  * Returns the charset of this media type, or {@code defaultValue} if either this media type  * doesn't specify a charset, of it its charset is unsupported by the current runtime.  */ ;/**  * Returns the charset of this media type, or {@code defaultValue} if either this media type  * doesn't specify a charset, of it its charset is unsupported by the current runtime.  */ @Nullable public Charset charset(@Nullable Charset defaultValue) {     try {         return charset != null ? Charset.forName(charset) : defaultValue.     } catch (IllegalArgumentException e) {         // This charset is invalid or unsupported. Give up.         return defaultValue.     } }
true;public;0;3;/**  * Returns the encoded media type, like "text/plain. charset=utf-8", appropriate for use in a  * Content-Type header.  */ ;/**  * Returns the encoded media type, like "text/plain. charset=utf-8", appropriate for use in a  * Content-Type header.  */ @Override public String toString() {     return mediaType. }
false;public;1;3;;@Override public boolean equals(@Nullable Object other) {     return other instanceof MediaType && ((MediaType) other).mediaType.equals(mediaType). }
false;public;0;3;;@Override public int hashCode() {     return mediaType.hashCode(). }
