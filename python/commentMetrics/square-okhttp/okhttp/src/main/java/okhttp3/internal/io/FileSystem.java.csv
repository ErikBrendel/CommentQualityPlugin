commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;@Override public Source source(File file) throws FileNotFoundException {     return Okio.source(file). }
false;public;1;9;;@Override public Sink sink(File file) throws FileNotFoundException {     try {         return Okio.sink(file).     } catch (FileNotFoundException e) {         // Maybe the parent directory doesn't exist? Try creating it first.         file.getParentFile().mkdirs().         return Okio.sink(file).     } }
false;public;1;9;;@Override public Sink appendingSink(File file) throws FileNotFoundException {     try {         return Okio.appendingSink(file).     } catch (FileNotFoundException e) {         // Maybe the parent directory doesn't exist? Try creating it first.         file.getParentFile().mkdirs().         return Okio.appendingSink(file).     } }
false;public;1;6;;@Override public void delete(File file) throws IOException {     // If delete() fails, make sure it's because the file didn't exist!     if (!file.delete() && file.exists()) {         throw new IOException("failed to delete " + file).     } }
false;public;1;3;;@Override public boolean exists(File file) {     return file.exists(). }
false;public;1;3;;@Override public long size(File file) {     return file.length(). }
false;public;2;6;;@Override public void rename(File from, File to) throws IOException {     delete(to).     if (!from.renameTo(to)) {         throw new IOException("failed to rename " + from + " to " + to).     } }
false;public;1;14;;@Override public void deleteContents(File directory) throws IOException {     File[] files = directory.listFiles().     if (files == null) {         throw new IOException("not a readable directory: " + directory).     }     for (File file : files) {         if (file.isDirectory()) {             deleteContents(file).         }         if (!file.delete()) {             throw new IOException("failed to delete " + file).         }     } }
true;;1;1;/**  * Reads from {@code file}.  */ ;/**  * Reads from {@code file}.  */ Source source(File file) throws FileNotFoundException.
true;;1;1;/**  * Writes to {@code file}, discarding any data already present. Creates parent directories if  * necessary.  */ ;/**  * Writes to {@code file}, discarding any data already present. Creates parent directories if  * necessary.  */ Sink sink(File file) throws FileNotFoundException.
true;;1;1;/**  * Writes to {@code file}, appending if data is already present. Creates parent directories if  * necessary.  */ ;/**  * Writes to {@code file}, appending if data is already present. Creates parent directories if  * necessary.  */ Sink appendingSink(File file) throws FileNotFoundException.
true;;1;1;/**  * Deletes {@code file} if it exists. Throws if the file exists and cannot be deleted.  */ ;/**  * Deletes {@code file} if it exists. Throws if the file exists and cannot be deleted.  */ void delete(File file) throws IOException.
true;;1;1;/**  * Returns true if {@code file} exists on the file system.  */ ;/**  * Returns true if {@code file} exists on the file system.  */ boolean exists(File file).
true;;1;1;/**  * Returns the number of bytes stored in {@code file}, or 0 if it does not exist.  */ ;/**  * Returns the number of bytes stored in {@code file}, or 0 if it does not exist.  */ long size(File file).
true;;2;1;/**  * Renames {@code from} to {@code to}. Throws if the file cannot be renamed.  */ ;/**  * Renames {@code from} to {@code to}. Throws if the file cannot be renamed.  */ void rename(File from, File to) throws IOException.
true;;1;1;/**  * Recursively delete the contents of {@code directory}. Throws an IOException if any file could  * not be deleted, or if {@code dir} is not a readable directory.  */ ;/**  * Recursively delete the contents of {@code directory}. Throws an IOException if any file could  * not be deleted, or if {@code dir} is not a readable directory.  */ void deleteContents(File directory) throws IOException.
