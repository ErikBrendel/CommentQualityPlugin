commented;modifiers;parameterAmount;loc;comment;code
true;public;1;6;/**  * Returns a copy of this charset that expects a credential encoded with {@code charset}.  */ ;/**  * Returns a copy of this charset that expects a credential encoded with {@code charset}.  */ public Challenge withCharset(Charset charset) {     if (charset == null)         throw new NullPointerException("charset == null").     Map<String, String> authParams = new LinkedHashMap<>(this.authParams).     authParams.put("charset", charset.name()).     return new Challenge(scheme, authParams). }
true;public;0;3;/**  * Returns the authentication scheme, like {@code Basic}.  */ ;/**  * Returns the authentication scheme, like {@code Basic}.  */ public String scheme() {     return scheme. }
true;public;0;3;/**  * Returns the auth params, including {@code realm} and {@code charset} if present, but as  * strings. The map's keys are lowercase and should be treated case-insensitively.  */ ;/**  * Returns the auth params, including {@code realm} and {@code charset} if present, but as  * strings. The map's keys are lowercase and should be treated case-insensitively.  */ public Map<String, String> authParams() {     return authParams. }
true;public;0;3;/**  * Returns the protection space.  */ ;/**  * Returns the protection space.  */ public String realm() {     return authParams.get("realm"). }
true;public;0;10;/**  * Returns the charset that should be used to encode the credentials.  */ ;/**  * Returns the charset that should be used to encode the credentials.  */ public Charset charset() {     String charset = authParams.get("charset").     if (charset != null) {         try {             return Charset.forName(charset).         } catch (Exception ignore) {         }     }     return ISO_8859_1. }
false;public;1;5;;@Override public boolean equals(@Nullable Object other) {     return other instanceof Challenge && ((Challenge) other).scheme.equals(scheme) && ((Challenge) other).authParams.equals(authParams). }
false;public;0;6;;@Override public int hashCode() {     int result = 29.     result = 31 * result + scheme.hashCode().     result = 31 * result + authParams.hashCode().     return result. }
false;public;0;3;;@Override public String toString() {     return scheme + " authParams=" + authParams. }
