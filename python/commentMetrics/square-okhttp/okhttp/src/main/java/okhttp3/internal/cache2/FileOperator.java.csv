commented;modifiers;parameterAmount;loc;comment;code
true;public;3;9;/**  * Write {@code byteCount} bytes from {@code source} to the file at {@code pos}.  */ ;/**  * Write {@code byteCount} bytes from {@code source} to the file at {@code pos}.  */ public void write(long pos, Buffer source, long byteCount) throws IOException {     if (byteCount < 0 || byteCount > source.size())         throw new IndexOutOfBoundsException().     while (byteCount > 0L) {         long bytesWritten = fileChannel.transferFrom(source, pos, byteCount).         pos += bytesWritten.         byteCount -= bytesWritten.     } }
true;public;3;9;/**  * Copy {@code byteCount} bytes from the file at {@code pos} into to {@code source}. It is the  * caller's responsibility to make sure there are sufficient bytes to read: if there aren't this  * method throws an {@link EOFException}.  */ ;/**  * Copy {@code byteCount} bytes from the file at {@code pos} into to {@code source}. It is the  * caller's responsibility to make sure there are sufficient bytes to read: if there aren't this  * method throws an {@link EOFException}.  */ public void read(long pos, Buffer sink, long byteCount) throws IOException {     if (byteCount < 0)         throw new IndexOutOfBoundsException().     while (byteCount > 0L) {         long bytesRead = fileChannel.transferTo(pos, byteCount, sink).         pos += bytesRead.         byteCount -= bytesRead.     } }
