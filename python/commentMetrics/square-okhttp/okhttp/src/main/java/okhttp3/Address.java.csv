commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns a URL with the hostname and port of the origin server. The path, query, and fragment of  * this URL are always empty, since they are not significant for planning a route.  */ ;/**  * Returns a URL with the hostname and port of the origin server. The path, query, and fragment of  * this URL are always empty, since they are not significant for planning a route.  */ public HttpUrl url() {     return url. }
true;public;0;3;/**  * Returns the service that will be used to resolve IP addresses for hostnames.  */ ;/**  * Returns the service that will be used to resolve IP addresses for hostnames.  */ public Dns dns() {     return dns. }
true;public;0;3;/**  * Returns the socket factory for new connections.  */ ;/**  * Returns the socket factory for new connections.  */ public SocketFactory socketFactory() {     return socketFactory. }
true;public;0;3;/**  * Returns the client's proxy authenticator.  */ ;/**  * Returns the client's proxy authenticator.  */ public Authenticator proxyAuthenticator() {     return proxyAuthenticator. }
true;public;0;3;/**  * Returns the protocols the client supports. This method always returns a non-null list that  * contains minimally {@link Protocol#HTTP_1_1}.  */ ;/**  * Returns the protocols the client supports. This method always returns a non-null list that  * contains minimally {@link Protocol#HTTP_1_1}.  */ public List<Protocol> protocols() {     return protocols. }
false;public;0;3;;public List<ConnectionSpec> connectionSpecs() {     return connectionSpecs. }
true;public;0;3;/**  * Returns this address's proxy selector. Only used if the proxy is null. If none of this  * selector's proxies are reachable, a direct connection will be attempted.  */ ;/**  * Returns this address's proxy selector. Only used if the proxy is null. If none of this  * selector's proxies are reachable, a direct connection will be attempted.  */ public ProxySelector proxySelector() {     return proxySelector. }
true;public;0;3;/**  * Returns this address's explicitly-specified HTTP proxy, or null to delegate to the {@linkplain  * #proxySelector proxy selector}.  */ ;/**  * Returns this address's explicitly-specified HTTP proxy, or null to delegate to the {@linkplain  * #proxySelector proxy selector}.  */ @Nullable public Proxy proxy() {     return proxy. }
true;public;0;3;/**  * Returns the SSL socket factory, or null if this is not an HTTPS address.  */ ;/**  * Returns the SSL socket factory, or null if this is not an HTTPS address.  */ @Nullable public SSLSocketFactory sslSocketFactory() {     return sslSocketFactory. }
true;public;0;3;/**  * Returns the hostname verifier, or null if this is not an HTTPS address.  */ ;/**  * Returns the hostname verifier, or null if this is not an HTTPS address.  */ @Nullable public HostnameVerifier hostnameVerifier() {     return hostnameVerifier. }
true;public;0;3;/**  * Returns this address's certificate pinner, or null if this is not an HTTPS address.  */ ;/**  * Returns this address's certificate pinner, or null if this is not an HTTPS address.  */ @Nullable public CertificatePinner certificatePinner() {     return certificatePinner. }
false;public;1;5;;@Override public boolean equals(@Nullable Object other) {     return other instanceof Address && url.equals(((Address) other).url) && equalsNonHost((Address) other). }
false;public;0;14;;@Override public int hashCode() {     int result = 17.     result = 31 * result + url.hashCode().     result = 31 * result + dns.hashCode().     result = 31 * result + proxyAuthenticator.hashCode().     result = 31 * result + protocols.hashCode().     result = 31 * result + connectionSpecs.hashCode().     result = 31 * result + proxySelector.hashCode().     result = 31 * result + Objects.hashCode(proxy).     result = 31 * result + Objects.hashCode(sslSocketFactory).     result = 31 * result + Objects.hashCode(hostnameVerifier).     result = 31 * result + Objects.hashCode(certificatePinner).     return result. }
false;;1;12;;boolean equalsNonHost(Address that) {     return this.dns.equals(that.dns) && this.proxyAuthenticator.equals(that.proxyAuthenticator) && this.protocols.equals(that.protocols) && this.connectionSpecs.equals(that.connectionSpecs) && this.proxySelector.equals(that.proxySelector) && Objects.equals(this.proxy, that.proxy) && Objects.equals(this.sslSocketFactory, that.sslSocketFactory) && Objects.equals(this.hostnameVerifier, that.hostnameVerifier) && Objects.equals(this.certificatePinner, that.certificatePinner) && this.url().port() == that.url().port(). }
false;public;0;14;;@Override public String toString() {     StringBuilder result = new StringBuilder().append("Address{").append(url.host()).append(":").append(url.port()).     if (proxy != null) {         result.append(", proxy=").append(proxy).     } else {         result.append(", proxySelector=").append(proxySelector).     }     result.append("}").     return result.toString(). }
