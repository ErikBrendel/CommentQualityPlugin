commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public boolean verify(String host, SSLSession session) {     try {         Certificate[] certificates = session.getPeerCertificates().         return verify(host, (X509Certificate) certificates[0]).     } catch (SSLException e) {         return false.     } }
false;public;2;5;;public boolean verify(String host, X509Certificate certificate) {     return verifyAsIpAddress(host) ? verifyIpAddress(host, certificate) : verifyHostname(host, certificate). }
true;private;2;9;/**  * Returns true if {@code certificate} matches {@code ipAddress}.  */ ;/**  * Returns true if {@code certificate} matches {@code ipAddress}.  */ private boolean verifyIpAddress(String ipAddress, X509Certificate certificate) {     List<String> altNames = getSubjectAltNames(certificate, ALT_IPA_NAME).     for (int i = 0, size = altNames.size(). i < size. i++) {         if (ipAddress.equalsIgnoreCase(altNames.get(i))) {             return true.         }     }     return false. }
true;private;2;10;/**  * Returns true if {@code certificate} matches {@code hostname}.  */ ;/**  * Returns true if {@code certificate} matches {@code hostname}.  */ private boolean verifyHostname(String hostname, X509Certificate certificate) {     hostname = hostname.toLowerCase(Locale.US).     List<String> altNames = getSubjectAltNames(certificate, ALT_DNS_NAME).     for (String altName : altNames) {         if (verifyHostname(hostname, altName)) {             return true.         }     }     return false. }
false;public,static;1;8;;public static List<String> allSubjectAltNames(X509Certificate certificate) {     List<String> altIpaNames = getSubjectAltNames(certificate, ALT_IPA_NAME).     List<String> altDnsNames = getSubjectAltNames(certificate, ALT_DNS_NAME).     List<String> result = new ArrayList<>(altIpaNames.size() + altDnsNames.size()).     result.addAll(altIpaNames).     result.addAll(altDnsNames).     return result. }
false;private,static;2;28;;private static List<String> getSubjectAltNames(X509Certificate certificate, int type) {     List<String> result = new ArrayList<>().     try {         Collection<?> subjectAltNames = certificate.getSubjectAlternativeNames().         if (subjectAltNames == null) {             return Collections.emptyList().         }         for (Object subjectAltName : subjectAltNames) {             List<?> entry = (List<?>) subjectAltName.             if (entry == null || entry.size() < 2) {                 continue.             }             Integer altNameType = (Integer) entry.get(0).             if (altNameType == null) {                 continue.             }             if (altNameType == type) {                 String altName = (String) entry.get(1).                 if (altName != null) {                     result.add(altName).                 }             }         }         return result.     } catch (CertificateParsingException e) {         return Collections.emptyList().     } }
true;public;2;87;/**  * Returns {@code true} iff {@code hostname} matches the domain name {@code pattern}.  *  * @param hostname lower-case host name.  * @param pattern domain name pattern from certificate. May be a wildcard pattern such as {@code  * *.android.com}.  */ ;/**  * Returns {@code true} iff {@code hostname} matches the domain name {@code pattern}.  *  * @param hostname lower-case host name.  * @param pattern domain name pattern from certificate. May be a wildcard pattern such as {@code  * *.android.com}.  */ public boolean verifyHostname(String hostname, String pattern) {     // Check length == 0 instead of .isEmpty() to support Java 5.     if ((hostname == null) || (hostname.length() == 0) || (hostname.startsWith(".")) || (hostname.endsWith(".."))) {         // Invalid domain name         return false.     }     if ((pattern == null) || (pattern.length() == 0) || (pattern.startsWith(".")) || (pattern.endsWith(".."))) {         // Invalid pattern/domain name         return false.     }     // www.android.com. matches www.android.com     if (!hostname.endsWith(".")) {         hostname += '.'.     }     if (!pattern.endsWith(".")) {         pattern += '.'.     }     // hostname and pattern are now absolute domain names.     pattern = pattern.toLowerCase(Locale.US).     if (!pattern.contains("*")) {         // Not a wildcard pattern -- hostname and pattern must match exactly.         return hostname.equals(pattern).     }     if ((!pattern.startsWith("*.")) || (pattern.indexOf('*', 1) != -1)) {         // character in that label         return false.     }     // hostname starts with a non-empty label. Thus, asterisk has to match one or more characters.     if (hostname.length() < pattern.length()) {         // hostname too short to match the pattern.         return false.     }     if ("*.".equals(pattern)) {         // Wildcard pattern for single-label domain name -- not permitted.         return false.     }     // hostname must end with the region of pattern following the asterisk.     String suffix = pattern.substring(1).     if (!hostname.endsWith(suffix)) {         // hostname does not end with the suffix         return false.     }     // Check that asterisk did not match across domain name labels.     int suffixStartIndexInHostname = hostname.length() - suffix.length().     if ((suffixStartIndexInHostname > 0) && (hostname.lastIndexOf('.', suffixStartIndexInHostname - 1) != -1)) {         // Asterisk is matching across domain name labels -- not permitted.         return false.     }     // hostname matches pattern     return true. }
