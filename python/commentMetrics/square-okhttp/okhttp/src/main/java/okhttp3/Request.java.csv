commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public HttpUrl url() {     return url. }
false;public;0;3;;public String method() {     return method. }
false;public;0;3;;public Headers headers() {     return headers. }
false;public;1;3;;@Nullable public String header(String name) {     return headers.get(name). }
false;public;1;3;;public List<String> headers(String name) {     return headers.values(name). }
false;public;0;3;;@Nullable public RequestBody body() {     return body. }
true;public;0;3;/**  * Returns the tag attached with {@code Object.class} as a key, or null if no tag is attached with  * that key.  *  * <p>Prior to OkHttp 3.11, this method never returned null if no tag was attached. Instead it  * returned either this request, or the request upon which this request was derived with {@link  * #newBuilder()}.  */ ;/**  * Returns the tag attached with {@code Object.class} as a key, or null if no tag is attached with  * that key.  *  * <p>Prior to OkHttp 3.11, this method never returned null if no tag was attached. Instead it  * returned either this request, or the request upon which this request was derived with {@link  * #newBuilder()}.  */ @Nullable public Object tag() {     return tag(Object.class). }
true;public;1;3;/**  * Returns the tag attached with {@code type} as a key, or null if no tag is attached with that  * key.  */ ;/**  * Returns the tag attached with {@code type} as a key, or null if no tag is attached with that  * key.  */ @Nullable public <T> T tag(Class<? extends T> type) {     return type.cast(tags.get(type)). }
false;public;0;3;;public Builder newBuilder() {     return new Builder(this). }
true;public;0;4;/**  * Returns the cache control directives for this response. This is never null, even if this  * response contains no {@code Cache-Control} header.  */ ;/**  * Returns the cache control directives for this response. This is never null, even if this  * response contains no {@code Cache-Control} header.  */ public CacheControl cacheControl() {     CacheControl result = cacheControl.     return result != null ? result : (cacheControl = CacheControl.parse(headers)). }
false;public;0;3;;public boolean isHttps() {     return url.isHttps(). }
false;public;0;9;;@Override public String toString() {     return "Request{method=" + method + ", url=" + url + ", tags=" + tags + '}'. }
false;public;1;5;;public Builder url(HttpUrl url) {     if (url == null)         throw new NullPointerException("url == null").     this.url = url.     return this. }
true;public;1;12;/**  * Sets the URL target of this request.  *  * @throws IllegalArgumentException if {@code url} is not a valid HTTP or HTTPS URL. Avoid this  * exception by calling {@link HttpUrl#parse}. it returns null for invalid URLs.  */ ;/**  * Sets the URL target of this request.  *  * @throws IllegalArgumentException if {@code url} is not a valid HTTP or HTTPS URL. Avoid this  * exception by calling {@link HttpUrl#parse}. it returns null for invalid URLs.  */ public Builder url(String url) {     if (url == null)         throw new NullPointerException("url == null").     // Silently replace web socket URLs with HTTP URLs.     if (url.regionMatches(true, 0, "ws:", 0, 3)) {         url = "http:" + url.substring(3).     } else if (url.regionMatches(true, 0, "wss:", 0, 4)) {         url = "https:" + url.substring(4).     }     return url(HttpUrl.get(url)). }
true;public;1;4;/**  * Sets the URL target of this request.  *  * @throws IllegalArgumentException if the scheme of {@code url} is not {@code http} or {@code  * https}.  */ ;/**  * Sets the URL target of this request.  *  * @throws IllegalArgumentException if the scheme of {@code url} is not {@code http} or {@code  * https}.  */ public Builder url(URL url) {     if (url == null)         throw new NullPointerException("url == null").     return url(HttpUrl.get(url.toString())). }
true;public;2;4;/**  * Sets the header named {@code name} to {@code value}. If this request already has any headers  * with that name, they are all replaced.  */ ;/**  * Sets the header named {@code name} to {@code value}. If this request already has any headers  * with that name, they are all replaced.  */ public Builder header(String name, String value) {     headers.set(name, value).     return this. }
true;public;2;4;/**  * Adds a header with {@code name} and {@code value}. Prefer this method for multiply-valued  * headers like "Cookie".  *  * <p>Note that for some headers including {@code Content-Length} and {@code Content-Encoding},  * OkHttp may replace {@code value} with a header derived from the request body.  */ ;/**  * Adds a header with {@code name} and {@code value}. Prefer this method for multiply-valued  * headers like "Cookie".  *  * <p>Note that for some headers including {@code Content-Length} and {@code Content-Encoding},  * OkHttp may replace {@code value} with a header derived from the request body.  */ public Builder addHeader(String name, String value) {     headers.add(name, value).     return this. }
true;public;1;4;/**  * Removes all headers named {@code name} on this builder.  */ ;/**  * Removes all headers named {@code name} on this builder.  */ public Builder removeHeader(String name) {     headers.removeAll(name).     return this. }
true;public;1;4;/**  * Removes all headers on this builder and adds {@code headers}.  */ ;/**  * Removes all headers on this builder and adds {@code headers}.  */ public Builder headers(Headers headers) {     this.headers = headers.newBuilder().     return this. }
true;public;1;5;/**  * Sets this request's {@code Cache-Control} header, replacing any cache control headers already  * present. If {@code cacheControl} doesn't define any directives, this clears this request's  * cache-control headers.  */ ;/**  * Sets this request's {@code Cache-Control} header, replacing any cache control headers already  * present. If {@code cacheControl} doesn't define any directives, this clears this request's  * cache-control headers.  */ public Builder cacheControl(CacheControl cacheControl) {     String value = cacheControl.toString().     if (value.isEmpty())         return removeHeader("Cache-Control").     return header("Cache-Control", value). }
false;public;0;3;;public Builder get() {     return method("GET", null). }
false;public;0;3;;public Builder head() {     return method("HEAD", null). }
false;public;1;3;;public Builder post(RequestBody body) {     return method("POST", body). }
false;public;1;3;;public Builder delete(@Nullable RequestBody body) {     return method("DELETE", body). }
false;public;0;3;;public Builder delete() {     return delete(Util.EMPTY_REQUEST). }
false;public;1;3;;public Builder put(RequestBody body) {     return method("PUT", body). }
false;public;1;3;;public Builder patch(RequestBody body) {     return method("PATCH", body). }
false;public;2;13;;public Builder method(String method, @Nullable RequestBody body) {     if (method == null)         throw new NullPointerException("method == null").     if (method.length() == 0)         throw new IllegalArgumentException("method.length() == 0").     if (body != null && !HttpMethod.permitsRequestBody(method)) {         throw new IllegalArgumentException("method " + method + " must not have a request body.").     }     if (body == null && HttpMethod.requiresRequestBody(method)) {         throw new IllegalArgumentException("method " + method + " must have a request body.").     }     this.method = method.     this.body = body.     return this. }
true;public;1;3;/**  * Attaches {@code tag} to the request using {@code Object.class} as a key.  */ ;/**  * Attaches {@code tag} to the request using {@code Object.class} as a key.  */ public Builder tag(@Nullable Object tag) {     return tag(Object.class, tag). }
true;public;2;12;/**  * Attaches {@code tag} to the request using {@code type} as a key. Tags can be read from a  * request using {@link Request#tag}. Use null to remove any existing tag assigned for {@code  * type}.  *  * <p>Use this API to attach timing, debugging, or other application data to a request so that  * you may read it in interceptors, event listeners, or callbacks.  */ ;/**  * Attaches {@code tag} to the request using {@code type} as a key. Tags can be read from a  * request using {@link Request#tag}. Use null to remove any existing tag assigned for {@code  * type}.  *  * <p>Use this API to attach timing, debugging, or other application data to a request so that  * you may read it in interceptors, event listeners, or callbacks.  */ public <T> Builder tag(Class<? super T> type, @Nullable T tag) {     if (type == null)         throw new NullPointerException("type == null").     if (tag == null) {         tags.remove(type).     } else {         if (tags.isEmpty())             tags = new LinkedHashMap<>().         tags.put(type, type.cast(tag)).     }     return this. }
false;public;0;4;;public Request build() {     if (url == null)         throw new IllegalStateException("url == null").     return new Request(this). }
