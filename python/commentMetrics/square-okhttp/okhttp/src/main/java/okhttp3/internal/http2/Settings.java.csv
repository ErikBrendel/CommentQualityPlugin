commented;modifiers;parameterAmount;loc;comment;code
false;;0;4;;void clear() {     set = 0.     Arrays.fill(values, 0). }
false;;2;10;;Settings set(int id, int value) {     if (id < 0 || id >= values.length) {         // Discard unknown settings.         return this.     }     int bit = 1 << id.     set |= bit.     values[id] = value.     return this. }
true;;1;4;/**  * Returns true if a value has been assigned for the setting {@code id}.  */ ;/**  * Returns true if a value has been assigned for the setting {@code id}.  */ boolean isSet(int id) {     int bit = 1 << id.     return (set & bit) != 0. }
true;;1;3;/**  * Returns the value for the setting {@code id}, or 0 if unset.  */ ;/**  * Returns the value for the setting {@code id}, or 0 if unset.  */ int get(int id) {     return values[id]. }
true;;0;3;/**  * Returns the number of settings that have values assigned.  */ ;/**  * Returns the number of settings that have values assigned.  */ int size() {     return Integer.bitCount(set). }
true;;0;4;/**  * Returns -1 if unset.  */ ;/**  * Returns -1 if unset.  */ int getHeaderTableSize() {     int bit = 1 << HEADER_TABLE_SIZE.     return (bit & set) != 0 ? values[HEADER_TABLE_SIZE] : -1. }
true;;1;4;// TODO: honor this setting. ;// TODO: honor this setting. boolean getEnablePush(boolean defaultValue) {     int bit = 1 << ENABLE_PUSH.     return ((bit & set) != 0 ? values[ENABLE_PUSH] : defaultValue ? 1 : 0) == 1. }
false;;1;4;;int getMaxConcurrentStreams(int defaultValue) {     int bit = 1 << MAX_CONCURRENT_STREAMS.     return (bit & set) != 0 ? values[MAX_CONCURRENT_STREAMS] : defaultValue. }
false;;1;4;;int getMaxFrameSize(int defaultValue) {     int bit = 1 << MAX_FRAME_SIZE.     return (bit & set) != 0 ? values[MAX_FRAME_SIZE] : defaultValue. }
false;;1;4;;int getMaxHeaderListSize(int defaultValue) {     int bit = 1 << MAX_HEADER_LIST_SIZE.     return (bit & set) != 0 ? values[MAX_HEADER_LIST_SIZE] : defaultValue. }
false;;0;4;;int getInitialWindowSize() {     int bit = 1 << INITIAL_WINDOW_SIZE.     return (bit & set) != 0 ? values[INITIAL_WINDOW_SIZE] : DEFAULT_INITIAL_WINDOW_SIZE. }
true;;1;6;/**  * Writes {@code other} into this. If any setting is populated by this and {@code other}, the  * value and flags from {@code other} will be kept.  */ ;/**  * Writes {@code other} into this. If any setting is populated by this and {@code other}, the  * value and flags from {@code other} will be kept.  */ void merge(Settings other) {     for (int i = 0. i < COUNT. i++) {         if (!other.isSet(i))             continue.         set(i, other.get(i)).     } }
