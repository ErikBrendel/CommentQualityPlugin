commented;modifiers;parameterAmount;loc;comment;code
false;public,abstract;0;1;;@Nullable public abstract MediaType contentType().
true;public,abstract;0;1;/**  * Returns the number of bytes in that will returned by {@link #bytes}, or {@link #byteStream}, or  * -1 if unknown.  */ ;/**  * Returns the number of bytes in that will returned by {@link #bytes}, or {@link #byteStream}, or  * -1 if unknown.  */ public abstract long contentLength().
false;public,final;0;3;;public final InputStream byteStream() {     return source().inputStream(). }
false;public,abstract;0;1;;public abstract BufferedSource source().
true;public,final;0;19;/**  * Returns the response as a byte array.  *  * <p>This method loads entire response body into memory. If the response body is very large this  * may trigger an {@link OutOfMemoryError}. Prefer to stream the response body if this is a  * possibility for your response.  */ ;/**  * Returns the response as a byte array.  *  * <p>This method loads entire response body into memory. If the response body is very large this  * may trigger an {@link OutOfMemoryError}. Prefer to stream the response body if this is a  * possibility for your response.  */ public final byte[] bytes() throws IOException {     long contentLength = contentLength().     if (contentLength > Integer.MAX_VALUE) {         throw new IOException("Cannot buffer entire body for content length: " + contentLength).     }     byte[] bytes.     try (BufferedSource source = source()) {         bytes = source.readByteArray().     }     if (contentLength != -1 && contentLength != bytes.length) {         throw new IOException("Content-Length (" + contentLength + ") and stream length (" + bytes.length + ") disagree").     }     return bytes. }
true;public,final;0;4;/**  * Returns the response as a character stream.  *  * <p>If the response starts with a <a href="https://en.wikipedia.org/wiki/Byte_order_mark">Byte  * Order Mark (BOM)</a>, it is consumed and used to determine the charset of the response bytes.  *  * <p>Otherwise if the response has a Content-Type header that specifies a charset, that is used  * to determine the charset of the response bytes.  *  * <p>Otherwise the response bytes are decoded as UTF-8.  */ ;/**  * Returns the response as a character stream.  *  * <p>If the response starts with a <a href="https://en.wikipedia.org/wiki/Byte_order_mark">Byte  * Order Mark (BOM)</a>, it is consumed and used to determine the charset of the response bytes.  *  * <p>Otherwise if the response has a Content-Type header that specifies a charset, that is used  * to determine the charset of the response bytes.  *  * <p>Otherwise the response bytes are decoded as UTF-8.  */ public final Reader charStream() {     Reader r = reader.     return r != null ? r : (reader = new BomAwareReader(source(), charset())). }
true;public,final;0;6;/**  * Returns the response as a string.  *  * <p>If the response starts with a <a href="https://en.wikipedia.org/wiki/Byte_order_mark">Byte  * Order Mark (BOM)</a>, it is consumed and used to determine the charset of the response bytes.  *  * <p>Otherwise if the response has a Content-Type header that specifies a charset, that is used  * to determine the charset of the response bytes.  *  * <p>Otherwise the response bytes are decoded as UTF-8.  *  * <p>This method loads entire response body into memory. If the response body is very large this  * may trigger an {@link OutOfMemoryError}. Prefer to stream the response body if this is a  * possibility for your response.  */ ;/**  * Returns the response as a string.  *  * <p>If the response starts with a <a href="https://en.wikipedia.org/wiki/Byte_order_mark">Byte  * Order Mark (BOM)</a>, it is consumed and used to determine the charset of the response bytes.  *  * <p>Otherwise if the response has a Content-Type header that specifies a charset, that is used  * to determine the charset of the response bytes.  *  * <p>Otherwise the response bytes are decoded as UTF-8.  *  * <p>This method loads entire response body into memory. If the response body is very large this  * may trigger an {@link OutOfMemoryError}. Prefer to stream the response body if this is a  * possibility for your response.  */ public final String string() throws IOException {     try (BufferedSource source = source()) {         Charset charset = Util.bomAwareCharset(source, charset()).         return source.readString(charset).     } }
false;private;0;4;;private Charset charset() {     MediaType contentType = contentType().     return contentType != null ? contentType.charset(UTF_8) : UTF_8. }
false;public;0;3;;@Override public void close() {     Util.closeQuietly(source()). }
true;public,static;2;12;/**  * Returns a new response body that transmits {@code content}. If {@code contentType} is non-null  * and lacks a charset, this will use UTF-8.  */ ;/**  * Returns a new response body that transmits {@code content}. If {@code contentType} is non-null  * and lacks a charset, this will use UTF-8.  */ public static ResponseBody create(@Nullable MediaType contentType, String content) {     Charset charset = UTF_8.     if (contentType != null) {         charset = contentType.charset().         if (charset == null) {             charset = UTF_8.             contentType = MediaType.parse(contentType + ". charset=utf-8").         }     }     Buffer buffer = new Buffer().writeString(content, charset).     return create(contentType, buffer.size(), buffer). }
true;public,static;2;4;/**  * Returns a new response body that transmits {@code content}.  */ ;/**  * Returns a new response body that transmits {@code content}.  */ public static ResponseBody create(@Nullable final MediaType contentType, byte[] content) {     Buffer buffer = new Buffer().write(content).     return create(contentType, content.length, buffer). }
true;public,static;2;4;/**  * Returns a new response body that transmits {@code content}.  */ ;/**  * Returns a new response body that transmits {@code content}.  */ public static ResponseBody create(@Nullable MediaType contentType, ByteString content) {     Buffer buffer = new Buffer().write(content).     return create(contentType, content.size(), buffer). }
false;public;0;3;;@Override @Nullable public MediaType contentType() {     return contentType. }
false;public;0;3;;@Override public long contentLength() {     return contentLength. }
false;public;0;3;;@Override public BufferedSource source() {     return content. }
true;public,static;3;17;/**  * Returns a new response body that transmits {@code content}.  */ ;/**  * Returns a new response body that transmits {@code content}.  */ public static ResponseBody create(@Nullable final MediaType contentType, final long contentLength, final BufferedSource content) {     if (content == null)         throw new NullPointerException("source == null").     return new ResponseBody() {          @Override         @Nullable         public MediaType contentType() {             return contentType.         }          @Override         public long contentLength() {             return contentLength.         }          @Override         public BufferedSource source() {             return content.         }     }. }
false;public;3;10;;@Override public int read(char[] cbuf, int off, int len) throws IOException {     if (closed)         throw new IOException("Stream closed").     Reader delegate = this.delegate.     if (delegate == null) {         Charset charset = Util.bomAwareCharset(source, this.charset).         delegate = this.delegate = new InputStreamReader(source.inputStream(), charset).     }     return delegate.read(cbuf, off, len). }
false;public;0;8;;@Override public void close() throws IOException {     closed = true.     if (delegate != null) {         delegate.close().     } else {         source.close().     } }
