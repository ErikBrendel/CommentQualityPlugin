commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;10;/**  * Returns the protocol identified by {@code protocol}.  *  * @throws IOException if {@code protocol} is unknown.  */ ;/**  * Returns the protocol identified by {@code protocol}.  *  * @throws IOException if {@code protocol} is unknown.  */ public static Protocol get(String protocol) throws IOException {     // Unroll the loop over values() to save an allocation.     if (protocol.equals(HTTP_1_0.protocol))         return HTTP_1_0.     if (protocol.equals(HTTP_1_1.protocol))         return HTTP_1_1.     if (protocol.equals(H2_PRIOR_KNOWLEDGE.protocol))         return H2_PRIOR_KNOWLEDGE.     if (protocol.equals(HTTP_2.protocol))         return HTTP_2.     if (protocol.equals(SPDY_3.protocol))         return SPDY_3.     if (protocol.equals(QUIC.protocol))         return QUIC.     throw new IOException("Unexpected protocol: " + protocol). }
true;public;0;3;/**  * Returns the string used to identify this protocol for ALPN, like "http/1.1", "spdy/3.1" or  * "h2".  *  * @see <a href="https://www.iana.org/assignments/tls-extensiontype-values">IANA  * tls-extensiontype-values</a>  */ ;/**  * Returns the string used to identify this protocol for ALPN, like "http/1.1", "spdy/3.1" or  * "h2".  *  * @see <a href="https://www.iana.org/assignments/tls-extensiontype-values">IANA  * tls-extensiontype-values</a>  */ @Override public String toString() {     return protocol. }
