commented;modifiers;parameterAmount;loc;comment;code
false;static;1;3;;static EventListener.Factory factory(EventListener listener) {     return call -> listener. }
true;public;1;2;/**  * Invoked as soon as a call is enqueued or executed by a client. In case of thread or stream  * limits, this call may be executed well before processing the request is able to begin.  *  * <p>This will be invoked only once for a single {@link Call}. Retries of different routes  * or redirects will be handled within the boundaries of a single callStart and {@link  * #callEnd}/{@link #callFailed} pair.  */ ;/**  * Invoked as soon as a call is enqueued or executed by a client. In case of thread or stream  * limits, this call may be executed well before processing the request is able to begin.  *  * <p>This will be invoked only once for a single {@link Call}. Retries of different routes  * or redirects will be handled within the boundaries of a single callStart and {@link  * #callEnd}/{@link #callFailed} pair.  */ public void callStart(Call call) { }
true;public;2;2;/**  * Invoked just prior to a DNS lookup. See {@link Dns#lookup(String)}.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different host.  *  * <p>If the {@link Call} is able to reuse an existing pooled connection, this method will not be  * invoked. See {@link ConnectionPool}.  */ ;/**  * Invoked just prior to a DNS lookup. See {@link Dns#lookup(String)}.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different host.  *  * <p>If the {@link Call} is able to reuse an existing pooled connection, this method will not be  * invoked. See {@link ConnectionPool}.  */ public void dnsStart(Call call, String domainName) { }
true;public;3;2;/**  * Invoked immediately after a DNS lookup.  *  * <p>This method is invoked after {@link #dnsStart}.  */ ;/**  * Invoked immediately after a DNS lookup.  *  * <p>This method is invoked after {@link #dnsStart}.  */ public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) { }
true;public;3;2;/**  * Invoked just prior to initiating a socket connection.  *  * <p>This method will be invoked if no existing connection in the {@link ConnectionPool} can be  * reused.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address, or a connection is retried.  */ ;/**  * Invoked just prior to initiating a socket connection.  *  * <p>This method will be invoked if no existing connection in the {@link ConnectionPool} can be  * reused.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address, or a connection is retried.  */ public void connectStart(Call call, InetSocketAddress inetSocketAddress, Proxy proxy) { }
true;public;1;2;/**  * Invoked just prior to initiating a TLS connection.  *  * <p>This method is invoked if the following conditions are met:  * <ul>  * <li>The {@link Call#request()} requires TLS.</li>  * <li>No existing connection from the {@link ConnectionPool} can be reused.</li>  * </ul>  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address, or a connection is retried.  */ ;/**  * Invoked just prior to initiating a TLS connection.  *  * <p>This method is invoked if the following conditions are met:  * <ul>  * <li>The {@link Call#request()} requires TLS.</li>  * <li>No existing connection from the {@link ConnectionPool} can be reused.</li>  * </ul>  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address, or a connection is retried.  */ public void secureConnectStart(Call call) { }
true;public;2;2;/**  * Invoked immediately after a TLS connection was attempted.  *  * <p>This method is invoked after {@link #secureConnectStart}.  */ ;/**  * Invoked immediately after a TLS connection was attempted.  *  * <p>This method is invoked after {@link #secureConnectStart}.  */ public void secureConnectEnd(Call call, @Nullable Handshake handshake) { }
true;public;4;3;/**  * Invoked immediately after a socket connection was attempted.  *  * <p>If the {@code call} uses HTTPS, this will be invoked after  * {@link #secureConnectEnd(Call, Handshake)}, otherwise it will invoked after  * {@link #connectStart(Call, InetSocketAddress, Proxy)}.  */ ;/**  * Invoked immediately after a socket connection was attempted.  *  * <p>If the {@code call} uses HTTPS, this will be invoked after  * {@link #secureConnectEnd(Call, Handshake)}, otherwise it will invoked after  * {@link #connectStart(Call, InetSocketAddress, Proxy)}.  */ public void connectEnd(Call call, InetSocketAddress inetSocketAddress, Proxy proxy, @Nullable Protocol protocol) { }
true;public;5;3;/**  * Invoked when a connection attempt fails. This failure is not terminal if further routes are  * available and failure recovery is enabled.  *  * <p>If the {@code call} uses HTTPS, this will be invoked after {@link #secureConnectEnd(Call,  * Handshake)}, otherwise it will invoked after {@link #connectStart(Call, InetSocketAddress,  * Proxy)}.  */ ;/**  * Invoked when a connection attempt fails. This failure is not terminal if further routes are  * available and failure recovery is enabled.  *  * <p>If the {@code call} uses HTTPS, this will be invoked after {@link #secureConnectEnd(Call,  * Handshake)}, otherwise it will invoked after {@link #connectStart(Call, InetSocketAddress,  * Proxy)}.  */ public void connectFailed(Call call, InetSocketAddress inetSocketAddress, Proxy proxy, @Nullable Protocol protocol, IOException ioe) { }
true;public;2;2;/**  * Invoked after a connection has been acquired for the {@code call}.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address.  */ ;/**  * Invoked after a connection has been acquired for the {@code call}.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address.  */ public void connectionAcquired(Call call, Connection connection) { }
true;public;2;2;/**  * Invoked after a connection has been released for the {@code call}.  *  * <p>This method is always invoked after {@link #connectionAcquired(Call, Connection)}.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address.  */ ;/**  * Invoked after a connection has been released for the {@code call}.  *  * <p>This method is always invoked after {@link #connectionAcquired(Call, Connection)}.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address.  */ public void connectionReleased(Call call, Connection connection) { }
true;public;1;2;/**  * Invoked just prior to sending request headers.  *  * <p>The connection is implicit, and will generally relate to the last  * {@link #connectionAcquired(Call, Connection)} event.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address.  */ ;/**  * Invoked just prior to sending request headers.  *  * <p>The connection is implicit, and will generally relate to the last  * {@link #connectionAcquired(Call, Connection)} event.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address.  */ public void requestHeadersStart(Call call) { }
true;public;2;2;/**  * Invoked immediately after sending request headers.  *  * <p>This method is always invoked after {@link #requestHeadersStart(Call)}.  *  * @param request the request sent over the network. It is an error to access the body of this  *     request.  */ ;/**  * Invoked immediately after sending request headers.  *  * <p>This method is always invoked after {@link #requestHeadersStart(Call)}.  *  * @param request the request sent over the network. It is an error to access the body of this  *     request.  */ public void requestHeadersEnd(Call call, Request request) { }
true;public;1;2;/**  * Invoked just prior to sending a request body.  Will only be invoked for request allowing and  * having a request body to send.  *  * <p>The connection is implicit, and will generally relate to the last  * {@link #connectionAcquired(Call, Connection)} event.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address.  */ ;/**  * Invoked just prior to sending a request body.  Will only be invoked for request allowing and  * having a request body to send.  *  * <p>The connection is implicit, and will generally relate to the last  * {@link #connectionAcquired(Call, Connection)} event.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address.  */ public void requestBodyStart(Call call) { }
true;public;2;2;/**  * Invoked immediately after sending a request body.  *  * <p>This method is always invoked after {@link #requestBodyStart(Call)}.  */ ;/**  * Invoked immediately after sending a request body.  *  * <p>This method is always invoked after {@link #requestBodyStart(Call)}.  */ public void requestBodyEnd(Call call, long byteCount) { }
true;public;2;2;/**  * Invoked when a request fails to be written.  *  * <p>This method is invoked after {@link #requestHeadersStart} or {@link #requestBodyStart}. Note  * that request failures do not necessarily fail the entire call.  */ ;/**  * Invoked when a request fails to be written.  *  * <p>This method is invoked after {@link #requestHeadersStart} or {@link #requestBodyStart}. Note  * that request failures do not necessarily fail the entire call.  */ public void requestFailed(Call call, IOException ioe) { }
true;public;1;2;/**  * Invoked just prior to receiving response headers.  *  * <p>The connection is implicit, and will generally relate to the last  * {@link #connectionAcquired(Call, Connection)} event.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address.  */ ;/**  * Invoked just prior to receiving response headers.  *  * <p>The connection is implicit, and will generally relate to the last  * {@link #connectionAcquired(Call, Connection)} event.  *  * <p>This can be invoked more than 1 time for a single {@link Call}. For example, if the response  * to the {@link Call#request()} is a redirect to a different address.  */ public void responseHeadersStart(Call call) { }
true;public;2;2;/**  * Invoked immediately after receiving response headers.  *  * <p>This method is always invoked after {@link #responseHeadersStart}.  *  * @param response the response received over the network. It is an error to access the body of  *     this response.  */ ;/**  * Invoked immediately after receiving response headers.  *  * <p>This method is always invoked after {@link #responseHeadersStart}.  *  * @param response the response received over the network. It is an error to access the body of  *     this response.  */ public void responseHeadersEnd(Call call, Response response) { }
true;public;1;2;/**  * Invoked just prior to receiving the response body.  *  * <p>The connection is implicit, and will generally relate to the last  * {@link #connectionAcquired(Call, Connection)} event.  *  * <p>This will usually be invoked only 1 time for a single {@link Call},  * exceptions are a limited set of cases including failure recovery.  */ ;/**  * Invoked just prior to receiving the response body.  *  * <p>The connection is implicit, and will generally relate to the last  * {@link #connectionAcquired(Call, Connection)} event.  *  * <p>This will usually be invoked only 1 time for a single {@link Call},  * exceptions are a limited set of cases including failure recovery.  */ public void responseBodyStart(Call call) { }
true;public;2;2;/**  * Invoked immediately after receiving a response body and completing reading it.  *  * <p>Will only be invoked for requests having a response body e.g. won't be invoked for a  * websocket upgrade.  *  * <p>This method is always invoked after {@link #requestBodyStart(Call)}.  */ ;/**  * Invoked immediately after receiving a response body and completing reading it.  *  * <p>Will only be invoked for requests having a response body e.g. won't be invoked for a  * websocket upgrade.  *  * <p>This method is always invoked after {@link #requestBodyStart(Call)}.  */ public void responseBodyEnd(Call call, long byteCount) { }
true;public;2;2;/**  * Invoked when a response fails to be read.  *  * <p>This method is invoked after {@link #responseHeadersStart} or {@link #responseBodyStart}.  * Note that response failures do not necessarily fail the entire call.  */ ;/**  * Invoked when a response fails to be read.  *  * <p>This method is invoked after {@link #responseHeadersStart} or {@link #responseBodyStart}.  * Note that response failures do not necessarily fail the entire call.  */ public void responseFailed(Call call, IOException ioe) { }
true;public;1;2;/**  * Invoked immediately after a call has completely ended.  This includes delayed consumption  * of response body by the caller.  *  * <p>This method is always invoked after {@link #callStart(Call)}.  */ ;/**  * Invoked immediately after a call has completely ended.  This includes delayed consumption  * of response body by the caller.  *  * <p>This method is always invoked after {@link #callStart(Call)}.  */ public void callEnd(Call call) { }
true;public;2;2;/**  * Invoked when a call fails permanently.  *  * <p>This method is always invoked after {@link #callStart(Call)}.  */ ;/**  * Invoked when a call fails permanently.  *  * <p>This method is always invoked after {@link #callStart(Call)}.  */ public void callFailed(Call call, IOException ioe) { }
true;;1;1;/**  * Creates an instance of the {@link EventListener} for a particular {@link Call}. The returned  * {@link EventListener} instance will be used during the lifecycle of the {@code call}.  *  * <p>This method is invoked after the {@code call} is created. See  * {@link OkHttpClient#newCall(Request)}.  *  * <p><strong>It is an error for implementations to issue any mutating operations on the  * {@code call} instance from this method.</strong>  */ ;/**  * Creates an instance of the {@link EventListener} for a particular {@link Call}. The returned  * {@link EventListener} instance will be used during the lifecycle of the {@code call}.  *  * <p>This method is invoked after the {@code call} is created. See  * {@link OkHttpClient#newCall(Request)}.  *  * <p><strong>It is an error for implementations to issue any mutating operations on the  * {@code call} instance from this method.</strong>  */ EventListener create(Call call).
