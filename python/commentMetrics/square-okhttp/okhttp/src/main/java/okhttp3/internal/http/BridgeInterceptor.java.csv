commented;modifiers;parameterAmount;loc;comment;code
false;public;1;68;;@Override public Response intercept(Chain chain) throws IOException {     Request userRequest = chain.request().     Request.Builder requestBuilder = userRequest.newBuilder().     RequestBody body = userRequest.body().     if (body != null) {         MediaType contentType = body.contentType().         if (contentType != null) {             requestBuilder.header("Content-Type", contentType.toString()).         }         long contentLength = body.contentLength().         if (contentLength != -1) {             requestBuilder.header("Content-Length", Long.toString(contentLength)).             requestBuilder.removeHeader("Transfer-Encoding").         } else {             requestBuilder.header("Transfer-Encoding", "chunked").             requestBuilder.removeHeader("Content-Length").         }     }     if (userRequest.header("Host") == null) {         requestBuilder.header("Host", hostHeader(userRequest.url(), false)).     }     if (userRequest.header("Connection") == null) {         requestBuilder.header("Connection", "Keep-Alive").     }     // If we add an "Accept-Encoding: gzip" header field we're responsible for also decompressing     // the transfer stream.     boolean transparentGzip = false.     if (userRequest.header("Accept-Encoding") == null && userRequest.header("Range") == null) {         transparentGzip = true.         requestBuilder.header("Accept-Encoding", "gzip").     }     List<Cookie> cookies = cookieJar.loadForRequest(userRequest.url()).     if (!cookies.isEmpty()) {         requestBuilder.header("Cookie", cookieHeader(cookies)).     }     if (userRequest.header("User-Agent") == null) {         requestBuilder.header("User-Agent", Version.userAgent()).     }     Response networkResponse = chain.proceed(requestBuilder.build()).     HttpHeaders.receiveHeaders(cookieJar, userRequest.url(), networkResponse.headers()).     Response.Builder responseBuilder = networkResponse.newBuilder().request(userRequest).     if (transparentGzip && "gzip".equalsIgnoreCase(networkResponse.header("Content-Encoding")) && HttpHeaders.hasBody(networkResponse)) {         GzipSource responseBody = new GzipSource(networkResponse.body().source()).         Headers strippedHeaders = networkResponse.headers().newBuilder().removeAll("Content-Encoding").removeAll("Content-Length").build().         responseBuilder.headers(strippedHeaders).         String contentType = networkResponse.header("Content-Type").         responseBuilder.body(new RealResponseBody(contentType, -1L, Okio.buffer(responseBody))).     }     return responseBuilder.build(). }
true;private;1;11;/**  * Returns a 'Cookie' HTTP request header with all cookies, like {@code a=b. c=d}.  */ ;/**  * Returns a 'Cookie' HTTP request header with all cookies, like {@code a=b. c=d}.  */ private String cookieHeader(List<Cookie> cookies) {     StringBuilder cookieHeader = new StringBuilder().     for (int i = 0, size = cookies.size(). i < size. i++) {         if (i > 0) {             cookieHeader.append(". ").         }         Cookie cookie = cookies.get(i).         cookieHeader.append(cookie.name()).append('=').append(cookie.value()).     }     return cookieHeader.toString(). }
