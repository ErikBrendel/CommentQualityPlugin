commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;36;;private static Request transformRequest(HttpRequest request) {     Request.Builder builder = new Request.Builder().     RequestLine requestLine = request.getRequestLine().     String method = requestLine.getMethod().     builder.url(requestLine.getUri()).     String contentType = null.     for (Header header : request.getAllHeaders()) {         String name = header.getName().         if ("Content-Type".equalsIgnoreCase(name)) {             contentType = header.getValue().         } else {             builder.header(name, header.getValue()).         }     }     RequestBody body = null.     if (request instanceof HttpEntityEnclosingRequest) {         HttpEntity entity = ((HttpEntityEnclosingRequest) request).getEntity().         if (entity != null) {             // Wrap the entity in a custom Body which takes care of the content, length, and type.             body = new HttpEntityBody(entity, contentType).             Header encoding = entity.getContentEncoding().             if (encoding != null) {                 builder.header(encoding.getName(), encoding.getValue()).             }         } else {             body = Util.EMPTY_REQUEST.         }     }     builder.method(method, body).     return builder.build(). }
false;private,static;1;23;;private static HttpResponse transformResponse(Response response) {     int code = response.code().     String message = response.message().     BasicHttpResponse httpResponse = new BasicHttpResponse(HTTP_1_1, code, message).     ResponseBody body = response.body().     InputStreamEntity entity = new InputStreamEntity(body.byteStream(), body.contentLength()).     httpResponse.setEntity(entity).     Headers headers = response.headers().     for (int i = 0, size = headers.size(). i < size. i++) {         String name = headers.name(i).         String value = headers.value(i).         httpResponse.addHeader(name, value).         if ("Content-Type".equalsIgnoreCase(name)) {             entity.setContentType(value).         } else if ("Content-Encoding".equalsIgnoreCase(name)) {             entity.setContentEncoding(value).         }     }     return httpResponse. }
false;public;1;11;;@Override public Object getParameter(String name) {     if (name.equals(ConnRouteParams.DEFAULT_PROXY)) {         Proxy proxy = client.proxy().         if (proxy == null) {             return null.         }         InetSocketAddress address = (InetSocketAddress) proxy.address().         return new HttpHost(address.getHostName(), address.getPort()).     }     throw new IllegalArgumentException(name). }
false;public;2;14;;@Override public HttpParams setParameter(String name, Object value) {     if (name.equals(ConnRouteParams.DEFAULT_PROXY)) {         HttpHost host = (HttpHost) value.         Proxy proxy = null.         if (host != null) {             proxy = new Proxy(HTTP, new InetSocketAddress(host.getHostName(), host.getPort())).         }         client = client.newBuilder().proxy(proxy).build().         return this.     }     throw new IllegalArgumentException(name). }
false;public;0;3;;@Override public HttpParams copy() {     throw new UnsupportedOperationException(). }
false;public;1;3;;@Override public boolean removeParameter(String name) {     throw new UnsupportedOperationException(). }
false;public;0;3;;@Override public HttpParams getParams() {     return params. }
false;public;0;3;;@Override public ClientConnectionManager getConnectionManager() {     throw new UnsupportedOperationException(). }
false;public;1;3;;@Override public HttpResponse execute(HttpUriRequest request) throws IOException {     return execute(null, request, (HttpContext) null). }
false;public;2;4;;@Override public HttpResponse execute(HttpUriRequest request, HttpContext context) throws IOException {     return execute(null, request, context). }
false;public;2;3;;@Override public HttpResponse execute(HttpHost host, HttpRequest request) throws IOException {     return execute(host, request, (HttpContext) null). }
false;public;3;6;;@Override public HttpResponse execute(HttpHost host, HttpRequest request, HttpContext context) throws IOException {     Request okRequest = transformRequest(request).     Response okResponse = client.newCall(okRequest).execute().     return transformResponse(okResponse). }
false;public;2;4;;@Override public <T> T execute(HttpUriRequest request, ResponseHandler<? extends T> handler) throws IOException {     return execute(null, request, handler, null). }
false;public;3;4;;@Override public <T> T execute(HttpUriRequest request, ResponseHandler<? extends T> handler, HttpContext context) throws IOException {     return execute(null, request, handler, context). }
false;public;3;4;;@Override public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler) throws IOException {     return execute(host, request, handler, null). }
false;public;4;9;;@Override public <T> T execute(HttpHost host, HttpRequest request, ResponseHandler<? extends T> handler, HttpContext context) throws IOException {     HttpResponse response = execute(host, request, context).     try {         return handler.handleResponse(response).     } finally {         consumeContentQuietly(response).     } }
false;private,static;1;6;;private static void consumeContentQuietly(HttpResponse response) {     try {         response.getEntity().consumeContent().     } catch (Throwable ignored) {     } }
