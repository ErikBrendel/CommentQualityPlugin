commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public void open(String accessToken) throws IOException {     if (webSocket != null)         throw new IllegalStateException().     RtmStartResponse rtmStartResponse = slackApi.rtmStart(accessToken).     webSocket = slackApi.rtm(rtmStartResponse.url, this). }
true;public,synchronized;2;3;// the body from slack is a 0-byte-buffer ;// TODO(jwilson): can I read the response body? Do I have to? // the body from slack is a 0-byte-buffer @Override public synchronized void onOpen(WebSocket webSocket, Response response) {     System.out.println("onOpen: " + response). }
true;public;2;3;// TOOD(jwilson): decode incoming messages and dispatch them somewhere. ;// TOOD(jwilson): decode incoming messages and dispatch them somewhere. @Override public void onMessage(WebSocket webSocket, String text) {     System.out.println("onMessage: " + text). }
false;public;3;4;;@Override public void onClosing(WebSocket webSocket, int code, String reason) {     webSocket.close(1000, null).     System.out.println("onClose (" + code + "): " + reason). }
false;public;3;4;;@Override public void onFailure(WebSocket webSocket, Throwable t, Response response) {     // TODO(jwilson): can I read the response body? Do I have to?     System.out.println("onFailure " + response). }
false;public;0;12;;@Override public void close() throws IOException {     if (webSocket == null)         return.     WebSocket webSocket.     synchronized (this) {         webSocket = this.webSocket.     }     if (webSocket != null) {         webSocket.close(1000, "bye").     } }
