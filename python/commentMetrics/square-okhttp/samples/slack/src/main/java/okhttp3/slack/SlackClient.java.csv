commented;modifiers;parameterAmount;loc;comment;code
true;public;2;13;/**  * Shows a browser URL to authorize this app to act as this user.  */ ;/**  * Shows a browser URL to authorize this app to act as this user.  */ public void requestOauthSession(String scopes, String team) throws Exception {     if (sessionFactory == null) {         sessionFactory = new OAuthSessionFactory(slackApi).         sessionFactory.start().     }     HttpUrl authorizeUrl = sessionFactory.newAuthorizeUrl(scopes, team, session -> {         initOauthSession(session).         System.out.printf("session granted: %s\n", session).     }).     System.out.printf("open this URL in a browser: %s\n", authorizeUrl). }
true;public,synchronized;1;4;/**  * Set the OAuth session for this client.  */ ;/**  * Set the OAuth session for this client.  */ public synchronized void initOauthSession(OAuthSession session) {     this.session = session.     this.notifyAll(). }
true;public,synchronized;1;5;/**  * Waits for an OAuth session for this client to be set.  */ ;/**  * Waits for an OAuth session for this client to be set.  */ public synchronized void awaitAccessToken(Timeout timeout) throws InterruptedIOException {     while (session == null) {         timeout.waitUntilNotified(this).     } }
true;public;0;9;/**  * Starts a real time messaging session.  */ ;/**  * Starts a real time messaging session.  */ public void startRtm() throws IOException {     String accessToken.     synchronized (this) {         accessToken = session.access_token.     }     RtmSession rtmSession = new RtmSession(slackApi).     rtmSession.open(accessToken). }
false;public,static;1;25;;public static void main(String... args) throws Exception {     String clientId = "0000000000.00000000000".     String clientSecret = "00000000000000000000000000000000".     int port = 53203.     SlackApi slackApi = new SlackApi(clientId, clientSecret, port).     SlackClient client = new SlackClient(slackApi).     String scopes = "channels:history channels:read channels:write chat:write:bot chat:write:user " + "dnd:read dnd:write emoji:read files:read files:write:user groups:history groups:read " + "groups:write im:history im:read im:write mpim:history mpim:read mpim:write pins:read " + "pins:write reactions:read reactions:write search:read stars:read stars:write team:read " + "usergroups:read usergroups:write users:read users:write identify".     if (true) {         client.requestOauthSession(scopes, null).     } else {         OAuthSession session = new OAuthSession(true, "xoxp-XXXXXXXXXX-XXXXXXXXXX-XXXXXXXXXXX-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", scopes, "UXXXXXXXX", "My Slack Group", "TXXXXXXXX").         client.initOauthSession(session).     }     client.awaitAccessToken(Timeout.NONE).     client.startRtm(). }
