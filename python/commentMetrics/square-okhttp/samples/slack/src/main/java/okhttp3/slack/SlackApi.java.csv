commented;modifiers;parameterAmount;loc;comment;code
true;public;4;13;/**  * See https://api.slack.com/docs/oauth.  */ ;/**  * See https://api.slack.com/docs/oauth.  */ public HttpUrl authorizeUrl(String scopes, HttpUrl redirectUrl, ByteString state, String team) {     HttpUrl.Builder builder = baseUrl.newBuilder("/oauth/authorize").addQueryParameter("client_id", clientId).addQueryParameter("scope", scopes).addQueryParameter("redirect_uri", redirectUrl.toString()).addQueryParameter("state", state.base64()).     if (team != null) {         builder.addQueryParameter("team", team).     }     return builder.build(). }
true;public;2;16;/**  * See https://api.slack.com/methods/oauth.access.  */ ;/**  * See https://api.slack.com/methods/oauth.access.  */ public OAuthSession exchangeCode(String code, HttpUrl redirectUrl) throws IOException {     HttpUrl url = baseUrl.newBuilder("oauth.access").addQueryParameter("client_id", clientId).addQueryParameter("client_secret", clientSecret).addQueryParameter("code", code).addQueryParameter("redirect_uri", redirectUrl.toString()).build().     Request request = new Request.Builder().url(url).build().     Call call = httpClient.newCall(request).     try (Response response = call.execute()) {         JsonAdapter<OAuthSession> jsonAdapter = moshi.adapter(OAuthSession.class).         return jsonAdapter.fromJson(response.body().source()).     } }
true;public;1;13;/**  * See https://api.slack.com/methods/rtm.start.  */ ;/**  * See https://api.slack.com/methods/rtm.start.  */ public RtmStartResponse rtmStart(String accessToken) throws IOException {     HttpUrl url = baseUrl.newBuilder("rtm.start").addQueryParameter("token", accessToken).build().     Request request = new Request.Builder().url(url).build().     Call call = httpClient.newCall(request).     try (Response response = call.execute()) {         JsonAdapter<RtmStartResponse> jsonAdapter = moshi.adapter(RtmStartResponse.class).         return jsonAdapter.fromJson(response.body().source()).     } }
true;public;2;5;/**  * See https://api.slack.com/rtm.  */ ;/**  * See https://api.slack.com/rtm.  */ public WebSocket rtm(HttpUrl url, WebSocketListener listener) {     return httpClient.newWebSocket(new Request.Builder().url(url).build(), listener). }
false;;1;3;;@ToJson String urlToJson(HttpUrl httpUrl) {     return httpUrl.toString(). }
false;;1;5;;@FromJson HttpUrl urlFromJson(String urlString) {     if (urlString.startsWith("wss:"))         urlString = "https:" + urlString.substring(4).     if (urlString.startsWith("ws:"))         urlString = "http:" + urlString.substring(3).     return HttpUrl.get(urlString). }
