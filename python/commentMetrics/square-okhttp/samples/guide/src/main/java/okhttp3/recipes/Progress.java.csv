commented;modifiers;parameterAmount;loc;comment;code
false;public;3;20;;@Override public void update(long bytesRead, long contentLength, boolean done) {     if (done) {         System.out.println("completed").     } else {         if (firstUpdate) {             firstUpdate = false.             if (contentLength == -1) {                 System.out.println("content-length: unknown").             } else {                 System.out.format("content-length: %d\n", contentLength).             }         }         System.out.println(bytesRead).         if (contentLength != -1) {             System.out.format("%d%% done\n", (100 * bytesRead) / contentLength).         }     } }
false;public;0;45;;public void run() throws Exception {     Request request = new Request.Builder().url("https://publicobject.com/helloworld.txt").build().     final ProgressListener progressListener = new ProgressListener() {          boolean firstUpdate = true.          @Override         public void update(long bytesRead, long contentLength, boolean done) {             if (done) {                 System.out.println("completed").             } else {                 if (firstUpdate) {                     firstUpdate = false.                     if (contentLength == -1) {                         System.out.println("content-length: unknown").                     } else {                         System.out.format("content-length: %d\n", contentLength).                     }                 }                 System.out.println(bytesRead).                 if (contentLength != -1) {                     System.out.format("%d%% done\n", (100 * bytesRead) / contentLength).                 }             }         }     }.     OkHttpClient client = new OkHttpClient.Builder().addNetworkInterceptor(chain -> {         Response originalResponse = chain.proceed(chain.request()).         return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener)).build().     }).build().     try (Response response = client.newCall(request).execute()) {         if (!response.isSuccessful())             throw new IOException("Unexpected code " + response).         System.out.println(response.body().string()).     } }
false;public,static;1;3;;public static void main(String... args) throws Exception {     new Progress().run(). }
false;public;0;3;;@Override public MediaType contentType() {     return responseBody.contentType(). }
false;public;0;3;;@Override public long contentLength() {     return responseBody.contentLength(). }
false;public;0;6;;@Override public BufferedSource source() {     if (bufferedSource == null) {         bufferedSource = Okio.buffer(source(responseBody.source())).     }     return bufferedSource. }
false;public;2;7;;@Override public long read(Buffer sink, long byteCount) throws IOException {     long bytesRead = super.read(sink, byteCount).     // read() returns the number of bytes read, or -1 if this source is exhausted.     totalBytesRead += bytesRead != -1 ? bytesRead : 0.     progressListener.update(totalBytesRead, responseBody.contentLength(), bytesRead == -1).     return bytesRead. }
false;private;1;13;;private Source source(Source source) {     return new ForwardingSource(source) {          long totalBytesRead = 0L.          @Override         public long read(Buffer sink, long byteCount) throws IOException {             long bytesRead = super.read(sink, byteCount).             // read() returns the number of bytes read, or -1 if this source is exhausted.             totalBytesRead += bytesRead != -1 ? bytesRead : 0.             progressListener.update(totalBytesRead, responseBody.contentLength(), bytesRead == -1).             return bytesRead.         }     }. }
false;;3;1;;void update(long bytesRead, long contentLength, boolean done).
