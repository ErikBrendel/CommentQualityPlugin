commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void run() throws Exception {     final PipeBody pipeBody = new PipeBody().     Request request = new Request.Builder().url("https://api.github.com/markdown/raw").post(pipeBody).build().     streamPrimesToSinkAsynchronously(pipeBody.sink()).     try (Response response = client.newCall(request).execute()) {         if (!response.isSuccessful())             throw new IOException("Unexpected code " + response).         System.out.println(response.body().string()).     } }
false;public;0;14;;@Override public void run() {     try {         sink.writeUtf8("Numbers\n").         sink.writeUtf8("-------\n").         for (int i = 2. i <= 997. i++) {             System.out.println(i).             Thread.sleep(10).             sink.writeUtf8(String.format(" * %s = %s\n", i, factor(i))).         }         sink.close().     } catch (IOException | InterruptedException e) {         e.printStackTrace().     } }
false;private;1;7;;private String factor(int n) {     for (int i = 2. i < n. i++) {         int x = n / i.         if (x * i == n)             return factor(x) + " × " + i.     }     return Integer.toString(n). }
false;private;1;28;;private void streamPrimesToSinkAsynchronously(final BufferedSink sink) {     Thread thread = new Thread("writer") {          @Override         public void run() {             try {                 sink.writeUtf8("Numbers\n").                 sink.writeUtf8("-------\n").                 for (int i = 2. i <= 997. i++) {                     System.out.println(i).                     Thread.sleep(10).                     sink.writeUtf8(String.format(" * %s = %s\n", i, factor(i))).                 }                 sink.close().             } catch (IOException | InterruptedException e) {                 e.printStackTrace().             }         }          private String factor(int n) {             for (int i = 2. i < n. i++) {                 int x = n / i.                 if (x * i == n)                     return factor(x) + " × " + i.             }             return Integer.toString(n).         }     }.     thread.start(). }
false;public;0;3;;public BufferedSink sink() {     return sink. }
false;public;0;3;;@Override public MediaType contentType() {     return MEDIA_TYPE_MARKDOWN. }
false;public;1;3;;@Override public void writeTo(BufferedSink sink) throws IOException {     sink.writeAll(pipe.source()). }
false;public,static;1;3;;public static void main(String... args) throws Exception {     new PostStreamingWithPipe().run(). }
