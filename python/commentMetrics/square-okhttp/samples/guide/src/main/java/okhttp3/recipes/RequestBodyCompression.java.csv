commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;public void run() throws Exception {     Map<String, String> requestBody = new LinkedHashMap<>().     requestBody.put("longUrl", "https://publicobject.com/2014/12/04/html-formatting-javadocs/").     RequestBody jsonRequestBody = RequestBody.create(MEDIA_TYPE_JSON, mapJsonAdapter.toJson(requestBody)).     Request request = new Request.Builder().url("https://www.googleapis.com/urlshortener/v1/url?key=" + GOOGLE_API_KEY).post(jsonRequestBody).build().     try (Response response = client.newCall(request).execute()) {         if (!response.isSuccessful())             throw new IOException("Unexpected code " + response).         System.out.println(response.body().string()).     } }
false;public,static;1;3;;public static void main(String... args) throws Exception {     new RequestBodyCompression().run(). }
false;public;1;12;;@Override public Response intercept(Chain chain) throws IOException {     Request originalRequest = chain.request().     if (originalRequest.body() == null || originalRequest.header("Content-Encoding") != null) {         return chain.proceed(originalRequest).     }     Request compressedRequest = originalRequest.newBuilder().header("Content-Encoding", "gzip").method(originalRequest.method(), gzip(originalRequest.body())).build().     return chain.proceed(compressedRequest). }
false;public;0;3;;@Override public MediaType contentType() {     return body.contentType(). }
false;public;0;3;;@Override public long contentLength() {     // We don't know the compressed length in advance!     return -1. }
false;public;1;5;;@Override public void writeTo(BufferedSink sink) throws IOException {     BufferedSink gzipSink = Okio.buffer(new GzipSink(sink)).     body.writeTo(gzipSink).     gzipSink.close(). }
false;private;1;17;;private RequestBody gzip(final RequestBody body) {     return new RequestBody() {          @Override         public MediaType contentType() {             return body.contentType().         }          @Override         public long contentLength() {             // We don't know the compressed length in advance!             return -1.         }          @Override         public void writeTo(BufferedSink sink) throws IOException {             BufferedSink gzipSink = Okio.buffer(new GzipSink(sink)).             body.writeTo(gzipSink).             gzipSink.close().         }     }. }
