commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Override public MediaType contentType() {     return MEDIA_TYPE_MARKDOWN. }
false;public;1;7;;@Override public void writeTo(BufferedSink sink) throws IOException {     sink.writeUtf8("Numbers\n").     sink.writeUtf8("-------\n").     for (int i = 2. i <= 997. i++) {         sink.writeUtf8(String.format(" * %s = %s\n", i, factor(i))).     } }
false;private;1;7;;private String factor(int n) {     for (int i = 2. i < n. i++) {         int x = n / i.         if (x * i == n)             return factor(x) + " × " + i.     }     return Integer.toString(n). }
false;public;0;34;;public void run() throws Exception {     RequestBody requestBody = new RequestBody() {          @Override         public MediaType contentType() {             return MEDIA_TYPE_MARKDOWN.         }          @Override         public void writeTo(BufferedSink sink) throws IOException {             sink.writeUtf8("Numbers\n").             sink.writeUtf8("-------\n").             for (int i = 2. i <= 997. i++) {                 sink.writeUtf8(String.format(" * %s = %s\n", i, factor(i))).             }         }          private String factor(int n) {             for (int i = 2. i < n. i++) {                 int x = n / i.                 if (x * i == n)                     return factor(x) + " × " + i.             }             return Integer.toString(n).         }     }.     Request request = new Request.Builder().url("https://api.github.com/markdown/raw").post(requestBody).build().     try (Response response = client.newCall(request).execute()) {         if (!response.isSuccessful())             throw new IOException("Unexpected code " + response).         System.out.println(response.body().string()).     } }
false;public,static;1;3;;public static void main(String... args) throws Exception {     new PostStreaming().run(). }
