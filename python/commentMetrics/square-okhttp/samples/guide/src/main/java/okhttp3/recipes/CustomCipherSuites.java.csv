commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected SSLSocket configureSocket(SSLSocket socket) throws IOException {     socket.setEnabledCipherSuites(javaNames(spec.cipherSuites())).     return socket. }
true;private;1;7;/**  * Returns the VM's default SSL socket factory, using {@code trustManager} for trusted root  * certificates.  */ ;/**  * Returns the VM's default SSL socket factory, using {@code trustManager} for trusted root  * certificates.  */ private SSLSocketFactory defaultSslSocketFactory(X509TrustManager trustManager) throws NoSuchAlgorithmException, KeyManagementException {     SSLContext sslContext = SSLContext.getInstance("TLS").     sslContext.init(null, new TrustManager[] { trustManager }, null).     return sslContext.getSocketFactory(). }
true;private;0;11;/**  * Returns a trust manager that trusts the VM's default certificate authorities.  */ ;/**  * Returns a trust manager that trusts the VM's default certificate authorities.  */ private X509TrustManager defaultTrustManager() throws GeneralSecurityException {     TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()).     trustManagerFactory.init((KeyStore) null).     TrustManager[] trustManagers = trustManagerFactory.getTrustManagers().     if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {         throw new IllegalStateException("Unexpected default trust managers:" + Arrays.toString(trustManagers)).     }     return (X509TrustManager) trustManagers[0]. }
false;private;1;7;;private String[] javaNames(List<CipherSuite> cipherSuites) {     String[] result = new String[cipherSuites.size()].     for (int i = 0. i < result.length. i++) {         result[i] = cipherSuites.get(i).javaName().     }     return result. }
false;public;0;3;;@Override public String[] getDefaultCipherSuites() {     return delegate.getDefaultCipherSuites(). }
false;public;0;3;;@Override public String[] getSupportedCipherSuites() {     return delegate.getSupportedCipherSuites(). }
false;public;4;4;;@Override public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException {     return configureSocket((SSLSocket) delegate.createSocket(socket, host, port, autoClose)). }
false;public;2;3;;@Override public Socket createSocket(String host, int port) throws IOException {     return configureSocket((SSLSocket) delegate.createSocket(host, port)). }
false;public;4;4;;@Override public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException {     return configureSocket((SSLSocket) delegate.createSocket(host, port, localHost, localPort)). }
false;public;2;3;;@Override public Socket createSocket(InetAddress host, int port) throws IOException {     return configureSocket((SSLSocket) delegate.createSocket(host, port)). }
false;public;4;5;;@Override public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {     return configureSocket((SSLSocket) delegate.createSocket(address, port, localAddress, localPort)). }
false;protected;1;3;;protected SSLSocket configureSocket(SSLSocket socket) throws IOException {     return socket. }
false;public;0;12;;public void run() throws Exception {     Request request = new Request.Builder().url("https://publicobject.com/helloworld.txt").build().     try (Response response = client.newCall(request).execute()) {         if (!response.isSuccessful())             throw new IOException("Unexpected code " + response).         System.out.println(response.handshake().cipherSuite()).         System.out.println(response.body().string()).     } }
false;public,static;1;3;;public static void main(String... args) throws Exception {     new CustomCipherSuites().run(). }
