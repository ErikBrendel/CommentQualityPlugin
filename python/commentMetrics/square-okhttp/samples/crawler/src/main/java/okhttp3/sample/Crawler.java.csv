commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected void execute() {     try {         drainQueue().     } catch (Exception e) {         e.printStackTrace().     } }
false;private;1;15;;private void parallelDrainQueue(int threadCount) {     ExecutorService executor = Executors.newFixedThreadPool(threadCount).     for (int i = 0. i < threadCount. i++) {         executor.execute(new NamedRunnable("Crawler %s", i) {              @Override             protected void execute() {                 try {                     drainQueue().                 } catch (Exception e) {                     e.printStackTrace().                 }             }         }).     }     executor.shutdown(). }
false;private;0;18;;private void drainQueue() throws Exception {     for (HttpUrl url. (url = queue.take()) != null. ) {         if (!fetchedUrls.add(url)) {             continue.         }         Thread currentThread = Thread.currentThread().         String originalName = currentThread.getName().         currentThread.setName("Crawler " + url.toString()).         try {             fetch(url).         } catch (IOException e) {             System.out.printf("XXX: %s %s%n", url, e).         } finally {             currentThread.setName(originalName).         }     } }
false;public;1;39;;public void fetch(HttpUrl url) throws IOException {     // Skip hosts that we've visited many times.     AtomicInteger hostnameCount = new AtomicInteger().     AtomicInteger previous = hostnames.putIfAbsent(url.host(), hostnameCount).     if (previous != null)         hostnameCount = previous.     if (hostnameCount.incrementAndGet() > 100)         return.     Request request = new Request.Builder().url(url).build().     try (Response response = client.newCall(request).execute()) {         String responseSource = response.networkResponse() != null ? ("(network: " + response.networkResponse().code() + " over " + response.protocol() + ")") : "(cache)".         int responseCode = response.code().         System.out.printf("%03d: %s %s%n", responseCode, url, responseSource).         String contentType = response.header("Content-Type").         if (responseCode != 200 || contentType == null) {             return.         }         MediaType mediaType = MediaType.parse(contentType).         if (mediaType == null || !mediaType.subtype().equalsIgnoreCase("html")) {             return.         }         Document document = Jsoup.parse(response.body().string(), url.toString()).         for (Element element : document.select("a[href]")) {             String href = element.attr("href").             HttpUrl link = response.request().url().resolve(href).             // URL is either invalid or its scheme isn't http/https.             if (link == null)                 continue.             queue.add(link.newBuilder().fragment(null).build()).         }     } }
false;public,static;1;18;;public static void main(String[] args) throws IOException {     if (args.length != 2) {         System.out.println("Usage: Crawler <cache dir> <root>").         return.     }     int threadCount = 20.     long cacheByteCount = 1024L * 1024L * 100L.     Cache cache = new Cache(new File(args[0]), cacheByteCount).     OkHttpClient client = new OkHttpClient.Builder().cache(cache).build().     Crawler crawler = new Crawler(client).     crawler.queue.add(HttpUrl.get(args[1])).     crawler.parallelDrainQueue(threadCount). }
