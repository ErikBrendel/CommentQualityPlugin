commented;modifiers;parameterAmount;loc;comment;code
false;;1;1;;void log(String message).
false;public;1;6;;public void redactHeader(String name) {     Set<String> newHeadersToRedact = new TreeSet<>(String.CASE_INSENSITIVE_ORDER).     newHeadersToRedact.addAll(headersToRedact).     newHeadersToRedact.add(name).     headersToRedact = newHeadersToRedact. }
true;public;1;5;/**  * Change the level at which this interceptor logs.  */ ;/**  * Change the level at which this interceptor logs.  */ public HttpLoggingInterceptor setLevel(Level level) {     if (level == null)         throw new NullPointerException("level == null. Use Level.NONE instead.").     this.level = level.     return this. }
false;public;0;3;;public Level getLevel() {     return level. }
false;public;1;144;;@Override public Response intercept(Chain chain) throws IOException {     Level level = this.level.     Request request = chain.request().     if (level == Level.NONE) {         return chain.proceed(request).     }     boolean logBody = level == Level.BODY.     boolean logHeaders = logBody || level == Level.HEADERS.     RequestBody requestBody = request.body().     boolean hasRequestBody = requestBody != null.     Connection connection = chain.connection().     String requestStartMessage = "--> " + request.method() + ' ' + request.url() + (connection != null ? " " + connection.protocol() : "").     if (!logHeaders && hasRequestBody) {         requestStartMessage += " (" + requestBody.contentLength() + "-byte body)".     }     logger.log(requestStartMessage).     if (logHeaders) {         if (hasRequestBody) {             // them to be included (when available) so there values are known.             if (requestBody.contentType() != null) {                 logger.log("Content-Type: " + requestBody.contentType()).             }             if (requestBody.contentLength() != -1) {                 logger.log("Content-Length: " + requestBody.contentLength()).             }         }         Headers headers = request.headers().         for (int i = 0, count = headers.size(). i < count. i++) {             String name = headers.name(i).             // Skip headers from the request body as they are explicitly logged above.             if (!"Content-Type".equalsIgnoreCase(name) && !"Content-Length".equalsIgnoreCase(name)) {                 logHeader(headers, i).             }         }         if (!logBody || !hasRequestBody) {             logger.log("--> END " + request.method()).         } else if (bodyHasUnknownEncoding(request.headers())) {             logger.log("--> END " + request.method() + " (encoded body omitted)").         } else if (requestBody.isDuplex()) {             logger.log("--> END " + request.method() + " (duplex request body omitted)").         } else {             Buffer buffer = new Buffer().             requestBody.writeTo(buffer).             Charset charset = UTF8.             MediaType contentType = requestBody.contentType().             if (contentType != null) {                 charset = contentType.charset(UTF8).             }             logger.log("").             if (isPlaintext(buffer)) {                 logger.log(buffer.readString(charset)).                 logger.log("--> END " + request.method() + " (" + requestBody.contentLength() + "-byte body)").             } else {                 logger.log("--> END " + request.method() + " (binary " + requestBody.contentLength() + "-byte body omitted)").             }         }     }     long startNs = System.nanoTime().     Response response.     try {         response = chain.proceed(request).     } catch (Exception e) {         logger.log("<-- HTTP FAILED: " + e).         throw e.     }     long tookMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNs).     ResponseBody responseBody = response.body().     long contentLength = responseBody.contentLength().     String bodySize = contentLength != -1 ? contentLength + "-byte" : "unknown-length".     logger.log("<-- " + response.code() + (response.message().isEmpty() ? "" : ' ' + response.message()) + ' ' + response.request().url() + " (" + tookMs + "ms" + (!logHeaders ? ", " + bodySize + " body" : "") + ')').     if (logHeaders) {         Headers headers = response.headers().         for (int i = 0, count = headers.size(). i < count. i++) {             logHeader(headers, i).         }         if (!logBody || !HttpHeaders.hasBody(response)) {             logger.log("<-- END HTTP").         } else if (bodyHasUnknownEncoding(response.headers())) {             logger.log("<-- END HTTP (encoded body omitted)").         } else {             BufferedSource source = responseBody.source().             // Buffer the entire body.             source.request(Long.MAX_VALUE).             Buffer buffer = source.getBuffer().             Long gzippedLength = null.             if ("gzip".equalsIgnoreCase(headers.get("Content-Encoding"))) {                 gzippedLength = buffer.size().                 try (GzipSource gzippedResponseBody = new GzipSource(buffer.clone())) {                     buffer = new Buffer().                     buffer.writeAll(gzippedResponseBody).                 }             }             Charset charset = UTF8.             MediaType contentType = responseBody.contentType().             if (contentType != null) {                 charset = contentType.charset(UTF8).             }             if (!isPlaintext(buffer)) {                 logger.log("").                 logger.log("<-- END HTTP (binary " + buffer.size() + "-byte body omitted)").                 return response.             }             if (contentLength != 0) {                 logger.log("").                 logger.log(buffer.clone().readString(charset)).             }             if (gzippedLength != null) {                 logger.log("<-- END HTTP (" + buffer.size() + "-byte, " + gzippedLength + "-gzipped-byte body)").             } else {                 logger.log("<-- END HTTP (" + buffer.size() + "-byte body)").             }         }     }     return response. }
false;private;2;4;;private void logHeader(Headers headers, int i) {     String value = headersToRedact.contains(headers.name(i)) ? "██" : headers.value(i).     logger.log(headers.name(i) + ": " + value). }
true;static;1;19;/**  * Returns true if the body in question probably contains human readable text. Uses a small sample  * of code points to detect unicode control characters commonly used in binary file signatures.  */ ;/**  * Returns true if the body in question probably contains human readable text. Uses a small sample  * of code points to detect unicode control characters commonly used in binary file signatures.  */ static boolean isPlaintext(Buffer buffer) {     try {         Buffer prefix = new Buffer().         long byteCount = buffer.size() < 64 ? buffer.size() : 64.         buffer.copyTo(prefix, 0, byteCount).         for (int i = 0. i < 16. i++) {             if (prefix.exhausted()) {                 break.             }             int codePoint = prefix.readUtf8CodePoint().             if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) {                 return false.             }         }         return true.     } catch (EOFException e) {         // Truncated UTF-8 sequence.         return false.     } }
false;private,static;1;6;;private static boolean bodyHasUnknownEncoding(Headers headers) {     String contentEncoding = headers.get("Content-Encoding").     return contentEncoding != null && !contentEncoding.equalsIgnoreCase("identity") && !contentEncoding.equalsIgnoreCase("gzip"). }
