commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Before public void setUp() {     client = new OkHttpClient.Builder().eventListenerFactory(loggingEventListenerFactory).sslSocketFactory(handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager()).retryOnConnectionFailure(false).build().     url = server.url("/"). }
false;public;0;32;;@Test public void get() throws Exception {     server.enqueue(new MockResponse().setBody("Hello!").setHeader("Content-Type", PLAIN)).     Response response = client.newCall(request().build()).execute().     assertNotNull(response.body()).     response.body().bytes().     logRecorder.assertLogMatch("callStart: Request\\{method=GET, url=" + url + ", tags=\\{\\}\\}").assertLogMatch("dnsStart: " + url.host()).assertLogMatch("dnsEnd: \\[.+\\]").assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT").assertLogMatch("connectEnd: http/1.1").assertLogMatch("connectionAcquired: Connection\\{" + url.host() + ":\\d+, proxy=DIRECT hostAddress=" + url.host() + "/.+ cipherSuite=none protocol=http/1\\.1\\}").assertLogMatch("requestHeadersStart").assertLogMatch("requestHeadersEnd").assertLogMatch("responseHeadersStart").assertLogMatch("responseHeadersEnd: Response\\{protocol=http/1\\.1, code=200, message=OK, url=" + url + "}").assertLogMatch("responseBodyStart").assertLogMatch("responseBodyEnd: byteCount=6").assertLogMatch("connectionReleased").assertLogMatch("callEnd").assertNoMoreLogs(). }
false;public;0;32;;@Test public void post() throws IOException {     server.enqueue(new MockResponse()).     client.newCall(request().post(RequestBody.create(PLAIN, "Hello!")).build()).execute().     logRecorder.assertLogMatch("callStart: Request\\{method=POST, url=" + url + ", tags=\\{\\}\\}").assertLogMatch("dnsStart: " + url.host()).assertLogMatch("dnsEnd: \\[.+\\]").assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT").assertLogMatch("connectEnd: http/1.1").assertLogMatch("connectionAcquired: Connection\\{" + url.host() + ":\\d+, proxy=DIRECT hostAddress=" + url.host() + "/.+ cipherSuite=none protocol=http/1\\.1\\}").assertLogMatch("requestHeadersStart").assertLogMatch("requestHeadersEnd").assertLogMatch("requestBodyStart").assertLogMatch("requestBodyEnd: byteCount=6").assertLogMatch("responseHeadersStart").assertLogMatch("responseHeadersEnd: Response\\{protocol=http/1\\.1, code=200, message=OK, url=" + url + "}").assertLogMatch("responseBodyStart").assertLogMatch("responseBodyEnd: byteCount=0").assertLogMatch("connectionReleased").assertLogMatch("callEnd").assertNoMoreLogs(). }
false;public;0;39;;@Test public void secureGet() throws Exception {     server.useHttps(handshakeCertificates.sslSocketFactory(), false).     url = server.url("/").     server.enqueue(new MockResponse()).     Response response = client.newCall(request().build()).execute().     assertNotNull(response.body()).     response.body().bytes().     logRecorder.assertLogMatch("callStart: Request\\{method=GET, url=" + url + ", tags=\\{\\}\\}").assertLogMatch("dnsStart: " + url.host()).assertLogMatch("dnsEnd: \\[.+\\]").assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT").assertLogMatch("secureConnectStart").assertLogMatch("secureConnectEnd: Handshake\\{" + "tlsVersion=TLS_1_[23] " + "cipherSuite=(?:TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_AES_128_GCM_SHA256) " + "peerCertificates=\\[CN=localhost\\] " + "localCertificates=\\[\\]}").assertLogMatch("connectEnd: h2").assertLogMatch("connectionAcquired: Connection\\{" + url.host() + ":\\d+, proxy=DIRECT hostAddress=" + url.host() + "/.+ cipherSuite=.+ protocol=h2}").assertLogMatch("requestHeadersStart").assertLogMatch("requestHeadersEnd").assertLogMatch("responseHeadersStart").assertLogMatch("responseHeadersEnd: Response\\{protocol=h2, code=200, message=, url=" + url + "}").assertLogMatch("responseBodyStart").assertLogMatch("responseBodyEnd: byteCount=0").assertLogMatch("connectionReleased").assertLogMatch("callEnd").assertNoMoreLogs(). }
false;public;0;19;;@Test public void dnsFail() throws IOException {     client = new OkHttpClient.Builder().dns(hostname -> {         throw new UnknownHostException("reason").     }).eventListenerFactory(loggingEventListenerFactory).build().     try {         client.newCall(request().build()).execute().         fail().     } catch (UnknownHostException expected) {     }     logRecorder.assertLogMatch("callStart: Request\\{method=GET, url=" + url + ", tags=\\{\\}\\}").assertLogMatch("dnsStart: " + url.host()).assertLogMatch("callFailed: java.net.UnknownHostException: reason").assertNoMoreLogs(). }
false;public;0;25;;@Test public void connectFail() {     server.useHttps(handshakeCertificates.sslSocketFactory(), false).     server.setProtocols(asList(HTTP_2, HTTP_1_1)).     server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.FAIL_HANDSHAKE)).     url = server.url("/").     try {         client.newCall(request().build()).execute().         fail().     } catch (IOException expected) {     }     logRecorder.assertLogMatch("callStart: Request\\{method=GET, url=" + url + ", tags=\\{\\}\\}").assertLogMatch("dnsStart: " + url.host()).assertLogMatch("dnsEnd: \\[.+\\]").assertLogMatch("connectStart: " + url.host() + "/.+ DIRECT").assertLogMatch("secureConnectStart").assertLogMatch("connectFailed: null javax\\.net\\.ssl\\.SSLProtocolException: (?:Unexpected handshake message: client_hello|Handshake message sequence violation, 1)").assertLogMatch("callFailed: javax\\.net\\.ssl\\.SSLProtocolException: (?:Unexpected handshake message: client_hello|Handshake message sequence violation, 1)").assertNoMoreLogs(). }
false;private;0;3;;private Request.Builder request() {     return new Request.Builder().url(url). }
false;;1;3;;LogRecorder assertLogMatch(String pattern) {     return (LogRecorder) super.assertLogMatch("\\[\\d+ ms] " + pattern). }
