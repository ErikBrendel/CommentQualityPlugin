commented;modifiers;parameterAmount;loc;comment;code
false;private;1;4;;private void setLevel(Level level) {     networkInterceptor.setLevel(level).     applicationInterceptor.setLevel(level). }
false;public;0;12;;@Before public void setUp() {     client = new OkHttpClient.Builder().addNetworkInterceptor(networkInterceptor).addInterceptor(applicationInterceptor).sslSocketFactory(handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager()).hostnameVerifier(hostnameVerifier).build().     host = server.getHostName() + ":" + server.getPort().     url = server.url("/"). }
false;public;0;9;;@Test public void levelGetter() {     // The default is NONE.     Assert.assertEquals(Level.NONE, applicationInterceptor.getLevel()).     for (Level level : Level.values()) {         applicationInterceptor.setLevel(level).         assertEquals(level, applicationInterceptor.getLevel()).     } }
false;public;0;8;;@Test public void setLevelShouldPreventNullValue() {     try {         applicationInterceptor.setLevel(null).         fail().     } catch (NullPointerException expected) {         assertEquals("level == null. Use Level.NONE instead.", expected.getMessage()).     } }
false;public;0;5;;@Test public void setLevelShouldReturnSameInstanceOfInterceptor() {     for (Level level : Level.values()) {         assertSame(applicationInterceptor, applicationInterceptor.setLevel(level)).     } }
false;public;0;7;;@Test public void none() throws IOException {     server.enqueue(new MockResponse()).     client.newCall(request().build()).execute().     applicationLogs.assertNoMoreLogs().     networkLogs.assertNoMoreLogs(). }
false;public;0;16;;@Test public void basicGet() throws IOException {     setLevel(Level.BASIC).     server.enqueue(new MockResponse()).     client.newCall(request().build()).execute().     applicationLogs.assertLogEqual("--> GET " + url).assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)").assertNoMoreLogs(). }
false;public;0;16;;@Test public void basicPost() throws IOException {     setLevel(Level.BASIC).     server.enqueue(new MockResponse()).     client.newCall(request().post(RequestBody.create(PLAIN, "Hi?")).build()).execute().     applicationLogs.assertLogEqual("--> POST " + url + " (3-byte body)").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)").assertNoMoreLogs().     networkLogs.assertLogEqual("--> POST " + url + " http/1.1 (3-byte body)").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 0-byte body\\)").assertNoMoreLogs(). }
false;public;0;19;;@Test public void basicResponseBody() throws IOException {     setLevel(Level.BASIC).     server.enqueue(new MockResponse().setBody("Hello!").setHeader("Content-Type", PLAIN)).     Response response = client.newCall(request().build()).execute().     response.body().close().     applicationLogs.assertLogEqual("--> GET " + url).assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 6-byte body\\)").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, 6-byte body\\)").assertNoMoreLogs(). }
false;public;0;19;;@Test public void basicChunkedResponseBody() throws IOException {     setLevel(Level.BASIC).     server.enqueue(new MockResponse().setChunkedBody("Hello!", 2).setHeader("Content-Type", PLAIN)).     Response response = client.newCall(request().build()).execute().     response.body().close().     applicationLogs.assertLogEqual("--> GET " + url).assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms, unknown-length body\\)").assertNoMoreLogs(). }
false;public;0;27;;@Test public void headersGet() throws IOException {     setLevel(Level.HEADERS).     server.enqueue(new MockResponse()).     Response response = client.newCall(request().build()).execute().     response.body().close().     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP").assertNoMoreLogs(). }
false;public;0;32;;@Test public void headersPost() throws IOException {     setLevel(Level.HEADERS).     server.enqueue(new MockResponse()).     Request request = request().post(RequestBody.create(PLAIN, "Hi?")).build().     Response response = client.newCall(request).execute().     response.body().close().     applicationLogs.assertLogEqual("--> POST " + url).assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("Content-Length: 3").assertLogEqual("--> END POST").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP").assertNoMoreLogs().     networkLogs.assertLogEqual("--> POST " + url + " http/1.1").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("Content-Length: 3").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END POST").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP").assertNoMoreLogs(). }
false;public;0;30;;@Test public void headersPostNoContentType() throws IOException {     setLevel(Level.HEADERS).     server.enqueue(new MockResponse()).     Request request = request().post(RequestBody.create(null, "Hi?")).build().     Response response = client.newCall(request).execute().     response.body().close().     applicationLogs.assertLogEqual("--> POST " + url).assertLogEqual("Content-Length: 3").assertLogEqual("--> END POST").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP").assertNoMoreLogs().     networkLogs.assertLogEqual("--> POST " + url + " http/1.1").assertLogEqual("Content-Length: 3").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END POST").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP").assertNoMoreLogs(). }
false;public;0;3;;@Override public MediaType contentType() {     return PLAIN. }
false;public;1;3;;@Override public void writeTo(BufferedSink sink) throws IOException {     sink.writeUtf8("Hi!"). }
false;public;0;39;;@Test public void headersPostNoLength() throws IOException {     setLevel(Level.HEADERS).     server.enqueue(new MockResponse()).     RequestBody body = new RequestBody() {          @Override         public MediaType contentType() {             return PLAIN.         }          @Override         public void writeTo(BufferedSink sink) throws IOException {             sink.writeUtf8("Hi!").         }     }.     Response response = client.newCall(request().post(body).build()).execute().     response.body().close().     applicationLogs.assertLogEqual("--> POST " + url).assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("--> END POST").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP").assertNoMoreLogs().     networkLogs.assertLogEqual("--> POST " + url + " http/1.1").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("Transfer-Encoding: chunked").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END POST").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP").assertNoMoreLogs(). }
false;public;0;31;;@Test public void headersResponseBody() throws IOException {     setLevel(Level.HEADERS).     server.enqueue(new MockResponse().setBody("Hello!").setHeader("Content-Type", PLAIN)).     Response response = client.newCall(request().build()).execute().     response.body().close().     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 6").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("<-- END HTTP").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 6").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("<-- END HTTP").assertNoMoreLogs(). }
false;public;0;27;;@Test public void bodyGet() throws IOException {     setLevel(Level.BODY).     server.enqueue(new MockResponse()).     Response response = client.newCall(request().build()).execute().     response.body().close().     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP (0-byte body)").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP (0-byte body)").assertNoMoreLogs(). }
false;public;0;4;;@Test public void bodyGet204() throws IOException {     setLevel(Level.BODY).     bodyGetNoBody(204). }
false;public;0;4;;@Test public void bodyGet205() throws IOException {     setLevel(Level.BODY).     bodyGetNoBody(205). }
false;private;1;26;;private void bodyGetNoBody(int code) throws IOException {     server.enqueue(new MockResponse().setStatus("HTTP/1.1 " + code + " No Content")).     Response response = client.newCall(request().build()).execute().     response.body().close().     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("--> END GET").assertLogMatch("<-- " + code + " No Content " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP (0-byte body)").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END GET").assertLogMatch("<-- " + code + " No Content " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP (0-byte body)").assertNoMoreLogs(). }
false;public;0;36;;@Test public void bodyPost() throws IOException {     setLevel(Level.BODY).     server.enqueue(new MockResponse()).     Request request = request().post(RequestBody.create(PLAIN, "Hi?")).build().     Response response = client.newCall(request).execute().     response.body().close().     applicationLogs.assertLogEqual("--> POST " + url).assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("Content-Length: 3").assertLogEqual("").assertLogEqual("Hi?").assertLogEqual("--> END POST (3-byte body)").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP (0-byte body)").assertNoMoreLogs().     networkLogs.assertLogEqual("--> POST " + url + " http/1.1").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("Content-Length: 3").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("").assertLogEqual("Hi?").assertLogEqual("--> END POST (3-byte body)").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("<-- END HTTP (0-byte body)").assertNoMoreLogs(). }
false;public;0;35;;@Test public void bodyResponseBody() throws IOException {     setLevel(Level.BODY).     server.enqueue(new MockResponse().setBody("Hello!").setHeader("Content-Type", PLAIN)).     Response response = client.newCall(request().build()).execute().     response.body().close().     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 6").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("").assertLogEqual("Hello!").assertLogEqual("<-- END HTTP (6-byte body)").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 6").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("").assertLogEqual("Hello!").assertLogEqual("<-- END HTTP (6-byte body)").assertNoMoreLogs(). }
false;public;0;35;;@Test public void bodyResponseBodyChunked() throws IOException {     setLevel(Level.BODY).     server.enqueue(new MockResponse().setChunkedBody("Hello!", 2).setHeader("Content-Type", PLAIN)).     Response response = client.newCall(request().build()).execute().     response.body().close().     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Transfer-encoding: chunked").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("").assertLogEqual("Hello!").assertLogEqual("<-- END HTTP (6-byte body)").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Transfer-encoding: chunked").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("").assertLogEqual("Hello!").assertLogEqual("<-- END HTTP (6-byte body)").assertNoMoreLogs(). }
false;public;0;40;;@Test public void bodyResponseGzipEncoded() throws IOException {     setLevel(Level.BODY).     server.enqueue(new MockResponse().setHeader("Content-Encoding", "gzip").setHeader("Content-Type", PLAIN).setBody(new Buffer().write(ByteString.decodeBase64("H4sIAAAAAAAAAPNIzcnJ11HwQKIAdyO+9hMAAAA=")))).     Response response = client.newCall(request().build()).execute().     ResponseBody responseBody = response.body().     assertEquals("Expected response body to be valid", "Hello, Hello, Hello", responseBody.string()).     responseBody.close().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Encoding: gzip").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogMatch("Content-Length: \\d+").assertLogEqual("").assertLogEqual("Hello, Hello, Hello").assertLogEqual("<-- END HTTP (19-byte, 29-gzipped-byte body)").assertNoMoreLogs().     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogEqual("").assertLogEqual("Hello, Hello, Hello").assertLogEqual("<-- END HTTP (19-byte body)").assertNoMoreLogs(). }
false;public;0;36;;@Test public void bodyResponseUnknownEncoded() throws IOException {     setLevel(Level.BODY).     server.enqueue(new MockResponse().setHeader("Content-Encoding", "br").setHeader("Content-Type", PLAIN).setBody(new Buffer().write(ByteString.decodeBase64("iwmASGVsbG8sIEhlbGxvLCBIZWxsbwoD")))).     Response response = client.newCall(request().build()).execute().     response.body().close().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Encoding: br").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogMatch("Content-Length: \\d+").assertLogEqual("<-- END HTTP (encoded body omitted)").assertNoMoreLogs().     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Encoding: br").assertLogEqual("Content-Type: text/plain. charset=utf-8").assertLogMatch("Content-Length: \\d+").assertLogEqual("<-- END HTTP (encoded body omitted)").assertNoMoreLogs(). }
false;public;0;35;;@Test public void bodyGetMalformedCharset() throws IOException {     setLevel(Level.BODY).     server.enqueue(new MockResponse().setHeader("Content-Type", "text/html. charset=0").setBody("Body with unknown charset")).     Response response = client.newCall(request().build()).execute().     response.body().close().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Type: text/html. charset=0").assertLogMatch("Content-Length: \\d+").assertLogMatch("").assertLogEqual("Body with unknown charset").assertLogEqual("<-- END HTTP (25-byte body)").assertNoMoreLogs().     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Type: text/html. charset=0").assertLogMatch("Content-Length: \\d+").assertLogEqual("").assertLogEqual("Body with unknown charset").assertLogEqual("<-- END HTTP (25-byte body)").assertNoMoreLogs(). }
false;public;0;9;;@Test public void isPlaintext() {     assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer())).     assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("abc"))).     assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("new\r\nlines"))).     assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeUtf8("white\t space"))).     assertTrue(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0x80))).     assertFalse(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0x00))).     assertFalse(HttpLoggingInterceptor.isPlaintext(new Buffer().writeByte(0xc0))). }
false;public;0;41;;@Test public void responseBodyIsBinary() throws IOException {     setLevel(Level.BODY).     Buffer buffer = new Buffer().     buffer.writeUtf8CodePoint(0x89).     buffer.writeUtf8CodePoint(0x50).     buffer.writeUtf8CodePoint(0x4e).     buffer.writeUtf8CodePoint(0x47).     buffer.writeUtf8CodePoint(0x0d).     buffer.writeUtf8CodePoint(0x0a).     buffer.writeUtf8CodePoint(0x1a).     buffer.writeUtf8CodePoint(0x0a).     server.enqueue(new MockResponse().setBody(buffer).setHeader("Content-Type", "image/png. charset=utf-8")).     Response response = client.newCall(request().build()).execute().     response.body().close().     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 9").assertLogEqual("Content-Type: image/png. charset=utf-8").assertLogEqual("").assertLogEqual("<-- END HTTP (binary 9-byte body omitted)").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 9").assertLogEqual("Content-Type: image/png. charset=utf-8").assertLogEqual("").assertLogEqual("<-- END HTTP (binary 9-byte body omitted)").assertNoMoreLogs(). }
false;public;0;18;;@Test public void connectFail() throws IOException {     setLevel(Level.BASIC).     client = new OkHttpClient.Builder().dns(hostname -> {         throw new UnknownHostException("reason").     }).addInterceptor(applicationInterceptor).build().     try {         client.newCall(request().build()).execute().         fail().     } catch (UnknownHostException expected) {     }     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("<-- HTTP FAILED: java.net.UnknownHostException: reason").assertNoMoreLogs(). }
false;public;0;20;;@Test public void http2() throws Exception {     server.useHttps(handshakeCertificates.sslSocketFactory(), false).     url = server.url("/").     setLevel(Level.BASIC).     server.enqueue(new MockResponse()).     Response response = client.newCall(request().build()).execute().     assumeThat(response.protocol(), equalTo(Protocol.HTTP_2)).     applicationLogs.assertLogEqual("--> GET " + url).assertLogMatch("<-- 200 " + url + " \\(\\d+ms, 0-byte body\\)").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " h2").assertLogMatch("<-- 200 " + url + " \\(\\d+ms, 0-byte body\\)").assertNoMoreLogs(). }
false;public;0;56;;@Test public void headersAreRedacted() throws Exception {     HttpLoggingInterceptor networkInterceptor = new HttpLoggingInterceptor(networkLogs).setLevel(Level.HEADERS).     networkInterceptor.redactHeader("sEnSiTiVe").     HttpLoggingInterceptor applicationInterceptor = new HttpLoggingInterceptor(applicationLogs).setLevel(Level.HEADERS).     applicationInterceptor.redactHeader("sEnSiTiVe").     client = new OkHttpClient.Builder().addNetworkInterceptor(networkInterceptor).addInterceptor(applicationInterceptor).build().     server.enqueue(new MockResponse().addHeader("SeNsItIvE", "Value").addHeader("Not-Sensitive", "Value")).     Response response = client.newCall(request().addHeader("SeNsItIvE", "Value").addHeader("Not-Sensitive", "Value").build()).execute().     response.body().close().     applicationLogs.assertLogEqual("--> GET " + url).assertLogEqual("SeNsItIvE: ██").assertLogEqual("Not-Sensitive: Value").assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("SeNsItIvE: ██").assertLogEqual("Not-Sensitive: Value").assertLogEqual("<-- END HTTP").assertNoMoreLogs().     networkLogs.assertLogEqual("--> GET " + url + " http/1.1").assertLogEqual("SeNsItIvE: ██").assertLogEqual("Not-Sensitive: Value").assertLogEqual("Host: " + host).assertLogEqual("Connection: Keep-Alive").assertLogEqual("Accept-Encoding: gzip").assertLogMatch("User-Agent: okhttp/.+").assertLogEqual("--> END GET").assertLogMatch("<-- 200 OK " + url + " \\(\\d+ms\\)").assertLogEqual("Content-Length: 0").assertLogEqual("SeNsItIvE: ██").assertLogEqual("Not-Sensitive: Value").assertLogEqual("<-- END HTTP").assertNoMoreLogs(). }
false;public;0;3;;@Override @Nullable public MediaType contentType() {     return null. }
false;public;1;4;;@Override public void writeTo(BufferedSink sink) throws IOException {     sink.writeUtf8("Hello request!").     sink.close(). }
false;public;0;3;;@Override public boolean isDuplex() {     return true. }
false;public;0;42;;@Test public void duplexRequestsAreNotLogged() throws Exception {     // HTTP/2     server.useHttps(handshakeCertificates.sslSocketFactory(), false).     url = server.url("/").     setLevel(Level.BODY).     server.enqueue(new MockResponse().setBody("Hello response!")).     RequestBody asyncRequestBody = new RequestBody() {          @Override         @Nullable         public MediaType contentType() {             return null.         }          @Override         public void writeTo(BufferedSink sink) throws IOException {             sink.writeUtf8("Hello request!").             sink.close().         }          @Override         public boolean isDuplex() {             return true.         }     }.     Request request = request().post(asyncRequestBody).build().     Response response = client.newCall(request).execute().     assumeThat(response.protocol(), equalTo(Protocol.HTTP_2)).     assertEquals("Hello response!", response.body().string()).     applicationLogs.assertLogEqual("--> POST " + url).assertLogEqual("--> END POST (duplex request body omitted)").assertLogMatch("<-- 200 " + url + " \\(\\d+ms\\)").assertLogEqual("content-length: 15").assertLogEqual("").assertLogEqual("Hello response!").assertLogEqual("<-- END HTTP (15-byte body)").assertNoMoreLogs(). }
false;private;0;3;;private Request.Builder request() {     return new Request.Builder().url(url). }
false;;1;6;;LogRecorder assertLogEqual(String expected) {     assertTrue("No more messages found", index < logs.size()).     String actual = logs.get(index++).     assertEquals(expected, actual).     return this. }
false;;1;7;;LogRecorder assertLogMatch(String pattern) {     assertTrue("No more messages found", index < logs.size()).     String actual = logs.get(index++).     assertTrue("<" + actual + "> did not match pattern <" + pattern + ">", Pattern.matches(pattern, actual)).     return this. }
false;;0;3;;void assertNoMoreLogs() {     assertEquals("More messages remain: " + logs.subList(index, logs.size()), index, logs.size()). }
false;public;1;3;;@Override public void log(String message) {     logs.add(message). }
