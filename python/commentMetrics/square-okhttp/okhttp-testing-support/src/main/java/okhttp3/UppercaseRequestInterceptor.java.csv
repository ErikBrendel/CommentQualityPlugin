commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;@Override public Response intercept(Chain chain) throws IOException {     return chain.proceed(uppercaseRequest(chain.request())). }
false;public;1;3;;@Override public void writeTo(BufferedSink sink) throws IOException {     delegate().writeTo(Okio.buffer(uppercaseSink(sink))). }
true;private;1;10;/**  * Returns a request that transforms {@code request} to be all uppercase.  */ ;/**  * Returns a request that transforms {@code request} to be all uppercase.  */ private Request uppercaseRequest(Request request) {     RequestBody uppercaseBody = new ForwardingRequestBody(request.body()) {          @Override         public void writeTo(BufferedSink sink) throws IOException {             delegate().writeTo(Okio.buffer(uppercaseSink(sink))).         }     }.     return request.newBuilder().method(request.method(), uppercaseBody).build(). }
false;public;2;4;;@Override public void write(Buffer source, long byteCount) throws IOException {     ByteString bytes = source.readByteString(byteCount).     delegate().write(new Buffer().write(bytes.toAsciiUppercase()), byteCount). }
false;private;1;8;;private Sink uppercaseSink(Sink sink) {     return new ForwardingSink(sink) {          @Override         public void write(Buffer source, long byteCount) throws IOException {             ByteString bytes = source.readByteString(byteCount).             delegate().write(new Buffer().write(bytes.toAsciiUppercase()), byteCount).         }     }. }
