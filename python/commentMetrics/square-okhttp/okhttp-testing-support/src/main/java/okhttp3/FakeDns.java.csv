commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * Sets the results for {@code hostname}.  */ ;/**  * Sets the results for {@code hostname}.  */ public FakeDns set(String hostname, List<InetAddress> addresses) {     hostAddresses.put(hostname, addresses).     return this. }
true;public;1;4;/**  * Clears the results for {@code hostname}.  */ ;/**  * Clears the results for {@code hostname}.  */ public FakeDns clear(String hostname) {     hostAddresses.remove(hostname).     return this. }
false;public;2;3;;public InetAddress lookup(String hostname, int index) throws UnknownHostException {     return hostAddresses.get(hostname).get(index). }
false;public;1;8;;@Override public List<InetAddress> lookup(String hostname) throws UnknownHostException {     requestedHosts.add(hostname).     List<InetAddress> result = hostAddresses.get(hostname).     if (result != null)         return result.     throw new UnknownHostException(). }
false;public;1;4;;public void assertRequests(String... expectedHosts) {     assertEquals(Arrays.asList(expectedHosts), requestedHosts).     requestedHosts.clear(). }
true;public;1;15;/**  * Allocates and returns {@code count} fake addresses like [255.0.0.100, 255.0.0.101].  */ ;/**  * Allocates and returns {@code count} fake addresses like [255.0.0.100, 255.0.0.101].  */ public List<InetAddress> allocate(int count) {     try {         List<InetAddress> result = new ArrayList<>().         for (int i = 0. i < count. i++) {             if (nextAddress > 255) {                 throw new AssertionError("too many addresses allocated").             }             result.add(InetAddress.getByAddress(new byte[] { (byte) 255, (byte) 0, (byte) 0, (byte) nextAddress++ })).         }         return result.     } catch (UnknownHostException e) {         throw new AssertionError().     } }
