commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public void onOpen(EventSource eventSource, Response response) {     Platform.get().log(Platform.INFO, "[ES] onOpen", null).     events.add(new Open(eventSource, response)). }
false;public;4;5;;@Override public void onEvent(EventSource eventSource, @Nullable String id, @Nullable String type, String data) {     Platform.get().log(Platform.INFO, "[ES] onEvent", null).     events.add(new Event(id, type, data)). }
false;public;1;4;;@Override public void onClosed(EventSource eventSource) {     Platform.get().log(Platform.INFO, "[ES] onClosed", null).     events.add(new Closed()). }
false;public;3;5;;@Override public void onFailure(EventSource eventSource, @Nullable Throwable t, @Nullable Response response) {     Platform.get().log(Platform.INFO, "[ES] onFailure", t).     events.add(new Failure(t, response)). }
false;private;0;11;;private Object nextEvent() {     try {         Object event = events.poll(10, SECONDS).         if (event == null) {             throw new AssertionError("Timed out waiting for event.").         }         return event.     } catch (InterruptedException e) {         throw new AssertionError(e).     } }
false;public;0;3;;public void assertExhausted() {     assertTrue("Remaining events: " + events, events.isEmpty()). }
false;public;3;4;;public void assertEvent(@Nullable String id, @Nullable String type, String data) {     Object actual = nextEvent().     assertEquals(new Event(id, type, data), actual). }
false;public;0;7;;public EventSource assertOpen() {     Object event = nextEvent().     if (!(event instanceof Open)) {         throw new AssertionError("Expected Open but was " + event).     }     return ((Open) event).eventSource. }
false;public;0;6;;public void assertClose() {     Object event = nextEvent().     if (!(event instanceof Closed)) {         throw new AssertionError("Expected Open but was " + event).     } }
false;public;1;11;;public void assertFailure(@Nullable String message) {     Object event = nextEvent().     if (!(event instanceof Failure)) {         throw new AssertionError("Expected Failure but was " + event).     }     if (message != null) {         assertEquals(message, ((Failure) event).t.getMessage()).     } else {         assertNull(((Failure) event).t).     } }
false;public;0;3;;@Override public String toString() {     return "Open[" + response + ']'. }
false;public;0;6;;@Override public String toString() {     if (response == null) {         return "Failure[" + t + "]".     }     return "Failure[" + response + "]". }
false;public;0;3;;@Override public String toString() {     return "Closed[]". }
