commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@After public void after() {     listener.assertExhausted(). }
false;public;0;13;;@Test public void event() {     server.enqueue(new MockResponse().setBody("" + "data: hey\n" + "\n").setHeader("content-type", "text/event-stream")).     EventSource source = newEventSource().     assertEquals("/", source.request().url().encodedPath()).     listener.assertOpen().     listener.assertEvent(null, null, "hey").     listener.assertClose(). }
false;public;0;8;;@Test public void badContentType() {     server.enqueue(new MockResponse().setBody("" + "data: hey\n" + "\n").setHeader("content-type", "text/plain")).     EventSource source = newEventSource().     listener.assertFailure("Invalid content-type: text/plain"). }
false;public;0;8;;@Test public void badResponseCode() {     server.enqueue(new MockResponse().setBody("" + "data: hey\n" + "\n").setHeader("content-type", "text/event-stream").setResponseCode(401)).     EventSource source = newEventSource().     listener.assertFailure(null). }
false;public;0;18;;@Test public void callTimeoutIsNotApplied() throws Exception {     client = client.newBuilder().callTimeout(100, TimeUnit.MILLISECONDS).build().     server.enqueue(new MockResponse().setBodyDelay(500, TimeUnit.MILLISECONDS).setHeader("content-type", "text/event-stream").setBody("data: hey\n\n")).     EventSource source = newEventSource().     assertEquals("/", source.request().url().encodedPath()).     listener.assertOpen().     listener.assertEvent(null, null, "hey").     listener.assertClose(). }
false;private;0;7;;private EventSource newEventSource() {     Request request = new Request.Builder().url(server.url("/")).build().     EventSource.Factory factory = EventSources.createFactory(client).     return factory.newEventSource(request, listener). }
