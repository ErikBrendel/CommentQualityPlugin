commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;public void connect(OkHttpClient client) {     client = client.newBuilder().eventListener(EventListener.NONE).build().     call = client.newCall(request).     call.timeout().clearTimeout().     call.enqueue(this). }
false;public;2;3;;@Override public void onResponse(Call call, Response response) {     processResponse(response). }
false;public;1;35;;public void processResponse(Response response) {     try {         if (!response.isSuccessful()) {             listener.onFailure(this, null, response).             return.         }         ResponseBody body = response.body().         // noinspection ConstantConditions main body is never null         MediaType contentType = body.contentType().         if (!isEventStream(contentType)) {             listener.onFailure(this, new IllegalStateException("Invalid content-type: " + contentType), response).             return.         }         // Replace the body with an empty one so the callbacks can't see real data.         response = response.newBuilder().body(Util.EMPTY_RESPONSE).build().         ServerSentEventReader reader = new ServerSentEventReader(body.source(), this).         try {             listener.onOpen(this, response).             while (reader.processNextEvent()) {             }         } catch (Exception e) {             listener.onFailure(this, e, response).             return.         }         listener.onClosed(this).     } finally {         response.close().     } }
false;private,static;1;4;;private static boolean isEventStream(@Nullable MediaType contentType) {     return contentType != null && contentType.type().equals("text") && contentType.subtype().equals("event-stream"). }
false;public;2;3;;@Override public void onFailure(Call call, IOException e) {     listener.onFailure(this, e, null). }
false;public;0;3;;@Override public Request request() {     return request. }
false;public;0;3;;@Override public void cancel() {     call.cancel(). }
false;public;3;3;;@Override public void onEvent(@Nullable String id, @Nullable String type, String data) {     listener.onEvent(this, id, type, data). }
false;public;1;3;;@Override public void onRetryChange(long timeMs) { // Ignored. We do not auto-retry. }
