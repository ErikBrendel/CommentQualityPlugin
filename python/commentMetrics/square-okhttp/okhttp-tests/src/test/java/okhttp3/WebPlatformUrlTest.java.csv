commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;12;;@Parameterized.Parameters(name = "{0}") public static List<Object[]> parameters() {     try {         List<Object[]> result = new ArrayList<>().         for (WebPlatformUrlTestData urlTestData : loadTests()) {             result.add(new Object[] { urlTestData }).         }         return result.     } catch (IOException e) {         throw new AssertionError().     } }
true;public;0;26;/**  * Test how {@link HttpUrl} does against the web platform test suite.  */ ;/**  * Test how {@link HttpUrl} does against the web platform test suite.  */ @Test public void httpUrl() throws Exception {     if (!testData.scheme.isEmpty() && !HTTP_URL_SCHEMES.contains(testData.scheme)) {         System.err.println("Ignoring unsupported scheme " + testData.scheme).         return.     }     if (!testData.base.startsWith("https:") && !testData.base.startsWith("http:") && !testData.base.equals("about:blank")) {         System.err.println("Ignoring unsupported base " + testData.base).         return.     }     try {         testHttpUrl().         if (KNOWN_FAILURES.contains(testData.toString())) {             System.err.println("Expected failure but was success: " + testData).         }     } catch (Throwable e) {         if (KNOWN_FAILURES.contains(testData.toString())) {             System.err.println("Ignoring known failure: " + testData).             e.printStackTrace().         } else {             throw e.         }     } }
false;private;0;29;;private void testHttpUrl() {     HttpUrl url.     if (testData.base.equals("about:blank")) {         url = HttpUrl.parse(testData.input).     } else {         HttpUrl baseUrl = HttpUrl.get(testData.base).         url = baseUrl.resolve(testData.input).     }     if (testData.expectParseFailure()) {         assertNull("Expected URL to fail parsing", url).     } else {         assertNotNull("Expected URL to parse successfully, but was null", url).         String effectivePort = url.port() != HttpUrl.defaultPort(url.scheme()) ? Integer.toString(url.port()) : "".         String effectiveQuery = url.encodedQuery() != null ? "?" + url.encodedQuery() : "".         String effectiveFragment = url.encodedFragment() != null ? "#" + url.encodedFragment() : "".         String effectiveHost = url.host().contains(":") ? ("[" + url.host() + "]") : url.host().         assertEquals("scheme", testData.scheme, url.scheme()).         assertEquals("host", testData.host, effectiveHost).         assertEquals("port", testData.port, effectivePort).         assertEquals("path", testData.path, url.encodedPath()).         assertEquals("query", testData.query, effectiveQuery).         assertEquals("fragment", testData.fragment, effectiveFragment).     } }
false;private,static;0;5;;private static List<WebPlatformUrlTestData> loadTests() throws IOException {     BufferedSource source = Okio.buffer(Okio.source(WebPlatformUrlTest.class.getResourceAsStream("/web-platform-test-urltestdata.txt"))).     return WebPlatformUrlTestData.load(source). }
