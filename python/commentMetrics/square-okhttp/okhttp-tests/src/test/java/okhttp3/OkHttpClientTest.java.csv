commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Before public void setUp() throws Exception {     server.start(). }
false;public;0;6;;@After public void tearDown() throws Exception {     server.shutdown().     ProxySelector.setDefault(DEFAULT_PROXY_SELECTOR).     CookieManager.setDefault(DEFAULT_COOKIE_HANDLER).     ResponseCache.setDefault(DEFAULT_RESPONSE_CACHE). }
false;public;0;8;;@Test public void durationDefaults() {     OkHttpClient client = defaultClient().     assertEquals(0, client.callTimeoutMillis()).     assertEquals(10_000, client.connectTimeoutMillis()).     assertEquals(10_000, client.readTimeoutMillis()).     assertEquals(10_000, client.writeTimeoutMillis()).     assertEquals(0, client.pingIntervalMillis()). }
false;public;0;35;;@Test public void timeoutValidRange() {     OkHttpClient.Builder builder = new OkHttpClient.Builder().     try {         builder.callTimeout(1, TimeUnit.NANOSECONDS).     } catch (IllegalArgumentException ignored) {     }     try {         builder.connectTimeout(1, TimeUnit.NANOSECONDS).     } catch (IllegalArgumentException ignored) {     }     try {         builder.writeTimeout(1, TimeUnit.NANOSECONDS).     } catch (IllegalArgumentException ignored) {     }     try {         builder.readTimeout(1, TimeUnit.NANOSECONDS).     } catch (IllegalArgumentException ignored) {     }     try {         builder.callTimeout(365, TimeUnit.DAYS).     } catch (IllegalArgumentException ignored) {     }     try {         builder.connectTimeout(365, TimeUnit.DAYS).     } catch (IllegalArgumentException ignored) {     }     try {         builder.writeTimeout(365, TimeUnit.DAYS).     } catch (IllegalArgumentException ignored) {     }     try {         builder.readTimeout(365, TimeUnit.DAYS).     } catch (IllegalArgumentException ignored) {     } }
false;public;0;10;;@Test public void clonedInterceptorsListsAreIndependent() throws Exception {     Interceptor interceptor = chain -> chain.proceed(chain.request()).     OkHttpClient original = defaultClient().     original.newBuilder().addInterceptor(interceptor).addNetworkInterceptor(interceptor).build().     assertEquals(0, original.interceptors().size()).     assertEquals(0, original.networkInterceptors().size()). }
true;public;0;15;/**  * When copying the client, stateful things like the connection pool are shared across all  * clients.  */ ;/**  * When copying the client, stateful things like the connection pool are shared across all  * clients.  */ @Test public void cloneSharesStatefulInstances() throws Exception {     OkHttpClient client = defaultClient().     // Values should be non-null.     OkHttpClient a = client.newBuilder().build().     assertNotNull(a.dispatcher()).     assertNotNull(a.connectionPool()).     assertNotNull(a.sslSocketFactory()).     // Multiple clients share the instances.     OkHttpClient b = client.newBuilder().build().     assertSame(a.dispatcher(), b.dispatcher()).     assertSame(a.connectionPool(), b.connectionPool()).     assertSame(a.sslSocketFactory(), b.sslSocketFactory()). }
false;public;0;8;;@Test public void setProtocolsRejectsHttp10() throws Exception {     OkHttpClient.Builder builder = new OkHttpClient.Builder().     try {         builder.protocols(Arrays.asList(Protocol.HTTP_1_0, Protocol.HTTP_1_1)).         fail().     } catch (IllegalArgumentException expected) {     } }
false;public;0;5;;@Test public void certificatePinnerEquality() {     OkHttpClient clientA = TestUtil.defaultClient().     OkHttpClient clientB = TestUtil.defaultClient().     assertEquals(clientA.certificatePinner(), clientB.certificatePinner()). }
false;public;0;9;;@Test public void nullInterceptor() {     OkHttpClient.Builder builder = new OkHttpClient.Builder().     try {         builder.addInterceptor(null).         fail().     } catch (IllegalArgumentException expected) {         assertEquals("interceptor == null", expected.getMessage()).     } }
false;public;0;9;;@Test public void nullNetworkInterceptor() {     OkHttpClient.Builder builder = new OkHttpClient.Builder().     try {         builder.addNetworkInterceptor(null).         fail().     } catch (IllegalArgumentException expected) {         assertEquals("interceptor == null", expected.getMessage()).     } }
false;public;0;10;;@Test public void nullInterceptorInList() {     OkHttpClient.Builder builder = new OkHttpClient.Builder().     builder.interceptors().add(null).     try {         builder.build().         fail().     } catch (IllegalStateException expected) {         assertEquals("Null interceptor: [null]", expected.getMessage()).     } }
false;public;0;10;;@Test public void nullNetworkInterceptorInList() {     OkHttpClient.Builder builder = new OkHttpClient.Builder().     builder.networkInterceptors().add(null).     try {         builder.build().         fail().     } catch (IllegalStateException expected) {         assertEquals("Null network interceptor: [null]", expected.getMessage()).     } }
false;public;0;10;;@Test public void testH2PriorKnowledgeOkHttpClientConstructionFallback() {     try {         new OkHttpClient.Builder().protocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.HTTP_1_1)).         fail().     } catch (IllegalArgumentException expected) {         assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: " + "[h2_prior_knowledge, http/1.1]", expected.getMessage()).     } }
false;public;0;10;;@Test public void testH2PriorKnowledgeOkHttpClientConstructionDuplicates() {     try {         new OkHttpClient.Builder().protocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE, Protocol.H2_PRIOR_KNOWLEDGE)).         fail().     } catch (IllegalArgumentException expected) {         assertEquals("protocols containing h2_prior_knowledge cannot use other protocols: " + "[h2_prior_knowledge, h2_prior_knowledge]", expected.getMessage()).     } }
false;public;0;7;;@Test public void testH2PriorKnowledgeOkHttpClientConstructionSuccess() {     OkHttpClient okHttpClient = new OkHttpClient.Builder().protocols(Arrays.asList(Protocol.H2_PRIOR_KNOWLEDGE)).build().     assertEquals(1, okHttpClient.protocols().size()).     assertEquals(Protocol.H2_PRIOR_KNOWLEDGE, okHttpClient.protocols().get(0)). }
false;public;0;12;;@Test public void nullDefaultProxySelector() throws Exception {     server.enqueue(new MockResponse().setBody("abc")).     ProxySelector.setDefault(null).     OkHttpClient client = defaultClient().newBuilder().build().     Request request = new Request.Builder().url(server.url("/")).build().     Response response = client.newCall(request).execute().     assertEquals("abc", response.body().string()). }
false;public;0;8;;@Test public void sslSocketFactorySetAsSocketFactory() throws Exception {     OkHttpClient.Builder builder = new OkHttpClient.Builder().     try {         builder.socketFactory(SSLSocketFactory.getDefault()).         fail().     } catch (IllegalArgumentException expected) {     } }
