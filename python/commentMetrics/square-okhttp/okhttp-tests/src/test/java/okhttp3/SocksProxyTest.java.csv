commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() throws Exception {     server.start().     socksProxy.play(). }
false;public;0;4;;@After public void tearDown() throws Exception {     server.shutdown().     socksProxy.shutdown(). }
false;public;0;19;;@Test public void proxy() throws Exception {     server.enqueue(new MockResponse().setBody("abc")).     server.enqueue(new MockResponse().setBody("def")).     OkHttpClient client = defaultClient().newBuilder().proxy(socksProxy.proxy()).build().     Request request1 = new Request.Builder().url(server.url("/")).build().     Response response1 = client.newCall(request1).execute().     assertEquals("abc", response1.body().string()).     Request request2 = new Request.Builder().url(server.url("/")).build().     Response response2 = client.newCall(request2).execute().     assertEquals("def", response2.body().string()).     // The HTTP calls should share a single connection.     assertEquals(1, socksProxy.connectionCount()). }
false;public;1;3;;@Override public List<Proxy> select(URI uri) {     return Collections.singletonList(socksProxy.proxy()). }
false;public;3;3;;@Override public void connectFailed(URI uri, SocketAddress socketAddress, IOException e) {     throw new AssertionError(). }
false;public;0;23;;@Test public void proxySelector() throws Exception {     server.enqueue(new MockResponse().setBody("abc")).     ProxySelector proxySelector = new ProxySelector() {          @Override         public List<Proxy> select(URI uri) {             return Collections.singletonList(socksProxy.proxy()).         }          @Override         public void connectFailed(URI uri, SocketAddress socketAddress, IOException e) {             throw new AssertionError().         }     }.     OkHttpClient client = defaultClient().newBuilder().proxySelector(proxySelector).build().     Request request = new Request.Builder().url(server.url("/")).build().     Response response = client.newCall(request).execute().     assertEquals("abc", response.body().string()).     assertEquals(1, socksProxy.connectionCount()). }
false;public;0;19;;@Test public void checkRemoteDNSResolve() throws Exception {     // This testcase will fail if the target is resolved locally instead of through the proxy.     server.enqueue(new MockResponse().setBody("abc")).     OkHttpClient client = defaultClient().newBuilder().proxy(socksProxy.proxy()).build().     HttpUrl url = server.url("/").newBuilder().host(SocksProxy.HOSTNAME_THAT_ONLY_THE_PROXY_KNOWS).build().     Request request = new Request.Builder().url(url).build().     Response response1 = client.newCall(request).execute().     assertEquals("abc", response1.body().string()).     assertEquals(1, socksProxy.connectionCount()). }
