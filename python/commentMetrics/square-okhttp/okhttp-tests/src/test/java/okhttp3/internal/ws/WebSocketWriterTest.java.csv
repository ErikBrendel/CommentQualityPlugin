commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void evaluate() throws Throwable {     base.evaluate().     assertEquals("Data not empty", "", data.readByteString().hex()). }
false;public;0;12;;@Test public void serverTextMessage() throws IOException {     BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, -1)).     sink.writeUtf8("Hel").flush().     assertData("010348656c").     sink.writeUtf8("lo").flush().     assertData("00026c6f").     sink.close().     assertData("8000"). }
false;public;0;13;;@Test public void serverSmallBufferedPayloadWrittenAsOneFrame() throws IOException {     int length = 5.     byte[] bytes = binaryData(length).     RequestBody body = RequestBody.create(null, bytes).     BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, length)).     body.writeTo(sink).     sink.close().     assertData("8105").     assertData(bytes).     assertTrue(data.exhausted()). }
false;public;0;14;;@Test public void serverLargeBufferedPayloadWrittenAsOneFrame() throws IOException {     int length = 12345.     byte[] bytes = binaryData(length).     RequestBody body = RequestBody.create(null, bytes).     BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, length)).     body.writeTo(sink).     sink.close().     assertData("817e").     assertData(Util.format("%04x", length)).     assertData(bytes).     assertTrue(data.exhausted()). }
false;public;0;27;;@Test public void serverLargeNonBufferedPayloadWrittenAsMultipleFrames() throws IOException {     int length = 100_000.     Buffer bytes = new Buffer().write(binaryData(length)).     BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, length)).     Buffer body = bytes.clone().     sink.write(body.readByteString(20_000)).     sink.write(body.readByteString(20_000)).     sink.write(body.readByteString(20_000)).     sink.write(body.readByteString(20_000)).     sink.write(body.readByteString(20_000)).     sink.close().     assertData("017e4000").     assertData(bytes.readByteArray(16_384)).     assertData("007e4000").     assertData(bytes.readByteArray(16_384)).     assertData("007e6000").     assertData(bytes.readByteArray(24_576)).     assertData("007e4000").     assertData(bytes.readByteArray(16_384)).     assertData("007e6000").     assertData(bytes.readByteArray(24_576)).     assertData("807e06a0").     assertData(bytes.readByteArray(1_696)).     assertTrue(data.exhausted()). }
false;public;0;9;;@Test public void closeFlushes() throws IOException {     BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_TEXT, -1)).     sink.writeUtf8("Hel").flush().     assertData("010348656c").     sink.writeUtf8("lo").close().     assertData("80026c6f"). }
false;public;0;15;;@Test public void noWritesAfterClose() throws IOException {     Sink sink = serverWriter.newMessageSink(OPCODE_TEXT, -1).     sink.close().     assertData("8100").     Buffer payload = new Buffer().writeUtf8("Hello").     try {         // Write to the unbuffered sink as BufferedSink keeps its own closed state.         sink.write(payload, payload.size()).         fail().     } catch (IOException e) {         assertEquals("closed", e.getMessage()).     } }
false;public;0;12;;@Test public void clientTextMessage() throws IOException {     BufferedSink sink = Okio.buffer(clientWriter.newMessageSink(OPCODE_TEXT, -1)).     sink.writeUtf8("Hel").flush().     assertData("018360b420bb28d14c").     sink.writeUtf8("lo").flush().     assertData("00823851d9d4543e").     sink.close().     assertData("80807acb933d"). }
false;public;0;18;;@Test public void serverBinaryMessage() throws IOException {     ByteString data = ByteString.decodeHex("" + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7" + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2").     BufferedSink sink = Okio.buffer(serverWriter.newMessageSink(OPCODE_BINARY, -1)).     sink.write(data).flush().     assertData("0232").     assertData(data).     sink.write(data).flush().     assertData("0032").     assertData(data).     sink.close().     assertData("8000"). }
false;public;0;19;;@Test public void serverMessageLengthShort() throws IOException {     Sink sink = serverWriter.newMessageSink(OPCODE_BINARY, -1).     // Create a payload which will overflow the normal payload byte size.     Buffer payload = new Buffer().     while (payload.completeSegmentByteCount() <= PAYLOAD_BYTE_MAX) {         payload.writeByte('0').     }     long byteCount = payload.completeSegmentByteCount().     // Write directly to the unbuffered sink. This ensures it will become single frame.     sink.write(payload.clone(), byteCount).     // 'e' == 4-byte follow-up length.     assertData("027e").     assertData(Util.format("%04X", payload.completeSegmentByteCount())).     assertData(payload.readByteArray()).     sink.close().     assertData("8000"). }
false;public;0;19;;@Test public void serverMessageLengthLong() throws IOException {     Sink sink = serverWriter.newMessageSink(OPCODE_BINARY, -1).     // Create a payload which will overflow the normal and short payload byte size.     Buffer payload = new Buffer().     while (payload.completeSegmentByteCount() <= PAYLOAD_SHORT_MAX) {         payload.writeByte('0').     }     long byteCount = payload.completeSegmentByteCount().     // Write directly to the unbuffered sink. This ensures it will become single frame.     sink.write(payload.clone(), byteCount).     // 'f' == 16-byte follow-up length.     assertData("027f").     assertData(Util.format("%016X", byteCount)).     assertData(payload.readByteArray(byteCount)).     sink.close().     assertData("8000"). }
false;public;0;21;;@Test public void clientBinary() throws IOException {     ByteString data = ByteString.decodeHex("" + "60b420bb3851d9d47acb933dbe70399bf6c92da33af01d4fb7" + "70e98c0325f41d3ebaf8986da712c82bcd4d554bf0b54023c2").     BufferedSink sink = Okio.buffer(clientWriter.newMessageSink(OPCODE_BINARY, -1)).     sink.write(data).flush().     assertData("02b2").     assertData("60b420bb").     assertData("" + "0000000058e5f96f1a7fb386dec41920967d0d185a443df4d7" + "c4c9376391d4a65e0ed8230d1332734b796dee2b4495fb4376").     sink.write(data).close().     assertData("80b2").     assertData("3851d9d4").     assertData("" + "58e5f96f00000000429a4ae98621e04fce98f47702a1c49b8f" + "2130583b742dc906eb214c55f6cb1c139c948173a16c941b93"). }
false;public;0;4;;@Test public void serverEmptyClose() throws IOException {     serverWriter.writeClose(0, null).     assertData("8800"). }
false;public;0;4;;@Test public void serverCloseWithCode() throws IOException {     serverWriter.writeClose(1001, null).     assertData("880203e9"). }
false;public;0;4;;@Test public void serverCloseWithCodeAndReason() throws IOException {     serverWriter.writeClose(1001, ByteString.encodeUtf8("Hello")).     assertData("880703e948656c6c6f"). }
false;public;0;4;;@Test public void clientEmptyClose() throws IOException {     clientWriter.writeClose(0, null).     assertData("888060b420bb"). }
false;public;0;4;;@Test public void clientCloseWithCode() throws IOException {     clientWriter.writeClose(1001, null).     assertData("888260b420bb635d"). }
false;public;0;4;;@Test public void clientCloseWithCodeAndReason() throws IOException {     clientWriter.writeClose(1001, ByteString.encodeUtf8("Hello")).     assertData("888760b420bb635d68de0cd84f"). }
false;public;0;4;;@Test public void closeWithOnlyReasonThrows() throws IOException {     clientWriter.writeClose(0, ByteString.encodeUtf8("Hello")).     assertData("888760b420bb60b468de0cd84f"). }
false;public;0;8;;@Test public void closeCodeOutOfRangeThrows() throws IOException {     try {         clientWriter.writeClose(98724976, ByteString.encodeUtf8("Hello")).         fail().     } catch (IllegalArgumentException e) {         assertEquals("Code must be in range [1000,5000): 98724976", e.getMessage()).     } }
false;public;0;8;;@Test public void closeReservedThrows() throws IOException {     try {         clientWriter.writeClose(1005, ByteString.encodeUtf8("Hello")).         fail().     } catch (IllegalArgumentException e) {         assertEquals("Code 1005 is reserved and may not be used.", e.getMessage()).     } }
false;public;0;4;;@Test public void serverEmptyPing() throws IOException {     serverWriter.writePing(ByteString.EMPTY).     assertData("8900"). }
false;public;0;4;;@Test public void clientEmptyPing() throws IOException {     clientWriter.writePing(ByteString.EMPTY).     assertData("898060b420bb"). }
false;public;0;4;;@Test public void serverPingWithPayload() throws IOException {     serverWriter.writePing(ByteString.encodeUtf8("Hello")).     assertData("890548656c6c6f"). }
false;public;0;4;;@Test public void clientPingWithPayload() throws IOException {     clientWriter.writePing(ByteString.encodeUtf8("Hello")).     assertData("898560b420bb28d14cd70f"). }
false;public;0;4;;@Test public void serverEmptyPong() throws IOException {     serverWriter.writePong(ByteString.EMPTY).     assertData("8a00"). }
false;public;0;4;;@Test public void clientEmptyPong() throws IOException {     clientWriter.writePong(ByteString.EMPTY).     assertData("8a8060b420bb"). }
false;public;0;4;;@Test public void serverPongWithPayload() throws IOException {     serverWriter.writePong(ByteString.encodeUtf8("Hello")).     assertData("8a0548656c6c6f"). }
false;public;0;4;;@Test public void clientPongWithPayload() throws IOException {     clientWriter.writePong(ByteString.encodeUtf8("Hello")).     assertData("8a8560b420bb28d14cd70f"). }
false;public;0;8;;@Test public void pingTooLongThrows() throws IOException {     try {         serverWriter.writePing(ByteString.of(binaryData(1000))).         fail().     } catch (IllegalArgumentException e) {         assertEquals("Payload size must be less than or equal to 125", e.getMessage()).     } }
false;public;0;8;;@Test public void pongTooLongThrows() throws IOException {     try {         serverWriter.writePong(ByteString.of(binaryData(1000))).         fail().     } catch (IllegalArgumentException e) {         assertEquals("Payload size must be less than or equal to 125", e.getMessage()).     } }
false;public;0;9;;@Test public void closeTooLongThrows() throws IOException {     try {         ByteString longReason = ByteString.encodeUtf8(repeat('X', 124)).         serverWriter.writeClose(1000, longReason).         fail().     } catch (IllegalArgumentException e) {         assertEquals("Payload size must be less than or equal to 125", e.getMessage()).     } }
false;public;0;9;;@Test public void twoMessageSinksThrows() {     clientWriter.newMessageSink(OPCODE_TEXT, -1).     try {         clientWriter.newMessageSink(OPCODE_TEXT, -1).         fail().     } catch (IllegalStateException e) {         assertEquals("Another message writer is active. Did you call close()?", e.getMessage()).     } }
false;private;1;3;;private void assertData(String hex) throws EOFException {     assertData(ByteString.decodeHex(hex)). }
false;private;1;4;;private void assertData(ByteString expected) throws EOFException {     ByteString actual = data.readByteString(expected.size()).     assertEquals(expected, actual). }
false;private;1;9;;private void assertData(byte[] data) throws IOException {     int byteCount = 16.     for (int i = 0. i < data.length. i += byteCount) {         int count = Math.min(byteCount, data.length - i).         Buffer expectedChunk = new Buffer().         expectedChunk.write(data, i, count).         assertEquals("At " + i, expectedChunk.readByteString(), this.data.readByteString(count)).     } }
false;private,static;1;5;;private static byte[] binaryData(int length) {     byte[] junk = new byte[length].     new Random(0).nextBytes(junk).     return junk. }
