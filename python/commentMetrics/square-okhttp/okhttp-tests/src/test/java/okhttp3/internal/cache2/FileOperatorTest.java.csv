commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() throws Exception {     file = tempDir.newFile().     randomAccessFile = new RandomAccessFile(file, "rw"). }
false;public;0;3;;@After public void tearDown() throws Exception {     randomAccessFile.close(). }
false;public;0;12;;@Test public void read() throws Exception {     write(ByteString.encodeUtf8("Hello, World")).     FileOperator operator = new FileOperator(randomAccessFile.getChannel()).     Buffer buffer = new Buffer().     operator.read(0, buffer, 5).     assertEquals("Hello", buffer.readUtf8()).     operator.read(4, buffer, 5).     assertEquals("o, Wo", buffer.readUtf8()). }
false;public;0;13;;@Test public void write() throws Exception {     FileOperator operator = new FileOperator(randomAccessFile.getChannel()).     Buffer buffer1 = new Buffer().writeUtf8("Hello, World").     operator.write(0, buffer1, 5).     assertEquals(", World", buffer1.readUtf8()).     Buffer buffer2 = new Buffer().writeUtf8("icopter!").     operator.write(3, buffer2, 7).     assertEquals("!", buffer2.readUtf8()).     assertEquals(ByteString.encodeUtf8("Helicopter"), snapshot()). }
false;public;0;31;;@Test public void readAndWrite() throws Exception {     FileOperator operator = new FileOperator(randomAccessFile.getChannel()).     write(ByteString.encodeUtf8("woman god creates dinosaurs destroys. ")).     Buffer buffer = new Buffer().     operator.read(6, buffer, 21).     operator.read(36, buffer, 1).     operator.read(5, buffer, 5).     operator.read(28, buffer, 8).     operator.read(17, buffer, 10).     operator.read(36, buffer, 2).     operator.read(2, buffer, 4).     operator.write(0, buffer, buffer.size()).     operator.read(0, buffer, 12).     operator.read(47, buffer, 3).     operator.read(45, buffer, 2).     operator.read(47, buffer, 3).     operator.read(26, buffer, 10).     operator.read(23, buffer, 3).     operator.write(47, buffer, buffer.size()).     operator.read(62, buffer, 6).     operator.read(4, buffer, 19).     operator.write(80, buffer, buffer.size()).     assertEquals(snapshot(), ByteString.encodeUtf8("" + "god creates dinosaurs. " + "god destroys dinosaurs. " + "god creates man. " + "man destroys god. " + "man creates dinosaurs. ")). }
false;public;0;25;;@Test public void multipleOperatorsShareOneFile() throws Exception {     FileOperator operatorA = new FileOperator(randomAccessFile.getChannel()).     FileOperator operatorB = new FileOperator(randomAccessFile.getChannel()).     Buffer bufferA = new Buffer().     Buffer bufferB = new Buffer().     bufferA.writeUtf8("Dodgson!\n").     operatorA.write(0, bufferA, 9).     bufferB.writeUtf8("You shouldn't use my name.\n").     operatorB.write(9, bufferB, 27).     bufferA.writeUtf8("Dodgson, we've got Dodgson here!\n").     operatorA.write(36, bufferA, 33).     operatorB.read(0, bufferB, 9).     assertEquals("Dodgson!\n", bufferB.readUtf8()).     operatorA.read(9, bufferA, 27).     assertEquals("You shouldn't use my name.\n", bufferA.readUtf8()).     operatorB.read(36, bufferB, 33).     assertEquals("Dodgson, we've got Dodgson here!\n", bufferB.readUtf8()). }
false;public;0;10;;@Test public void largeRead() throws Exception {     ByteString data = randomByteString(1000000).     write(data).     FileOperator operator = new FileOperator(randomAccessFile.getChannel()).     Buffer buffer = new Buffer().     operator.read(0, buffer, data.size()).     assertEquals(data, buffer.readByteString()). }
false;public;0;10;;@Test public void largeWrite() throws Exception {     ByteString data = randomByteString(1000000).     FileOperator operator = new FileOperator(randomAccessFile.getChannel()).     Buffer buffer = new Buffer().write(data).     operator.write(0, buffer, data.size()).     assertEquals(data, snapshot()). }
false;public;0;9;;@Test public void readBounds() throws Exception {     FileOperator operator = new FileOperator(randomAccessFile.getChannel()).     Buffer buffer = new Buffer().     try {         operator.read(0, buffer, -1L).         fail().     } catch (IndexOutOfBoundsException expected) {     } }
false;public;0;14;;@Test public void writeBounds() throws Exception {     FileOperator operator = new FileOperator(randomAccessFile.getChannel()).     Buffer buffer = new Buffer().writeUtf8("abc").     try {         operator.write(0, buffer, -1L).         fail().     } catch (IndexOutOfBoundsException expected) {     }     try {         operator.write(0, buffer, 4L).         fail().     } catch (IndexOutOfBoundsException expected) {     } }
false;private;1;5;;private ByteString randomByteString(int byteCount) {     byte[] bytes = new byte[byteCount].     new Random(0).nextBytes(bytes).     return ByteString.of(bytes). }
false;private;0;5;;private ByteString snapshot() throws IOException {     randomAccessFile.getChannel().force(false).     BufferedSource source = Okio.buffer(Okio.source(file)).     return source.readByteString(). }
false;private;1;5;;private void write(ByteString data) throws IOException {     BufferedSink sink = Okio.buffer(Okio.sink(file)).     sink.write(data).     sink.close(). }
