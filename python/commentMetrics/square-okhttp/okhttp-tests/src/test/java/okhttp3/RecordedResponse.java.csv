commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public RecordedResponse assertRequestUrl(HttpUrl url) {     assertEquals(url, request.url()).     return this. }
false;public;1;4;;public RecordedResponse assertRequestMethod(String method) {     assertEquals(method, request.method()).     return this. }
false;public;2;4;;public RecordedResponse assertRequestHeader(String name, String... values) {     assertEquals(Arrays.asList(values), request.headers(name)).     return this. }
false;public;1;4;;public RecordedResponse assertCode(int expectedCode) {     assertEquals(expectedCode, response.code()).     return this. }
false;public;0;4;;public RecordedResponse assertSuccessful() {     assertTrue(response.isSuccessful()).     return this. }
false;public;0;4;;public RecordedResponse assertNotSuccessful() {     assertFalse(response.isSuccessful()).     return this. }
false;public;2;4;;public RecordedResponse assertHeader(String name, String... values) {     assertEquals(Arrays.asList(values), response.headers(name)).     return this. }
false;public;1;4;;public RecordedResponse assertHeaders(Headers headers) {     assertEquals(headers, response.headers()).     return this. }
false;public;1;4;;public RecordedResponse assertBody(String expectedBody) {     assertEquals(expectedBody, body).     return this. }
false;public;0;10;;public RecordedResponse assertHandshake() {     Handshake handshake = response.handshake().     assertNotNull(handshake.tlsVersion()).     assertNotNull(handshake.cipherSuite()).     assertNotNull(handshake.peerPrincipal()).     assertEquals(1, handshake.peerCertificates().size()).     assertNull(handshake.localPrincipal()).     assertEquals(0, handshake.localCertificates().size()).     return this. }
true;public;0;6;/**  * Asserts that the current response was redirected and returns the prior response.  */ ;/**  * Asserts that the current response was redirected and returns the prior response.  */ public RecordedResponse priorResponse() {     Response priorResponse = response.priorResponse().     assertNotNull(priorResponse).     assertNull(priorResponse.body()).     return new RecordedResponse(priorResponse.request(), priorResponse, null, null, null). }
true;public;0;6;/**  * Asserts that the current response used the network and returns the network response.  */ ;/**  * Asserts that the current response used the network and returns the network response.  */ public RecordedResponse networkResponse() {     Response networkResponse = response.networkResponse().     assertNotNull(networkResponse).     assertNull(networkResponse.body()).     return new RecordedResponse(networkResponse.request(), networkResponse, null, null, null). }
true;public;0;4;/**  * Asserts that the current response didn't use the network.  */ ;/**  * Asserts that the current response didn't use the network.  */ public RecordedResponse assertNoNetworkResponse() {     assertNull(response.networkResponse()).     return this. }
true;public;0;4;/**  * Asserts that the current response didn't use the cache.  */ ;/**  * Asserts that the current response didn't use the cache.  */ public RecordedResponse assertNoCacheResponse() {     assertNull(response.cacheResponse()).     return this. }
true;public;0;6;/**  * Asserts that the current response used the cache and returns the cache response.  */ ;/**  * Asserts that the current response used the cache and returns the cache response.  */ public RecordedResponse cacheResponse() {     Response cacheResponse = response.cacheResponse().     assertNotNull(cacheResponse).     assertNull(cacheResponse.body()).     return new RecordedResponse(cacheResponse.request(), cacheResponse, null, null, null). }
false;public;1;12;;public RecordedResponse assertFailure(Class<?>... allowedExceptionTypes) {     boolean found = false.     for (Class expectedClass : allowedExceptionTypes) {         if (expectedClass.isInstance(failure)) {             found = true.             break.         }     }     assertTrue("Expected exception type among " + Arrays.toString(allowedExceptionTypes) + ", got " + failure, found).     return this. }
false;public;1;5;;public RecordedResponse assertFailure(String... messages) {     assertNotNull("No failure found", failure).     assertTrue(failure.getMessage(), Arrays.asList(messages).contains(failure.getMessage())).     return this. }
false;public;1;7;;public RecordedResponse assertFailureMatches(String... patterns) {     assertNotNull(failure).     for (String pattern : patterns) {         if (failure.getMessage().matches(pattern))             return this.     }     throw new AssertionError(failure.getMessage()). }
false;public;2;4;;public RecordedResponse assertSentRequestAtMillis(long minimum, long maximum) {     assertDateInRange(minimum, response.sentRequestAtMillis(), maximum).     return this. }
false;public;2;4;;public RecordedResponse assertReceivedResponseAtMillis(long minimum, long maximum) {     assertDateInRange(minimum, response.receivedResponseAtMillis(), maximum).     return this. }
false;private;3;4;;private void assertDateInRange(long minimum, long actual, long maximum) {     assertTrue("actual " + format(actual) + " < minimum " + format(maximum), actual >= minimum).     assertTrue("actual " + format(actual) + " > maximum " + format(minimum), actual <= maximum). }
false;private;1;3;;private String format(long time) {     return new SimpleDateFormat("HH:mm:ss.SSS").format(new Date(time)). }
false;public;0;3;;public String getBody() {     return body. }
