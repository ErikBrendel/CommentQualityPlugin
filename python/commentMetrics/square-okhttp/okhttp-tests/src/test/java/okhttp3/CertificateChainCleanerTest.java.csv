commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void equalsFromCertificate() {     HeldCertificate rootA = new HeldCertificate.Builder().serialNumber(1L).build().     HeldCertificate rootB = new HeldCertificate.Builder().serialNumber(2L).build().     assertEquals(CertificateChainCleaner.get(rootA.certificate(), rootB.certificate()), CertificateChainCleaner.get(rootB.certificate(), rootA.certificate())). }
false;public;0;7;;@Test public void equalsFromTrustManager() {     HandshakeCertificates handshakeCertificates = new HandshakeCertificates.Builder().build().     X509TrustManager x509TrustManager = handshakeCertificates.trustManager().     assertEquals(CertificateChainCleaner.get(x509TrustManager), CertificateChainCleaner.get(x509TrustManager)). }
false;public;0;7;;@Test public void normalizeSingleSelfSignedCertificate() throws Exception {     HeldCertificate root = new HeldCertificate.Builder().serialNumber(1L).build().     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate()).     assertEquals(list(root), cleaner.clean(list(root), "hostname")). }
false;public;0;12;;@Test public void normalizeUnknownSelfSignedCertificate() {     HeldCertificate root = new HeldCertificate.Builder().serialNumber(1L).build().     CertificateChainCleaner cleaner = CertificateChainCleaner.get().     try {         cleaner.clean(list(root), "hostname").         fail().     } catch (SSLPeerUnverifiedException expected) {     } }
false;public;0;16;;@Test public void orderedChainOfCertificatesWithRoot() throws Exception {     HeldCertificate root = new HeldCertificate.Builder().serialNumber(1L).build().     HeldCertificate certA = new HeldCertificate.Builder().serialNumber(2L).signedBy(root).build().     HeldCertificate certB = new HeldCertificate.Builder().serialNumber(3L).signedBy(certA).build().     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate()).     assertEquals(list(certB, certA, root), cleaner.clean(list(certB, certA, root), "hostname")). }
false;public;0;17;;@Test public void orderedChainOfCertificatesWithoutRoot() throws Exception {     HeldCertificate root = new HeldCertificate.Builder().serialNumber(1L).build().     HeldCertificate certA = new HeldCertificate.Builder().serialNumber(2L).signedBy(root).build().     HeldCertificate certB = new HeldCertificate.Builder().serialNumber(3L).signedBy(certA).build().     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate()).     assertEquals(list(certB, certA, root), // Root is added!     cleaner.clean(list(certB, certA), "hostname")). }
false;public;0;21;;@Test public void unorderedChainOfCertificatesWithRoot() throws Exception {     HeldCertificate root = new HeldCertificate.Builder().serialNumber(1L).build().     HeldCertificate certA = new HeldCertificate.Builder().serialNumber(2L).signedBy(root).build().     HeldCertificate certB = new HeldCertificate.Builder().serialNumber(3L).signedBy(certA).build().     HeldCertificate certC = new HeldCertificate.Builder().serialNumber(4L).signedBy(certB).build().     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate()).     assertEquals(list(certC, certB, certA, root), cleaner.clean(list(certC, certA, root, certB), "hostname")). }
false;public;0;21;;@Test public void unorderedChainOfCertificatesWithoutRoot() throws Exception {     HeldCertificate root = new HeldCertificate.Builder().serialNumber(1L).build().     HeldCertificate certA = new HeldCertificate.Builder().serialNumber(2L).signedBy(root).build().     HeldCertificate certB = new HeldCertificate.Builder().serialNumber(3L).signedBy(certA).build().     HeldCertificate certC = new HeldCertificate.Builder().serialNumber(4L).signedBy(certB).build().     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate()).     assertEquals(list(certC, certB, certA, root), cleaner.clean(list(certC, certA, certB), "hostname")). }
false;public;0;20;;@Test public void unrelatedCertificatesAreOmitted() throws Exception {     HeldCertificate root = new HeldCertificate.Builder().serialNumber(1L).build().     HeldCertificate certA = new HeldCertificate.Builder().serialNumber(2L).signedBy(root).build().     HeldCertificate certB = new HeldCertificate.Builder().serialNumber(3L).signedBy(certA).build().     HeldCertificate certUnnecessary = new HeldCertificate.Builder().serialNumber(4L).build().     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root.certificate()).     assertEquals(list(certB, certA, root), cleaner.clean(list(certB, certUnnecessary, certA, root), "hostname")). }
false;public;0;26;;@Test public void chainGoesAllTheWayToSelfSignedRoot() throws Exception {     HeldCertificate selfSigned = new HeldCertificate.Builder().serialNumber(1L).build().     HeldCertificate trusted = new HeldCertificate.Builder().serialNumber(2L).signedBy(selfSigned).build().     HeldCertificate certA = new HeldCertificate.Builder().serialNumber(3L).signedBy(trusted).build().     HeldCertificate certB = new HeldCertificate.Builder().serialNumber(4L).signedBy(certA).build().     CertificateChainCleaner cleaner = CertificateChainCleaner.get(selfSigned.certificate(), trusted.certificate()).     assertEquals(list(certB, certA, trusted, selfSigned), cleaner.clean(list(certB, certA), "hostname")).     assertEquals(list(certB, certA, trusted, selfSigned), cleaner.clean(list(certB, certA, trusted), "hostname")).     assertEquals(list(certB, certA, trusted, selfSigned), cleaner.clean(list(certB, certA, trusted, selfSigned), "hostname")). }
false;public;0;23;;@Test public void trustedRootNotSelfSigned() throws Exception {     HeldCertificate unknownSigner = new HeldCertificate.Builder().serialNumber(1L).build().     HeldCertificate trusted = new HeldCertificate.Builder().signedBy(unknownSigner).serialNumber(2L).build().     HeldCertificate intermediateCa = new HeldCertificate.Builder().signedBy(trusted).serialNumber(3L).build().     HeldCertificate certificate = new HeldCertificate.Builder().signedBy(intermediateCa).serialNumber(4L).build().     CertificateChainCleaner cleaner = CertificateChainCleaner.get(trusted.certificate()).     assertEquals(list(certificate, intermediateCa, trusted), cleaner.clean(list(certificate, intermediateCa), "hostname")).     assertEquals(list(certificate, intermediateCa, trusted), cleaner.clean(list(certificate, intermediateCa, trusted), "hostname")). }
false;public;0;12;;@Test public void chainMaxLength() throws Exception {     List<HeldCertificate> heldCertificates = chainOfLength(10).     List<Certificate> certificates = new ArrayList<>().     for (HeldCertificate heldCertificate : heldCertificates) {         certificates.add(heldCertificate.certificate()).     }     X509Certificate root = heldCertificates.get(heldCertificates.size() - 1).certificate().     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root).     assertEquals(certificates, cleaner.clean(certificates, "hostname")).     assertEquals(certificates, cleaner.clean(certificates.subList(0, 9), "hostname")). }
false;public;0;15;;@Test public void chainTooLong() {     List<HeldCertificate> heldCertificates = chainOfLength(11).     List<Certificate> certificates = new ArrayList<>().     for (HeldCertificate heldCertificate : heldCertificates) {         certificates.add(heldCertificate.certificate()).     }     X509Certificate root = heldCertificates.get(heldCertificates.size() - 1).certificate().     CertificateChainCleaner cleaner = CertificateChainCleaner.get(root).     try {         cleaner.clean(certificates, "hostname").         fail().     } catch (SSLPeerUnverifiedException expected) {     } }
true;private;1;10;/**  * Returns a chain starting at the leaf certificate and progressing to the root.  */ ;/**  * Returns a chain starting at the leaf certificate and progressing to the root.  */ private List<HeldCertificate> chainOfLength(int length) {     List<HeldCertificate> result = new ArrayList<>().     for (int i = 1. i <= length. i++) {         result.add(0, new HeldCertificate.Builder().signedBy(!result.isEmpty() ? result.get(0) : null).serialNumber(i).build()).     }     return result. }
false;private;1;7;;private List<Certificate> list(HeldCertificate... heldCertificates) {     List<Certificate> result = new ArrayList<>().     for (HeldCertificate heldCertificate : heldCertificates) {         result.add(heldCertificate.certificate()).     }     return result. }
