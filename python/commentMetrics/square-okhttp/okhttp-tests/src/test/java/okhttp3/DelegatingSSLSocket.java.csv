commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Override public void shutdownInput() throws IOException {     delegate.shutdownInput(). }
false;public;0;3;;@Override public void shutdownOutput() throws IOException {     delegate.shutdownOutput(). }
false;public;0;3;;@Override public String[] getSupportedCipherSuites() {     return delegate.getSupportedCipherSuites(). }
false;public;0;3;;@Override public String[] getEnabledCipherSuites() {     return delegate.getEnabledCipherSuites(). }
false;public;1;3;;@Override public void setEnabledCipherSuites(String[] suites) {     delegate.setEnabledCipherSuites(suites). }
false;public;0;3;;@Override public String[] getSupportedProtocols() {     return delegate.getSupportedProtocols(). }
false;public;0;3;;@Override public String[] getEnabledProtocols() {     return delegate.getEnabledProtocols(). }
false;public;1;3;;@Override public void setEnabledProtocols(String[] protocols) {     delegate.setEnabledProtocols(protocols). }
false;public;0;3;;@Override public SSLSession getSession() {     return delegate.getSession(). }
false;public;1;3;;@Override public void addHandshakeCompletedListener(HandshakeCompletedListener listener) {     delegate.addHandshakeCompletedListener(listener). }
false;public;1;3;;@Override public void removeHandshakeCompletedListener(HandshakeCompletedListener listener) {     delegate.removeHandshakeCompletedListener(listener). }
false;public;0;3;;@Override public void startHandshake() throws IOException {     delegate.startHandshake(). }
false;public;1;3;;@Override public void setUseClientMode(boolean mode) {     delegate.setUseClientMode(mode). }
false;public;0;3;;@Override public boolean getUseClientMode() {     return delegate.getUseClientMode(). }
false;public;1;3;;@Override public void setNeedClientAuth(boolean need) {     delegate.setNeedClientAuth(need). }
false;public;1;3;;@Override public void setWantClientAuth(boolean want) {     delegate.setWantClientAuth(want). }
false;public;0;3;;@Override public boolean getNeedClientAuth() {     return delegate.getNeedClientAuth(). }
false;public;0;3;;@Override public boolean getWantClientAuth() {     return delegate.getWantClientAuth(). }
false;public;1;3;;@Override public void setEnableSessionCreation(boolean flag) {     delegate.setEnableSessionCreation(flag). }
false;public;0;3;;@Override public boolean getEnableSessionCreation() {     return delegate.getEnableSessionCreation(). }
false;public;0;3;;@Override public SSLParameters getSSLParameters() {     return delegate.getSSLParameters(). }
false;public;1;3;;@Override public void setSSLParameters(SSLParameters p) {     delegate.setSSLParameters(p). }
false;public;0;3;;@Override public void close() throws IOException {     delegate.close(). }
false;public;0;3;;@Override public InetAddress getInetAddress() {     return delegate.getInetAddress(). }
false;public;0;3;;@Override public InputStream getInputStream() throws IOException {     return delegate.getInputStream(). }
false;public;0;3;;@Override public boolean getKeepAlive() throws SocketException {     return delegate.getKeepAlive(). }
false;public;0;3;;@Override public InetAddress getLocalAddress() {     return delegate.getLocalAddress(). }
false;public;0;3;;@Override public int getLocalPort() {     return delegate.getLocalPort(). }
false;public;0;3;;@Override public OutputStream getOutputStream() throws IOException {     return delegate.getOutputStream(). }
false;public;0;3;;@Override public int getPort() {     return delegate.getPort(). }
false;public;0;3;;@Override public int getSoLinger() throws SocketException {     return delegate.getSoLinger(). }
false;public;0;3;;@Override public int getReceiveBufferSize() throws SocketException {     return delegate.getReceiveBufferSize(). }
false;public;0;3;;@Override public int getSendBufferSize() throws SocketException {     return delegate.getSendBufferSize(). }
false;public;0;3;;@Override public int getSoTimeout() throws SocketException {     return delegate.getSoTimeout(). }
false;public;0;3;;@Override public boolean getTcpNoDelay() throws SocketException {     return delegate.getTcpNoDelay(). }
false;public;1;3;;@Override public void setKeepAlive(boolean keepAlive) throws SocketException {     delegate.setKeepAlive(keepAlive). }
false;public;1;3;;@Override public void setSendBufferSize(int size) throws SocketException {     delegate.setSendBufferSize(size). }
false;public;1;3;;@Override public void setReceiveBufferSize(int size) throws SocketException {     delegate.setReceiveBufferSize(size). }
false;public;2;3;;@Override public void setSoLinger(boolean on, int timeout) throws SocketException {     delegate.setSoLinger(on, timeout). }
false;public;1;3;;@Override public void setSoTimeout(int timeout) throws SocketException {     delegate.setSoTimeout(timeout). }
false;public;1;3;;@Override public void setTcpNoDelay(boolean on) throws SocketException {     delegate.setTcpNoDelay(on). }
false;public;0;3;;@Override public String toString() {     return delegate.toString(). }
false;public;0;3;;@Override public SocketAddress getLocalSocketAddress() {     return delegate.getLocalSocketAddress(). }
false;public;0;3;;@Override public SocketAddress getRemoteSocketAddress() {     return delegate.getRemoteSocketAddress(). }
false;public;0;3;;@Override public boolean isBound() {     return delegate.isBound(). }
false;public;0;3;;@Override public boolean isConnected() {     return delegate.isConnected(). }
false;public;0;3;;@Override public boolean isClosed() {     return delegate.isClosed(). }
false;public;1;3;;@Override public void bind(SocketAddress localAddr) throws IOException {     delegate.bind(localAddr). }
false;public;1;3;;@Override public void connect(SocketAddress remoteAddr) throws IOException {     delegate.connect(remoteAddr). }
false;public;2;3;;@Override public void connect(SocketAddress remoteAddr, int timeout) throws IOException {     delegate.connect(remoteAddr, timeout). }
false;public;0;3;;@Override public boolean isInputShutdown() {     return delegate.isInputShutdown(). }
false;public;0;3;;@Override public boolean isOutputShutdown() {     return delegate.isOutputShutdown(). }
false;public;1;3;;@Override public void setReuseAddress(boolean reuse) throws SocketException {     delegate.setReuseAddress(reuse). }
false;public;0;3;;@Override public boolean getReuseAddress() throws SocketException {     return delegate.getReuseAddress(). }
false;public;1;3;;@Override public void setOOBInline(boolean oobinline) throws SocketException {     delegate.setOOBInline(oobinline). }
false;public;0;3;;@Override public boolean getOOBInline() throws SocketException {     return delegate.getOOBInline(). }
false;public;1;3;;@Override public void setTrafficClass(int value) throws SocketException {     delegate.setTrafficClass(value). }
false;public;0;3;;@Override public int getTrafficClass() throws SocketException {     return delegate.getTrafficClass(). }
false;public;1;3;;@Override public void sendUrgentData(int value) throws IOException {     delegate.sendUrgentData(value). }
false;public;0;3;;@Override public SocketChannel getChannel() {     return delegate.getChannel(). }
false;public;3;3;;@Override public void setPerformancePreferences(int connectionTime, int latency, int bandwidth) {     delegate.setPerformancePreferences(connectionTime, latency, bandwidth). }
false;public;0;7;;// Java 9 methods. public SSLSession getHandshakeSession() {     try {         return (SSLSession) SSLSocket.class.getMethod("getHandshakeSession").invoke(delegate).     } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {         throw new AssertionError().     } }
false;public;0;7;;public String getApplicationProtocol() {     try {         return (String) SSLSocket.class.getMethod("getApplicationProtocol").invoke(delegate).     } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {         throw new AssertionError().     } }
false;public;0;7;;public String getHandshakeApplicationProtocol() {     try {         return (String) SSLSocket.class.getMethod("getHandshakeApplicationProtocol").invoke(delegate).     } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {         throw new AssertionError().     } }
false;public;2;8;;public <T> Socket setOption(SocketOption<T> name, T value) throws IOException {     try {         SSLSocket.class.getMethod("setOption", SocketOption.class, Object.class).invoke(delegate, name, value).         return this.     } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {         throw new AssertionError().     } }
false;public;1;8;;// Using reflection to delegate. @SuppressWarnings("unchecked") public <T> T getOption(SocketOption<T> name) throws IOException {     try {         return (T) SSLSocket.class.getMethod("getOption", SocketOption.class).invoke(delegate, name).     } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {         throw new AssertionError().     } }
false;public;0;8;;// Using reflection to delegate. @SuppressWarnings("unchecked") public Set<SocketOption<?>> supportedOptions() {     try {         return (Set<SocketOption<?>>) SSLSocket.class.getMethod("supportedOptions").invoke(delegate).     } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {         throw new AssertionError().     } }
