commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void stringEmpty() throws IOException {     ResponseBody body = body("").     assertEquals("", body.string()). }
false;public;0;4;;@Test public void stringLooksLikeBomButTooShort() throws IOException {     ResponseBody body = body("000048").     assertEquals("\0\0H", body.string()). }
false;public;0;4;;@Test public void stringDefaultsToUtf8() throws IOException {     ResponseBody body = body("68656c6c6f").     assertEquals("hello", body.string()). }
false;public;0;4;;@Test public void stringExplicitCharset() throws IOException {     ResponseBody body = body("00000068000000650000006c0000006c0000006f", "utf-32be").     assertEquals("hello", body.string()). }
false;public;0;4;;@Test public void stringBomOverridesExplicitCharset() throws IOException {     ResponseBody body = body("0000ffff00000068000000650000006c0000006c0000006f", "utf-8").     assertEquals("hello", body.string()). }
false;public;0;4;;@Test public void stringBomUtf8() throws IOException {     ResponseBody body = body("efbbbf68656c6c6f").     assertEquals("hello", body.string()). }
false;public;0;4;;@Test public void stringBomUtf16Be() throws IOException {     ResponseBody body = body("feff00680065006c006c006f").     assertEquals("hello", body.string()). }
false;public;0;4;;@Test public void stringBomUtf16Le() throws IOException {     ResponseBody body = body("fffe680065006c006c006f00").     assertEquals("hello", body.string()). }
false;public;0;4;;@Test public void stringBomUtf32Be() throws IOException {     ResponseBody body = body("0000ffff00000068000000650000006c0000006c0000006f").     assertEquals("hello", body.string()). }
false;public;0;4;;@Test public void stringBomUtf32Le() throws IOException {     ResponseBody body = body("ffff000068000000650000006c0000006c0000006f000000").     assertEquals("hello", body.string()). }
false;public;0;3;;@Override public MediaType contentType() {     return null. }
false;public;0;3;;@Override public long contentLength() {     return 5. }
false;public;0;4;;@Override public void close() throws IOException {     closed.set(true).     super.close(). }
false;public;0;9;;@Override public BufferedSource source() {     Buffer source = new Buffer().writeUtf8("hello").     return Okio.buffer(new ForwardingSource(source) {          @Override         public void close() throws IOException {             closed.set(true).             super.close().         }     }). }
false;public;0;24;;@Test public void stringClosesUnderlyingSource() throws IOException {     final AtomicBoolean closed = new AtomicBoolean().     ResponseBody body = new ResponseBody() {          @Override         public MediaType contentType() {             return null.         }          @Override         public long contentLength() {             return 5.         }          @Override         public BufferedSource source() {             Buffer source = new Buffer().writeUtf8("hello").             return Okio.buffer(new ForwardingSource(source) {                  @Override                 public void close() throws IOException {                     closed.set(true).                     super.close().                 }             }).         }     }.     assertEquals("hello", body.string()).     assertTrue(closed.get()). }
false;public;0;4;;@Test public void readerEmpty() throws IOException {     ResponseBody body = body("").     assertEquals("", exhaust(body.charStream())). }
false;public;0;4;;@Test public void readerLooksLikeBomButTooShort() throws IOException {     ResponseBody body = body("000048").     assertEquals("\0\0H", exhaust(body.charStream())). }
false;public;0;4;;@Test public void readerDefaultsToUtf8() throws IOException {     ResponseBody body = body("68656c6c6f").     assertEquals("hello", exhaust(body.charStream())). }
false;public;0;4;;@Test public void readerExplicitCharset() throws IOException {     ResponseBody body = body("00000068000000650000006c0000006c0000006f", "utf-32be").     assertEquals("hello", exhaust(body.charStream())). }
false;public;0;4;;@Test public void readerBomUtf8() throws IOException {     ResponseBody body = body("efbbbf68656c6c6f").     assertEquals("hello", exhaust(body.charStream())). }
false;public;0;4;;@Test public void readerBomUtf16Be() throws IOException {     ResponseBody body = body("feff00680065006c006c006f").     assertEquals("hello", exhaust(body.charStream())). }
false;public;0;4;;@Test public void readerBomUtf16Le() throws IOException {     ResponseBody body = body("fffe680065006c006c006f00").     assertEquals("hello", exhaust(body.charStream())). }
false;public;0;4;;@Test public void readerBomUtf32Be() throws IOException {     ResponseBody body = body("0000ffff00000068000000650000006c0000006c0000006f").     assertEquals("hello", exhaust(body.charStream())). }
false;public;0;4;;@Test public void readerBomUtf32Le() throws IOException {     ResponseBody body = body("ffff000068000000650000006c0000006c0000006f000000").     assertEquals("hello", exhaust(body.charStream())). }
false;public;0;3;;@Override public MediaType contentType() {     return null. }
false;public;0;3;;@Override public long contentLength() {     return 5. }
false;public;0;4;;@Override public void close() throws IOException {     closed.set(true).     super.close(). }
false;public;0;9;;@Override public BufferedSource source() {     ResponseBody body = body("fffe680065006c006c006f00").     return Okio.buffer(new ForwardingSource(body.source()) {          @Override         public void close() throws IOException {             closed.set(true).             super.close().         }     }). }
false;public;0;24;;@Test public void readerClosedBeforeBomClosesUnderlyingSource() throws IOException {     final AtomicBoolean closed = new AtomicBoolean().     ResponseBody body = new ResponseBody() {          @Override         public MediaType contentType() {             return null.         }          @Override         public long contentLength() {             return 5.         }          @Override         public BufferedSource source() {             ResponseBody body = body("fffe680065006c006c006f00").             return Okio.buffer(new ForwardingSource(body.source()) {                  @Override                 public void close() throws IOException {                     closed.set(true).                     super.close().                 }             }).         }     }.     body.charStream().close().     assertTrue(closed.get()). }
false;public;0;3;;@Override public MediaType contentType() {     return null. }
false;public;0;3;;@Override public long contentLength() {     return 5. }
false;public;0;4;;@Override public void close() throws IOException {     closed.set(true).     super.close(). }
false;public;0;9;;@Override public BufferedSource source() {     ResponseBody body = body("fffe680065006c006c006f00").     return Okio.buffer(new ForwardingSource(body.source()) {          @Override         public void close() throws IOException {             closed.set(true).             super.close().         }     }). }
false;public;0;26;;@Test public void readerClosedAfterBomClosesUnderlyingSource() throws IOException {     final AtomicBoolean closed = new AtomicBoolean().     ResponseBody body = new ResponseBody() {          @Override         public MediaType contentType() {             return null.         }          @Override         public long contentLength() {             return 5.         }          @Override         public BufferedSource source() {             ResponseBody body = body("fffe680065006c006c006f00").             return Okio.buffer(new ForwardingSource(body.source()) {                  @Override                 public void close() throws IOException {                     closed.set(true).                     super.close().                 }             }).         }     }.     Reader reader = body.charStream().     assertEquals('h', reader.read()).     reader.close().     assertTrue(closed.get()). }
false;public;0;6;;@Test public void sourceEmpty() throws IOException {     ResponseBody body = body("").     BufferedSource source = body.source().     assertTrue(source.exhausted()).     assertEquals("", source.readUtf8()). }
false;public;0;8;;@Test public void sourceSeesBom() throws IOException {     ResponseBody body = body("efbbbf68656c6c6f").     BufferedSource source = body.source().     assertEquals(0xef, source.readByte() & 0xff).     assertEquals(0xbb, source.readByte() & 0xff).     assertEquals(0xbf, source.readByte() & 0xff).     assertEquals("hello", source.readUtf8()). }
false;public;0;3;;@Override public MediaType contentType() {     return null. }
false;public;0;3;;@Override public long contentLength() {     return 5. }
false;public;0;4;;@Override public void close() throws IOException {     closed.set(true).     super.close(). }
false;public;0;9;;@Override public BufferedSource source() {     Buffer source = new Buffer().writeUtf8("hello").     return Okio.buffer(new ForwardingSource(source) {          @Override         public void close() throws IOException {             closed.set(true).             super.close().         }     }). }
false;public;0;24;;@Test public void sourceClosesUnderlyingSource() throws IOException {     final AtomicBoolean closed = new AtomicBoolean().     ResponseBody body = new ResponseBody() {          @Override         public MediaType contentType() {             return null.         }          @Override         public long contentLength() {             return 5.         }          @Override         public BufferedSource source() {             Buffer source = new Buffer().writeUtf8("hello").             return Okio.buffer(new ForwardingSource(source) {                  @Override                 public void close() throws IOException {                     closed.set(true).                     super.close().                 }             }).         }     }.     body.source().close().     assertTrue(closed.get()). }
false;public;0;4;;@Test public void bytesEmpty() throws IOException {     ResponseBody body = body("").     assertEquals(0, body.bytes().length). }
false;public;0;8;;@Test public void bytesSeesBom() throws IOException {     ResponseBody body = body("efbbbf68656c6c6f").     byte[] bytes = body.bytes().     assertEquals(0xef, bytes[0] & 0xff).     assertEquals(0xbb, bytes[1] & 0xff).     assertEquals(0xbf, bytes[2] & 0xff).     assertEquals("hello", new String(bytes, 3, 5, UTF_8)). }
false;public;0;3;;@Override public MediaType contentType() {     return null. }
false;public;0;3;;@Override public long contentLength() {     return 5. }
false;public;0;4;;@Override public void close() throws IOException {     closed.set(true).     super.close(). }
false;public;0;9;;@Override public BufferedSource source() {     Buffer source = new Buffer().writeUtf8("hello").     return Okio.buffer(new ForwardingSource(source) {          @Override         public void close() throws IOException {             closed.set(true).             super.close().         }     }). }
false;public;0;24;;@Test public void bytesClosesUnderlyingSource() throws IOException {     final AtomicBoolean closed = new AtomicBoolean().     ResponseBody body = new ResponseBody() {          @Override         public MediaType contentType() {             return null.         }          @Override         public long contentLength() {             return 5.         }          @Override         public BufferedSource source() {             Buffer source = new Buffer().writeUtf8("hello").             return Okio.buffer(new ForwardingSource(source) {                  @Override                 public void close() throws IOException {                     closed.set(true).                     super.close().                 }             }).         }     }.     assertEquals(5, body.bytes().length).     assertTrue(closed.get()). }
false;public;0;3;;@Override public MediaType contentType() {     return null. }
false;public;0;3;;@Override public long contentLength() {     return 10. }
false;public;0;3;;@Override public BufferedSource source() {     return new Buffer().writeUtf8("hello"). }
false;public;0;21;;@Test public void bytesThrowsWhenLengthsDisagree() {     ResponseBody body = new ResponseBody() {          @Override         public MediaType contentType() {             return null.         }          @Override         public long contentLength() {             return 10.         }          @Override         public BufferedSource source() {             return new Buffer().writeUtf8("hello").         }     }.     try {         body.bytes().         fail().     } catch (IOException e) {         assertEquals("Content-Length (10) and stream length (5) disagree", e.getMessage()).     } }
false;public;0;3;;@Override public MediaType contentType() {     return null. }
false;public;0;3;;@Override public long contentLength() {     return Integer.MAX_VALUE + 1L. }
false;public;0;3;;@Override public BufferedSource source() {     throw new AssertionError(). }
false;public;0;21;;@Test public void bytesThrowsMoreThanIntMaxValue() {     ResponseBody body = new ResponseBody() {          @Override         public MediaType contentType() {             return null.         }          @Override         public long contentLength() {             return Integer.MAX_VALUE + 1L.         }          @Override         public BufferedSource source() {             throw new AssertionError().         }     }.     try {         body.bytes().         fail().     } catch (IOException e) {         assertEquals("Cannot buffer entire body for content length: 2147483648", e.getMessage()).     } }
false;public;0;5;;@Test public void byteStreamEmpty() throws IOException {     ResponseBody body = body("").     InputStream bytes = body.byteStream().     assertEquals(-1, bytes.read()). }
false;public;0;8;;@Test public void byteStreamSeesBom() throws IOException {     ResponseBody body = body("efbbbf68656c6c6f").     InputStream bytes = body.byteStream().     assertEquals(0xef, bytes.read()).     assertEquals(0xbb, bytes.read()).     assertEquals(0xbf, bytes.read()).     assertEquals("hello", exhaust(new InputStreamReader(bytes, UTF_8))). }
false;public;0;3;;@Override public MediaType contentType() {     return null. }
false;public;0;3;;@Override public long contentLength() {     return 5. }
false;public;0;4;;@Override public void close() throws IOException {     closed.set(true).     super.close(). }
false;public;0;9;;@Override public BufferedSource source() {     Buffer source = new Buffer().writeUtf8("hello").     return Okio.buffer(new ForwardingSource(source) {          @Override         public void close() throws IOException {             closed.set(true).             super.close().         }     }). }
false;public;0;24;;@Test public void byteStreamClosesUnderlyingSource() throws IOException {     final AtomicBoolean closed = new AtomicBoolean().     ResponseBody body = new ResponseBody() {          @Override         public MediaType contentType() {             return null.         }          @Override         public long contentLength() {             return 5.         }          @Override         public BufferedSource source() {             Buffer source = new Buffer().writeUtf8("hello").             return Okio.buffer(new ForwardingSource(source) {                  @Override                 public void close() throws IOException {                     closed.set(true).                     super.close().                 }             }).         }     }.     body.byteStream().close().     assertTrue(closed.get()). }
false;public;0;3;;@Override public MediaType contentType() {     return null. }
false;public;0;3;;@Override public long contentLength() {     return 5. }
false;public;0;3;;@Override public void close() throws IOException {     throw new IOException("Broken!"). }
false;public;0;8;;@Override public BufferedSource source() {     Buffer source = new Buffer().writeUtf8("hello").     return Okio.buffer(new ForwardingSource(source) {          @Override         public void close() throws IOException {             throw new IOException("Broken!").         }     }). }
false;public;0;22;;@Test public void throwingUnderlyingSourceClosesQuietly() throws IOException {     ResponseBody body = new ResponseBody() {          @Override         public MediaType contentType() {             return null.         }          @Override         public long contentLength() {             return 5.         }          @Override         public BufferedSource source() {             Buffer source = new Buffer().writeUtf8("hello").             return Okio.buffer(new ForwardingSource(source) {                  @Override                 public void close() throws IOException {                     throw new IOException("Broken!").                 }             }).         }     }.     assertEquals("hello", body.source().readUtf8()).     body.close(). }
false;static;1;3;;static ResponseBody body(String hex) {     return body(hex, null). }
false;static;2;4;;static ResponseBody body(String hex, String charset) {     MediaType mediaType = charset == null ? null : MediaType.get("any/thing. charset=" + charset).     return ResponseBody.create(mediaType, ByteString.decodeHex(hex)). }
false;static;1;9;;static String exhaust(Reader reader) throws IOException {     StringBuilder builder = new StringBuilder().     char[] buf = new char[10].     int read.     while ((read = reader.read(buf)) != -1) {         builder.append(buf, 0, read).     }     return builder.toString(). }
