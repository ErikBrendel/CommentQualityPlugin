commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Sets a delegate for handling the next callback to this listener. Cleared after invoked.  */ ;/**  * Sets a delegate for handling the next callback to this listener. Cleared after invoked.  */ public void setNextEventDelegate(WebSocketListener delegate) {     this.delegate = delegate. }
false;public;2;11;;@Override public void onOpen(WebSocket webSocket, Response response) {     Platform.get().log(Platform.INFO, "[WS " + name + "] onOpen", null).     WebSocketListener delegate = this.delegate.     if (delegate != null) {         this.delegate = null.         delegate.onOpen(webSocket, response).     } else {         events.add(new Open(webSocket, response)).     } }
false;public;2;12;;@Override public void onMessage(WebSocket webSocket, ByteString bytes) {     Platform.get().log(Platform.INFO, "[WS " + name + "] onMessage", null).     WebSocketListener delegate = this.delegate.     if (delegate != null) {         this.delegate = null.         delegate.onMessage(webSocket, bytes).     } else {         Message event = new Message(bytes).         events.add(event).     } }
false;public;2;12;;@Override public void onMessage(WebSocket webSocket, String text) {     Platform.get().log(Platform.INFO, "[WS " + name + "] onMessage", null).     WebSocketListener delegate = this.delegate.     if (delegate != null) {         this.delegate = null.         delegate.onMessage(webSocket, text).     } else {         Message event = new Message(text).         events.add(event).     } }
false;public;3;11;;@Override public void onClosing(WebSocket webSocket, int code, String reason) {     Platform.get().log(Platform.INFO, "[WS " + name + "] onClosing " + code, null).     WebSocketListener delegate = this.delegate.     if (delegate != null) {         this.delegate = null.         delegate.onClosing(webSocket, code, reason).     } else {         events.add(new Closing(code, reason)).     } }
false;public;3;11;;@Override public void onClosed(WebSocket webSocket, int code, String reason) {     Platform.get().log(Platform.INFO, "[WS " + name + "] onClosed " + code, null).     WebSocketListener delegate = this.delegate.     if (delegate != null) {         this.delegate = null.         delegate.onClosed(webSocket, code, reason).     } else {         events.add(new Closed(code, reason)).     } }
false;public;3;11;;@Override public void onFailure(WebSocket webSocket, Throwable t, @Nullable Response response) {     Platform.get().log(Platform.INFO, "[WS " + name + "] onFailure", t).     WebSocketListener delegate = this.delegate.     if (delegate != null) {         this.delegate = null.         delegate.onFailure(webSocket, t, response).     } else {         events.add(new Failure(t, response)).     } }
false;private;0;11;;private Object nextEvent() {     try {         Object event = events.poll(10, TimeUnit.SECONDS).         if (event == null) {             throw new AssertionError("Timed out waiting for event.").         }         return event.     } catch (InterruptedException e) {         throw new AssertionError(e).     } }
false;public;1;4;;public void assertTextMessage(String payload) {     Object actual = nextEvent().     assertEquals(new Message(payload), actual). }
false;public;1;4;;public void assertBinaryMessage(ByteString payload) {     Object actual = nextEvent().     assertEquals(new Message(payload), actual). }
false;public;1;4;;public void assertPing(ByteString payload) {     Object actual = nextEvent().     assertEquals(new Ping(payload), actual). }
false;public;1;4;;public void assertPong(ByteString payload) {     Object actual = nextEvent().     assertEquals(new Pong(payload), actual). }
false;public;2;4;;public void assertClosing(int code, String reason) {     Object actual = nextEvent().     assertEquals(new Closing(code, reason), actual). }
false;public;2;4;;public void assertClosed(int code, String reason) {     Object actual = nextEvent().     assertEquals(new Closed(code, reason), actual). }
false;public;0;3;;public void assertExhausted() {     assertTrue("Remaining events: " + events, events.isEmpty()). }
false;public;0;7;;public WebSocket assertOpen() {     Object event = nextEvent().     if (!(event instanceof Open)) {         throw new AssertionError("Expected Open but was " + event).     }     return ((Open) event).webSocket. }
false;public;1;9;;public void assertFailure(Throwable t) {     Object event = nextEvent().     if (!(event instanceof Failure)) {         throw new AssertionError("Expected Failure but was " + event).     }     Failure failure = (Failure) event.     assertNull(failure.response).     assertSame(t, failure.t). }
false;public;2;12;;public void assertFailure(Class<? extends IOException> cls, String... messages) {     Object event = nextEvent().     if (!(event instanceof Failure)) {         throw new AssertionError("Expected Failure but was " + event).     }     Failure failure = (Failure) event.     assertNull(failure.response).     assertEquals(cls, failure.t.getClass()).     if (messages.length > 0) {         assertTrue(failure.t.getMessage(), Arrays.asList(messages).contains(failure.t.getMessage())).     } }
false;public;0;6;;public void assertFailure() {     Object event = nextEvent().     if (!(event instanceof Failure)) {         throw new AssertionError("Expected Failure but was " + event).     } }
false;public;4;14;;public void assertFailure(int code, String body, Class<? extends IOException> cls, String message) throws IOException {     Object event = nextEvent().     if (!(event instanceof Failure)) {         throw new AssertionError("Expected Failure but was " + event).     }     Failure failure = (Failure) event.     assertEquals(code, failure.response.code()).     if (body != null) {         assertEquals(body, failure.responseBody).     }     assertEquals(cls, failure.t.getClass()).     assertEquals(message, failure.t.getMessage()). }
false;public;1;3;;@Override public void onReadMessage(String text) throws IOException {     onMessage(null, text). }
false;public;1;3;;@Override public void onReadMessage(ByteString bytes) throws IOException {     onMessage(null, bytes). }
false;public;1;3;;@Override public void onReadPing(ByteString payload) {     events.add(new Ping(payload)). }
false;public;1;3;;@Override public void onReadPong(ByteString payload) {     events.add(new Pong(payload)). }
false;public;2;3;;@Override public void onReadClose(int code, String reason) {     onClosing(null, code, reason). }
true;public;0;23;/**  * Expose this recorder as a frame callback and shim in "ping" events.  */ ;/**  * Expose this recorder as a frame callback and shim in "ping" events.  */ public WebSocketReader.FrameCallback asFrameCallback() {     return new WebSocketReader.FrameCallback() {          @Override         public void onReadMessage(String text) throws IOException {             onMessage(null, text).         }          @Override         public void onReadMessage(ByteString bytes) throws IOException {             onMessage(null, bytes).         }          @Override         public void onReadPing(ByteString payload) {             events.add(new Ping(payload)).         }          @Override         public void onReadPong(ByteString payload) {             events.add(new Pong(payload)).         }          @Override         public void onReadClose(int code, String reason) {             onClosing(null, code, reason).         }     }. }
false;public;0;3;;@Override public String toString() {     return "Open[" + response + "]". }
false;public;0;6;;@Override public String toString() {     if (response == null) {         return "Failure[" + t + "]".     }     return "Failure[" + response + "]". }
false;public;0;3;;@Override public String toString() {     return "Message[" + (bytes != null ? bytes : string) + "]". }
false;public;0;3;;@Override public int hashCode() {     return (bytes != null ? bytes : string).hashCode(). }
false;public;1;5;;@Override public boolean equals(Object other) {     return other instanceof Message && Objects.equals(((Message) other).bytes, bytes) && Objects.equals(((Message) other).string, string). }
false;public;0;3;;@Override public String toString() {     return "Ping[" + payload + "]". }
false;public;0;3;;@Override public int hashCode() {     return payload.hashCode(). }
false;public;1;4;;@Override public boolean equals(Object other) {     return other instanceof Ping && ((Ping) other).payload.equals(payload). }
false;public;0;3;;@Override public String toString() {     return "Pong[" + payload + "]". }
false;public;0;3;;@Override public int hashCode() {     return payload.hashCode(). }
false;public;1;4;;@Override public boolean equals(Object other) {     return other instanceof Pong && ((Pong) other).payload.equals(payload). }
false;public;0;3;;@Override public String toString() {     return "Closing[" + code + " " + reason + "]". }
false;public;0;3;;@Override public int hashCode() {     return code * 37 + reason.hashCode(). }
false;public;1;5;;@Override public boolean equals(Object other) {     return other instanceof Closing && ((Closing) other).code == code && ((Closing) other).reason.equals(reason). }
false;public;0;3;;@Override public String toString() {     return "Closed[" + code + " " + reason + "]". }
false;public;0;3;;@Override public int hashCode() {     return code * 37 + reason.hashCode(). }
false;public;1;5;;@Override public boolean equals(Object other) {     return other instanceof Closed && ((Closed) other).code == code && ((Closed) other).reason.equals(reason). }
