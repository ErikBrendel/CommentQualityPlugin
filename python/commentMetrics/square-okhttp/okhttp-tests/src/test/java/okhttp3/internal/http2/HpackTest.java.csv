commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void reset() {     hpackReader = newReader(bytesIn).     hpackWriter = new Hpack.Writer(4096, false, bytesOut). }
true;public;0;13;/**  * Variable-length quantity special cases strings which are longer than 127 bytes.  Values such as  * cookies can be 4KiB, and should be possible to send.  *  * <p> http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#section-5.2  */ ;/**  * Variable-length quantity special cases strings which are longer than 127 bytes.  Values such as  * cookies can be 4KiB, and should be possible to send.  *  * <p> http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#section-5.2  */ @Test public void largeHeaderValue() throws IOException {     char[] value = new char[4096].     Arrays.fill(value, '!').     List<Header> headerBlock = headerEntries("cookie", new String(value)).     hpackWriter.writeHeaders(headerBlock).     bytesIn.writeAll(bytesOut).     hpackReader.readHeaders().     assertEquals(0, hpackReader.headerCount).     assertEquals(headerBlock, hpackReader.getAndResetHeaderList()). }
true;public;0;15;/**  * HPACK has a max header table size, which can be smaller than the max header message. Ensure the  * larger header content is not lost.  */ ;/**  * HPACK has a max header table size, which can be smaller than the max header message. Ensure the  * larger header content is not lost.  */ @Test public void tooLargeToHPackIsStillEmitted() throws IOException {     // Dynamic table size update (size = 1).     bytesIn.writeByte(0x21).     // Literal indexed     bytesIn.writeByte(0x00).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-key").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     hpackReader.readHeaders().     assertEquals(0, hpackReader.headerCount).     assertEquals(headerEntries("custom-key", "custom-header"), hpackReader.getAndResetHeaderList()). }
true;public;0;44;/**  * Oldest entries are evicted to support newer ones.  */ ;/**  * Oldest entries are evicted to support newer ones.  */ @Test public void writerEviction() throws IOException {     List<Header> headerBlock = headerEntries("custom-foo", "custom-header", "custom-bar", "custom-header", "custom-baz", "custom-header").     // Literal indexed     bytesIn.writeByte(0x40).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-foo").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     // Literal indexed     bytesIn.writeByte(0x40).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-bar").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     // Literal indexed     bytesIn.writeByte(0x40).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-baz").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     // Set to only support 110 bytes (enough for 2 headers).     // Use a new Writer because we don't support change the dynamic table     // size after Writer constructed.     Hpack.Writer writer = new Hpack.Writer(110, false, bytesOut).     writer.writeHeaders(headerBlock).     assertEquals(bytesIn, bytesOut).     assertEquals(2, writer.headerCount).     int tableLength = writer.dynamicTable.length.     Header entry = writer.dynamicTable[tableLength - 1].     checkEntry(entry, "custom-bar", "custom-header", 55).     entry = writer.dynamicTable[tableLength - 2].     checkEntry(entry, "custom-baz", "custom-header", 55). }
false;public;0;52;;@Test public void readerEviction() throws IOException {     List<Header> headerBlock = headerEntries("custom-foo", "custom-header", "custom-bar", "custom-header", "custom-baz", "custom-header").     // Set to only support 110 bytes (enough for 2 headers).     // Dynamic table size update (size = 110).     bytesIn.writeByte(0x3F).     bytesIn.writeByte(0x4F).     // Literal indexed     bytesIn.writeByte(0x40).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-foo").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     // Literal indexed     bytesIn.writeByte(0x40).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-bar").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     // Literal indexed     bytesIn.writeByte(0x40).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-baz").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     hpackReader.readHeaders().     assertEquals(2, hpackReader.headerCount).     Header entry1 = hpackReader.dynamicTable[readerHeaderTableLength() - 1].     checkEntry(entry1, "custom-bar", "custom-header", 55).     Header entry2 = hpackReader.dynamicTable[readerHeaderTableLength() - 2].     checkEntry(entry2, "custom-baz", "custom-header", 55).     // Once a header field is decoded and added to the reconstructed header     // list, it cannot be removed from it. Hence, foo is here.     assertEquals(headerBlock, hpackReader.getAndResetHeaderList()).     // Simulate receiving a small dynamic table size update, that implies eviction.     // Dynamic table size update (size = 55).     bytesIn.writeByte(0x3F).     bytesIn.writeByte(0x18).     hpackReader.readHeaders().     assertEquals(1, hpackReader.headerCount). }
true;public;0;20;/**  * Header table backing array is initially 8 long, let's ensure it grows.  */ ;/**  * Header table backing array is initially 8 long, let's ensure it grows.  */ @Test public void dynamicallyGrowsBeyond64Entries() throws IOException {     // Lots of headers need more room!     hpackReader = new Hpack.Reader(16384, 4096, bytesIn).     // Dynamic table size update (size = 16384).     bytesIn.writeByte(0x3F).     bytesIn.writeByte(0xE1).     bytesIn.writeByte(0x7F).     for (int i = 0. i < 256. i++) {         // Literal indexed         bytesIn.writeByte(0x40).         // Literal name (len = 10)         bytesIn.writeByte(0x0a).         bytesIn.writeUtf8("custom-foo").         // Literal value (len = 13)         bytesIn.writeByte(0x0d).         bytesIn.writeUtf8("custom-header").     }     hpackReader.readHeaders().     assertEquals(256, hpackReader.headerCount). }
false;public;0;15;;@Test public void huffmanDecodingSupported() throws IOException {     // == Literal indexed ==     bytesIn.writeByte(0x44).     // Indexed name (idx = 4) -> :path     // Literal value Huffman encoded 12 bytes     bytesIn.writeByte(0x8c).     // decodes to www.example.com which is length 15     bytesIn.write(decodeHex("f1e3c2e5f23a6ba0ab90f4ff")).     hpackReader.readHeaders().     assertEquals(1, hpackReader.headerCount).     assertEquals(52, hpackReader.dynamicTableByteCount).     Header entry = hpackReader.dynamicTable[readerHeaderTableLength() - 1].     checkEntry(entry, ":path", "www.example.com", 52). }
true;public;0;18;/**  * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-C.2.1  */ ;/**  * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-C.2.1  */ @Test public void readLiteralHeaderFieldWithIndexing() throws IOException {     // Literal indexed     bytesIn.writeByte(0x40).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-key").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     hpackReader.readHeaders().     assertEquals(1, hpackReader.headerCount).     assertEquals(55, hpackReader.dynamicTableByteCount).     Header entry = hpackReader.dynamicTable[readerHeaderTableLength() - 1].     checkEntry(entry, "custom-key", "custom-header", 55).     assertEquals(headerEntries("custom-key", "custom-header"), hpackReader.getAndResetHeaderList()). }
true;public;0;17;/**  * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-C.2.2  */ ;/**  * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-C.2.2  */ @Test public void literalHeaderFieldWithoutIndexingIndexedName() throws IOException {     List<Header> headerBlock = headerEntries(":path", "/sample/path").     // == Literal not indexed ==     bytesIn.writeByte(0x04).     // Indexed name (idx = 4) -> :path     // Literal value (len = 12)     bytesIn.writeByte(0x0c).     bytesIn.writeUtf8("/sample/path").     hpackWriter.writeHeaders(headerBlock).     assertEquals(bytesIn, bytesOut).     hpackReader.readHeaders().     assertEquals(0, hpackReader.headerCount).     assertEquals(headerBlock, hpackReader.getAndResetHeaderList()). }
false;public;0;16;;@Test public void literalHeaderFieldWithoutIndexingNewName() throws IOException {     List<Header> headerBlock = headerEntries("custom-key", "custom-header").     // Not indexed     bytesIn.writeByte(0x00).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-key").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     hpackReader.readHeaders().     assertEquals(0, hpackReader.headerCount).     assertEquals(headerBlock, hpackReader.getAndResetHeaderList()). }
false;public;0;12;;@Test public void literalHeaderFieldNeverIndexedIndexedName() throws IOException {     // == Literal never indexed ==     bytesIn.writeByte(0x14).     // Indexed name (idx = 4) -> :path     // Literal value (len = 12)     bytesIn.writeByte(0x0c).     bytesIn.writeUtf8("/sample/path").     hpackReader.readHeaders().     assertEquals(0, hpackReader.headerCount).     assertEquals(headerEntries(":path", "/sample/path"), hpackReader.getAndResetHeaderList()). }
false;public;0;16;;@Test public void literalHeaderFieldNeverIndexedNewName() throws IOException {     List<Header> headerBlock = headerEntries("custom-key", "custom-header").     // Never indexed     bytesIn.writeByte(0x10).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-key").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     hpackReader.readHeaders().     assertEquals(0, hpackReader.headerCount).     assertEquals(headerBlock, hpackReader.getAndResetHeaderList()). }
false;public;0;13;;@Test public void literalHeaderFieldWithIncrementalIndexingIndexedName() throws IOException {     List<Header> headerBlock = headerEntries(":path", "/sample/path").     // Indexed name (idx = 4) -> :path     bytesIn.writeByte(0x44).     // Literal value (len = 12)     bytesIn.writeByte(0x0c).     bytesIn.writeUtf8("/sample/path").     hpackReader.readHeaders().     assertEquals(1, hpackReader.headerCount).     assertEquals(headerBlock, hpackReader.getAndResetHeaderList()). }
false;public;0;24;;@Test public void literalHeaderFieldWithIncrementalIndexingNewName() throws IOException {     List<Header> headerBlock = headerEntries("custom-key", "custom-header").     // Never indexed     bytesIn.writeByte(0x40).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-key").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     hpackWriter.writeHeaders(headerBlock).     assertEquals(bytesIn, bytesOut).     assertEquals(1, hpackWriter.headerCount).     Header entry = hpackWriter.dynamicTable[hpackWriter.dynamicTable.length - 1].     checkEntry(entry, "custom-key", "custom-header", 55).     hpackReader.readHeaders().     assertEquals(1, hpackReader.headerCount).     assertEquals(headerBlock, hpackReader.getAndResetHeaderList()). }
false;public;0;29;;@Test public void theSameHeaderAfterOneIncrementalIndexed() throws IOException {     List<Header> headerBlock = headerEntries("custom-key", "custom-header", "custom-key", "custom-header").     // Never indexed     bytesIn.writeByte(0x40).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-key").     // Literal value (len = 13)     bytesIn.writeByte(0x0d).     bytesIn.writeUtf8("custom-header").     // Indexed name and value (idx = 63)     bytesIn.writeByte(0xbe).     hpackWriter.writeHeaders(headerBlock).     assertEquals(bytesIn, bytesOut).     assertEquals(1, hpackWriter.headerCount).     Header entry = hpackWriter.dynamicTable[hpackWriter.dynamicTable.length - 1].     checkEntry(entry, "custom-key", "custom-header", 55).     hpackReader.readHeaders().     assertEquals(1, hpackReader.headerCount).     assertEquals(headerBlock, hpackReader.getAndResetHeaderList()). }
false;public;0;13;;@Test public void staticHeaderIsNotCopiedIntoTheIndexedTable() throws IOException {     // == Indexed - Add ==     bytesIn.writeByte(0x82).     // idx = 2 -> :method: GET     hpackReader.readHeaders().     assertEquals(0, hpackReader.headerCount).     assertEquals(0, hpackReader.dynamicTableByteCount).     assertNull(hpackReader.dynamicTable[readerHeaderTableLength() - 1]).     assertEquals(headerEntries(":method", "GET"), hpackReader.getAndResetHeaderList()). }
true;public;0;10;// Example taken from twitter/hpack DecoderTest.testUnusedIndex ;// Example taken from twitter/hpack DecoderTest.testUnusedIndex @Test public void readIndexedHeaderFieldIndex0() throws IOException {     // == Indexed - Add idx = 0     bytesIn.writeByte(0x80).     try {         hpackReader.readHeaders().         fail().     } catch (IOException e) {         assertEquals("index == 0", e.getMessage()).     } }
true;public;0;10;// Example taken from twitter/hpack DecoderTest.testIllegalIndex ;// Example taken from twitter/hpack DecoderTest.testIllegalIndex @Test public void readIndexedHeaderFieldTooLargeIndex() throws IOException {     // == Indexed - Add idx = 127     bytesIn.writeShort(0xff00).     try {         hpackReader.readHeaders().         fail().     } catch (IOException e) {         assertEquals("Header index too large 127", e.getMessage()).     } }
true;public;0;11;// Example taken from twitter/hpack DecoderTest.testInsidiousIndex ;// Example taken from twitter/hpack DecoderTest.testInsidiousIndex @Test public void readIndexedHeaderFieldInsidiousIndex() throws IOException {     // == Indexed - Add ==     bytesIn.writeByte(0xff).     // idx = -2147483521     bytesIn.write(decodeHex("8080808008")).     try {         hpackReader.readHeaders().         fail().     } catch (IOException e) {         assertEquals("Header index too large -2147483521", e.getMessage()).     } }
true;public;0;13;// Example taken from twitter/hpack DecoderTest.testHeaderTableSizeUpdate ;// Example taken from twitter/hpack DecoderTest.testHeaderTableSizeUpdate @Test public void minMaxHeaderTableSize() throws IOException {     bytesIn.writeByte(0x20).     hpackReader.readHeaders().     assertEquals(0, hpackReader.maxDynamicTableByteCount()).     // encode size 4096     bytesIn.writeByte(0x3f).     bytesIn.writeByte(0xe1).     bytesIn.writeByte(0x1f).     hpackReader.readHeaders().     assertEquals(4096, hpackReader.maxDynamicTableByteCount()). }
true;public;0;12;// Example taken from twitter/hpack DecoderTest.testIllegalHeaderTableSizeUpdate ;// Example taken from twitter/hpack DecoderTest.testIllegalHeaderTableSizeUpdate @Test public void cannotSetTableSizeLargerThanSettingsValue() throws IOException {     // encode size 4097     bytesIn.writeByte(0x3f).     bytesIn.writeByte(0xe2).     bytesIn.writeByte(0x1f).     try {         hpackReader.readHeaders().         fail().     } catch (IOException e) {         assertEquals("Invalid dynamic table size update 4097", e.getMessage()).     } }
true;public;0;11;// Example taken from twitter/hpack DecoderTest.testInsidiousMaxHeaderSize ;// Example taken from twitter/hpack DecoderTest.testInsidiousMaxHeaderSize @Test public void readHeaderTableStateChangeInsidiousMaxHeaderByteCount() throws IOException {     bytesIn.writeByte(0x3f).     // count = -2147483648     bytesIn.write(decodeHex("e1ffffff07")).     try {         hpackReader.readHeaders().         fail().     } catch (IOException e) {         assertEquals("Invalid dynamic table size update -2147483648", e.getMessage()).     } }
true;public;0;12;/**  * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-C.2.4  */ ;/**  * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-C.2.4  */ @Test public void readIndexedHeaderFieldFromStaticTableWithoutBuffering() throws IOException {     // Dynamic table size update (size = 0).     bytesIn.writeByte(0x20).     // == Indexed - Add ==     bytesIn.writeByte(0x82).     // idx = 2 -> :method: GET     hpackReader.readHeaders().     // Not buffered in header table.     assertEquals(0, hpackReader.headerCount).     assertEquals(headerEntries(":method", "GET"), hpackReader.getAndResetHeaderList()). }
false;public;0;10;;@Test public void readLiteralHeaderWithIncrementalIndexingStaticName() throws IOException {     // == Literal indexed ==     bytesIn.writeByte(0x7d).     // Indexed name (idx = 60) -> "www-authenticate"     // Literal value (len = 5)     bytesIn.writeByte(0x05).     bytesIn.writeUtf8("Basic").     hpackReader.readHeaders().     assertEquals(Arrays.asList(new Header("www-authenticate", "Basic")), hpackReader.getAndResetHeaderList()). }
false;public;0;17;;@Test public void readLiteralHeaderWithIncrementalIndexingDynamicName() throws IOException {     bytesIn.writeByte(0x40).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-foo").     // Literal value (len = 5)     bytesIn.writeByte(0x05).     bytesIn.writeUtf8("Basic").     bytesIn.writeByte(0x7e).     // Literal value (len = 6)     bytesIn.writeByte(0x06).     bytesIn.writeUtf8("Basic2").     hpackReader.readHeaders().     assertEquals(Arrays.asList(new Header("custom-foo", "Basic"), new Header("custom-foo", "Basic2")), hpackReader.getAndResetHeaderList()). }
true;public;0;13;/**  * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-C.2  */ ;/**  * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-C.2  */ @Test public void readRequestExamplesWithoutHuffman() throws IOException {     firstRequestWithoutHuffman().     hpackReader.readHeaders().     checkReadFirstRequestWithoutHuffman().     secondRequestWithoutHuffman().     hpackReader.readHeaders().     checkReadSecondRequestWithoutHuffman().     thirdRequestWithoutHuffman().     hpackReader.readHeaders().     checkReadThirdRequestWithoutHuffman(). }
false;public;0;20;;@Test public void readFailingRequestExample() throws IOException {     // == Indexed - Add ==     bytesIn.writeByte(0x82).     // idx = 2 -> :method: GET     // == Indexed - Add ==     bytesIn.writeByte(0x86).     // idx = 7 -> :scheme: http     // == Indexed - Add ==     bytesIn.writeByte(0x84).     // == Bad index! ==     bytesIn.writeByte(0x7f).     // Indexed name (idx = 4) -> :authority     // Literal value (len = 15)     bytesIn.writeByte(0x0f).     bytesIn.writeUtf8("www.example.com").     try {         hpackReader.readHeaders().         fail().     } catch (IOException e) {         assertEquals("Header index too large 78", e.getMessage()).     } }
false;private;0;12;;private void firstRequestWithoutHuffman() {     // == Indexed - Add ==     bytesIn.writeByte(0x82).     // idx = 2 -> :method: GET     // == Indexed - Add ==     bytesIn.writeByte(0x86).     // idx = 7 -> :scheme: http     // == Indexed - Add ==     bytesIn.writeByte(0x84).     // idx = 6 -> :path: /     // == Literal indexed ==     bytesIn.writeByte(0x41).     // Indexed name (idx = 4) -> :authority     // Literal value (len = 15)     bytesIn.writeByte(0x0f).     bytesIn.writeUtf8("www.example.com"). }
false;private;0;17;;private void checkReadFirstRequestWithoutHuffman() {     assertEquals(1, hpackReader.headerCount).     // [  1] (s =  57) :authority: www.example.com     Header entry = hpackReader.dynamicTable[readerHeaderTableLength() - 1].     checkEntry(entry, ":authority", "www.example.com", 57).     // Table size: 57     assertEquals(57, hpackReader.dynamicTableByteCount).     // Decoded header list:     assertEquals(headerEntries(":method", "GET", ":scheme", "http", ":path", "/", ":authority", "www.example.com"), hpackReader.getAndResetHeaderList()). }
false;private;0;14;;private void secondRequestWithoutHuffman() {     // == Indexed - Add ==     bytesIn.writeByte(0x82).     // idx = 2 -> :method: GET     // == Indexed - Add ==     bytesIn.writeByte(0x86).     // idx = 7 -> :scheme: http     // == Indexed - Add ==     bytesIn.writeByte(0x84).     // idx = 6 -> :path: /     // == Indexed - Add ==     bytesIn.writeByte(0xbe).     // Indexed name (idx = 62) -> :authority: www.example.com     // == Literal indexed ==     bytesIn.writeByte(0x58).     // Indexed name (idx = 24) -> cache-control     // Literal value (len = 8)     bytesIn.writeByte(0x08).     bytesIn.writeUtf8("no-cache"). }
false;private;0;22;;private void checkReadSecondRequestWithoutHuffman() {     assertEquals(2, hpackReader.headerCount).     // [  1] (s =  53) cache-control: no-cache     Header entry = hpackReader.dynamicTable[readerHeaderTableLength() - 2].     checkEntry(entry, "cache-control", "no-cache", 53).     // [  2] (s =  57) :authority: www.example.com     entry = hpackReader.dynamicTable[readerHeaderTableLength() - 1].     checkEntry(entry, ":authority", "www.example.com", 57).     // Table size: 110     assertEquals(110, hpackReader.dynamicTableByteCount).     // Decoded header list:     assertEquals(headerEntries(":method", "GET", ":scheme", "http", ":path", "/", ":authority", "www.example.com", "cache-control", "no-cache"), hpackReader.getAndResetHeaderList()). }
false;private;0;15;;private void thirdRequestWithoutHuffman() {     // == Indexed - Add ==     bytesIn.writeByte(0x82).     // idx = 2 -> :method: GET     // == Indexed - Add ==     bytesIn.writeByte(0x87).     // idx = 7 -> :scheme: http     // == Indexed - Add ==     bytesIn.writeByte(0x85).     // idx = 5 -> :path: /index.html     // == Indexed - Add ==     bytesIn.writeByte(0xbf).     // Indexed name (idx = 63) -> :authority: www.example.com     // Literal indexed     bytesIn.writeByte(0x40).     // Literal name (len = 10)     bytesIn.writeByte(0x0a).     bytesIn.writeUtf8("custom-key").     // Literal value (len = 12)     bytesIn.writeByte(0x0c).     bytesIn.writeUtf8("custom-value"). }
false;private;0;26;;private void checkReadThirdRequestWithoutHuffman() {     assertEquals(3, hpackReader.headerCount).     // [  1] (s =  54) custom-key: custom-value     Header entry = hpackReader.dynamicTable[readerHeaderTableLength() - 3].     checkEntry(entry, "custom-key", "custom-value", 54).     // [  2] (s =  53) cache-control: no-cache     entry = hpackReader.dynamicTable[readerHeaderTableLength() - 2].     checkEntry(entry, "cache-control", "no-cache", 53).     // [  3] (s =  57) :authority: www.example.com     entry = hpackReader.dynamicTable[readerHeaderTableLength() - 1].     checkEntry(entry, ":authority", "www.example.com", 57).     // Table size: 164     assertEquals(164, hpackReader.dynamicTableByteCount).     // Decoded header list:     assertEquals(headerEntries(":method", "GET", ":scheme", "https", ":path", "/index.html", ":authority", "www.example.com", "custom-key", "custom-value"), hpackReader.getAndResetHeaderList()). }
true;public;0;13;/**  * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-C.4  */ ;/**  * http://tools.ietf.org/html/draft-ietf-httpbis-header-compression-12#appendix-C.4  */ @Test public void readRequestExamplesWithHuffman() throws IOException {     firstRequestWithHuffman().     hpackReader.readHeaders().     checkReadFirstRequestWithHuffman().     secondRequestWithHuffman().     hpackReader.readHeaders().     checkReadSecondRequestWithHuffman().     thirdRequestWithHuffman().     hpackReader.readHeaders().     checkReadThirdRequestWithHuffman(). }
false;private;0;13;;private void firstRequestWithHuffman() {     // == Indexed - Add ==     bytesIn.writeByte(0x82).     // idx = 2 -> :method: GET     // == Indexed - Add ==     bytesIn.writeByte(0x86).     // idx = 6 -> :scheme: http     // == Indexed - Add ==     bytesIn.writeByte(0x84).     // idx = 4 -> :path: /     // == Literal indexed ==     bytesIn.writeByte(0x41).     // Indexed name (idx = 1) -> :authority     // Literal value Huffman encoded 12 bytes     bytesIn.writeByte(0x8c).     // decodes to www.example.com which is length 15     bytesIn.write(decodeHex("f1e3c2e5f23a6ba0ab90f4ff")). }
false;private;0;17;;private void checkReadFirstRequestWithHuffman() {     assertEquals(1, hpackReader.headerCount).     // [  1] (s =  57) :authority: www.example.com     Header entry = hpackReader.dynamicTable[readerHeaderTableLength() - 1].     checkEntry(entry, ":authority", "www.example.com", 57).     // Table size: 57     assertEquals(57, hpackReader.dynamicTableByteCount).     // Decoded header list:     assertEquals(headerEntries(":method", "GET", ":scheme", "http", ":path", "/", ":authority", "www.example.com"), hpackReader.getAndResetHeaderList()). }
false;private;0;15;;private void secondRequestWithHuffman() {     // == Indexed - Add ==     bytesIn.writeByte(0x82).     // idx = 2 -> :method: GET     // == Indexed - Add ==     bytesIn.writeByte(0x86).     // idx = 6 -> :scheme: http     // == Indexed - Add ==     bytesIn.writeByte(0x84).     // idx = 4 -> :path: /     // == Indexed - Add ==     bytesIn.writeByte(0xbe).     // idx = 62 -> :authority: www.example.com     // == Literal indexed ==     bytesIn.writeByte(0x58).     // Indexed name (idx = 24) -> cache-control     // Literal value Huffman encoded 6 bytes     bytesIn.writeByte(0x86).     // decodes to no-cache which is length 8     bytesIn.write(decodeHex("a8eb10649cbf")). }
false;private;0;22;;private void checkReadSecondRequestWithHuffman() {     assertEquals(2, hpackReader.headerCount).     // [  1] (s =  53) cache-control: no-cache     Header entry = hpackReader.dynamicTable[readerHeaderTableLength() - 2].     checkEntry(entry, "cache-control", "no-cache", 53).     // [  2] (s =  57) :authority: www.example.com     entry = hpackReader.dynamicTable[readerHeaderTableLength() - 1].     checkEntry(entry, ":authority", "www.example.com", 57).     // Table size: 110     assertEquals(110, hpackReader.dynamicTableByteCount).     // Decoded header list:     assertEquals(headerEntries(":method", "GET", ":scheme", "http", ":path", "/", ":authority", "www.example.com", "cache-control", "no-cache"), hpackReader.getAndResetHeaderList()). }
false;private;0;17;;private void thirdRequestWithHuffman() {     // == Indexed - Add ==     bytesIn.writeByte(0x82).     // idx = 2 -> :method: GET     // == Indexed - Add ==     bytesIn.writeByte(0x87).     // idx = 7 -> :scheme: https     // == Indexed - Add ==     bytesIn.writeByte(0x85).     // idx = 5 -> :path: /index.html     // == Indexed - Add ==     bytesIn.writeByte(0xbf).     // idx = 63 -> :authority: www.example.com     // Literal indexed     bytesIn.writeByte(0x40).     // Literal name Huffman encoded 8 bytes     bytesIn.writeByte(0x88).     // decodes to custom-key which is length 10     bytesIn.write(decodeHex("25a849e95ba97d7f")).     // Literal value Huffman encoded 9 bytes     bytesIn.writeByte(0x89).     // decodes to custom-value which is length 12     bytesIn.write(decodeHex("25a849e95bb8e8b4bf")). }
false;private;0;26;;private void checkReadThirdRequestWithHuffman() {     assertEquals(3, hpackReader.headerCount).     // [  1] (s =  54) custom-key: custom-value     Header entry = hpackReader.dynamicTable[readerHeaderTableLength() - 3].     checkEntry(entry, "custom-key", "custom-value", 54).     // [  2] (s =  53) cache-control: no-cache     entry = hpackReader.dynamicTable[readerHeaderTableLength() - 2].     checkEntry(entry, "cache-control", "no-cache", 53).     // [  3] (s =  57) :authority: www.example.com     entry = hpackReader.dynamicTable[readerHeaderTableLength() - 1].     checkEntry(entry, ":authority", "www.example.com", 57).     // Table size: 164     assertEquals(164, hpackReader.dynamicTableByteCount).     // Decoded header list:     assertEquals(headerEntries(":method", "GET", ":scheme", "https", ":path", "/index.html", ":authority", "www.example.com", "custom-key", "custom-value"), hpackReader.getAndResetHeaderList()). }
false;public;0;4;;@Test public void readSingleByteInt() throws IOException {     assertEquals(10, newReader(byteStream()).readInt(10, 31)).     assertEquals(10, newReader(byteStream()).readInt(0xe0 | 10, 31)). }
false;public;0;3;;@Test public void readMultibyteInt() throws IOException {     assertEquals(1337, newReader(byteStream(154, 10)).readInt(31, 31)). }
false;public;0;6;;@Test public void writeSingleByteInt() throws IOException {     hpackWriter.writeInt(10, 31, 0).     assertBytes(10).     hpackWriter.writeInt(10, 31, 0xe0).     assertBytes(0xe0 | 10). }
false;public;0;6;;@Test public void writeMultibyteInt() throws IOException {     hpackWriter.writeInt(1337, 31, 0).     assertBytes(31, 154, 10).     hpackWriter.writeInt(1337, 31, 0xe0).     assertBytes(0xe0 | 31, 154, 10). }
false;public;0;6;;@Test public void max31BitValue() throws IOException {     hpackWriter.writeInt(0x7fffffff, 31, 0).     assertBytes(31, 224, 255, 255, 255, 7).     assertEquals(0x7fffffff, newReader(byteStream(224, 255, 255, 255, 7)).readInt(31, 31)). }
false;public;0;5;;@Test public void prefixMask() throws IOException {     hpackWriter.writeInt(31, 31, 0).     assertBytes(31, 0).     assertEquals(31, newReader(byteStream(0)).readInt(31, 31)). }
false;public;0;5;;@Test public void prefixMaskMinusOne() throws IOException {     hpackWriter.writeInt(30, 31, 0).     assertBytes(30).     assertEquals(31, newReader(byteStream(0)).readInt(31, 31)). }
false;public;0;5;;@Test public void zero() throws IOException {     hpackWriter.writeInt(0, 31, 0).     assertBytes(0).     assertEquals(0, newReader(byteStream()).readInt(0, 31)). }
false;public;0;4;;@Test public void lowercaseHeaderNameBeforeEmit() throws IOException {     hpackWriter.writeHeaders(Arrays.asList(new Header("FoO", "BaR"))).     assertBytes(0x40, 3, 'f', 'o', 'o', 3, 'B', 'a', 'R'). }
false;public;0;8;;@Test public void mixedCaseHeaderNameIsMalformed() throws IOException {     try {         newReader(byteStream(0, 3, 'F', 'o', 'o', 3, 'B', 'a', 'R')).readHeaders().         fail().     } catch (IOException e) {         assertEquals("PROTOCOL_ERROR response malformed: mixed case name: Foo", e.getMessage()).     } }
false;public;0;5;;@Test public void emptyHeaderName() throws IOException {     hpackWriter.writeByteString(ByteString.encodeUtf8("")).     assertBytes(0).     assertEquals(ByteString.EMPTY, newReader(byteStream(0)).readByteString()). }
false;public;0;17;;@Test public void emitsDynamicTableSizeUpdate() throws IOException {     hpackWriter.setHeaderTableSizeSetting(2048).     hpackWriter.writeHeaders(Arrays.asList(new Header("foo", "bar"))).     assertBytes(// Dynamic table size update (size = 2048).     0x3F, // Dynamic table size update (size = 2048).     0xE1, // Dynamic table size update (size = 2048).     0xF, 0x40, 3, 'f', 'o', 'o', 3, 'b', 'a', 'r').     hpackWriter.setHeaderTableSizeSetting(8192).     hpackWriter.writeHeaders(Arrays.asList(new Header("bar", "foo"))).     assertBytes(// Dynamic table size update (size = 8192).     0x3F, // Dynamic table size update (size = 8192).     0xE1, // Dynamic table size update (size = 8192).     0x3F, 0x40, 3, 'b', 'a', 'r', 3, 'f', 'o', 'o').     // No more dynamic table updates should be emitted.     hpackWriter.writeHeaders(Arrays.asList(new Header("far", "boo"))).     assertBytes(0x40, 3, 'f', 'a', 'r', 3, 'b', 'o', 'o'). }
false;public;0;7;;@Test public void noDynamicTableSizeUpdateWhenSizeIsEqual() throws IOException {     int currentSize = hpackWriter.headerTableSizeSetting.     hpackWriter.setHeaderTableSizeSetting(currentSize).     hpackWriter.writeHeaders(Arrays.asList(new Header("foo", "bar"))).     assertBytes(0x40, 3, 'f', 'o', 'o', 3, 'b', 'a', 'r'). }
false;public;0;9;;@Test public void growDynamicTableSize() throws IOException {     hpackWriter.setHeaderTableSizeSetting(8192).     hpackWriter.setHeaderTableSizeSetting(16384).     hpackWriter.writeHeaders(Arrays.asList(new Header("foo", "bar"))).     assertBytes(// Dynamic table size update (size = 16384).     0x3F, // Dynamic table size update (size = 16384).     0xE1, // Dynamic table size update (size = 16384).     0x7F, 0x40, 3, 'f', 'o', 'o', 3, 'b', 'a', 'r'). }
false;public;0;9;;@Test public void shrinkDynamicTableSize() throws IOException {     hpackWriter.setHeaderTableSizeSetting(2048).     hpackWriter.setHeaderTableSizeSetting(0).     hpackWriter.writeHeaders(Arrays.asList(new Header("foo", "bar"))).     assertBytes(// Dynamic size update (size = 0).     0x20, 0x40, 3, 'f', 'o', 'o', 3, 'b', 'a', 'r'). }
false;public;0;13;;@Test public void manyDynamicTableSizeChanges() throws IOException {     hpackWriter.setHeaderTableSizeSetting(16384).     hpackWriter.setHeaderTableSizeSetting(8096).     hpackWriter.setHeaderTableSizeSetting(0).     hpackWriter.setHeaderTableSizeSetting(4096).     hpackWriter.setHeaderTableSizeSetting(2048).     hpackWriter.writeHeaders(Arrays.asList(new Header("foo", "bar"))).     assertBytes(// Dynamic size update (size = 0).     0x20, // Dynamic size update (size = 2048).     0x3F, // Dynamic size update (size = 2048).     0xE1, // Dynamic size update (size = 2048).     0xF, 0x40, 3, 'f', 'o', 'o', 3, 'b', 'a', 'r'). }
false;public;0;14;;@Test public void dynamicTableEvictionWhenSizeLowered() throws IOException {     List<Header> headerBlock = headerEntries("custom-key1", "custom-header", "custom-key2", "custom-header").     hpackWriter.writeHeaders(headerBlock).     assertEquals(2, hpackWriter.headerCount).     hpackWriter.setHeaderTableSizeSetting(56).     assertEquals(1, hpackWriter.headerCount).     hpackWriter.setHeaderTableSizeSetting(0).     assertEquals(0, hpackWriter.headerCount). }
false;public;0;11;;@Test public void noEvictionOnDynamicTableSizeIncrease() throws IOException {     List<Header> headerBlock = headerEntries("custom-key1", "custom-header", "custom-key2", "custom-header").     hpackWriter.writeHeaders(headerBlock).     assertEquals(2, hpackWriter.headerCount).     hpackWriter.setHeaderTableSizeSetting(8192).     assertEquals(2, hpackWriter.headerCount). }
false;public;0;4;;@Test public void dynamicTableSizeHasAnUpperBound() {     hpackWriter.setHeaderTableSizeSetting(1048576).     assertEquals(16384, hpackWriter.maxDynamicTableByteCount). }
false;public;0;18;;@Test public void huffmanEncode() throws IOException {     hpackWriter = new Hpack.Writer(4096, true, bytesOut).     hpackWriter.writeHeaders(headerEntries("foo", "bar")).     ByteString expected = new Buffer().writeByte(// Literal header, new name.     0x40).writeByte(// String literal is Huffman encoded (len = 2).     0x82).writeByte(// 'foo' Huffman encoded.     0x94).writeByte(0xE7).writeByte(// String literal not Huffman encoded (len = 3).     3).writeByte('b').writeByte('a').writeByte('r').readByteString().     ByteString actual = bytesOut.readByteString().     assertEquals(expected, actual). }
false;public;0;25;;@Test public void staticTableIndexedHeaders() throws IOException {     hpackWriter.writeHeaders(headerEntries(":method", "GET")).     assertBytes(0x82).     assertEquals(0, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries(":method", "POST")).     assertBytes(0x83).     assertEquals(0, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries(":path", "/")).     assertBytes(0x84).     assertEquals(0, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries(":path", "/index.html")).     assertBytes(0x85).     assertEquals(0, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries(":scheme", "http")).     assertBytes(0x86).     assertEquals(0, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries(":scheme", "https")).     assertBytes(0x87).     assertEquals(0, hpackWriter.headerCount). }
false;public;0;11;;@Test public void dynamicTableIndexedHeader() throws IOException {     hpackWriter.writeHeaders(headerEntries("custom-key", "custom-header")).     assertBytes(0x40, 10, 'c', 'u', 's', 't', 'o', 'm', '-', 'k', 'e', 'y', 13, 'c', 'u', 's', 't', 'o', 'm', '-', 'h', 'e', 'a', 'd', 'e', 'r').     assertEquals(1, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries("custom-key", "custom-header")).     assertBytes(0xbe).     assertEquals(1, hpackWriter.headerCount). }
false;public;0;9;;@Test public void doNotIndexPseudoHeaders() throws IOException {     hpackWriter.writeHeaders(headerEntries(":method", "PUT")).     assertBytes(0x02, 3, 'P', 'U', 'T').     assertEquals(0, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries(":path", "/okhttp")).     assertBytes(0x04, 7, '/', 'o', 'k', 'h', 't', 't', 'p').     assertEquals(0, hpackWriter.headerCount). }
false;public;0;18;;@Test public void incrementalIndexingWithAuthorityPseudoHeader() throws IOException {     hpackWriter.writeHeaders(headerEntries(":authority", "foo.com")).     assertBytes(0x41, 7, 'f', 'o', 'o', '.', 'c', 'o', 'm').     assertEquals(1, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries(":authority", "foo.com")).     assertBytes(0xbe).     assertEquals(1, hpackWriter.headerCount).     // If the :authority header somehow changes, it should be re-added to the dynamic table.     hpackWriter.writeHeaders(headerEntries(":authority", "bar.com")).     assertBytes(0x41, 7, 'b', 'a', 'r', '.', 'c', 'o', 'm').     assertEquals(2, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries(":authority", "bar.com")).     assertBytes(0xbe).     assertEquals(2, hpackWriter.headerCount). }
false;public;0;9;;@Test public void incrementalIndexingWithStaticTableIndexedName() throws IOException {     hpackWriter.writeHeaders(headerEntries("accept-encoding", "gzip")).     assertBytes(0x50, 4, 'g', 'z', 'i', 'p').     assertEquals(1, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries("accept-encoding", "gzip")).     assertBytes(0xbe).     assertEquals(1, hpackWriter.headerCount). }
false;public;0;13;;@Test public void incrementalIndexingWithDynamcTableIndexedName() throws IOException {     hpackWriter.writeHeaders(headerEntries("foo", "bar")).     assertBytes(0x40, 3, 'f', 'o', 'o', 3, 'b', 'a', 'r').     assertEquals(1, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries("foo", "bar1")).     assertBytes(0x7e, 4, 'b', 'a', 'r', '1').     assertEquals(2, hpackWriter.headerCount).     hpackWriter.writeHeaders(headerEntries("foo", "bar1")).     assertBytes(0xbe).     assertEquals(2, hpackWriter.headerCount). }
false;private;1;3;;private Hpack.Reader newReader(Buffer source) {     return new Hpack.Reader(4096, source). }
false;private;1;3;;private Buffer byteStream(int... bytes) {     return new Buffer().write(intArrayToByteArray(bytes)). }
false;private;4;5;;private void checkEntry(Header entry, String name, String value, int size) {     assertEquals(name, entry.name.utf8()).     assertEquals(value, entry.value.utf8()).     assertEquals(size, entry.hpackSize). }
false;private;1;5;;private void assertBytes(int... bytes) throws IOException {     ByteString expected = intArrayToByteArray(bytes).     ByteString actual = bytesOut.readByteString().     assertEquals(expected, actual). }
false;private;1;7;;private ByteString intArrayToByteArray(int[] bytes) {     byte[] data = new byte[bytes.length].     for (int i = 0. i < bytes.length. i++) {         data[i] = (byte) bytes[i].     }     return ByteString.of(data). }
false;private;0;3;;private int readerHeaderTableLength() {     return hpackReader.dynamicTable.length. }
