commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected ServerSocket configureServerSocket(ServerSocket serverSocket) throws IOException {     serverSocket.setReceiveBufferSize(SOCKET_BUFFER_SIZE).     return serverSocket. }
false;protected;1;6;;@Override protected Socket configureSocket(Socket socket) throws IOException {     socket.setSendBufferSize(SOCKET_BUFFER_SIZE).     socket.setReceiveBufferSize(SOCKET_BUFFER_SIZE).     return socket. }
false;public;0;24;;@Before public void setUp() throws Exception {     // Sockets on some platforms can have large buffers that mean writes do not block when     // required. These socket factories explicitly set the buffer sizes on sockets created.     server = new MockWebServer().     server.setServerSocketFactory(new DelegatingServerSocketFactory(ServerSocketFactory.getDefault()) {          @Override         protected ServerSocket configureServerSocket(ServerSocket serverSocket) throws IOException {             serverSocket.setReceiveBufferSize(SOCKET_BUFFER_SIZE).             return serverSocket.         }     }).     client = defaultClient().newBuilder().socketFactory(new DelegatingSocketFactory(SocketFactory.getDefault()) {          @Override         protected Socket configureSocket(Socket socket) throws IOException {             socket.setSendBufferSize(SOCKET_BUFFER_SIZE).             socket.setReceiveBufferSize(SOCKET_BUFFER_SIZE).             return socket.         }     }).build(). }
false;public;0;4;;@After public void tearDown() throws Exception {     // Clear interrupted state.     Thread.interrupted().     TestUtil.ensureAllConnectionsReleased(client). }
false;public;0;3;;@Override @Nullable public MediaType contentType() {     return null. }
false;public;1;8;;@Override public void writeTo(BufferedSink sink) throws IOException {     for (int i = 0. i < 10. i++) {         sink.writeByte(0).         sink.flush().         sleep(100).     }     fail("Expected connection to be closed"). }
false;public;0;29;;@Test public void interruptWritingRequestBody() throws Exception {     server.enqueue(new MockResponse()).     server.start().     Call call = client.newCall(new Request.Builder().url(server.url("/")).post(new RequestBody() {          @Override         @Nullable         public MediaType contentType() {             return null.         }          @Override         public void writeTo(BufferedSink sink) throws IOException {             for (int i = 0. i < 10. i++) {                 sink.writeByte(0).                 sink.flush().                 sleep(100).             }             fail("Expected connection to be closed").         }     }).build()).     interruptLater(500).     try {         call.execute().         fail().     } catch (IOException expected) {     } }
false;public;0;25;;@Test public void interruptReadingResponseBody() throws Exception {     // 8 MiB.     int responseBodySize = 8 * 1024 * 1024.     server.enqueue(new MockResponse().setBody(new Buffer().write(new byte[responseBodySize])).throttleBody(64 * 1024, 125, // 500 Kbps     TimeUnit.MILLISECONDS)).     server.start().     Call call = client.newCall(new Request.Builder().url(server.url("/")).build()).     Response response = call.execute().     interruptLater(500).     InputStream responseBody = response.body().byteStream().     byte[] buffer = new byte[1024].     try {         while (responseBody.read(buffer) != -1) {         }         fail("Expected connection to be interrupted").     } catch (IOException expected) {     }     responseBody.close(). }
false;private;1;7;;private void sleep(int delayMillis) {     try {         Thread.sleep(delayMillis).     } catch (InterruptedException e) {         Thread.currentThread().interrupt().     } }
false;private;1;8;;private void interruptLater(int delayMillis) {     Thread toInterrupt = Thread.currentThread().     Thread interruptingCow = new Thread(() -> {         sleep(delayMillis).         toInterrupt.interrupt().     }).     interruptingCow.start(). }
