commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void parse() throws IOException {     String message = "Temporary Redirect".     int version = 1.     int code = 200.     StatusLine statusLine = StatusLine.parse("HTTP/1." + version + " " + code + " " + message).     assertEquals(message, statusLine.message).     assertEquals(Protocol.HTTP_1_1, statusLine.protocol).     assertEquals(code, statusLine.code). }
false;public;0;8;;@Test public void emptyMessage() throws IOException {     int version = 1.     int code = 503.     StatusLine statusLine = StatusLine.parse("HTTP/1." + version + " " + code + " ").     assertEquals("", statusLine.message).     assertEquals(Protocol.HTTP_1_1, statusLine.protocol).     assertEquals(code, statusLine.code). }
true;public;0;8;/**  * This is not defined in the protocol but some servers won't add the leading empty space when the  * message is empty. http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1  */ ;/**  * This is not defined in the protocol but some servers won't add the leading empty space when the  * message is empty. http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1  */ @Test public void emptyMessageAndNoLeadingSpace() throws IOException {     int version = 1.     int code = 503.     StatusLine statusLine = StatusLine.parse("HTTP/1." + version + " " + code).     assertEquals("", statusLine.message).     assertEquals(Protocol.HTTP_1_1, statusLine.protocol).     assertEquals(code, statusLine.code). }
true;public;0;6;// https://github.com/square/okhttp/issues/386 ;// https://github.com/square/okhttp/issues/386 @Test public void shoutcast() throws IOException {     StatusLine statusLine = StatusLine.parse("ICY 200 OK").     assertEquals("OK", statusLine.message).     assertEquals(Protocol.HTTP_1_0, statusLine.protocol).     assertEquals(200, statusLine.code). }
false;public;0;6;;@Test public void missingProtocol() throws IOException {     assertInvalid("").     assertInvalid(" ").     assertInvalid("200 OK").     assertInvalid(" 200 OK"). }
false;public;0;9;;@Test public void protocolVersions() throws IOException {     assertInvalid("HTTP/2.0 200 OK").     assertInvalid("HTTP/2.1 200 OK").     assertInvalid("HTTP/-.1 200 OK").     assertInvalid("HTTP/1.- 200 OK").     assertInvalid("HTTP/0.1 200 OK").     assertInvalid("HTTP/101 200 OK").     assertInvalid("HTTP/1.1_200 OK"). }
false;public;0;10;;@Test public void nonThreeDigitCode() throws IOException {     assertInvalid("HTTP/1.1  OK").     assertInvalid("HTTP/1.1 2 OK").     assertInvalid("HTTP/1.1 20 OK").     assertInvalid("HTTP/1.1 2000 OK").     assertInvalid("HTTP/1.1 two OK").     assertInvalid("HTTP/1.1 2").     assertInvalid("HTTP/1.1 2000").     assertInvalid("HTTP/1.1 two"). }
false;public;0;10;;@Test public void truncated() throws IOException {     assertInvalid("").     assertInvalid("H").     assertInvalid("HTTP/1").     assertInvalid("HTTP/1.").     assertInvalid("HTTP/1.1").     assertInvalid("HTTP/1.1 ").     assertInvalid("HTTP/1.1 2").     assertInvalid("HTTP/1.1 20"). }
false;public;0;3;;@Test public void wrongMessageDelimiter() throws IOException {     assertInvalid("HTTP/1.1 200_"). }
false;private;1;7;;private void assertInvalid(String statusLine) throws IOException {     try {         StatusLine.parse(statusLine).         fail().     } catch (ProtocolException expected) {     } }
