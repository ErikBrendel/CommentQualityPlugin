commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Before public void setup() {     initializeInstanceForTests(). }
false;public;0;3;;@After public void tearDown() throws Exception {     peer.close(). }
false;public;0;19;;@Test public void serverPingsClientHttp2() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     peer.sendFrame().ping(false, 2, 3).     // PING     peer.acceptFrame().     peer.play().     // play it back     connect(peer).     // verify the peer received what was expected     InFrame ping = peer.takeFrame().     assertEquals(Http2.TYPE_PING, ping.type).     assertEquals(0, ping.streamId).     assertEquals(2, ping.payload1).     assertEquals(3, ping.payload2).     assertTrue(ping.ack). }
false;public;0;28;;@Test public void peerHttp2ServerLowersInitialWindowSize() throws Exception {     Settings initial = new Settings().     initial.set(INITIAL_WINDOW_SIZE, 1684).     Settings shouldntImpactConnection = new Settings().     shouldntImpactConnection.set(INITIAL_WINDOW_SIZE, 3368).     peer.sendFrame().settings(initial).     // ACK     peer.acceptFrame().     peer.sendFrame().settings(shouldntImpactConnection).     // ACK 2     peer.acceptFrame().     // HEADERS     peer.acceptFrame().     peer.play().     Http2Connection connection = connect(peer).     // Verify the peer received the second ACK.     InFrame ackFrame = peer.takeFrame().     assertEquals(Http2.TYPE_SETTINGS, ackFrame.type).     assertEquals(0, ackFrame.streamId).     assertTrue(ackFrame.ack).     // This stream was created *after* the connection settings were adjusted.     Http2Stream stream = connection.newStream(headerEntries("a", "android"), false).     assertEquals(3368, connection.peerSettings.getInitialWindowSize()).     // New Stream is has the most recent initial window size.     assertEquals(3368, stream.bytesLeftInWriteWindow). }
false;public;0;13;;@Test public void peerHttp2ServerZerosCompressionTable() throws Exception {     // Peer is server, so we are client.     boolean client = false.     Settings settings = new Settings().     settings.set(HEADER_TABLE_SIZE, 0).     Http2Connection connection = connectWithSettings(client, settings).     // Verify the peer's settings were read and applied.     assertEquals(0, connection.peerSettings.getHeaderTableSize()).     Http2Writer writer = connection.writer.     assertEquals(0, writer.hpackWriter.dynamicTableByteCount).     assertEquals(0, writer.hpackWriter.headerTableSizeSetting). }
false;public;0;10;;@Test public void peerHttp2ClientDisablesPush() throws Exception {     // Peer is client, so we are server.     boolean client = false.     Settings settings = new Settings().     // The peer client disables push.     settings.set(ENABLE_PUSH, 0).     Http2Connection connection = connectWithSettings(client, settings).     // verify the peer's settings were read and applied.     assertFalse(connection.peerSettings.getEnablePush(true)). }
false;public;0;11;;@Test public void peerIncreasesMaxFrameSize() throws Exception {     int newMaxFrameSize = 0x4001.     Settings settings = new Settings().     settings.set(MAX_FRAME_SIZE, newMaxFrameSize).     Http2Connection connection = connectWithSettings(true, settings).     // verify the peer's settings were read and applied.     assertEquals(newMaxFrameSize, connection.peerSettings.getMaxFrameSize(-1)).     assertEquals(newMaxFrameSize, connection.writer.maxDataLength()). }
true;public;0;37;/**  * Webservers may set the initial window size to zero, which is a special case because it means  * that we have to flush headers immediately before any request body can be sent.  * https://github.com/square/okhttp/issues/2543  */ ;/**  * Webservers may set the initial window size to zero, which is a special case because it means  * that we have to flush headers immediately before any request body can be sent.  * https://github.com/square/okhttp/issues/2543  */ @Test public void peerSetsZeroFlowControl() throws Exception {     peer.setClient(true).     // Write the mocking script.     peer.sendFrame().settings(new Settings().set(INITIAL_WINDOW_SIZE, 0)).     // ACK     peer.acceptFrame().     // Increase the connection window size.     peer.sendFrame().windowUpdate(0, 10).     // PING     peer.acceptFrame().     peer.sendFrame().ping(true, 1, 0).     // HEADERS STREAM 3     peer.acceptFrame().     peer.sendFrame().windowUpdate(3, 5).     // DATA STREAM 3 "abcde"     peer.acceptFrame().     peer.sendFrame().windowUpdate(3, 5).     // DATA STREAM 3 "fghi"     peer.acceptFrame().     peer.play().     // Play it back.     Http2Connection connection = connect(peer).     // Ensure the SETTINGS have been received.     connection.writePingAndAwaitPong().     Http2Stream stream = connection.newStream(headerEntries("a", "android"), true).     BufferedSink sink = Okio.buffer(stream.getSink()).     sink.writeUtf8("abcdefghi").     sink.flush().     // Verify the peer received what was expected.     // PING     peer.takeFrame().     InFrame headers = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, headers.type).     InFrame data1 = peer.takeFrame().     assertEquals(Http2.TYPE_DATA, data1.type).     assertEquals(3, data1.streamId).     assertArrayEquals("abcde".getBytes(UTF_8), data1.data).     InFrame data2 = peer.takeFrame().     assertEquals(Http2.TYPE_DATA, data2.type).     assertEquals(3, data2.streamId).     assertArrayEquals("fghi".getBytes(UTF_8), data2.data). }
true;public;0;28;/**  * Confirm that we account for discarded data frames. It's possible that data frames are in-flight  * just prior to us canceling a stream.  */ ;/**  * Confirm that we account for discarded data frames. It's possible that data frames are in-flight  * just prior to us canceling a stream.  */ @Test public void discardedDataFramesAreCounted() throws Exception {     // Write the mocking script.     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM 3     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "apple")).     peer.sendFrame().data(false, 3, data(1024), 1024).     // RST_STREAM     peer.acceptFrame().     peer.sendFrame().data(true, 3, data(1024), 1024).     // RST_STREAM     peer.acceptFrame().     peer.play().     Http2Connection connection = connect(peer).     Http2Stream stream1 = connection.newStream(headerEntries("b", "bark"), false).     Source source = stream1.getSource().     Buffer buffer = new Buffer().     while (buffer.size() != 1024) source.read(buffer, 1024).     stream1.close(ErrorCode.CANCEL).     InFrame frame1 = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, frame1.type).     InFrame frame2 = peer.takeFrame().     assertEquals(Http2.TYPE_RST_STREAM, frame2.type).     InFrame frame3 = peer.takeFrame().     assertEquals(Http2.TYPE_RST_STREAM, frame3.type).     assertEquals(2048, connection.unacknowledgedBytesRead). }
false;public;0;50;;@Test public void receiveGoAwayHttp2() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM 3     peer.acceptFrame().     // SYN_STREAM 5     peer.acceptFrame().     peer.sendFrame().goAway(3, ErrorCode.PROTOCOL_ERROR, EMPTY_BYTE_ARRAY).     // PING     peer.acceptFrame().     peer.sendFrame().ping(true, 1, 0).     // DATA STREAM 3     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream1 = connection.newStream(headerEntries("a", "android"), true).     Http2Stream stream2 = connection.newStream(headerEntries("b", "banana"), true).     // Ensure the GO_AWAY that resets stream2 has been received.     connection.writePingAndAwaitPong().     BufferedSink sink1 = Okio.buffer(stream1.getSink()).     BufferedSink sink2 = Okio.buffer(stream2.getSink()).     sink1.writeUtf8("abc").     try {         sink2.writeUtf8("abc").         sink2.flush().         fail().     } catch (IOException expected) {         assertEquals("stream was reset: REFUSED_STREAM", expected.getMessage()).     }     sink1.writeUtf8("def").     sink1.close().     try {         connection.newStream(headerEntries("c", "cola"), true).         fail().     } catch (ConnectionShutdownException expected) {     }     assertTrue(stream1.isOpen()).     assertFalse(stream2.isOpen()).     assertEquals(1, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream1 = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream1.type).     InFrame synStream2 = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream2.type).     InFrame ping = peer.takeFrame().     assertEquals(Http2.TYPE_PING, ping.type).     InFrame data1 = peer.takeFrame().     assertEquals(Http2.TYPE_DATA, data1.type).     assertEquals(3, data1.streamId).     assertArrayEquals("abcdef".getBytes(UTF_8), data1.data). }
false;public;0;46;;@Test public void readSendsWindowUpdateHttp2() throws Exception {     int windowSize = 100.     int windowUpdateThreshold = 50.     // Write the mocking script.     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     for (int i = 0. i < 3. i++) {         // Send frames of summing to size 50, which is windowUpdateThreshold.         peer.sendFrame().data(false, 3, data(24), 24).         peer.sendFrame().data(false, 3, data(25), 25).         peer.sendFrame().data(false, 3, data(1), 1).         // connection WINDOW UPDATE         peer.acceptFrame().         // stream WINDOW UPDATE         peer.acceptFrame().     }     peer.sendFrame().data(true, 3, data(0), 0).     peer.play().     // Play it back.     Http2Connection connection = connect(peer).     connection.okHttpSettings.set(INITIAL_WINDOW_SIZE, windowSize).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), false).     assertEquals(0, stream.unacknowledgedBytesRead).     assertEquals(Headers.of("a", "android"), stream.takeHeaders()).     Source in = stream.getSource().     Buffer buffer = new Buffer().     buffer.writeAll(in).     assertEquals(-1, in.read(buffer, 1)).     assertEquals(150, buffer.size()).     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     for (int i = 0. i < 3. i++) {         List<Integer> windowUpdateStreamIds = new ArrayList<>(2).         for (int j = 0. j < 2. j++) {             InFrame windowUpdate = peer.takeFrame().             assertEquals(Http2.TYPE_WINDOW_UPDATE, windowUpdate.type).             windowUpdateStreamIds.add(windowUpdate.streamId).             assertEquals(windowUpdateThreshold, windowUpdate.windowSizeIncrement).         }         // connection         assertTrue(windowUpdateStreamIds.contains(0)).         // stream         assertTrue(windowUpdateStreamIds.contains(3)).     } }
false;public;0;19;;@Test public void serverSendsEmptyDataClientDoesntSendWindowUpdateHttp2() throws Exception {     // Write the mocking script.     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     peer.sendFrame().data(true, 3, data(0), 0).     peer.play().     // Play it back.     Http2Connection connection = connect(peer).     Http2Stream client = connection.newStream(headerEntries("b", "banana"), false).     assertEquals(-1, client.getSource().read(new Buffer(), 1)).     // Verify the peer received what was expected.     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     assertEquals(5, peer.frameCount()). }
false;public;0;22;;@Test public void clientSendsEmptyDataServerDoesntSendWindowUpdateHttp2() throws Exception {     // Write the mocking script.     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     // DATA     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     peer.play().     // Play it back.     Http2Connection connection = connect(peer).     Http2Stream client = connection.newStream(headerEntries("b", "banana"), true).     BufferedSink out = Okio.buffer(client.getSink()).     out.write(EMPTY_BYTE_ARRAY).     out.flush().     out.close().     // Verify the peer received what was expected.     assertEquals(Http2.TYPE_HEADERS, peer.takeFrame().type).     assertEquals(Http2.TYPE_DATA, peer.takeFrame().type).     assertEquals(5, peer.frameCount()). }
false;public;0;28;;@Test public void maxFrameSizeHonored() throws Exception {     byte[] buff = new byte[peer.maxOutboundDataLength() + 1].     Arrays.fill(buff, (byte) '*').     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     // DATA     peer.acceptFrame().     // DATA     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), true).     BufferedSink out = Okio.buffer(stream.getSink()).     out.write(buff).     out.flush().     out.close().     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     InFrame data = peer.takeFrame().     assertEquals(peer.maxOutboundDataLength(), data.data.length).     data = peer.takeFrame().     assertEquals(1, data.data.length). }
false;public;0;33;;@Test public void pushPromiseStream() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     final List<Header> expectedRequestHeaders = Arrays.asList(new Header(Header.TARGET_METHOD, "GET"), new Header(Header.TARGET_SCHEME, "https"), new Header(Header.TARGET_AUTHORITY, "squareup.com"), new Header(Header.TARGET_PATH, "/cached")).     peer.sendFrame().pushPromise(3, 2, expectedRequestHeaders).     final List<Header> expectedResponseHeaders = Arrays.asList(new Header(Header.RESPONSE_STATUS, "200")).     peer.sendFrame().headers(true, 2, expectedResponseHeaders).     peer.sendFrame().data(true, 3, data(0), 0).     peer.play().     RecordingPushObserver observer = new RecordingPushObserver().     // play it back     Http2Connection connection = connect(peer, observer, REFUSE_INCOMING_STREAMS).     Http2Stream client = connection.newStream(headerEntries("b", "banana"), false).     assertEquals(-1, client.getSource().read(new Buffer(), 1)).     // verify the peer received what was expected     assertEquals(Http2.TYPE_HEADERS, peer.takeFrame().type).     assertEquals(expectedRequestHeaders, observer.takeEvent()).     assertEquals(expectedResponseHeaders, observer.takeEvent()). }
false;public;0;18;;@Test public void doublePushPromise() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     peer.sendFrame().pushPromise(3, 2, headerEntries("a", "android")).     // SYN_REPLY     peer.acceptFrame().     peer.sendFrame().pushPromise(3, 2, headerEntries("b", "banana")).     // RST_STREAM     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     connection.newStream(headerEntries("b", "banana"), false).     // verify the peer received what was expected     assertEquals(Http2.TYPE_HEADERS, peer.takeFrame().type).     assertEquals(ErrorCode.PROTOCOL_ERROR, peer.takeFrame().errorCode). }
false;public;0;25;;@Test public void pushPromiseStreamsAutomaticallyCancel() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     peer.sendFrame().pushPromise(3, 2, Arrays.asList(new Header(Header.TARGET_METHOD, "GET"), new Header(Header.TARGET_SCHEME, "https"), new Header(Header.TARGET_AUTHORITY, "squareup.com"), new Header(Header.TARGET_PATH, "/cached"))).     peer.sendFrame().headers(true, 2, Arrays.asList(new Header(Header.RESPONSE_STATUS, "200"))).     // RST_STREAM     peer.acceptFrame().     peer.play().     // play it back     connect(peer, PushObserver.CANCEL, REFUSE_INCOMING_STREAMS).     // verify the peer received what was expected     InFrame rstStream = peer.takeFrame().     assertEquals(Http2.TYPE_RST_STREAM, rstStream.type).     assertEquals(2, rstStream.streamId).     assertEquals(ErrorCode.CANCEL, rstStream.errorCode). }
true;public;0;23;/**  * When writing a set of headers fails due to an {@code IOException}, make sure the writer is left  * in a consistent state so the next writer also gets an {@code IOException} also instead of  * something worse (like an {@link IllegalStateException}.  *  * <p>See https://github.com/square/okhttp/issues/1651  */ ;/**  * When writing a set of headers fails due to an {@code IOException}, make sure the writer is left  * in a consistent state so the next writer also gets an {@code IOException} also instead of  * something worse (like an {@link IllegalStateException}.  *  * <p>See https://github.com/square/okhttp/issues/1651  */ @Test public void socketExceptionWhileWritingHeaders() throws Exception {     // SYN_STREAM.     peer.acceptFrame().     peer.play().     String longString = repeat('a', Http2.INITIAL_MAX_FRAME_SIZE + 1).     Socket socket = peer.openSocket().     Http2Connection connection = new Http2Connection.Builder(true).socket(socket).pushObserver(IGNORE).build().     connection.start(false).     socket.shutdownOutput().     try {         connection.newStream(headerEntries("a", longString), false).         fail().     } catch (IOException expected) {     }     try {         connection.newStream(headerEntries("b", longString), false).         fail().     } catch (IOException expected) {     } }
false;public;0;33;;@Test public void clientCreatesStreamAndServerReplies() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     // DATA     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     peer.sendFrame().data(true, 3, new Buffer().writeUtf8("robot"), 5).     // PING     peer.acceptFrame().     // PING     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), true).     BufferedSink out = Okio.buffer(stream.getSink()).     out.writeUtf8("c3po").     out.close().     assertEquals(Headers.of("a", "android"), stream.takeHeaders()).     assertStreamData("robot", stream.getSource()).     connection.writePingAndAwaitPong().     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     assertFalse(synStream.outFinished).     assertEquals(3, synStream.streamId).     assertEquals(-1, synStream.associatedStreamId).     assertEquals(headerEntries("b", "banana"), synStream.headerBlock).     InFrame requestData = peer.takeFrame().     assertArrayEquals("c3po".getBytes(UTF_8), requestData.data). }
false;public;0;26;;@Test public void serverFinishesStreamWithHeaders() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     // PING     peer.acceptFrame().     peer.sendFrame().headers(true, 3, headerEntries("headers", "bam")).     // PONG     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "artichaut"), false).     connection.writePingAndAwaitPong().     assertEquals(Headers.of("headers", "bam"), stream.takeHeaders()).     assertEquals(EMPTY_HEADERS, stream.trailers()).     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     assertFalse(synStream.outFinished).     assertEquals(3, synStream.streamId).     assertEquals(-1, synStream.associatedStreamId).     assertEquals(headerEntries("a", "artichaut"), synStream.headerBlock). }
false;public;0;27;;@Test public void serverWritesTrailersAndClientReadsTrailers() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("headers", "bam")).     // PING     peer.acceptFrame().     peer.sendFrame().headers(true, 3, headerEntries("trailers", "boom")).     // PONG     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "artichaut"), false).     assertEquals(Headers.of("headers", "bam"), stream.takeHeaders()).     connection.writePingAndAwaitPong().     assertEquals(Headers.of("trailers", "boom"), stream.trailers()).     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     assertFalse(synStream.outFinished).     assertEquals(3, synStream.streamId).     assertEquals(-1, synStream.associatedStreamId).     assertEquals(headerEntries("a", "artichaut"), synStream.headerBlock). }
false;public;0;36;;@Test public void serverWritesTrailersWithData() throws Exception {     // We buffer some outbound data and headers and confirm that the END_STREAM flag comes with the     // headers (and not with the data).     // write the mocking script for the client     peer.setClient(true).     // Write the mocking script.     peer.sendFrame().settings(new Settings()).     peer.sendFrame().headers(true, 3, headerEntries("client", "abc")).     // ACK     peer.acceptFrame().     // HEADERS STREAM 3     peer.acceptFrame().     // DATA STREAM 3 "abcde"     peer.acceptFrame().     // HEADERS STREAM 3     peer.acceptFrame().     peer.play().     // Play it back.     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "android"), true).     stream.enqueueTrailers(Headers.of("foo", "bar")).     BufferedSink sink = Okio.buffer(stream.getSink()).     sink.writeUtf8("abcdefghi").     sink.close().     // Verify the peer received what was expected.     InFrame headers1 = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, headers1.type).     InFrame data1 = peer.takeFrame().     assertEquals(Http2.TYPE_DATA, data1.type).     assertEquals(3, data1.streamId).     assertArrayEquals("abcdefghi".getBytes(UTF_8), data1.data).     assertFalse(data1.inFinished).     InFrame headers2 = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, headers2.type).     assertTrue(headers2.inFinished). }
false;public;0;21;;@Test public void clientCannotReadTrailersWithoutExhaustingStream() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().data(false, 3, new Buffer().writeUtf8("robot"), 5).     peer.sendFrame().headers(true, 3, headerEntries("trailers", "boom")).     // PING     peer.acceptFrame().     // PONG     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "artichaut"), true).     connection.writePingAndAwaitPong().     try {         stream.trailers().         fail().     } catch (IllegalStateException expected) {     } }
false;public;0;20;;@Test public void clientCannotReadTrailersIfTheStreamFailed() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().rstStream(3, ErrorCode.PROTOCOL_ERROR).     // PING     peer.acceptFrame().     // PONG     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "artichaut"), true).     connection.writePingAndAwaitPong().     try {         stream.trailers().         fail().     } catch (StreamResetException expected) {     } }
false;public;0;20;;@Test public void serverCannotEnqueueTrailersAfterFinishingTheStream() throws Exception {     peer.setClient(true).     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // PING     peer.acceptFrame().     peer.sendFrame().ping(true, 1, 0).     peer.play().     // Play it back.     Http2Connection connection = connect(peer).     connection.writePingAndAwaitPong().     Http2Stream stream = connection.newStream(headerEntries("a", "android"), true).     // finish the stream     stream.writeHeaders(headerEntries("b", "berserk"), true, false).     try {         stream.enqueueTrailers(Headers.of("trailers", "boom")).         fail().     } catch (IllegalStateException expected) {     } }
false;public;0;29;;@Test public void noTrailersFrameYieldsEmptyTrailers() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("headers", "bam")).     peer.sendFrame().data(true, 3, new Buffer().writeUtf8("robot"), 5).     // PING     peer.acceptFrame().     // PONG     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "artichaut"), false).     BufferedSource source = Okio.buffer(stream.getSource()).     connection.writePingAndAwaitPong().     assertEquals(Headers.of("headers", "bam"), stream.takeHeaders()).     assertEquals("robot", source.readUtf8(5)).     assertEquals(EMPTY_HEADERS, stream.trailers()).     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     assertFalse(synStream.outFinished).     assertEquals(3, synStream.streamId).     assertEquals(-1, synStream.associatedStreamId).     assertEquals(headerEntries("a", "artichaut"), synStream.headerBlock). }
false;public;0;35;;@Test public void serverReadsHeadersDataHeaders() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     // DATA     peer.acceptFrame().     // HEADERS     peer.acceptFrame().     peer.sendFrame().headers(true, 3, headerEntries("a", "android")).     // PING     peer.acceptFrame().     // PING     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), true).     BufferedSink out = Okio.buffer(stream.getSink()).     out.writeUtf8("c3po").     out.close().     stream.writeHeaders(headerEntries("e", "elephant"), false, false).     connection.writePingAndAwaitPong().     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     assertFalse(synStream.outFinished).     assertEquals(3, synStream.streamId).     assertEquals(-1, synStream.associatedStreamId).     assertEquals(headerEntries("b", "banana"), synStream.headerBlock).     InFrame requestData = peer.takeFrame().     assertArrayEquals("c3po".getBytes(UTF_8), requestData.data).     InFrame nextFrame = peer.takeFrame().     assertEquals(headerEntries("e", "elephant"), nextFrame.headerBlock). }
false;public;0;23;;@Test public void clientCreatesStreamAndServerRepliesWithFin() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     // PING     peer.acceptFrame().     peer.sendFrame().headers(true, 3, headerEntries("a", "android")).     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     connection.newStream(headerEntries("b", "banana"), false).     assertEquals(1, connection.openStreamCount()).     // Ensure that the SYN_REPLY has been received.     connection.writePingAndAwaitPong().     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     InFrame ping = peer.takeFrame().     assertEquals(Http2.TYPE_PING, ping.type). }
false;public;0;18;;@Test public void serverPingsClient() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     peer.sendFrame().ping(false, 2, 0).     // PING     peer.acceptFrame().     peer.play().     // play it back     connect(peer).     // verify the peer received what was expected     InFrame ping = peer.takeFrame().     assertEquals(0, ping.streamId).     assertEquals(2, ping.payload1).     assertEquals(0, ping.payload2).     assertTrue(ping.ack). }
false;public;0;24;;@Test public void clientPingsServer() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // PING     peer.acceptFrame().     peer.sendFrame().ping(true, 1, 5).     peer.play().     // play it back     Http2Connection connection = connect(peer).     long pingAtNanos = System.nanoTime().     connection.writePingAndAwaitPong().     long elapsedNanos = System.nanoTime() - pingAtNanos.     assertTrue(elapsedNanos > 0).     assertTrue(elapsedNanos < TimeUnit.SECONDS.toNanos(1)).     // verify the peer received what was expected     InFrame pingFrame = peer.takeFrame().     assertEquals(Http2.TYPE_PING, pingFrame.type).     assertEquals(0, pingFrame.streamId).     // OkOk     assertEquals(0x4f4b6f6b, pingFrame.payload1).     // donut     assertEquals(0xf09f8da9, pingFrame.payload2).     assertFalse(pingFrame.ack). }
false;public;0;20;;@Test public void unexpectedPingIsNotReturned() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     peer.sendFrame().ping(false, 2, 0).     // PING     peer.acceptFrame().     // This ping will not be returned.     peer.sendFrame().ping(true, 3, 0).     peer.sendFrame().ping(false, 4, 0).     // PING     peer.acceptFrame().     peer.play().     // play it back     connect(peer).     // verify the peer received what was expected     InFrame ping2 = peer.takeFrame().     assertEquals(2, ping2.payload1).     InFrame ping4 = peer.takeFrame().     assertEquals(4, ping4.payload1). }
false;public;1;3;;@Override public void onStream(Http2Stream stream) throws IOException {     throw new AssertionError(). }
false;public;1;4;;@Override public void onSettings(Http2Connection connection) {     maxConcurrentStreams.set(connection.maxConcurrentStreams()).     maxConcurrentStreamsUpdated.countDown(). }
false;public;0;31;;@Test public void serverSendsSettingsToClient() throws Exception {     // write the mocking script     final Settings settings = new Settings().     settings.set(MAX_CONCURRENT_STREAMS, 10).     peer.sendFrame().settings(settings).     // ACK     peer.acceptFrame().     peer.sendFrame().ping(false, 2, 0).     // PING     peer.acceptFrame().     peer.play().     // play it back     final CountDownLatch maxConcurrentStreamsUpdated = new CountDownLatch(1).     final AtomicInteger maxConcurrentStreams = new AtomicInteger().     Http2Connection.Listener listener = new Http2Connection.Listener() {          @Override         public void onStream(Http2Stream stream) throws IOException {             throw new AssertionError().         }          @Override         public void onSettings(Http2Connection connection) {             maxConcurrentStreams.set(connection.maxConcurrentStreams()).             maxConcurrentStreamsUpdated.countDown().         }     }.     Http2Connection connection = connect(peer, IGNORE, listener).     synchronized (connection) {         assertEquals(10, connection.peerSettings.getMaxConcurrentStreams(-1)).     }     maxConcurrentStreamsUpdated.await().     assertEquals(10, maxConcurrentStreams.get()). }
false;public;0;30;;@Test public void multipleSettingsFramesAreMerged() throws Exception {     // write the mocking script     Settings settings1 = new Settings().     settings1.set(HEADER_TABLE_SIZE, 10000).     settings1.set(INITIAL_WINDOW_SIZE, 20000).     settings1.set(MAX_FRAME_SIZE, 30000).     peer.sendFrame().settings(settings1).     // ACK SETTINGS     peer.acceptFrame().     Settings settings2 = new Settings().     settings2.set(INITIAL_WINDOW_SIZE, 40000).     settings2.set(MAX_FRAME_SIZE, 50000).     settings2.set(MAX_CONCURRENT_STREAMS, 60000).     peer.sendFrame().settings(settings2).     // ACK SETTINGS     peer.acceptFrame().     peer.sendFrame().ping(false, 2, 0).     // PING     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     assertEquals(Http2.TYPE_SETTINGS, peer.takeFrame().type).     assertEquals(Http2.TYPE_PING, peer.takeFrame().type).     synchronized (connection) {         assertEquals(10000, connection.peerSettings.getHeaderTableSize()).         assertEquals(40000, connection.peerSettings.getInitialWindowSize()).         assertEquals(50000, connection.peerSettings.getMaxFrameSize(-1)).         assertEquals(60000, connection.peerSettings.getMaxConcurrentStreams(-1)).     } }
false;public;0;27;;@Test public void clearSettingsBeforeMerge() throws Exception {     // write the mocking script     Settings settings1 = new Settings().     settings1.set(HEADER_TABLE_SIZE, 10000).     settings1.set(INITIAL_WINDOW_SIZE, 20000).     settings1.set(MAX_FRAME_SIZE, 30000).     peer.sendFrame().settings(settings1).     // ACK     peer.acceptFrame().     peer.sendFrame().ping(false, 2, 0).     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     // fake a settings frame with clear flag set.     Settings settings2 = new Settings().     settings2.set(MAX_CONCURRENT_STREAMS, 60000).     connection.readerRunnable.settings(true, settings2).     synchronized (connection) {         assertEquals(-1, connection.peerSettings.getHeaderTableSize()).         assertEquals(DEFAULT_INITIAL_WINDOW_SIZE, connection.peerSettings.getInitialWindowSize()).         assertEquals(-1, connection.peerSettings.getMaxFrameSize(-1)).         assertEquals(60000, connection.peerSettings.getMaxConcurrentStreams(-1)).     } }
false;public;0;21;;@Test public void bogusDataFrameDoesNotDisruptConnection() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     peer.sendFrame().data(true, 41, new Buffer().writeUtf8("bogus"), 5).     // RST_STREAM     peer.acceptFrame().     peer.sendFrame().ping(false, 2, 0).     // PING     peer.acceptFrame().     peer.play().     // play it back     connect(peer).     // verify the peer received what was expected     InFrame rstStream = peer.takeFrame().     assertEquals(Http2.TYPE_RST_STREAM, rstStream.type).     assertEquals(41, rstStream.streamId).     assertEquals(ErrorCode.PROTOCOL_ERROR, rstStream.errorCode).     InFrame ping = peer.takeFrame().     assertEquals(2, ping.payload1). }
false;public;0;16;;@Test public void bogusReplySilentlyIgnored() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     peer.sendFrame().headers(false, 41, headerEntries("a", "android")).     peer.sendFrame().ping(false, 2, 0).     // PING     peer.acceptFrame().     peer.play().     // play it back     connect(peer).     // verify the peer received what was expected     InFrame ping = peer.takeFrame().     assertEquals(2, ping.payload1). }
false;public;0;38;;@Test public void serverClosesClientOutputStream() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().rstStream(3, ErrorCode.CANCEL).     // PING     peer.acceptFrame().     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "android"), true).     BufferedSink out = Okio.buffer(stream.getSink()).     // Ensure that the RST_CANCEL has been received.     connection.writePingAndAwaitPong().     try {         out.writeUtf8("square").         out.flush().         fail().     } catch (IOException expected) {         assertEquals("stream was reset: CANCEL", expected.getMessage()).     }     try {         out.close().         fail().     } catch (IOException expected) {     // Close throws because buffered data wasn't flushed.     }     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     assertFalse(synStream.inFinished).     assertFalse(synStream.outFinished).     InFrame ping = peer.takeFrame().     assertEquals(Http2.TYPE_PING, ping.type). }
true;public;0;38;/**  * Test that the client sends a RST_STREAM if doing so won't disrupt the output stream.  */ ;/**  * Test that the client sends a RST_STREAM if doing so won't disrupt the output stream.  */ @Test public void clientClosesClientInputStream() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     // RST_STREAM     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "android"), false).     Source in = stream.getSource().     BufferedSink out = Okio.buffer(stream.getSink()).     in.close().     try {         in.read(new Buffer(), 1).         fail().     } catch (IOException expected) {         assertEquals("stream closed", expected.getMessage()).     }     try {         out.writeUtf8("a").         out.flush().         fail().     } catch (IOException expected) {         assertEquals("stream finished", expected.getMessage()).     }     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     assertTrue(synStream.inFinished).     assertFalse(synStream.outFinished).     InFrame rstStream = peer.takeFrame().     assertEquals(Http2.TYPE_RST_STREAM, rstStream.type).     assertEquals(ErrorCode.CANCEL, rstStream.errorCode). }
true;public;0;43;/**  * Test that the client doesn't send a RST_STREAM if doing so will disrupt the output stream.  */ ;/**  * Test that the client doesn't send a RST_STREAM if doing so will disrupt the output stream.  */ @Test public void clientClosesClientInputStreamIfOutputStreamIsClosed() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     // DATA     peer.acceptFrame().     // DATA with FLAG_FIN     peer.acceptFrame().     // RST_STREAM     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "android"), true).     Source source = stream.getSource().     BufferedSink out = Okio.buffer(stream.getSink()).     source.close().     try {         source.read(new Buffer(), 1).         fail().     } catch (IOException expected) {         assertEquals("stream closed", expected.getMessage()).     }     out.writeUtf8("square").     out.flush().     out.close().     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     assertFalse(synStream.inFinished).     assertFalse(synStream.outFinished).     InFrame data = peer.takeFrame().     assertEquals(Http2.TYPE_DATA, data.type).     assertArrayEquals("square".getBytes(UTF_8), data.data).     InFrame fin = peer.takeFrame().     assertEquals(Http2.TYPE_DATA, fin.type).     assertTrue(fin.inFinished).     assertFalse(fin.outFinished).     InFrame rstStream = peer.takeFrame().     assertEquals(Http2.TYPE_RST_STREAM, rstStream.type).     assertEquals(ErrorCode.CANCEL, rstStream.errorCode). }
false;public;0;25;;@Test public void serverClosesClientInputStream() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("b", "banana")).     peer.sendFrame().data(true, 3, new Buffer().writeUtf8("square"), 6).     // PING     peer.acceptFrame().     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "android"), false).     Source source = stream.getSource().     assertStreamData("square", source).     // Ensure that inFinished has been received.     connection.writePingAndAwaitPong().     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     assertTrue(synStream.inFinished).     assertFalse(synStream.outFinished). }
false;public;0;23;;@Test public void remoteDoubleSynReply() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     // PING     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("b", "banana")).     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("c", "cola"), false).     assertEquals(Headers.of("a", "android"), stream.takeHeaders()).     // Ensure that the 2nd SYN REPLY has been received.     connection.writePingAndAwaitPong().     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     InFrame ping = peer.takeFrame().     assertEquals(Http2.TYPE_PING, ping.type). }
false;public;0;29;;@Test public void remoteSendsDataAfterInFinished() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     peer.sendFrame().data(true, 3, new Buffer().writeUtf8("robot"), 5).     peer.sendFrame().data(true, 3, new Buffer().writeUtf8("c3po"), 4).     // RST_STREAM     peer.acceptFrame().     // Ping just to make sure the stream was fastforwarded.     peer.sendFrame().ping(false, 2, 0).     // PING     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), false).     assertEquals(Headers.of("a", "android"), stream.takeHeaders()).     assertStreamData("robot", stream.getSource()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     InFrame rstStream = peer.takeFrame().     assertEquals(Http2.TYPE_RST_STREAM, rstStream.type).     assertEquals(3, rstStream.streamId).     InFrame ping = peer.takeFrame().     assertEquals(Http2.TYPE_PING, ping.type).     assertEquals(2, ping.payload1). }
false;public;0;28;;@Test public void clientDoesNotLimitFlowControl() throws Exception {     int dataLength = 16384.     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("b", "banana")).     peer.sendFrame().data(false, 3, new Buffer().write(new byte[dataLength]), dataLength).     peer.sendFrame().data(false, 3, new Buffer().write(new byte[dataLength]), dataLength).     peer.sendFrame().data(false, 3, new Buffer().write(new byte[dataLength]), dataLength).     peer.sendFrame().data(false, 3, new Buffer().write(new byte[dataLength]), dataLength).     peer.sendFrame().data(false, 3, new Buffer().write(new byte[1]), 1).     // Ping just to make sure the stream was fastforwarded.     peer.sendFrame().ping(false, 2, 0).     // PING     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "android"), false).     assertEquals(Headers.of("b", "banana"), stream.takeHeaders()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     InFrame ping = peer.takeFrame().     assertEquals(Http2.TYPE_PING, ping.type).     assertEquals(2, ping.payload1). }
false;public;0;28;;@Test public void remoteSendsRefusedStreamBeforeReplyHeaders() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().rstStream(3, ErrorCode.REFUSED_STREAM).     peer.sendFrame().ping(false, 2, 0).     // PING     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "android"), false).     try {         stream.takeHeaders().         fail().     } catch (IOException expected) {         assertEquals("stream was reset: REFUSED_STREAM", expected.getMessage()).     }     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     InFrame ping = peer.takeFrame().     assertEquals(Http2.TYPE_PING, ping.type).     assertEquals(2, ping.payload1). }
false;public;0;50;;@Test public void receiveGoAway() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM 1     peer.acceptFrame().     // SYN_STREAM 3     peer.acceptFrame().     // PING.     peer.acceptFrame().     peer.sendFrame().goAway(3, ErrorCode.PROTOCOL_ERROR, Util.EMPTY_BYTE_ARRAY).     peer.sendFrame().ping(true, 1, 0).     // DATA STREAM 1     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream1 = connection.newStream(headerEntries("a", "android"), true).     Http2Stream stream2 = connection.newStream(headerEntries("b", "banana"), true).     // Ensure the GO_AWAY that resets stream2 has been received.     connection.writePingAndAwaitPong().     BufferedSink sink1 = Okio.buffer(stream1.getSink()).     BufferedSink sink2 = Okio.buffer(stream2.getSink()).     sink1.writeUtf8("abc").     try {         sink2.writeUtf8("abc").         sink2.flush().         fail().     } catch (IOException expected) {         assertEquals("stream was reset: REFUSED_STREAM", expected.getMessage()).     }     sink1.writeUtf8("def").     sink1.close().     try {         connection.newStream(headerEntries("c", "cola"), false).         fail().     } catch (ConnectionShutdownException expected) {     }     assertTrue(stream1.isOpen()).     assertFalse(stream2.isOpen()).     assertEquals(1, connection.openStreamCount()).     // verify the peer received what was expected     InFrame synStream1 = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream1.type).     InFrame synStream2 = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream2.type).     InFrame ping = peer.takeFrame().     assertEquals(Http2.TYPE_PING, ping.type).     InFrame data1 = peer.takeFrame().     assertEquals(Http2.TYPE_DATA, data1.type).     assertEquals(3, data1.streamId).     assertArrayEquals("abcdef".getBytes(UTF_8), data1.data). }
false;public;0;34;;@Test public void sendGoAway() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM 1     peer.acceptFrame().     // GOAWAY     peer.acceptFrame().     // PING     peer.acceptFrame().     // Should be ignored!     peer.sendFrame().headers(false, 2, headerEntries("b", "b")).     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     connection.newStream(headerEntries("a", "android"), false).     synchronized (connection) {         if (connection.shutdown) {             throw new ConnectionShutdownException().         }     }     connection.writePing(false, 0x01, 0x02).     connection.shutdown(ErrorCode.PROTOCOL_ERROR).     assertEquals(1, connection.openStreamCount()).     // Prevent the peer from exiting prematurely.     connection.awaitPong().     // verify the peer received what was expected     InFrame synStream1 = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream1.type).     InFrame pingFrame = peer.takeFrame().     assertEquals(Http2.TYPE_PING, pingFrame.type).     InFrame goaway = peer.takeFrame().     assertEquals(Http2.TYPE_GOAWAY, goaway.type).     assertEquals(0, goaway.streamId).     assertEquals(ErrorCode.PROTOCOL_ERROR, goaway.errorCode). }
false;public;0;44;;@Test public void close() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     // GOAWAY     peer.acceptFrame().     // RST_STREAM     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("a", "android"), false).     assertEquals(1, connection.openStreamCount()).     connection.close().     assertEquals(0, connection.openStreamCount()).     try {         connection.newStream(headerEntries("b", "banana"), false).         fail().     } catch (ConnectionShutdownException expected) {     }     BufferedSink sink = Okio.buffer(stream.getSink()).     try {         sink.writeByte(0).         sink.flush().         fail().     } catch (IOException expected) {         assertEquals("stream finished", expected.getMessage()).     }     try {         stream.getSource().read(new Buffer(), 1).         fail().     } catch (IOException expected) {         assertEquals("stream was reset: CANCEL", expected.getMessage()).     }     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     InFrame goaway = peer.takeFrame().     assertEquals(Http2.TYPE_GOAWAY, goaway.type).     InFrame rstStream = peer.takeFrame().     assertEquals(Http2.TYPE_RST_STREAM, rstStream.type).     assertEquals(3, rstStream.streamId). }
false;public;0;27;;@Test public void getResponseHeadersTimesOut() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     // RST_STREAM     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), false).     stream.readTimeout().timeout(500, TimeUnit.MILLISECONDS).     long startNanos = System.nanoTime().     try {         stream.takeHeaders().         fail().     } catch (InterruptedIOException expected) {     }     long elapsedNanos = System.nanoTime() - startNanos.     awaitWatchdogIdle().     assertEquals(500d, TimeUnit.NANOSECONDS.toMillis(elapsedNanos), 200d).     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     assertEquals(Http2.TYPE_HEADERS, peer.takeFrame().type).     assertEquals(Http2.TYPE_RST_STREAM, peer.takeFrame().type). }
false;public;0;29;;@Test public void readTimesOut() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     // RST_STREAM     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), false).     stream.readTimeout().timeout(500, TimeUnit.MILLISECONDS).     Source source = stream.getSource().     long startNanos = System.nanoTime().     try {         source.read(new Buffer(), 1).         fail().     } catch (InterruptedIOException expected) {     }     long elapsedNanos = System.nanoTime() - startNanos.     awaitWatchdogIdle().     assertEquals(500d, TimeUnit.NANOSECONDS.toMillis(elapsedNanos), 200d).     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     assertEquals(Http2.TYPE_HEADERS, peer.takeFrame().type).     assertEquals(Http2.TYPE_RST_STREAM, peer.takeFrame().type). }
false;public;0;40;;@Test public void writeTimesOutAwaitingStreamWindow() throws Exception {     // Set the peer's receive window to 5 bytes!     Settings peerSettings = new Settings().set(INITIAL_WINDOW_SIZE, 5).     // write the mocking script     peer.sendFrame().settings(peerSettings).     // ACK SETTINGS     peer.acceptFrame().     // PING     peer.acceptFrame().     peer.sendFrame().ping(true, 1, 0).     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     // DATA     peer.acceptFrame().     // RST_STREAM     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     // Make sure settings have been received.     connection.writePingAndAwaitPong().     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), true).     Sink sink = stream.getSink().     sink.write(new Buffer().writeUtf8("abcde"), 5).     stream.writeTimeout().timeout(500, TimeUnit.MILLISECONDS).     long startNanos = System.nanoTime().     sink.write(new Buffer().writeUtf8("f"), 1).     try {         // This will time out waiting on the write window.         sink.flush().         fail().     } catch (InterruptedIOException expected) {     }     long elapsedNanos = System.nanoTime() - startNanos.     awaitWatchdogIdle().     assertEquals(500d, TimeUnit.NANOSECONDS.toMillis(elapsedNanos), 200d).     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     assertEquals(Http2.TYPE_PING, peer.takeFrame().type).     assertEquals(Http2.TYPE_HEADERS, peer.takeFrame().type).     assertEquals(Http2.TYPE_DATA, peer.takeFrame().type).     assertEquals(Http2.TYPE_RST_STREAM, peer.takeFrame().type). }
false;public;0;44;;@Test public void writeTimesOutAwaitingConnectionWindow() throws Exception {     // Set the peer's receive window to 5 bytes. Give the stream 5 bytes back, so only the     // connection-level window is applicable.     Settings peerSettings = new Settings().set(INITIAL_WINDOW_SIZE, 5).     // write the mocking script     peer.sendFrame().settings(peerSettings).     // ACK SETTINGS     peer.acceptFrame().     // PING     peer.acceptFrame().     peer.sendFrame().ping(true, 1, 0).     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     // PING     peer.acceptFrame().     peer.sendFrame().ping(true, 3, 0).     // DATA     peer.acceptFrame().     // RST_STREAM     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     // Make sure settings have been acked.     connection.writePingAndAwaitPong().     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), true).     // Make sure the window update has been received.     connection.writePingAndAwaitPong().     Sink sink = stream.getSink().     stream.writeTimeout().timeout(500, TimeUnit.MILLISECONDS).     sink.write(new Buffer().writeUtf8("abcdef"), 6).     long startNanos = System.nanoTime().     try {         // This will time out waiting on the write window.         sink.flush().         fail().     } catch (InterruptedIOException expected) {     }     long elapsedNanos = System.nanoTime() - startNanos.     awaitWatchdogIdle().     assertEquals(500d, TimeUnit.NANOSECONDS.toMillis(elapsedNanos), 200d).     assertEquals(0, connection.openStreamCount()).     // verify the peer received what was expected     assertEquals(Http2.TYPE_PING, peer.takeFrame().type).     assertEquals(Http2.TYPE_HEADERS, peer.takeFrame().type).     assertEquals(Http2.TYPE_PING, peer.takeFrame().type).     assertEquals(Http2.TYPE_DATA, peer.takeFrame().type).     assertEquals(Http2.TYPE_RST_STREAM, peer.takeFrame().type). }
false;public;0;26;;@Test public void outgoingWritesAreBatched() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     // DATA     peer.acceptFrame().     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), true).     // two outgoing writes     Sink sink = stream.getSink().     sink.write(new Buffer().writeUtf8("abcde"), 5).     sink.write(new Buffer().writeUtf8("fghij"), 5).     sink.close().     // verify the peer received one incoming frame     assertEquals(Http2.TYPE_HEADERS, peer.takeFrame().type).     InFrame data = peer.takeFrame().     assertEquals(Http2.TYPE_DATA, data.type).     assertArrayEquals("abcdefghij".getBytes(UTF_8), data.data).     assertTrue(data.inFinished). }
false;public;0;24;;@Test public void headers() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     // PING     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     peer.sendFrame().headers(false, 3, headerEntries("c", "c3po")).     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), true).     // Ensure that the HEADERS has been received.     connection.writePingAndAwaitPong().     assertEquals(Headers.of("a", "android"), stream.takeHeaders()).     assertEquals(Headers.of("c", "c3po"), stream.takeHeaders()).     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     InFrame ping = peer.takeFrame().     assertEquals(Http2.TYPE_PING, ping.type). }
false;public;0;23;;@Test public void readMultipleSetsOfResponseHeaders() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     // PING     peer.acceptFrame().     peer.sendFrame().headers(true, 3, headerEntries("c", "cola")).     // PONG     peer.sendFrame().ping(true, 1, 0).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), true).     stream.getConnection().flush().     assertEquals(Headers.of("a", "android"), stream.takeHeaders()).     connection.writePingAndAwaitPong().     assertEquals(Headers.of("c", "cola"), stream.trailers()).     // verify the peer received what was expected     assertEquals(Http2.TYPE_HEADERS, peer.takeFrame().type).     assertEquals(Http2.TYPE_PING, peer.takeFrame().type). }
false;public;0;46;;@Test public void readSendsWindowUpdate() throws Exception {     int windowSize = 100.     int windowUpdateThreshold = 50.     // Write the mocking script.     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     for (int i = 0. i < 3. i++) {         // Send frames of summing to size 50, which is windowUpdateThreshold.         peer.sendFrame().data(false, 3, data(24), 24).         peer.sendFrame().data(false, 3, data(25), 25).         peer.sendFrame().data(false, 3, data(1), 1).         // connection WINDOW UPDATE         peer.acceptFrame().         // stream WINDOW UPDATE         peer.acceptFrame().     }     peer.sendFrame().data(true, 3, data(0), 0).     peer.play().     // Play it back.     Http2Connection connection = connect(peer).     connection.okHttpSettings.set(INITIAL_WINDOW_SIZE, windowSize).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), false).     assertEquals(0, stream.unacknowledgedBytesRead).     assertEquals(Headers.of("a", "android"), stream.takeHeaders()).     Source in = stream.getSource().     Buffer buffer = new Buffer().     buffer.writeAll(in).     assertEquals(-1, in.read(buffer, 1)).     assertEquals(150, buffer.size()).     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     for (int i = 0. i < 3. i++) {         List<Integer> windowUpdateStreamIds = new ArrayList<>(2).         for (int j = 0. j < 2. j++) {             InFrame windowUpdate = peer.takeFrame().             assertEquals(Http2.TYPE_WINDOW_UPDATE, windowUpdate.type).             windowUpdateStreamIds.add(windowUpdate.streamId).             assertEquals(windowUpdateThreshold, windowUpdate.windowSizeIncrement).         }         // connection         assertTrue(windowUpdateStreamIds.contains(0)).         // stream         assertTrue(windowUpdateStreamIds.contains(3)).     } }
false;public;0;19;;@Test public void serverSendsEmptyDataClientDoesntSendWindowUpdate() throws Exception {     // Write the mocking script.     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     peer.sendFrame().data(true, 3, data(0), 0).     peer.play().     // Play it back.     Http2Connection connection = connect(peer).     Http2Stream client = connection.newStream(headerEntries("b", "banana"), false).     assertEquals(-1, client.getSource().read(new Buffer(), 1)).     // Verify the peer received what was expected.     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     assertEquals(5, peer.frameCount()). }
false;public;0;22;;@Test public void clientSendsEmptyDataServerDoesntSendWindowUpdate() throws Exception {     // Write the mocking script.     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     // DATA     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     peer.play().     // Play it back.     Http2Connection connection = connect(peer).     Http2Stream client = connection.newStream(headerEntries("b", "banana"), true).     BufferedSink out = Okio.buffer(client.getSink()).     out.write(Util.EMPTY_BYTE_ARRAY).     out.flush().     out.close().     // Verify the peer received what was expected.     assertEquals(Http2.TYPE_HEADERS, peer.takeFrame().type).     assertEquals(Http2.TYPE_DATA, peer.takeFrame().type).     assertEquals(5, peer.frameCount()). }
false;public;0;22;;@Test public void testTruncatedDataFrame() throws Exception {     // write the mocking script     peer.sendFrame().settings(new Settings()).     // ACK     peer.acceptFrame().     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     peer.sendFrame().data(false, 3, data(1024), 1024).     peer.truncateLastFrame(8 + 100).     peer.play().     // play it back     Http2Connection connection = connect(peer).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), false).     assertEquals(Headers.of("a", "android"), stream.takeHeaders()).     Source in = stream.getSource().     try {         Okio.buffer(in).readByteString(101).         fail().     } catch (IOException expected) {         assertEquals("stream was reset: PROTOCOL_ERROR", expected.getMessage()).     } }
false;public;0;41;;@Test public void blockedStreamDoesntStarveNewStream() throws Exception {     int framesThatFillWindow = roundUp(DEFAULT_INITIAL_WINDOW_SIZE, peer.maxOutboundDataLength()).     // Write the mocking script. This accepts more data frames than necessary!     peer.sendFrame().settings(new Settings()).     // SETTINGS ACK     peer.acceptFrame().     // SYN_STREAM on stream 1     peer.acceptFrame().     for (int i = 0. i < framesThatFillWindow. i++) {         // DATA on stream 1         peer.acceptFrame().     }     // SYN_STREAM on stream 2     peer.acceptFrame().     // DATA on stream 2     peer.acceptFrame().     peer.play().     // Play it back.     Http2Connection connection = connect(peer).     Http2Stream stream1 = connection.newStream(headerEntries("a", "apple"), true).     BufferedSink out1 = Okio.buffer(stream1.getSink()).     out1.write(new byte[DEFAULT_INITIAL_WINDOW_SIZE]).     out1.flush().     // Check that we've filled the window for both the stream and also the connection.     assertEquals(0, connection.bytesLeftInWriteWindow).     assertEquals(0, connection.getStream(3).bytesLeftInWriteWindow).     // receiving a window update on the connection will unblock new streams.     connection.readerRunnable.windowUpdate(0, 3).     assertEquals(3, connection.bytesLeftInWriteWindow).     assertEquals(0, connection.getStream(3).bytesLeftInWriteWindow).     // Another stream should be able to send data even though 1 is blocked.     Http2Stream stream2 = connection.newStream(headerEntries("b", "banana"), true).     BufferedSink out2 = Okio.buffer(stream2.getSink()).     out2.writeUtf8("foo").     out2.flush().     assertEquals(0, connection.bytesLeftInWriteWindow).     assertEquals(0, connection.getStream(3).bytesLeftInWriteWindow).     assertEquals(DEFAULT_INITIAL_WINDOW_SIZE - 3, connection.getStream(5).bytesLeftInWriteWindow). }
false;public;0;27;;@Test public void remoteOmitsInitialSettings() throws Exception {     // Write the mocking script. Note no SETTINGS frame is sent or acknowledged.     // SYN_STREAM     peer.acceptFrame().     peer.sendFrame().headers(false, 3, headerEntries("a", "android")).     // GOAWAY     peer.acceptFrame().     peer.play().     Http2Connection connection = new Http2Connection.Builder(true).socket(peer.openSocket()).build().     connection.start(false).     Http2Stream stream = connection.newStream(headerEntries("b", "banana"), false).     try {         stream.takeHeaders().         fail().     } catch (IOException expected) {         assertEquals("stream was reset: PROTOCOL_ERROR", expected.getMessage()).     }     // verify the peer received what was expected     InFrame synStream = peer.takeFrame().     assertEquals(Http2.TYPE_HEADERS, synStream.type).     InFrame goaway = peer.takeFrame().     assertEquals(Http2.TYPE_GOAWAY, goaway.type).     assertEquals(ErrorCode.PROTOCOL_ERROR, goaway.errorCode). }
false;private;1;3;;private Buffer data(int byteCount) {     return new Buffer().write(new byte[byteCount]). }
false;private;2;4;;private void assertStreamData(String expected, Source source) throws IOException {     String actual = Okio.buffer(source).readUtf8().     assertEquals(expected, actual). }
true;private;2;3;/**  * Reads {@code prefix} from {@code source}.  */ ;/**  * Reads {@code prefix} from {@code source}.  */ private void assertStreamPrefix(String prefix, BufferedSource source) throws IOException {     assertEquals(prefix, source.readUtf8(Utf8.size(prefix))). }
false;protected;0;3;;@Override protected void timedOut() {     latch.countDown(). }
true;private;0;11;/**  * Returns true when all work currently in progress by the watchdog have completed. This method  * creates more work for the watchdog and waits for that work to be executed. When it is, we know  * work that preceded this call is complete.  */ ;/**  * Returns true when all work currently in progress by the watchdog have completed. This method  * creates more work for the watchdog and waits for that work to be executed. When it is, we know  * work that preceded this call is complete.  */ private void awaitWatchdogIdle() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     AsyncTimeout watchdogJob = new AsyncTimeout() {          @Override         protected void timedOut() {             latch.countDown().         }     }.     // Due immediately!     watchdogJob.deadlineNanoTime(System.nanoTime()).     watchdogJob.enter().     latch.await(). }
false;static;2;3;;static int roundUp(int num, int divisor) {     return (num + divisor - 1) / divisor. }
false;private;2;7;;private Http2Connection connectWithSettings(boolean client, Settings settings) throws Exception {     peer.setClient(client).     peer.sendFrame().settings(settings).     // ACK     peer.acceptFrame().     peer.play().     return connect(peer). }
false;private;1;3;;private Http2Connection connect(MockHttp2Peer peer) throws Exception {     return connect(peer, IGNORE, REFUSE_INCOMING_STREAMS). }
true;private;3;17;/**  * Builds a new connection to {@code peer} with settings acked.  */ ;/**  * Builds a new connection to {@code peer} with settings acked.  */ private Http2Connection connect(MockHttp2Peer peer, PushObserver pushObserver, Http2Connection.Listener listener) throws Exception {     Http2Connection connection = new Http2Connection.Builder(true).socket(peer.openSocket()).pushObserver(pushObserver).listener(listener).build().     connection.start(false).     // verify the peer received the ACK     InFrame ackFrame = peer.takeFrame().     assertEquals(Http2.TYPE_SETTINGS, ackFrame.type).     assertEquals(0, ackFrame.streamId).     assertTrue(ackFrame.ack).     return connection. }
false;public;2;3;;@Override public boolean onRequest(int streamId, List<Header> requestHeaders) {     return false. }
false;public;3;3;;@Override public boolean onHeaders(int streamId, List<Header> responseHeaders, boolean last) {     return false. }
false;public;4;5;;@Override public boolean onData(int streamId, BufferedSource source, int byteCount, boolean last) throws IOException {     source.skip(byteCount).     return false. }
false;public;2;2;;@Override public void onReset(int streamId, ErrorCode errorCode) { }
false;public,synchronized;0;6;;public synchronized Object takeEvent() throws Exception {     while (events.isEmpty()) {         wait().     }     return events.remove(0). }
false;public,synchronized;2;6;;@Override public synchronized boolean onRequest(int streamId, List<Header> requestHeaders) {     assertEquals(2, streamId).     events.add(requestHeaders).     notifyAll().     return false. }
false;public,synchronized;3;8;;@Override public synchronized boolean onHeaders(int streamId, List<Header> responseHeaders, boolean last) {     assertEquals(2, streamId).     assertTrue(last).     events.add(responseHeaders).     notifyAll().     return false. }
false;public,synchronized;4;6;;@Override public synchronized boolean onData(int streamId, BufferedSource source, int byteCount, boolean last) {     events.add(new AssertionError("onData")).     notifyAll().     return false. }
false;public,synchronized;2;4;;@Override public synchronized void onReset(int streamId, ErrorCode errorCode) {     events.add(new AssertionError("onReset")).     notifyAll(). }
