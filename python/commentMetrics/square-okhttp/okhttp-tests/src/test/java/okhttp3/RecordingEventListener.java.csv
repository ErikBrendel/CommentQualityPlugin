commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Confirm that the thread does not hold a lock on {@code lock} during the callback.  */ ;/**  * Confirm that the thread does not hold a lock on {@code lock} during the callback.  */ public void forbidLock(Object lock) {     forbiddenLocks.add(lock). }
true;public;1;8;/**  * Removes recorded events up to (and including) an event is found whose class equals  * {@code eventClass} and returns it.  */ ;/**  * Removes recorded events up to (and including) an event is found whose class equals  * {@code eventClass} and returns it.  */ public <T> T removeUpToEvent(Class<T> eventClass) {     Object event = eventSequence.poll().     while (event != null && !eventClass.isInstance(event)) {         event = eventSequence.poll().     }     if (event == null)         throw new AssertionError().     return eventClass.cast(event). }
false;public;0;7;;public List<String> recordedEventTypes() {     List<String> eventTypes = new ArrayList<>().     for (CallEvent event : eventSequence) {         eventTypes.add(event.getName()).     }     return eventTypes. }
false;public;0;3;;public void clearAllEvents() {     eventSequence.clear(). }
false;private;1;14;;private void logEvent(CallEvent e) {     for (Object lock : forbiddenLocks) {         assertFalse(lock.toString(), Thread.holdsLock(lock)).     }     CallEvent startEvent = e.closes().     if (startEvent != null) {         assertTrue(e.getName() + " without matching " + startEvent.getName(), eventSequence.contains(startEvent)).     }     eventSequence.offer(e). }
false;public;2;3;;@Override public void dnsStart(Call call, String domainName) {     logEvent(new DnsStart(call, domainName)). }
false;public;3;3;;@Override public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) {     logEvent(new DnsEnd(call, domainName, inetAddressList)). }
false;public;3;4;;@Override public void connectStart(Call call, InetSocketAddress inetSocketAddress, Proxy proxy) {     logEvent(new ConnectStart(call, inetSocketAddress, proxy)). }
false;public;1;3;;@Override public void secureConnectStart(Call call) {     logEvent(new SecureConnectStart(call)). }
false;public;2;3;;@Override public void secureConnectEnd(Call call, Handshake handshake) {     logEvent(new SecureConnectEnd(call, handshake)). }
false;public;4;4;;@Override public void connectEnd(Call call, InetSocketAddress inetSocketAddress, @Nullable Proxy proxy, Protocol protocol) {     logEvent(new ConnectEnd(call, inetSocketAddress, proxy, protocol)). }
false;public;5;4;;@Override public void connectFailed(Call call, InetSocketAddress inetSocketAddress, Proxy proxy, @Nullable Protocol protocol, IOException ioe) {     logEvent(new ConnectFailed(call, inetSocketAddress, proxy, protocol, ioe)). }
false;public;2;3;;@Override public void connectionAcquired(Call call, Connection connection) {     logEvent(new ConnectionAcquired(call, connection)). }
false;public;2;3;;@Override public void connectionReleased(Call call, Connection connection) {     logEvent(new ConnectionReleased(call, connection)). }
false;public;1;3;;@Override public void callStart(Call call) {     logEvent(new CallStart(call)). }
false;public;1;3;;@Override public void requestHeadersStart(Call call) {     logEvent(new RequestHeadersStart(call)). }
false;public;2;3;;@Override public void requestHeadersEnd(Call call, Request request) {     logEvent(new RequestHeadersEnd(call, request.headers.byteCount())). }
false;public;1;3;;@Override public void requestBodyStart(Call call) {     logEvent(new RequestBodyStart(call)). }
false;public;2;3;;@Override public void requestBodyEnd(Call call, long byteCount) {     logEvent(new RequestBodyEnd(call, byteCount)). }
false;public;2;3;;@Override public void requestFailed(Call call, IOException ioe) {     logEvent(new RequestFailed(call, ioe)). }
false;public;1;3;;@Override public void responseHeadersStart(Call call) {     logEvent(new ResponseHeadersStart(call)). }
false;public;2;3;;@Override public void responseHeadersEnd(Call call, Response response) {     logEvent(new ResponseHeadersEnd(call, response.headers.byteCount())). }
false;public;1;3;;@Override public void responseBodyStart(Call call) {     logEvent(new ResponseBodyStart(call)). }
false;public;2;3;;@Override public void responseBodyEnd(Call call, long byteCount) {     logEvent(new ResponseBodyEnd(call, byteCount)). }
false;public;2;3;;@Override public void responseFailed(Call call, IOException ioe) {     logEvent(new ResponseFailed(call, ioe)). }
false;public;1;3;;@Override public void callEnd(Call call) {     logEvent(new CallEnd(call)). }
false;public;2;3;;@Override public void callFailed(Call call, IOException ioe) {     logEvent(new CallFailed(call, ioe)). }
false;public;0;3;;public String getName() {     return getClass().getSimpleName(). }
false;public;1;10;;@Override public boolean equals(Object o) {     if (this == o)         return true.     if (!(o instanceof CallEvent))         return false.     CallEvent callEvent = (CallEvent) o.     if (!getName().equals(callEvent.getName()))         return false.     if (!call.equals(callEvent.call))         return false.     return params.equals(callEvent.params). }
false;public;0;6;;@Override public int hashCode() {     int result = call.hashCode().     result = 31 * result + getName().hashCode().     result = 31 * result + params.hashCode().     return result. }
false;public;0;3;;@Nullable public CallEvent closes() {     return null. }
false;public;0;3;;@Override @Nullable public CallEvent closes() {     return new DnsStart(call, domainName). }
false;public;0;3;;@Override public CallEvent closes() {     return new ConnectStart(call, inetSocketAddress, proxy). }
false;public;0;3;;@Override @Nullable public CallEvent closes() {     return new ConnectStart(call, inetSocketAddress, proxy). }
false;public;0;3;;@Override @Nullable public CallEvent closes() {     return new SecureConnectStart(call). }
false;public;0;3;;@Override @Nullable public CallEvent closes() {     return new ConnectionAcquired(call, connection). }
false;public;0;3;;@Override @Nullable public CallEvent closes() {     return new CallStart(call). }
false;public;0;3;;@Override @Nullable public CallEvent closes() {     return new RequestHeadersStart(call). }
false;public;0;3;;@Override @Nullable public CallEvent closes() {     return new RequestBodyStart(call). }
false;public;0;3;;@Override @Nullable public CallEvent closes() {     return new RequestHeadersStart(call). }
false;public;0;3;;@Override @Nullable public CallEvent closes() {     return new ResponseBodyStart(call). }
