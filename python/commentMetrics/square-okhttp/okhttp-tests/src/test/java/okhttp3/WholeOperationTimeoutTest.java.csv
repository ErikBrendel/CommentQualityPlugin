commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void tearDown() {     TestUtil.ensureAllConnectionsReleased(client). }
false;public;0;7;;@Test public void defaultConfigIsNoTimeout() throws Exception {     Request request = new Request.Builder().url(server.url("/")).build().     Call call = client.newCall(request).     assertEquals(0, call.timeout().timeoutNanos()). }
false;public;0;12;;@Test public void configureClientDefault() throws Exception {     Request request = new Request.Builder().url(server.url("/")).build().     OkHttpClient timeoutClient = client.newBuilder().callTimeout(456, TimeUnit.MILLISECONDS).build().     Call call = timeoutClient.newCall(request).     assertEquals(TimeUnit.MILLISECONDS.toNanos(456), call.timeout().timeoutNanos()). }
false;public;0;18;;@Test public void timeoutWritingRequest() throws Exception {     server.enqueue(new MockResponse()).     Request request = new Request.Builder().url(server.url("/")).post(sleepingRequestBody(500)).build().     Call call = client.newCall(request).     call.timeout().timeout(250, TimeUnit.MILLISECONDS).     try {         call.execute().         fail().     } catch (IOException e) {         assertEquals("timeout", e.getMessage()).         assertTrue(call.isCanceled()).     } }
false;public;2;4;;@Override public void onFailure(Call call, IOException e) {     exceptionRef.set(e).     latch.countDown(). }
false;public;2;4;;@Override public void onResponse(Call call, Response response) throws IOException {     response.close().     latch.countDown(). }
false;public;0;29;;@Test public void timeoutWritingRequestWithEnqueue() throws Exception {     server.enqueue(new MockResponse()).     Request request = new Request.Builder().url(server.url("/")).post(sleepingRequestBody(500)).build().     final CountDownLatch latch = new CountDownLatch(1).     final AtomicReference<Throwable> exceptionRef = new AtomicReference<>().     Call call = client.newCall(request).     call.timeout().timeout(250, TimeUnit.MILLISECONDS).     call.enqueue(new Callback() {          @Override         public void onFailure(Call call, IOException e) {             exceptionRef.set(e).             latch.countDown().         }          @Override         public void onResponse(Call call, Response response) throws IOException {             response.close().             latch.countDown().         }     }).     latch.await().     assertTrue(call.isCanceled()).     assertNotNull(exceptionRef.get()). }
false;public;0;18;;@Test public void timeoutProcessing() throws Exception {     server.enqueue(new MockResponse().setHeadersDelay(500, TimeUnit.MILLISECONDS)).     Request request = new Request.Builder().url(server.url("/")).build().     Call call = client.newCall(request).     call.timeout().timeout(250, TimeUnit.MILLISECONDS).     try {         call.execute().         fail().     } catch (IOException e) {         assertEquals("timeout", e.getMessage()).         assertTrue(call.isCanceled()).     } }
false;public;2;4;;@Override public void onFailure(Call call, IOException e) {     exceptionRef.set(e).     latch.countDown(). }
false;public;2;4;;@Override public void onResponse(Call call, Response response) throws IOException {     response.close().     latch.countDown(). }
false;public;0;29;;@Test public void timeoutProcessingWithEnqueue() throws Exception {     server.enqueue(new MockResponse().setHeadersDelay(500, TimeUnit.MILLISECONDS)).     Request request = new Request.Builder().url(server.url("/")).build().     final CountDownLatch latch = new CountDownLatch(1).     final AtomicReference<Throwable> exceptionRef = new AtomicReference<>().     Call call = client.newCall(request).     call.timeout().timeout(250, TimeUnit.MILLISECONDS).     call.enqueue(new Callback() {          @Override         public void onFailure(Call call, IOException e) {             exceptionRef.set(e).             latch.countDown().         }          @Override         public void onResponse(Call call, Response response) throws IOException {             response.close().             latch.countDown().         }     }).     latch.await().     assertTrue(call.isCanceled()).     assertNotNull(exceptionRef.get()). }
false;public;0;20;;@Test public void timeoutReadingResponse() throws Exception {     server.enqueue(new MockResponse().setBody(BIG_ENOUGH_BODY)).     Request request = new Request.Builder().url(server.url("/")).build().     Call call = client.newCall(request).     call.timeout().timeout(250, TimeUnit.MILLISECONDS).     Response response = call.execute().     Thread.sleep(500).     try {         response.body().source().readUtf8().         fail().     } catch (IOException e) {         assertEquals("timeout", e.getMessage()).         assertTrue(call.isCanceled()).     } }
false;public;2;3;;@Override public void onFailure(Call call, IOException e) {     latch.countDown(). }
false;public;2;15;;@Override public void onResponse(Call call, Response response) throws IOException {     try {         Thread.sleep(500).     } catch (InterruptedException e) {         throw new AssertionError().     }     try {         response.body().source().readUtf8().         fail().     } catch (IOException e) {         exceptionRef.set(e).     } finally {         latch.countDown().     } }
false;public;0;39;;@Test public void timeoutReadingResponseWithEnqueue() throws Exception {     server.enqueue(new MockResponse().setBody(BIG_ENOUGH_BODY)).     Request request = new Request.Builder().url(server.url("/")).build().     final CountDownLatch latch = new CountDownLatch(1).     final AtomicReference<Throwable> exceptionRef = new AtomicReference<>().     Call call = client.newCall(request).     call.timeout().timeout(250, TimeUnit.MILLISECONDS).     call.enqueue(new Callback() {          @Override         public void onFailure(Call call, IOException e) {             latch.countDown().         }          @Override         public void onResponse(Call call, Response response) throws IOException {             try {                 Thread.sleep(500).             } catch (InterruptedException e) {                 throw new AssertionError().             }             try {                 response.body().source().readUtf8().                 fail().             } catch (IOException e) {                 exceptionRef.set(e).             } finally {                 latch.countDown().             }         }     }).     latch.await().     assertTrue(call.isCanceled()).     assertNotNull(exceptionRef.get()). }
false;public;0;37;;@Test public void singleTimeoutForAllFollowUpRequests() throws Exception {     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader("Location", "/b").setHeadersDelay(100, TimeUnit.MILLISECONDS)).     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader("Location", "/c").setHeadersDelay(100, TimeUnit.MILLISECONDS)).     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader("Location", "/d").setHeadersDelay(100, TimeUnit.MILLISECONDS)).     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader("Location", "/e").setHeadersDelay(100, TimeUnit.MILLISECONDS)).     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader("Location", "/f").setHeadersDelay(100, TimeUnit.MILLISECONDS)).     server.enqueue(new MockResponse()).     Request request = new Request.Builder().url(server.url("/a")).build().     Call call = client.newCall(request).     call.timeout().timeout(250, TimeUnit.MILLISECONDS).     try {         call.execute().         fail().     } catch (IOException e) {         assertEquals("timeout", e.getMessage()).         assertTrue(call.isCanceled()).     } }
false;public;0;23;;@Test public void timeoutFollowingRedirectOnNewConnection() throws Exception {     MockWebServer otherServer = new MockWebServer().     server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_MOVED_TEMP).setHeader("Location", otherServer.url("/"))).     otherServer.enqueue(new MockResponse().setHeadersDelay(500, TimeUnit.MILLISECONDS)).     Request request = new Request.Builder().url(server.url("/")).build().     Call call = client.newCall(request).     call.timeout().timeout(250, TimeUnit.MILLISECONDS).     try {         call.execute().         fail().     } catch (IOException e) {         assertEquals("timeout", e.getMessage()).         assertTrue(call.isCanceled()).     } }
false;public;0;18;;@Test public void noTimeout() throws Exception {     server.enqueue(new MockResponse().setHeadersDelay(250, TimeUnit.MILLISECONDS).setBody(BIG_ENOUGH_BODY)).     Request request = new Request.Builder().url(server.url("/")).post(sleepingRequestBody(250)).build().     Call call = client.newCall(request).     call.timeout().timeout(1000, TimeUnit.MILLISECONDS).     Response response = call.execute().     Thread.sleep(250).     response.body().source().readUtf8().     response.close().     assertFalse(call.isCanceled()). }
false;public;0;3;;@Override public MediaType contentType() {     return MediaType.parse("text/plain"). }
false;public;1;10;;@Override public void writeTo(BufferedSink sink) throws IOException {     try {         sink.writeUtf8("abc").         sink.flush().         Thread.sleep(sleepMillis).         sink.writeUtf8("def").     } catch (InterruptedException e) {         throw new InterruptedIOException().     } }
false;private;1;18;;private RequestBody sleepingRequestBody(final int sleepMillis) {     return new RequestBody() {          @Override         public MediaType contentType() {             return MediaType.parse("text/plain").         }          @Override         public void writeTo(BufferedSink sink) throws IOException {             try {                 sink.writeUtf8("abc").                 sink.flush().                 Thread.sleep(sleepMillis).                 sink.writeUtf8("def").             } catch (InterruptedException e) {                 throw new InterruptedIOException().             }         }     }. }
