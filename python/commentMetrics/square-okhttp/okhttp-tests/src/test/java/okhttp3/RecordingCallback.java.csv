commented;modifiers;parameterAmount;loc;comment;code
false;public,synchronized;2;4;;@Override public synchronized void onFailure(Call call, IOException e) {     responses.add(new RecordedResponse(call.request(), null, null, null, e)).     notifyAll(). }
false;public,synchronized;2;5;;@Override public synchronized void onResponse(Call call, Response response) throws IOException {     String body = response.body().string().     responses.add(new RecordedResponse(call.request(), response, null, body, null)).     notifyAll(). }
true;public,synchronized;1;18;/**  * Returns the recorded response triggered by {@code request}. Throws if the response isn't  * enqueued before the timeout.  */ ;/**  * Returns the recorded response triggered by {@code request}. Throws if the response isn't  * enqueued before the timeout.  */ public synchronized RecordedResponse await(HttpUrl url) throws Exception {     long timeoutMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime()) + TIMEOUT_MILLIS.     while (true) {         for (Iterator<RecordedResponse> i = responses.iterator(). i.hasNext(). ) {             RecordedResponse recordedResponse = i.next().             if (recordedResponse.request.url().equals(url)) {                 i.remove().                 return recordedResponse.             }         }         long nowMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime()).         if (nowMillis >= timeoutMillis)             break.         wait(timeoutMillis - nowMillis).     }     throw new AssertionError("Timed out waiting for response to " + url). }
