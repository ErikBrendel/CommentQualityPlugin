commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@After public void tearDown() {     callback.assertExhausted(). }
false;public;0;9;;@Test public void controlFramesMustBeFinal() throws IOException {     // Empty ping.     data.write(ByteString.decodeHex("0a00")).     try {         clientReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Control frames must be final.", e.getMessage()).     } }
false;public;0;25;;@Test public void reservedFlagsAreUnsupported() throws IOException {     // Empty ping, flag 1 set.     data.write(ByteString.decodeHex("9a00")).     try {         clientReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Reserved flags are unsupported.", e.getMessage()).     }     data.clear().     // Empty ping, flag 2 set.     data.write(ByteString.decodeHex("aa00")).     try {         clientReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Reserved flags are unsupported.", e.getMessage()).     }     data.clear().     // Empty ping, flag 3 set.     data.write(ByteString.decodeHex("ca00")).     try {         clientReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Reserved flags are unsupported.", e.getMessage()).     } }
false;public;0;9;;@Test public void clientSentFramesMustBeMasked() throws IOException {     data.write(ByteString.decodeHex("8100")).     try {         serverReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Client-sent frames must be masked.", e.getMessage()).     } }
false;public;0;9;;@Test public void serverSentFramesMustNotBeMasked() throws IOException {     data.write(ByteString.decodeHex("8180")).     try {         clientReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Server-sent frames must not be masked.", e.getMessage()).     } }
false;public;0;9;;@Test public void controlFramePayloadMax() throws IOException {     data.write(ByteString.decodeHex("8a7e007e")).     try {         clientReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Control frame must be less than 125B.", e.getMessage()).     } }
false;public;0;5;;@Test public void clientSimpleHello() throws IOException {     // Hello     data.write(ByteString.decodeHex("810548656c6c6f")).     clientReader.processNextFrame().     callback.assertTextMessage("Hello"). }
false;public;0;5;;@Test public void serverSimpleHello() throws IOException {     // Hello     data.write(ByteString.decodeHex("818537fa213d7f9f4d5158")).     serverReader.processNextFrame().     callback.assertTextMessage("Hello"). }
false;public;0;5;;@Test public void clientFramePayloadShort() throws IOException {     // Hello     data.write(ByteString.decodeHex("817E000548656c6c6f")).     clientReader.processNextFrame().     callback.assertTextMessage("Hello"). }
false;public;0;5;;@Test public void clientFramePayloadLong() throws IOException {     // Hello     data.write(ByteString.decodeHex("817f000000000000000548656c6c6f")).     clientReader.processNextFrame().     callback.assertTextMessage("Hello"). }
false;public;0;9;;@Test public void clientFramePayloadTooLongThrows() throws IOException {     data.write(ByteString.decodeHex("817f8000000000000000")).     try {         clientReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Frame length 0x8000000000000000 > 0x7FFFFFFFFFFFFFFF", e.getMessage()).     } }
false;public;0;8;;@Test public void serverHelloTwoChunks() throws IOException {     // Hel     data.write(ByteString.decodeHex("818537fa213d7f9f4d")).     // lo     data.write(ByteString.decodeHex("5158")).     serverReader.processNextFrame().     callback.assertTextMessage("Hello"). }
false;public;0;6;;@Test public void clientTwoFrameHello() throws IOException {     // Hel     data.write(ByteString.decodeHex("010348656c")).     // lo     data.write(ByteString.decodeHex("80026c6f")).     clientReader.processNextFrame().     callback.assertTextMessage("Hello"). }
false;public;0;14;;@Test public void clientTwoFrameHelloWithPongs() throws IOException {     // Hel     data.write(ByteString.decodeHex("010348656c")).     // Pong     data.write(ByteString.decodeHex("8a00")).     // Pong     data.write(ByteString.decodeHex("8a00")).     // Pong     data.write(ByteString.decodeHex("8a00")).     // Pong     data.write(ByteString.decodeHex("8a00")).     // lo     data.write(ByteString.decodeHex("80026c6f")).     clientReader.processNextFrame().     callback.assertPong(ByteString.EMPTY).     callback.assertPong(ByteString.EMPTY).     callback.assertPong(ByteString.EMPTY).     callback.assertPong(ByteString.EMPTY).     callback.assertTextMessage("Hello"). }
false;public;0;8;;@Test public void clientIncompleteMessageBodyThrows() throws IOException {     // Length = 5, "Hel"     data.write(ByteString.decodeHex("810548656c")).     try {         clientReader.processNextFrame().         fail().     } catch (EOFException ignored) {     } }
false;public;0;8;;@Test public void clientIncompleteControlFrameBodyThrows() throws IOException {     // Length = 5, "Hel"     data.write(ByteString.decodeHex("8a0548656c")).     try {         clientReader.processNextFrame().         fail().     } catch (EOFException ignored) {     } }
false;public;0;8;;@Test public void serverIncompleteMessageBodyThrows() throws IOException {     // Length = 5, "Hel"     data.write(ByteString.decodeHex("818537fa213d7f9f4d")).     try {         serverReader.processNextFrame().         fail().     } catch (EOFException ignored) {     } }
false;public;0;8;;@Test public void serverIncompleteControlFrameBodyThrows() throws IOException {     // Length = 5, "Hel"     data.write(ByteString.decodeHex("8a8537fa213d7f9f4d")).     try {         serverReader.processNextFrame().         fail().     } catch (EOFException ignored) {     } }
false;public;0;6;;@Test public void clientSimpleBinary() throws IOException {     byte[] bytes = binaryData(256).     data.write(ByteString.decodeHex("827E0100")).write(bytes).     clientReader.processNextFrame().     callback.assertBinaryMessage(ByteString.of(bytes)). }
false;public;0;7;;@Test public void clientTwoFrameBinary() throws IOException {     byte[] bytes = binaryData(200).     data.write(ByteString.decodeHex("0264")).write(bytes, 0, 100).     data.write(ByteString.decodeHex("8064")).write(bytes, 100, 100).     clientReader.processNextFrame().     callback.assertBinaryMessage(ByteString.of(bytes)). }
false;public;0;11;;@Test public void twoFrameNotContinuation() throws IOException {     byte[] bytes = binaryData(200).     data.write(ByteString.decodeHex("0264")).write(bytes, 0, 100).     data.write(ByteString.decodeHex("8264")).write(bytes, 100, 100).     try {         clientReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Expected continuation opcode. Got: 2", e.getMessage()).     } }
false;public;0;5;;@Test public void emptyPingCallsCallback() throws IOException {     // Empty ping     data.write(ByteString.decodeHex("8900")).     clientReader.processNextFrame().     callback.assertPing(ByteString.EMPTY). }
false;public;0;5;;@Test public void pingCallsCallback() throws IOException {     // Ping with "Hello"     data.write(ByteString.decodeHex("890548656c6c6f")).     clientReader.processNextFrame().     callback.assertPing(ByteString.encodeUtf8("Hello")). }
false;public;0;5;;@Test public void emptyCloseCallsCallback() throws IOException {     // Empty close     data.write(ByteString.decodeHex("8800")).     clientReader.processNextFrame().     callback.assertClosing(1005, ""). }
false;public;0;9;;@Test public void closeLengthOfOneThrows() throws IOException {     // Close with invalid 1-byte payload     data.write(ByteString.decodeHex("880100")).     try {         clientReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Malformed close payload length of 1.", e.getMessage()).     } }
false;public;0;5;;@Test public void closeCallsCallback() throws IOException {     // Close with code and reason     data.write(ByteString.decodeHex("880703e848656c6c6f")).     clientReader.processNextFrame().     callback.assertClosing(1000, "Hello"). }
false;public;0;6;;@Test public void closeIncompleteCallsCallback() throws IOException {     // Close with code and reason     data.write(ByteString.decodeHex("880703e948656c6c6f")).     data.close().     clientReader.processNextFrame().     callback.assertClosing(1001, "Hello"). }
false;public;0;16;;@Test public void closeOutOfRangeThrows() throws IOException {     // Close with code 1     data.write(ByteString.decodeHex("88020001")).     try {         clientReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Code must be in range [1000,5000): 1", e.getMessage()).     }     // Close with code 5000     data.write(ByteString.decodeHex("88021388")).     try {         clientReader.processNextFrame().         fail().     } catch (ProtocolException e) {         assertEquals("Code must be in range [1000,5000): 5000", e.getMessage()).     } }
false;public;0;20;;@Test public void closeReservedSetThrows() throws IOException {     // Close with code 1004     data.write(ByteString.decodeHex("880203ec")).     // Close with code 1005     data.write(ByteString.decodeHex("880203ed")).     // Close with code 1006     data.write(ByteString.decodeHex("880203ee")).     for (int i = 1012. i <= 2999. i++) {         // Close with code 'i'         data.write(ByteString.decodeHex("8802" + Util.format("%04X", i))).     }     int count = 0.     for (. !data.exhausted(). count++) {         try {             clientReader.processNextFrame().             fail().         } catch (ProtocolException e) {             String message = e.getMessage().             assertTrue(message, Pattern.matches("Code \\d+ is reserved and may not be used.", message)).         }     }     assertEquals(1991, count). }
false;private;1;5;;private byte[] binaryData(int length) {     byte[] junk = new byte[length].     random.nextBytes(junk).     return junk. }
