commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Before public void setUp() throws Exception {     file = tempDir.newFile(). }
false;public;0;3;;@After public void tearDown() throws Exception {     executor.shutdown(). }
false;public;0;21;;@Test public void singleSource() throws Exception {     Buffer upstream = new Buffer().     upstream.writeUtf8("abcdefghijklm").     Relay relay = Relay.edit(file, upstream, metadata, 1024).     Source source = relay.newSource().     Buffer sourceBuffer = new Buffer().     assertEquals(5, source.read(sourceBuffer, 5)).     assertEquals("abcde", sourceBuffer.readUtf8()).     assertEquals(8, source.read(sourceBuffer, 1024)).     assertEquals("fghijklm", sourceBuffer.readUtf8()).     assertEquals(-1, source.read(sourceBuffer, 1024)).     assertEquals(0, sourceBuffer.size()).     source.close().     assertTrue(relay.isClosed()).     assertFile(Relay.PREFIX_CLEAN, 13L, metadata.size(), "abcdefghijklm", metadata). }
false;public;0;16;;@Test public void multipleSources() throws Exception {     Buffer upstream = new Buffer().     upstream.writeUtf8("abcdefghijklm").     Relay relay = Relay.edit(file, upstream, metadata, 1024).     BufferedSource source1 = Okio.buffer(relay.newSource()).     BufferedSource source2 = Okio.buffer(relay.newSource()).     assertEquals("abcdefghijklm", source1.readUtf8()).     assertEquals("abcdefghijklm", source2.readUtf8()).     source1.close().     source2.close().     assertTrue(relay.isClosed()).     assertFile(Relay.PREFIX_CLEAN, 13L, metadata.size(), "abcdefghijklm", metadata). }
false;public;0;20;;@Test public void readFromBuffer() throws Exception {     Buffer upstream = new Buffer().     upstream.writeUtf8("abcdefghij").     Relay relay = Relay.edit(file, upstream, metadata, 5).     BufferedSource source1 = Okio.buffer(relay.newSource()).     BufferedSource source2 = Okio.buffer(relay.newSource()).     assertEquals("abcde", source1.readUtf8(5)).     assertEquals("abcde", source2.readUtf8(5)).     assertEquals("fghij", source2.readUtf8(5)).     assertEquals("fghij", source1.readUtf8(5)).     assertTrue(source1.exhausted()).     assertTrue(source2.exhausted()).     source1.close().     source2.close().     assertTrue(relay.isClosed()).     assertFile(Relay.PREFIX_CLEAN, 10L, metadata.size(), "abcdefghij", metadata). }
false;public;0;20;;@Test public void readFromFile() throws Exception {     Buffer upstream = new Buffer().     upstream.writeUtf8("abcdefghijklmnopqrst").     Relay relay = Relay.edit(file, upstream, metadata, 5).     BufferedSource source1 = Okio.buffer(relay.newSource()).     BufferedSource source2 = Okio.buffer(relay.newSource()).     assertEquals("abcdefghij", source1.readUtf8(10)).     assertEquals("abcdefghij", source2.readUtf8(10)).     assertEquals("klmnopqrst", source2.readUtf8(10)).     assertEquals("klmnopqrst", source1.readUtf8(10)).     assertTrue(source1.exhausted()).     assertTrue(source2.exhausted()).     source1.close().     source2.close().     assertTrue(relay.isClosed()).     assertFile(Relay.PREFIX_CLEAN, 20L, metadata.size(), "abcdefghijklmnopqrst", metadata). }
false;public;0;27;;@Test public void readAfterEdit() throws Exception {     Buffer upstream = new Buffer().     upstream.writeUtf8("abcdefghij").     Relay relay1 = Relay.edit(file, upstream, metadata, 5).     BufferedSource source1 = Okio.buffer(relay1.newSource()).     assertEquals("abcdefghij", source1.readUtf8(10)).     assertTrue(source1.exhausted()).     source1.close().     assertTrue(relay1.isClosed()).     // Since relay1 is closed, new sources cannot be created.     assertNull(relay1.newSource()).     Relay relay2 = Relay.read(file).     assertEquals(metadata, relay2.metadata()).     BufferedSource source2 = Okio.buffer(relay2.newSource()).     assertEquals("abcdefghij", source2.readUtf8(10)).     assertTrue(source2.exhausted()).     source2.close().     assertTrue(relay2.isClosed()).     // Since relay2 is closed, new sources cannot be created.     assertNull(relay2.newSource()).     assertFile(Relay.PREFIX_CLEAN, 10L, metadata.size(), "abcdefghij", metadata). }
false;public;0;19;;@Test public void closeBeforeExhaustLeavesDirtyFile() throws Exception {     Buffer upstream = new Buffer().     upstream.writeUtf8("abcdefghij").     Relay relay1 = Relay.edit(file, upstream, metadata, 5).     BufferedSource source1 = Okio.buffer(relay1.newSource()).     assertEquals("abcdefghij", source1.readUtf8(10)).     // Not exhausted!     source1.close().     assertTrue(relay1.isClosed()).     try {         Relay.read(file).         fail().     } catch (IOException expected) {         assertEquals("unreadable cache file", expected.getMessage()).     }     assertFile(Relay.PREFIX_DIRTY, -1L, -1, null, null). }
false;public;0;16;;@Test public void redundantCallsToCloseAreIgnored() throws Exception {     Buffer upstream = new Buffer().     upstream.writeUtf8("abcde").     Relay relay = Relay.edit(file, upstream, metadata, 1024).     Source source1 = relay.newSource().     Source source2 = relay.newSource().     source1.close().     // Unnecessary. Shouldn't decrement the reference count.     source1.close().     assertFalse(relay.isClosed()).     source2.close().     assertTrue(relay.isClosed()).     assertFile(Relay.PREFIX_DIRTY, -1L, -1, null, null). }
false;public;0;23;;@Test public void racingReaders() throws Exception {     Pipe pipe = new Pipe(1024).     BufferedSink sink = Okio.buffer(pipe.sink()).     Relay relay = Relay.edit(file, pipe.source(), metadata, 5).     Future<ByteString> future1 = executor.submit(sourceReader(relay.newSource())).     Future<ByteString> future2 = executor.submit(sourceReader(relay.newSource())).     Thread.sleep(500).     sink.writeUtf8("abcdefghij").     Thread.sleep(500).     sink.writeUtf8("klmnopqrst").     sink.close().     assertEquals(ByteString.encodeUtf8("abcdefghijklmnopqrst"), future1.get()).     assertEquals(ByteString.encodeUtf8("abcdefghijklmnopqrst"), future2.get()).     assertTrue(relay.isClosed()).     assertFile(Relay.PREFIX_CLEAN, 20L, metadata.size(), "abcdefghijklmnopqrst", metadata). }
true;private;1;9;/**  * Returns a callable that reads all of source, closes it, and returns the bytes.  */ ;/**  * Returns a callable that reads all of source, closes it, and returns the bytes.  */ private Callable<ByteString> sourceReader(final Source source) {     return () -> {         Buffer buffer = new Buffer().         while (source.read(buffer, 16384) != -1) {         }         source.close().         return buffer.readByteString().     }. }
false;private;5;14;;private void assertFile(ByteString prefix, long upstreamSize, int metadataSize, String upstream, ByteString metadata) throws IOException {     BufferedSource source = Okio.buffer(Okio.source(file)).     assertEquals(prefix, source.readByteString(prefix.size())).     assertEquals(upstreamSize, source.readLong()).     assertEquals(metadataSize, source.readLong()).     if (upstream != null) {         assertEquals(upstream, source.readUtf8(upstreamSize)).     }     if (metadata != null) {         assertEquals(metadata, source.readByteString(metadataSize)).     }     source.close(). }
