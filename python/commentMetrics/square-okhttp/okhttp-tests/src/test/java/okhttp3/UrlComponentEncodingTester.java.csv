commented;modifiers;parameterAmount;loc;comment;code
false;public;2;6;;public UrlComponentEncodingTester override(Encoding encoding, int... codePoints) {     for (int codePoint : codePoints) {         encodings.put(codePoint, encoding).     }     return this. }
false;public;0;6;;public UrlComponentEncodingTester identityForNonAscii() {     encodings.put(UNICODE_2, Encoding.IDENTITY).     encodings.put(UNICODE_3, Encoding.IDENTITY).     encodings.put(UNICODE_4, Encoding.IDENTITY).     return this. }
true;public;1;4;/**  * Configure a character to be skipped but only for conversion to and from {@code java.net.URI}.  * That class is more strict than the others.  */ ;/**  * Configure a character to be skipped but only for conversion to and from {@code java.net.URI}.  * That class is more strict than the others.  */ public UrlComponentEncodingTester skipForUri(int... codePoints) {     uriEscapedCodePoints.append(new String(codePoints, 0, codePoints.length)).     return this. }
false;public;1;20;;public UrlComponentEncodingTester test(Component component) {     for (Map.Entry<Integer, Encoding> entry : encodings.entrySet()) {         Encoding encoding = entry.getValue().         int codePoint = entry.getKey().         testEncodeAndDecode(codePoint, component).         if (encoding == Encoding.SKIP)             continue.         testParseOriginal(codePoint, encoding, component).         testParseAlreadyEncoded(codePoint, encoding, component).         testToUrl(codePoint, encoding, component).         testFromUrl(codePoint, encoding, component).         if (codePoint != '%') {             boolean uriEscaped = uriEscapedCodePoints.indexOf(Encoding.IDENTITY.encode(codePoint)) != -1.             testUri(codePoint, encoding, component, uriEscaped).         }     }     return this. }
false;private;3;8;;private void testParseAlreadyEncoded(int codePoint, Encoding encoding, Component component) {     String encoded = encoding.encode(codePoint).     String urlString = component.urlString(encoded).     HttpUrl url = HttpUrl.get(urlString).     if (!component.encodedValue(url).equals(encoded)) {         fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding)).     } }
false;private;2;10;;private void testEncodeAndDecode(int codePoint, Component component) {     String expected = Encoding.IDENTITY.encode(codePoint).     HttpUrl.Builder builder = HttpUrl.get("http://host/").newBuilder().     component.set(builder, expected).     HttpUrl url = builder.build().     String actual = component.get(url).     if (!expected.equals(actual)) {         fail(Util.format("Roundtrip %s %#x %s", component, codePoint, url)).     } }
false;private;3;12;;private void testParseOriginal(int codePoint, Encoding encoding, Component component) {     String encoded = encoding.encode(codePoint).     if (encoding != Encoding.PERCENT)         return.     String identity = Encoding.IDENTITY.encode(codePoint).     String urlString = component.urlString(identity).     HttpUrl url = HttpUrl.get(urlString).     String s = component.encodedValue(url).     if (!s.equals(encoded)) {         fail(Util.format("Encoding %s %#02x using %s", component, codePoint, encoding)).     } }
false;private;3;8;;private void testToUrl(int codePoint, Encoding encoding, Component component) {     String encoded = encoding.encode(codePoint).     HttpUrl httpUrl = HttpUrl.get(component.urlString(encoded)).     URL javaNetUrl = httpUrl.url().     if (!javaNetUrl.toString().equals(javaNetUrl.toString())) {         fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding)).     } }
false;private;3;8;;private void testFromUrl(int codePoint, Encoding encoding, Component component) {     String encoded = encoding.encode(codePoint).     HttpUrl httpUrl = HttpUrl.get(component.urlString(encoded)).     HttpUrl toAndFromJavaNetUrl = HttpUrl.get(httpUrl.url()).     if (!toAndFromJavaNetUrl.equals(httpUrl)) {         fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding)).     } }
false;private;4;25;;private void testUri(int codePoint, Encoding encoding, Component component, boolean uriEscaped) {     String string = new String(new int[] { codePoint }, 0, 1).     String encoded = encoding.encode(codePoint).     HttpUrl httpUrl = HttpUrl.get(component.urlString(encoded)).     URI uri = httpUrl.uri().     HttpUrl toAndFromUri = HttpUrl.get(uri).     if (uriEscaped) {         // The URI has more escaping than the HttpURL. Check that the decoded values still match.         if (uri.toString().equals(httpUrl.toString())) {             fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding)).         }         if (!component.get(toAndFromUri).equals(string)) {             fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding)).         }     } else {         // Check that the URI and HttpURL have the exact same escaping.         if (!toAndFromUri.equals(httpUrl)) {             fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding)).         }         if (!uri.toString().equals(httpUrl.toString())) {             fail(Util.format("Encoding %s %#x using %s", component, codePoint, encoding)).         }     } }
false;public;1;3;;public String encode(int codePoint) {     return new String(new int[] { codePoint }, 0, 1). }
false;public;1;8;;public String encode(int codePoint) {     ByteString utf8 = ByteString.encodeUtf8(IDENTITY.encode(codePoint)).     Buffer percentEncoded = new Buffer().     for (int i = 0. i < utf8.size(). i++) {         percentEncoded.writeUtf8(Util.format("%%%02X", utf8.getByte(i) & 0xff)).     }     return percentEncoded.readUtf8(). }
false;public;1;3;;public String encode(int codePoint) {     throw new UnsupportedOperationException(). }
false;public;1;3;;@Override public String urlString(String value) {     return "http://" + value + "@example.com/". }
false;public;1;3;;@Override public String encodedValue(HttpUrl url) {     return url.encodedUsername(). }
false;public;2;3;;@Override public void set(HttpUrl.Builder builder, String value) {     builder.username(value). }
false;public;1;3;;@Override public String get(HttpUrl url) {     return url.username(). }
false;public;1;3;;@Override public String urlString(String value) {     return "http://:" + value + "@example.com/". }
false;public;1;3;;@Override public String encodedValue(HttpUrl url) {     return url.encodedPassword(). }
false;public;2;3;;@Override public void set(HttpUrl.Builder builder, String value) {     builder.password(value). }
false;public;1;3;;@Override public String get(HttpUrl url) {     return url.password(). }
false;public;1;3;;@Override public String urlString(String value) {     return "http://example.com/a" + value + "z/". }
false;public;1;4;;@Override public String encodedValue(HttpUrl url) {     String path = url.encodedPath().     return path.substring(2, path.length() - 2). }
false;public;2;3;;@Override public void set(HttpUrl.Builder builder, String value) {     builder.addPathSegment("a" + value + "z"). }
false;public;1;4;;@Override public String get(HttpUrl url) {     String pathSegment = url.pathSegments().get(0).     return pathSegment.substring(1, pathSegment.length() - 1). }
false;public;1;3;;@Override public String urlString(String value) {     return "http://example.com/?a" + value + "z". }
false;public;1;4;;@Override public String encodedValue(HttpUrl url) {     String query = url.encodedQuery().     return query.substring(1, query.length() - 1). }
false;public;2;3;;@Override public void set(HttpUrl.Builder builder, String value) {     builder.query("a" + value + "z"). }
false;public;1;4;;@Override public String get(HttpUrl url) {     String query = url.query().     return query.substring(1, query.length() - 1). }
false;public;1;3;;@Override public String urlString(String value) {     return "http://example.com/?q=a" + value + "z". }
false;public;1;4;;@Override public String encodedValue(HttpUrl url) {     String query = url.encodedQuery().     return query.substring(3, query.length() - 1). }
false;public;2;3;;@Override public void set(HttpUrl.Builder builder, String value) {     builder.addQueryParameter("q", "a" + value + "z"). }
false;public;1;4;;@Override public String get(HttpUrl url) {     String value = url.queryParameter("q").     return value.substring(1, value.length() - 1). }
false;public;1;3;;@Override public String urlString(String value) {     return "http://example.com/#a" + value + "z". }
false;public;1;4;;@Override public String encodedValue(HttpUrl url) {     String fragment = url.encodedFragment().     return fragment.substring(1, fragment.length() - 1). }
false;public;2;3;;@Override public void set(HttpUrl.Builder builder, String value) {     builder.fragment("a" + value + "z"). }
false;public;1;4;;@Override public String get(HttpUrl url) {     String fragment = url.fragment().     return fragment.substring(1, fragment.length() - 1). }
false;public,abstract;1;1;;public abstract String urlString(String value).
false;public,abstract;1;1;;public abstract String encodedValue(HttpUrl url).
false;public,abstract;2;1;;public abstract void set(HttpUrl.Builder builder, String value).
false;public,abstract;1;1;;public abstract String get(HttpUrl url).
