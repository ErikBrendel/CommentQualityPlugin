commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;7;;@Parameterized.Parameters(name = "Use get = {0}") public static Collection<Object[]> parameters() {     return Arrays.asList(new Object[] { true }, new Object[] { false }). }
false;private;1;5;;private MediaType parse(String string) {     return useGet ? MediaType.get(string) : MediaType.parse(string). }
false;public;0;10;;@Test public void testParse() throws Exception {     MediaType mediaType = parse("text/plain.boundary=foo.charset=utf-8").     assertEquals("text", mediaType.type()).     assertEquals("plain", mediaType.subtype()).     assertEquals("UTF-8", mediaType.charset().name()).     assertEquals("text/plain.boundary=foo.charset=utf-8", mediaType.toString()).     assertEquals(mediaType, parse("text/plain.boundary=foo.charset=utf-8")).     assertEquals(mediaType.hashCode(), parse("text/plain.boundary=foo.charset=utf-8").hashCode()). }
false;public;0;17;;@Test public void testValidParse() throws Exception {     assertMediaType("text/plain").     assertMediaType("application/atom+xml. charset=utf-8").     assertMediaType("application/atom+xml. a=1. a=2. b=3").     assertMediaType("image/gif. foo=bar").     assertMediaType("text/plain. a=1").     assertMediaType("text/plain. a=1. a=2. b=3").     assertMediaType("text/plain. charset=utf-16").     assertMediaType("text/plain. \t \n \r a=b").     assertMediaType("text/plain.").     assertMediaType("text/plain. ").     assertMediaType("text/plain. a=1.").     assertMediaType("text/plain. a=1. ").     assertMediaType("text/plain. a=1.. b=2").     assertMediaType("text/plain..").     assertMediaType("text/plain. ."). }
false;public;0;34;;@Test public void testInvalidParse() throws Exception {     assertInvalid("", "No subtype found for: \"\"").     assertInvalid("/", "No subtype found for: \"/\"").     assertInvalid("text", "No subtype found for: \"text\"").     assertInvalid("text/", "No subtype found for: \"text/\"").     assertInvalid("te<t/plain", "No subtype found for: \"te<t/plain\"").     assertInvalid(" text/plain", "No subtype found for: \" text/plain\"").     assertInvalid("te xt/plain", "No subtype found for: \"te xt/plain\"").     assertInvalid("text /plain", "No subtype found for: \"text /plain\"").     assertInvalid("text/ plain", "No subtype found for: \"text/ plain\"").     assertInvalid("text/pl@in", "Parameter is not formatted correctly: \"@in\" for: \"text/pl@in\"").     assertInvalid("text/plain. a", "Parameter is not formatted correctly: \"a\" for: \"text/plain. a\"").     assertInvalid("text/plain. a=", "Parameter is not formatted correctly: \"a=\" for: \"text/plain. a=\"").     assertInvalid("text/plain. a=@", "Parameter is not formatted correctly: \"a=@\" for: \"text/plain. a=@\"").     assertInvalid("text/plain. a=\"@", "Parameter is not formatted correctly: \"a=\"@\" for: \"text/plain. a=\"@\"").     assertInvalid("text/plain. a=1. b", "Parameter is not formatted correctly: \"b\" for: \"text/plain. a=1. b\"").     assertInvalid("text/plain. a=1. b=", "Parameter is not formatted correctly: \"b=\" for: \"text/plain. a=1. b=\"").     assertInvalid("text/plain. a=\u2025", "Parameter is not formatted correctly: \"a=‥\" for: \"text/plain. a=‥\"").     assertInvalid("text/pl ain", "Parameter is not formatted correctly: \" ain\" for: \"text/pl ain\"").     assertInvalid("text/plain ", "Parameter is not formatted correctly: \" \" for: \"text/plain \"").     assertInvalid("text/plain . a=1", "Parameter is not formatted correctly: \" . a=1\" for: \"text/plain . a=1\""). }
false;public;0;4;;@Test public void testDoubleQuotesAreSpecial() throws Exception {     MediaType mediaType = parse("text/plain.a=\".charset=utf-8.b=\"").     assertNull(mediaType.charset()). }
false;public;0;4;;@Test public void testSingleQuotesAreNotSpecial() throws Exception {     MediaType mediaType = parse("text/plain.a='.charset=utf-8.b='").     assertEquals("UTF-8", mediaType.charset().name()). }
false;public;0;5;;@Test public void testParseWithSpecialCharacters() throws Exception {     MediaType mediaType = parse("!#$%&'*+-.{|}~/!#$%&'*+-.{|}~. !#$%&'*+-.{|}~=!#$%&'*+-.{|}~").     assertEquals("!#$%&'*+-.{|}~", mediaType.type()).     assertEquals("!#$%&'*+-.{|}~", mediaType.subtype()). }
false;public;0;6;;@Test public void testCharsetIsOneOfManyParameters() throws Exception {     MediaType mediaType = parse("text/plain.a=1.b=2.charset=utf-8.c=3").     assertEquals("text", mediaType.type()).     assertEquals("plain", mediaType.subtype()).     assertEquals("UTF-8", mediaType.charset().name()). }
false;public;0;5;;@Test public void testCharsetAndQuoting() throws Exception {     MediaType mediaType = parse("text/plain.a=\".charset=us-ascii\".charset=\"utf-8\".b=\"iso-8859-1\"").     assertEquals("UTF-8", mediaType.charset().name()). }
false;public;0;4;;@Test public void testDuplicatedCharsets() {     MediaType mediaType = parse("text/plain. charset=utf-8. charset=UTF-8").     assertEquals("UTF-8", mediaType.charset().name()). }
false;public;0;4;;@Test public void testMultipleCharsets() {     assertInvalid("text/plain. charset=utf-8. charset=utf-16", "Multiple charsets defined: \"utf-8\" and: \"utf-16\" for: \"text/plain. charset=utf-8. charset=utf-16\""). }
false;public;0;4;;@Test public void testIllegalCharsetName() {     MediaType mediaType = parse("text/plain. charset=\"!@#$%^&*()\"").     assertNull(mediaType.charset()). }
false;public;0;4;;@Test public void testUnsupportedCharset() {     MediaType mediaType = parse("text/plain. charset=utf-wtf").     assertNull(mediaType.charset()). }
true;public;0;4;/**  * This is invalid according to RFC 822. But it's what Chrome does and it avoids a potentially  * unpleasant IllegalCharsetNameException.  */ ;/**  * This is invalid according to RFC 822. But it's what Chrome does and it avoids a potentially  * unpleasant IllegalCharsetNameException.  */ @Test public void testCharsetNameIsSingleQuoted() throws Exception {     MediaType mediaType = parse("text/plain.charset='utf-8'").     assertEquals("UTF-8", mediaType.charset().name()). }
false;public;0;4;;@Test public void testCharsetNameIsDoubleQuotedAndSingleQuoted() throws Exception {     MediaType mediaType = parse("text/plain.charset=\"'utf-8'\"").     assertNull(mediaType.charset()). }
false;public;0;4;;@Test public void testCharsetNameIsDoubleQuotedSingleQuote() throws Exception {     MediaType mediaType = parse("text/plain.charset=\"'\"").     assertNull(mediaType.charset()). }
false;public;0;9;;@Test public void testDefaultCharset() throws Exception {     MediaType noCharset = parse("text/plain").     assertEquals("UTF-8", noCharset.charset(UTF_8).name()).     assertEquals("US-ASCII", noCharset.charset(Charset.forName("US-ASCII")).name()).     MediaType charset = parse("text/plain. charset=iso-8859-1").     assertEquals("ISO-8859-1", charset.charset(UTF_8).name()).     assertEquals("ISO-8859-1", charset.charset(Charset.forName("US-ASCII")).name()). }
false;public;0;7;;@Test public void testParseDanglingSemicolon() throws Exception {     MediaType mediaType = parse("text/plain.").     assertEquals("text", mediaType.type()).     assertEquals("plain", mediaType.subtype()).     assertNull(mediaType.charset()).     assertEquals("text/plain.", mediaType.toString()). }
false;private;1;3;;private void assertMediaType(String string) {     assertEquals(string, parse(string).toString()). }
false;private;2;12;;private void assertInvalid(String string, String exceptionMessage) {     if (useGet) {         try {             parse(string).             fail("Expected get of \"" + string + "\" to throw with: " + exceptionMessage).         } catch (IllegalArgumentException e) {             assertEquals(exceptionMessage, e.getMessage()).         }     } else {         assertNull(string, parse(string)).     } }
