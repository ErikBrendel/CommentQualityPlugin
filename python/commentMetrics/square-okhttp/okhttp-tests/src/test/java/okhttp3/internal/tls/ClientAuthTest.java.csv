commented;modifiers;parameterAmount;loc;comment;code
false;public;0;44;;@Before public void setUp() {     serverRootCa = new HeldCertificate.Builder().serialNumber(1L).certificateAuthority(1).commonName("root").addSubjectAlternativeName("root_ca.com").build().     serverIntermediateCa = new HeldCertificate.Builder().signedBy(serverRootCa).certificateAuthority(0).serialNumber(2L).commonName("intermediate_ca").addSubjectAlternativeName("intermediate_ca.com").build().     serverCert = new HeldCertificate.Builder().signedBy(serverIntermediateCa).serialNumber(3L).commonName("Local Host").addSubjectAlternativeName(server.getHostName()).build().     clientRootCa = new HeldCertificate.Builder().serialNumber(1L).certificateAuthority(1).commonName("root").addSubjectAlternativeName("root_ca.com").build().     clientIntermediateCa = new HeldCertificate.Builder().signedBy(serverRootCa).certificateAuthority(0).serialNumber(2L).commonName("intermediate_ca").addSubjectAlternativeName("intermediate_ca.com").build().     clientCert = new HeldCertificate.Builder().signedBy(clientIntermediateCa).serialNumber(4L).commonName("Jethro Willis").addSubjectAlternativeName("jethrowillis.com").build(). }
false;public;0;15;;@Test public void clientAuthForWants() throws Exception {     OkHttpClient client = buildClient(clientCert, clientIntermediateCa.certificate()).     SSLSocketFactory socketFactory = buildServerSslSocketFactory().     server.useHttps(socketFactory, false).     server.requestClientAuth().     server.enqueue(new MockResponse().setBody("abc")).     Call call = client.newCall(new Request.Builder().url(server.url("/")).build()).     Response response = call.execute().     assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal()).     assertEquals(new X500Principal("CN=Jethro Willis"), response.handshake().localPrincipal()).     assertEquals("abc", response.body().string()). }
false;public;0;15;;@Test public void clientAuthForNeeds() throws Exception {     OkHttpClient client = buildClient(clientCert, clientIntermediateCa.certificate()).     SSLSocketFactory socketFactory = buildServerSslSocketFactory().     server.useHttps(socketFactory, false).     server.requireClientAuth().     server.enqueue(new MockResponse().setBody("abc")).     Call call = client.newCall(new Request.Builder().url(server.url("/")).build()).     Response response = call.execute().     assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal()).     assertEquals(new X500Principal("CN=Jethro Willis"), response.handshake().localPrincipal()).     assertEquals("abc", response.body().string()). }
false;public;0;15;;@Test public void clientAuthSkippedForNone() throws Exception {     OkHttpClient client = buildClient(clientCert, clientIntermediateCa.certificate()).     SSLSocketFactory socketFactory = buildServerSslSocketFactory().     server.useHttps(socketFactory, false).     server.noClientAuth().     server.enqueue(new MockResponse().setBody("abc")).     Call call = client.newCall(new Request.Builder().url(server.url("/")).build()).     Response response = call.execute().     assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal()).     assertNull(response.handshake().localPrincipal()).     assertEquals("abc", response.body().string()). }
false;public;0;15;;@Test public void missingClientAuthSkippedForWantsOnly() throws Exception {     OkHttpClient client = buildClient(null, clientIntermediateCa.certificate()).     SSLSocketFactory socketFactory = buildServerSslSocketFactory().     server.useHttps(socketFactory, false).     server.requestClientAuth().     server.enqueue(new MockResponse().setBody("abc")).     Call call = client.newCall(new Request.Builder().url(server.url("/")).build()).     Response response = call.execute().     assertEquals(new X500Principal("CN=Local Host"), response.handshake().peerPrincipal()).     assertNull(response.handshake().localPrincipal()).     assertEquals("abc", response.body().string()). }
false;public;0;25;;@Test public void missingClientAuthFailsForNeeds() throws Exception {     // TODO https://github.com/square/okhttp/issues/4598     // StreamReset stream was reset: PROT...     assumeFalse(getJvmSpecVersion().equals("11")).     OkHttpClient client = buildClient(null, clientIntermediateCa.certificate()).     SSLSocketFactory socketFactory = buildServerSslSocketFactory().     server.useHttps(socketFactory, false).     server.requireClientAuth().     Call call = client.newCall(new Request.Builder().url(server.url("/")).build()).     try {         call.execute().         fail().     } catch (SSLHandshakeException expected) {     } catch (SSLException expected) {         String jvmVersion = System.getProperty("java.specification.version").         assertEquals("11", jvmVersion).     } catch (SocketException expected) {         assertEquals("jdk9", getPlatform()).     } }
false;public;0;23;;@Test public void commonNameIsNotTrusted() throws Exception {     serverCert = new HeldCertificate.Builder().signedBy(serverIntermediateCa).serialNumber(3L).commonName(server.getHostName()).addSubjectAlternativeName("different-host.com").build().     OkHttpClient client = buildClient(clientCert, clientIntermediateCa.certificate()).     SSLSocketFactory socketFactory = buildServerSslSocketFactory().     server.useHttps(socketFactory, false).     server.requireClientAuth().     Call call = client.newCall(new Request.Builder().url(server.url("/")).build()).     try {         call.execute().         fail().     } catch (SSLPeerUnverifiedException expected) {     } }
false;public;0;31;;@Test public void invalidClientAuthFails() throws Throwable {     // TODO https://github.com/square/okhttp/issues/4598     // StreamReset stream was reset: PROT...     assumeFalse(getJvmSpecVersion().equals("11")).     HeldCertificate clientCert2 = new HeldCertificate.Builder().serialNumber(4L).commonName("Jethro Willis").build().     OkHttpClient client = buildClient(clientCert2).     SSLSocketFactory socketFactory = buildServerSslSocketFactory().     server.useHttps(socketFactory, false).     server.requireClientAuth().     Call call = client.newCall(new Request.Builder().url(server.url("/")).build()).     try {         call.execute().         fail().     } catch (SSLHandshakeException expected) {     } catch (SSLException expected) {         // javax.net.ssl.SSLException: readRecord         String jvmVersion = System.getProperty("java.specification.version").         assertEquals("11", jvmVersion).     } catch (SocketException expected) {         assertEquals("jdk9", getPlatform()).     } }
false;private;2;15;;private OkHttpClient buildClient(HeldCertificate heldCertificate, X509Certificate... intermediates) {     HandshakeCertificates.Builder builder = new HandshakeCertificates.Builder().addTrustedCertificate(serverRootCa.certificate()).     if (heldCertificate != null) {         builder.heldCertificate(heldCertificate, intermediates).     }     HandshakeCertificates handshakeCertificates = builder.build().     return defaultClient().newBuilder().sslSocketFactory(handshakeCertificates.sslSocketFactory(), handshakeCertificates.trustManager()).build(). }
false;private;0;16;;private SSLSocketFactory buildServerSslSocketFactory() {     // as Conscrypt seems to have some differences, we only want to test client side here.     try {         X509KeyManager keyManager = newKeyManager(null, serverCert, serverIntermediateCa.certificate()).         X509TrustManager trustManager = newTrustManager(null, Arrays.asList(serverRootCa.certificate(), clientRootCa.certificate())).         SSLContext sslContext = SSLContext.getInstance("TLS").         sslContext.init(new KeyManager[] { keyManager }, new TrustManager[] { trustManager }, new SecureRandom()).         return sslContext.getSocketFactory().     } catch (GeneralSecurityException e) {         throw new AssertionError(e).     } }
