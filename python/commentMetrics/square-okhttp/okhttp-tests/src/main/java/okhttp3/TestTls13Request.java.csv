commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;26;;public static void main(String[] args) {     // System.setProperty("javax.net.debug", "ssl:handshake:verbose").     Security.insertProviderAt(Conscrypt.newProviderBuilder().provideTrustManager().build(), 1).     System.out.println("Running tests using " + Platform.get() + " " + System.getProperty("java.vm.version")).     // https://github.com/tlswg/tls13-spec/wiki/Implementations     List<String> urls = Arrays.asList("https://enabled.tls13.com", "https://www.howsmyssl.com/a/check", "https://tls13.cloudflare.com", "https://www.allizom.org/robots.txt", "https://tls13.crypto.mozilla.org/", "https://tls.ctf.network/robots.txt", "https://rustls.jbp.io/", "https://h2o.examp1e.net", "https://mew.org/", "https://tls13.baishancloud.com/", "https://tls13.akamai.io/", "https://swifttls.org/", "https://www.googleapis.com/robots.txt", "https://graph.facebook.com/robots.txt", "https://api.twitter.com/robots.txt", "https://connect.squareup.com/robots.txt").     System.out.println("TLS1.3+TLS1.2").     testClient(urls, buildClient(ConnectionSpec.RESTRICTED_TLS)).     System.out.println("\nTLS1.3 only").     testClient(urls, buildClient(TLS_13)).     System.out.println("\nTLS1.3 then fallback").     testClient(urls, buildClient(TLS_13, TLS_12)). }
false;private,static;2;10;;private static void testClient(List<String> urls, OkHttpClient client) {     try {         for (String url : urls) {             sendRequest(client, url).         }     } finally {         client.dispatcher.executorService().shutdownNow().         client.connectionPool.evictAll().     } }
false;private,static;1;3;;private static OkHttpClient buildClient(ConnectionSpec... specs) {     return new OkHttpClient.Builder().connectionSpecs(Arrays.asList(specs)).build(). }
false;private,static;2;24;;private static void sendRequest(OkHttpClient client, String url) {     System.out.printf("%-40s ", url).     System.out.flush().     System.out.println(Platform.get()).     Request request = new Request.Builder().url(url).build().     try (Response response = client.newCall(request).execute()) {         Handshake handshake = response.handshake().         System.out.println(handshake.tlsVersion() + " " + handshake.cipherSuite() + " " + response.protocol() + " " + response.code + " " + response.body.bytes().length + "b").     } catch (IOException ioe) {         System.out.println(ioe.toString()).     } }
