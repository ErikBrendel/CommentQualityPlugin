# id;timestamp;commentText;codeText;commentWords;codeWords
TypeInformationKeyValueSerializationSchema -> @Override 	public boolean isEndOfStream(Tuple2<K, V> nextElement);1495923077;This schema never considers an element to signal end-of-stream, so this method returns always false._@param nextElement The element to test for the end-of-stream signal._@return Returns false.;@Override_	public boolean isEndOfStream(Tuple2<K, V> nextElement) {_		return false__	};this,schema,never,considers,an,element,to,signal,end,of,stream,so,this,method,returns,always,false,param,next,element,the,element,to,test,for,the,end,of,stream,signal,return,returns,false;override,public,boolean,is,end,of,stream,tuple2,k,v,next,element,return,false
TypeInformationKeyValueSerializationSchema -> @Override 	public boolean isEndOfStream(Tuple2<K, V> nextElement);1509646806;This schema never considers an element to signal end-of-stream, so this method returns always false._@param nextElement The element to test for the end-of-stream signal._@return Returns false.;@Override_	public boolean isEndOfStream(Tuple2<K, V> nextElement) {_		return false__	};this,schema,never,considers,an,element,to,signal,end,of,stream,so,this,method,returns,always,false,param,next,element,the,element,to,test,for,the,end,of,stream,signal,return,returns,false;override,public,boolean,is,end,of,stream,tuple2,k,v,next,element,return,false
TypeInformationKeyValueSerializationSchema -> @Override 	public boolean isEndOfStream(Tuple2<K, V> nextElement);1515757409;This schema never considers an element to signal end-of-stream, so this method returns always false._@param nextElement The element to test for the end-of-stream signal._@return Returns false.;@Override_	public boolean isEndOfStream(Tuple2<K, V> nextElement) {_		return false__	};this,schema,never,considers,an,element,to,signal,end,of,stream,so,this,method,returns,always,false,param,next,element,the,element,to,test,for,the,end,of,stream,signal,return,returns,false;override,public,boolean,is,end,of,stream,tuple2,k,v,next,element,return,false
TypeInformationKeyValueSerializationSchema -> @Override 	public boolean isEndOfStream(Tuple2<K, V> nextElement);1534937605;This schema never considers an element to signal end-of-stream, so this method returns always false._@param nextElement The element to test for the end-of-stream signal._@return Returns false.;@Override_	public boolean isEndOfStream(Tuple2<K, V> nextElement) {_		return false__	};this,schema,never,considers,an,element,to,signal,end,of,stream,so,this,method,returns,always,false,param,next,element,the,element,to,test,for,the,end,of,stream,signal,return,returns,false;override,public,boolean,is,end,of,stream,tuple2,k,v,next,element,return,false
TypeInformationKeyValueSerializationSchema -> @Override 	public boolean isEndOfStream(Tuple2<K, V> nextElement);1550834396;This schema never considers an element to signal end-of-stream, so this method returns always false._@param nextElement The element to test for the end-of-stream signal._@return Returns false.;@Override_	public boolean isEndOfStream(Tuple2<K, V> nextElement) {_		return false__	};this,schema,never,considers,an,element,to,signal,end,of,stream,so,this,method,returns,always,false,param,next,element,the,element,to,test,for,the,end,of,stream,signal,return,returns,false;override,public,boolean,is,end,of,stream,tuple2,k,v,next,element,return,false
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec);1480685315;Creates a new de-/serialization schema for the given types.__@param keyTypeInfo The type information for the key type de-/serialized by this schema._@param valueTypeInfo The type information for the value type de-/serialized by this schema._@param ec The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec) {_		this.typeInfo = new TupleTypeInfo<>(keyTypeInfo, valueTypeInfo)__		this.keySerializer = keyTypeInfo.createSerializer(ec)__		this.valueSerializer = valueTypeInfo.createSerializer(ec)__		this.inputDeserializer = new DataInputDeserializer()__	};creates,a,new,de,serialization,schema,for,the,given,types,param,key,type,info,the,type,information,for,the,key,type,de,serialized,by,this,schema,param,value,type,info,the,type,information,for,the,value,type,de,serialized,by,this,schema,param,ec,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,type,information,k,key,type,info,type,information,v,value,type,info,execution,config,ec,this,type,info,new,tuple,type,info,key,type,info,value,type,info,this,key,serializer,key,type,info,create,serializer,ec,this,value,serializer,value,type,info,create,serializer,ec,this,input,deserializer,new,data,input,deserializer
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec);1495923077;Creates a new de-/serialization schema for the given types.__@param keyTypeInfo The type information for the key type de-/serialized by this schema._@param valueTypeInfo The type information for the value type de-/serialized by this schema._@param ec The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec) {_		this.typeInfo = new TupleTypeInfo<>(keyTypeInfo, valueTypeInfo)__		this.keySerializer = keyTypeInfo.createSerializer(ec)__		this.valueSerializer = valueTypeInfo.createSerializer(ec)__		this.inputDeserializer = new DataInputDeserializer()__	};creates,a,new,de,serialization,schema,for,the,given,types,param,key,type,info,the,type,information,for,the,key,type,de,serialized,by,this,schema,param,value,type,info,the,type,information,for,the,value,type,de,serialized,by,this,schema,param,ec,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,type,information,k,key,type,info,type,information,v,value,type,info,execution,config,ec,this,type,info,new,tuple,type,info,key,type,info,value,type,info,this,key,serializer,key,type,info,create,serializer,ec,this,value,serializer,value,type,info,create,serializer,ec,this,input,deserializer,new,data,input,deserializer
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec);1509646806;Creates a new de-/serialization schema for the given types.__@param keyTypeInfo The type information for the key type de-/serialized by this schema._@param valueTypeInfo The type information for the value type de-/serialized by this schema._@param ec The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec) {_		this.typeInfo = new TupleTypeInfo<>(keyTypeInfo, valueTypeInfo)__		this.keySerializer = keyTypeInfo.createSerializer(ec)__		this.valueSerializer = valueTypeInfo.createSerializer(ec)__		this.inputDeserializer = new DataInputDeserializer()__	};creates,a,new,de,serialization,schema,for,the,given,types,param,key,type,info,the,type,information,for,the,key,type,de,serialized,by,this,schema,param,value,type,info,the,type,information,for,the,value,type,de,serialized,by,this,schema,param,ec,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,type,information,k,key,type,info,type,information,v,value,type,info,execution,config,ec,this,type,info,new,tuple,type,info,key,type,info,value,type,info,this,key,serializer,key,type,info,create,serializer,ec,this,value,serializer,value,type,info,create,serializer,ec,this,input,deserializer,new,data,input,deserializer
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec);1515757409;Creates a new de-/serialization schema for the given types.__@param keyTypeInfo The type information for the key type de-/serialized by this schema._@param valueTypeInfo The type information for the value type de-/serialized by this schema._@param ec The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec) {_		this.typeInfo = new TupleTypeInfo<>(keyTypeInfo, valueTypeInfo)__		this.keySerializer = keyTypeInfo.createSerializer(ec)__		this.valueSerializer = valueTypeInfo.createSerializer(ec)__		this.inputDeserializer = new DataInputDeserializer()__	};creates,a,new,de,serialization,schema,for,the,given,types,param,key,type,info,the,type,information,for,the,key,type,de,serialized,by,this,schema,param,value,type,info,the,type,information,for,the,value,type,de,serialized,by,this,schema,param,ec,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,type,information,k,key,type,info,type,information,v,value,type,info,execution,config,ec,this,type,info,new,tuple,type,info,key,type,info,value,type,info,this,key,serializer,key,type,info,create,serializer,ec,this,value,serializer,value,type,info,create,serializer,ec,this,input,deserializer,new,data,input,deserializer
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec);1534937605;Creates a new de-/serialization schema for the given types.__@param keyTypeInfo The type information for the key type de-/serialized by this schema._@param valueTypeInfo The type information for the value type de-/serialized by this schema._@param ec The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec) {_		this.typeInfo = new TupleTypeInfo<>(keyTypeInfo, valueTypeInfo)__		this.keySerializer = keyTypeInfo.createSerializer(ec)__		this.valueSerializer = valueTypeInfo.createSerializer(ec)__		this.inputDeserializer = new DataInputDeserializer()__	};creates,a,new,de,serialization,schema,for,the,given,types,param,key,type,info,the,type,information,for,the,key,type,de,serialized,by,this,schema,param,value,type,info,the,type,information,for,the,value,type,de,serialized,by,this,schema,param,ec,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,type,information,k,key,type,info,type,information,v,value,type,info,execution,config,ec,this,type,info,new,tuple,type,info,key,type,info,value,type,info,this,key,serializer,key,type,info,create,serializer,ec,this,value,serializer,value,type,info,create,serializer,ec,this,input,deserializer,new,data,input,deserializer
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec);1550834396;Creates a new de-/serialization schema for the given types.__@param keyTypeInfo The type information for the key type de-/serialized by this schema._@param valueTypeInfo The type information for the value type de-/serialized by this schema._@param ec The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(TypeInformation<K> keyTypeInfo, TypeInformation<V> valueTypeInfo, ExecutionConfig ec) {_		this.typeInfo = new TupleTypeInfo<>(keyTypeInfo, valueTypeInfo)__		this.keySerializer = keyTypeInfo.createSerializer(ec)__		this.valueSerializer = valueTypeInfo.createSerializer(ec)__		this.inputDeserializer = new DataInputDeserializer()__	};creates,a,new,de,serialization,schema,for,the,given,types,param,key,type,info,the,type,information,for,the,key,type,de,serialized,by,this,schema,param,value,type,info,the,type,information,for,the,value,type,de,serialized,by,this,schema,param,ec,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,type,information,k,key,type,info,type,information,v,value,type,info,execution,config,ec,this,type,info,new,tuple,type,info,key,type,info,value,type,info,this,key,serializer,key,type,info,create,serializer,ec,this,value,serializer,value,type,info,create,serializer,ec,this,input,deserializer,new,data,input,deserializer
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config);1480685315;Creates a new de-/serialization schema for the given types. This constructor accepts the types_as classes and internally constructs the type information from the classes.__<p>If the types are parametrized and cannot be fully defined via classes, use the constructor_that accepts {@link TypeInformation} instead.__@param keyClass The class of the key de-/serialized by this schema._@param valueClass The class of the value de-/serialized by this schema._@param config The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config) {_		this(TypeExtractor.createTypeInfo(keyClass), TypeExtractor.createTypeInfo(valueClass), config)__	};creates,a,new,de,serialization,schema,for,the,given,types,this,constructor,accepts,the,types,as,classes,and,internally,constructs,the,type,information,from,the,classes,p,if,the,types,are,parametrized,and,cannot,be,fully,defined,via,classes,use,the,constructor,that,accepts,link,type,information,instead,param,key,class,the,class,of,the,key,de,serialized,by,this,schema,param,value,class,the,class,of,the,value,de,serialized,by,this,schema,param,config,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,class,k,key,class,class,v,value,class,execution,config,config,this,type,extractor,create,type,info,key,class,type,extractor,create,type,info,value,class,config
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config);1495923077;Creates a new de-/serialization schema for the given types. This constructor accepts the types_as classes and internally constructs the type information from the classes.__<p>If the types are parametrized and cannot be fully defined via classes, use the constructor_that accepts {@link TypeInformation} instead.__@param keyClass The class of the key de-/serialized by this schema._@param valueClass The class of the value de-/serialized by this schema._@param config The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config) {_		this(TypeExtractor.createTypeInfo(keyClass), TypeExtractor.createTypeInfo(valueClass), config)__	};creates,a,new,de,serialization,schema,for,the,given,types,this,constructor,accepts,the,types,as,classes,and,internally,constructs,the,type,information,from,the,classes,p,if,the,types,are,parametrized,and,cannot,be,fully,defined,via,classes,use,the,constructor,that,accepts,link,type,information,instead,param,key,class,the,class,of,the,key,de,serialized,by,this,schema,param,value,class,the,class,of,the,value,de,serialized,by,this,schema,param,config,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,class,k,key,class,class,v,value,class,execution,config,config,this,type,extractor,create,type,info,key,class,type,extractor,create,type,info,value,class,config
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config);1509646806;Creates a new de-/serialization schema for the given types. This constructor accepts the types_as classes and internally constructs the type information from the classes.__<p>If the types are parametrized and cannot be fully defined via classes, use the constructor_that accepts {@link TypeInformation} instead.__@param keyClass The class of the key de-/serialized by this schema._@param valueClass The class of the value de-/serialized by this schema._@param config The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config) {_		this(TypeExtractor.createTypeInfo(keyClass), TypeExtractor.createTypeInfo(valueClass), config)__	};creates,a,new,de,serialization,schema,for,the,given,types,this,constructor,accepts,the,types,as,classes,and,internally,constructs,the,type,information,from,the,classes,p,if,the,types,are,parametrized,and,cannot,be,fully,defined,via,classes,use,the,constructor,that,accepts,link,type,information,instead,param,key,class,the,class,of,the,key,de,serialized,by,this,schema,param,value,class,the,class,of,the,value,de,serialized,by,this,schema,param,config,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,class,k,key,class,class,v,value,class,execution,config,config,this,type,extractor,create,type,info,key,class,type,extractor,create,type,info,value,class,config
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config);1515757409;Creates a new de-/serialization schema for the given types. This constructor accepts the types_as classes and internally constructs the type information from the classes.__<p>If the types are parametrized and cannot be fully defined via classes, use the constructor_that accepts {@link TypeInformation} instead.__@param keyClass The class of the key de-/serialized by this schema._@param valueClass The class of the value de-/serialized by this schema._@param config The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config) {_		this(TypeExtractor.createTypeInfo(keyClass), TypeExtractor.createTypeInfo(valueClass), config)__	};creates,a,new,de,serialization,schema,for,the,given,types,this,constructor,accepts,the,types,as,classes,and,internally,constructs,the,type,information,from,the,classes,p,if,the,types,are,parametrized,and,cannot,be,fully,defined,via,classes,use,the,constructor,that,accepts,link,type,information,instead,param,key,class,the,class,of,the,key,de,serialized,by,this,schema,param,value,class,the,class,of,the,value,de,serialized,by,this,schema,param,config,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,class,k,key,class,class,v,value,class,execution,config,config,this,type,extractor,create,type,info,key,class,type,extractor,create,type,info,value,class,config
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config);1534937605;Creates a new de-/serialization schema for the given types. This constructor accepts the types_as classes and internally constructs the type information from the classes.__<p>If the types are parametrized and cannot be fully defined via classes, use the constructor_that accepts {@link TypeInformation} instead.__@param keyClass The class of the key de-/serialized by this schema._@param valueClass The class of the value de-/serialized by this schema._@param config The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config) {_		this(TypeExtractor.createTypeInfo(keyClass), TypeExtractor.createTypeInfo(valueClass), config)__	};creates,a,new,de,serialization,schema,for,the,given,types,this,constructor,accepts,the,types,as,classes,and,internally,constructs,the,type,information,from,the,classes,p,if,the,types,are,parametrized,and,cannot,be,fully,defined,via,classes,use,the,constructor,that,accepts,link,type,information,instead,param,key,class,the,class,of,the,key,de,serialized,by,this,schema,param,value,class,the,class,of,the,value,de,serialized,by,this,schema,param,config,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,class,k,key,class,class,v,value,class,execution,config,config,this,type,extractor,create,type,info,key,class,type,extractor,create,type,info,value,class,config
TypeInformationKeyValueSerializationSchema -> public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config);1550834396;Creates a new de-/serialization schema for the given types. This constructor accepts the types_as classes and internally constructs the type information from the classes.__<p>If the types are parametrized and cannot be fully defined via classes, use the constructor_that accepts {@link TypeInformation} instead.__@param keyClass The class of the key de-/serialized by this schema._@param valueClass The class of the value de-/serialized by this schema._@param config The execution config, which is used to parametrize the type serializers.;public TypeInformationKeyValueSerializationSchema(Class<K> keyClass, Class<V> valueClass, ExecutionConfig config) {_		this(TypeExtractor.createTypeInfo(keyClass), TypeExtractor.createTypeInfo(valueClass), config)__	};creates,a,new,de,serialization,schema,for,the,given,types,this,constructor,accepts,the,types,as,classes,and,internally,constructs,the,type,information,from,the,classes,p,if,the,types,are,parametrized,and,cannot,be,fully,defined,via,classes,use,the,constructor,that,accepts,link,type,information,instead,param,key,class,the,class,of,the,key,de,serialized,by,this,schema,param,value,class,the,class,of,the,value,de,serialized,by,this,schema,param,config,the,execution,config,which,is,used,to,parametrize,the,type,serializers;public,type,information,key,value,serialization,schema,class,k,key,class,class,v,value,class,execution,config,config,this,type,extractor,create,type,info,key,class,type,extractor,create,type,info,value,class,config
