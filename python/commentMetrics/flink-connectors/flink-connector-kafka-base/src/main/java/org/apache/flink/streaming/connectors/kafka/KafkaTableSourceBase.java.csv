# id;timestamp;commentText;codeText;commentWords;codeWords
KafkaTableSourceBase -> Builder -> @Deprecated 		public B withProctimeAttribute(String proctimeAttribute);1539704473;Configures a field of the table to be a processing time attribute._The configured field must be present in the table schema and of type {@link Types#SQL_TIMESTAMP()}.__@param proctimeAttribute The name of the processing time attribute in the table schema._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B withProctimeAttribute(String proctimeAttribute) {_			Preconditions.checkNotNull(proctimeAttribute, "Proctime attribute must not be null.")__			Preconditions.checkArgument(!proctimeAttribute.isEmpty(), "Proctime attribute must not be empty.")__			Preconditions.checkArgument(this.proctimeAttribute == null, "Proctime attribute has already been set.")__			this.proctimeAttribute = proctimeAttribute__			return builder()__		};configures,a,field,of,the,table,to,be,a,processing,time,attribute,the,configured,field,must,be,present,in,the,table,schema,and,of,type,link,types,param,proctime,attribute,the,name,of,the,processing,time,attribute,in,the,table,schema,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,with,proctime,attribute,string,proctime,attribute,preconditions,check,not,null,proctime,attribute,proctime,attribute,must,not,be,null,preconditions,check,argument,proctime,attribute,is,empty,proctime,attribute,must,not,be,empty,preconditions,check,argument,this,proctime,attribute,null,proctime,attribute,has,already,been,set,this,proctime,attribute,proctime,attribute,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B withProctimeAttribute(String proctimeAttribute);1540894120;Configures a field of the table to be a processing time attribute._The configured field must be present in the table schema and of type {@link Types#SQL_TIMESTAMP()}.__@param proctimeAttribute The name of the processing time attribute in the table schema._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B withProctimeAttribute(String proctimeAttribute) {_			Preconditions.checkNotNull(proctimeAttribute, "Proctime attribute must not be null.")__			Preconditions.checkArgument(!proctimeAttribute.isEmpty(), "Proctime attribute must not be empty.")__			Preconditions.checkArgument(this.proctimeAttribute == null, "Proctime attribute has already been set.")__			this.proctimeAttribute = proctimeAttribute__			return builder()__		};configures,a,field,of,the,table,to,be,a,processing,time,attribute,the,configured,field,must,be,present,in,the,table,schema,and,of,type,link,types,param,proctime,attribute,the,name,of,the,processing,time,attribute,in,the,table,schema,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,with,proctime,attribute,string,proctime,attribute,preconditions,check,not,null,proctime,attribute,proctime,attribute,must,not,be,null,preconditions,check,argument,proctime,attribute,is,empty,proctime,attribute,must,not,be,empty,preconditions,check,argument,this,proctime,attribute,null,proctime,attribute,has,already,been,set,this,proctime,attribute,proctime,attribute,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B forTopic(String topic);1539704473;Sets the topic from which the table is read.__@param topic The topic from which the table is read._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B forTopic(String topic) {_			Preconditions.checkNotNull(topic, "Topic must not be null.")__			Preconditions.checkArgument(this.topic == null, "Topic has already been set.")__			this.topic = topic__			return builder()__		};sets,the,topic,from,which,the,table,is,read,param,topic,the,topic,from,which,the,table,is,read,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,for,topic,string,topic,preconditions,check,not,null,topic,topic,must,not,be,null,preconditions,check,argument,this,topic,null,topic,has,already,been,set,this,topic,topic,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B forTopic(String topic);1540894120;Sets the topic from which the table is read.__@param topic The topic from which the table is read._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B forTopic(String topic) {_			Preconditions.checkNotNull(topic, "Topic must not be null.")__			Preconditions.checkArgument(this.topic == null, "Topic has already been set.")__			this.topic = topic__			return builder()__		};sets,the,topic,from,which,the,table,is,read,param,topic,the,topic,from,which,the,table,is,read,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,for,topic,string,topic,preconditions,check,not,null,topic,topic,must,not,be,null,preconditions,check,argument,this,topic,null,topic,has,already,been,set,this,topic,topic,return,builder
KafkaTableSourceBase -> public Properties getProperties();1539704473;Returns the properties for the Kafka consumer.__@return properties for the Kafka consumer.;public Properties getProperties() {_		return properties__	};returns,the,properties,for,the,kafka,consumer,return,properties,for,the,kafka,consumer;public,properties,get,properties,return,properties
KafkaTableSourceBase -> public Properties getProperties();1540894120;Returns the properties for the Kafka consumer.__@return properties for the Kafka consumer.;public Properties getProperties() {_		return properties__	};returns,the,properties,for,the,kafka,consumer,return,properties,for,the,kafka,consumer;public,properties,get,properties,return,properties
KafkaTableSourceBase -> public Properties getProperties();1543586152;Returns the properties for the Kafka consumer.__@return properties for the Kafka consumer.;public Properties getProperties() {_		return properties__	};returns,the,properties,for,the,kafka,consumer,return,properties,for,the,kafka,consumer;public,properties,get,properties,return,properties
KafkaTableSourceBase -> public Properties getProperties();1549034017;Returns the properties for the Kafka consumer.__@return properties for the Kafka consumer.;public Properties getProperties() {_		return properties__	};returns,the,properties,for,the,kafka,consumer,return,properties,for,the,kafka,consumer;public,properties,get,properties,return,properties
KafkaTableSourceBase -> Builder -> @Deprecated 		protected abstract B builder()_;1539704473;Returns the builder._@return the builder._@deprecated Use the {@link org.apache.flink.table.descriptors.Kafka} descriptor together_with descriptors for schema and format instead. Descriptors allow for_implementation-agnostic definition of tables. See also_{@link org.apache.flink.table.api.TableEnvironment#connect(ConnectorDescriptor)}.;@Deprecated_		protected abstract B builder()_;returns,the,builder,return,the,builder,deprecated,use,the,link,org,apache,flink,table,descriptors,kafka,descriptor,together,with,descriptors,for,schema,and,format,instead,descriptors,allow,for,implementation,agnostic,definition,of,tables,see,also,link,org,apache,flink,table,api,table,environment,connect,connector,descriptor;deprecated,protected,abstract,b,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		protected abstract B builder()_;1540894120;Returns the builder._@return the builder._@deprecated Use the {@link org.apache.flink.table.descriptors.Kafka} descriptor together_with descriptors for schema and format instead. Descriptors allow for_implementation-agnostic definition of tables. See also_{@link org.apache.flink.table.api.TableEnvironment#connect(ConnectorDescriptor)}.;@Deprecated_		protected abstract B builder()_;returns,the,builder,return,the,builder,deprecated,use,the,link,org,apache,flink,table,descriptors,kafka,descriptor,together,with,descriptors,for,schema,and,format,instead,descriptors,allow,for,implementation,agnostic,definition,of,tables,see,also,link,org,apache,flink,table,api,table,environment,connect,connector,descriptor;deprecated,protected,abstract,b,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		protected String getTopic();1539704473;Returns the configured topic.__@return the configured topic._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected String getTopic() {_			return this.topic__		};returns,the,configured,topic,return,the,configured,topic,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,string,get,topic,return,this,topic
KafkaTableSourceBase -> Builder -> @Deprecated 		protected String getTopic();1540894120;Returns the configured topic.__@return the configured topic._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected String getTopic() {_			return this.topic__		};returns,the,configured,topic,return,the,configured,topic,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,string,get,topic,return,this,topic
KafkaTableSourceBase -> protected KafkaTableSourceBase( 			TableSchema schema, 			Optional<String> proctimeAttribute, 			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors, 			Optional<Map<String, String>> fieldMapping, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			StartupMode startupMode, 			Map<KafkaTopicPartition, Long> specificStartupOffsets);1539704473;Creates a generic Kafka {@link StreamTableSource}.__@param schema                      Schema of the produced table._@param proctimeAttribute           Field name of the processing time attribute._@param rowtimeAttributeDescriptors Descriptor for a rowtime attribute_@param fieldMapping                Mapping for the fields of the table schema to_fields of the physical returned type._@param topic                       Kafka topic to consume._@param properties                  Properties for the Kafka consumer._@param deserializationSchema       Deserialization schema for decoding records from Kafka._@param startupMode                 Startup mode for the contained consumer._@param specificStartupOffsets      Specific startup offsets_ only relevant when startup_mode is {@link StartupMode#SPECIFIC_OFFSETS}.;protected KafkaTableSourceBase(_			TableSchema schema,_			Optional<String> proctimeAttribute,_			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors,_			Optional<Map<String, String>> fieldMapping,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			StartupMode startupMode,_			Map<KafkaTopicPartition, Long> specificStartupOffsets) {_		this.schema = Preconditions.checkNotNull(schema, "Schema must not be null.")__		this.proctimeAttribute = validateProctimeAttribute(proctimeAttribute)__		this.rowtimeAttributeDescriptors = validateRowtimeAttributeDescriptors(rowtimeAttributeDescriptors)__		this.fieldMapping = fieldMapping__		this.topic = Preconditions.checkNotNull(topic, "Topic must not be null.")__		this.properties = Preconditions.checkNotNull(properties, "Properties must not be null.")__		this.deserializationSchema = Preconditions.checkNotNull(_			deserializationSchema, "Deserialization schema must not be null.")__		this.startupMode = Preconditions.checkNotNull(startupMode, "Startup mode must not be null.")__		this.specificStartupOffsets = Preconditions.checkNotNull(_			specificStartupOffsets, "Specific offsets must not be null.")__	};creates,a,generic,kafka,link,stream,table,source,param,schema,schema,of,the,produced,table,param,proctime,attribute,field,name,of,the,processing,time,attribute,param,rowtime,attribute,descriptors,descriptor,for,a,rowtime,attribute,param,field,mapping,mapping,for,the,fields,of,the,table,schema,to,fields,of,the,physical,returned,type,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka,param,startup,mode,startup,mode,for,the,contained,consumer,param,specific,startup,offsets,specific,startup,offsets,only,relevant,when,startup,mode,is,link,startup,mode;protected,kafka,table,source,base,table,schema,schema,optional,string,proctime,attribute,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,optional,map,string,string,field,mapping,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,startup,mode,startup,mode,map,kafka,topic,partition,long,specific,startup,offsets,this,schema,preconditions,check,not,null,schema,schema,must,not,be,null,this,proctime,attribute,validate,proctime,attribute,proctime,attribute,this,rowtime,attribute,descriptors,validate,rowtime,attribute,descriptors,rowtime,attribute,descriptors,this,field,mapping,field,mapping,this,topic,preconditions,check,not,null,topic,topic,must,not,be,null,this,properties,preconditions,check,not,null,properties,properties,must,not,be,null,this,deserialization,schema,preconditions,check,not,null,deserialization,schema,deserialization,schema,must,not,be,null,this,startup,mode,preconditions,check,not,null,startup,mode,startup,mode,must,not,be,null,this,specific,startup,offsets,preconditions,check,not,null,specific,startup,offsets,specific,offsets,must,not,be,null
KafkaTableSourceBase -> protected KafkaTableSourceBase( 			TableSchema schema, 			Optional<String> proctimeAttribute, 			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors, 			Optional<Map<String, String>> fieldMapping, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			StartupMode startupMode, 			Map<KafkaTopicPartition, Long> specificStartupOffsets);1540894120;Creates a generic Kafka {@link StreamTableSource}.__@param schema                      Schema of the produced table._@param proctimeAttribute           Field name of the processing time attribute._@param rowtimeAttributeDescriptors Descriptor for a rowtime attribute_@param fieldMapping                Mapping for the fields of the table schema to_fields of the physical returned type._@param topic                       Kafka topic to consume._@param properties                  Properties for the Kafka consumer._@param deserializationSchema       Deserialization schema for decoding records from Kafka._@param startupMode                 Startup mode for the contained consumer._@param specificStartupOffsets      Specific startup offsets_ only relevant when startup_mode is {@link StartupMode#SPECIFIC_OFFSETS}.;protected KafkaTableSourceBase(_			TableSchema schema,_			Optional<String> proctimeAttribute,_			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors,_			Optional<Map<String, String>> fieldMapping,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			StartupMode startupMode,_			Map<KafkaTopicPartition, Long> specificStartupOffsets) {_		this.schema = Preconditions.checkNotNull(schema, "Schema must not be null.")__		this.proctimeAttribute = validateProctimeAttribute(proctimeAttribute)__		this.rowtimeAttributeDescriptors = validateRowtimeAttributeDescriptors(rowtimeAttributeDescriptors)__		this.fieldMapping = fieldMapping__		this.topic = Preconditions.checkNotNull(topic, "Topic must not be null.")__		this.properties = Preconditions.checkNotNull(properties, "Properties must not be null.")__		this.deserializationSchema = Preconditions.checkNotNull(_			deserializationSchema, "Deserialization schema must not be null.")__		this.startupMode = Preconditions.checkNotNull(startupMode, "Startup mode must not be null.")__		this.specificStartupOffsets = Preconditions.checkNotNull(_			specificStartupOffsets, "Specific offsets must not be null.")__	};creates,a,generic,kafka,link,stream,table,source,param,schema,schema,of,the,produced,table,param,proctime,attribute,field,name,of,the,processing,time,attribute,param,rowtime,attribute,descriptors,descriptor,for,a,rowtime,attribute,param,field,mapping,mapping,for,the,fields,of,the,table,schema,to,fields,of,the,physical,returned,type,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka,param,startup,mode,startup,mode,for,the,contained,consumer,param,specific,startup,offsets,specific,startup,offsets,only,relevant,when,startup,mode,is,link,startup,mode;protected,kafka,table,source,base,table,schema,schema,optional,string,proctime,attribute,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,optional,map,string,string,field,mapping,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,startup,mode,startup,mode,map,kafka,topic,partition,long,specific,startup,offsets,this,schema,preconditions,check,not,null,schema,schema,must,not,be,null,this,proctime,attribute,validate,proctime,attribute,proctime,attribute,this,rowtime,attribute,descriptors,validate,rowtime,attribute,descriptors,rowtime,attribute,descriptors,this,field,mapping,field,mapping,this,topic,preconditions,check,not,null,topic,topic,must,not,be,null,this,properties,preconditions,check,not,null,properties,properties,must,not,be,null,this,deserialization,schema,preconditions,check,not,null,deserialization,schema,deserialization,schema,must,not,be,null,this,startup,mode,preconditions,check,not,null,startup,mode,startup,mode,must,not,be,null,this,specific,startup,offsets,preconditions,check,not,null,specific,startup,offsets,specific,offsets,must,not,be,null
KafkaTableSourceBase -> protected KafkaTableSourceBase( 			TableSchema schema, 			Optional<String> proctimeAttribute, 			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors, 			Optional<Map<String, String>> fieldMapping, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			StartupMode startupMode, 			Map<KafkaTopicPartition, Long> specificStartupOffsets);1543586152;Creates a generic Kafka {@link StreamTableSource}.__@param schema                      Schema of the produced table._@param proctimeAttribute           Field name of the processing time attribute._@param rowtimeAttributeDescriptors Descriptor for a rowtime attribute_@param fieldMapping                Mapping for the fields of the table schema to_fields of the physical returned type._@param topic                       Kafka topic to consume._@param properties                  Properties for the Kafka consumer._@param deserializationSchema       Deserialization schema for decoding records from Kafka._@param startupMode                 Startup mode for the contained consumer._@param specificStartupOffsets      Specific startup offsets_ only relevant when startup_mode is {@link StartupMode#SPECIFIC_OFFSETS}.;protected KafkaTableSourceBase(_			TableSchema schema,_			Optional<String> proctimeAttribute,_			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors,_			Optional<Map<String, String>> fieldMapping,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			StartupMode startupMode,_			Map<KafkaTopicPartition, Long> specificStartupOffsets) {_		this.schema = Preconditions.checkNotNull(schema, "Schema must not be null.")__		this.proctimeAttribute = validateProctimeAttribute(proctimeAttribute)__		this.rowtimeAttributeDescriptors = validateRowtimeAttributeDescriptors(rowtimeAttributeDescriptors)__		this.fieldMapping = fieldMapping__		this.topic = Preconditions.checkNotNull(topic, "Topic must not be null.")__		this.properties = Preconditions.checkNotNull(properties, "Properties must not be null.")__		this.deserializationSchema = Preconditions.checkNotNull(_			deserializationSchema, "Deserialization schema must not be null.")__		this.startupMode = Preconditions.checkNotNull(startupMode, "Startup mode must not be null.")__		this.specificStartupOffsets = Preconditions.checkNotNull(_			specificStartupOffsets, "Specific offsets must not be null.")__	};creates,a,generic,kafka,link,stream,table,source,param,schema,schema,of,the,produced,table,param,proctime,attribute,field,name,of,the,processing,time,attribute,param,rowtime,attribute,descriptors,descriptor,for,a,rowtime,attribute,param,field,mapping,mapping,for,the,fields,of,the,table,schema,to,fields,of,the,physical,returned,type,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka,param,startup,mode,startup,mode,for,the,contained,consumer,param,specific,startup,offsets,specific,startup,offsets,only,relevant,when,startup,mode,is,link,startup,mode;protected,kafka,table,source,base,table,schema,schema,optional,string,proctime,attribute,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,optional,map,string,string,field,mapping,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,startup,mode,startup,mode,map,kafka,topic,partition,long,specific,startup,offsets,this,schema,preconditions,check,not,null,schema,schema,must,not,be,null,this,proctime,attribute,validate,proctime,attribute,proctime,attribute,this,rowtime,attribute,descriptors,validate,rowtime,attribute,descriptors,rowtime,attribute,descriptors,this,field,mapping,field,mapping,this,topic,preconditions,check,not,null,topic,topic,must,not,be,null,this,properties,preconditions,check,not,null,properties,properties,must,not,be,null,this,deserialization,schema,preconditions,check,not,null,deserialization,schema,deserialization,schema,must,not,be,null,this,startup,mode,preconditions,check,not,null,startup,mode,startup,mode,must,not,be,null,this,specific,startup,offsets,preconditions,check,not,null,specific,startup,offsets,specific,offsets,must,not,be,null
KafkaTableSourceBase -> protected KafkaTableSourceBase( 			TableSchema schema, 			Optional<String> proctimeAttribute, 			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors, 			Optional<Map<String, String>> fieldMapping, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			StartupMode startupMode, 			Map<KafkaTopicPartition, Long> specificStartupOffsets);1549034017;Creates a generic Kafka {@link StreamTableSource}.__@param schema                      Schema of the produced table._@param proctimeAttribute           Field name of the processing time attribute._@param rowtimeAttributeDescriptors Descriptor for a rowtime attribute_@param fieldMapping                Mapping for the fields of the table schema to_fields of the physical returned type._@param topic                       Kafka topic to consume._@param properties                  Properties for the Kafka consumer._@param deserializationSchema       Deserialization schema for decoding records from Kafka._@param startupMode                 Startup mode for the contained consumer._@param specificStartupOffsets      Specific startup offsets_ only relevant when startup_mode is {@link StartupMode#SPECIFIC_OFFSETS}.;protected KafkaTableSourceBase(_			TableSchema schema,_			Optional<String> proctimeAttribute,_			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors,_			Optional<Map<String, String>> fieldMapping,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			StartupMode startupMode,_			Map<KafkaTopicPartition, Long> specificStartupOffsets) {_		this.schema = Preconditions.checkNotNull(schema, "Schema must not be null.")__		this.proctimeAttribute = validateProctimeAttribute(proctimeAttribute)__		this.rowtimeAttributeDescriptors = validateRowtimeAttributeDescriptors(rowtimeAttributeDescriptors)__		this.fieldMapping = fieldMapping__		this.topic = Preconditions.checkNotNull(topic, "Topic must not be null.")__		this.properties = Preconditions.checkNotNull(properties, "Properties must not be null.")__		this.deserializationSchema = Preconditions.checkNotNull(_			deserializationSchema, "Deserialization schema must not be null.")__		this.startupMode = Preconditions.checkNotNull(startupMode, "Startup mode must not be null.")__		this.specificStartupOffsets = Preconditions.checkNotNull(_			specificStartupOffsets, "Specific offsets must not be null.")__	};creates,a,generic,kafka,link,stream,table,source,param,schema,schema,of,the,produced,table,param,proctime,attribute,field,name,of,the,processing,time,attribute,param,rowtime,attribute,descriptors,descriptor,for,a,rowtime,attribute,param,field,mapping,mapping,for,the,fields,of,the,table,schema,to,fields,of,the,physical,returned,type,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka,param,startup,mode,startup,mode,for,the,contained,consumer,param,specific,startup,offsets,specific,startup,offsets,only,relevant,when,startup,mode,is,link,startup,mode;protected,kafka,table,source,base,table,schema,schema,optional,string,proctime,attribute,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,optional,map,string,string,field,mapping,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,startup,mode,startup,mode,map,kafka,topic,partition,long,specific,startup,offsets,this,schema,preconditions,check,not,null,schema,schema,must,not,be,null,this,proctime,attribute,validate,proctime,attribute,proctime,attribute,this,rowtime,attribute,descriptors,validate,rowtime,attribute,descriptors,rowtime,attribute,descriptors,this,field,mapping,field,mapping,this,topic,preconditions,check,not,null,topic,topic,must,not,be,null,this,properties,preconditions,check,not,null,properties,properties,must,not,be,null,this,deserialization,schema,preconditions,check,not,null,deserialization,schema,deserialization,schema,must,not,be,null,this,startup,mode,preconditions,check,not,null,startup,mode,startup,mode,must,not,be,null,this,specific,startup,offsets,preconditions,check,not,null,specific,startup,offsets,specific,offsets,must,not,be,null
KafkaTableSourceBase -> private List<RowtimeAttributeDescriptor> validateRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors);1539704473;Validates a list of fields to be rowtime attributes.__@param rowtimeAttributeDescriptors The descriptors of the rowtime attributes.;private List<RowtimeAttributeDescriptor> validateRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors) {_		Preconditions.checkNotNull(rowtimeAttributeDescriptors, "List of rowtime attributes must not be null.")__		_		for (RowtimeAttributeDescriptor desc : rowtimeAttributeDescriptors) {_			String rowtimeAttribute = desc.getAttributeName()__			Option<TypeInformation<?>> tpe = schema.getType(rowtimeAttribute)__			if (tpe.isEmpty()) {_				throw new ValidationException("Rowtime attribute '" + rowtimeAttribute + "' is not present in TableSchema.")__			} else if (tpe.get() != Types.SQL_TIMESTAMP()) {_				throw new ValidationException("Rowtime attribute '" + rowtimeAttribute + "' is not of type SQL_TIMESTAMP.")__			}_		}_		return rowtimeAttributeDescriptors__	};validates,a,list,of,fields,to,be,rowtime,attributes,param,rowtime,attribute,descriptors,the,descriptors,of,the,rowtime,attributes;private,list,rowtime,attribute,descriptor,validate,rowtime,attribute,descriptors,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,preconditions,check,not,null,rowtime,attribute,descriptors,list,of,rowtime,attributes,must,not,be,null,for,rowtime,attribute,descriptor,desc,rowtime,attribute,descriptors,string,rowtime,attribute,desc,get,attribute,name,option,type,information,tpe,schema,get,type,rowtime,attribute,if,tpe,is,empty,throw,new,validation,exception,rowtime,attribute,rowtime,attribute,is,not,present,in,table,schema,else,if,tpe,get,types,throw,new,validation,exception,rowtime,attribute,rowtime,attribute,is,not,of,type,return,rowtime,attribute,descriptors
KafkaTableSourceBase -> private List<RowtimeAttributeDescriptor> validateRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors);1540894120;Validates a list of fields to be rowtime attributes.__@param rowtimeAttributeDescriptors The descriptors of the rowtime attributes.;private List<RowtimeAttributeDescriptor> validateRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors) {_		Preconditions.checkNotNull(rowtimeAttributeDescriptors, "List of rowtime attributes must not be null.")__		_		for (RowtimeAttributeDescriptor desc : rowtimeAttributeDescriptors) {_			String rowtimeAttribute = desc.getAttributeName()__			Optional<TypeInformation<?>> tpe = schema.getFieldType(rowtimeAttribute)__			if (!tpe.isPresent()) {_				throw new ValidationException("Rowtime attribute '" + rowtimeAttribute + "' is not present in TableSchema.")__			} else if (tpe.get() != Types.SQL_TIMESTAMP()) {_				throw new ValidationException("Rowtime attribute '" + rowtimeAttribute + "' is not of type SQL_TIMESTAMP.")__			}_		}_		return rowtimeAttributeDescriptors__	};validates,a,list,of,fields,to,be,rowtime,attributes,param,rowtime,attribute,descriptors,the,descriptors,of,the,rowtime,attributes;private,list,rowtime,attribute,descriptor,validate,rowtime,attribute,descriptors,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,preconditions,check,not,null,rowtime,attribute,descriptors,list,of,rowtime,attributes,must,not,be,null,for,rowtime,attribute,descriptor,desc,rowtime,attribute,descriptors,string,rowtime,attribute,desc,get,attribute,name,optional,type,information,tpe,schema,get,field,type,rowtime,attribute,if,tpe,is,present,throw,new,validation,exception,rowtime,attribute,rowtime,attribute,is,not,present,in,table,schema,else,if,tpe,get,types,throw,new,validation,exception,rowtime,attribute,rowtime,attribute,is,not,of,type,return,rowtime,attribute,descriptors
KafkaTableSourceBase -> private List<RowtimeAttributeDescriptor> validateRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors);1543586152;Validates a list of fields to be rowtime attributes.__@param rowtimeAttributeDescriptors The descriptors of the rowtime attributes.;private List<RowtimeAttributeDescriptor> validateRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors) {_		Preconditions.checkNotNull(rowtimeAttributeDescriptors, "List of rowtime attributes must not be null.")__		_		for (RowtimeAttributeDescriptor desc : rowtimeAttributeDescriptors) {_			String rowtimeAttribute = desc.getAttributeName()__			Optional<TypeInformation<?>> tpe = schema.getFieldType(rowtimeAttribute)__			if (!tpe.isPresent()) {_				throw new ValidationException("Rowtime attribute '" + rowtimeAttribute + "' is not present in TableSchema.")__			} else if (tpe.get() != Types.SQL_TIMESTAMP()) {_				throw new ValidationException("Rowtime attribute '" + rowtimeAttribute + "' is not of type SQL_TIMESTAMP.")__			}_		}_		return rowtimeAttributeDescriptors__	};validates,a,list,of,fields,to,be,rowtime,attributes,param,rowtime,attribute,descriptors,the,descriptors,of,the,rowtime,attributes;private,list,rowtime,attribute,descriptor,validate,rowtime,attribute,descriptors,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,preconditions,check,not,null,rowtime,attribute,descriptors,list,of,rowtime,attributes,must,not,be,null,for,rowtime,attribute,descriptor,desc,rowtime,attribute,descriptors,string,rowtime,attribute,desc,get,attribute,name,optional,type,information,tpe,schema,get,field,type,rowtime,attribute,if,tpe,is,present,throw,new,validation,exception,rowtime,attribute,rowtime,attribute,is,not,present,in,table,schema,else,if,tpe,get,types,throw,new,validation,exception,rowtime,attribute,rowtime,attribute,is,not,of,type,return,rowtime,attribute,descriptors
KafkaTableSourceBase -> private List<RowtimeAttributeDescriptor> validateRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors);1549034017;Validates a list of fields to be rowtime attributes.__@param rowtimeAttributeDescriptors The descriptors of the rowtime attributes.;private List<RowtimeAttributeDescriptor> validateRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors) {_		Preconditions.checkNotNull(rowtimeAttributeDescriptors, "List of rowtime attributes must not be null.")__		_		for (RowtimeAttributeDescriptor desc : rowtimeAttributeDescriptors) {_			String rowtimeAttribute = desc.getAttributeName()__			Optional<TypeInformation<?>> tpe = schema.getFieldType(rowtimeAttribute)__			if (!tpe.isPresent()) {_				throw new ValidationException("Rowtime attribute '" + rowtimeAttribute + "' is not present in TableSchema.")__			} else if (tpe.get() != Types.SQL_TIMESTAMP()) {_				throw new ValidationException("Rowtime attribute '" + rowtimeAttribute + "' is not of type SQL_TIMESTAMP.")__			}_		}_		return rowtimeAttributeDescriptors__	};validates,a,list,of,fields,to,be,rowtime,attributes,param,rowtime,attribute,descriptors,the,descriptors,of,the,rowtime,attributes;private,list,rowtime,attribute,descriptor,validate,rowtime,attribute,descriptors,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,preconditions,check,not,null,rowtime,attribute,descriptors,list,of,rowtime,attributes,must,not,be,null,for,rowtime,attribute,descriptor,desc,rowtime,attribute,descriptors,string,rowtime,attribute,desc,get,attribute,name,optional,type,information,tpe,schema,get,field,type,rowtime,attribute,if,tpe,is,present,throw,new,validation,exception,rowtime,attribute,rowtime,attribute,is,not,present,in,table,schema,else,if,tpe,get,types,throw,new,validation,exception,rowtime,attribute,rowtime,attribute,is,not,of,type,return,rowtime,attribute,descriptors
KafkaTableSourceBase -> Builder -> @Deprecated 		public B withKafkaProperties(Properties props);1539704473;Sets the configuration properties for the Kafka consumer.__@param props The configuration properties for the Kafka consumer._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B withKafkaProperties(Properties props) {_			Preconditions.checkNotNull(props, "Properties must not be null.")__			Preconditions.checkArgument(this.kafkaProps == null, "Properties have already been set.")__			this.kafkaProps = props__			return builder()__		};sets,the,configuration,properties,for,the,kafka,consumer,param,props,the,configuration,properties,for,the,kafka,consumer,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,with,kafka,properties,properties,props,preconditions,check,not,null,props,properties,must,not,be,null,preconditions,check,argument,this,kafka,props,null,properties,have,already,been,set,this,kafka,props,props,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B withKafkaProperties(Properties props);1540894120;Sets the configuration properties for the Kafka consumer.__@param props The configuration properties for the Kafka consumer._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B withKafkaProperties(Properties props) {_			Preconditions.checkNotNull(props, "Properties must not be null.")__			Preconditions.checkArgument(this.kafkaProps == null, "Properties have already been set.")__			this.kafkaProps = props__			return builder()__		};sets,the,configuration,properties,for,the,kafka,consumer,param,props,the,configuration,properties,for,the,kafka,consumer,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,with,kafka,properties,properties,props,preconditions,check,not,null,props,properties,must,not,be,null,preconditions,check,argument,this,kafka,props,null,properties,have,already,been,set,this,kafka,props,props,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B withRowtimeAttribute( 				String rowtimeAttribute, 				TimestampExtractor timestampExtractor, 				WatermarkStrategy watermarkStrategy);1539704473;Configures a field of the table to be a rowtime attribute._The configured field must be present in the table schema and of type {@link Types#SQL_TIMESTAMP()}.__@param rowtimeAttribute The name of the rowtime attribute in the table schema._@param timestampExtractor The {@link TimestampExtractor} to extract the rowtime attribute from the physical type._@param watermarkStrategy The {@link WatermarkStrategy} to generate watermarks for the rowtime attribute._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B withRowtimeAttribute(_				String rowtimeAttribute,_				TimestampExtractor timestampExtractor,_				WatermarkStrategy watermarkStrategy) {_			Preconditions.checkNotNull(rowtimeAttribute, "Rowtime attribute must not be null.")__			Preconditions.checkArgument(!rowtimeAttribute.isEmpty(), "Rowtime attribute must not be empty.")__			Preconditions.checkNotNull(timestampExtractor, "Timestamp extractor must not be null.")__			Preconditions.checkNotNull(watermarkStrategy, "Watermark assigner must not be null.")__			Preconditions.checkArgument(this.rowtimeAttributeDescriptor == null,_				"Currently, only one rowtime attribute is supported.")___			this.rowtimeAttributeDescriptor = new RowtimeAttributeDescriptor(_				rowtimeAttribute,_				timestampExtractor,_				watermarkStrategy)__			return builder()__		};configures,a,field,of,the,table,to,be,a,rowtime,attribute,the,configured,field,must,be,present,in,the,table,schema,and,of,type,link,types,param,rowtime,attribute,the,name,of,the,rowtime,attribute,in,the,table,schema,param,timestamp,extractor,the,link,timestamp,extractor,to,extract,the,rowtime,attribute,from,the,physical,type,param,watermark,strategy,the,link,watermark,strategy,to,generate,watermarks,for,the,rowtime,attribute,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,with,rowtime,attribute,string,rowtime,attribute,timestamp,extractor,timestamp,extractor,watermark,strategy,watermark,strategy,preconditions,check,not,null,rowtime,attribute,rowtime,attribute,must,not,be,null,preconditions,check,argument,rowtime,attribute,is,empty,rowtime,attribute,must,not,be,empty,preconditions,check,not,null,timestamp,extractor,timestamp,extractor,must,not,be,null,preconditions,check,not,null,watermark,strategy,watermark,assigner,must,not,be,null,preconditions,check,argument,this,rowtime,attribute,descriptor,null,currently,only,one,rowtime,attribute,is,supported,this,rowtime,attribute,descriptor,new,rowtime,attribute,descriptor,rowtime,attribute,timestamp,extractor,watermark,strategy,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B withRowtimeAttribute( 				String rowtimeAttribute, 				TimestampExtractor timestampExtractor, 				WatermarkStrategy watermarkStrategy);1540894120;Configures a field of the table to be a rowtime attribute._The configured field must be present in the table schema and of type {@link Types#SQL_TIMESTAMP()}.__@param rowtimeAttribute The name of the rowtime attribute in the table schema._@param timestampExtractor The {@link TimestampExtractor} to extract the rowtime attribute from the physical type._@param watermarkStrategy The {@link WatermarkStrategy} to generate watermarks for the rowtime attribute._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B withRowtimeAttribute(_				String rowtimeAttribute,_				TimestampExtractor timestampExtractor,_				WatermarkStrategy watermarkStrategy) {_			Preconditions.checkNotNull(rowtimeAttribute, "Rowtime attribute must not be null.")__			Preconditions.checkArgument(!rowtimeAttribute.isEmpty(), "Rowtime attribute must not be empty.")__			Preconditions.checkNotNull(timestampExtractor, "Timestamp extractor must not be null.")__			Preconditions.checkNotNull(watermarkStrategy, "Watermark assigner must not be null.")__			Preconditions.checkArgument(this.rowtimeAttributeDescriptor == null,_				"Currently, only one rowtime attribute is supported.")___			this.rowtimeAttributeDescriptor = new RowtimeAttributeDescriptor(_				rowtimeAttribute,_				timestampExtractor,_				watermarkStrategy)__			return builder()__		};configures,a,field,of,the,table,to,be,a,rowtime,attribute,the,configured,field,must,be,present,in,the,table,schema,and,of,type,link,types,param,rowtime,attribute,the,name,of,the,rowtime,attribute,in,the,table,schema,param,timestamp,extractor,the,link,timestamp,extractor,to,extract,the,rowtime,attribute,from,the,physical,type,param,watermark,strategy,the,link,watermark,strategy,to,generate,watermarks,for,the,rowtime,attribute,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,with,rowtime,attribute,string,rowtime,attribute,timestamp,extractor,timestamp,extractor,watermark,strategy,watermark,strategy,preconditions,check,not,null,rowtime,attribute,rowtime,attribute,must,not,be,null,preconditions,check,argument,rowtime,attribute,is,empty,rowtime,attribute,must,not,be,empty,preconditions,check,not,null,timestamp,extractor,timestamp,extractor,must,not,be,null,preconditions,check,not,null,watermark,strategy,watermark,assigner,must,not,be,null,preconditions,check,argument,this,rowtime,attribute,descriptor,null,currently,only,one,rowtime,attribute,is,supported,this,rowtime,attribute,descriptor,new,rowtime,attribute,descriptor,rowtime,attribute,timestamp,extractor,watermark,strategy,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		protected TableSchema getTableSchema();1539704473;Returns the configured table schema.__@return the configured table schema._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected TableSchema getTableSchema() {_			return this.schema__		};returns,the,configured,table,schema,return,the,configured,table,schema,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,table,schema,get,table,schema,return,this,schema
KafkaTableSourceBase -> Builder -> @Deprecated 		protected TableSchema getTableSchema();1540894120;Returns the configured table schema.__@return the configured table schema._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected TableSchema getTableSchema() {_			return this.schema__		};returns,the,configured,table,schema,return,the,configured,table,schema,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,table,schema,get,table,schema,return,this,schema
KafkaTableSourceBase -> Builder -> @Deprecated 		public B fromEarliest();1539704473;Configures the TableSource to start reading from the earliest offset for all partitions.__@see FlinkKafkaConsumerBase#setStartFromEarliest()_@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B fromEarliest() {_			this.startupMode = StartupMode.EARLIEST__			this.specificStartupOffsets = null__			return builder()__		};configures,the,table,source,to,start,reading,from,the,earliest,offset,for,all,partitions,see,flink,kafka,consumer,base,set,start,from,earliest,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,from,earliest,this,startup,mode,startup,mode,earliest,this,specific,startup,offsets,null,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B fromEarliest();1540894120;Configures the TableSource to start reading from the earliest offset for all partitions.__@see FlinkKafkaConsumerBase#setStartFromEarliest()_@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B fromEarliest() {_			this.startupMode = StartupMode.EARLIEST__			this.specificStartupOffsets = null__			return builder()__		};configures,the,table,source,to,start,reading,from,the,earliest,offset,for,all,partitions,see,flink,kafka,consumer,base,set,start,from,earliest,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,from,earliest,this,startup,mode,startup,mode,earliest,this,specific,startup,offsets,null,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B fromLatest();1539704473;Configures the TableSource to start reading from the latest offset for all partitions.__@see FlinkKafkaConsumerBase#setStartFromLatest()_@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B fromLatest() {_			this.startupMode = StartupMode.LATEST__			this.specificStartupOffsets = null__			return builder()__		};configures,the,table,source,to,start,reading,from,the,latest,offset,for,all,partitions,see,flink,kafka,consumer,base,set,start,from,latest,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,from,latest,this,startup,mode,startup,mode,latest,this,specific,startup,offsets,null,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B fromLatest();1540894120;Configures the TableSource to start reading from the latest offset for all partitions.__@see FlinkKafkaConsumerBase#setStartFromLatest()_@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B fromLatest() {_			this.startupMode = StartupMode.LATEST__			this.specificStartupOffsets = null__			return builder()__		};configures,the,table,source,to,start,reading,from,the,latest,offset,for,all,partitions,see,flink,kafka,consumer,base,set,start,from,latest,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,from,latest,this,startup,mode,startup,mode,latest,this,specific,startup,offsets,null,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		protected abstract KafkaTableSourceBase build()_;1539704473;Builds the configured {@link KafkaTableSourceBase}._@return The configured {@link KafkaTableSourceBase}._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected abstract KafkaTableSourceBase build()_;builds,the,configured,link,kafka,table,source,base,return,the,configured,link,kafka,table,source,base,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,abstract,kafka,table,source,base,build
KafkaTableSourceBase -> Builder -> @Deprecated 		protected abstract KafkaTableSourceBase build()_;1540894120;Builds the configured {@link KafkaTableSourceBase}._@return The configured {@link KafkaTableSourceBase}._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected abstract KafkaTableSourceBase build()_;builds,the,configured,link,kafka,table,source,base,return,the,configured,link,kafka,table,source,base,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,abstract,kafka,table,source,base,build
KafkaTableSourceBase -> Builder -> @Deprecated 		protected void configureTableSource(T tableSource);1539704473;Configures a TableSource with optional parameters.__@param tableSource The TableSource to configure._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected void configureTableSource(T tableSource) {_			_			tableSource.setProctimeAttribute(proctimeAttribute)__			_			if (rowtimeAttributeDescriptor == null) {_				tableSource.setRowtimeAttributeDescriptors(Collections.emptyList())__			} else {_				tableSource.setRowtimeAttributeDescriptors(Collections.singletonList(rowtimeAttributeDescriptor))__			}_			tableSource.setStartupMode(startupMode)__			switch (startupMode) {_				case EARLIEST:_				case LATEST:_				case GROUP_OFFSETS:_					break__				case SPECIFIC_OFFSETS:_					tableSource.setSpecificStartupOffsets(specificStartupOffsets)__					break__			}_		};configures,a,table,source,with,optional,parameters,param,table,source,the,table,source,to,configure,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,configure,table,source,t,table,source,table,source,set,proctime,attribute,proctime,attribute,if,rowtime,attribute,descriptor,null,table,source,set,rowtime,attribute,descriptors,collections,empty,list,else,table,source,set,rowtime,attribute,descriptors,collections,singleton,list,rowtime,attribute,descriptor,table,source,set,startup,mode,startup,mode,switch,startup,mode,case,earliest,case,latest,case,break,case,table,source,set,specific,startup,offsets,specific,startup,offsets,break
KafkaTableSourceBase -> Builder -> @Deprecated 		protected void configureTableSource(T tableSource);1540894120;Configures a TableSource with optional parameters.__@param tableSource The TableSource to configure._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected void configureTableSource(T tableSource) {_			_			tableSource.setProctimeAttribute(proctimeAttribute)__			_			if (rowtimeAttributeDescriptor == null) {_				tableSource.setRowtimeAttributeDescriptors(Collections.emptyList())__			} else {_				tableSource.setRowtimeAttributeDescriptors(Collections.singletonList(rowtimeAttributeDescriptor))__			}_			tableSource.setStartupMode(startupMode)__			switch (startupMode) {_				case EARLIEST:_				case LATEST:_				case GROUP_OFFSETS:_					break__				case SPECIFIC_OFFSETS:_					tableSource.setSpecificStartupOffsets(specificStartupOffsets)__					break__			}_		};configures,a,table,source,with,optional,parameters,param,table,source,the,table,source,to,configure,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,configure,table,source,t,table,source,table,source,set,proctime,attribute,proctime,attribute,if,rowtime,attribute,descriptor,null,table,source,set,rowtime,attribute,descriptors,collections,empty,list,else,table,source,set,rowtime,attribute,descriptors,collections,singleton,list,rowtime,attribute,descriptor,table,source,set,startup,mode,startup,mode,switch,startup,mode,case,earliest,case,latest,case,break,case,table,source,set,specific,startup,offsets,specific,startup,offsets,break
KafkaTableSourceBase -> Builder -> @Deprecated 		public B withSchema(TableSchema schema);1539704473;Sets the schema of the produced table.__@param schema The schema of the produced table._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B withSchema(TableSchema schema) {_			Preconditions.checkNotNull(schema, "Schema must not be null.")__			Preconditions.checkArgument(this.schema == null, "Schema has already been set.")__			this.schema = schema__			return builder()__		};sets,the,schema,of,the,produced,table,param,schema,the,schema,of,the,produced,table,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,with,schema,table,schema,schema,preconditions,check,not,null,schema,schema,must,not,be,null,preconditions,check,argument,this,schema,null,schema,has,already,been,set,this,schema,schema,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B withSchema(TableSchema schema);1540894120;Sets the schema of the produced table.__@param schema The schema of the produced table._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B withSchema(TableSchema schema) {_			Preconditions.checkNotNull(schema, "Schema must not be null.")__			Preconditions.checkArgument(this.schema == null, "Schema has already been set.")__			this.schema = schema__			return builder()__		};sets,the,schema,of,the,produced,table,param,schema,the,schema,of,the,produced,table,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,with,schema,table,schema,schema,preconditions,check,not,null,schema,schema,must,not,be,null,preconditions,check,argument,this,schema,null,schema,has,already,been,set,this,schema,schema,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		protected Properties getKafkaProps();1539704473;Returns the configured Kafka properties.__@return the configured Kafka properties._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected Properties getKafkaProps() {_			return this.kafkaProps__		};returns,the,configured,kafka,properties,return,the,configured,kafka,properties,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,properties,get,kafka,props,return,this,kafka,props
KafkaTableSourceBase -> Builder -> @Deprecated 		protected Properties getKafkaProps();1540894120;Returns the configured Kafka properties.__@return the configured Kafka properties._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected Properties getKafkaProps() {_			return this.kafkaProps__		};returns,the,configured,kafka,properties,return,the,configured,kafka,properties,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,properties,get,kafka,props,return,this,kafka,props
KafkaTableSourceBase -> private Optional<String> validateProctimeAttribute(Optional<String> proctimeAttribute);1539704473;Validates a field of the schema to be the processing time attribute.__@param proctimeAttribute The name of the field that becomes the processing time field.;private Optional<String> validateProctimeAttribute(Optional<String> proctimeAttribute) {_		return proctimeAttribute.map((attribute) -> {_			_			Option<TypeInformation<?>> tpe = schema.getType(attribute)__			if (tpe.isEmpty()) {_				throw new ValidationException("Processing time attribute '" + attribute + "' is not present in TableSchema.")__			} else if (tpe.get() != Types.SQL_TIMESTAMP()) {_				throw new ValidationException("Processing time attribute '" + attribute + "' is not of type SQL_TIMESTAMP.")__			}_			return attribute__		})__	};validates,a,field,of,the,schema,to,be,the,processing,time,attribute,param,proctime,attribute,the,name,of,the,field,that,becomes,the,processing,time,field;private,optional,string,validate,proctime,attribute,optional,string,proctime,attribute,return,proctime,attribute,map,attribute,option,type,information,tpe,schema,get,type,attribute,if,tpe,is,empty,throw,new,validation,exception,processing,time,attribute,attribute,is,not,present,in,table,schema,else,if,tpe,get,types,throw,new,validation,exception,processing,time,attribute,attribute,is,not,of,type,return,attribute
KafkaTableSourceBase -> private Optional<String> validateProctimeAttribute(Optional<String> proctimeAttribute);1540894120;Validates a field of the schema to be the processing time attribute.__@param proctimeAttribute The name of the field that becomes the processing time field.;private Optional<String> validateProctimeAttribute(Optional<String> proctimeAttribute) {_		return proctimeAttribute.map((attribute) -> {_			_			Optional<TypeInformation<?>> tpe = schema.getFieldType(attribute)__			if (!tpe.isPresent()) {_				throw new ValidationException("Processing time attribute '" + attribute + "' is not present in TableSchema.")__			} else if (tpe.get() != Types.SQL_TIMESTAMP()) {_				throw new ValidationException("Processing time attribute '" + attribute + "' is not of type SQL_TIMESTAMP.")__			}_			return attribute__		})__	};validates,a,field,of,the,schema,to,be,the,processing,time,attribute,param,proctime,attribute,the,name,of,the,field,that,becomes,the,processing,time,field;private,optional,string,validate,proctime,attribute,optional,string,proctime,attribute,return,proctime,attribute,map,attribute,optional,type,information,tpe,schema,get,field,type,attribute,if,tpe,is,present,throw,new,validation,exception,processing,time,attribute,attribute,is,not,present,in,table,schema,else,if,tpe,get,types,throw,new,validation,exception,processing,time,attribute,attribute,is,not,of,type,return,attribute
KafkaTableSourceBase -> private Optional<String> validateProctimeAttribute(Optional<String> proctimeAttribute);1543586152;Validates a field of the schema to be the processing time attribute.__@param proctimeAttribute The name of the field that becomes the processing time field.;private Optional<String> validateProctimeAttribute(Optional<String> proctimeAttribute) {_		return proctimeAttribute.map((attribute) -> {_			_			Optional<TypeInformation<?>> tpe = schema.getFieldType(attribute)__			if (!tpe.isPresent()) {_				throw new ValidationException("Processing time attribute '" + attribute + "' is not present in TableSchema.")__			} else if (tpe.get() != Types.SQL_TIMESTAMP()) {_				throw new ValidationException("Processing time attribute '" + attribute + "' is not of type SQL_TIMESTAMP.")__			}_			return attribute__		})__	};validates,a,field,of,the,schema,to,be,the,processing,time,attribute,param,proctime,attribute,the,name,of,the,field,that,becomes,the,processing,time,field;private,optional,string,validate,proctime,attribute,optional,string,proctime,attribute,return,proctime,attribute,map,attribute,optional,type,information,tpe,schema,get,field,type,attribute,if,tpe,is,present,throw,new,validation,exception,processing,time,attribute,attribute,is,not,present,in,table,schema,else,if,tpe,get,types,throw,new,validation,exception,processing,time,attribute,attribute,is,not,of,type,return,attribute
KafkaTableSourceBase -> private Optional<String> validateProctimeAttribute(Optional<String> proctimeAttribute);1549034017;Validates a field of the schema to be the processing time attribute.__@param proctimeAttribute The name of the field that becomes the processing time field.;private Optional<String> validateProctimeAttribute(Optional<String> proctimeAttribute) {_		return proctimeAttribute.map((attribute) -> {_			_			Optional<TypeInformation<?>> tpe = schema.getFieldType(attribute)__			if (!tpe.isPresent()) {_				throw new ValidationException("Processing time attribute '" + attribute + "' is not present in TableSchema.")__			} else if (tpe.get() != Types.SQL_TIMESTAMP()) {_				throw new ValidationException("Processing time attribute '" + attribute + "' is not of type SQL_TIMESTAMP.")__			}_			return attribute__		})__	};validates,a,field,of,the,schema,to,be,the,processing,time,attribute,param,proctime,attribute,the,name,of,the,field,that,becomes,the,processing,time,field;private,optional,string,validate,proctime,attribute,optional,string,proctime,attribute,return,proctime,attribute,map,attribute,optional,type,information,tpe,schema,get,field,type,attribute,if,tpe,is,present,throw,new,validation,exception,processing,time,attribute,attribute,is,not,present,in,table,schema,else,if,tpe,get,types,throw,new,validation,exception,processing,time,attribute,attribute,is,not,of,type,return,attribute
KafkaTableSourceBase -> @Deprecated 	protected void setRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors);1539704473;Declares a list of fields to be rowtime attributes.__@param rowtimeAttributeDescriptors The descriptors of the rowtime attributes._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_	protected void setRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors) {_		this.rowtimeAttributeDescriptors = validateRowtimeAttributeDescriptors(rowtimeAttributeDescriptors)__	};declares,a,list,of,fields,to,be,rowtime,attributes,param,rowtime,attribute,descriptors,the,descriptors,of,the,rowtime,attributes,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,set,rowtime,attribute,descriptors,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,this,rowtime,attribute,descriptors,validate,rowtime,attribute,descriptors,rowtime,attribute,descriptors
KafkaTableSourceBase -> @Deprecated 	protected void setRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors);1540894120;Declares a list of fields to be rowtime attributes.__@param rowtimeAttributeDescriptors The descriptors of the rowtime attributes._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_	protected void setRowtimeAttributeDescriptors(List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors) {_		this.rowtimeAttributeDescriptors = validateRowtimeAttributeDescriptors(rowtimeAttributeDescriptors)__	};declares,a,list,of,fields,to,be,rowtime,attributes,param,rowtime,attribute,descriptors,the,descriptors,of,the,rowtime,attributes,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,set,rowtime,attribute,descriptors,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,this,rowtime,attribute,descriptors,validate,rowtime,attribute,descriptors,rowtime,attribute,descriptors
KafkaTableSourceBase -> @Override 	public DataStream<Row> getDataStream(StreamExecutionEnvironment env);1539704473;NOTE: This method is for internal use only for defining a TableSource._Do not use it in Table API programs.;@Override_	public DataStream<Row> getDataStream(StreamExecutionEnvironment env) {__		DeserializationSchema<Row> deserializationSchema = getDeserializationSchema()__		_		FlinkKafkaConsumerBase<Row> kafkaConsumer = getKafkaConsumer(topic, properties, deserializationSchema)__		return env.addSource(kafkaConsumer).name(explainSource())__	};note,this,method,is,for,internal,use,only,for,defining,a,table,source,do,not,use,it,in,table,api,programs;override,public,data,stream,row,get,data,stream,stream,execution,environment,env,deserialization,schema,row,deserialization,schema,get,deserialization,schema,flink,kafka,consumer,base,row,kafka,consumer,get,kafka,consumer,topic,properties,deserialization,schema,return,env,add,source,kafka,consumer,name,explain,source
KafkaTableSourceBase -> @Override 	public DataStream<Row> getDataStream(StreamExecutionEnvironment env);1540894120;NOTE: This method is for internal use only for defining a TableSource._Do not use it in Table API programs.;@Override_	public DataStream<Row> getDataStream(StreamExecutionEnvironment env) {__		DeserializationSchema<Row> deserializationSchema = getDeserializationSchema()__		_		FlinkKafkaConsumerBase<Row> kafkaConsumer = getKafkaConsumer(topic, properties, deserializationSchema)__		return env.addSource(kafkaConsumer).name(explainSource())__	};note,this,method,is,for,internal,use,only,for,defining,a,table,source,do,not,use,it,in,table,api,programs;override,public,data,stream,row,get,data,stream,stream,execution,environment,env,deserialization,schema,row,deserialization,schema,get,deserialization,schema,flink,kafka,consumer,base,row,kafka,consumer,get,kafka,consumer,topic,properties,deserialization,schema,return,env,add,source,kafka,consumer,name,explain,source
KafkaTableSourceBase -> @Override 	public DataStream<Row> getDataStream(StreamExecutionEnvironment env);1543586152;NOTE: This method is for internal use only for defining a TableSource._Do not use it in Table API programs.;@Override_	public DataStream<Row> getDataStream(StreamExecutionEnvironment env) {__		DeserializationSchema<Row> deserializationSchema = getDeserializationSchema()__		_		FlinkKafkaConsumerBase<Row> kafkaConsumer = getKafkaConsumer(topic, properties, deserializationSchema)__		return env.addSource(kafkaConsumer).name(explainSource())__	};note,this,method,is,for,internal,use,only,for,defining,a,table,source,do,not,use,it,in,table,api,programs;override,public,data,stream,row,get,data,stream,stream,execution,environment,env,deserialization,schema,row,deserialization,schema,get,deserialization,schema,flink,kafka,consumer,base,row,kafka,consumer,get,kafka,consumer,topic,properties,deserialization,schema,return,env,add,source,kafka,consumer,name,explain,source
KafkaTableSourceBase -> @Override 	public DataStream<Row> getDataStream(StreamExecutionEnvironment env);1549034017;NOTE: This method is for internal use only for defining a TableSource._Do not use it in Table API programs.;@Override_	public DataStream<Row> getDataStream(StreamExecutionEnvironment env) {__		DeserializationSchema<Row> deserializationSchema = getDeserializationSchema()__		_		FlinkKafkaConsumerBase<Row> kafkaConsumer = getKafkaConsumer(topic, properties, deserializationSchema)__		return env.addSource(kafkaConsumer).name(explainSource())__	};note,this,method,is,for,internal,use,only,for,defining,a,table,source,do,not,use,it,in,table,api,programs;override,public,data,stream,row,get,data,stream,stream,execution,environment,env,deserialization,schema,row,deserialization,schema,get,deserialization,schema,flink,kafka,consumer,base,row,kafka,consumer,get,kafka,consumer,topic,properties,deserialization,schema,return,env,add,source,kafka,consumer,name,explain,source
KafkaTableSourceBase -> Builder -> @Deprecated 		public B withKafkaTimestampAsRowtimeAttribute( 				String rowtimeAttribute, 				WatermarkStrategy watermarkStrategy);1539704473;Configures the Kafka timestamp to be a rowtime attribute.__<p>Note: Kafka supports message timestamps only since version 0.10.</p>__@param rowtimeAttribute The name of the rowtime attribute in the table schema._@param watermarkStrategy The {@link WatermarkStrategy} to generate watermarks for the rowtime attribute._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B withKafkaTimestampAsRowtimeAttribute(_				String rowtimeAttribute,_				WatermarkStrategy watermarkStrategy) {__			Preconditions.checkNotNull(rowtimeAttribute, "Rowtime attribute must not be null.")__			Preconditions.checkArgument(!rowtimeAttribute.isEmpty(), "Rowtime attribute must not be empty.")__			Preconditions.checkNotNull(watermarkStrategy, "Watermark assigner must not be null.")__			Preconditions.checkArgument(this.rowtimeAttributeDescriptor == null,_				"Currently, only one rowtime attribute is supported.")__			Preconditions.checkArgument(supportsKafkaTimestamps(), "Kafka timestamps are only supported since Kafka 0.10.")___			this.rowtimeAttributeDescriptor = new RowtimeAttributeDescriptor(_				rowtimeAttribute,_				new StreamRecordTimestamp(),_				watermarkStrategy)__			return builder()__		};configures,the,kafka,timestamp,to,be,a,rowtime,attribute,p,note,kafka,supports,message,timestamps,only,since,version,0,10,p,param,rowtime,attribute,the,name,of,the,rowtime,attribute,in,the,table,schema,param,watermark,strategy,the,link,watermark,strategy,to,generate,watermarks,for,the,rowtime,attribute,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,with,kafka,timestamp,as,rowtime,attribute,string,rowtime,attribute,watermark,strategy,watermark,strategy,preconditions,check,not,null,rowtime,attribute,rowtime,attribute,must,not,be,null,preconditions,check,argument,rowtime,attribute,is,empty,rowtime,attribute,must,not,be,empty,preconditions,check,not,null,watermark,strategy,watermark,assigner,must,not,be,null,preconditions,check,argument,this,rowtime,attribute,descriptor,null,currently,only,one,rowtime,attribute,is,supported,preconditions,check,argument,supports,kafka,timestamps,kafka,timestamps,are,only,supported,since,kafka,0,10,this,rowtime,attribute,descriptor,new,rowtime,attribute,descriptor,rowtime,attribute,new,stream,record,timestamp,watermark,strategy,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B withKafkaTimestampAsRowtimeAttribute( 				String rowtimeAttribute, 				WatermarkStrategy watermarkStrategy);1540894120;Configures the Kafka timestamp to be a rowtime attribute.__<p>Note: Kafka supports message timestamps only since version 0.10.</p>__@param rowtimeAttribute The name of the rowtime attribute in the table schema._@param watermarkStrategy The {@link WatermarkStrategy} to generate watermarks for the rowtime attribute._@return The builder._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B withKafkaTimestampAsRowtimeAttribute(_				String rowtimeAttribute,_				WatermarkStrategy watermarkStrategy) {__			Preconditions.checkNotNull(rowtimeAttribute, "Rowtime attribute must not be null.")__			Preconditions.checkArgument(!rowtimeAttribute.isEmpty(), "Rowtime attribute must not be empty.")__			Preconditions.checkNotNull(watermarkStrategy, "Watermark assigner must not be null.")__			Preconditions.checkArgument(this.rowtimeAttributeDescriptor == null,_				"Currently, only one rowtime attribute is supported.")__			Preconditions.checkArgument(supportsKafkaTimestamps(), "Kafka timestamps are only supported since Kafka 0.10.")___			this.rowtimeAttributeDescriptor = new RowtimeAttributeDescriptor(_				rowtimeAttribute,_				new StreamRecordTimestamp(),_				watermarkStrategy)__			return builder()__		};configures,the,kafka,timestamp,to,be,a,rowtime,attribute,p,note,kafka,supports,message,timestamps,only,since,version,0,10,p,param,rowtime,attribute,the,name,of,the,rowtime,attribute,in,the,table,schema,param,watermark,strategy,the,link,watermark,strategy,to,generate,watermarks,for,the,rowtime,attribute,return,the,builder,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,with,kafka,timestamp,as,rowtime,attribute,string,rowtime,attribute,watermark,strategy,watermark,strategy,preconditions,check,not,null,rowtime,attribute,rowtime,attribute,must,not,be,null,preconditions,check,argument,rowtime,attribute,is,empty,rowtime,attribute,must,not,be,empty,preconditions,check,not,null,watermark,strategy,watermark,assigner,must,not,be,null,preconditions,check,argument,this,rowtime,attribute,descriptor,null,currently,only,one,rowtime,attribute,is,supported,preconditions,check,argument,supports,kafka,timestamps,kafka,timestamps,are,only,supported,since,kafka,0,10,this,rowtime,attribute,descriptor,new,rowtime,attribute,descriptor,rowtime,attribute,new,stream,record,timestamp,watermark,strategy,return,builder
KafkaTableSourceBase -> public DeserializationSchema<Row> getDeserializationSchema();1539704473;Returns the deserialization schema.__@return The deserialization schema;public DeserializationSchema<Row> getDeserializationSchema(){_		return deserializationSchema__	};returns,the,deserialization,schema,return,the,deserialization,schema;public,deserialization,schema,row,get,deserialization,schema,return,deserialization,schema
KafkaTableSourceBase -> public DeserializationSchema<Row> getDeserializationSchema();1540894120;Returns the deserialization schema.__@return The deserialization schema;public DeserializationSchema<Row> getDeserializationSchema(){_		return deserializationSchema__	};returns,the,deserialization,schema,return,the,deserialization,schema;public,deserialization,schema,row,get,deserialization,schema,return,deserialization,schema
KafkaTableSourceBase -> public DeserializationSchema<Row> getDeserializationSchema();1543586152;Returns the deserialization schema.__@return The deserialization schema;public DeserializationSchema<Row> getDeserializationSchema(){_		return deserializationSchema__	};returns,the,deserialization,schema,return,the,deserialization,schema;public,deserialization,schema,row,get,deserialization,schema,return,deserialization,schema
KafkaTableSourceBase -> public DeserializationSchema<Row> getDeserializationSchema();1549034017;Returns the deserialization schema.__@return The deserialization schema;public DeserializationSchema<Row> getDeserializationSchema(){_		return deserializationSchema__	};returns,the,deserialization,schema,return,the,deserialization,schema;public,deserialization,schema,row,get,deserialization,schema,return,deserialization,schema
KafkaTableSourceBase -> @Deprecated 	protected void setSpecificStartupOffsets(Map<KafkaTopicPartition, Long> specificStartupOffsets);1539704473;Sets the startup offsets of the TableSource_ only relevant when the startup mode is {@link StartupMode#SPECIFIC_OFFSETS}.__@param specificStartupOffsets The startup offsets for different partitions._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_	protected void setSpecificStartupOffsets(Map<KafkaTopicPartition, Long> specificStartupOffsets) {_		this.specificStartupOffsets = Preconditions.checkNotNull(specificStartupOffsets)__	};sets,the,startup,offsets,of,the,table,source,only,relevant,when,the,startup,mode,is,link,startup,mode,param,specific,startup,offsets,the,startup,offsets,for,different,partitions,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,set,specific,startup,offsets,map,kafka,topic,partition,long,specific,startup,offsets,this,specific,startup,offsets,preconditions,check,not,null,specific,startup,offsets
KafkaTableSourceBase -> @Deprecated 	protected void setSpecificStartupOffsets(Map<KafkaTopicPartition, Long> specificStartupOffsets);1540894120;Sets the startup offsets of the TableSource_ only relevant when the startup mode is {@link StartupMode#SPECIFIC_OFFSETS}.__@param specificStartupOffsets The startup offsets for different partitions._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_	protected void setSpecificStartupOffsets(Map<KafkaTopicPartition, Long> specificStartupOffsets) {_		this.specificStartupOffsets = Preconditions.checkNotNull(specificStartupOffsets)__	};sets,the,startup,offsets,of,the,table,source,only,relevant,when,the,startup,mode,is,link,startup,mode,param,specific,startup,offsets,the,startup,offsets,for,different,partitions,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,set,specific,startup,offsets,map,kafka,topic,partition,long,specific,startup,offsets,this,specific,startup,offsets,preconditions,check,not,null,specific,startup,offsets
KafkaTableSourceBase -> protected abstract FlinkKafkaConsumerBase<Row> createKafkaConsumer( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema)_;1539704473;Creates a version-specific Kafka consumer.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@return The version-specific Kafka consumer;protected abstract FlinkKafkaConsumerBase<Row> createKafkaConsumer(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema)_;creates,a,version,specific,kafka,consumer,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,return,the,version,specific,kafka,consumer;protected,abstract,flink,kafka,consumer,base,row,create,kafka,consumer,string,topic,properties,properties,deserialization,schema,row,deserialization,schema
KafkaTableSourceBase -> protected abstract FlinkKafkaConsumerBase<Row> createKafkaConsumer( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema)_;1540894120;Creates a version-specific Kafka consumer.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@return The version-specific Kafka consumer;protected abstract FlinkKafkaConsumerBase<Row> createKafkaConsumer(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema)_;creates,a,version,specific,kafka,consumer,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,return,the,version,specific,kafka,consumer;protected,abstract,flink,kafka,consumer,base,row,create,kafka,consumer,string,topic,properties,properties,deserialization,schema,row,deserialization,schema
KafkaTableSourceBase -> protected abstract FlinkKafkaConsumerBase<Row> createKafkaConsumer( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema)_;1543586152;Creates a version-specific Kafka consumer.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@return The version-specific Kafka consumer;protected abstract FlinkKafkaConsumerBase<Row> createKafkaConsumer(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema)_;creates,a,version,specific,kafka,consumer,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,return,the,version,specific,kafka,consumer;protected,abstract,flink,kafka,consumer,base,row,create,kafka,consumer,string,topic,properties,properties,deserialization,schema,row,deserialization,schema
KafkaTableSourceBase -> protected abstract FlinkKafkaConsumerBase<Row> createKafkaConsumer( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema)_;1549034017;Creates a version-specific Kafka consumer.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@return The version-specific Kafka consumer;protected abstract FlinkKafkaConsumerBase<Row> createKafkaConsumer(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema)_;creates,a,version,specific,kafka,consumer,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,return,the,version,specific,kafka,consumer;protected,abstract,flink,kafka,consumer,base,row,create,kafka,consumer,string,topic,properties,properties,deserialization,schema,row,deserialization,schema
KafkaTableSourceBase -> Builder -> @Deprecated 		protected abstract boolean supportsKafkaTimestamps()_;1539704473;True if the KafkaSource supports Kafka timestamps, false otherwise.__@return True if the KafkaSource supports Kafka timestamps, false otherwise._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected abstract boolean supportsKafkaTimestamps()_;true,if,the,kafka,source,supports,kafka,timestamps,false,otherwise,return,true,if,the,kafka,source,supports,kafka,timestamps,false,otherwise,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,abstract,boolean,supports,kafka,timestamps
KafkaTableSourceBase -> Builder -> @Deprecated 		protected abstract boolean supportsKafkaTimestamps()_;1540894120;True if the KafkaSource supports Kafka timestamps, false otherwise.__@return True if the KafkaSource supports Kafka timestamps, false otherwise._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		protected abstract boolean supportsKafkaTimestamps()_;true,if,the,kafka,source,supports,kafka,timestamps,false,otherwise,return,true,if,the,kafka,source,supports,kafka,timestamps,false,otherwise,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,abstract,boolean,supports,kafka,timestamps
KafkaTableSourceBase -> Builder -> @Deprecated 		public B fromSpecificOffsets(Map<KafkaTopicPartition, Long> specificStartupOffsets);1539704473;Configures the TableSource to start reading partitions from specific offsets, set independently for each partition.__@param specificStartupOffsets the specified offsets for partitions_@see FlinkKafkaConsumerBase#setStartFromSpecificOffsets(Map)_@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B fromSpecificOffsets(Map<KafkaTopicPartition, Long> specificStartupOffsets) {_			this.startupMode = StartupMode.SPECIFIC_OFFSETS__			this.specificStartupOffsets = Preconditions.checkNotNull(specificStartupOffsets)__			return builder()__		};configures,the,table,source,to,start,reading,partitions,from,specific,offsets,set,independently,for,each,partition,param,specific,startup,offsets,the,specified,offsets,for,partitions,see,flink,kafka,consumer,base,set,start,from,specific,offsets,map,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,from,specific,offsets,map,kafka,topic,partition,long,specific,startup,offsets,this,startup,mode,startup,mode,this,specific,startup,offsets,preconditions,check,not,null,specific,startup,offsets,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B fromSpecificOffsets(Map<KafkaTopicPartition, Long> specificStartupOffsets);1540894120;Configures the TableSource to start reading partitions from specific offsets, set independently for each partition.__@param specificStartupOffsets the specified offsets for partitions_@see FlinkKafkaConsumerBase#setStartFromSpecificOffsets(Map)_@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B fromSpecificOffsets(Map<KafkaTopicPartition, Long> specificStartupOffsets) {_			this.startupMode = StartupMode.SPECIFIC_OFFSETS__			this.specificStartupOffsets = Preconditions.checkNotNull(specificStartupOffsets)__			return builder()__		};configures,the,table,source,to,start,reading,partitions,from,specific,offsets,set,independently,for,each,partition,param,specific,startup,offsets,the,specified,offsets,for,partitions,see,flink,kafka,consumer,base,set,start,from,specific,offsets,map,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,from,specific,offsets,map,kafka,topic,partition,long,specific,startup,offsets,this,startup,mode,startup,mode,this,specific,startup,offsets,preconditions,check,not,null,specific,startup,offsets,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B fromGroupOffsets();1539704473;Configures the TableSource to start reading from any committed group offsets found in Zookeeper / Kafka brokers.__@see FlinkKafkaConsumerBase#setStartFromGroupOffsets()_@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B fromGroupOffsets() {_			this.startupMode = StartupMode.GROUP_OFFSETS__			this.specificStartupOffsets = null__			return builder()__		};configures,the,table,source,to,start,reading,from,any,committed,group,offsets,found,in,zookeeper,kafka,brokers,see,flink,kafka,consumer,base,set,start,from,group,offsets,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,from,group,offsets,this,startup,mode,startup,mode,this,specific,startup,offsets,null,return,builder
KafkaTableSourceBase -> Builder -> @Deprecated 		public B fromGroupOffsets();1540894120;Configures the TableSource to start reading from any committed group offsets found in Zookeeper / Kafka brokers.__@see FlinkKafkaConsumerBase#setStartFromGroupOffsets()_@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_		public B fromGroupOffsets() {_			this.startupMode = StartupMode.GROUP_OFFSETS__			this.specificStartupOffsets = null__			return builder()__		};configures,the,table,source,to,start,reading,from,any,committed,group,offsets,found,in,zookeeper,kafka,brokers,see,flink,kafka,consumer,base,set,start,from,group,offsets,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,public,b,from,group,offsets,this,startup,mode,startup,mode,this,specific,startup,offsets,null,return,builder
KafkaTableSourceBase -> @Deprecated 	protected void setStartupMode(StartupMode startupMode);1539704473;Sets the startup mode of the TableSource.__@param startupMode The startup mode._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_	protected void setStartupMode(StartupMode startupMode) {_		this.startupMode = Preconditions.checkNotNull(startupMode)__	};sets,the,startup,mode,of,the,table,source,param,startup,mode,the,startup,mode,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,set,startup,mode,startup,mode,startup,mode,this,startup,mode,preconditions,check,not,null,startup,mode
KafkaTableSourceBase -> @Deprecated 	protected void setStartupMode(StartupMode startupMode);1540894120;Sets the startup mode of the TableSource.__@param startupMode The startup mode._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_	protected void setStartupMode(StartupMode startupMode) {_		this.startupMode = Preconditions.checkNotNull(startupMode)__	};sets,the,startup,mode,of,the,table,source,param,startup,mode,the,startup,mode,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,set,startup,mode,startup,mode,startup,mode,this,startup,mode,preconditions,check,not,null,startup,mode
KafkaTableSourceBase -> @Deprecated 	protected void setProctimeAttribute(String proctimeAttribute);1539704473;Declares a field of the schema to be the processing time attribute.__@param proctimeAttribute The name of the field that becomes the processing time field._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_	protected void setProctimeAttribute(String proctimeAttribute) {_		this.proctimeAttribute = validateProctimeAttribute(Optional.ofNullable(proctimeAttribute))__	};declares,a,field,of,the,schema,to,be,the,processing,time,attribute,param,proctime,attribute,the,name,of,the,field,that,becomes,the,processing,time,field,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,set,proctime,attribute,string,proctime,attribute,this,proctime,attribute,validate,proctime,attribute,optional,of,nullable,proctime,attribute
KafkaTableSourceBase -> @Deprecated 	protected void setProctimeAttribute(String proctimeAttribute);1540894120;Declares a field of the schema to be the processing time attribute.__@param proctimeAttribute The name of the field that becomes the processing time field._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_	protected void setProctimeAttribute(String proctimeAttribute) {_		this.proctimeAttribute = validateProctimeAttribute(Optional.ofNullable(proctimeAttribute))__	};declares,a,field,of,the,schema,to,be,the,processing,time,attribute,param,proctime,attribute,the,name,of,the,field,that,becomes,the,processing,time,field,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,set,proctime,attribute,string,proctime,attribute,this,proctime,attribute,validate,proctime,attribute,optional,of,nullable,proctime,attribute
KafkaTableSourceBase -> protected KafkaTableSourceBase( 			TableSchema schema, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema);1539704473;Creates a generic Kafka {@link StreamTableSource}.__@param schema                Schema of the produced table._@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema for decoding records from Kafka.;protected KafkaTableSourceBase(_			TableSchema schema,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema) {_		this(_			schema,_			Optional.empty(),_			Collections.emptyList(),_			Optional.empty(),_			topic, properties,_			deserializationSchema,_			StartupMode.GROUP_OFFSETS,_			Collections.emptyMap())__	};creates,a,generic,kafka,link,stream,table,source,param,schema,schema,of,the,produced,table,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka;protected,kafka,table,source,base,table,schema,schema,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,this,schema,optional,empty,collections,empty,list,optional,empty,topic,properties,deserialization,schema,startup,mode,collections,empty,map
KafkaTableSourceBase -> protected KafkaTableSourceBase( 			TableSchema schema, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema);1540894120;Creates a generic Kafka {@link StreamTableSource}.__@param schema                Schema of the produced table._@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema for decoding records from Kafka.;protected KafkaTableSourceBase(_			TableSchema schema,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema) {_		this(_			schema,_			Optional.empty(),_			Collections.emptyList(),_			Optional.empty(),_			topic, properties,_			deserializationSchema,_			StartupMode.GROUP_OFFSETS,_			Collections.emptyMap())__	};creates,a,generic,kafka,link,stream,table,source,param,schema,schema,of,the,produced,table,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka;protected,kafka,table,source,base,table,schema,schema,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,this,schema,optional,empty,collections,empty,list,optional,empty,topic,properties,deserialization,schema,startup,mode,collections,empty,map
KafkaTableSourceBase -> protected KafkaTableSourceBase( 			TableSchema schema, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema);1543586152;Creates a generic Kafka {@link StreamTableSource}.__@param schema                Schema of the produced table._@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema for decoding records from Kafka.;protected KafkaTableSourceBase(_			TableSchema schema,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema) {_		this(_			schema,_			Optional.empty(),_			Collections.emptyList(),_			Optional.empty(),_			topic, properties,_			deserializationSchema,_			StartupMode.GROUP_OFFSETS,_			Collections.emptyMap())__	};creates,a,generic,kafka,link,stream,table,source,param,schema,schema,of,the,produced,table,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka;protected,kafka,table,source,base,table,schema,schema,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,this,schema,optional,empty,collections,empty,list,optional,empty,topic,properties,deserialization,schema,startup,mode,collections,empty,map
KafkaTableSourceBase -> protected KafkaTableSourceBase( 			TableSchema schema, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema);1549034017;Creates a generic Kafka {@link StreamTableSource}.__@param schema                Schema of the produced table._@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema for decoding records from Kafka.;protected KafkaTableSourceBase(_			TableSchema schema,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema) {_		this(_			schema,_			Optional.empty(),_			Collections.emptyList(),_			Optional.empty(),_			topic, properties,_			deserializationSchema,_			StartupMode.GROUP_OFFSETS,_			Collections.emptyMap())__	};creates,a,generic,kafka,link,stream,table,source,param,schema,schema,of,the,produced,table,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka;protected,kafka,table,source,base,table,schema,schema,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,this,schema,optional,empty,collections,empty,list,optional,empty,topic,properties,deserialization,schema,startup,mode,collections,empty,map
KafkaTableSourceBase -> protected FlinkKafkaConsumerBase<Row> getKafkaConsumer( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema);1539704473;Returns a version-specific Kafka consumer with the start position configured.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@return The version-specific Kafka consumer;protected FlinkKafkaConsumerBase<Row> getKafkaConsumer(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema) {_		FlinkKafkaConsumerBase<Row> kafkaConsumer =_				createKafkaConsumer(topic, properties, deserializationSchema)__		switch (startupMode) {_			case EARLIEST:_				kafkaConsumer.setStartFromEarliest()__				break__			case LATEST:_				kafkaConsumer.setStartFromLatest()__				break__			case GROUP_OFFSETS:_				kafkaConsumer.setStartFromGroupOffsets()__				break__			case SPECIFIC_OFFSETS:_				kafkaConsumer.setStartFromSpecificOffsets(specificStartupOffsets)__				break__		}_		return kafkaConsumer__	};returns,a,version,specific,kafka,consumer,with,the,start,position,configured,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,return,the,version,specific,kafka,consumer;protected,flink,kafka,consumer,base,row,get,kafka,consumer,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,flink,kafka,consumer,base,row,kafka,consumer,create,kafka,consumer,topic,properties,deserialization,schema,switch,startup,mode,case,earliest,kafka,consumer,set,start,from,earliest,break,case,latest,kafka,consumer,set,start,from,latest,break,case,kafka,consumer,set,start,from,group,offsets,break,case,kafka,consumer,set,start,from,specific,offsets,specific,startup,offsets,break,return,kafka,consumer
KafkaTableSourceBase -> protected FlinkKafkaConsumerBase<Row> getKafkaConsumer( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema);1540894120;Returns a version-specific Kafka consumer with the start position configured.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@return The version-specific Kafka consumer;protected FlinkKafkaConsumerBase<Row> getKafkaConsumer(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema) {_		FlinkKafkaConsumerBase<Row> kafkaConsumer =_				createKafkaConsumer(topic, properties, deserializationSchema)__		switch (startupMode) {_			case EARLIEST:_				kafkaConsumer.setStartFromEarliest()__				break__			case LATEST:_				kafkaConsumer.setStartFromLatest()__				break__			case GROUP_OFFSETS:_				kafkaConsumer.setStartFromGroupOffsets()__				break__			case SPECIFIC_OFFSETS:_				kafkaConsumer.setStartFromSpecificOffsets(specificStartupOffsets)__				break__		}_		return kafkaConsumer__	};returns,a,version,specific,kafka,consumer,with,the,start,position,configured,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,return,the,version,specific,kafka,consumer;protected,flink,kafka,consumer,base,row,get,kafka,consumer,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,flink,kafka,consumer,base,row,kafka,consumer,create,kafka,consumer,topic,properties,deserialization,schema,switch,startup,mode,case,earliest,kafka,consumer,set,start,from,earliest,break,case,latest,kafka,consumer,set,start,from,latest,break,case,kafka,consumer,set,start,from,group,offsets,break,case,kafka,consumer,set,start,from,specific,offsets,specific,startup,offsets,break,return,kafka,consumer
KafkaTableSourceBase -> protected FlinkKafkaConsumerBase<Row> getKafkaConsumer( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema);1543586152;Returns a version-specific Kafka consumer with the start position configured.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@return The version-specific Kafka consumer;protected FlinkKafkaConsumerBase<Row> getKafkaConsumer(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema) {_		FlinkKafkaConsumerBase<Row> kafkaConsumer =_				createKafkaConsumer(topic, properties, deserializationSchema)__		switch (startupMode) {_			case EARLIEST:_				kafkaConsumer.setStartFromEarliest()__				break__			case LATEST:_				kafkaConsumer.setStartFromLatest()__				break__			case GROUP_OFFSETS:_				kafkaConsumer.setStartFromGroupOffsets()__				break__			case SPECIFIC_OFFSETS:_				kafkaConsumer.setStartFromSpecificOffsets(specificStartupOffsets)__				break__		}_		return kafkaConsumer__	};returns,a,version,specific,kafka,consumer,with,the,start,position,configured,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,return,the,version,specific,kafka,consumer;protected,flink,kafka,consumer,base,row,get,kafka,consumer,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,flink,kafka,consumer,base,row,kafka,consumer,create,kafka,consumer,topic,properties,deserialization,schema,switch,startup,mode,case,earliest,kafka,consumer,set,start,from,earliest,break,case,latest,kafka,consumer,set,start,from,latest,break,case,kafka,consumer,set,start,from,group,offsets,break,case,kafka,consumer,set,start,from,specific,offsets,specific,startup,offsets,break,return,kafka,consumer
KafkaTableSourceBase -> protected FlinkKafkaConsumerBase<Row> getKafkaConsumer( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema);1549034017;Returns a version-specific Kafka consumer with the start position configured.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@return The version-specific Kafka consumer;protected FlinkKafkaConsumerBase<Row> getKafkaConsumer(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema) {_		FlinkKafkaConsumerBase<Row> kafkaConsumer =_				createKafkaConsumer(topic, properties, deserializationSchema)__		switch (startupMode) {_			case EARLIEST:_				kafkaConsumer.setStartFromEarliest()__				break__			case LATEST:_				kafkaConsumer.setStartFromLatest()__				break__			case GROUP_OFFSETS:_				kafkaConsumer.setStartFromGroupOffsets()__				break__			case SPECIFIC_OFFSETS:_				kafkaConsumer.setStartFromSpecificOffsets(specificStartupOffsets)__				break__		}_		return kafkaConsumer__	};returns,a,version,specific,kafka,consumer,with,the,start,position,configured,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,return,the,version,specific,kafka,consumer;protected,flink,kafka,consumer,base,row,get,kafka,consumer,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,flink,kafka,consumer,base,row,kafka,consumer,create,kafka,consumer,topic,properties,deserialization,schema,switch,startup,mode,case,earliest,kafka,consumer,set,start,from,earliest,break,case,latest,kafka,consumer,set,start,from,latest,break,case,kafka,consumer,set,start,from,group,offsets,break,case,kafka,consumer,set,start,from,specific,offsets,specific,startup,offsets,break,return,kafka,consumer
KafkaTableSourceBase -> @Deprecated 	protected void setFieldMapping(Map<String, String> fieldMapping);1539704473;Mapping for the fields of the table schema to fields of the physical returned type.__@param fieldMapping The mapping from table schema fields to format schema fields._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_	protected void setFieldMapping(Map<String, String> fieldMapping) {_		this.fieldMapping = Optional.ofNullable(fieldMapping)__	};mapping,for,the,fields,of,the,table,schema,to,fields,of,the,physical,returned,type,param,field,mapping,the,mapping,from,table,schema,fields,to,format,schema,fields,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,set,field,mapping,map,string,string,field,mapping,this,field,mapping,optional,of,nullable,field,mapping
KafkaTableSourceBase -> @Deprecated 	protected void setFieldMapping(Map<String, String> fieldMapping);1540894120;Mapping for the fields of the table schema to fields of the physical returned type.__@param fieldMapping The mapping from table schema fields to format schema fields._@deprecated Use table descriptors instead of implementation-specific builders.;@Deprecated_	protected void setFieldMapping(Map<String, String> fieldMapping) {_		this.fieldMapping = Optional.ofNullable(fieldMapping)__	};mapping,for,the,fields,of,the,table,schema,to,fields,of,the,physical,returned,type,param,field,mapping,the,mapping,from,table,schema,fields,to,format,schema,fields,deprecated,use,table,descriptors,instead,of,implementation,specific,builders;deprecated,protected,void,set,field,mapping,map,string,string,field,mapping,this,field,mapping,optional,of,nullable,field,mapping
