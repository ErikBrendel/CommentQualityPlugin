# id;timestamp;commentText;codeText;commentWords;codeWords
KafkaTableSourceSinkFactoryTestBase -> @Test 	public void testTableSink();1532362648;This test can be unified with the corresponding source test once we have fixed FLINK-9870.;@Test_	public void testTableSink() {_		__		final TableSchema schema = TableSchema.builder()_			.field(FRUIT_NAME, Types.STRING())_			.field(COUNT, Types.DECIMAL())_			.field(EVENT_TIME, Types.SQL_TIMESTAMP())_			.build()___		final KafkaTableSink expected = getExpectedKafkaTableSink(_			schema,_			TOPIC,_			KAFKA_PROPERTIES,_			new FlinkFixedPartitioner<>(), _			new TestSerializationSchema(schema.toRowType()))___		__		final TestTableDescriptor testDesc = new TestTableDescriptor(_				new Kafka()_					.version(getKafkaVersion())_					.topic(TOPIC)_					.properties(KAFKA_PROPERTIES)_					.startFromSpecificOffsets(OFFSETS)) _			.withFormat(new TestTableFormat())_			.withSchema(_				new Schema()_					.field(FRUIT_NAME, Types.STRING())_					.field(COUNT, Types.DECIMAL())_					.field(EVENT_TIME, Types.SQL_TIMESTAMP()))_			.inAppendMode()___		final Map<String, String> propertiesMap = DescriptorProperties.toJavaMap(testDesc)__		final TableSink<?> actualSink = TableFactoryService.find(StreamTableSinkFactory.class, propertiesMap)_			.createStreamTableSink(propertiesMap)___		assertEquals(expected, actualSink)___		_		final KafkaTableSink actualKafkaSink = (KafkaTableSink) actualSink__		final DataStreamMock streamMock = new DataStreamMock(new StreamExecutionEnvironmentMock(), schema.toRowType())__		actualKafkaSink.emitDataStream(streamMock)__		assertTrue(getExpectedFlinkKafkaProducer().isAssignableFrom(streamMock.sinkFunction.getClass()))__	};this,test,can,be,unified,with,the,corresponding,source,test,once,we,have,fixed,flink,9870;test,public,void,test,table,sink,final,table,schema,schema,table,schema,builder,field,types,string,field,count,types,decimal,field,types,build,final,kafka,table,sink,expected,get,expected,kafka,table,sink,schema,topic,new,flink,fixed,partitioner,new,test,serialization,schema,schema,to,row,type,final,test,table,descriptor,test,desc,new,test,table,descriptor,new,kafka,version,get,kafka,version,topic,topic,properties,start,from,specific,offsets,offsets,with,format,new,test,table,format,with,schema,new,schema,field,types,string,field,count,types,decimal,field,types,in,append,mode,final,map,string,string,properties,map,descriptor,properties,to,java,map,test,desc,final,table,sink,actual,sink,table,factory,service,find,stream,table,sink,factory,class,properties,map,create,stream,table,sink,properties,map,assert,equals,expected,actual,sink,final,kafka,table,sink,actual,kafka,sink,kafka,table,sink,actual,sink,final,data,stream,mock,stream,mock,new,data,stream,mock,new,stream,execution,environment,mock,schema,to,row,type,actual,kafka,sink,emit,data,stream,stream,mock,assert,true,get,expected,flink,kafka,producer,is,assignable,from,stream,mock,sink,function,get,class
KafkaTableSourceSinkFactoryTestBase -> @Test 	public void testTableSink();1532498467;This test can be unified with the corresponding source test once we have fixed FLINK-9870.;@Test_	public void testTableSink() {_		__		final TableSchema schema = TableSchema.builder()_			.field(FRUIT_NAME, Types.STRING())_			.field(COUNT, Types.DECIMAL())_			.field(EVENT_TIME, Types.SQL_TIMESTAMP())_			.build()___		final KafkaTableSink expected = getExpectedKafkaTableSink(_			schema,_			TOPIC,_			KAFKA_PROPERTIES,_			new FlinkFixedPartitioner<>(), _			new TestSerializationSchema(schema.toRowType()))___		__		final TestTableDescriptor testDesc = new TestTableDescriptor(_				new Kafka()_					.version(getKafkaVersion())_					.topic(TOPIC)_					.properties(KAFKA_PROPERTIES)_					.startFromSpecificOffsets(OFFSETS)) _			.withFormat(new TestTableFormat())_			.withSchema(_				new Schema()_					.field(FRUIT_NAME, Types.STRING())_					.field(COUNT, Types.DECIMAL())_					.field(EVENT_TIME, Types.SQL_TIMESTAMP()))_			.inAppendMode()___		final Map<String, String> propertiesMap = DescriptorProperties.toJavaMap(testDesc)__		final TableSink<?> actualSink = TableFactoryService.find(StreamTableSinkFactory.class, propertiesMap)_			.createStreamTableSink(propertiesMap)___		assertEquals(expected, actualSink)___		_		final KafkaTableSink actualKafkaSink = (KafkaTableSink) actualSink__		final DataStreamMock streamMock = new DataStreamMock(new StreamExecutionEnvironmentMock(), schema.toRowType())__		actualKafkaSink.emitDataStream(streamMock)__		assertTrue(getExpectedFlinkKafkaProducer().isAssignableFrom(streamMock.sinkFunction.getClass()))__	};this,test,can,be,unified,with,the,corresponding,source,test,once,we,have,fixed,flink,9870;test,public,void,test,table,sink,final,table,schema,schema,table,schema,builder,field,types,string,field,count,types,decimal,field,types,build,final,kafka,table,sink,expected,get,expected,kafka,table,sink,schema,topic,new,flink,fixed,partitioner,new,test,serialization,schema,schema,to,row,type,final,test,table,descriptor,test,desc,new,test,table,descriptor,new,kafka,version,get,kafka,version,topic,topic,properties,start,from,specific,offsets,offsets,with,format,new,test,table,format,with,schema,new,schema,field,types,string,field,count,types,decimal,field,types,in,append,mode,final,map,string,string,properties,map,descriptor,properties,to,java,map,test,desc,final,table,sink,actual,sink,table,factory,service,find,stream,table,sink,factory,class,properties,map,create,stream,table,sink,properties,map,assert,equals,expected,actual,sink,final,kafka,table,sink,actual,kafka,sink,kafka,table,sink,actual,sink,final,data,stream,mock,stream,mock,new,data,stream,mock,new,stream,execution,environment,mock,schema,to,row,type,actual,kafka,sink,emit,data,stream,stream,mock,assert,true,get,expected,flink,kafka,producer,is,assignable,from,stream,mock,sink,function,get,class
KafkaTableSourceSinkFactoryTestBase -> @Test 	public void testTableSink();1533133404;This test can be unified with the corresponding source test once we have fixed FLINK-9870.;@Test_	public void testTableSink() {_		__		final TableSchema schema = TableSchema.builder()_			.field(FRUIT_NAME, Types.STRING())_			.field(COUNT, Types.DECIMAL())_			.field(EVENT_TIME, Types.SQL_TIMESTAMP())_			.build()___		final KafkaTableSink expected = getExpectedKafkaTableSink(_			schema,_			TOPIC,_			KAFKA_PROPERTIES,_			Optional.of(new FlinkFixedPartitioner<>()),_			new TestSerializationSchema(schema.toRowType()))___		__		final TestTableDescriptor testDesc = new TestTableDescriptor(_				new Kafka()_					.version(getKafkaVersion())_					.topic(TOPIC)_					.properties(KAFKA_PROPERTIES)_					.sinkPartitionerFixed()_					.startFromSpecificOffsets(OFFSETS)) _			.withFormat(new TestTableFormat())_			.withSchema(_				new Schema()_					.field(FRUIT_NAME, Types.STRING())_					.field(COUNT, Types.DECIMAL())_					.field(EVENT_TIME, Types.SQL_TIMESTAMP()))_			.inAppendMode()___		final Map<String, String> propertiesMap = DescriptorProperties.toJavaMap(testDesc)__		final TableSink<?> actualSink = TableFactoryService.find(StreamTableSinkFactory.class, propertiesMap)_			.createStreamTableSink(propertiesMap)___		assertEquals(expected, actualSink)___		_		final KafkaTableSink actualKafkaSink = (KafkaTableSink) actualSink__		final DataStreamMock streamMock = new DataStreamMock(new StreamExecutionEnvironmentMock(), schema.toRowType())__		actualKafkaSink.emitDataStream(streamMock)__		assertTrue(getExpectedFlinkKafkaProducer().isAssignableFrom(streamMock.sinkFunction.getClass()))__	};this,test,can,be,unified,with,the,corresponding,source,test,once,we,have,fixed,flink,9870;test,public,void,test,table,sink,final,table,schema,schema,table,schema,builder,field,types,string,field,count,types,decimal,field,types,build,final,kafka,table,sink,expected,get,expected,kafka,table,sink,schema,topic,optional,of,new,flink,fixed,partitioner,new,test,serialization,schema,schema,to,row,type,final,test,table,descriptor,test,desc,new,test,table,descriptor,new,kafka,version,get,kafka,version,topic,topic,properties,sink,partitioner,fixed,start,from,specific,offsets,offsets,with,format,new,test,table,format,with,schema,new,schema,field,types,string,field,count,types,decimal,field,types,in,append,mode,final,map,string,string,properties,map,descriptor,properties,to,java,map,test,desc,final,table,sink,actual,sink,table,factory,service,find,stream,table,sink,factory,class,properties,map,create,stream,table,sink,properties,map,assert,equals,expected,actual,sink,final,kafka,table,sink,actual,kafka,sink,kafka,table,sink,actual,sink,final,data,stream,mock,stream,mock,new,data,stream,mock,new,stream,execution,environment,mock,schema,to,row,type,actual,kafka,sink,emit,data,stream,stream,mock,assert,true,get,expected,flink,kafka,producer,is,assignable,from,stream,mock,sink,function,get,class
KafkaTableSourceSinkFactoryTestBase -> @Test 	public void testTableSink();1539704473;This test can be unified with the corresponding source test once we have fixed FLINK-9870.;@Test_	public void testTableSink() {_		__		final TableSchema schema = TableSchema.builder()_			.field(FRUIT_NAME, Types.STRING())_			.field(COUNT, Types.DECIMAL())_			.field(EVENT_TIME, Types.SQL_TIMESTAMP())_			.build()___		final KafkaTableSinkBase expected = getExpectedKafkaTableSink(_			schema,_			TOPIC,_			KAFKA_PROPERTIES,_			Optional.of(new FlinkFixedPartitioner<>()),_			new TestSerializationSchema(schema.toRowType()))___		__		final TestTableDescriptor testDesc = new TestTableDescriptor(_				new Kafka()_					.version(getKafkaVersion())_					.topic(TOPIC)_					.properties(KAFKA_PROPERTIES)_					.sinkPartitionerFixed()_					.startFromSpecificOffsets(OFFSETS)) _			.withFormat(new TestTableFormat())_			.withSchema(_				new Schema()_					.field(FRUIT_NAME, Types.STRING())_					.field(COUNT, Types.DECIMAL())_					.field(EVENT_TIME, Types.SQL_TIMESTAMP()))_			.inAppendMode()___		final Map<String, String> propertiesMap = DescriptorProperties.toJavaMap(testDesc)__		final TableSink<?> actualSink = TableFactoryService.find(StreamTableSinkFactory.class, propertiesMap)_			.createStreamTableSink(propertiesMap)___		assertEquals(expected, actualSink)___		_		final KafkaTableSinkBase actualKafkaSink = (KafkaTableSinkBase) actualSink__		final DataStreamMock streamMock = new DataStreamMock(new StreamExecutionEnvironmentMock(), schema.toRowType())__		actualKafkaSink.emitDataStream(streamMock)__		assertTrue(getExpectedFlinkKafkaProducer().isAssignableFrom(streamMock.sinkFunction.getClass()))__	};this,test,can,be,unified,with,the,corresponding,source,test,once,we,have,fixed,flink,9870;test,public,void,test,table,sink,final,table,schema,schema,table,schema,builder,field,types,string,field,count,types,decimal,field,types,build,final,kafka,table,sink,base,expected,get,expected,kafka,table,sink,schema,topic,optional,of,new,flink,fixed,partitioner,new,test,serialization,schema,schema,to,row,type,final,test,table,descriptor,test,desc,new,test,table,descriptor,new,kafka,version,get,kafka,version,topic,topic,properties,sink,partitioner,fixed,start,from,specific,offsets,offsets,with,format,new,test,table,format,with,schema,new,schema,field,types,string,field,count,types,decimal,field,types,in,append,mode,final,map,string,string,properties,map,descriptor,properties,to,java,map,test,desc,final,table,sink,actual,sink,table,factory,service,find,stream,table,sink,factory,class,properties,map,create,stream,table,sink,properties,map,assert,equals,expected,actual,sink,final,kafka,table,sink,base,actual,kafka,sink,kafka,table,sink,base,actual,sink,final,data,stream,mock,stream,mock,new,data,stream,mock,new,stream,execution,environment,mock,schema,to,row,type,actual,kafka,sink,emit,data,stream,stream,mock,assert,true,get,expected,flink,kafka,producer,is,assignable,from,stream,mock,sink,function,get,class
KafkaTableSourceSinkFactoryTestBase -> @Test 	public void testTableSink();1540894120;This test can be unified with the corresponding source test once we have fixed FLINK-9870.;@Test_	public void testTableSink() {_		__		final TableSchema schema = TableSchema.builder()_			.field(FRUIT_NAME, Types.STRING())_			.field(COUNT, Types.DECIMAL())_			.field(EVENT_TIME, Types.SQL_TIMESTAMP())_			.build()___		final KafkaTableSinkBase expected = getExpectedKafkaTableSink(_			schema,_			TOPIC,_			KAFKA_PROPERTIES,_			Optional.of(new FlinkFixedPartitioner<>()),_			new TestSerializationSchema(schema.toRowType()))___		__		final TestTableDescriptor testDesc = new TestTableDescriptor(_				new Kafka()_					.version(getKafkaVersion())_					.topic(TOPIC)_					.properties(KAFKA_PROPERTIES)_					.sinkPartitionerFixed()_					.startFromSpecificOffsets(OFFSETS)) _			.withFormat(new TestTableFormat())_			.withSchema(_				new Schema()_					.field(FRUIT_NAME, Types.STRING())_					.field(COUNT, Types.DECIMAL())_					.field(EVENT_TIME, Types.SQL_TIMESTAMP()))_			.inAppendMode()___		final Map<String, String> propertiesMap = JavaScalaConversionUtil.toJavaMap(testDesc)__		final TableSink<?> actualSink = TableFactoryService.find(StreamTableSinkFactory.class, propertiesMap)_			.createStreamTableSink(propertiesMap)___		assertEquals(expected, actualSink)___		_		final KafkaTableSinkBase actualKafkaSink = (KafkaTableSinkBase) actualSink__		final DataStreamMock streamMock = new DataStreamMock(new StreamExecutionEnvironmentMock(), schema.toRowType())__		actualKafkaSink.emitDataStream(streamMock)__		assertTrue(getExpectedFlinkKafkaProducer().isAssignableFrom(streamMock.sinkFunction.getClass()))__	};this,test,can,be,unified,with,the,corresponding,source,test,once,we,have,fixed,flink,9870;test,public,void,test,table,sink,final,table,schema,schema,table,schema,builder,field,types,string,field,count,types,decimal,field,types,build,final,kafka,table,sink,base,expected,get,expected,kafka,table,sink,schema,topic,optional,of,new,flink,fixed,partitioner,new,test,serialization,schema,schema,to,row,type,final,test,table,descriptor,test,desc,new,test,table,descriptor,new,kafka,version,get,kafka,version,topic,topic,properties,sink,partitioner,fixed,start,from,specific,offsets,offsets,with,format,new,test,table,format,with,schema,new,schema,field,types,string,field,count,types,decimal,field,types,in,append,mode,final,map,string,string,properties,map,java,scala,conversion,util,to,java,map,test,desc,final,table,sink,actual,sink,table,factory,service,find,stream,table,sink,factory,class,properties,map,create,stream,table,sink,properties,map,assert,equals,expected,actual,sink,final,kafka,table,sink,base,actual,kafka,sink,kafka,table,sink,base,actual,sink,final,data,stream,mock,stream,mock,new,data,stream,mock,new,stream,execution,environment,mock,schema,to,row,type,actual,kafka,sink,emit,data,stream,stream,mock,assert,true,get,expected,flink,kafka,producer,is,assignable,from,stream,mock,sink,function,get,class
KafkaTableSourceSinkFactoryTestBase -> @Test 	public void testTableSink();1540894120;This test can be unified with the corresponding source test once we have fixed FLINK-9870.;@Test_	public void testTableSink() {_		__		final TableSchema schema = TableSchema.builder()_			.field(FRUIT_NAME, Types.STRING())_			.field(COUNT, Types.DECIMAL())_			.field(EVENT_TIME, Types.SQL_TIMESTAMP())_			.build()___		final KafkaTableSinkBase expected = getExpectedKafkaTableSink(_			schema,_			TOPIC,_			KAFKA_PROPERTIES,_			Optional.of(new FlinkFixedPartitioner<>()),_			new TestSerializationSchema(schema.toRowType()))___		__		final TestTableDescriptor testDesc = new TestTableDescriptor(_				new Kafka()_					.version(getKafkaVersion())_					.topic(TOPIC)_					.properties(KAFKA_PROPERTIES)_					.sinkPartitionerFixed()_					.startFromSpecificOffsets(OFFSETS)) _			.withFormat(new TestTableFormat())_			.withSchema(_				new Schema()_					.field(FRUIT_NAME, Types.STRING())_					.field(COUNT, Types.DECIMAL())_					.field(EVENT_TIME, Types.SQL_TIMESTAMP()))_			.inAppendMode()___		final Map<String, String> propertiesMap = testDesc.toProperties()__		final TableSink<?> actualSink = TableFactoryService.find(StreamTableSinkFactory.class, propertiesMap)_			.createStreamTableSink(propertiesMap)___		assertEquals(expected, actualSink)___		_		final KafkaTableSinkBase actualKafkaSink = (KafkaTableSinkBase) actualSink__		final DataStreamMock streamMock = new DataStreamMock(new StreamExecutionEnvironmentMock(), schema.toRowType())__		actualKafkaSink.emitDataStream(streamMock)__		assertTrue(getExpectedFlinkKafkaProducer().isAssignableFrom(streamMock.sinkFunction.getClass()))__	};this,test,can,be,unified,with,the,corresponding,source,test,once,we,have,fixed,flink,9870;test,public,void,test,table,sink,final,table,schema,schema,table,schema,builder,field,types,string,field,count,types,decimal,field,types,build,final,kafka,table,sink,base,expected,get,expected,kafka,table,sink,schema,topic,optional,of,new,flink,fixed,partitioner,new,test,serialization,schema,schema,to,row,type,final,test,table,descriptor,test,desc,new,test,table,descriptor,new,kafka,version,get,kafka,version,topic,topic,properties,sink,partitioner,fixed,start,from,specific,offsets,offsets,with,format,new,test,table,format,with,schema,new,schema,field,types,string,field,count,types,decimal,field,types,in,append,mode,final,map,string,string,properties,map,test,desc,to,properties,final,table,sink,actual,sink,table,factory,service,find,stream,table,sink,factory,class,properties,map,create,stream,table,sink,properties,map,assert,equals,expected,actual,sink,final,kafka,table,sink,base,actual,kafka,sink,kafka,table,sink,base,actual,sink,final,data,stream,mock,stream,mock,new,data,stream,mock,new,stream,execution,environment,mock,schema,to,row,type,actual,kafka,sink,emit,data,stream,stream,mock,assert,true,get,expected,flink,kafka,producer,is,assignable,from,stream,mock,sink,function,get,class
