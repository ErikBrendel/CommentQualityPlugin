# id;timestamp;commentText;codeText;commentWords;codeWords
Kafka010TableSource -> public Kafka010TableSource( 			TableSchema schema, 			Optional<String> proctimeAttribute, 			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors, 			Optional<Map<String, String>> fieldMapping, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			StartupMode startupMode, 			Map<KafkaTopicPartition, Long> specificStartupOffsets);1531641088;Creates a Kafka 0.10 {@link StreamTableSource}.__@param schema                      Schema of the produced table._@param proctimeAttribute           Field name of the processing time attribute._@param rowtimeAttributeDescriptors Descriptor for a rowtime attribute_@param fieldMapping                Mapping for the fields of the table schema to_fields of the physical returned type._@param topic                       Kafka topic to consume._@param properties                  Properties for the Kafka consumer._@param deserializationSchema       Deserialization schema for decoding records from Kafka._@param startupMode                 Startup mode for the contained consumer._@param specificStartupOffsets      Specific startup offsets_ only relevant when startup_mode is {@link StartupMode#SPECIFIC_OFFSETS}.;public Kafka010TableSource(_			TableSchema schema,_			Optional<String> proctimeAttribute,_			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors,_			Optional<Map<String, String>> fieldMapping,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			StartupMode startupMode,_			Map<KafkaTopicPartition, Long> specificStartupOffsets) {__		super(_			schema,_			proctimeAttribute,_			rowtimeAttributeDescriptors,_			fieldMapping,_			topic,_			properties,_			deserializationSchema,_			startupMode,_			specificStartupOffsets)__	};creates,a,kafka,0,10,link,stream,table,source,param,schema,schema,of,the,produced,table,param,proctime,attribute,field,name,of,the,processing,time,attribute,param,rowtime,attribute,descriptors,descriptor,for,a,rowtime,attribute,param,field,mapping,mapping,for,the,fields,of,the,table,schema,to,fields,of,the,physical,returned,type,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka,param,startup,mode,startup,mode,for,the,contained,consumer,param,specific,startup,offsets,specific,startup,offsets,only,relevant,when,startup,mode,is,link,startup,mode;public,kafka010table,source,table,schema,schema,optional,string,proctime,attribute,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,optional,map,string,string,field,mapping,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,startup,mode,startup,mode,map,kafka,topic,partition,long,specific,startup,offsets,super,schema,proctime,attribute,rowtime,attribute,descriptors,field,mapping,topic,properties,deserialization,schema,startup,mode,specific,startup,offsets
Kafka010TableSource -> public Kafka010TableSource( 			TableSchema schema, 			Optional<String> proctimeAttribute, 			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors, 			Optional<Map<String, String>> fieldMapping, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			StartupMode startupMode, 			Map<KafkaTopicPartition, Long> specificStartupOffsets);1539704473;Creates a Kafka 0.10 {@link StreamTableSource}.__@param schema                      Schema of the produced table._@param proctimeAttribute           Field name of the processing time attribute._@param rowtimeAttributeDescriptors Descriptor for a rowtime attribute_@param fieldMapping                Mapping for the fields of the table schema to_fields of the physical returned type._@param topic                       Kafka topic to consume._@param properties                  Properties for the Kafka consumer._@param deserializationSchema       Deserialization schema for decoding records from Kafka._@param startupMode                 Startup mode for the contained consumer._@param specificStartupOffsets      Specific startup offsets_ only relevant when startup_mode is {@link StartupMode#SPECIFIC_OFFSETS}.;public Kafka010TableSource(_			TableSchema schema,_			Optional<String> proctimeAttribute,_			List<RowtimeAttributeDescriptor> rowtimeAttributeDescriptors,_			Optional<Map<String, String>> fieldMapping,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			StartupMode startupMode,_			Map<KafkaTopicPartition, Long> specificStartupOffsets) {__		super(_			schema,_			proctimeAttribute,_			rowtimeAttributeDescriptors,_			fieldMapping,_			topic,_			properties,_			deserializationSchema,_			startupMode,_			specificStartupOffsets)__	};creates,a,kafka,0,10,link,stream,table,source,param,schema,schema,of,the,produced,table,param,proctime,attribute,field,name,of,the,processing,time,attribute,param,rowtime,attribute,descriptors,descriptor,for,a,rowtime,attribute,param,field,mapping,mapping,for,the,fields,of,the,table,schema,to,fields,of,the,physical,returned,type,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka,param,startup,mode,startup,mode,for,the,contained,consumer,param,specific,startup,offsets,specific,startup,offsets,only,relevant,when,startup,mode,is,link,startup,mode;public,kafka010table,source,table,schema,schema,optional,string,proctime,attribute,list,rowtime,attribute,descriptor,rowtime,attribute,descriptors,optional,map,string,string,field,mapping,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,startup,mode,startup,mode,map,kafka,topic,partition,long,specific,startup,offsets,super,schema,proctime,attribute,rowtime,attribute,descriptors,field,mapping,topic,properties,deserialization,schema,startup,mode,specific,startup,offsets
Kafka010TableSource -> public Kafka010TableSource( 			TableSchema schema, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema);1531641088;Creates a Kafka 0.10 {@link StreamTableSource}.__@param schema                Schema of the produced table._@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema for decoding records from Kafka.;public Kafka010TableSource(_			TableSchema schema,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema) {__		super(schema, topic, properties, deserializationSchema)__	};creates,a,kafka,0,10,link,stream,table,source,param,schema,schema,of,the,produced,table,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka;public,kafka010table,source,table,schema,schema,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,super,schema,topic,properties,deserialization,schema
Kafka010TableSource -> public Kafka010TableSource( 			TableSchema schema, 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema);1539704473;Creates a Kafka 0.10 {@link StreamTableSource}.__@param schema                Schema of the produced table._@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema for decoding records from Kafka.;public Kafka010TableSource(_			TableSchema schema,_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema) {__		super(schema, topic, properties, deserializationSchema)__	};creates,a,kafka,0,10,link,stream,table,source,param,schema,schema,of,the,produced,table,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,for,decoding,records,from,kafka;public,kafka010table,source,table,schema,schema,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,super,schema,topic,properties,deserialization,schema
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			String[] fieldNames, 			TypeInformation<?>[] fieldTypes);1480685315;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param fieldNames            Row field names._@param fieldTypes            Row field types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			String[] fieldNames,_			TypeInformation<?>[] fieldTypes) {__		super(topic, properties, deserializationSchema, fieldNames, fieldTypes)__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,field,names,row,field,names,param,field,types,row,field,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,string,field,names,type,information,field,types,super,topic,properties,deserialization,schema,field,names,field,types
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			String[] fieldNames, 			TypeInformation<?>[] fieldTypes);1481798200;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param fieldNames            Row field names._@param fieldTypes            Row field types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			String[] fieldNames,_			TypeInformation<?>[] fieldTypes) {__		super(topic, properties, deserializationSchema, fieldNames, fieldTypes)__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,field,names,row,field,names,param,field,types,row,field,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,string,field,names,type,information,field,types,super,topic,properties,deserialization,schema,field,names,field,types
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			String[] fieldNames, 			TypeInformation<?>[] fieldTypes);1481902880;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param fieldNames            Row field names._@param fieldTypes            Row field types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			String[] fieldNames,_			TypeInformation<?>[] fieldTypes) {__		super(topic, properties, deserializationSchema, fieldNames, fieldTypes)__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,field,names,row,field,names,param,field,types,row,field,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,string,field,names,type,information,field,types,super,topic,properties,deserialization,schema,field,names,field,types
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			TableSchema schema, 			TypeInformation<Row> typeInfo);1509492038;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param typeInfo              Type information describing the result type. The field names are used_to parse the JSON file and so are the types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			TableSchema schema,_			TypeInformation<Row> typeInfo) {__		super(topic, properties, schema, typeInfo)___		this.deserializationSchema = deserializationSchema__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,type,info,type,information,describing,the,result,type,the,field,names,are,used,to,parse,the,json,file,and,so,are,the,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,table,schema,schema,type,information,row,type,info,super,topic,properties,schema,type,info,this,deserialization,schema,deserialization,schema
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			TableSchema schema, 			TypeInformation<Row> typeInfo);1509723634;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param typeInfo              Type information describing the result type. The field names are used_to parse the JSON file and so are the types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			TableSchema schema,_			TypeInformation<Row> typeInfo) {__		super(topic, properties, schema, typeInfo)___		this.deserializationSchema = deserializationSchema__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,type,info,type,information,describing,the,result,type,the,field,names,are,used,to,parse,the,json,file,and,so,are,the,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,table,schema,schema,type,information,row,type,info,super,topic,properties,schema,type,info,this,deserialization,schema,deserialization,schema
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			TableSchema schema, 			TypeInformation<Row> typeInfo);1511444954;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param typeInfo              Type information describing the result type. The field names are used_to parse the JSON file and so are the types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			TableSchema schema,_			TypeInformation<Row> typeInfo) {__		super(topic, properties, schema, typeInfo)___		this.deserializationSchema = deserializationSchema__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,type,info,type,information,describing,the,result,type,the,field,names,are,used,to,parse,the,json,file,and,so,are,the,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,table,schema,schema,type,information,row,type,info,super,topic,properties,schema,type,info,this,deserialization,schema,deserialization,schema
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			TableSchema schema, 			TypeInformation<Row> typeInfo);1515757409;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param typeInfo              Type information describing the result type. The field names are used_to parse the JSON file and so are the types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			TableSchema schema,_			TypeInformation<Row> typeInfo) {__		super(topic, properties, schema, typeInfo)___		this.deserializationSchema = deserializationSchema__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,type,info,type,information,describing,the,result,type,the,field,names,are,used,to,parse,the,json,file,and,so,are,the,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,table,schema,schema,type,information,row,type,info,super,topic,properties,schema,type,info,this,deserialization,schema,deserialization,schema
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			String[] fieldNames, 			Class<?>[] fieldTypes);1480685315;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param fieldNames            Row field names._@param fieldTypes            Row field types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			String[] fieldNames,_			Class<?>[] fieldTypes) {__		super(topic, properties, deserializationSchema, fieldNames, fieldTypes)__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,field,names,row,field,names,param,field,types,row,field,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,string,field,names,class,field,types,super,topic,properties,deserialization,schema,field,names,field,types
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			String[] fieldNames, 			Class<?>[] fieldTypes);1481798200;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param fieldNames            Row field names._@param fieldTypes            Row field types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			String[] fieldNames,_			Class<?>[] fieldTypes) {__		super(topic, properties, deserializationSchema, fieldNames, fieldTypes)__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,field,names,row,field,names,param,field,types,row,field,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,string,field,names,class,field,types,super,topic,properties,deserialization,schema,field,names,field,types
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			String[] fieldNames, 			Class<?>[] fieldTypes);1481902880;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param fieldNames            Row field names._@param fieldTypes            Row field types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			String[] fieldNames,_			Class<?>[] fieldTypes) {__		super(topic, properties, deserializationSchema, fieldNames, fieldTypes)__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,field,names,row,field,names,param,field,types,row,field,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,string,field,names,class,field,types,super,topic,properties,deserialization,schema,field,names,field,types
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			TypeInformation<Row> typeInfo);1493217721;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param typeInfo              Type information describing the result type. The field names are used_to parse the JSON file and so are the types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			TypeInformation<Row> typeInfo) {__		super(topic, properties, deserializationSchema, typeInfo)__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,type,info,type,information,describing,the,result,type,the,field,names,are,used,to,parse,the,json,file,and,so,are,the,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,type,information,row,type,info,super,topic,properties,deserialization,schema,type,info
Kafka010TableSource -> public Kafka010TableSource( 			String topic, 			Properties properties, 			DeserializationSchema<Row> deserializationSchema, 			TypeInformation<Row> typeInfo);1495923077;Creates a Kafka 0.10 {@link StreamTableSource}.__@param topic                 Kafka topic to consume._@param properties            Properties for the Kafka consumer._@param deserializationSchema Deserialization schema to use for Kafka records._@param typeInfo              Type information describing the result type. The field names are used_to parse the JSON file and so are the types.;public Kafka010TableSource(_			String topic,_			Properties properties,_			DeserializationSchema<Row> deserializationSchema,_			TypeInformation<Row> typeInfo) {__		super(topic, properties, deserializationSchema, typeInfo)__	};creates,a,kafka,0,10,link,stream,table,source,param,topic,kafka,topic,to,consume,param,properties,properties,for,the,kafka,consumer,param,deserialization,schema,deserialization,schema,to,use,for,kafka,records,param,type,info,type,information,describing,the,result,type,the,field,names,are,used,to,parse,the,json,file,and,so,are,the,types;public,kafka010table,source,string,topic,properties,properties,deserialization,schema,row,deserialization,schema,type,information,row,type,info,super,topic,properties,deserialization,schema,type,info
