# id;timestamp;commentText;codeText;commentWords;codeWords
JDBCOutputFormat -> @Override 	public void close() throws IOException;1480685315;Executes prepared statement and closes all resources of this instance.__@throws IOException Thrown, if the input could not be closed properly.;@Override_	public void close() throws IOException {_		try {_			if (upload != null) {_				upload.executeBatch()__				upload.close()__			}_		} catch (SQLException se) {_			LOG.info("Inputformat couldn't be closed - " + se.getMessage())__		} finally {_			upload = null__			batchCount = 0__		}_		_		try {_			if (dbConn != null) {_				dbConn.close()__			}_		} catch (SQLException se) {_			LOG.info("Inputformat couldn't be closed - " + se.getMessage())__		} finally {_			dbConn = null__		}_	};executes,prepared,statement,and,closes,all,resources,of,this,instance,throws,ioexception,thrown,if,the,input,could,not,be,closed,properly;override,public,void,close,throws,ioexception,try,if,upload,null,upload,execute,batch,upload,close,catch,sqlexception,se,log,info,inputformat,couldn,t,be,closed,se,get,message,finally,upload,null,batch,count,0,try,if,db,conn,null,db,conn,close,catch,sqlexception,se,log,info,inputformat,couldn,t,be,closed,se,get,message,finally,db,conn,null
JDBCOutputFormat -> @Override 	public void close() throws IOException;1481798200;Executes prepared statement and closes all resources of this instance.__@throws IOException Thrown, if the input could not be closed properly.;@Override_	public void close() throws IOException {_		try {_			if (upload != null) {_				upload.executeBatch()__				upload.close()__			}_		} catch (SQLException se) {_			LOG.info("Inputformat couldn't be closed - " + se.getMessage())__		} finally {_			upload = null__			batchCount = 0__		}_		_		try {_			if (dbConn != null) {_				dbConn.close()__			}_		} catch (SQLException se) {_			LOG.info("Inputformat couldn't be closed - " + se.getMessage())__		} finally {_			dbConn = null__		}_	};executes,prepared,statement,and,closes,all,resources,of,this,instance,throws,ioexception,thrown,if,the,input,could,not,be,closed,properly;override,public,void,close,throws,ioexception,try,if,upload,null,upload,execute,batch,upload,close,catch,sqlexception,se,log,info,inputformat,couldn,t,be,closed,se,get,message,finally,upload,null,batch,count,0,try,if,db,conn,null,db,conn,close,catch,sqlexception,se,log,info,inputformat,couldn,t,be,closed,se,get,message,finally,db,conn,null
JDBCOutputFormat -> @Override 	public void close() throws IOException;1495923068;Executes prepared statement and closes all resources of this instance.__@throws IOException Thrown, if the input could not be closed properly.;@Override_	public void close() throws IOException {_		try {_			if (upload != null) {_				upload.executeBatch()__				upload.close()__			}_		} catch (SQLException se) {_			LOG.info("Inputformat couldn't be closed - " + se.getMessage())__		} finally {_			upload = null__			batchCount = 0__		}__		try {_			if (dbConn != null) {_				dbConn.close()__			}_		} catch (SQLException se) {_			LOG.info("Inputformat couldn't be closed - " + se.getMessage())__		} finally {_			dbConn = null__		}_	};executes,prepared,statement,and,closes,all,resources,of,this,instance,throws,ioexception,thrown,if,the,input,could,not,be,closed,properly;override,public,void,close,throws,ioexception,try,if,upload,null,upload,execute,batch,upload,close,catch,sqlexception,se,log,info,inputformat,couldn,t,be,closed,se,get,message,finally,upload,null,batch,count,0,try,if,db,conn,null,db,conn,close,catch,sqlexception,se,log,info,inputformat,couldn,t,be,closed,se,get,message,finally,db,conn,null
JDBCOutputFormat -> @Override 	public void close() throws IOException;1502115829;Executes prepared statement and closes all resources of this instance.__@throws IOException Thrown, if the input could not be closed properly.;@Override_	public void close() throws IOException {_		if (upload != null) {_			_			try {_				upload.executeBatch()__			} catch (SQLException e) {_				throw new RuntimeException("Execution of JDBC statement failed.", e)__			}_			_			try {_				upload.close()__			} catch (SQLException e) {_				LOG.info("JDBC statement could not be closed: " + e.getMessage())__			} finally {_				upload = null__			}_		}_		batchCount = 0___		if (dbConn != null) {_			try {_				dbConn.close()__			} catch (SQLException se) {_				LOG.info("JDBC connection could not be closed: " + se.getMessage())__			} finally {_				dbConn = null__			}_		}_	};executes,prepared,statement,and,closes,all,resources,of,this,instance,throws,ioexception,thrown,if,the,input,could,not,be,closed,properly;override,public,void,close,throws,ioexception,if,upload,null,try,upload,execute,batch,catch,sqlexception,e,throw,new,runtime,exception,execution,of,jdbc,statement,failed,e,try,upload,close,catch,sqlexception,e,log,info,jdbc,statement,could,not,be,closed,e,get,message,finally,upload,null,batch,count,0,if,db,conn,null,try,db,conn,close,catch,sqlexception,se,log,info,jdbc,connection,could,not,be,closed,se,get,message,finally,db,conn,null
JDBCOutputFormat -> @Override 	public void close() throws IOException;1502465360;Executes prepared statement and closes all resources of this instance.__@throws IOException Thrown, if the input could not be closed properly.;@Override_	public void close() throws IOException {_		if (upload != null) {_			flush()__			_			try {_				upload.close()__			} catch (SQLException e) {_				LOG.info("JDBC statement could not be closed: " + e.getMessage())__			} finally {_				upload = null__			}_		}__		if (dbConn != null) {_			try {_				dbConn.close()__			} catch (SQLException se) {_				LOG.info("JDBC connection could not be closed: " + se.getMessage())__			} finally {_				dbConn = null__			}_		}_	};executes,prepared,statement,and,closes,all,resources,of,this,instance,throws,ioexception,thrown,if,the,input,could,not,be,closed,properly;override,public,void,close,throws,ioexception,if,upload,null,flush,try,upload,close,catch,sqlexception,e,log,info,jdbc,statement,could,not,be,closed,e,get,message,finally,upload,null,if,db,conn,null,try,db,conn,close,catch,sqlexception,se,log,info,jdbc,connection,could,not,be,closed,se,get,message,finally,db,conn,null
JDBCOutputFormat -> @Override 	public void close() throws IOException;1517943538;Executes prepared statement and closes all resources of this instance.__@throws IOException Thrown, if the input could not be closed properly.;@Override_	public void close() throws IOException {_		if (upload != null) {_			flush()__			_			try {_				upload.close()__			} catch (SQLException e) {_				LOG.info("JDBC statement could not be closed: " + e.getMessage())__			} finally {_				upload = null__			}_		}__		if (dbConn != null) {_			try {_				dbConn.close()__			} catch (SQLException se) {_				LOG.info("JDBC connection could not be closed: " + se.getMessage())__			} finally {_				dbConn = null__			}_		}_	};executes,prepared,statement,and,closes,all,resources,of,this,instance,throws,ioexception,thrown,if,the,input,could,not,be,closed,properly;override,public,void,close,throws,ioexception,if,upload,null,flush,try,upload,close,catch,sqlexception,e,log,info,jdbc,statement,could,not,be,closed,e,get,message,finally,upload,null,if,db,conn,null,try,db,conn,close,catch,sqlexception,se,log,info,jdbc,connection,could,not,be,closed,se,get,message,finally,db,conn,null
JDBCOutputFormat -> JDBCOutputFormatBuilder -> public JDBCOutputFormat finish();1480685315;Finalizes the configuration and checks validity.__@return Configured JDBCOutputFormat;public JDBCOutputFormat finish() {_			if (format.username == null) {_				LOG.info("Username was not supplied separately.")__			}_			if (format.password == null) {_				LOG.info("Password was not supplied separately.")__			}_			if (format.dbURL == null) {_				throw new IllegalArgumentException("No dababase URL supplied.")__			}_			if (format.query == null) {_				throw new IllegalArgumentException("No query suplied")__			}_			if (format.drivername == null) {_				throw new IllegalArgumentException("No driver supplied")__			}_			_			return format__		};finalizes,the,configuration,and,checks,validity,return,configured,jdbcoutput,format;public,jdbcoutput,format,finish,if,format,username,null,log,info,username,was,not,supplied,separately,if,format,password,null,log,info,password,was,not,supplied,separately,if,format,db,url,null,throw,new,illegal,argument,exception,no,dababase,url,supplied,if,format,query,null,throw,new,illegal,argument,exception,no,query,suplied,if,format,drivername,null,throw,new,illegal,argument,exception,no,driver,supplied,return,format
JDBCOutputFormat -> JDBCOutputFormatBuilder -> public JDBCOutputFormat finish();1481798200;Finalizes the configuration and checks validity.__@return Configured JDBCOutputFormat;public JDBCOutputFormat finish() {_			if (format.username == null) {_				LOG.info("Username was not supplied separately.")__			}_			if (format.password == null) {_				LOG.info("Password was not supplied separately.")__			}_			if (format.dbURL == null) {_				throw new IllegalArgumentException("No dababase URL supplied.")__			}_			if (format.query == null) {_				throw new IllegalArgumentException("No query suplied")__			}_			if (format.drivername == null) {_				throw new IllegalArgumentException("No driver supplied")__			}_			_			return format__		};finalizes,the,configuration,and,checks,validity,return,configured,jdbcoutput,format;public,jdbcoutput,format,finish,if,format,username,null,log,info,username,was,not,supplied,separately,if,format,password,null,log,info,password,was,not,supplied,separately,if,format,db,url,null,throw,new,illegal,argument,exception,no,dababase,url,supplied,if,format,query,null,throw,new,illegal,argument,exception,no,query,suplied,if,format,drivername,null,throw,new,illegal,argument,exception,no,driver,supplied,return,format
JDBCOutputFormat -> JDBCOutputFormatBuilder -> public JDBCOutputFormat finish();1495923068;Finalizes the configuration and checks validity.__@return Configured JDBCOutputFormat;public JDBCOutputFormat finish() {_			if (format.username == null) {_				LOG.info("Username was not supplied separately.")__			}_			if (format.password == null) {_				LOG.info("Password was not supplied separately.")__			}_			if (format.dbURL == null) {_				throw new IllegalArgumentException("No dababase URL supplied.")__			}_			if (format.query == null) {_				throw new IllegalArgumentException("No query suplied")__			}_			if (format.drivername == null) {_				throw new IllegalArgumentException("No driver supplied")__			}__			return format__		};finalizes,the,configuration,and,checks,validity,return,configured,jdbcoutput,format;public,jdbcoutput,format,finish,if,format,username,null,log,info,username,was,not,supplied,separately,if,format,password,null,log,info,password,was,not,supplied,separately,if,format,db,url,null,throw,new,illegal,argument,exception,no,dababase,url,supplied,if,format,query,null,throw,new,illegal,argument,exception,no,query,suplied,if,format,drivername,null,throw,new,illegal,argument,exception,no,driver,supplied,return,format
JDBCOutputFormat -> JDBCOutputFormatBuilder -> public JDBCOutputFormat finish();1502115829;Finalizes the configuration and checks validity.__@return Configured JDBCOutputFormat;public JDBCOutputFormat finish() {_			if (format.username == null) {_				LOG.info("Username was not supplied separately.")__			}_			if (format.password == null) {_				LOG.info("Password was not supplied separately.")__			}_			if (format.dbURL == null) {_				throw new IllegalArgumentException("No dababase URL supplied.")__			}_			if (format.query == null) {_				throw new IllegalArgumentException("No query suplied")__			}_			if (format.drivername == null) {_				throw new IllegalArgumentException("No driver supplied")__			}__			return format__		};finalizes,the,configuration,and,checks,validity,return,configured,jdbcoutput,format;public,jdbcoutput,format,finish,if,format,username,null,log,info,username,was,not,supplied,separately,if,format,password,null,log,info,password,was,not,supplied,separately,if,format,db,url,null,throw,new,illegal,argument,exception,no,dababase,url,supplied,if,format,query,null,throw,new,illegal,argument,exception,no,query,suplied,if,format,drivername,null,throw,new,illegal,argument,exception,no,driver,supplied,return,format
JDBCOutputFormat -> JDBCOutputFormatBuilder -> public JDBCOutputFormat finish();1502465360;Finalizes the configuration and checks validity.__@return Configured JDBCOutputFormat;public JDBCOutputFormat finish() {_			if (format.username == null) {_				LOG.info("Username was not supplied.")__			}_			if (format.password == null) {_				LOG.info("Password was not supplied.")__			}_			if (format.dbURL == null) {_				throw new IllegalArgumentException("No database URL supplied.")__			}_			if (format.query == null) {_				throw new IllegalArgumentException("No query supplied.")__			}_			if (format.drivername == null) {_				throw new IllegalArgumentException("No driver supplied.")__			}__			return format__		};finalizes,the,configuration,and,checks,validity,return,configured,jdbcoutput,format;public,jdbcoutput,format,finish,if,format,username,null,log,info,username,was,not,supplied,if,format,password,null,log,info,password,was,not,supplied,if,format,db,url,null,throw,new,illegal,argument,exception,no,database,url,supplied,if,format,query,null,throw,new,illegal,argument,exception,no,query,supplied,if,format,drivername,null,throw,new,illegal,argument,exception,no,driver,supplied,return,format
JDBCOutputFormat -> JDBCOutputFormatBuilder -> public JDBCOutputFormat finish();1517943538;Finalizes the configuration and checks validity.__@return Configured JDBCOutputFormat;public JDBCOutputFormat finish() {_			if (format.username == null) {_				LOG.info("Username was not supplied.")__			}_			if (format.password == null) {_				LOG.info("Password was not supplied.")__			}_			if (format.dbURL == null) {_				throw new IllegalArgumentException("No database URL supplied.")__			}_			if (format.query == null) {_				throw new IllegalArgumentException("No query supplied.")__			}_			if (format.drivername == null) {_				throw new IllegalArgumentException("No driver supplied.")__			}__			return format__		};finalizes,the,configuration,and,checks,validity,return,configured,jdbcoutput,format;public,jdbcoutput,format,finish,if,format,username,null,log,info,username,was,not,supplied,if,format,password,null,log,info,password,was,not,supplied,if,format,db,url,null,throw,new,illegal,argument,exception,no,database,url,supplied,if,format,query,null,throw,new,illegal,argument,exception,no,query,supplied,if,format,drivername,null,throw,new,illegal,argument,exception,no,driver,supplied,return,format
JDBCOutputFormat -> @Override 	public void open(int taskNumber, int numTasks) throws IOException;1480685315;Connects to the target database and initializes the prepared statement.__@param taskNumber The number of the parallel instance._@throws IOException Thrown, if the output could not be opened due to an_I/O problem.;@Override_	public void open(int taskNumber, int numTasks) throws IOException {_		try {_			establishConnection()__			upload = dbConn.prepareStatement(query)__		} catch (SQLException sqe) {_			throw new IllegalArgumentException("open() failed.", sqe)__		} catch (ClassNotFoundException cnfe) {_			throw new IllegalArgumentException("JDBC driver class not found.", cnfe)__		}_	};connects,to,the,target,database,and,initializes,the,prepared,statement,param,task,number,the,number,of,the,parallel,instance,throws,ioexception,thrown,if,the,output,could,not,be,opened,due,to,an,i,o,problem;override,public,void,open,int,task,number,int,num,tasks,throws,ioexception,try,establish,connection,upload,db,conn,prepare,statement,query,catch,sqlexception,sqe,throw,new,illegal,argument,exception,open,failed,sqe,catch,class,not,found,exception,cnfe,throw,new,illegal,argument,exception,jdbc,driver,class,not,found,cnfe
JDBCOutputFormat -> @Override 	public void open(int taskNumber, int numTasks) throws IOException;1481798200;Connects to the target database and initializes the prepared statement.__@param taskNumber The number of the parallel instance._@throws IOException Thrown, if the output could not be opened due to an_I/O problem.;@Override_	public void open(int taskNumber, int numTasks) throws IOException {_		try {_			establishConnection()__			upload = dbConn.prepareStatement(query)__		} catch (SQLException sqe) {_			throw new IllegalArgumentException("open() failed.", sqe)__		} catch (ClassNotFoundException cnfe) {_			throw new IllegalArgumentException("JDBC driver class not found.", cnfe)__		}_	};connects,to,the,target,database,and,initializes,the,prepared,statement,param,task,number,the,number,of,the,parallel,instance,throws,ioexception,thrown,if,the,output,could,not,be,opened,due,to,an,i,o,problem;override,public,void,open,int,task,number,int,num,tasks,throws,ioexception,try,establish,connection,upload,db,conn,prepare,statement,query,catch,sqlexception,sqe,throw,new,illegal,argument,exception,open,failed,sqe,catch,class,not,found,exception,cnfe,throw,new,illegal,argument,exception,jdbc,driver,class,not,found,cnfe
JDBCOutputFormat -> @Override 	public void open(int taskNumber, int numTasks) throws IOException;1495923068;Connects to the target database and initializes the prepared statement.__@param taskNumber The number of the parallel instance._@throws IOException Thrown, if the output could not be opened due to an_I/O problem.;@Override_	public void open(int taskNumber, int numTasks) throws IOException {_		try {_			establishConnection()__			upload = dbConn.prepareStatement(query)__		} catch (SQLException sqe) {_			throw new IllegalArgumentException("open() failed.", sqe)__		} catch (ClassNotFoundException cnfe) {_			throw new IllegalArgumentException("JDBC driver class not found.", cnfe)__		}_	};connects,to,the,target,database,and,initializes,the,prepared,statement,param,task,number,the,number,of,the,parallel,instance,throws,ioexception,thrown,if,the,output,could,not,be,opened,due,to,an,i,o,problem;override,public,void,open,int,task,number,int,num,tasks,throws,ioexception,try,establish,connection,upload,db,conn,prepare,statement,query,catch,sqlexception,sqe,throw,new,illegal,argument,exception,open,failed,sqe,catch,class,not,found,exception,cnfe,throw,new,illegal,argument,exception,jdbc,driver,class,not,found,cnfe
JDBCOutputFormat -> @Override 	public void open(int taskNumber, int numTasks) throws IOException;1502115829;Connects to the target database and initializes the prepared statement.__@param taskNumber The number of the parallel instance._@throws IOException Thrown, if the output could not be opened due to an_I/O problem.;@Override_	public void open(int taskNumber, int numTasks) throws IOException {_		try {_			establishConnection()__			upload = dbConn.prepareStatement(query)__		} catch (SQLException sqe) {_			throw new IllegalArgumentException("open() failed.", sqe)__		} catch (ClassNotFoundException cnfe) {_			throw new IllegalArgumentException("JDBC driver class not found.", cnfe)__		}_	};connects,to,the,target,database,and,initializes,the,prepared,statement,param,task,number,the,number,of,the,parallel,instance,throws,ioexception,thrown,if,the,output,could,not,be,opened,due,to,an,i,o,problem;override,public,void,open,int,task,number,int,num,tasks,throws,ioexception,try,establish,connection,upload,db,conn,prepare,statement,query,catch,sqlexception,sqe,throw,new,illegal,argument,exception,open,failed,sqe,catch,class,not,found,exception,cnfe,throw,new,illegal,argument,exception,jdbc,driver,class,not,found,cnfe
JDBCOutputFormat -> @Override 	public void open(int taskNumber, int numTasks) throws IOException;1502465360;Connects to the target database and initializes the prepared statement.__@param taskNumber The number of the parallel instance._@throws IOException Thrown, if the output could not be opened due to an_I/O problem.;@Override_	public void open(int taskNumber, int numTasks) throws IOException {_		try {_			establishConnection()__			upload = dbConn.prepareStatement(query)__		} catch (SQLException sqe) {_			throw new IllegalArgumentException("open() failed.", sqe)__		} catch (ClassNotFoundException cnfe) {_			throw new IllegalArgumentException("JDBC driver class not found.", cnfe)__		}_	};connects,to,the,target,database,and,initializes,the,prepared,statement,param,task,number,the,number,of,the,parallel,instance,throws,ioexception,thrown,if,the,output,could,not,be,opened,due,to,an,i,o,problem;override,public,void,open,int,task,number,int,num,tasks,throws,ioexception,try,establish,connection,upload,db,conn,prepare,statement,query,catch,sqlexception,sqe,throw,new,illegal,argument,exception,open,failed,sqe,catch,class,not,found,exception,cnfe,throw,new,illegal,argument,exception,jdbc,driver,class,not,found,cnfe
JDBCOutputFormat -> @Override 	public void open(int taskNumber, int numTasks) throws IOException;1517943538;Connects to the target database and initializes the prepared statement.__@param taskNumber The number of the parallel instance._@throws IOException Thrown, if the output could not be opened due to an_I/O problem.;@Override_	public void open(int taskNumber, int numTasks) throws IOException {_		try {_			establishConnection()__			upload = dbConn.prepareStatement(query)__		} catch (SQLException sqe) {_			throw new IllegalArgumentException("open() failed.", sqe)__		} catch (ClassNotFoundException cnfe) {_			throw new IllegalArgumentException("JDBC driver class not found.", cnfe)__		}_	};connects,to,the,target,database,and,initializes,the,prepared,statement,param,task,number,the,number,of,the,parallel,instance,throws,ioexception,thrown,if,the,output,could,not,be,opened,due,to,an,i,o,problem;override,public,void,open,int,task,number,int,num,tasks,throws,ioexception,try,establish,connection,upload,db,conn,prepare,statement,query,catch,sqlexception,sqe,throw,new,illegal,argument,exception,open,failed,sqe,catch,class,not,found,exception,cnfe,throw,new,illegal,argument,exception,jdbc,driver,class,not,found,cnfe
JDBCOutputFormat -> @Override 	public void writeRecord(Row row) throws IOException;1480685315;Adds a record to the prepared statement._<p>_When this method is called, the output format is guaranteed to be opened._</p>__WARNING: this may fail when no column types specified (because a best effort approach is attempted in order to_insert a null value but it's not guaranteed that the JDBC driver handles PreparedStatement.setObject(pos, null))__@param row The records to add to the output._@see PreparedStatement_@throws IOException Thrown, if the records could not be added due to an I/O problem.;@Override_	public void writeRecord(Row row) throws IOException {__		if (typesArray != null && typesArray.length > 0 && typesArray.length != row.productArity()) {_			LOG.warn("Column SQL types array doesn't match arity of passed Row! Check the passed array...")__		} _		try {__			if (typesArray == null ) {_				_				for (int index = 0_ index < row.productArity()_ index++) {_					LOG.warn("Unknown column type for column %s. Best effort approach to set its value: %s.", index + 1, row.productElement(index))__					upload.setObject(index + 1, row.productElement(index))__				}_			} else {_				_				for (int index = 0_ index < row.productArity()_ index++) {__					if (row.productElement(index) == null) {_						upload.setNull(index + 1, typesArray[index])__					} else {_						_						switch (typesArray[index]) {_							case java.sql.Types.NULL:_								upload.setNull(index + 1, typesArray[index])__								break__							case java.sql.Types.BOOLEAN:_							case java.sql.Types.BIT:_								upload.setBoolean(index + 1, (boolean) row.productElement(index))__								break__							case java.sql.Types.CHAR:_							case java.sql.Types.NCHAR:_							case java.sql.Types.VARCHAR:_							case java.sql.Types.LONGVARCHAR:_							case java.sql.Types.LONGNVARCHAR:_								upload.setString(index + 1, (String) row.productElement(index))__								break__							case java.sql.Types.TINYINT:_								upload.setByte(index + 1, (byte) row.productElement(index))__								break__							case java.sql.Types.SMALLINT:_								upload.setShort(index + 1, (short) row.productElement(index))__								break__							case java.sql.Types.INTEGER:_								upload.setInt(index + 1, (int) row.productElement(index))__								break__							case java.sql.Types.BIGINT:_								upload.setLong(index + 1, (long) row.productElement(index))__								break__							case java.sql.Types.REAL:_								upload.setFloat(index + 1, (float) row.productElement(index))__								break__							case java.sql.Types.FLOAT:_							case java.sql.Types.DOUBLE:_								upload.setDouble(index + 1, (double) row.productElement(index))__								break__							case java.sql.Types.DECIMAL:_							case java.sql.Types.NUMERIC:_								upload.setBigDecimal(index + 1, (java.math.BigDecimal) row.productElement(index))__								break__							case java.sql.Types.DATE:_								upload.setDate(index + 1, (java.sql.Date) row.productElement(index))__								break__							case java.sql.Types.TIME:_								upload.setTime(index + 1, (java.sql.Time) row.productElement(index))__								break__							case java.sql.Types.TIMESTAMP:_								upload.setTimestamp(index + 1, (java.sql.Timestamp) row.productElement(index))__								break__							case java.sql.Types.BINARY:_							case java.sql.Types.VARBINARY:_							case java.sql.Types.LONGVARBINARY:_								upload.setBytes(index + 1, (byte[]) row.productElement(index))__								break__							default:_								upload.setObject(index + 1, row.productElement(index))__								LOG.warn("Unmanaged sql type (%s) for column %s. Best effort approach to set its value: %s.",_									typesArray[index], index + 1, row.productElement(index))__								_								_								_								_								_								_								_								_								_								_								_								_						}_					}_				}_			}_			upload.addBatch()__			batchCount++__			if (batchCount >= batchInterval) {_				upload.executeBatch()__				batchCount = 0__			}_		} catch (SQLException | IllegalArgumentException e) {_			throw new IllegalArgumentException("writeRecord() failed", e)__		}_	};adds,a,record,to,the,prepared,statement,p,when,this,method,is,called,the,output,format,is,guaranteed,to,be,opened,p,warning,this,may,fail,when,no,column,types,specified,because,a,best,effort,approach,is,attempted,in,order,to,insert,a,null,value,but,it,s,not,guaranteed,that,the,jdbc,driver,handles,prepared,statement,set,object,pos,null,param,row,the,records,to,add,to,the,output,see,prepared,statement,throws,ioexception,thrown,if,the,records,could,not,be,added,due,to,an,i,o,problem;override,public,void,write,record,row,row,throws,ioexception,if,types,array,null,types,array,length,0,types,array,length,row,product,arity,log,warn,column,sql,types,array,doesn,t,match,arity,of,passed,row,check,the,passed,array,try,if,types,array,null,for,int,index,0,index,row,product,arity,index,log,warn,unknown,column,type,for,column,s,best,effort,approach,to,set,its,value,s,index,1,row,product,element,index,upload,set,object,index,1,row,product,element,index,else,for,int,index,0,index,row,product,arity,index,if,row,product,element,index,null,upload,set,null,index,1,types,array,index,else,switch,types,array,index,case,java,sql,types,null,upload,set,null,index,1,types,array,index,break,case,java,sql,types,boolean,case,java,sql,types,bit,upload,set,boolean,index,1,boolean,row,product,element,index,break,case,java,sql,types,char,case,java,sql,types,nchar,case,java,sql,types,varchar,case,java,sql,types,longvarchar,case,java,sql,types,longnvarchar,upload,set,string,index,1,string,row,product,element,index,break,case,java,sql,types,tinyint,upload,set,byte,index,1,byte,row,product,element,index,break,case,java,sql,types,smallint,upload,set,short,index,1,short,row,product,element,index,break,case,java,sql,types,integer,upload,set,int,index,1,int,row,product,element,index,break,case,java,sql,types,bigint,upload,set,long,index,1,long,row,product,element,index,break,case,java,sql,types,real,upload,set,float,index,1,float,row,product,element,index,break,case,java,sql,types,float,case,java,sql,types,double,upload,set,double,index,1,double,row,product,element,index,break,case,java,sql,types,decimal,case,java,sql,types,numeric,upload,set,big,decimal,index,1,java,math,big,decimal,row,product,element,index,break,case,java,sql,types,date,upload,set,date,index,1,java,sql,date,row,product,element,index,break,case,java,sql,types,time,upload,set,time,index,1,java,sql,time,row,product,element,index,break,case,java,sql,types,timestamp,upload,set,timestamp,index,1,java,sql,timestamp,row,product,element,index,break,case,java,sql,types,binary,case,java,sql,types,varbinary,case,java,sql,types,longvarbinary,upload,set,bytes,index,1,byte,row,product,element,index,break,default,upload,set,object,index,1,row,product,element,index,log,warn,unmanaged,sql,type,s,for,column,s,best,effort,approach,to,set,its,value,s,types,array,index,index,1,row,product,element,index,upload,add,batch,batch,count,if,batch,count,batch,interval,upload,execute,batch,batch,count,0,catch,sqlexception,illegal,argument,exception,e,throw,new,illegal,argument,exception,write,record,failed,e
JDBCOutputFormat -> @Override 	public void writeRecord(Row row) throws IOException;1481798200;Adds a record to the prepared statement._<p>_When this method is called, the output format is guaranteed to be opened._</p>__WARNING: this may fail when no column types specified (because a best effort approach is attempted in order to_insert a null value but it's not guaranteed that the JDBC driver handles PreparedStatement.setObject(pos, null))__@param row The records to add to the output._@see PreparedStatement_@throws IOException Thrown, if the records could not be added due to an I/O problem.;@Override_	public void writeRecord(Row row) throws IOException {__		if (typesArray != null && typesArray.length > 0 && typesArray.length != row.getArity()) {_			LOG.warn("Column SQL types array doesn't match arity of passed Row! Check the passed array...")__		} _		try {__			if (typesArray == null ) {_				_				for (int index = 0_ index < row.getArity()_ index++) {_					LOG.warn("Unknown column type for column %s. Best effort approach to set its value: %s.", index + 1, row.getField(index))__					upload.setObject(index + 1, row.getField(index))__				}_			} else {_				_				for (int index = 0_ index < row.getArity()_ index++) {__					if (row.getField(index) == null) {_						upload.setNull(index + 1, typesArray[index])__					} else {_						_						switch (typesArray[index]) {_							case java.sql.Types.NULL:_								upload.setNull(index + 1, typesArray[index])__								break__							case java.sql.Types.BOOLEAN:_							case java.sql.Types.BIT:_								upload.setBoolean(index + 1, (boolean) row.getField(index))__								break__							case java.sql.Types.CHAR:_							case java.sql.Types.NCHAR:_							case java.sql.Types.VARCHAR:_							case java.sql.Types.LONGVARCHAR:_							case java.sql.Types.LONGNVARCHAR:_								upload.setString(index + 1, (String) row.getField(index))__								break__							case java.sql.Types.TINYINT:_								upload.setByte(index + 1, (byte) row.getField(index))__								break__							case java.sql.Types.SMALLINT:_								upload.setShort(index + 1, (short) row.getField(index))__								break__							case java.sql.Types.INTEGER:_								upload.setInt(index + 1, (int) row.getField(index))__								break__							case java.sql.Types.BIGINT:_								upload.setLong(index + 1, (long) row.getField(index))__								break__							case java.sql.Types.REAL:_								upload.setFloat(index + 1, (float) row.getField(index))__								break__							case java.sql.Types.FLOAT:_							case java.sql.Types.DOUBLE:_								upload.setDouble(index + 1, (double) row.getField(index))__								break__							case java.sql.Types.DECIMAL:_							case java.sql.Types.NUMERIC:_								upload.setBigDecimal(index + 1, (java.math.BigDecimal) row.getField(index))__								break__							case java.sql.Types.DATE:_								upload.setDate(index + 1, (java.sql.Date) row.getField(index))__								break__							case java.sql.Types.TIME:_								upload.setTime(index + 1, (java.sql.Time) row.getField(index))__								break__							case java.sql.Types.TIMESTAMP:_								upload.setTimestamp(index + 1, (java.sql.Timestamp) row.getField(index))__								break__							case java.sql.Types.BINARY:_							case java.sql.Types.VARBINARY:_							case java.sql.Types.LONGVARBINARY:_								upload.setBytes(index + 1, (byte[]) row.getField(index))__								break__							default:_								upload.setObject(index + 1, row.getField(index))__								LOG.warn("Unmanaged sql type (%s) for column %s. Best effort approach to set its value: %s.",_									typesArray[index], index + 1, row.getField(index))__								_								_								_								_								_								_								_								_								_								_								_								_						}_					}_				}_			}_			upload.addBatch()__			batchCount++__			if (batchCount >= batchInterval) {_				upload.executeBatch()__				batchCount = 0__			}_		} catch (SQLException | IllegalArgumentException e) {_			throw new IllegalArgumentException("writeRecord() failed", e)__		}_	};adds,a,record,to,the,prepared,statement,p,when,this,method,is,called,the,output,format,is,guaranteed,to,be,opened,p,warning,this,may,fail,when,no,column,types,specified,because,a,best,effort,approach,is,attempted,in,order,to,insert,a,null,value,but,it,s,not,guaranteed,that,the,jdbc,driver,handles,prepared,statement,set,object,pos,null,param,row,the,records,to,add,to,the,output,see,prepared,statement,throws,ioexception,thrown,if,the,records,could,not,be,added,due,to,an,i,o,problem;override,public,void,write,record,row,row,throws,ioexception,if,types,array,null,types,array,length,0,types,array,length,row,get,arity,log,warn,column,sql,types,array,doesn,t,match,arity,of,passed,row,check,the,passed,array,try,if,types,array,null,for,int,index,0,index,row,get,arity,index,log,warn,unknown,column,type,for,column,s,best,effort,approach,to,set,its,value,s,index,1,row,get,field,index,upload,set,object,index,1,row,get,field,index,else,for,int,index,0,index,row,get,arity,index,if,row,get,field,index,null,upload,set,null,index,1,types,array,index,else,switch,types,array,index,case,java,sql,types,null,upload,set,null,index,1,types,array,index,break,case,java,sql,types,boolean,case,java,sql,types,bit,upload,set,boolean,index,1,boolean,row,get,field,index,break,case,java,sql,types,char,case,java,sql,types,nchar,case,java,sql,types,varchar,case,java,sql,types,longvarchar,case,java,sql,types,longnvarchar,upload,set,string,index,1,string,row,get,field,index,break,case,java,sql,types,tinyint,upload,set,byte,index,1,byte,row,get,field,index,break,case,java,sql,types,smallint,upload,set,short,index,1,short,row,get,field,index,break,case,java,sql,types,integer,upload,set,int,index,1,int,row,get,field,index,break,case,java,sql,types,bigint,upload,set,long,index,1,long,row,get,field,index,break,case,java,sql,types,real,upload,set,float,index,1,float,row,get,field,index,break,case,java,sql,types,float,case,java,sql,types,double,upload,set,double,index,1,double,row,get,field,index,break,case,java,sql,types,decimal,case,java,sql,types,numeric,upload,set,big,decimal,index,1,java,math,big,decimal,row,get,field,index,break,case,java,sql,types,date,upload,set,date,index,1,java,sql,date,row,get,field,index,break,case,java,sql,types,time,upload,set,time,index,1,java,sql,time,row,get,field,index,break,case,java,sql,types,timestamp,upload,set,timestamp,index,1,java,sql,timestamp,row,get,field,index,break,case,java,sql,types,binary,case,java,sql,types,varbinary,case,java,sql,types,longvarbinary,upload,set,bytes,index,1,byte,row,get,field,index,break,default,upload,set,object,index,1,row,get,field,index,log,warn,unmanaged,sql,type,s,for,column,s,best,effort,approach,to,set,its,value,s,types,array,index,index,1,row,get,field,index,upload,add,batch,batch,count,if,batch,count,batch,interval,upload,execute,batch,batch,count,0,catch,sqlexception,illegal,argument,exception,e,throw,new,illegal,argument,exception,write,record,failed,e
JDBCOutputFormat -> @Override 	public void writeRecord(Row row) throws IOException;1495923068;Adds a record to the prepared statement.__<p>When this method is called, the output format is guaranteed to be opened.__<p>WARNING: this may fail when no column types specified (because a best effort approach is attempted in order to_insert a null value but it's not guaranteed that the JDBC driver handles PreparedStatement.setObject(pos, null))__@param row The records to add to the output._@see PreparedStatement_@throws IOException Thrown, if the records could not be added due to an I/O problem.;@Override_	public void writeRecord(Row row) throws IOException {__		if (typesArray != null && typesArray.length > 0 && typesArray.length != row.getArity()) {_			LOG.warn("Column SQL types array doesn't match arity of passed Row! Check the passed array...")__		}_		try {__			if (typesArray == null) {_				_				for (int index = 0_ index < row.getArity()_ index++) {_					LOG.warn("Unknown column type for column %s. Best effort approach to set its value: %s.", index + 1, row.getField(index))__					upload.setObject(index + 1, row.getField(index))__				}_			} else {_				_				for (int index = 0_ index < row.getArity()_ index++) {__					if (row.getField(index) == null) {_						upload.setNull(index + 1, typesArray[index])__					} else {_						_						switch (typesArray[index]) {_							case java.sql.Types.NULL:_								upload.setNull(index + 1, typesArray[index])__								break__							case java.sql.Types.BOOLEAN:_							case java.sql.Types.BIT:_								upload.setBoolean(index + 1, (boolean) row.getField(index))__								break__							case java.sql.Types.CHAR:_							case java.sql.Types.NCHAR:_							case java.sql.Types.VARCHAR:_							case java.sql.Types.LONGVARCHAR:_							case java.sql.Types.LONGNVARCHAR:_								upload.setString(index + 1, (String) row.getField(index))__								break__							case java.sql.Types.TINYINT:_								upload.setByte(index + 1, (byte) row.getField(index))__								break__							case java.sql.Types.SMALLINT:_								upload.setShort(index + 1, (short) row.getField(index))__								break__							case java.sql.Types.INTEGER:_								upload.setInt(index + 1, (int) row.getField(index))__								break__							case java.sql.Types.BIGINT:_								upload.setLong(index + 1, (long) row.getField(index))__								break__							case java.sql.Types.REAL:_								upload.setFloat(index + 1, (float) row.getField(index))__								break__							case java.sql.Types.FLOAT:_							case java.sql.Types.DOUBLE:_								upload.setDouble(index + 1, (double) row.getField(index))__								break__							case java.sql.Types.DECIMAL:_							case java.sql.Types.NUMERIC:_								upload.setBigDecimal(index + 1, (java.math.BigDecimal) row.getField(index))__								break__							case java.sql.Types.DATE:_								upload.setDate(index + 1, (java.sql.Date) row.getField(index))__								break__							case java.sql.Types.TIME:_								upload.setTime(index + 1, (java.sql.Time) row.getField(index))__								break__							case java.sql.Types.TIMESTAMP:_								upload.setTimestamp(index + 1, (java.sql.Timestamp) row.getField(index))__								break__							case java.sql.Types.BINARY:_							case java.sql.Types.VARBINARY:_							case java.sql.Types.LONGVARBINARY:_								upload.setBytes(index + 1, (byte[]) row.getField(index))__								break__							default:_								upload.setObject(index + 1, row.getField(index))__								LOG.warn("Unmanaged sql type (%s) for column %s. Best effort approach to set its value: %s.",_									typesArray[index], index + 1, row.getField(index))__								_								_								_								_								_								_								_								_								_								_								_								_						}_					}_				}_			}_			upload.addBatch()__			batchCount++__			if (batchCount >= batchInterval) {_				upload.executeBatch()__				batchCount = 0__			}_		} catch (SQLException | IllegalArgumentException e) {_			throw new IllegalArgumentException("writeRecord() failed", e)__		}_	};adds,a,record,to,the,prepared,statement,p,when,this,method,is,called,the,output,format,is,guaranteed,to,be,opened,p,warning,this,may,fail,when,no,column,types,specified,because,a,best,effort,approach,is,attempted,in,order,to,insert,a,null,value,but,it,s,not,guaranteed,that,the,jdbc,driver,handles,prepared,statement,set,object,pos,null,param,row,the,records,to,add,to,the,output,see,prepared,statement,throws,ioexception,thrown,if,the,records,could,not,be,added,due,to,an,i,o,problem;override,public,void,write,record,row,row,throws,ioexception,if,types,array,null,types,array,length,0,types,array,length,row,get,arity,log,warn,column,sql,types,array,doesn,t,match,arity,of,passed,row,check,the,passed,array,try,if,types,array,null,for,int,index,0,index,row,get,arity,index,log,warn,unknown,column,type,for,column,s,best,effort,approach,to,set,its,value,s,index,1,row,get,field,index,upload,set,object,index,1,row,get,field,index,else,for,int,index,0,index,row,get,arity,index,if,row,get,field,index,null,upload,set,null,index,1,types,array,index,else,switch,types,array,index,case,java,sql,types,null,upload,set,null,index,1,types,array,index,break,case,java,sql,types,boolean,case,java,sql,types,bit,upload,set,boolean,index,1,boolean,row,get,field,index,break,case,java,sql,types,char,case,java,sql,types,nchar,case,java,sql,types,varchar,case,java,sql,types,longvarchar,case,java,sql,types,longnvarchar,upload,set,string,index,1,string,row,get,field,index,break,case,java,sql,types,tinyint,upload,set,byte,index,1,byte,row,get,field,index,break,case,java,sql,types,smallint,upload,set,short,index,1,short,row,get,field,index,break,case,java,sql,types,integer,upload,set,int,index,1,int,row,get,field,index,break,case,java,sql,types,bigint,upload,set,long,index,1,long,row,get,field,index,break,case,java,sql,types,real,upload,set,float,index,1,float,row,get,field,index,break,case,java,sql,types,float,case,java,sql,types,double,upload,set,double,index,1,double,row,get,field,index,break,case,java,sql,types,decimal,case,java,sql,types,numeric,upload,set,big,decimal,index,1,java,math,big,decimal,row,get,field,index,break,case,java,sql,types,date,upload,set,date,index,1,java,sql,date,row,get,field,index,break,case,java,sql,types,time,upload,set,time,index,1,java,sql,time,row,get,field,index,break,case,java,sql,types,timestamp,upload,set,timestamp,index,1,java,sql,timestamp,row,get,field,index,break,case,java,sql,types,binary,case,java,sql,types,varbinary,case,java,sql,types,longvarbinary,upload,set,bytes,index,1,byte,row,get,field,index,break,default,upload,set,object,index,1,row,get,field,index,log,warn,unmanaged,sql,type,s,for,column,s,best,effort,approach,to,set,its,value,s,types,array,index,index,1,row,get,field,index,upload,add,batch,batch,count,if,batch,count,batch,interval,upload,execute,batch,batch,count,0,catch,sqlexception,illegal,argument,exception,e,throw,new,illegal,argument,exception,write,record,failed,e
JDBCOutputFormat -> @Override 	public void writeRecord(Row row) throws IOException;1502115829;Adds a record to the prepared statement.__<p>When this method is called, the output format is guaranteed to be opened.__<p>WARNING: this may fail when no column types specified (because a best effort approach is attempted in order to_insert a null value but it's not guaranteed that the JDBC driver handles PreparedStatement.setObject(pos, null))__@param row The records to add to the output._@see PreparedStatement_@throws IOException Thrown, if the records could not be added due to an I/O problem.;@Override_	public void writeRecord(Row row) throws IOException {__		if (typesArray != null && typesArray.length > 0 && typesArray.length != row.getArity()) {_			LOG.warn("Column SQL types array doesn't match arity of passed Row! Check the passed array...")__		}_		try {__			if (typesArray == null) {_				_				for (int index = 0_ index < row.getArity()_ index++) {_					LOG.warn("Unknown column type for column %s. Best effort approach to set its value: %s.", index + 1, row.getField(index))__					upload.setObject(index + 1, row.getField(index))__				}_			} else {_				_				for (int index = 0_ index < row.getArity()_ index++) {__					if (row.getField(index) == null) {_						upload.setNull(index + 1, typesArray[index])__					} else {_						_						switch (typesArray[index]) {_							case java.sql.Types.NULL:_								upload.setNull(index + 1, typesArray[index])__								break__							case java.sql.Types.BOOLEAN:_							case java.sql.Types.BIT:_								upload.setBoolean(index + 1, (boolean) row.getField(index))__								break__							case java.sql.Types.CHAR:_							case java.sql.Types.NCHAR:_							case java.sql.Types.VARCHAR:_							case java.sql.Types.LONGVARCHAR:_							case java.sql.Types.LONGNVARCHAR:_								upload.setString(index + 1, (String) row.getField(index))__								break__							case java.sql.Types.TINYINT:_								upload.setByte(index + 1, (byte) row.getField(index))__								break__							case java.sql.Types.SMALLINT:_								upload.setShort(index + 1, (short) row.getField(index))__								break__							case java.sql.Types.INTEGER:_								upload.setInt(index + 1, (int) row.getField(index))__								break__							case java.sql.Types.BIGINT:_								upload.setLong(index + 1, (long) row.getField(index))__								break__							case java.sql.Types.REAL:_								upload.setFloat(index + 1, (float) row.getField(index))__								break__							case java.sql.Types.FLOAT:_							case java.sql.Types.DOUBLE:_								upload.setDouble(index + 1, (double) row.getField(index))__								break__							case java.sql.Types.DECIMAL:_							case java.sql.Types.NUMERIC:_								upload.setBigDecimal(index + 1, (java.math.BigDecimal) row.getField(index))__								break__							case java.sql.Types.DATE:_								upload.setDate(index + 1, (java.sql.Date) row.getField(index))__								break__							case java.sql.Types.TIME:_								upload.setTime(index + 1, (java.sql.Time) row.getField(index))__								break__							case java.sql.Types.TIMESTAMP:_								upload.setTimestamp(index + 1, (java.sql.Timestamp) row.getField(index))__								break__							case java.sql.Types.BINARY:_							case java.sql.Types.VARBINARY:_							case java.sql.Types.LONGVARBINARY:_								upload.setBytes(index + 1, (byte[]) row.getField(index))__								break__							default:_								upload.setObject(index + 1, row.getField(index))__								LOG.warn("Unmanaged sql type (%s) for column %s. Best effort approach to set its value: %s.",_									typesArray[index], index + 1, row.getField(index))__								_								_								_								_								_								_								_								_								_								_								_								_						}_					}_				}_			}_			upload.addBatch()__			batchCount++__		} catch (SQLException e) {_			throw new RuntimeException("Preparation of JDBC statement failed.", e)__		}__		if (batchCount >= batchInterval) {_			_			try {_				upload.executeBatch()__				batchCount = 0__			} catch (SQLException e) {_				throw new RuntimeException("Execution of JDBC statement failed.", e)__			}_		}_	};adds,a,record,to,the,prepared,statement,p,when,this,method,is,called,the,output,format,is,guaranteed,to,be,opened,p,warning,this,may,fail,when,no,column,types,specified,because,a,best,effort,approach,is,attempted,in,order,to,insert,a,null,value,but,it,s,not,guaranteed,that,the,jdbc,driver,handles,prepared,statement,set,object,pos,null,param,row,the,records,to,add,to,the,output,see,prepared,statement,throws,ioexception,thrown,if,the,records,could,not,be,added,due,to,an,i,o,problem;override,public,void,write,record,row,row,throws,ioexception,if,types,array,null,types,array,length,0,types,array,length,row,get,arity,log,warn,column,sql,types,array,doesn,t,match,arity,of,passed,row,check,the,passed,array,try,if,types,array,null,for,int,index,0,index,row,get,arity,index,log,warn,unknown,column,type,for,column,s,best,effort,approach,to,set,its,value,s,index,1,row,get,field,index,upload,set,object,index,1,row,get,field,index,else,for,int,index,0,index,row,get,arity,index,if,row,get,field,index,null,upload,set,null,index,1,types,array,index,else,switch,types,array,index,case,java,sql,types,null,upload,set,null,index,1,types,array,index,break,case,java,sql,types,boolean,case,java,sql,types,bit,upload,set,boolean,index,1,boolean,row,get,field,index,break,case,java,sql,types,char,case,java,sql,types,nchar,case,java,sql,types,varchar,case,java,sql,types,longvarchar,case,java,sql,types,longnvarchar,upload,set,string,index,1,string,row,get,field,index,break,case,java,sql,types,tinyint,upload,set,byte,index,1,byte,row,get,field,index,break,case,java,sql,types,smallint,upload,set,short,index,1,short,row,get,field,index,break,case,java,sql,types,integer,upload,set,int,index,1,int,row,get,field,index,break,case,java,sql,types,bigint,upload,set,long,index,1,long,row,get,field,index,break,case,java,sql,types,real,upload,set,float,index,1,float,row,get,field,index,break,case,java,sql,types,float,case,java,sql,types,double,upload,set,double,index,1,double,row,get,field,index,break,case,java,sql,types,decimal,case,java,sql,types,numeric,upload,set,big,decimal,index,1,java,math,big,decimal,row,get,field,index,break,case,java,sql,types,date,upload,set,date,index,1,java,sql,date,row,get,field,index,break,case,java,sql,types,time,upload,set,time,index,1,java,sql,time,row,get,field,index,break,case,java,sql,types,timestamp,upload,set,timestamp,index,1,java,sql,timestamp,row,get,field,index,break,case,java,sql,types,binary,case,java,sql,types,varbinary,case,java,sql,types,longvarbinary,upload,set,bytes,index,1,byte,row,get,field,index,break,default,upload,set,object,index,1,row,get,field,index,log,warn,unmanaged,sql,type,s,for,column,s,best,effort,approach,to,set,its,value,s,types,array,index,index,1,row,get,field,index,upload,add,batch,batch,count,catch,sqlexception,e,throw,new,runtime,exception,preparation,of,jdbc,statement,failed,e,if,batch,count,batch,interval,try,upload,execute,batch,batch,count,0,catch,sqlexception,e,throw,new,runtime,exception,execution,of,jdbc,statement,failed,e
JDBCOutputFormat -> @Override 	public void writeRecord(Row row) throws IOException;1502465360;Adds a record to the prepared statement.__<p>When this method is called, the output format is guaranteed to be opened.__<p>WARNING: this may fail when no column types specified (because a best effort approach is attempted in order to_insert a null value but it's not guaranteed that the JDBC driver handles PreparedStatement.setObject(pos, null))__@param row The records to add to the output._@see PreparedStatement_@throws IOException Thrown, if the records could not be added due to an I/O problem.;@Override_	public void writeRecord(Row row) throws IOException {__		if (typesArray != null && typesArray.length > 0 && typesArray.length != row.getArity()) {_			LOG.warn("Column SQL types array doesn't match arity of passed Row! Check the passed array...")__		}_		try {__			if (typesArray == null) {_				_				for (int index = 0_ index < row.getArity()_ index++) {_					LOG.warn("Unknown column type for column %s. Best effort approach to set its value: %s.", index + 1, row.getField(index))__					upload.setObject(index + 1, row.getField(index))__				}_			} else {_				_				for (int index = 0_ index < row.getArity()_ index++) {__					if (row.getField(index) == null) {_						upload.setNull(index + 1, typesArray[index])__					} else {_						_						switch (typesArray[index]) {_							case java.sql.Types.NULL:_								upload.setNull(index + 1, typesArray[index])__								break__							case java.sql.Types.BOOLEAN:_							case java.sql.Types.BIT:_								upload.setBoolean(index + 1, (boolean) row.getField(index))__								break__							case java.sql.Types.CHAR:_							case java.sql.Types.NCHAR:_							case java.sql.Types.VARCHAR:_							case java.sql.Types.LONGVARCHAR:_							case java.sql.Types.LONGNVARCHAR:_								upload.setString(index + 1, (String) row.getField(index))__								break__							case java.sql.Types.TINYINT:_								upload.setByte(index + 1, (byte) row.getField(index))__								break__							case java.sql.Types.SMALLINT:_								upload.setShort(index + 1, (short) row.getField(index))__								break__							case java.sql.Types.INTEGER:_								upload.setInt(index + 1, (int) row.getField(index))__								break__							case java.sql.Types.BIGINT:_								upload.setLong(index + 1, (long) row.getField(index))__								break__							case java.sql.Types.REAL:_								upload.setFloat(index + 1, (float) row.getField(index))__								break__							case java.sql.Types.FLOAT:_							case java.sql.Types.DOUBLE:_								upload.setDouble(index + 1, (double) row.getField(index))__								break__							case java.sql.Types.DECIMAL:_							case java.sql.Types.NUMERIC:_								upload.setBigDecimal(index + 1, (java.math.BigDecimal) row.getField(index))__								break__							case java.sql.Types.DATE:_								upload.setDate(index + 1, (java.sql.Date) row.getField(index))__								break__							case java.sql.Types.TIME:_								upload.setTime(index + 1, (java.sql.Time) row.getField(index))__								break__							case java.sql.Types.TIMESTAMP:_								upload.setTimestamp(index + 1, (java.sql.Timestamp) row.getField(index))__								break__							case java.sql.Types.BINARY:_							case java.sql.Types.VARBINARY:_							case java.sql.Types.LONGVARBINARY:_								upload.setBytes(index + 1, (byte[]) row.getField(index))__								break__							default:_								upload.setObject(index + 1, row.getField(index))__								LOG.warn("Unmanaged sql type (%s) for column %s. Best effort approach to set its value: %s.",_									typesArray[index], index + 1, row.getField(index))__								_								_								_								_								_								_								_								_								_								_								_								_						}_					}_				}_			}_			upload.addBatch()__			batchCount++__		} catch (SQLException e) {_			throw new RuntimeException("Preparation of JDBC statement failed.", e)__		}__		if (batchCount >= batchInterval) {_			_			flush()__		}_	};adds,a,record,to,the,prepared,statement,p,when,this,method,is,called,the,output,format,is,guaranteed,to,be,opened,p,warning,this,may,fail,when,no,column,types,specified,because,a,best,effort,approach,is,attempted,in,order,to,insert,a,null,value,but,it,s,not,guaranteed,that,the,jdbc,driver,handles,prepared,statement,set,object,pos,null,param,row,the,records,to,add,to,the,output,see,prepared,statement,throws,ioexception,thrown,if,the,records,could,not,be,added,due,to,an,i,o,problem;override,public,void,write,record,row,row,throws,ioexception,if,types,array,null,types,array,length,0,types,array,length,row,get,arity,log,warn,column,sql,types,array,doesn,t,match,arity,of,passed,row,check,the,passed,array,try,if,types,array,null,for,int,index,0,index,row,get,arity,index,log,warn,unknown,column,type,for,column,s,best,effort,approach,to,set,its,value,s,index,1,row,get,field,index,upload,set,object,index,1,row,get,field,index,else,for,int,index,0,index,row,get,arity,index,if,row,get,field,index,null,upload,set,null,index,1,types,array,index,else,switch,types,array,index,case,java,sql,types,null,upload,set,null,index,1,types,array,index,break,case,java,sql,types,boolean,case,java,sql,types,bit,upload,set,boolean,index,1,boolean,row,get,field,index,break,case,java,sql,types,char,case,java,sql,types,nchar,case,java,sql,types,varchar,case,java,sql,types,longvarchar,case,java,sql,types,longnvarchar,upload,set,string,index,1,string,row,get,field,index,break,case,java,sql,types,tinyint,upload,set,byte,index,1,byte,row,get,field,index,break,case,java,sql,types,smallint,upload,set,short,index,1,short,row,get,field,index,break,case,java,sql,types,integer,upload,set,int,index,1,int,row,get,field,index,break,case,java,sql,types,bigint,upload,set,long,index,1,long,row,get,field,index,break,case,java,sql,types,real,upload,set,float,index,1,float,row,get,field,index,break,case,java,sql,types,float,case,java,sql,types,double,upload,set,double,index,1,double,row,get,field,index,break,case,java,sql,types,decimal,case,java,sql,types,numeric,upload,set,big,decimal,index,1,java,math,big,decimal,row,get,field,index,break,case,java,sql,types,date,upload,set,date,index,1,java,sql,date,row,get,field,index,break,case,java,sql,types,time,upload,set,time,index,1,java,sql,time,row,get,field,index,break,case,java,sql,types,timestamp,upload,set,timestamp,index,1,java,sql,timestamp,row,get,field,index,break,case,java,sql,types,binary,case,java,sql,types,varbinary,case,java,sql,types,longvarbinary,upload,set,bytes,index,1,byte,row,get,field,index,break,default,upload,set,object,index,1,row,get,field,index,log,warn,unmanaged,sql,type,s,for,column,s,best,effort,approach,to,set,its,value,s,types,array,index,index,1,row,get,field,index,upload,add,batch,batch,count,catch,sqlexception,e,throw,new,runtime,exception,preparation,of,jdbc,statement,failed,e,if,batch,count,batch,interval,flush
JDBCOutputFormat -> @Override 	public void writeRecord(Row row) throws IOException;1517943538;Adds a record to the prepared statement.__<p>When this method is called, the output format is guaranteed to be opened.__<p>WARNING: this may fail when no column types specified (because a best effort approach is attempted in order to_insert a null value but it's not guaranteed that the JDBC driver handles PreparedStatement.setObject(pos, null))__@param row The records to add to the output._@see PreparedStatement_@throws IOException Thrown, if the records could not be added due to an I/O problem.;@Override_	public void writeRecord(Row row) throws IOException {__		if (typesArray != null && typesArray.length > 0 && typesArray.length != row.getArity()) {_			LOG.warn("Column SQL types array doesn't match arity of passed Row! Check the passed array...")__		}_		try {__			if (typesArray == null) {_				_				for (int index = 0_ index < row.getArity()_ index++) {_					LOG.warn("Unknown column type for column {}. Best effort approach to set its value: {}.", index + 1, row.getField(index))__					upload.setObject(index + 1, row.getField(index))__				}_			} else {_				_				for (int index = 0_ index < row.getArity()_ index++) {__					if (row.getField(index) == null) {_						upload.setNull(index + 1, typesArray[index])__					} else {_						_						switch (typesArray[index]) {_							case java.sql.Types.NULL:_								upload.setNull(index + 1, typesArray[index])__								break__							case java.sql.Types.BOOLEAN:_							case java.sql.Types.BIT:_								upload.setBoolean(index + 1, (boolean) row.getField(index))__								break__							case java.sql.Types.CHAR:_							case java.sql.Types.NCHAR:_							case java.sql.Types.VARCHAR:_							case java.sql.Types.LONGVARCHAR:_							case java.sql.Types.LONGNVARCHAR:_								upload.setString(index + 1, (String) row.getField(index))__								break__							case java.sql.Types.TINYINT:_								upload.setByte(index + 1, (byte) row.getField(index))__								break__							case java.sql.Types.SMALLINT:_								upload.setShort(index + 1, (short) row.getField(index))__								break__							case java.sql.Types.INTEGER:_								upload.setInt(index + 1, (int) row.getField(index))__								break__							case java.sql.Types.BIGINT:_								upload.setLong(index + 1, (long) row.getField(index))__								break__							case java.sql.Types.REAL:_								upload.setFloat(index + 1, (float) row.getField(index))__								break__							case java.sql.Types.FLOAT:_							case java.sql.Types.DOUBLE:_								upload.setDouble(index + 1, (double) row.getField(index))__								break__							case java.sql.Types.DECIMAL:_							case java.sql.Types.NUMERIC:_								upload.setBigDecimal(index + 1, (java.math.BigDecimal) row.getField(index))__								break__							case java.sql.Types.DATE:_								upload.setDate(index + 1, (java.sql.Date) row.getField(index))__								break__							case java.sql.Types.TIME:_								upload.setTime(index + 1, (java.sql.Time) row.getField(index))__								break__							case java.sql.Types.TIMESTAMP:_								upload.setTimestamp(index + 1, (java.sql.Timestamp) row.getField(index))__								break__							case java.sql.Types.BINARY:_							case java.sql.Types.VARBINARY:_							case java.sql.Types.LONGVARBINARY:_								upload.setBytes(index + 1, (byte[]) row.getField(index))__								break__							default:_								upload.setObject(index + 1, row.getField(index))__								LOG.warn("Unmanaged sql type ({}) for column {}. Best effort approach to set its value: {}.",_									typesArray[index], index + 1, row.getField(index))__								_								_								_								_								_								_								_								_								_								_								_								_						}_					}_				}_			}_			upload.addBatch()__			batchCount++__		} catch (SQLException e) {_			throw new RuntimeException("Preparation of JDBC statement failed.", e)__		}__		if (batchCount >= batchInterval) {_			_			flush()__		}_	};adds,a,record,to,the,prepared,statement,p,when,this,method,is,called,the,output,format,is,guaranteed,to,be,opened,p,warning,this,may,fail,when,no,column,types,specified,because,a,best,effort,approach,is,attempted,in,order,to,insert,a,null,value,but,it,s,not,guaranteed,that,the,jdbc,driver,handles,prepared,statement,set,object,pos,null,param,row,the,records,to,add,to,the,output,see,prepared,statement,throws,ioexception,thrown,if,the,records,could,not,be,added,due,to,an,i,o,problem;override,public,void,write,record,row,row,throws,ioexception,if,types,array,null,types,array,length,0,types,array,length,row,get,arity,log,warn,column,sql,types,array,doesn,t,match,arity,of,passed,row,check,the,passed,array,try,if,types,array,null,for,int,index,0,index,row,get,arity,index,log,warn,unknown,column,type,for,column,best,effort,approach,to,set,its,value,index,1,row,get,field,index,upload,set,object,index,1,row,get,field,index,else,for,int,index,0,index,row,get,arity,index,if,row,get,field,index,null,upload,set,null,index,1,types,array,index,else,switch,types,array,index,case,java,sql,types,null,upload,set,null,index,1,types,array,index,break,case,java,sql,types,boolean,case,java,sql,types,bit,upload,set,boolean,index,1,boolean,row,get,field,index,break,case,java,sql,types,char,case,java,sql,types,nchar,case,java,sql,types,varchar,case,java,sql,types,longvarchar,case,java,sql,types,longnvarchar,upload,set,string,index,1,string,row,get,field,index,break,case,java,sql,types,tinyint,upload,set,byte,index,1,byte,row,get,field,index,break,case,java,sql,types,smallint,upload,set,short,index,1,short,row,get,field,index,break,case,java,sql,types,integer,upload,set,int,index,1,int,row,get,field,index,break,case,java,sql,types,bigint,upload,set,long,index,1,long,row,get,field,index,break,case,java,sql,types,real,upload,set,float,index,1,float,row,get,field,index,break,case,java,sql,types,float,case,java,sql,types,double,upload,set,double,index,1,double,row,get,field,index,break,case,java,sql,types,decimal,case,java,sql,types,numeric,upload,set,big,decimal,index,1,java,math,big,decimal,row,get,field,index,break,case,java,sql,types,date,upload,set,date,index,1,java,sql,date,row,get,field,index,break,case,java,sql,types,time,upload,set,time,index,1,java,sql,time,row,get,field,index,break,case,java,sql,types,timestamp,upload,set,timestamp,index,1,java,sql,timestamp,row,get,field,index,break,case,java,sql,types,binary,case,java,sql,types,varbinary,case,java,sql,types,longvarbinary,upload,set,bytes,index,1,byte,row,get,field,index,break,default,upload,set,object,index,1,row,get,field,index,log,warn,unmanaged,sql,type,for,column,best,effort,approach,to,set,its,value,types,array,index,index,1,row,get,field,index,upload,add,batch,batch,count,catch,sqlexception,e,throw,new,runtime,exception,preparation,of,jdbc,statement,failed,e,if,batch,count,batch,interval,flush
