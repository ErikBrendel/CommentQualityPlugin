# id;timestamp;commentText;codeText;commentWords;codeWords
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1480685315;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed);protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if(additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			_			if(secureMode) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1487173364;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed);protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if(additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			_			if(secureMode) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1488437582;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed);protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if(additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			_			if(secureMode) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1495175928;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed);protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if(additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			_			if(secureMode) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1495923077;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if (additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			_			if (secureMode) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1499314317;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if (additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			_			if (secureMode) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1500456916;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if (additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			_			if (secureMode) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1500863121;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if (additionalServerProperties != null) {_			kafkaProperties.putAll(additionalServerProperties)__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			_			if (secureMode) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,additional,server,properties,null,kafka,properties,put,all,additional,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1502179982;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if (config.getKafkaServerProperties() != null) {_			kafkaProperties.putAll(config.getKafkaServerProperties())__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			_			if (config.isSecureMode()) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,config,get,kafka,server,properties,null,kafka,properties,put,all,config,get,kafka,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,config,is,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1502179982;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if (config.getKafkaServerProperties() != null) {_			kafkaProperties.putAll(config.getKafkaServerProperties())__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			if (config.isHideKafkaBehindProxy()) {_				NetworkFailuresProxy proxy = createProxy(KAFKA_HOST, kafkaPort)__				kafkaProperties.put("advertised.port", proxy.getLocalPort())__			}__			_			if (config.isSecureMode()) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,config,get,kafka,server,properties,null,kafka,properties,put,all,config,get,kafka,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,config,is,hide,kafka,behind,proxy,network,failures,proxy,proxy,create,proxy,kafka,port,kafka,properties,put,advertised,port,proxy,get,local,port,if,config,is,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1502179982;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if (config.getKafkaServerProperties() != null) {_			kafkaProperties.putAll(config.getKafkaServerProperties())__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			if (config.isHideKafkaBehindProxy()) {_				NetworkFailuresProxy proxy = createProxy(KAFKA_HOST, kafkaPort)__				kafkaProperties.put("advertised.port", proxy.getLocalPort())__			}__			_			if (config.isSecureMode()) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,config,get,kafka,server,properties,null,kafka,properties,put,all,config,get,kafka,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,config,is,hide,kafka,behind,proxy,network,failures,proxy,proxy,create,proxy,kafka,port,kafka,properties,put,advertised,port,proxy,get,local,port,if,config,is,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1509404699;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if (config.getKafkaServerProperties() != null) {_			kafkaProperties.putAll(config.getKafkaServerProperties())__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			if (config.isHideKafkaBehindProxy()) {_				NetworkFailuresProxy proxy = createProxy(KAFKA_HOST, kafkaPort)__				kafkaProperties.put("advertised.port", proxy.getLocalPort())__			}__			_			if (config.isSecureMode()) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,config,get,kafka,server,properties,null,kafka,properties,put,all,config,get,kafka,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,config,is,hide,kafka,behind,proxy,network,failures,proxy,proxy,create,proxy,kafka,port,kafka,properties,put,advertised,port,proxy,get,local,port,if,config,is,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
KafkaTestEnvironmentImpl -> protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception;1550834396;Copied from com.github.sakserv.minicluster.KafkaLocalBrokerIntegrationTest (ASL licensed).;protected KafkaServer getKafkaServer(int brokerId, File tmpFolder) throws Exception {_		Properties kafkaProperties = new Properties()___		_		kafkaProperties.put("advertised.host.name", KAFKA_HOST)__		kafkaProperties.put("broker.id", Integer.toString(brokerId))__		kafkaProperties.put("log.dir", tmpFolder.toString())__		kafkaProperties.put("zookeeper.connect", zookeeperConnectionString)__		kafkaProperties.put("message.max.bytes", String.valueOf(50 * 1024 * 1024))__		kafkaProperties.put("replica.fetch.max.bytes", String.valueOf(50 * 1024 * 1024))___		_		kafkaProperties.put("zookeeper.session.timeout.ms", zkTimeout)__		kafkaProperties.put("zookeeper.connection.timeout.ms", zkTimeout)__		if (config.getKafkaServerProperties() != null) {_			kafkaProperties.putAll(config.getKafkaServerProperties())__		}__		final int numTries = 5___		for (int i = 1_ i <= numTries_ i++) {_			int kafkaPort = NetUtils.getAvailablePort()__			kafkaProperties.put("port", Integer.toString(kafkaPort))___			if (config.isHideKafkaBehindProxy()) {_				NetworkFailuresProxy proxy = createProxy(KAFKA_HOST, kafkaPort)__				kafkaProperties.put("advertised.port", proxy.getLocalPort())__			}__			_			if (config.isSecureMode()) {_				LOG.info("Adding Kafka secure configurations")__				kafkaProperties.put("listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.put("advertised.listeners", "SASL_PLAINTEXT://" + KAFKA_HOST + ":" + kafkaPort)__				kafkaProperties.putAll(getSecureProperties())__			}__			KafkaConfig kafkaConfig = new KafkaConfig(kafkaProperties)___			try {_				scala.Option<String> stringNone = scala.Option.apply(null)__				KafkaServer server = new KafkaServer(kafkaConfig, SystemTime$.MODULE$, stringNone)__				server.startup()__				return server__			}_			catch (KafkaException e) {_				if (e.getCause() instanceof BindException) {_					_					LOG.info("Port conflict when starting Kafka Broker. Retrying...")__				}_				else {_					throw e__				}_			}_		}__		throw new Exception("Could not start Kafka after " + numTries + " retries due to port conflicts.")__	};copied,from,com,github,sakserv,minicluster,kafka,local,broker,integration,test,asl,licensed;protected,kafka,server,get,kafka,server,int,broker,id,file,tmp,folder,throws,exception,properties,kafka,properties,new,properties,kafka,properties,put,advertised,host,name,kafka,properties,put,broker,id,integer,to,string,broker,id,kafka,properties,put,log,dir,tmp,folder,to,string,kafka,properties,put,zookeeper,connect,zookeeper,connection,string,kafka,properties,put,message,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,replica,fetch,max,bytes,string,value,of,50,1024,1024,kafka,properties,put,zookeeper,session,timeout,ms,zk,timeout,kafka,properties,put,zookeeper,connection,timeout,ms,zk,timeout,if,config,get,kafka,server,properties,null,kafka,properties,put,all,config,get,kafka,server,properties,final,int,num,tries,5,for,int,i,1,i,num,tries,i,int,kafka,port,net,utils,get,available,port,kafka,properties,put,port,integer,to,string,kafka,port,if,config,is,hide,kafka,behind,proxy,network,failures,proxy,proxy,create,proxy,kafka,port,kafka,properties,put,advertised,port,proxy,get,local,port,if,config,is,secure,mode,log,info,adding,kafka,secure,configurations,kafka,properties,put,listeners,kafka,port,kafka,properties,put,advertised,listeners,kafka,port,kafka,properties,put,all,get,secure,properties,kafka,config,kafka,config,new,kafka,config,kafka,properties,try,scala,option,string,string,none,scala,option,apply,null,kafka,server,server,new,kafka,server,kafka,config,system,time,module,string,none,server,startup,return,server,catch,kafka,exception,e,if,e,get,cause,instanceof,bind,exception,log,info,port,conflict,when,starting,kafka,broker,retrying,else,throw,e,throw,new,exception,could,not,start,kafka,after,num,tries,retries,due,to,port,conflicts
