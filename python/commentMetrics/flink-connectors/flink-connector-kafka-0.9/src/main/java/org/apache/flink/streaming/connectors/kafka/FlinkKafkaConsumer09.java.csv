# id;timestamp;commentText;codeText;commentWords;codeWords
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1480685315;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		super(topics, deserializer)___		this.properties = checkNotNull(props, "props")__		setDeserializer(this.properties)___		_		try {_			if (properties.containsKey(KEY_POLL_TIMEOUT)) {_				this.pollTimeout = Long.parseLong(properties.getProperty(KEY_POLL_TIMEOUT))__			} else {_				this.pollTimeout = DEFAULT_POLL_TIMEOUT__			}_		}_		catch (Exception e) {_			throw new IllegalArgumentException("Cannot parse poll timeout for '" + KEY_POLL_TIMEOUT + '\'', e)__		}_	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,super,topics,deserializer,this,properties,check,not,null,props,props,set,deserializer,this,properties,try,if,properties,contains,key,this,poll,timeout,long,parse,long,properties,get,property,else,this,poll,timeout,catch,exception,e,throw,new,illegal,argument,exception,cannot,parse,poll,timeout,for,e
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1484926405;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		super(topics, deserializer)___		this.properties = checkNotNull(props, "props")__		setDeserializer(this.properties)___		_		try {_			if (properties.containsKey(KEY_POLL_TIMEOUT)) {_				this.pollTimeout = Long.parseLong(properties.getProperty(KEY_POLL_TIMEOUT))__			} else {_				this.pollTimeout = DEFAULT_POLL_TIMEOUT__			}_		}_		catch (Exception e) {_			throw new IllegalArgumentException("Cannot parse poll timeout for '" + KEY_POLL_TIMEOUT + '\'', e)__		}_	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,super,topics,deserializer,this,properties,check,not,null,props,props,set,deserializer,this,properties,try,if,properties,contains,key,this,poll,timeout,long,parse,long,properties,get,property,else,this,poll,timeout,catch,exception,e,throw,new,illegal,argument,exception,cannot,parse,poll,timeout,for,e
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1487173364;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		super(topics, deserializer)___		this.properties = checkNotNull(props, "props")__		setDeserializer(this.properties)___		_		try {_			if (properties.containsKey(KEY_POLL_TIMEOUT)) {_				this.pollTimeout = Long.parseLong(properties.getProperty(KEY_POLL_TIMEOUT))__			} else {_				this.pollTimeout = DEFAULT_POLL_TIMEOUT__			}_		}_		catch (Exception e) {_			throw new IllegalArgumentException("Cannot parse poll timeout for '" + KEY_POLL_TIMEOUT + '\'', e)__		}_	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,super,topics,deserializer,this,properties,check,not,null,props,props,set,deserializer,this,properties,try,if,properties,contains,key,this,poll,timeout,long,parse,long,properties,get,property,else,this,poll,timeout,catch,exception,e,throw,new,illegal,argument,exception,cannot,parse,poll,timeout,for,e
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1488214488;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		super(topics, deserializer)___		this.properties = checkNotNull(props, "props")__		setDeserializer(this.properties)___		_		try {_			if (properties.containsKey(KEY_POLL_TIMEOUT)) {_				this.pollTimeout = Long.parseLong(properties.getProperty(KEY_POLL_TIMEOUT))__			} else {_				this.pollTimeout = DEFAULT_POLL_TIMEOUT__			}_		}_		catch (Exception e) {_			throw new IllegalArgumentException("Cannot parse poll timeout for '" + KEY_POLL_TIMEOUT + '\'', e)__		}_	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,super,topics,deserializer,this,properties,check,not,null,props,props,set,deserializer,this,properties,try,if,properties,contains,key,this,poll,timeout,long,parse,long,properties,get,property,else,this,poll,timeout,catch,exception,e,throw,new,illegal,argument,exception,cannot,parse,poll,timeout,for,e
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1489510697;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		super(topics, deserializer)___		this.properties = checkNotNull(props, "props")__		setDeserializer(this.properties)___		_		try {_			if (properties.containsKey(KEY_POLL_TIMEOUT)) {_				this.pollTimeout = Long.parseLong(properties.getProperty(KEY_POLL_TIMEOUT))__			} else {_				this.pollTimeout = DEFAULT_POLL_TIMEOUT__			}_		}_		catch (Exception e) {_			throw new IllegalArgumentException("Cannot parse poll timeout for '" + KEY_POLL_TIMEOUT + '\'', e)__		}_	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,super,topics,deserializer,this,properties,check,not,null,props,props,set,deserializer,this,properties,try,if,properties,contains,key,this,poll,timeout,long,parse,long,properties,get,property,else,this,poll,timeout,catch,exception,e,throw,new,illegal,argument,exception,cannot,parse,poll,timeout,for,e
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1494830990;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		super(topics, deserializer)___		this.properties = checkNotNull(props, "props")__		setDeserializer(this.properties)___		_		try {_			if (properties.containsKey(KEY_POLL_TIMEOUT)) {_				this.pollTimeout = Long.parseLong(properties.getProperty(KEY_POLL_TIMEOUT))__			} else {_				this.pollTimeout = DEFAULT_POLL_TIMEOUT__			}_		}_		catch (Exception e) {_			throw new IllegalArgumentException("Cannot parse poll timeout for '" + KEY_POLL_TIMEOUT + '\'', e)__		}_	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,super,topics,deserializer,this,properties,check,not,null,props,props,set,deserializer,this,properties,try,if,properties,contains,key,this,poll,timeout,long,parse,long,properties,get,property,else,this,poll,timeout,catch,exception,e,throw,new,illegal,argument,exception,cannot,parse,poll,timeout,for,e
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1495923077;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		super(topics, deserializer)___		this.properties = checkNotNull(props, "props")__		setDeserializer(this.properties)___		_		try {_			if (properties.containsKey(KEY_POLL_TIMEOUT)) {_				this.pollTimeout = Long.parseLong(properties.getProperty(KEY_POLL_TIMEOUT))__			} else {_				this.pollTimeout = DEFAULT_POLL_TIMEOUT__			}_		}_		catch (Exception e) {_			throw new IllegalArgumentException("Cannot parse poll timeout for '" + KEY_POLL_TIMEOUT + '\'', e)__		}_	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,super,topics,deserializer,this,properties,check,not,null,props,props,set,deserializer,this,properties,try,if,properties,contains,key,this,poll,timeout,long,parse,long,properties,get,property,else,this,poll,timeout,catch,exception,e,throw,new,illegal,argument,exception,cannot,parse,poll,timeout,for,e
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1498894422;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		super(topics, null, deserializer, getLong(props, KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS, PARTITION_DISCOVERY_DISABLED))___		this.properties = checkNotNull(props, "props")__		setDeserializer(this.properties)___		_		try {_			if (properties.containsKey(KEY_POLL_TIMEOUT)) {_				this.pollTimeout = Long.parseLong(properties.getProperty(KEY_POLL_TIMEOUT))__			} else {_				this.pollTimeout = DEFAULT_POLL_TIMEOUT__			}_		}_		catch (Exception e) {_			throw new IllegalArgumentException("Cannot parse poll timeout for '" + KEY_POLL_TIMEOUT + '\'', e)__		}_	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,super,topics,null,deserializer,get,long,props,this,properties,check,not,null,props,props,set,deserializer,this,properties,try,if,properties,contains,key,this,poll,timeout,long,parse,long,properties,get,property,else,this,poll,timeout,catch,exception,e,throw,new,illegal,argument,exception,cannot,parse,poll,timeout,for,e
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1500863105;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		super(topics, null, deserializer, getLong(props, KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS, PARTITION_DISCOVERY_DISABLED))___		this.properties = checkNotNull(props, "props")__		setDeserializer(this.properties)___		_		try {_			if (properties.containsKey(KEY_POLL_TIMEOUT)) {_				this.pollTimeout = Long.parseLong(properties.getProperty(KEY_POLL_TIMEOUT))__			} else {_				this.pollTimeout = DEFAULT_POLL_TIMEOUT__			}_		}_		catch (Exception e) {_			throw new IllegalArgumentException("Cannot parse poll timeout for '" + KEY_POLL_TIMEOUT + '\'', e)__		}_	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,super,topics,null,deserializer,get,long,props,this,properties,check,not,null,props,props,set,deserializer,this,properties,try,if,properties,contains,key,this,poll,timeout,long,parse,long,properties,get,property,else,this,poll,timeout,catch,exception,e,throw,new,illegal,argument,exception,cannot,parse,poll,timeout,for,e
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1509723634;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		super(topics, null, deserializer, getLong(props, KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS, PARTITION_DISCOVERY_DISABLED))___		this.properties = checkNotNull(props, "props")__		setDeserializer(this.properties)___		_		try {_			if (properties.containsKey(KEY_POLL_TIMEOUT)) {_				this.pollTimeout = Long.parseLong(properties.getProperty(KEY_POLL_TIMEOUT))__			} else {_				this.pollTimeout = DEFAULT_POLL_TIMEOUT__			}_		}_		catch (Exception e) {_			throw new IllegalArgumentException("Cannot parse poll timeout for '" + KEY_POLL_TIMEOUT + '\'', e)__		}_	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,super,topics,null,deserializer,get,long,props,this,properties,check,not,null,props,props,set,deserializer,this,properties,try,if,properties,contains,key,this,poll,timeout,long,parse,long,properties,get,property,else,this,poll,timeout,catch,exception,e,throw,new,illegal,argument,exception,cannot,parse,poll,timeout,for,e
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1512405117;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(topics, null, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,this,topics,null,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1515757409;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(topics, null, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,this,topics,null,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1517943538;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(topics, null, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,this,topics,null,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(topics, null, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,this,topics,null,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(topics, null, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,this,topics,null,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1520440672;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(topics, null, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,this,topics,null,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props);1550834388;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics and a key/value deserialization schema.__@param topics_The Kafka topics to read from._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(topics, null, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,and,a,key,value,deserialization,schema,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,keyed,deserialization,schema,t,deserializer,properties,props,this,topics,null,deserializer,props
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1480685315;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1484926405;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1487173364;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1488214488;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1489510697;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1494830990;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1495923077;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1498894422;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1500863105;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1509723634;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1512405117;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1515757409;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1517943538;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1519973085;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1519973085;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getCanonicalName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,canonical,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1520440672;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1550834388;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> private static void setDeserializer(Properties props);1550834396;Makes sure that the ByteArrayDeserializer is registered in the Kafka properties.__@param props The Kafka properties to register the serializer in.;private static void setDeserializer(Properties props) {_		final String deSerName = ByteArrayDeserializer.class.getName()___		Object keyDeSer = props.get(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		Object valDeSer = props.get(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)___		if (keyDeSer != null && !keyDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured key DeSerializer ({})", ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG)__		}_		if (valDeSer != null && !valDeSer.equals(deSerName)) {_			LOG.warn("Ignoring configured value DeSerializer ({})", ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG)__		}__		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, deSerName)__		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, deSerName)__	};makes,sure,that,the,byte,array,deserializer,is,registered,in,the,kafka,properties,param,props,the,kafka,properties,to,register,the,serializer,in;private,static,void,set,deserializer,properties,props,final,string,de,ser,name,byte,array,deserializer,class,get,name,object,key,de,ser,props,get,consumer,config,object,val,de,ser,props,get,consumer,config,if,key,de,ser,null,key,de,ser,equals,de,ser,name,log,warn,ignoring,configured,key,de,serializer,consumer,config,if,val,de,ser,null,val,de,ser,equals,de,ser,name,log,warn,ignoring,configured,value,de,serializer,consumer,config,props,put,consumer,config,de,ser,name,props,put,consumer,config,de,ser,name
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props);1512405117;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(null, subscriptionPattern, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,keyed,deserialization,schema,t,deserializer,properties,props,this,null,subscription,pattern,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props);1515757409;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(null, subscriptionPattern, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,keyed,deserialization,schema,t,deserializer,properties,props,this,null,subscription,pattern,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props);1517943538;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(null, subscriptionPattern, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,keyed,deserialization,schema,t,deserializer,properties,props,this,null,subscription,pattern,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(null, subscriptionPattern, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,keyed,deserialization,schema,t,deserializer,properties,props,this,null,subscription,pattern,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(null, subscriptionPattern, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,keyed,deserialization,schema,t,deserializer,properties,props,this,null,subscription,pattern,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props);1520440672;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(null, subscriptionPattern, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,keyed,deserialization,schema,t,deserializer,properties,props,this,null,subscription,pattern,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props);1550834388;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(null, subscriptionPattern, deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,keyed,deserialization,schema,t,deserializer,properties,props,this,null,subscription,pattern,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1480685315;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1484926405;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1487173364;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1488214488;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1489510697;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1494830990;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1495923077;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1498894422;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1500863105;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1509723634;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1512405117;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1515757409;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1517943538;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1520440672;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1550834388;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KeyedDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,keyed,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props);1550834396;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing multiple topics to the consumer.__@param topics_The Kafka topics to read from._@param deserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties that are used to configure both the fetcher and the offset handler.;public FlinkKafkaConsumer09(List<String> topics, DeserializationSchema<T> deserializer, Properties props) {_		this(topics, new KafkaDeserializationSchemaWrapper<>(deserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,multiple,topics,to,the,consumer,param,topics,the,kafka,topics,to,read,from,param,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,that,are,used,to,configure,both,the,fetcher,and,the,offset,handler;public,flink,kafka,consumer09,list,string,topics,deserialization,schema,t,deserializer,properties,props,this,topics,new,kafka,deserialization,schema,wrapper,deserializer,props
FlinkKafkaConsumer09 -> private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions);1480685315;Converts a list of Kafka PartitionInfo's to Flink's KafkaTopicPartition (which are serializable)__@param partitions A list of Kafka PartitionInfos._@return A list of KafkaTopicPartitions;private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions) {_		checkNotNull(partitions)___		List<KafkaTopicPartition> ret = new ArrayList<>(partitions.size())__		for (PartitionInfo pi : partitions) {_			ret.add(new KafkaTopicPartition(pi.topic(), pi.partition()))__		}_		return ret__	};converts,a,list,of,kafka,partition,info,s,to,flink,s,kafka,topic,partition,which,are,serializable,param,partitions,a,list,of,kafka,partition,infos,return,a,list,of,kafka,topic,partitions;private,static,list,kafka,topic,partition,convert,to,flink,kafka,topic,partition,list,partition,info,partitions,check,not,null,partitions,list,kafka,topic,partition,ret,new,array,list,partitions,size,for,partition,info,pi,partitions,ret,add,new,kafka,topic,partition,pi,topic,pi,partition,return,ret
FlinkKafkaConsumer09 -> private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions);1484926405;Converts a list of Kafka PartitionInfo's to Flink's KafkaTopicPartition (which are serializable)__@param partitions A list of Kafka PartitionInfos._@return A list of KafkaTopicPartitions;private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions) {_		checkNotNull(partitions)___		List<KafkaTopicPartition> ret = new ArrayList<>(partitions.size())__		for (PartitionInfo pi : partitions) {_			ret.add(new KafkaTopicPartition(pi.topic(), pi.partition()))__		}_		return ret__	};converts,a,list,of,kafka,partition,info,s,to,flink,s,kafka,topic,partition,which,are,serializable,param,partitions,a,list,of,kafka,partition,infos,return,a,list,of,kafka,topic,partitions;private,static,list,kafka,topic,partition,convert,to,flink,kafka,topic,partition,list,partition,info,partitions,check,not,null,partitions,list,kafka,topic,partition,ret,new,array,list,partitions,size,for,partition,info,pi,partitions,ret,add,new,kafka,topic,partition,pi,topic,pi,partition,return,ret
FlinkKafkaConsumer09 -> private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions);1487173364;Converts a list of Kafka PartitionInfo's to Flink's KafkaTopicPartition (which are serializable)__@param partitions A list of Kafka PartitionInfos._@return A list of KafkaTopicPartitions;private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions) {_		checkNotNull(partitions)___		List<KafkaTopicPartition> ret = new ArrayList<>(partitions.size())__		for (PartitionInfo pi : partitions) {_			ret.add(new KafkaTopicPartition(pi.topic(), pi.partition()))__		}_		return ret__	};converts,a,list,of,kafka,partition,info,s,to,flink,s,kafka,topic,partition,which,are,serializable,param,partitions,a,list,of,kafka,partition,infos,return,a,list,of,kafka,topic,partitions;private,static,list,kafka,topic,partition,convert,to,flink,kafka,topic,partition,list,partition,info,partitions,check,not,null,partitions,list,kafka,topic,partition,ret,new,array,list,partitions,size,for,partition,info,pi,partitions,ret,add,new,kafka,topic,partition,pi,topic,pi,partition,return,ret
FlinkKafkaConsumer09 -> private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions);1488214488;Converts a list of Kafka PartitionInfo's to Flink's KafkaTopicPartition (which are serializable)__@param partitions A list of Kafka PartitionInfos._@return A list of KafkaTopicPartitions;private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions) {_		checkNotNull(partitions)___		List<KafkaTopicPartition> ret = new ArrayList<>(partitions.size())__		for (PartitionInfo pi : partitions) {_			ret.add(new KafkaTopicPartition(pi.topic(), pi.partition()))__		}_		return ret__	};converts,a,list,of,kafka,partition,info,s,to,flink,s,kafka,topic,partition,which,are,serializable,param,partitions,a,list,of,kafka,partition,infos,return,a,list,of,kafka,topic,partitions;private,static,list,kafka,topic,partition,convert,to,flink,kafka,topic,partition,list,partition,info,partitions,check,not,null,partitions,list,kafka,topic,partition,ret,new,array,list,partitions,size,for,partition,info,pi,partitions,ret,add,new,kafka,topic,partition,pi,topic,pi,partition,return,ret
FlinkKafkaConsumer09 -> private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions);1489510697;Converts a list of Kafka PartitionInfo's to Flink's KafkaTopicPartition (which are serializable)__@param partitions A list of Kafka PartitionInfos._@return A list of KafkaTopicPartitions;private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions) {_		checkNotNull(partitions)___		List<KafkaTopicPartition> ret = new ArrayList<>(partitions.size())__		for (PartitionInfo pi : partitions) {_			ret.add(new KafkaTopicPartition(pi.topic(), pi.partition()))__		}_		return ret__	};converts,a,list,of,kafka,partition,info,s,to,flink,s,kafka,topic,partition,which,are,serializable,param,partitions,a,list,of,kafka,partition,infos,return,a,list,of,kafka,topic,partitions;private,static,list,kafka,topic,partition,convert,to,flink,kafka,topic,partition,list,partition,info,partitions,check,not,null,partitions,list,kafka,topic,partition,ret,new,array,list,partitions,size,for,partition,info,pi,partitions,ret,add,new,kafka,topic,partition,pi,topic,pi,partition,return,ret
FlinkKafkaConsumer09 -> private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions);1494830990;Converts a list of Kafka PartitionInfo's to Flink's KafkaTopicPartition (which are serializable)__@param partitions A list of Kafka PartitionInfos._@return A list of KafkaTopicPartitions;private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions) {_		checkNotNull(partitions)___		List<KafkaTopicPartition> ret = new ArrayList<>(partitions.size())__		for (PartitionInfo pi : partitions) {_			ret.add(new KafkaTopicPartition(pi.topic(), pi.partition()))__		}_		return ret__	};converts,a,list,of,kafka,partition,info,s,to,flink,s,kafka,topic,partition,which,are,serializable,param,partitions,a,list,of,kafka,partition,infos,return,a,list,of,kafka,topic,partitions;private,static,list,kafka,topic,partition,convert,to,flink,kafka,topic,partition,list,partition,info,partitions,check,not,null,partitions,list,kafka,topic,partition,ret,new,array,list,partitions,size,for,partition,info,pi,partitions,ret,add,new,kafka,topic,partition,pi,topic,pi,partition,return,ret
FlinkKafkaConsumer09 -> private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions);1495923077;Converts a list of Kafka PartitionInfo's to Flink's KafkaTopicPartition (which are serializable).__@param partitions A list of Kafka PartitionInfos._@return A list of KafkaTopicPartitions;private static List<KafkaTopicPartition> convertToFlinkKafkaTopicPartition(List<PartitionInfo> partitions) {_		checkNotNull(partitions)___		List<KafkaTopicPartition> ret = new ArrayList<>(partitions.size())__		for (PartitionInfo pi : partitions) {_			ret.add(new KafkaTopicPartition(pi.topic(), pi.partition()))__		}_		return ret__	};converts,a,list,of,kafka,partition,info,s,to,flink,s,kafka,topic,partition,which,are,serializable,param,partitions,a,list,of,kafka,partition,infos,return,a,list,of,kafka,topic,partitions;private,static,list,kafka,topic,partition,convert,to,flink,kafka,topic,partition,list,partition,info,partitions,check,not,null,partitions,list,kafka,topic,partition,ret,new,array,list,partitions,size,for,partition,info,pi,partitions,ret,add,new,kafka,topic,partition,pi,topic,pi,partition,return,ret
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1480685315;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1484926405;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1487173364;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1488214488;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1489510697;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1494830990;Creates a new Kafka streaming source consumer for Kafka 0.9.x__This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1495923077;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1498894422;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1500863105;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1509723634;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1512405117;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1515757409;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1517943538;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1520440672;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props);1550834388;Creates a new Kafka streaming source consumer for Kafka 0.9.x__<p>This constructor allows passing a {@see KeyedDeserializationSchema} for reading key/value_pairs, offsets, and topic names from Kafka.__@param topic_The name of the topic that should be consumed._@param deserializer_The keyed de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, KeyedDeserializationSchema<T> deserializer, Properties props) {_		this(Collections.singletonList(topic), deserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,p,this,constructor,allows,passing,a,see,keyed,deserialization,schema,for,reading,key,value,pairs,offsets,and,topic,names,from,kafka,param,topic,the,name,of,the,topic,that,should,be,consumed,param,deserializer,the,keyed,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,keyed,deserialization,schema,t,deserializer,properties,props,this,collections,singleton,list,topic,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props);1512405117;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(subscriptionPattern, new KeyedDeserializationSchemaWrapper<>(valueDeserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,deserialization,schema,t,value,deserializer,properties,props,this,subscription,pattern,new,keyed,deserialization,schema,wrapper,value,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props);1515757409;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(subscriptionPattern, new KeyedDeserializationSchemaWrapper<>(valueDeserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,deserialization,schema,t,value,deserializer,properties,props,this,subscription,pattern,new,keyed,deserialization,schema,wrapper,value,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props);1517943538;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(subscriptionPattern, new KeyedDeserializationSchemaWrapper<>(valueDeserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,deserialization,schema,t,value,deserializer,properties,props,this,subscription,pattern,new,keyed,deserialization,schema,wrapper,value,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(subscriptionPattern, new KeyedDeserializationSchemaWrapper<>(valueDeserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,deserialization,schema,t,value,deserializer,properties,props,this,subscription,pattern,new,keyed,deserialization,schema,wrapper,value,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(subscriptionPattern, new KeyedDeserializationSchemaWrapper<>(valueDeserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,deserialization,schema,t,value,deserializer,properties,props,this,subscription,pattern,new,keyed,deserialization,schema,wrapper,value,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props);1520440672;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(subscriptionPattern, new KeyedDeserializationSchemaWrapper<>(valueDeserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,deserialization,schema,t,value,deserializer,properties,props,this,subscription,pattern,new,keyed,deserialization,schema,wrapper,value,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props);1550834388;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(subscriptionPattern, new KeyedDeserializationSchemaWrapper<>(valueDeserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,deserialization,schema,t,value,deserializer,properties,props,this,subscription,pattern,new,keyed,deserialization,schema,wrapper,value,deserializer,props
FlinkKafkaConsumer09 -> @PublicEvolving 	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props);1550834396;Creates a new Kafka streaming source consumer for Kafka 0.9.x. Use this constructor to_subscribe to multiple topics based on a regular expression pattern.__<p>If partition discovery is enabled (by setting a non-negative value for_{@link FlinkKafkaConsumer09#KEY_PARTITION_DISCOVERY_INTERVAL_MILLIS} in the properties), topics_with names matching the pattern will also be subscribed to as they are created on the fly.__@param subscriptionPattern_The regular expression for a pattern of topic names to subscribe to._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;@PublicEvolving_	public FlinkKafkaConsumer09(Pattern subscriptionPattern, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(subscriptionPattern, new KafkaDeserializationSchemaWrapper<>(valueDeserializer), props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,use,this,constructor,to,subscribe,to,multiple,topics,based,on,a,regular,expression,pattern,p,if,partition,discovery,is,enabled,by,setting,a,non,negative,value,for,link,flink,kafka,consumer09,in,the,properties,topics,with,names,matching,the,pattern,will,also,be,subscribed,to,as,they,are,created,on,the,fly,param,subscription,pattern,the,regular,expression,for,a,pattern,of,topic,names,to,subscribe,to,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,evolving,public,flink,kafka,consumer09,pattern,subscription,pattern,deserialization,schema,t,value,deserializer,properties,props,this,subscription,pattern,new,kafka,deserialization,schema,wrapper,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1480685315;Creates a new Kafka streaming source consumer for Kafka 0.9.x__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1484926405;Creates a new Kafka streaming source consumer for Kafka 0.9.x__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1487173364;Creates a new Kafka streaming source consumer for Kafka 0.9.x__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1488214488;Creates a new Kafka streaming source consumer for Kafka 0.9.x__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1489510697;Creates a new Kafka streaming source consumer for Kafka 0.9.x__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1494830990;Creates a new Kafka streaming source consumer for Kafka 0.9.x__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1495923077;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1498894422;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1500863105;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1509723634;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1512405117;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1515757409;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1517943538;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1519973085;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1520440672;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1550834388;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
FlinkKafkaConsumer09 -> public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props);1550834396;Creates a new Kafka streaming source consumer for Kafka 0.9.x .__@param topic_The name of the topic that should be consumed._@param valueDeserializer_The de-/serializer used to convert between Kafka's byte messages and Flink's objects._@param props_The properties used to configure the Kafka consumer client, and the ZooKeeper client.;public FlinkKafkaConsumer09(String topic, DeserializationSchema<T> valueDeserializer, Properties props) {_		this(Collections.singletonList(topic), valueDeserializer, props)__	};creates,a,new,kafka,streaming,source,consumer,for,kafka,0,9,x,param,topic,the,name,of,the,topic,that,should,be,consumed,param,value,deserializer,the,de,serializer,used,to,convert,between,kafka,s,byte,messages,and,flink,s,objects,param,props,the,properties,used,to,configure,the,kafka,consumer,client,and,the,zoo,keeper,client;public,flink,kafka,consumer09,string,topic,deserialization,schema,t,value,deserializer,properties,props,this,collections,singleton,list,topic,value,deserializer,props
