# id;timestamp;commentText;codeText;commentWords;codeWords
Kafka08PartitionDiscoverer -> public List<KafkaTopicPartitionLeader> getPartitionLeadersForTopics(List<String> topics);1498894422;Send request to Kafka to get partitions for topics.__@param topics The name of the topics.;public List<KafkaTopicPartitionLeader> getPartitionLeadersForTopics(List<String> topics) {_		List<KafkaTopicPartitionLeader> partitions = new LinkedList<>()___		retryLoop: for (int retry = 0_ retry < numRetries_ retry++) {_			brokersLoop: for (int arrIdx = 0_ arrIdx < seedBrokerAddresses.length_ arrIdx++) {_				LOG.info("Trying to get topic metadata from broker {} in try {}/{}", seedBrokerAddresses[currentContactSeedBrokerIndex], retry, numRetries)___				try {_					_					partitions.clear()___					for (TopicMetadata item : consumer.send(new TopicMetadataRequest(topics)).topicsMetadata()) {_						if (item.errorCode() != ErrorMapping.NoError()) {_							_							LOG.warn("Error while getting metadata from broker {} to find partitions for {}. Error: {}.",_								seedBrokerAddresses[currentContactSeedBrokerIndex], topics.toString(), ErrorMapping.exceptionFor(item.errorCode()).getMessage())___							useNextAddressAsNewContactSeedBroker()__							continue brokersLoop__						}__						if (!topics.contains(item.topic())) {_							LOG.warn("Received metadata from topic " + item.topic() + " even though it was not requested. Skipping ...")___							useNextAddressAsNewContactSeedBroker()__							continue brokersLoop__						}__						for (PartitionMetadata part : item.partitionsMetadata()) {_							Node leader = brokerToNode(part.leader())__							KafkaTopicPartition ktp = new KafkaTopicPartition(item.topic(), part.partitionId())__							KafkaTopicPartitionLeader pInfo = new KafkaTopicPartitionLeader(ktp, leader)__							partitions.add(pInfo)__						}_					}_					break retryLoop_ _				}_				catch (Exception e) {_					_					validateSeedBrokers(seedBrokerAddresses, e)__					LOG.warn("Error communicating with broker {} to find partitions for {}. {} Message: {}",_						seedBrokerAddresses[currentContactSeedBrokerIndex], topics, e.getClass().getName(), e.getMessage())__					LOG.debug("Detailed trace", e)___					_					try {_						Thread.sleep(500)__					} catch (InterruptedException e1) {_						_					}__					useNextAddressAsNewContactSeedBroker()__				}_			} _		} __		return partitions__	};send,request,to,kafka,to,get,partitions,for,topics,param,topics,the,name,of,the,topics;public,list,kafka,topic,partition,leader,get,partition,leaders,for,topics,list,string,topics,list,kafka,topic,partition,leader,partitions,new,linked,list,retry,loop,for,int,retry,0,retry,num,retries,retry,brokers,loop,for,int,arr,idx,0,arr,idx,seed,broker,addresses,length,arr,idx,log,info,trying,to,get,topic,metadata,from,broker,in,try,seed,broker,addresses,current,contact,seed,broker,index,retry,num,retries,try,partitions,clear,for,topic,metadata,item,consumer,send,new,topic,metadata,request,topics,topics,metadata,if,item,error,code,error,mapping,no,error,log,warn,error,while,getting,metadata,from,broker,to,find,partitions,for,error,seed,broker,addresses,current,contact,seed,broker,index,topics,to,string,error,mapping,exception,for,item,error,code,get,message,use,next,address,as,new,contact,seed,broker,continue,brokers,loop,if,topics,contains,item,topic,log,warn,received,metadata,from,topic,item,topic,even,though,it,was,not,requested,skipping,use,next,address,as,new,contact,seed,broker,continue,brokers,loop,for,partition,metadata,part,item,partitions,metadata,node,leader,broker,to,node,part,leader,kafka,topic,partition,ktp,new,kafka,topic,partition,item,topic,part,partition,id,kafka,topic,partition,leader,p,info,new,kafka,topic,partition,leader,ktp,leader,partitions,add,p,info,break,retry,loop,catch,exception,e,validate,seed,brokers,seed,broker,addresses,e,log,warn,error,communicating,with,broker,to,find,partitions,for,message,seed,broker,addresses,current,contact,seed,broker,index,topics,e,get,class,get,name,e,get,message,log,debug,detailed,trace,e,try,thread,sleep,500,catch,interrupted,exception,e1,use,next,address,as,new,contact,seed,broker,return,partitions
Kafka08PartitionDiscoverer -> public List<KafkaTopicPartitionLeader> getPartitionLeadersForTopics(List<String> topics);1511347989;Send request to Kafka to get partitions for topics.__@param topics The name of the topics.;public List<KafkaTopicPartitionLeader> getPartitionLeadersForTopics(List<String> topics) {_		List<KafkaTopicPartitionLeader> partitions = new LinkedList<>()___		retryLoop: for (int retry = 0_ retry < numRetries_ retry++) {_			brokersLoop: for (int arrIdx = 0_ arrIdx < seedBrokerAddresses.length_ arrIdx++) {_				LOG.info("Trying to get topic metadata from broker {} in try {}/{}", seedBrokerAddresses[currentContactSeedBrokerIndex], retry, numRetries)___				try {_					_					partitions.clear()___					for (TopicMetadata item : consumer.send(new TopicMetadataRequest(topics)).topicsMetadata()) {_						if (item.errorCode() != ErrorMapping.NoError()) {_							_							LOG.warn("Error while getting metadata from broker {} to find partitions for {}. Error: {}.",_								seedBrokerAddresses[currentContactSeedBrokerIndex], topics.toString(), ErrorMapping.exceptionFor(item.errorCode()).getMessage())___							useNextAddressAsNewContactSeedBroker()__							continue brokersLoop__						}__						if (!topics.contains(item.topic())) {_							LOG.warn("Received metadata from topic " + item.topic() + " even though it was not requested. Skipping ...")___							useNextAddressAsNewContactSeedBroker()__							continue brokersLoop__						}__						for (PartitionMetadata part : item.partitionsMetadata()) {_							Node leader = brokerToNode(part.leader())__							KafkaTopicPartition ktp = new KafkaTopicPartition(item.topic(), part.partitionId())__							KafkaTopicPartitionLeader pInfo = new KafkaTopicPartitionLeader(ktp, leader)__							partitions.add(pInfo)__						}_					}_					break retryLoop_ _				}_				catch (Exception e) {_					_					validateSeedBrokers(seedBrokerAddresses, e)__					LOG.warn("Error communicating with broker {} to find partitions for {}. {} Message: {}",_						seedBrokerAddresses[currentContactSeedBrokerIndex], topics, e.getClass().getName(), e.getMessage())__					LOG.debug("Detailed trace", e)___					_					try {_						Thread.sleep(500)__					} catch (InterruptedException e1) {_						_					}__					useNextAddressAsNewContactSeedBroker()__				}_			} _		} __		return partitions__	};send,request,to,kafka,to,get,partitions,for,topics,param,topics,the,name,of,the,topics;public,list,kafka,topic,partition,leader,get,partition,leaders,for,topics,list,string,topics,list,kafka,topic,partition,leader,partitions,new,linked,list,retry,loop,for,int,retry,0,retry,num,retries,retry,brokers,loop,for,int,arr,idx,0,arr,idx,seed,broker,addresses,length,arr,idx,log,info,trying,to,get,topic,metadata,from,broker,in,try,seed,broker,addresses,current,contact,seed,broker,index,retry,num,retries,try,partitions,clear,for,topic,metadata,item,consumer,send,new,topic,metadata,request,topics,topics,metadata,if,item,error,code,error,mapping,no,error,log,warn,error,while,getting,metadata,from,broker,to,find,partitions,for,error,seed,broker,addresses,current,contact,seed,broker,index,topics,to,string,error,mapping,exception,for,item,error,code,get,message,use,next,address,as,new,contact,seed,broker,continue,brokers,loop,if,topics,contains,item,topic,log,warn,received,metadata,from,topic,item,topic,even,though,it,was,not,requested,skipping,use,next,address,as,new,contact,seed,broker,continue,brokers,loop,for,partition,metadata,part,item,partitions,metadata,node,leader,broker,to,node,part,leader,kafka,topic,partition,ktp,new,kafka,topic,partition,item,topic,part,partition,id,kafka,topic,partition,leader,p,info,new,kafka,topic,partition,leader,ktp,leader,partitions,add,p,info,break,retry,loop,catch,exception,e,validate,seed,brokers,seed,broker,addresses,e,log,warn,error,communicating,with,broker,to,find,partitions,for,message,seed,broker,addresses,current,contact,seed,broker,index,topics,e,get,class,get,name,e,get,message,log,debug,detailed,trace,e,try,thread,sleep,500,catch,interrupted,exception,e1,use,next,address,as,new,contact,seed,broker,return,partitions
Kafka08PartitionDiscoverer -> public List<KafkaTopicPartitionLeader> getPartitionLeadersForTopics(List<String> topics);1515757409;Send request to Kafka to get partitions for topics.__@param topics The name of the topics.;public List<KafkaTopicPartitionLeader> getPartitionLeadersForTopics(List<String> topics) {_		List<KafkaTopicPartitionLeader> partitions = new LinkedList<>()___		retryLoop: for (int retry = 0_ retry < numRetries_ retry++) {_			brokersLoop: for (int arrIdx = 0_ arrIdx < seedBrokerAddresses.length_ arrIdx++) {_				LOG.info("Trying to get topic metadata from broker {} in try {}/{}", seedBrokerAddresses[currentContactSeedBrokerIndex], retry, numRetries)___				try {_					_					partitions.clear()___					for (TopicMetadata item : consumer.send(new TopicMetadataRequest(topics)).topicsMetadata()) {_						if (item.errorCode() != ErrorMapping.NoError()) {_							_							LOG.warn("Error while getting metadata from broker {} to find partitions for {}. Error: {}.",_								seedBrokerAddresses[currentContactSeedBrokerIndex], topics.toString(), ErrorMapping.exceptionFor(item.errorCode()).getMessage())___							useNextAddressAsNewContactSeedBroker()__							continue brokersLoop__						}__						if (!topics.contains(item.topic())) {_							LOG.warn("Received metadata from topic " + item.topic() + " even though it was not requested. Skipping ...")___							useNextAddressAsNewContactSeedBroker()__							continue brokersLoop__						}__						for (PartitionMetadata part : item.partitionsMetadata()) {_							Node leader = brokerToNode(part.leader())__							KafkaTopicPartition ktp = new KafkaTopicPartition(item.topic(), part.partitionId())__							KafkaTopicPartitionLeader pInfo = new KafkaTopicPartitionLeader(ktp, leader)__							partitions.add(pInfo)__						}_					}_					break retryLoop_ _				}_				catch (Exception e) {_					_					validateSeedBrokers(seedBrokerAddresses, e)__					LOG.warn("Error communicating with broker {} to find partitions for {}. {} Message: {}",_						seedBrokerAddresses[currentContactSeedBrokerIndex], topics, e.getClass().getName(), e.getMessage())__					LOG.debug("Detailed trace", e)___					_					try {_						Thread.sleep(500)__					} catch (InterruptedException e1) {_						_					}__					useNextAddressAsNewContactSeedBroker()__				}_			} _		} __		return partitions__	};send,request,to,kafka,to,get,partitions,for,topics,param,topics,the,name,of,the,topics;public,list,kafka,topic,partition,leader,get,partition,leaders,for,topics,list,string,topics,list,kafka,topic,partition,leader,partitions,new,linked,list,retry,loop,for,int,retry,0,retry,num,retries,retry,brokers,loop,for,int,arr,idx,0,arr,idx,seed,broker,addresses,length,arr,idx,log,info,trying,to,get,topic,metadata,from,broker,in,try,seed,broker,addresses,current,contact,seed,broker,index,retry,num,retries,try,partitions,clear,for,topic,metadata,item,consumer,send,new,topic,metadata,request,topics,topics,metadata,if,item,error,code,error,mapping,no,error,log,warn,error,while,getting,metadata,from,broker,to,find,partitions,for,error,seed,broker,addresses,current,contact,seed,broker,index,topics,to,string,error,mapping,exception,for,item,error,code,get,message,use,next,address,as,new,contact,seed,broker,continue,brokers,loop,if,topics,contains,item,topic,log,warn,received,metadata,from,topic,item,topic,even,though,it,was,not,requested,skipping,use,next,address,as,new,contact,seed,broker,continue,brokers,loop,for,partition,metadata,part,item,partitions,metadata,node,leader,broker,to,node,part,leader,kafka,topic,partition,ktp,new,kafka,topic,partition,item,topic,part,partition,id,kafka,topic,partition,leader,p,info,new,kafka,topic,partition,leader,ktp,leader,partitions,add,p,info,break,retry,loop,catch,exception,e,validate,seed,brokers,seed,broker,addresses,e,log,warn,error,communicating,with,broker,to,find,partitions,for,message,seed,broker,addresses,current,contact,seed,broker,index,topics,e,get,class,get,name,e,get,message,log,debug,detailed,trace,e,try,thread,sleep,500,catch,interrupted,exception,e1,use,next,address,as,new,contact,seed,broker,return,partitions
Kafka08PartitionDiscoverer -> private void useNextAddressAsNewContactSeedBroker();1498894422;Re-establish broker connection using the next available seed broker address.;private void useNextAddressAsNewContactSeedBroker() {_		if (++currentContactSeedBrokerIndex == seedBrokerAddresses.length) {_			currentContactSeedBrokerIndex = 0__		}__		URL newContactUrl = NetUtils.getCorrectHostnamePort(seedBrokerAddresses[currentContactSeedBrokerIndex])__		this.consumer = new SimpleConsumer(newContactUrl.getHost(), newContactUrl.getPort(), soTimeout, bufferSize, dummyClientId)__	};re,establish,broker,connection,using,the,next,available,seed,broker,address;private,void,use,next,address,as,new,contact,seed,broker,if,current,contact,seed,broker,index,seed,broker,addresses,length,current,contact,seed,broker,index,0,url,new,contact,url,net,utils,get,correct,hostname,port,seed,broker,addresses,current,contact,seed,broker,index,this,consumer,new,simple,consumer,new,contact,url,get,host,new,contact,url,get,port,so,timeout,buffer,size,dummy,client,id
Kafka08PartitionDiscoverer -> private void useNextAddressAsNewContactSeedBroker();1511347989;Re-establish broker connection using the next available seed broker address.;private void useNextAddressAsNewContactSeedBroker() {_		if (++currentContactSeedBrokerIndex == seedBrokerAddresses.length) {_			currentContactSeedBrokerIndex = 0__		}__		URL newContactUrl = NetUtils.getCorrectHostnamePort(seedBrokerAddresses[currentContactSeedBrokerIndex])__		this.consumer = new SimpleConsumer(newContactUrl.getHost(), newContactUrl.getPort(), soTimeout, bufferSize, dummyClientId)__	};re,establish,broker,connection,using,the,next,available,seed,broker,address;private,void,use,next,address,as,new,contact,seed,broker,if,current,contact,seed,broker,index,seed,broker,addresses,length,current,contact,seed,broker,index,0,url,new,contact,url,net,utils,get,correct,hostname,port,seed,broker,addresses,current,contact,seed,broker,index,this,consumer,new,simple,consumer,new,contact,url,get,host,new,contact,url,get,port,so,timeout,buffer,size,dummy,client,id
Kafka08PartitionDiscoverer -> private void useNextAddressAsNewContactSeedBroker();1515757409;Re-establish broker connection using the next available seed broker address.;private void useNextAddressAsNewContactSeedBroker() {_		if (++currentContactSeedBrokerIndex == seedBrokerAddresses.length) {_			currentContactSeedBrokerIndex = 0__		}__		URL newContactUrl = NetUtils.getCorrectHostnamePort(seedBrokerAddresses[currentContactSeedBrokerIndex])__		this.consumer = new SimpleConsumer(newContactUrl.getHost(), newContactUrl.getPort(), soTimeout, bufferSize, dummyClientId)__	};re,establish,broker,connection,using,the,next,available,seed,broker,address;private,void,use,next,address,as,new,contact,seed,broker,if,current,contact,seed,broker,index,seed,broker,addresses,length,current,contact,seed,broker,index,0,url,new,contact,url,net,utils,get,correct,hostname,port,seed,broker,addresses,current,contact,seed,broker,index,this,consumer,new,simple,consumer,new,contact,url,get,host,new,contact,url,get,port,so,timeout,buffer,size,dummy,client,id
Kafka08PartitionDiscoverer -> private static Node brokerToNode(Broker broker);1498894422;Turn a broker instance into a node instance.__@param broker broker instance_@return Node representing the given broker;private static Node brokerToNode(Broker broker) {_		return new Node(broker.id(), broker.host(), broker.port())__	};turn,a,broker,instance,into,a,node,instance,param,broker,broker,instance,return,node,representing,the,given,broker;private,static,node,broker,to,node,broker,broker,return,new,node,broker,id,broker,host,broker,port
Kafka08PartitionDiscoverer -> private static Node brokerToNode(Broker broker);1511347989;Turn a broker instance into a node instance.__@param broker broker instance_@return Node representing the given broker;private static Node brokerToNode(Broker broker) {_		return new Node(broker.id(), broker.host(), broker.port())__	};turn,a,broker,instance,into,a,node,instance,param,broker,broker,instance,return,node,representing,the,given,broker;private,static,node,broker,to,node,broker,broker,return,new,node,broker,id,broker,host,broker,port
Kafka08PartitionDiscoverer -> private static Node brokerToNode(Broker broker);1515757409;Turn a broker instance into a node instance.__@param broker broker instance_@return Node representing the given broker;private static Node brokerToNode(Broker broker) {_		return new Node(broker.id(), broker.host(), broker.port())__	};turn,a,broker,instance,into,a,node,instance,param,broker,broker,instance,return,node,representing,the,given,broker;private,static,node,broker,to,node,broker,broker,return,new,node,broker,id,broker,host,broker,port
Kafka08PartitionDiscoverer -> private static void validateSeedBrokers(String[] seedBrokers, Exception exception);1498894422;Validate that at least one seed broker is valid in case of a_ClosedChannelException.__@param seedBrokers_array containing the seed brokers e.g. ["host1:port1",_"host2:port2"]_@param exception_instance;private static void validateSeedBrokers(String[] seedBrokers, Exception exception) {_		if (!(exception instanceof ClosedChannelException)) {_			return__		}_		int unknownHosts = 0__		for (String broker : seedBrokers) {_			URL brokerUrl = NetUtils.getCorrectHostnamePort(broker.trim())__			try {_				InetAddress.getByName(brokerUrl.getHost())__			} catch (UnknownHostException e) {_				unknownHosts++__			}_		}_		_		if (unknownHosts == seedBrokers.length) {_			throw new IllegalArgumentException("All the servers provided in: '"_				+ ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG + "' config are invalid. (unknown hosts)")__		}_	};validate,that,at,least,one,seed,broker,is,valid,in,case,of,a,closed,channel,exception,param,seed,brokers,array,containing,the,seed,brokers,e,g,host1,port1,host2,port2,param,exception,instance;private,static,void,validate,seed,brokers,string,seed,brokers,exception,exception,if,exception,instanceof,closed,channel,exception,return,int,unknown,hosts,0,for,string,broker,seed,brokers,url,broker,url,net,utils,get,correct,hostname,port,broker,trim,try,inet,address,get,by,name,broker,url,get,host,catch,unknown,host,exception,e,unknown,hosts,if,unknown,hosts,seed,brokers,length,throw,new,illegal,argument,exception,all,the,servers,provided,in,consumer,config,config,are,invalid,unknown,hosts
Kafka08PartitionDiscoverer -> private static void validateSeedBrokers(String[] seedBrokers, Exception exception);1511347989;Validate that at least one seed broker is valid in case of a_ClosedChannelException.__@param seedBrokers_array containing the seed brokers e.g. ["host1:port1",_"host2:port2"]_@param exception_instance;private static void validateSeedBrokers(String[] seedBrokers, Exception exception) {_		if (!(exception instanceof ClosedChannelException)) {_			return__		}_		int unknownHosts = 0__		for (String broker : seedBrokers) {_			URL brokerUrl = NetUtils.getCorrectHostnamePort(broker.trim())__			try {_				InetAddress.getByName(brokerUrl.getHost())__			} catch (UnknownHostException e) {_				unknownHosts++__			}_		}_		_		if (unknownHosts == seedBrokers.length) {_			throw new IllegalArgumentException("All the servers provided in: '"_				+ ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG + "' config are invalid. (unknown hosts)")__		}_	};validate,that,at,least,one,seed,broker,is,valid,in,case,of,a,closed,channel,exception,param,seed,brokers,array,containing,the,seed,brokers,e,g,host1,port1,host2,port2,param,exception,instance;private,static,void,validate,seed,brokers,string,seed,brokers,exception,exception,if,exception,instanceof,closed,channel,exception,return,int,unknown,hosts,0,for,string,broker,seed,brokers,url,broker,url,net,utils,get,correct,hostname,port,broker,trim,try,inet,address,get,by,name,broker,url,get,host,catch,unknown,host,exception,e,unknown,hosts,if,unknown,hosts,seed,brokers,length,throw,new,illegal,argument,exception,all,the,servers,provided,in,consumer,config,config,are,invalid,unknown,hosts
Kafka08PartitionDiscoverer -> private static void validateSeedBrokers(String[] seedBrokers, Exception exception);1515757409;Validate that at least one seed broker is valid in case of a_ClosedChannelException.__@param seedBrokers_array containing the seed brokers e.g. ["host1:port1",_"host2:port2"]_@param exception_instance;private static void validateSeedBrokers(String[] seedBrokers, Exception exception) {_		if (!(exception instanceof ClosedChannelException)) {_			return__		}_		int unknownHosts = 0__		for (String broker : seedBrokers) {_			URL brokerUrl = NetUtils.getCorrectHostnamePort(broker.trim())__			try {_				InetAddress.getByName(brokerUrl.getHost())__			} catch (UnknownHostException e) {_				unknownHosts++__			}_		}_		_		if (unknownHosts == seedBrokers.length) {_			throw new IllegalArgumentException("All the servers provided in: '"_				+ ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG + "' config are invalid. (unknown hosts)")__		}_	};validate,that,at,least,one,seed,broker,is,valid,in,case,of,a,closed,channel,exception,param,seed,brokers,array,containing,the,seed,brokers,e,g,host1,port1,host2,port2,param,exception,instance;private,static,void,validate,seed,brokers,string,seed,brokers,exception,exception,if,exception,instanceof,closed,channel,exception,return,int,unknown,hosts,0,for,string,broker,seed,brokers,url,broker,url,net,utils,get,correct,hostname,port,broker,trim,try,inet,address,get,by,name,broker,url,get,host,catch,unknown,host,exception,e,unknown,hosts,if,unknown,hosts,seed,brokers,length,throw,new,illegal,argument,exception,all,the,servers,provided,in,consumer,config,config,are,invalid,unknown,hosts
