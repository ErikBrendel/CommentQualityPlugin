# id;timestamp;commentText;codeText;commentWords;codeWords
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> @Override 		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener);1487948320;Override the bulk processor build process to provide a mock implementation,_but reuse the listener implementation in our mock to test that the listener logic_works correctly with request flushing logic.;@Override_		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener) {_			this.mockBulkProcessor = mock(BulkProcessor.class)___			when(mockBulkProcessor.add(any(ActionRequest.class))).thenAnswer(new Answer<Object>() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					_					nextBulkRequest.add(invocationOnMock.getArgumentAt(0, ActionRequest.class))___					return null__				}_			})___			doAnswer(new Answer() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					while (nextBulkRequest.numberOfActions() > 0) {_						_						flushLatch.await()___						_						_						BulkRequest currentBulkRequest = nextBulkRequest__						nextBulkRequest = new BulkRequest()___						listener.beforeBulk(123L, currentBulkRequest)___						if (nextBulkFailure == null) {_							BulkItemResponse[] mockResponses = new BulkItemResponse[currentBulkRequest.requests().size()]__							for (int i = 0_ i < currentBulkRequest.requests().size()_ i++) {_								Throwable mockItemFailure = mockItemFailuresList.get(i)___								if (mockItemFailure == null) {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", mock(ActionResponse.class))__								} else {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", new BulkItemResponse.Failure("index", "type", "id", mockItemFailure))__								}_							}__							listener.afterBulk(123L, currentBulkRequest, new BulkResponse(mockResponses, 1000L))__						} else {_							listener.afterBulk(123L, currentBulkRequest, nextBulkFailure)__						}_					}__					return null__				}_			}).when(mockBulkProcessor).flush()___			return mockBulkProcessor__		};override,the,bulk,processor,build,process,to,provide,a,mock,implementation,but,reuse,the,listener,implementation,in,our,mock,to,test,that,the,listener,logic,works,correctly,with,request,flushing,logic;override,protected,bulk,processor,build,bulk,processor,final,bulk,processor,listener,listener,this,mock,bulk,processor,mock,bulk,processor,class,when,mock,bulk,processor,add,any,action,request,class,then,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,next,bulk,request,add,invocation,on,mock,get,argument,at,0,action,request,class,return,null,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,while,next,bulk,request,number,of,actions,0,flush,latch,await,bulk,request,current,bulk,request,next,bulk,request,next,bulk,request,new,bulk,request,listener,before,bulk,123l,current,bulk,request,if,next,bulk,failure,null,bulk,item,response,mock,responses,new,bulk,item,response,current,bulk,request,requests,size,for,int,i,0,i,current,bulk,request,requests,size,i,throwable,mock,item,failure,mock,item,failures,list,get,i,if,mock,item,failure,null,mock,responses,i,new,bulk,item,response,i,op,type,mock,action,response,class,else,mock,responses,i,new,bulk,item,response,i,op,type,new,bulk,item,response,failure,index,type,id,mock,item,failure,listener,after,bulk,123l,current,bulk,request,new,bulk,response,mock,responses,1000l,else,listener,after,bulk,123l,current,bulk,request,next,bulk,failure,return,null,when,mock,bulk,processor,flush,return,mock,bulk,processor
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> @Override 		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener);1495923072;Override the bulk processor build process to provide a mock implementation,_but reuse the listener implementation in our mock to test that the listener logic_works correctly with request flushing logic.;@Override_		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener) {_			this.mockBulkProcessor = mock(BulkProcessor.class)___			when(mockBulkProcessor.add(any(ActionRequest.class))).thenAnswer(new Answer<Object>() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					_					nextBulkRequest.add(invocationOnMock.getArgumentAt(0, ActionRequest.class))___					return null__				}_			})___			doAnswer(new Answer() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					while (nextBulkRequest.numberOfActions() > 0) {_						_						flushLatch.await()___						_						_						BulkRequest currentBulkRequest = nextBulkRequest__						nextBulkRequest = new BulkRequest()___						listener.beforeBulk(123L, currentBulkRequest)___						if (nextBulkFailure == null) {_							BulkItemResponse[] mockResponses = new BulkItemResponse[currentBulkRequest.requests().size()]__							for (int i = 0_ i < currentBulkRequest.requests().size()_ i++) {_								Throwable mockItemFailure = mockItemFailuresList.get(i)___								if (mockItemFailure == null) {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", mock(ActionResponse.class))__								} else {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", new BulkItemResponse.Failure("index", "type", "id", mockItemFailure))__								}_							}__							listener.afterBulk(123L, currentBulkRequest, new BulkResponse(mockResponses, 1000L))__						} else {_							listener.afterBulk(123L, currentBulkRequest, nextBulkFailure)__						}_					}__					return null__				}_			}).when(mockBulkProcessor).flush()___			return mockBulkProcessor__		};override,the,bulk,processor,build,process,to,provide,a,mock,implementation,but,reuse,the,listener,implementation,in,our,mock,to,test,that,the,listener,logic,works,correctly,with,request,flushing,logic;override,protected,bulk,processor,build,bulk,processor,final,bulk,processor,listener,listener,this,mock,bulk,processor,mock,bulk,processor,class,when,mock,bulk,processor,add,any,action,request,class,then,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,next,bulk,request,add,invocation,on,mock,get,argument,at,0,action,request,class,return,null,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,while,next,bulk,request,number,of,actions,0,flush,latch,await,bulk,request,current,bulk,request,next,bulk,request,next,bulk,request,new,bulk,request,listener,before,bulk,123l,current,bulk,request,if,next,bulk,failure,null,bulk,item,response,mock,responses,new,bulk,item,response,current,bulk,request,requests,size,for,int,i,0,i,current,bulk,request,requests,size,i,throwable,mock,item,failure,mock,item,failures,list,get,i,if,mock,item,failure,null,mock,responses,i,new,bulk,item,response,i,op,type,mock,action,response,class,else,mock,responses,i,new,bulk,item,response,i,op,type,new,bulk,item,response,failure,index,type,id,mock,item,failure,listener,after,bulk,123l,current,bulk,request,new,bulk,response,mock,responses,1000l,else,listener,after,bulk,123l,current,bulk,request,next,bulk,failure,return,null,when,mock,bulk,processor,flush,return,mock,bulk,processor
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> @Override 		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener);1508481109;Override the bulk processor build process to provide a mock implementation,_but reuse the listener implementation in our mock to test that the listener logic_works correctly with request flushing logic.;@Override_		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener) {_			this.mockBulkProcessor = mock(BulkProcessor.class)___			when(mockBulkProcessor.add(any(ActionRequest.class))).thenAnswer(new Answer<Object>() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					_					nextBulkRequest.add(invocationOnMock.getArgumentAt(0, ActionRequest.class))___					return null__				}_			})___			doAnswer(new Answer() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					while (nextBulkRequest.numberOfActions() > 0) {_						_						flushLatch.await()___						_						_						BulkRequest currentBulkRequest = nextBulkRequest__						nextBulkRequest = new BulkRequest()___						listener.beforeBulk(123L, currentBulkRequest)___						if (nextBulkFailure == null) {_							BulkItemResponse[] mockResponses = new BulkItemResponse[currentBulkRequest.requests().size()]__							for (int i = 0_ i < currentBulkRequest.requests().size()_ i++) {_								Throwable mockItemFailure = mockItemFailuresList.get(i)___								if (mockItemFailure == null) {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", mock(ActionResponse.class))__								} else {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", new BulkItemResponse.Failure("index", "type", "id", mockItemFailure))__								}_							}__							listener.afterBulk(123L, currentBulkRequest, new BulkResponse(mockResponses, 1000L))__						} else {_							listener.afterBulk(123L, currentBulkRequest, nextBulkFailure)__						}_					}__					return null__				}_			}).when(mockBulkProcessor).flush()___			return mockBulkProcessor__		};override,the,bulk,processor,build,process,to,provide,a,mock,implementation,but,reuse,the,listener,implementation,in,our,mock,to,test,that,the,listener,logic,works,correctly,with,request,flushing,logic;override,protected,bulk,processor,build,bulk,processor,final,bulk,processor,listener,listener,this,mock,bulk,processor,mock,bulk,processor,class,when,mock,bulk,processor,add,any,action,request,class,then,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,next,bulk,request,add,invocation,on,mock,get,argument,at,0,action,request,class,return,null,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,while,next,bulk,request,number,of,actions,0,flush,latch,await,bulk,request,current,bulk,request,next,bulk,request,next,bulk,request,new,bulk,request,listener,before,bulk,123l,current,bulk,request,if,next,bulk,failure,null,bulk,item,response,mock,responses,new,bulk,item,response,current,bulk,request,requests,size,for,int,i,0,i,current,bulk,request,requests,size,i,throwable,mock,item,failure,mock,item,failures,list,get,i,if,mock,item,failure,null,mock,responses,i,new,bulk,item,response,i,op,type,mock,action,response,class,else,mock,responses,i,new,bulk,item,response,i,op,type,new,bulk,item,response,failure,index,type,id,mock,item,failure,listener,after,bulk,123l,current,bulk,request,new,bulk,response,mock,responses,1000l,else,listener,after,bulk,123l,current,bulk,request,next,bulk,failure,return,null,when,mock,bulk,processor,flush,return,mock,bulk,processor
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> @Override 		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener);1517405138;Override the bulk processor build process to provide a mock implementation,_but reuse the listener implementation in our mock to test that the listener logic_works correctly with request flushing logic.;@Override_		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener) {_			this.mockBulkProcessor = mock(BulkProcessor.class)___			when(mockBulkProcessor.add(any(ActionRequest.class))).thenAnswer(new Answer<Object>() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					_					nextBulkRequest.add(invocationOnMock.getArgumentAt(0, ActionRequest.class))___					return null__				}_			})___			doAnswer(new Answer() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					while (nextBulkRequest.numberOfActions() > 0) {_						_						flushLatch.await()___						_						_						BulkRequest currentBulkRequest = nextBulkRequest__						nextBulkRequest = new BulkRequest()___						listener.beforeBulk(123L, currentBulkRequest)___						if (nextBulkFailure == null) {_							BulkItemResponse[] mockResponses = new BulkItemResponse[currentBulkRequest.requests().size()]__							for (int i = 0_ i < currentBulkRequest.requests().size()_ i++) {_								Throwable mockItemFailure = mockItemFailuresList.get(i)___								if (mockItemFailure == null) {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", mock(ActionResponse.class))__								} else {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", new BulkItemResponse.Failure("index", "type", "id", mockItemFailure))__								}_							}__							listener.afterBulk(123L, currentBulkRequest, new BulkResponse(mockResponses, 1000L))__						} else {_							listener.afterBulk(123L, currentBulkRequest, nextBulkFailure)__						}_					}__					return null__				}_			}).when(mockBulkProcessor).flush()___			return mockBulkProcessor__		};override,the,bulk,processor,build,process,to,provide,a,mock,implementation,but,reuse,the,listener,implementation,in,our,mock,to,test,that,the,listener,logic,works,correctly,with,request,flushing,logic;override,protected,bulk,processor,build,bulk,processor,final,bulk,processor,listener,listener,this,mock,bulk,processor,mock,bulk,processor,class,when,mock,bulk,processor,add,any,action,request,class,then,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,next,bulk,request,add,invocation,on,mock,get,argument,at,0,action,request,class,return,null,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,while,next,bulk,request,number,of,actions,0,flush,latch,await,bulk,request,current,bulk,request,next,bulk,request,next,bulk,request,new,bulk,request,listener,before,bulk,123l,current,bulk,request,if,next,bulk,failure,null,bulk,item,response,mock,responses,new,bulk,item,response,current,bulk,request,requests,size,for,int,i,0,i,current,bulk,request,requests,size,i,throwable,mock,item,failure,mock,item,failures,list,get,i,if,mock,item,failure,null,mock,responses,i,new,bulk,item,response,i,op,type,mock,action,response,class,else,mock,responses,i,new,bulk,item,response,i,op,type,new,bulk,item,response,failure,index,type,id,mock,item,failure,listener,after,bulk,123l,current,bulk,request,new,bulk,response,mock,responses,1000l,else,listener,after,bulk,123l,current,bulk,request,next,bulk,failure,return,null,when,mock,bulk,processor,flush,return,mock,bulk,processor
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> @Override 		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener);1533129233;Override the bulk processor build process to provide a mock implementation,_but reuse the listener implementation in our mock to test that the listener logic_works correctly with request flushing logic.;@Override_		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener) {_			this.mockBulkProcessor = mock(BulkProcessor.class)___			when(mockBulkProcessor.add(any(IndexRequest.class))).thenAnswer(new Answer<Object>() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					_					nextBulkRequest.add(invocationOnMock.getArgumentAt(0, IndexRequest.class))___					return null__				}_			})___			doAnswer(new Answer() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					while (nextBulkRequest.numberOfActions() > 0) {_						_						flushLatch.await()___						_						_						BulkRequest currentBulkRequest = nextBulkRequest__						nextBulkRequest = new BulkRequest()___						listener.beforeBulk(123L, currentBulkRequest)___						if (nextBulkFailure == null) {_							BulkItemResponse[] mockResponses = new BulkItemResponse[currentBulkRequest.requests().size()]__							for (int i = 0_ i < currentBulkRequest.requests().size()_ i++) {_								Throwable mockItemFailure = mockItemFailuresList.get(i)___								if (mockItemFailure == null) {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", mock(ActionResponse.class))__								} else {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", new BulkItemResponse.Failure("index", "type", "id", mockItemFailure))__								}_							}__							listener.afterBulk(123L, currentBulkRequest, new BulkResponse(mockResponses, 1000L))__						} else {_							listener.afterBulk(123L, currentBulkRequest, nextBulkFailure)__						}_					}__					return null__				}_			}).when(mockBulkProcessor).flush()___			return mockBulkProcessor__		};override,the,bulk,processor,build,process,to,provide,a,mock,implementation,but,reuse,the,listener,implementation,in,our,mock,to,test,that,the,listener,logic,works,correctly,with,request,flushing,logic;override,protected,bulk,processor,build,bulk,processor,final,bulk,processor,listener,listener,this,mock,bulk,processor,mock,bulk,processor,class,when,mock,bulk,processor,add,any,index,request,class,then,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,next,bulk,request,add,invocation,on,mock,get,argument,at,0,index,request,class,return,null,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,while,next,bulk,request,number,of,actions,0,flush,latch,await,bulk,request,current,bulk,request,next,bulk,request,next,bulk,request,new,bulk,request,listener,before,bulk,123l,current,bulk,request,if,next,bulk,failure,null,bulk,item,response,mock,responses,new,bulk,item,response,current,bulk,request,requests,size,for,int,i,0,i,current,bulk,request,requests,size,i,throwable,mock,item,failure,mock,item,failures,list,get,i,if,mock,item,failure,null,mock,responses,i,new,bulk,item,response,i,op,type,mock,action,response,class,else,mock,responses,i,new,bulk,item,response,i,op,type,new,bulk,item,response,failure,index,type,id,mock,item,failure,listener,after,bulk,123l,current,bulk,request,new,bulk,response,mock,responses,1000l,else,listener,after,bulk,123l,current,bulk,request,next,bulk,failure,return,null,when,mock,bulk,processor,flush,return,mock,bulk,processor
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> @Override 		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener);1533129234;Override the bulk processor build process to provide a mock implementation,_but reuse the listener implementation in our mock to test that the listener logic_works correctly with request flushing logic.;@Override_		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener) {_			this.mockBulkProcessor = mock(BulkProcessor.class)___			when(mockBulkProcessor.add(any(IndexRequest.class))).thenAnswer(new Answer<Object>() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					_					nextBulkRequest.add(invocationOnMock.getArgumentAt(0, IndexRequest.class))___					return null__				}_			})___			doAnswer(new Answer() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					while (nextBulkRequest.numberOfActions() > 0) {_						_						flushLatch.await()___						_						_						BulkRequest currentBulkRequest = nextBulkRequest__						nextBulkRequest = new BulkRequest()___						listener.beforeBulk(123L, currentBulkRequest)___						if (nextBulkFailure == null) {_							BulkItemResponse[] mockResponses = new BulkItemResponse[currentBulkRequest.requests().size()]__							for (int i = 0_ i < currentBulkRequest.requests().size()_ i++) {_								Throwable mockItemFailure = mockItemFailuresList.get(i)___								if (mockItemFailure == null) {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", mock(ActionResponse.class))__								} else {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", new BulkItemResponse.Failure("index", "type", "id", mockItemFailure))__								}_							}__							listener.afterBulk(123L, currentBulkRequest, new BulkResponse(mockResponses, 1000L))__						} else {_							listener.afterBulk(123L, currentBulkRequest, nextBulkFailure)__						}_					}__					return null__				}_			}).when(mockBulkProcessor).flush()___			return mockBulkProcessor__		};override,the,bulk,processor,build,process,to,provide,a,mock,implementation,but,reuse,the,listener,implementation,in,our,mock,to,test,that,the,listener,logic,works,correctly,with,request,flushing,logic;override,protected,bulk,processor,build,bulk,processor,final,bulk,processor,listener,listener,this,mock,bulk,processor,mock,bulk,processor,class,when,mock,bulk,processor,add,any,index,request,class,then,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,next,bulk,request,add,invocation,on,mock,get,argument,at,0,index,request,class,return,null,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,while,next,bulk,request,number,of,actions,0,flush,latch,await,bulk,request,current,bulk,request,next,bulk,request,next,bulk,request,new,bulk,request,listener,before,bulk,123l,current,bulk,request,if,next,bulk,failure,null,bulk,item,response,mock,responses,new,bulk,item,response,current,bulk,request,requests,size,for,int,i,0,i,current,bulk,request,requests,size,i,throwable,mock,item,failure,mock,item,failures,list,get,i,if,mock,item,failure,null,mock,responses,i,new,bulk,item,response,i,op,type,mock,action,response,class,else,mock,responses,i,new,bulk,item,response,i,op,type,new,bulk,item,response,failure,index,type,id,mock,item,failure,listener,after,bulk,123l,current,bulk,request,new,bulk,response,mock,responses,1000l,else,listener,after,bulk,123l,current,bulk,request,next,bulk,failure,return,null,when,mock,bulk,processor,flush,return,mock,bulk,processor
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> @Override 		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener);1533129234;Override the bulk processor build process to provide a mock implementation,_but reuse the listener implementation in our mock to test that the listener logic_works correctly with request flushing logic.;@Override_		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener) {_			this.mockBulkProcessor = mock(BulkProcessor.class)___			when(mockBulkProcessor.add(any(IndexRequest.class))).thenAnswer(new Answer<Object>() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					_					nextBulkRequest.add(invocationOnMock.getArgumentAt(0, IndexRequest.class))___					return null__				}_			})___			doAnswer(new Answer() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					while (nextBulkRequest.numberOfActions() > 0) {_						_						flushLatch.await()___						_						_						BulkRequest currentBulkRequest = nextBulkRequest__						nextBulkRequest = new BulkRequest()___						listener.beforeBulk(123L, currentBulkRequest)___						if (nextBulkFailure == null) {_							BulkItemResponse[] mockResponses = new BulkItemResponse[currentBulkRequest.requests().size()]__							for (int i = 0_ i < currentBulkRequest.requests().size()_ i++) {_								Throwable mockItemFailure = mockItemFailuresList.get(i)___								if (mockItemFailure == null) {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", mock(ActionResponse.class))__								} else {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", new BulkItemResponse.Failure("index", "type", "id", mockItemFailure))__								}_							}__							listener.afterBulk(123L, currentBulkRequest, new BulkResponse(mockResponses, 1000L))__						} else {_							listener.afterBulk(123L, currentBulkRequest, nextBulkFailure)__						}_					}__					return null__				}_			}).when(mockBulkProcessor).flush()___			return mockBulkProcessor__		};override,the,bulk,processor,build,process,to,provide,a,mock,implementation,but,reuse,the,listener,implementation,in,our,mock,to,test,that,the,listener,logic,works,correctly,with,request,flushing,logic;override,protected,bulk,processor,build,bulk,processor,final,bulk,processor,listener,listener,this,mock,bulk,processor,mock,bulk,processor,class,when,mock,bulk,processor,add,any,index,request,class,then,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,next,bulk,request,add,invocation,on,mock,get,argument,at,0,index,request,class,return,null,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,while,next,bulk,request,number,of,actions,0,flush,latch,await,bulk,request,current,bulk,request,next,bulk,request,next,bulk,request,new,bulk,request,listener,before,bulk,123l,current,bulk,request,if,next,bulk,failure,null,bulk,item,response,mock,responses,new,bulk,item,response,current,bulk,request,requests,size,for,int,i,0,i,current,bulk,request,requests,size,i,throwable,mock,item,failure,mock,item,failures,list,get,i,if,mock,item,failure,null,mock,responses,i,new,bulk,item,response,i,op,type,mock,action,response,class,else,mock,responses,i,new,bulk,item,response,i,op,type,new,bulk,item,response,failure,index,type,id,mock,item,failure,listener,after,bulk,123l,current,bulk,request,new,bulk,response,mock,responses,1000l,else,listener,after,bulk,123l,current,bulk,request,next,bulk,failure,return,null,when,mock,bulk,processor,flush,return,mock,bulk,processor
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> @Override 		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener);1538998760;Override the bulk processor build process to provide a mock implementation,_but reuse the listener implementation in our mock to test that the listener logic_works correctly with request flushing logic.;@Override_		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener) {_			this.mockBulkProcessor = mock(BulkProcessor.class)___			when(mockBulkProcessor.add(any(IndexRequest.class))).thenAnswer(new Answer<Object>() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					_					nextBulkRequest.add((IndexRequest) invocationOnMock.getArgument(0))___					return null__				}_			})___			doAnswer(new Answer() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					while (nextBulkRequest.numberOfActions() > 0) {_						_						flushLatch.await()___						_						_						BulkRequest currentBulkRequest = nextBulkRequest__						nextBulkRequest = new BulkRequest()___						listener.beforeBulk(123L, currentBulkRequest)___						if (nextBulkFailure == null) {_							BulkItemResponse[] mockResponses = new BulkItemResponse[currentBulkRequest.requests().size()]__							for (int i = 0_ i < currentBulkRequest.requests().size()_ i++) {_								Throwable mockItemFailure = mockItemFailuresList.get(i)___								if (mockItemFailure == null) {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", mock(ActionResponse.class))__								} else {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", new BulkItemResponse.Failure("index", "type", "id", mockItemFailure))__								}_							}__							listener.afterBulk(123L, currentBulkRequest, new BulkResponse(mockResponses, 1000L))__						} else {_							listener.afterBulk(123L, currentBulkRequest, nextBulkFailure)__						}_					}__					return null__				}_			}).when(mockBulkProcessor).flush()___			return mockBulkProcessor__		};override,the,bulk,processor,build,process,to,provide,a,mock,implementation,but,reuse,the,listener,implementation,in,our,mock,to,test,that,the,listener,logic,works,correctly,with,request,flushing,logic;override,protected,bulk,processor,build,bulk,processor,final,bulk,processor,listener,listener,this,mock,bulk,processor,mock,bulk,processor,class,when,mock,bulk,processor,add,any,index,request,class,then,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,next,bulk,request,add,index,request,invocation,on,mock,get,argument,0,return,null,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,while,next,bulk,request,number,of,actions,0,flush,latch,await,bulk,request,current,bulk,request,next,bulk,request,next,bulk,request,new,bulk,request,listener,before,bulk,123l,current,bulk,request,if,next,bulk,failure,null,bulk,item,response,mock,responses,new,bulk,item,response,current,bulk,request,requests,size,for,int,i,0,i,current,bulk,request,requests,size,i,throwable,mock,item,failure,mock,item,failures,list,get,i,if,mock,item,failure,null,mock,responses,i,new,bulk,item,response,i,op,type,mock,action,response,class,else,mock,responses,i,new,bulk,item,response,i,op,type,new,bulk,item,response,failure,index,type,id,mock,item,failure,listener,after,bulk,123l,current,bulk,request,new,bulk,response,mock,responses,1000l,else,listener,after,bulk,123l,current,bulk,request,next,bulk,failure,return,null,when,mock,bulk,processor,flush,return,mock,bulk,processor
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> @Override 		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener);1549907957;Override the bulk processor build process to provide a mock implementation,_but reuse the listener implementation in our mock to test that the listener logic_works correctly with request flushing logic.;@Override_		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener) {_			this.mockBulkProcessor = mock(BulkProcessor.class)___			when(mockBulkProcessor.add(any(IndexRequest.class))).thenAnswer(new Answer<Object>() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					_					nextBulkRequest.add((IndexRequest) invocationOnMock.getArgument(0))___					return null__				}_			})___			doAnswer(new Answer() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					while (nextBulkRequest.numberOfActions() > 0) {_						_						flushLatch.await()___						_						_						BulkRequest currentBulkRequest = nextBulkRequest__						nextBulkRequest = new BulkRequest()___						listener.beforeBulk(123L, currentBulkRequest)___						if (nextBulkFailure == null) {_							BulkItemResponse[] mockResponses = new BulkItemResponse[currentBulkRequest.requests().size()]__							for (int i = 0_ i < currentBulkRequest.requests().size()_ i++) {_								Throwable mockItemFailure = mockItemFailuresList.get(i)___								if (mockItemFailure == null) {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", mock(ActionResponse.class))__								} else {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", new BulkItemResponse.Failure("index", "type", "id", mockItemFailure))__								}_							}__							listener.afterBulk(123L, currentBulkRequest, new BulkResponse(mockResponses, 1000L))__						} else {_							listener.afterBulk(123L, currentBulkRequest, nextBulkFailure)__						}_					}__					return null__				}_			}).when(mockBulkProcessor).flush()___			return mockBulkProcessor__		};override,the,bulk,processor,build,process,to,provide,a,mock,implementation,but,reuse,the,listener,implementation,in,our,mock,to,test,that,the,listener,logic,works,correctly,with,request,flushing,logic;override,protected,bulk,processor,build,bulk,processor,final,bulk,processor,listener,listener,this,mock,bulk,processor,mock,bulk,processor,class,when,mock,bulk,processor,add,any,index,request,class,then,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,next,bulk,request,add,index,request,invocation,on,mock,get,argument,0,return,null,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,while,next,bulk,request,number,of,actions,0,flush,latch,await,bulk,request,current,bulk,request,next,bulk,request,next,bulk,request,new,bulk,request,listener,before,bulk,123l,current,bulk,request,if,next,bulk,failure,null,bulk,item,response,mock,responses,new,bulk,item,response,current,bulk,request,requests,size,for,int,i,0,i,current,bulk,request,requests,size,i,throwable,mock,item,failure,mock,item,failures,list,get,i,if,mock,item,failure,null,mock,responses,i,new,bulk,item,response,i,op,type,mock,action,response,class,else,mock,responses,i,new,bulk,item,response,i,op,type,new,bulk,item,response,failure,index,type,id,mock,item,failure,listener,after,bulk,123l,current,bulk,request,new,bulk,response,mock,responses,1000l,else,listener,after,bulk,123l,current,bulk,request,next,bulk,failure,return,null,when,mock,bulk,processor,flush,return,mock,bulk,processor
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> @Override 		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener);1549907975;Override the bulk processor build process to provide a mock implementation,_but reuse the listener implementation in our mock to test that the listener logic_works correctly with request flushing logic.;@Override_		protected BulkProcessor buildBulkProcessor(final BulkProcessor.Listener listener) {_			this.mockBulkProcessor = mock(BulkProcessor.class)___			when(mockBulkProcessor.add(any(IndexRequest.class))).thenAnswer(new Answer<Object>() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					_					nextBulkRequest.add((IndexRequest) invocationOnMock.getArgument(0))___					return null__				}_			})___			doAnswer(new Answer() {_				@Override_				public Object answer(InvocationOnMock invocationOnMock) throws Throwable {_					while (nextBulkRequest.numberOfActions() > 0) {_						_						flushLatch.await()___						_						_						BulkRequest currentBulkRequest = nextBulkRequest__						nextBulkRequest = new BulkRequest()___						listener.beforeBulk(123L, currentBulkRequest)___						if (nextBulkFailure == null) {_							BulkItemResponse[] mockResponses = new BulkItemResponse[currentBulkRequest.requests().size()]__							for (int i = 0_ i < currentBulkRequest.requests().size()_ i++) {_								Throwable mockItemFailure = mockItemFailuresList.get(i)___								if (mockItemFailure == null) {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", mock(ActionResponse.class))__								} else {_									_									mockResponses[i] = new BulkItemResponse(i, "opType", new BulkItemResponse.Failure("index", "type", "id", mockItemFailure))__								}_							}__							listener.afterBulk(123L, currentBulkRequest, new BulkResponse(mockResponses, 1000L))__						} else {_							listener.afterBulk(123L, currentBulkRequest, nextBulkFailure)__						}_					}__					return null__				}_			}).when(mockBulkProcessor).flush()___			return mockBulkProcessor__		};override,the,bulk,processor,build,process,to,provide,a,mock,implementation,but,reuse,the,listener,implementation,in,our,mock,to,test,that,the,listener,logic,works,correctly,with,request,flushing,logic;override,protected,bulk,processor,build,bulk,processor,final,bulk,processor,listener,listener,this,mock,bulk,processor,mock,bulk,processor,class,when,mock,bulk,processor,add,any,index,request,class,then,answer,new,answer,object,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,next,bulk,request,add,index,request,invocation,on,mock,get,argument,0,return,null,do,answer,new,answer,override,public,object,answer,invocation,on,mock,invocation,on,mock,throws,throwable,while,next,bulk,request,number,of,actions,0,flush,latch,await,bulk,request,current,bulk,request,next,bulk,request,next,bulk,request,new,bulk,request,listener,before,bulk,123l,current,bulk,request,if,next,bulk,failure,null,bulk,item,response,mock,responses,new,bulk,item,response,current,bulk,request,requests,size,for,int,i,0,i,current,bulk,request,requests,size,i,throwable,mock,item,failure,mock,item,failures,list,get,i,if,mock,item,failure,null,mock,responses,i,new,bulk,item,response,i,op,type,mock,action,response,class,else,mock,responses,i,new,bulk,item,response,i,op,type,new,bulk,item,response,failure,index,type,id,mock,item,failure,listener,after,bulk,123l,current,bulk,request,new,bulk,response,mock,responses,1000l,else,listener,after,bulk,123l,current,bulk,request,next,bulk,failure,return,null,when,mock,bulk,processor,flush,return,mock,bulk,processor
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnInvoke() throws Throwable;1487948320;Tests that any item failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testItemFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,item,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnInvoke() throws Throwable;1495923072;Tests that any item failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testItemFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,item,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnInvoke() throws Throwable;1508481109;Tests that any item failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testItemFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,item,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnInvoke() throws Throwable;1517405138;Tests that any item failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testItemFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,item,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnInvoke() throws Throwable;1533129233;Tests that any item failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testItemFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,item,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnInvoke() throws Throwable;1533129234;Tests that any item failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testItemFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,item,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnInvoke() throws Throwable;1533129234;Tests that any item failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testItemFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,item,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnInvoke() throws Throwable;1538998760;Tests that any item failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testItemFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,item,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnInvoke() throws Throwable;1549907957;Tests that any item failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testItemFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,item,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnInvoke() throws Throwable;1549907975;Tests that any item failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testItemFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,item,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void manualBulkRequestWithAllPendingRequests();1487948320;This method is used to mimic a scheduled bulk request_ we need to do this_manually because we are mocking the BulkProcessor;public void manualBulkRequestWithAllPendingRequests() {_			flushLatch.trigger()_ _			mockBulkProcessor.flush()__		};this,method,is,used,to,mimic,a,scheduled,bulk,request,we,need,to,do,this,manually,because,we,are,mocking,the,bulk,processor;public,void,manual,bulk,request,with,all,pending,requests,flush,latch,trigger,mock,bulk,processor,flush
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void manualBulkRequestWithAllPendingRequests();1495923072;This method is used to mimic a scheduled bulk request_ we need to do this_manually because we are mocking the BulkProcessor.;public void manualBulkRequestWithAllPendingRequests() {_			flushLatch.trigger()_ _			mockBulkProcessor.flush()__		};this,method,is,used,to,mimic,a,scheduled,bulk,request,we,need,to,do,this,manually,because,we,are,mocking,the,bulk,processor;public,void,manual,bulk,request,with,all,pending,requests,flush,latch,trigger,mock,bulk,processor,flush
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void manualBulkRequestWithAllPendingRequests();1508481109;This method is used to mimic a scheduled bulk request_ we need to do this_manually because we are mocking the BulkProcessor.;public void manualBulkRequestWithAllPendingRequests() {_			flushLatch.trigger()_ _			mockBulkProcessor.flush()__		};this,method,is,used,to,mimic,a,scheduled,bulk,request,we,need,to,do,this,manually,because,we,are,mocking,the,bulk,processor;public,void,manual,bulk,request,with,all,pending,requests,flush,latch,trigger,mock,bulk,processor,flush
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void manualBulkRequestWithAllPendingRequests();1517405138;This method is used to mimic a scheduled bulk request_ we need to do this_manually because we are mocking the BulkProcessor.;public void manualBulkRequestWithAllPendingRequests() {_			flushLatch.trigger()_ _			mockBulkProcessor.flush()__		};this,method,is,used,to,mimic,a,scheduled,bulk,request,we,need,to,do,this,manually,because,we,are,mocking,the,bulk,processor;public,void,manual,bulk,request,with,all,pending,requests,flush,latch,trigger,mock,bulk,processor,flush
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void manualBulkRequestWithAllPendingRequests();1533129233;This method is used to mimic a scheduled bulk request_ we need to do this_manually because we are mocking the BulkProcessor.;public void manualBulkRequestWithAllPendingRequests() {_			flushLatch.trigger()_ _			mockBulkProcessor.flush()__		};this,method,is,used,to,mimic,a,scheduled,bulk,request,we,need,to,do,this,manually,because,we,are,mocking,the,bulk,processor;public,void,manual,bulk,request,with,all,pending,requests,flush,latch,trigger,mock,bulk,processor,flush
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void manualBulkRequestWithAllPendingRequests();1533129234;This method is used to mimic a scheduled bulk request_ we need to do this_manually because we are mocking the BulkProcessor.;public void manualBulkRequestWithAllPendingRequests() {_			flushLatch.trigger()_ _			mockBulkProcessor.flush()__		};this,method,is,used,to,mimic,a,scheduled,bulk,request,we,need,to,do,this,manually,because,we,are,mocking,the,bulk,processor;public,void,manual,bulk,request,with,all,pending,requests,flush,latch,trigger,mock,bulk,processor,flush
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void manualBulkRequestWithAllPendingRequests();1533129234;This method is used to mimic a scheduled bulk request_ we need to do this_manually because we are mocking the BulkProcessor.;public void manualBulkRequestWithAllPendingRequests() {_			flushLatch.trigger()_ _			mockBulkProcessor.flush()__		};this,method,is,used,to,mimic,a,scheduled,bulk,request,we,need,to,do,this,manually,because,we,are,mocking,the,bulk,processor;public,void,manual,bulk,request,with,all,pending,requests,flush,latch,trigger,mock,bulk,processor,flush
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void manualBulkRequestWithAllPendingRequests();1538998760;This method is used to mimic a scheduled bulk request_ we need to do this_manually because we are mocking the BulkProcessor.;public void manualBulkRequestWithAllPendingRequests() {_			flushLatch.trigger()_ _			mockBulkProcessor.flush()__		};this,method,is,used,to,mimic,a,scheduled,bulk,request,we,need,to,do,this,manually,because,we,are,mocking,the,bulk,processor;public,void,manual,bulk,request,with,all,pending,requests,flush,latch,trigger,mock,bulk,processor,flush
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void manualBulkRequestWithAllPendingRequests();1549907957;This method is used to mimic a scheduled bulk request_ we need to do this_manually because we are mocking the BulkProcessor.;public void manualBulkRequestWithAllPendingRequests() {_			flushLatch.trigger()_ _			mockBulkProcessor.flush()__		};this,method,is,used,to,mimic,a,scheduled,bulk,request,we,need,to,do,this,manually,because,we,are,mocking,the,bulk,processor;public,void,manual,bulk,request,with,all,pending,requests,flush,latch,trigger,mock,bulk,processor,flush
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void manualBulkRequestWithAllPendingRequests();1549907975;This method is used to mimic a scheduled bulk request_ we need to do this_manually because we are mocking the BulkProcessor.;public void manualBulkRequestWithAllPendingRequests() {_			flushLatch.trigger()_ _			mockBulkProcessor.flush()__		};this,method,is,used,to,mimic,a,scheduled,bulk,request,we,need,to,do,this,manually,because,we,are,mocking,the,bulk,processor;public,void,manual,bulk,request,with,all,pending,requests,flush,latch,trigger,mock,bulk,processor,flush
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testAtLeastOnceSink() throws Throwable;1495923072;Tests that the sink correctly waits for pending requests (including re-added requests) on checkpoints__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testAtLeastOnceSink() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_				new HashMap<String, String>(),_				new SimpleSinkFunction<String>(),_				new DummyRetryFailureHandler())_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		sink.continueFlush()___		_		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		Assert.assertEquals(1, sink.getNumPendingRequests())___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))___		sink.continueFlush()___		_		snapshotThread.sync()___		testHarness.close()__	};tests,that,the,sink,correctly,waits,for,pending,requests,including,re,added,requests,on,checkpoints,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,at,least,once,sink,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,assert,assert,equals,1,sink,get,num,pending,requests,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,sink,continue,flush,snapshot,thread,sync,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testAtLeastOnceSink() throws Throwable;1508481109;Tests that the sink correctly waits for pending requests (including re-added requests) on checkpoints__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testAtLeastOnceSink() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_				new HashMap<String, String>(),_				new SimpleSinkFunction<String>(),_				new DummyRetryFailureHandler())_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		sink.continueFlush()___		_		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		Assert.assertEquals(1, sink.getNumPendingRequests())___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))___		sink.continueFlush()___		_		snapshotThread.sync()___		testHarness.close()__	};tests,that,the,sink,correctly,waits,for,pending,requests,including,re,added,requests,on,checkpoints,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,at,least,once,sink,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,assert,assert,equals,1,sink,get,num,pending,requests,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,sink,continue,flush,snapshot,thread,sync,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testAtLeastOnceSink() throws Throwable;1517405138;Tests that the sink correctly waits for pending requests (including re-added requests) on checkpoints__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testAtLeastOnceSink() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_				new HashMap<String, String>(),_				new SimpleSinkFunction<String>(),_				new DummyRetryFailureHandler())_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		sink.continueFlush()___		_		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		Assert.assertEquals(1, sink.getNumPendingRequests())___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))___		sink.continueFlush()___		_		snapshotThread.sync()___		testHarness.close()__	};tests,that,the,sink,correctly,waits,for,pending,requests,including,re,added,requests,on,checkpoints,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,at,least,once,sink,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,assert,assert,equals,1,sink,get,num,pending,requests,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,sink,continue,flush,snapshot,thread,sync,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testAtLeastOnceSink() throws Throwable;1533129233;Tests that the sink correctly waits for pending requests (including re-added requests) on checkpoints__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testAtLeastOnceSink() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_				new HashMap<String, String>(),_				new SimpleSinkFunction<String>(),_				new DummyRetryFailureHandler())_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		sink.continueFlush()___		_		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		Assert.assertEquals(1, sink.getNumPendingRequests())___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))___		sink.continueFlush()___		_		snapshotThread.sync()___		testHarness.close()__	};tests,that,the,sink,correctly,waits,for,pending,requests,including,re,added,requests,on,checkpoints,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,at,least,once,sink,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,assert,assert,equals,1,sink,get,num,pending,requests,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,sink,continue,flush,snapshot,thread,sync,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testAtLeastOnceSink() throws Throwable;1533129234;Tests that the sink correctly waits for pending requests (including re-added requests) on checkpoints__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testAtLeastOnceSink() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_				new HashMap<String, String>(),_				new SimpleSinkFunction<String>(),_				new DummyRetryFailureHandler())_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		sink.continueFlush()___		_		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		Assert.assertEquals(1, sink.getNumPendingRequests())___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))___		sink.continueFlush()___		_		snapshotThread.sync()___		testHarness.close()__	};tests,that,the,sink,correctly,waits,for,pending,requests,including,re,added,requests,on,checkpoints,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,at,least,once,sink,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,assert,assert,equals,1,sink,get,num,pending,requests,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,sink,continue,flush,snapshot,thread,sync,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testAtLeastOnceSink() throws Throwable;1533129234;Tests that the sink correctly waits for pending requests (including re-added requests) on checkpoints__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testAtLeastOnceSink() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_				new HashMap<String, String>(),_				new SimpleSinkFunction<String>(),_				new DummyRetryFailureHandler())_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		sink.continueFlush()___		_		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		Assert.assertEquals(1, sink.getNumPendingRequests())___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))___		sink.continueFlush()___		_		snapshotThread.sync()___		testHarness.close()__	};tests,that,the,sink,correctly,waits,for,pending,requests,including,re,added,requests,on,checkpoints,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,at,least,once,sink,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,assert,assert,equals,1,sink,get,num,pending,requests,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,sink,continue,flush,snapshot,thread,sync,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testAtLeastOnceSink() throws Throwable;1538998760;Tests that the sink correctly waits for pending requests (including re-added requests) on checkpoints__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testAtLeastOnceSink() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_				new HashMap<String, String>(),_				new SimpleSinkFunction<String>(),_				new DummyRetryFailureHandler())_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		sink.continueFlush()___		_		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		Assert.assertEquals(1, sink.getNumPendingRequests())___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))___		sink.continueFlush()___		_		snapshotThread.sync()___		testHarness.close()__	};tests,that,the,sink,correctly,waits,for,pending,requests,including,re,added,requests,on,checkpoints,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,at,least,once,sink,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,assert,assert,equals,1,sink,get,num,pending,requests,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,sink,continue,flush,snapshot,thread,sync,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testAtLeastOnceSink() throws Throwable;1549907957;Tests that the sink correctly waits for pending requests (including re-added requests) on checkpoints__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testAtLeastOnceSink() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_				new HashMap<String, String>(),_				new SimpleSinkFunction<String>(),_				new DummyRetryFailureHandler())_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		sink.continueFlush()___		_		_____		_		Assert.assertEquals(1, sink.getNumPendingRequests())___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))___		sink.continueFlush()___		_		snapshotThread.sync()___		testHarness.close()__	};tests,that,the,sink,correctly,waits,for,pending,requests,including,re,added,requests,on,checkpoints,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,at,least,once,sink,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,assert,assert,equals,1,sink,get,num,pending,requests,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,sink,continue,flush,snapshot,thread,sync,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testAtLeastOnceSink() throws Throwable;1549907975;Tests that the sink correctly waits for pending requests (including re-added requests) on checkpoints__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testAtLeastOnceSink() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_				new HashMap<String, String>(),_				new SimpleSinkFunction<String>(),_				new DummyRetryFailureHandler())_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		sink.continueFlush()___		_		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		Assert.assertEquals(1, sink.getNumPendingRequests())___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))___		sink.continueFlush()___		_		snapshotThread.sync()___		testHarness.close()__	};tests,that,the,sink,correctly,waits,for,pending,requests,including,re,added,requests,on,checkpoints,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,at,least,once,sink,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,assert,assert,equals,1,sink,get,num,pending,requests,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,sink,continue,flush,snapshot,thread,sync,test,harness,close
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnInvoke() throws Throwable;1487948320;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testBulkFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,bulk,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnInvoke() throws Throwable;1495923072;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testBulkFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,bulk,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnInvoke() throws Throwable;1508481109;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testBulkFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,bulk,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnInvoke() throws Throwable;1517405138;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testBulkFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,bulk,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnInvoke() throws Throwable;1533129233;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testBulkFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,bulk,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnInvoke() throws Throwable;1533129234;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testBulkFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,bulk,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnInvoke() throws Throwable;1533129234;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testBulkFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,bulk,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnInvoke() throws Throwable;1538998760;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testBulkFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,bulk,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnInvoke() throws Throwable;1549907957;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testBulkFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,bulk,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnInvoke() throws Throwable;1549907975;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following invoke call.;@Test_	public void testBulkFailureRethrownOnInvoke() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.processElement(new StreamRecord<>("next msg"))__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,invoke,call;test,public,void,test,bulk,failure,rethrown,on,invoke,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,process,element,new,stream,record,next,msg,catch,exception,e,assert,assert,true,e,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testCollectionArgumentNotModified();1517405138;Verifies that the collection given to the sink is not modified.;@Test_	public void testCollectionArgumentNotModified() {_		Map<String, String> userConfig = new HashMap<>()__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_DELAY, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_ENABLE, "true")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_RETRIES, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_TYPE, "CONSTANT")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_INTERVAL_MS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_SIZE_MB, "1")___		new DummyElasticsearchSink<>(_			Collections.unmodifiableMap(userConfig),_			new SimpleSinkFunction<String>(),_			new NoOpFailureHandler())__	};verifies,that,the,collection,given,to,the,sink,is,not,modified;test,public,void,test,collection,argument,not,modified,map,string,string,user,config,new,hash,map,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,true,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,constant,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,new,dummy,elasticsearch,sink,collections,unmodifiable,map,user,config,new,simple,sink,function,string,new,no,op,failure,handler
ElasticsearchSinkBaseTest -> @Test 	public void testCollectionArgumentNotModified();1533129233;Verifies that the collection given to the sink is not modified.;@Test_	public void testCollectionArgumentNotModified() {_		Map<String, String> userConfig = new HashMap<>()__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_DELAY, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_ENABLE, "true")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_RETRIES, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_TYPE, "CONSTANT")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_INTERVAL_MS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_SIZE_MB, "1")___		new DummyElasticsearchSink<>(_			Collections.unmodifiableMap(userConfig),_			new SimpleSinkFunction<String>(),_			new NoOpFailureHandler())__	};verifies,that,the,collection,given,to,the,sink,is,not,modified;test,public,void,test,collection,argument,not,modified,map,string,string,user,config,new,hash,map,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,true,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,constant,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,new,dummy,elasticsearch,sink,collections,unmodifiable,map,user,config,new,simple,sink,function,string,new,no,op,failure,handler
ElasticsearchSinkBaseTest -> @Test 	public void testCollectionArgumentNotModified();1533129234;Verifies that the collection given to the sink is not modified.;@Test_	public void testCollectionArgumentNotModified() {_		Map<String, String> userConfig = new HashMap<>()__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_DELAY, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_ENABLE, "true")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_RETRIES, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_TYPE, "CONSTANT")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_INTERVAL_MS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_SIZE_MB, "1")___		new DummyElasticsearchSink<>(_			Collections.unmodifiableMap(userConfig),_			new SimpleSinkFunction<String>(),_			new NoOpFailureHandler())__	};verifies,that,the,collection,given,to,the,sink,is,not,modified;test,public,void,test,collection,argument,not,modified,map,string,string,user,config,new,hash,map,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,true,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,constant,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,new,dummy,elasticsearch,sink,collections,unmodifiable,map,user,config,new,simple,sink,function,string,new,no,op,failure,handler
ElasticsearchSinkBaseTest -> @Test 	public void testCollectionArgumentNotModified();1533129234;Verifies that the collection given to the sink is not modified.;@Test_	public void testCollectionArgumentNotModified() {_		Map<String, String> userConfig = new HashMap<>()__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_DELAY, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_ENABLE, "true")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_RETRIES, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_TYPE, "CONSTANT")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_INTERVAL_MS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_SIZE_MB, "1")___		new DummyElasticsearchSink<>(_			Collections.unmodifiableMap(userConfig),_			new SimpleSinkFunction<String>(),_			new NoOpFailureHandler())__	};verifies,that,the,collection,given,to,the,sink,is,not,modified;test,public,void,test,collection,argument,not,modified,map,string,string,user,config,new,hash,map,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,true,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,constant,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,new,dummy,elasticsearch,sink,collections,unmodifiable,map,user,config,new,simple,sink,function,string,new,no,op,failure,handler
ElasticsearchSinkBaseTest -> @Test 	public void testCollectionArgumentNotModified();1538998760;Verifies that the collection given to the sink is not modified.;@Test_	public void testCollectionArgumentNotModified() {_		Map<String, String> userConfig = new HashMap<>()__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_DELAY, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_ENABLE, "true")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_RETRIES, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_TYPE, "CONSTANT")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_INTERVAL_MS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_SIZE_MB, "1")___		new DummyElasticsearchSink<>(_			Collections.unmodifiableMap(userConfig),_			new SimpleSinkFunction<String>(),_			new NoOpFailureHandler())__	};verifies,that,the,collection,given,to,the,sink,is,not,modified;test,public,void,test,collection,argument,not,modified,map,string,string,user,config,new,hash,map,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,true,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,constant,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,new,dummy,elasticsearch,sink,collections,unmodifiable,map,user,config,new,simple,sink,function,string,new,no,op,failure,handler
ElasticsearchSinkBaseTest -> @Test 	public void testCollectionArgumentNotModified();1549907957;Verifies that the collection given to the sink is not modified.;@Test_	public void testCollectionArgumentNotModified() {_		Map<String, String> userConfig = new HashMap<>()__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_DELAY, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_ENABLE, "true")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_RETRIES, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_TYPE, "CONSTANT")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_INTERVAL_MS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_SIZE_MB, "1")___		new DummyElasticsearchSink<>(_			Collections.unmodifiableMap(userConfig),_			new SimpleSinkFunction<String>(),_			new NoOpFailureHandler())__	};verifies,that,the,collection,given,to,the,sink,is,not,modified;test,public,void,test,collection,argument,not,modified,map,string,string,user,config,new,hash,map,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,true,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,constant,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,new,dummy,elasticsearch,sink,collections,unmodifiable,map,user,config,new,simple,sink,function,string,new,no,op,failure,handler
ElasticsearchSinkBaseTest -> @Test 	public void testCollectionArgumentNotModified();1549907975;Verifies that the collection given to the sink is not modified.;@Test_	public void testCollectionArgumentNotModified() {_		Map<String, String> userConfig = new HashMap<>()__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_DELAY, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_ENABLE, "true")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_RETRIES, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_BACKOFF_TYPE, "CONSTANT")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_INTERVAL_MS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_ACTIONS, "1")__		userConfig.put(ElasticsearchSinkBase.CONFIG_KEY_BULK_FLUSH_MAX_SIZE_MB, "1")___		new DummyElasticsearchSink<>(_			Collections.unmodifiableMap(userConfig),_			new SimpleSinkFunction<String>(),_			new NoOpFailureHandler())__	};verifies,that,the,collection,given,to,the,sink,is,not,modified;test,public,void,test,collection,argument,not,modified,map,string,string,user,config,new,hash,map,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,true,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,constant,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,user,config,put,elasticsearch,sink,base,1,new,dummy,elasticsearch,sink,collections,unmodifiable,map,user,config,new,simple,sink,function,string,new,no,op,failure,handler
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void continueFlush();1487948320;On non-manual flushes, i.e. when flush is called in the snapshot method implementation,_usages need to explicitly call this to allow the flush to continue. This is useful_to make sure that specific requests get added to the the next bulk request for flushing.;public void continueFlush() {_			flushLatch.trigger()__		};on,non,manual,flushes,i,e,when,flush,is,called,in,the,snapshot,method,implementation,usages,need,to,explicitly,call,this,to,allow,the,flush,to,continue,this,is,useful,to,make,sure,that,specific,requests,get,added,to,the,the,next,bulk,request,for,flushing;public,void,continue,flush,flush,latch,trigger
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void continueFlush();1495923072;On non-manual flushes, i.e. when flush is called in the snapshot method implementation,_usages need to explicitly call this to allow the flush to continue. This is useful_to make sure that specific requests get added to the the next bulk request for flushing.;public void continueFlush() {_			flushLatch.trigger()__		};on,non,manual,flushes,i,e,when,flush,is,called,in,the,snapshot,method,implementation,usages,need,to,explicitly,call,this,to,allow,the,flush,to,continue,this,is,useful,to,make,sure,that,specific,requests,get,added,to,the,the,next,bulk,request,for,flushing;public,void,continue,flush,flush,latch,trigger
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void continueFlush();1508481109;On non-manual flushes, i.e. when flush is called in the snapshot method implementation,_usages need to explicitly call this to allow the flush to continue. This is useful_to make sure that specific requests get added to the next bulk request for flushing.;public void continueFlush() {_			flushLatch.trigger()__		};on,non,manual,flushes,i,e,when,flush,is,called,in,the,snapshot,method,implementation,usages,need,to,explicitly,call,this,to,allow,the,flush,to,continue,this,is,useful,to,make,sure,that,specific,requests,get,added,to,the,next,bulk,request,for,flushing;public,void,continue,flush,flush,latch,trigger
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void continueFlush();1517405138;On non-manual flushes, i.e. when flush is called in the snapshot method implementation,_usages need to explicitly call this to allow the flush to continue. This is useful_to make sure that specific requests get added to the next bulk request for flushing.;public void continueFlush() {_			flushLatch.trigger()__		};on,non,manual,flushes,i,e,when,flush,is,called,in,the,snapshot,method,implementation,usages,need,to,explicitly,call,this,to,allow,the,flush,to,continue,this,is,useful,to,make,sure,that,specific,requests,get,added,to,the,next,bulk,request,for,flushing;public,void,continue,flush,flush,latch,trigger
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void continueFlush();1533129233;On non-manual flushes, i.e. when flush is called in the snapshot method implementation,_usages need to explicitly call this to allow the flush to continue. This is useful_to make sure that specific requests get added to the next bulk request for flushing.;public void continueFlush() {_			flushLatch.trigger()__		};on,non,manual,flushes,i,e,when,flush,is,called,in,the,snapshot,method,implementation,usages,need,to,explicitly,call,this,to,allow,the,flush,to,continue,this,is,useful,to,make,sure,that,specific,requests,get,added,to,the,next,bulk,request,for,flushing;public,void,continue,flush,flush,latch,trigger
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void continueFlush();1533129234;On non-manual flushes, i.e. when flush is called in the snapshot method implementation,_usages need to explicitly call this to allow the flush to continue. This is useful_to make sure that specific requests get added to the next bulk request for flushing.;public void continueFlush() {_			flushLatch.trigger()__		};on,non,manual,flushes,i,e,when,flush,is,called,in,the,snapshot,method,implementation,usages,need,to,explicitly,call,this,to,allow,the,flush,to,continue,this,is,useful,to,make,sure,that,specific,requests,get,added,to,the,next,bulk,request,for,flushing;public,void,continue,flush,flush,latch,trigger
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void continueFlush();1533129234;On non-manual flushes, i.e. when flush is called in the snapshot method implementation,_usages need to explicitly call this to allow the flush to continue. This is useful_to make sure that specific requests get added to the next bulk request for flushing.;public void continueFlush() {_			flushLatch.trigger()__		};on,non,manual,flushes,i,e,when,flush,is,called,in,the,snapshot,method,implementation,usages,need,to,explicitly,call,this,to,allow,the,flush,to,continue,this,is,useful,to,make,sure,that,specific,requests,get,added,to,the,next,bulk,request,for,flushing;public,void,continue,flush,flush,latch,trigger
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void continueFlush();1538998760;On non-manual flushes, i.e. when flush is called in the snapshot method implementation,_usages need to explicitly call this to allow the flush to continue. This is useful_to make sure that specific requests get added to the next bulk request for flushing.;public void continueFlush() {_			flushLatch.trigger()__		};on,non,manual,flushes,i,e,when,flush,is,called,in,the,snapshot,method,implementation,usages,need,to,explicitly,call,this,to,allow,the,flush,to,continue,this,is,useful,to,make,sure,that,specific,requests,get,added,to,the,next,bulk,request,for,flushing;public,void,continue,flush,flush,latch,trigger
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void continueFlush();1549907957;On non-manual flushes, i.e. when flush is called in the snapshot method implementation,_usages need to explicitly call this to allow the flush to continue. This is useful_to make sure that specific requests get added to the next bulk request for flushing.;public void continueFlush() {_			flushLatch.trigger()__		};on,non,manual,flushes,i,e,when,flush,is,called,in,the,snapshot,method,implementation,usages,need,to,explicitly,call,this,to,allow,the,flush,to,continue,this,is,useful,to,make,sure,that,specific,requests,get,added,to,the,next,bulk,request,for,flushing;public,void,continue,flush,flush,latch,trigger
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void continueFlush();1549907975;On non-manual flushes, i.e. when flush is called in the snapshot method implementation,_usages need to explicitly call this to allow the flush to continue. This is useful_to make sure that specific requests get added to the next bulk request for flushing.;public void continueFlush() {_			flushLatch.trigger()__		};on,non,manual,flushes,i,e,when,flush,is,called,in,the,snapshot,method,implementation,usages,need,to,explicitly,call,this,to,allow,the,flush,to,continue,this,is,useful,to,make,sure,that,specific,requests,get,added,to,the,next,bulk,request,for,flushing;public,void,continue,flush,flush,latch,trigger
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setFailNextBulkRequestCompletely(Throwable failure);1487948320;Let the next bulk request fail completely with the provided throwable._If this is set, the failures list provided with setMockItemFailuresListForNextBulkItemResponses is not respected.;public void setFailNextBulkRequestCompletely(Throwable failure) {_			this.nextBulkFailure = failure__		};let,the,next,bulk,request,fail,completely,with,the,provided,throwable,if,this,is,set,the,failures,list,provided,with,set,mock,item,failures,list,for,next,bulk,item,responses,is,not,respected;public,void,set,fail,next,bulk,request,completely,throwable,failure,this,next,bulk,failure,failure
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setFailNextBulkRequestCompletely(Throwable failure);1495923072;Let the next bulk request fail completely with the provided throwable._If this is set, the failures list provided with setMockItemFailuresListForNextBulkItemResponses is not respected.;public void setFailNextBulkRequestCompletely(Throwable failure) {_			this.nextBulkFailure = failure__		};let,the,next,bulk,request,fail,completely,with,the,provided,throwable,if,this,is,set,the,failures,list,provided,with,set,mock,item,failures,list,for,next,bulk,item,responses,is,not,respected;public,void,set,fail,next,bulk,request,completely,throwable,failure,this,next,bulk,failure,failure
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setFailNextBulkRequestCompletely(Throwable failure);1508481109;Let the next bulk request fail completely with the provided throwable._If this is set, the failures list provided with setMockItemFailuresListForNextBulkItemResponses is not respected.;public void setFailNextBulkRequestCompletely(Throwable failure) {_			this.nextBulkFailure = failure__		};let,the,next,bulk,request,fail,completely,with,the,provided,throwable,if,this,is,set,the,failures,list,provided,with,set,mock,item,failures,list,for,next,bulk,item,responses,is,not,respected;public,void,set,fail,next,bulk,request,completely,throwable,failure,this,next,bulk,failure,failure
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setFailNextBulkRequestCompletely(Throwable failure);1517405138;Let the next bulk request fail completely with the provided throwable._If this is set, the failures list provided with setMockItemFailuresListForNextBulkItemResponses is not respected.;public void setFailNextBulkRequestCompletely(Throwable failure) {_			this.nextBulkFailure = failure__		};let,the,next,bulk,request,fail,completely,with,the,provided,throwable,if,this,is,set,the,failures,list,provided,with,set,mock,item,failures,list,for,next,bulk,item,responses,is,not,respected;public,void,set,fail,next,bulk,request,completely,throwable,failure,this,next,bulk,failure,failure
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setFailNextBulkRequestCompletely(Throwable failure);1533129233;Let the next bulk request fail completely with the provided throwable._If this is set, the failures list provided with setMockItemFailuresListForNextBulkItemResponses is not respected.;public void setFailNextBulkRequestCompletely(Throwable failure) {_			this.nextBulkFailure = failure__		};let,the,next,bulk,request,fail,completely,with,the,provided,throwable,if,this,is,set,the,failures,list,provided,with,set,mock,item,failures,list,for,next,bulk,item,responses,is,not,respected;public,void,set,fail,next,bulk,request,completely,throwable,failure,this,next,bulk,failure,failure
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setFailNextBulkRequestCompletely(Throwable failure);1533129234;Let the next bulk request fail completely with the provided throwable._If this is set, the failures list provided with setMockItemFailuresListForNextBulkItemResponses is not respected.;public void setFailNextBulkRequestCompletely(Throwable failure) {_			this.nextBulkFailure = failure__		};let,the,next,bulk,request,fail,completely,with,the,provided,throwable,if,this,is,set,the,failures,list,provided,with,set,mock,item,failures,list,for,next,bulk,item,responses,is,not,respected;public,void,set,fail,next,bulk,request,completely,throwable,failure,this,next,bulk,failure,failure
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setFailNextBulkRequestCompletely(Throwable failure);1533129234;Let the next bulk request fail completely with the provided throwable._If this is set, the failures list provided with setMockItemFailuresListForNextBulkItemResponses is not respected.;public void setFailNextBulkRequestCompletely(Throwable failure) {_			this.nextBulkFailure = failure__		};let,the,next,bulk,request,fail,completely,with,the,provided,throwable,if,this,is,set,the,failures,list,provided,with,set,mock,item,failures,list,for,next,bulk,item,responses,is,not,respected;public,void,set,fail,next,bulk,request,completely,throwable,failure,this,next,bulk,failure,failure
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setFailNextBulkRequestCompletely(Throwable failure);1538998760;Let the next bulk request fail completely with the provided throwable._If this is set, the failures list provided with setMockItemFailuresListForNextBulkItemResponses is not respected.;public void setFailNextBulkRequestCompletely(Throwable failure) {_			this.nextBulkFailure = failure__		};let,the,next,bulk,request,fail,completely,with,the,provided,throwable,if,this,is,set,the,failures,list,provided,with,set,mock,item,failures,list,for,next,bulk,item,responses,is,not,respected;public,void,set,fail,next,bulk,request,completely,throwable,failure,this,next,bulk,failure,failure
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setFailNextBulkRequestCompletely(Throwable failure);1549907957;Let the next bulk request fail completely with the provided throwable._If this is set, the failures list provided with setMockItemFailuresListForNextBulkItemResponses is not respected.;public void setFailNextBulkRequestCompletely(Throwable failure) {_			this.nextBulkFailure = failure__		};let,the,next,bulk,request,fail,completely,with,the,provided,throwable,if,this,is,set,the,failures,list,provided,with,set,mock,item,failures,list,for,next,bulk,item,responses,is,not,respected;public,void,set,fail,next,bulk,request,completely,throwable,failure,this,next,bulk,failure,failure
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setFailNextBulkRequestCompletely(Throwable failure);1549907975;Let the next bulk request fail completely with the provided throwable._If this is set, the failures list provided with setMockItemFailuresListForNextBulkItemResponses is not respected.;public void setFailNextBulkRequestCompletely(Throwable failure) {_			this.nextBulkFailure = failure__		};let,the,next,bulk,request,fail,completely,with,the,provided,throwable,if,this,is,set,the,failures,list,provided,with,set,mock,item,failures,list,for,next,bulk,item,responses,is,not,respected;public,void,set,fail,next,bulk,request,completely,throwable,failure,this,next,bulk,failure,failure
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception;1495923072;This test is meant to assure that testAtLeastOnceSink is valid by testing that if flushing is disabled,_the snapshot method does indeed finishes without waiting for pending requests__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new DummyRetryFailureHandler())__		sink.disableFlushOnCheckpoint()_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		testHarness.snapshot(1L, 1000L)___		testHarness.close()__	};this,test,is,meant,to,assure,that,test,at,least,once,sink,is,valid,by,testing,that,if,flushing,is,disabled,the,snapshot,method,does,indeed,finishes,without,waiting,for,pending,requests,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,does,not,wait,for,pending,requests,if,flushing,disabled,throws,exception,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,sink,disable,flush,on,checkpoint,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,test,harness,snapshot,1l,1000l,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception;1508481109;This test is meant to assure that testAtLeastOnceSink is valid by testing that if flushing is disabled,_the snapshot method does indeed finishes without waiting for pending requests__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new DummyRetryFailureHandler())__		sink.disableFlushOnCheckpoint()_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		testHarness.snapshot(1L, 1000L)___		testHarness.close()__	};this,test,is,meant,to,assure,that,test,at,least,once,sink,is,valid,by,testing,that,if,flushing,is,disabled,the,snapshot,method,does,indeed,finishes,without,waiting,for,pending,requests,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,does,not,wait,for,pending,requests,if,flushing,disabled,throws,exception,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,sink,disable,flush,on,checkpoint,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,test,harness,snapshot,1l,1000l,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception;1517405138;This test is meant to assure that testAtLeastOnceSink is valid by testing that if flushing is disabled,_the snapshot method does indeed finishes without waiting for pending requests__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new DummyRetryFailureHandler())__		sink.disableFlushOnCheckpoint()_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		testHarness.snapshot(1L, 1000L)___		testHarness.close()__	};this,test,is,meant,to,assure,that,test,at,least,once,sink,is,valid,by,testing,that,if,flushing,is,disabled,the,snapshot,method,does,indeed,finishes,without,waiting,for,pending,requests,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,does,not,wait,for,pending,requests,if,flushing,disabled,throws,exception,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,sink,disable,flush,on,checkpoint,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,test,harness,snapshot,1l,1000l,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception;1533129233;This test is meant to assure that testAtLeastOnceSink is valid by testing that if flushing is disabled,_the snapshot method does indeed finishes without waiting for pending requests__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new DummyRetryFailureHandler())__		sink.disableFlushOnCheckpoint()_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		testHarness.snapshot(1L, 1000L)___		testHarness.close()__	};this,test,is,meant,to,assure,that,test,at,least,once,sink,is,valid,by,testing,that,if,flushing,is,disabled,the,snapshot,method,does,indeed,finishes,without,waiting,for,pending,requests,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,does,not,wait,for,pending,requests,if,flushing,disabled,throws,exception,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,sink,disable,flush,on,checkpoint,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,test,harness,snapshot,1l,1000l,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception;1533129234;This test is meant to assure that testAtLeastOnceSink is valid by testing that if flushing is disabled,_the snapshot method does indeed finishes without waiting for pending requests__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new DummyRetryFailureHandler())__		sink.disableFlushOnCheckpoint()_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		testHarness.snapshot(1L, 1000L)___		testHarness.close()__	};this,test,is,meant,to,assure,that,test,at,least,once,sink,is,valid,by,testing,that,if,flushing,is,disabled,the,snapshot,method,does,indeed,finishes,without,waiting,for,pending,requests,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,does,not,wait,for,pending,requests,if,flushing,disabled,throws,exception,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,sink,disable,flush,on,checkpoint,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,test,harness,snapshot,1l,1000l,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception;1533129234;This test is meant to assure that testAtLeastOnceSink is valid by testing that if flushing is disabled,_the snapshot method does indeed finishes without waiting for pending requests__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new DummyRetryFailureHandler())__		sink.disableFlushOnCheckpoint()_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		testHarness.snapshot(1L, 1000L)___		testHarness.close()__	};this,test,is,meant,to,assure,that,test,at,least,once,sink,is,valid,by,testing,that,if,flushing,is,disabled,the,snapshot,method,does,indeed,finishes,without,waiting,for,pending,requests,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,does,not,wait,for,pending,requests,if,flushing,disabled,throws,exception,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,sink,disable,flush,on,checkpoint,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,test,harness,snapshot,1l,1000l,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception;1538998760;This test is meant to assure that testAtLeastOnceSink is valid by testing that if flushing is disabled,_the snapshot method does indeed finishes without waiting for pending requests__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new DummyRetryFailureHandler())__		sink.disableFlushOnCheckpoint()_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		testHarness.snapshot(1L, 1000L)___		testHarness.close()__	};this,test,is,meant,to,assure,that,test,at,least,once,sink,is,valid,by,testing,that,if,flushing,is,disabled,the,snapshot,method,does,indeed,finishes,without,waiting,for,pending,requests,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,does,not,wait,for,pending,requests,if,flushing,disabled,throws,exception,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,sink,disable,flush,on,checkpoint,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,test,harness,snapshot,1l,1000l,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception;1549907957;This test is meant to assure that testAtLeastOnceSink is valid by testing that if flushing is disabled,_the snapshot method does indeed finishes without waiting for pending requests__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new DummyRetryFailureHandler())__		sink.disableFlushOnCheckpoint()_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		testHarness.snapshot(1L, 1000L)___		testHarness.close()__	};this,test,is,meant,to,assure,that,test,at,least,once,sink,is,valid,by,testing,that,if,flushing,is,disabled,the,snapshot,method,does,indeed,finishes,without,waiting,for,pending,requests,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,does,not,wait,for,pending,requests,if,flushing,disabled,throws,exception,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,sink,disable,flush,on,checkpoint,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,test,harness,snapshot,1l,1000l,test,harness,close
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception;1549907975;This test is meant to assure that testAtLeastOnceSink is valid by testing that if flushing is disabled,_the snapshot method does indeed finishes without waiting for pending requests__we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testDoesNotWaitForPendingRequestsIfFlushingDisabled() throws Exception {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new DummyRetryFailureHandler())__		sink.disableFlushOnCheckpoint()_ __		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		testHarness.snapshot(1L, 1000L)___		testHarness.close()__	};this,test,is,meant,to,assure,that,test,at,least,once,sink,is,valid,by,testing,that,if,flushing,is,disabled,the,snapshot,method,does,indeed,finishes,without,waiting,for,pending,requests,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,does,not,wait,for,pending,requests,if,flushing,disabled,throws,exception,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,dummy,retry,failure,handler,sink,disable,flush,on,checkpoint,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,test,harness,snapshot,1l,1000l,test,harness,close
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnCheckpoint() throws Throwable;1487948320;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testBulkFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,bulk,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnCheckpoint() throws Throwable;1495923072;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testBulkFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,bulk,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnCheckpoint() throws Throwable;1508481109;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testBulkFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,bulk,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnCheckpoint() throws Throwable;1517405138;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testBulkFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,bulk,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnCheckpoint() throws Throwable;1533129233;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testBulkFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,bulk,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnCheckpoint() throws Throwable;1533129234;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testBulkFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,bulk,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnCheckpoint() throws Throwable;1533129234;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testBulkFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,bulk,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnCheckpoint() throws Throwable;1538998760;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testBulkFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,bulk,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnCheckpoint() throws Throwable;1549907957;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testBulkFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,bulk,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testBulkFailureRethrownOnCheckpoint() throws Throwable;1549907975;Tests that any bulk failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testBulkFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,bulk,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable;1495923072;Tests that any item failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		__		List<Exception> mockResponsesList = new ArrayList<>(2)__		mockResponsesList.add(null)_ _		mockResponsesList.add(new Exception("artificial failure for record"))_ _		sink.setMockItemFailuresListForNextBulkItemResponses(mockResponsesList)___		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(ActionRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,item,failure,rethrown,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,list,exception,mock,responses,list,new,array,list,2,mock,responses,list,add,null,mock,responses,list,add,new,exception,artificial,failure,for,record,sink,set,mock,item,failures,list,for,next,bulk,item,responses,mock,responses,list,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,action,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable;1508481109;Tests that any item failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		__		List<Exception> mockResponsesList = new ArrayList<>(2)__		mockResponsesList.add(null)_ _		mockResponsesList.add(new Exception("artificial failure for record"))_ _		sink.setMockItemFailuresListForNextBulkItemResponses(mockResponsesList)___		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(ActionRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,item,failure,rethrown,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,list,exception,mock,responses,list,new,array,list,2,mock,responses,list,add,null,mock,responses,list,add,new,exception,artificial,failure,for,record,sink,set,mock,item,failures,list,for,next,bulk,item,responses,mock,responses,list,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,action,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable;1517405138;Tests that any item failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		__		List<Exception> mockResponsesList = new ArrayList<>(2)__		mockResponsesList.add(null)_ _		mockResponsesList.add(new Exception("artificial failure for record"))_ _		sink.setMockItemFailuresListForNextBulkItemResponses(mockResponsesList)___		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(ActionRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,item,failure,rethrown,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,list,exception,mock,responses,list,new,array,list,2,mock,responses,list,add,null,mock,responses,list,add,new,exception,artificial,failure,for,record,sink,set,mock,item,failures,list,for,next,bulk,item,responses,mock,responses,list,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,action,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable;1533129233;Tests that any item failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		__		List<Exception> mockResponsesList = new ArrayList<>(2)__		mockResponsesList.add(null)_ _		mockResponsesList.add(new Exception("artificial failure for record"))_ _		sink.setMockItemFailuresListForNextBulkItemResponses(mockResponsesList)___		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,item,failure,rethrown,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,list,exception,mock,responses,list,new,array,list,2,mock,responses,list,add,null,mock,responses,list,add,new,exception,artificial,failure,for,record,sink,set,mock,item,failures,list,for,next,bulk,item,responses,mock,responses,list,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable;1533129234;Tests that any item failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		__		List<Exception> mockResponsesList = new ArrayList<>(2)__		mockResponsesList.add(null)_ _		mockResponsesList.add(new Exception("artificial failure for record"))_ _		sink.setMockItemFailuresListForNextBulkItemResponses(mockResponsesList)___		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,item,failure,rethrown,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,list,exception,mock,responses,list,new,array,list,2,mock,responses,list,add,null,mock,responses,list,add,new,exception,artificial,failure,for,record,sink,set,mock,item,failures,list,for,next,bulk,item,responses,mock,responses,list,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable;1533129234;Tests that any item failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		__		List<Exception> mockResponsesList = new ArrayList<>(2)__		mockResponsesList.add(null)_ _		mockResponsesList.add(new Exception("artificial failure for record"))_ _		sink.setMockItemFailuresListForNextBulkItemResponses(mockResponsesList)___		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,item,failure,rethrown,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,list,exception,mock,responses,list,new,array,list,2,mock,responses,list,add,null,mock,responses,list,add,new,exception,artificial,failure,for,record,sink,set,mock,item,failures,list,for,next,bulk,item,responses,mock,responses,list,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable;1538998760;Tests that any item failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		__		List<Exception> mockResponsesList = new ArrayList<>(2)__		mockResponsesList.add(null)_ _		mockResponsesList.add(new Exception("artificial failure for record"))_ _		sink.setMockItemFailuresListForNextBulkItemResponses(mockResponsesList)___		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,item,failure,rethrown,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,list,exception,mock,responses,list,new,array,list,2,mock,responses,list,add,null,mock,responses,list,add,new,exception,artificial,failure,for,record,sink,set,mock,item,failures,list,for,next,bulk,item,responses,mock,responses,list,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable;1549907957;Tests that any item failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		__		List<Exception> mockResponsesList = new ArrayList<>(2)__		mockResponsesList.add(null)_ _		mockResponsesList.add(new Exception("artificial failure for record"))_ _		sink.setMockItemFailuresListForNextBulkItemResponses(mockResponsesList)___		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,item,failure,rethrown,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,list,exception,mock,responses,list,new,array,list,2,mock,responses,list,add,null,mock,responses,list,add,new,exception,artificial,failure,for,record,sink,set,mock,item,failures,list,for,next,bulk,item,responses,mock,responses,list,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable;1549907975;Tests that any item failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testItemFailureRethrownOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		__		List<Exception> mockResponsesList = new ArrayList<>(2)__		mockResponsesList.add(null)_ _		mockResponsesList.add(new Exception("artificial failure for record"))_ _		sink.setMockItemFailuresListForNextBulkItemResponses(mockResponsesList)___		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,item,failure,rethrown,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,list,exception,mock,responses,list,new,array,list,2,mock,responses,list,add,null,mock,responses,list,add,new,exception,artificial,failure,for,record,sink,set,mock,item,failures,list,for,next,bulk,item,responses,mock,responses,list,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnCheckpoint() throws Throwable;1487948320;Tests that any item failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testItemFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,item,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnCheckpoint() throws Throwable;1495923072;Tests that any item failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testItemFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,item,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnCheckpoint() throws Throwable;1508481109;Tests that any item failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testItemFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,item,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnCheckpoint() throws Throwable;1517405138;Tests that any item failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testItemFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,item,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnCheckpoint() throws Throwable;1533129233;Tests that any item failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testItemFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,item,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnCheckpoint() throws Throwable;1533129234;Tests that any item failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testItemFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,item,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnCheckpoint() throws Throwable;1533129234;Tests that any item failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testItemFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,item,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnCheckpoint() throws Throwable;1538998760;Tests that any item failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testItemFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,item,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnCheckpoint() throws Throwable;1549907957;Tests that any item failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testItemFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,item,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> @Test 	public void testItemFailureRethrownOnCheckpoint() throws Throwable;1549907975;Tests that any item failure in the listener callbacks is rethrown on an immediately following checkpoint.;@Test_	public void testItemFailureRethrownOnCheckpoint() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList(new Exception("artificial failure for record")))__		testHarness.processElement(new StreamRecord<>("msg"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		try {_			testHarness.snapshot(1L, 1000L)__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for record"))___			_			return__		}__		Assert.fail()__	};tests,that,any,item,failure,in,the,listener,callbacks,is,rethrown,on,an,immediately,following,checkpoint;test,public,void,test,item,failure,rethrown,on,checkpoint,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,new,exception,artificial,failure,for,record,test,harness,process,element,new,stream,record,msg,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,try,test,harness,snapshot,1l,1000l,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,record,return,assert,fail
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList);1487948320;Set the list of mock failures to use for the next bulk of item responses. A {@code null}_means that the response is successful, failed otherwise.__The list is used with corresponding order to the requests in the bulk, i.e. the first_request uses the response at index 0, the second requests uses the response at index 1, etc.;public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList) {_			this.mockItemFailuresList = mockItemFailuresList__		};set,the,list,of,mock,failures,to,use,for,the,next,bulk,of,item,responses,a,code,null,means,that,the,response,is,successful,failed,otherwise,the,list,is,used,with,corresponding,order,to,the,requests,in,the,bulk,i,e,the,first,request,uses,the,response,at,index,0,the,second,requests,uses,the,response,at,index,1,etc;public,void,set,mock,item,failures,list,for,next,bulk,item,responses,list,extends,throwable,mock,item,failures,list,this,mock,item,failures,list,mock,item,failures,list
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList);1495923072;Set the list of mock failures to use for the next bulk of item responses. A {@code null}_means that the response is successful, failed otherwise.__<p>The list is used with corresponding order to the requests in the bulk, i.e. the first_request uses the response at index 0, the second requests uses the response at index 1, etc.;public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList) {_			this.mockItemFailuresList = mockItemFailuresList__		};set,the,list,of,mock,failures,to,use,for,the,next,bulk,of,item,responses,a,code,null,means,that,the,response,is,successful,failed,otherwise,p,the,list,is,used,with,corresponding,order,to,the,requests,in,the,bulk,i,e,the,first,request,uses,the,response,at,index,0,the,second,requests,uses,the,response,at,index,1,etc;public,void,set,mock,item,failures,list,for,next,bulk,item,responses,list,extends,throwable,mock,item,failures,list,this,mock,item,failures,list,mock,item,failures,list
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList);1508481109;Set the list of mock failures to use for the next bulk of item responses. A {@code null}_means that the response is successful, failed otherwise.__<p>The list is used with corresponding order to the requests in the bulk, i.e. the first_request uses the response at index 0, the second requests uses the response at index 1, etc.;public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList) {_			this.mockItemFailuresList = mockItemFailuresList__		};set,the,list,of,mock,failures,to,use,for,the,next,bulk,of,item,responses,a,code,null,means,that,the,response,is,successful,failed,otherwise,p,the,list,is,used,with,corresponding,order,to,the,requests,in,the,bulk,i,e,the,first,request,uses,the,response,at,index,0,the,second,requests,uses,the,response,at,index,1,etc;public,void,set,mock,item,failures,list,for,next,bulk,item,responses,list,extends,throwable,mock,item,failures,list,this,mock,item,failures,list,mock,item,failures,list
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList);1517405138;Set the list of mock failures to use for the next bulk of item responses. A {@code null}_means that the response is successful, failed otherwise.__<p>The list is used with corresponding order to the requests in the bulk, i.e. the first_request uses the response at index 0, the second requests uses the response at index 1, etc.;public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList) {_			this.mockItemFailuresList = mockItemFailuresList__		};set,the,list,of,mock,failures,to,use,for,the,next,bulk,of,item,responses,a,code,null,means,that,the,response,is,successful,failed,otherwise,p,the,list,is,used,with,corresponding,order,to,the,requests,in,the,bulk,i,e,the,first,request,uses,the,response,at,index,0,the,second,requests,uses,the,response,at,index,1,etc;public,void,set,mock,item,failures,list,for,next,bulk,item,responses,list,extends,throwable,mock,item,failures,list,this,mock,item,failures,list,mock,item,failures,list
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList);1533129233;Set the list of mock failures to use for the next bulk of item responses. A {@code null}_means that the response is successful, failed otherwise.__<p>The list is used with corresponding order to the requests in the bulk, i.e. the first_request uses the response at index 0, the second requests uses the response at index 1, etc.;public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList) {_			this.mockItemFailuresList = mockItemFailuresList__		};set,the,list,of,mock,failures,to,use,for,the,next,bulk,of,item,responses,a,code,null,means,that,the,response,is,successful,failed,otherwise,p,the,list,is,used,with,corresponding,order,to,the,requests,in,the,bulk,i,e,the,first,request,uses,the,response,at,index,0,the,second,requests,uses,the,response,at,index,1,etc;public,void,set,mock,item,failures,list,for,next,bulk,item,responses,list,extends,throwable,mock,item,failures,list,this,mock,item,failures,list,mock,item,failures,list
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList);1533129234;Set the list of mock failures to use for the next bulk of item responses. A {@code null}_means that the response is successful, failed otherwise.__<p>The list is used with corresponding order to the requests in the bulk, i.e. the first_request uses the response at index 0, the second requests uses the response at index 1, etc.;public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList) {_			this.mockItemFailuresList = mockItemFailuresList__		};set,the,list,of,mock,failures,to,use,for,the,next,bulk,of,item,responses,a,code,null,means,that,the,response,is,successful,failed,otherwise,p,the,list,is,used,with,corresponding,order,to,the,requests,in,the,bulk,i,e,the,first,request,uses,the,response,at,index,0,the,second,requests,uses,the,response,at,index,1,etc;public,void,set,mock,item,failures,list,for,next,bulk,item,responses,list,extends,throwable,mock,item,failures,list,this,mock,item,failures,list,mock,item,failures,list
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList);1533129234;Set the list of mock failures to use for the next bulk of item responses. A {@code null}_means that the response is successful, failed otherwise.__<p>The list is used with corresponding order to the requests in the bulk, i.e. the first_request uses the response at index 0, the second requests uses the response at index 1, etc.;public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList) {_			this.mockItemFailuresList = mockItemFailuresList__		};set,the,list,of,mock,failures,to,use,for,the,next,bulk,of,item,responses,a,code,null,means,that,the,response,is,successful,failed,otherwise,p,the,list,is,used,with,corresponding,order,to,the,requests,in,the,bulk,i,e,the,first,request,uses,the,response,at,index,0,the,second,requests,uses,the,response,at,index,1,etc;public,void,set,mock,item,failures,list,for,next,bulk,item,responses,list,extends,throwable,mock,item,failures,list,this,mock,item,failures,list,mock,item,failures,list
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList);1538998760;Set the list of mock failures to use for the next bulk of item responses. A {@code null}_means that the response is successful, failed otherwise.__<p>The list is used with corresponding order to the requests in the bulk, i.e. the first_request uses the response at index 0, the second requests uses the response at index 1, etc.;public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList) {_			this.mockItemFailuresList = mockItemFailuresList__		};set,the,list,of,mock,failures,to,use,for,the,next,bulk,of,item,responses,a,code,null,means,that,the,response,is,successful,failed,otherwise,p,the,list,is,used,with,corresponding,order,to,the,requests,in,the,bulk,i,e,the,first,request,uses,the,response,at,index,0,the,second,requests,uses,the,response,at,index,1,etc;public,void,set,mock,item,failures,list,for,next,bulk,item,responses,list,extends,throwable,mock,item,failures,list,this,mock,item,failures,list,mock,item,failures,list
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList);1549907957;Set the list of mock failures to use for the next bulk of item responses. A {@code null}_means that the response is successful, failed otherwise.__<p>The list is used with corresponding order to the requests in the bulk, i.e. the first_request uses the response at index 0, the second requests uses the response at index 1, etc.;public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList) {_			this.mockItemFailuresList = mockItemFailuresList__		};set,the,list,of,mock,failures,to,use,for,the,next,bulk,of,item,responses,a,code,null,means,that,the,response,is,successful,failed,otherwise,p,the,list,is,used,with,corresponding,order,to,the,requests,in,the,bulk,i,e,the,first,request,uses,the,response,at,index,0,the,second,requests,uses,the,response,at,index,1,etc;public,void,set,mock,item,failures,list,for,next,bulk,item,responses,list,extends,throwable,mock,item,failures,list,this,mock,item,failures,list,mock,item,failures,list
ElasticsearchSinkBaseTest -> DummyElasticsearchSink -> public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList);1549907975;Set the list of mock failures to use for the next bulk of item responses. A {@code null}_means that the response is successful, failed otherwise.__<p>The list is used with corresponding order to the requests in the bulk, i.e. the first_request uses the response at index 0, the second requests uses the response at index 1, etc.;public void setMockItemFailuresListForNextBulkItemResponses(List<? extends Throwable> mockItemFailuresList) {_			this.mockItemFailuresList = mockItemFailuresList__		};set,the,list,of,mock,failures,to,use,for,the,next,bulk,of,item,responses,a,code,null,means,that,the,response,is,successful,failed,otherwise,p,the,list,is,used,with,corresponding,order,to,the,requests,in,the,bulk,i,e,the,first,request,uses,the,response,at,index,0,the,second,requests,uses,the,response,at,index,1,etc;public,void,set,mock,item,failures,list,for,next,bulk,item,responses,list,extends,throwable,mock,item,failures,list,this,mock,item,failures,list,mock,item,failures,list
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable;1495923072;Tests that any bulk failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(ActionRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))___		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,bulk,failure,rethrown,on,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,action,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable;1508481109;Tests that any bulk failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(ActionRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))___		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,bulk,failure,rethrown,on,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,action,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable;1517405138;Tests that any bulk failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(ActionRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(ActionRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))___		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,bulk,failure,rethrown,on,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,action,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,action,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable;1533129233;Tests that any bulk failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))___		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,bulk,failure,rethrown,on,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable;1533129234;Tests that any bulk failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))___		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,bulk,failure,rethrown,on,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable;1533129234;Tests that any bulk failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))___		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,bulk,failure,rethrown,on,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable;1538998760;Tests that any bulk failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))___		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,bulk,failure,rethrown,on,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable;1549907957;Tests that any bulk failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))___		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,bulk,failure,rethrown,on,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
ElasticsearchSinkBaseTest -> @Test(timeout = 5000) 	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable;1549907975;Tests that any bulk failure in the listener callbacks due to flushing on an immediately following checkpoint_is rethrown_ we set a timeout because the test will not finish if the logic is broken.;@Test(timeout = 5000)_	public void testBulkFailureRethrownOnOnCheckpointAfterFlush() throws Throwable {_		final DummyElasticsearchSink<String> sink = new DummyElasticsearchSink<>(_			new HashMap<String, String>(), new SimpleSinkFunction<String>(), new NoOpFailureHandler())___		final OneInputStreamOperatorTestHarness<String, Object> testHarness =_			new OneInputStreamOperatorTestHarness<>(new StreamSink<>(sink))___		testHarness.open()___		_		sink.setMockItemFailuresListForNextBulkItemResponses(Collections.singletonList((Exception) null))__		testHarness.processElement(new StreamRecord<>("msg-1"))__		verify(sink.getMockBulkProcessor(), times(1)).add(any(IndexRequest.class))___		_		sink.manualBulkRequestWithAllPendingRequests()___		_		testHarness.processElement(new StreamRecord<>("msg-2"))__		testHarness.processElement(new StreamRecord<>("msg-3"))__		verify(sink.getMockBulkProcessor(), times(3)).add(any(IndexRequest.class))___		CheckedThread snapshotThread = new CheckedThread() {_			@Override_			public void go() throws Exception {_				testHarness.snapshot(1L, 1000L)__			}_		}__		snapshotThread.start()___		_		while (snapshotThread.getState() != Thread.State.WAITING) {_			Thread.sleep(10)__		}__		_		sink.setFailNextBulkRequestCompletely(new Exception("artificial failure for bulk request"))___		_		sink.continueFlush()___		try {_			snapshotThread.sync()__		} catch (Exception e) {_			_			Assert.assertTrue(e.getCause().getCause().getMessage().contains("artificial failure for bulk request"))___			_			return__		}__		Assert.fail()__	};tests,that,any,bulk,failure,in,the,listener,callbacks,due,to,flushing,on,an,immediately,following,checkpoint,is,rethrown,we,set,a,timeout,because,the,test,will,not,finish,if,the,logic,is,broken;test,timeout,5000,public,void,test,bulk,failure,rethrown,on,on,checkpoint,after,flush,throws,throwable,final,dummy,elasticsearch,sink,string,sink,new,dummy,elasticsearch,sink,new,hash,map,string,string,new,simple,sink,function,string,new,no,op,failure,handler,final,one,input,stream,operator,test,harness,string,object,test,harness,new,one,input,stream,operator,test,harness,new,stream,sink,sink,test,harness,open,sink,set,mock,item,failures,list,for,next,bulk,item,responses,collections,singleton,list,exception,null,test,harness,process,element,new,stream,record,msg,1,verify,sink,get,mock,bulk,processor,times,1,add,any,index,request,class,sink,manual,bulk,request,with,all,pending,requests,test,harness,process,element,new,stream,record,msg,2,test,harness,process,element,new,stream,record,msg,3,verify,sink,get,mock,bulk,processor,times,3,add,any,index,request,class,checked,thread,snapshot,thread,new,checked,thread,override,public,void,go,throws,exception,test,harness,snapshot,1l,1000l,snapshot,thread,start,while,snapshot,thread,get,state,thread,state,waiting,thread,sleep,10,sink,set,fail,next,bulk,request,completely,new,exception,artificial,failure,for,bulk,request,sink,continue,flush,try,snapshot,thread,sync,catch,exception,e,assert,assert,true,e,get,cause,get,cause,get,message,contains,artificial,failure,for,bulk,request,return,assert,fail
