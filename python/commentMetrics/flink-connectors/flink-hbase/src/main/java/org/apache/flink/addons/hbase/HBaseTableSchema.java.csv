# id;timestamp;commentText;codeText;commentWords;codeWords
HBaseTableSchema -> void setCharset(String charset);1487150654;Sets the charset for value strings and HBase identifiers.__@param charset the charset for value strings and HBase identifiers.;void setCharset(String charset) {_		this.charset = charset__	};sets,the,charset,for,value,strings,and,hbase,identifiers,param,charset,the,charset,for,value,strings,and,hbase,identifiers;void,set,charset,string,charset,this,charset,charset
HBaseTableSchema -> void setCharset(String charset);1495923069;Sets the charset for value strings and HBase identifiers.__@param charset the charset for value strings and HBase identifiers.;void setCharset(String charset) {_		this.charset = charset__	};sets,the,charset,for,value,strings,and,hbase,identifiers,param,charset,the,charset,for,value,strings,and,hbase,identifiers;void,set,charset,string,charset,this,charset,charset
HBaseTableSchema -> Map<String, TypeInformation<?>> getFamilyInfo(String family);1487150654;Returns the names and types of all registered column qualifiers of a specific column family.__@param family The name of the column family for which the column qualifier names and types are returned._@return The names and types of all registered column qualifiers of a specific column family.;Map<String, TypeInformation<?>> getFamilyInfo(String family) {_		return familyMap.get(family)__	};returns,the,names,and,types,of,all,registered,column,qualifiers,of,a,specific,column,family,param,family,the,name,of,the,column,family,for,which,the,column,qualifier,names,and,types,are,returned,return,the,names,and,types,of,all,registered,column,qualifiers,of,a,specific,column,family;map,string,type,information,get,family,info,string,family,return,family,map,get,family
HBaseTableSchema -> Map<String, TypeInformation<?>> getFamilyInfo(String family);1495923069;Returns the names and types of all registered column qualifiers of a specific column family.__@param family The name of the column family for which the column qualifier names and types are returned._@return The names and types of all registered column qualifiers of a specific column family.;Map<String, TypeInformation<?>> getFamilyInfo(String family) {_		return familyMap.get(family)__	};returns,the,names,and,types,of,all,registered,column,qualifiers,of,a,specific,column,family,param,family,the,name,of,the,column,family,for,which,the,column,qualifier,names,and,types,are,returned,return,the,names,and,types,of,all,registered,column,qualifiers,of,a,specific,column,family;map,string,type,information,get,family,info,string,family,return,family,map,get,family
HBaseTableSchema -> String[] getFamilyNames();1487150654;Returns the names of all registered column families.__@return The names of all registered column families.;String[] getFamilyNames() {_		return this.familyMap.keySet().toArray(new String[this.familyMap.size()])__	};returns,the,names,of,all,registered,column,families,return,the,names,of,all,registered,column,families;string,get,family,names,return,this,family,map,key,set,to,array,new,string,this,family,map,size
HBaseTableSchema -> String[] getFamilyNames();1495923069;Returns the names of all registered column families.__@return The names of all registered column families.;String[] getFamilyNames() {_		return this.familyMap.keySet().toArray(new String[this.familyMap.size()])__	};returns,the,names,of,all,registered,column,families,return,the,names,of,all,registered,column,families;string,get,family,names,return,this,family,map,key,set,to,array,new,string,this,family,map,size
HBaseTableSchema -> byte[][] getQualifierKeys(String family);1487150654;Returns the HBase identifiers of all registered column qualifiers for a specific column family.__@param family The name of the column family for which the column qualifier identifiers are returned._@return The HBase identifiers of all registered column qualifiers for a specific column family.;byte[][] getQualifierKeys(String family) {_		Map<String, TypeInformation<?>> qualifierMap = familyMap.get(family)___		if (qualifierMap == null) {_			throw new IllegalArgumentException("Family " + family + " does not exist in schema.")__		}_		Charset c = Charset.forName(charset)___		byte[][] qualifierKeys = new byte[qualifierMap.size()][]__		int i = 0__		for(String name : qualifierMap.keySet()) {_			qualifierKeys[i++] = name.getBytes(c)__		}_		return qualifierKeys__	};returns,the,hbase,identifiers,of,all,registered,column,qualifiers,for,a,specific,column,family,param,family,the,name,of,the,column,family,for,which,the,column,qualifier,identifiers,are,returned,return,the,hbase,identifiers,of,all,registered,column,qualifiers,for,a,specific,column,family;byte,get,qualifier,keys,string,family,map,string,type,information,qualifier,map,family,map,get,family,if,qualifier,map,null,throw,new,illegal,argument,exception,family,family,does,not,exist,in,schema,charset,c,charset,for,name,charset,byte,qualifier,keys,new,byte,qualifier,map,size,int,i,0,for,string,name,qualifier,map,key,set,qualifier,keys,i,name,get,bytes,c,return,qualifier,keys
HBaseTableSchema -> byte[][] getQualifierKeys(String family);1495923069;Returns the HBase identifiers of all registered column qualifiers for a specific column family.__@param family The name of the column family for which the column qualifier identifiers are returned._@return The HBase identifiers of all registered column qualifiers for a specific column family.;byte[][] getQualifierKeys(String family) {_		Map<String, TypeInformation<?>> qualifierMap = familyMap.get(family)___		if (qualifierMap == null) {_			throw new IllegalArgumentException("Family " + family + " does not exist in schema.")__		}_		Charset c = Charset.forName(charset)___		byte[][] qualifierKeys = new byte[qualifierMap.size()][]__		int i = 0__		for (String name : qualifierMap.keySet()) {_			qualifierKeys[i++] = name.getBytes(c)__		}_		return qualifierKeys__	};returns,the,hbase,identifiers,of,all,registered,column,qualifiers,for,a,specific,column,family,param,family,the,name,of,the,column,family,for,which,the,column,qualifier,identifiers,are,returned,return,the,hbase,identifiers,of,all,registered,column,qualifiers,for,a,specific,column,family;byte,get,qualifier,keys,string,family,map,string,type,information,qualifier,map,family,map,get,family,if,qualifier,map,null,throw,new,illegal,argument,exception,family,family,does,not,exist,in,schema,charset,c,charset,for,name,charset,byte,qualifier,keys,new,byte,qualifier,map,size,int,i,0,for,string,name,qualifier,map,key,set,qualifier,keys,i,name,get,bytes,c,return,qualifier,keys
HBaseTableSchema -> TypeInformation<?>[] getQualifierTypes(String family);1487150654;Returns the types of all registered column qualifiers of a specific column family.__@param family The name of the column family for which the column qualifier types are returned._@return The types of all registered column qualifiers of a specific column family.;TypeInformation<?>[] getQualifierTypes(String family) {_		Map<String, TypeInformation<?>> qualifierMap = familyMap.get(family)___		if (qualifierMap == null) {_			throw new IllegalArgumentException("Family " + family + " does not exist in schema.")__		}__		TypeInformation<?>[] typeInformation = new TypeInformation[qualifierMap.size()]__		int i = 0__		for (TypeInformation<?> typeInfo : qualifierMap.values()) {_			typeInformation[i] = typeInfo__			i++__		}_		return typeInformation__	};returns,the,types,of,all,registered,column,qualifiers,of,a,specific,column,family,param,family,the,name,of,the,column,family,for,which,the,column,qualifier,types,are,returned,return,the,types,of,all,registered,column,qualifiers,of,a,specific,column,family;type,information,get,qualifier,types,string,family,map,string,type,information,qualifier,map,family,map,get,family,if,qualifier,map,null,throw,new,illegal,argument,exception,family,family,does,not,exist,in,schema,type,information,type,information,new,type,information,qualifier,map,size,int,i,0,for,type,information,type,info,qualifier,map,values,type,information,i,type,info,i,return,type,information
HBaseTableSchema -> TypeInformation<?>[] getQualifierTypes(String family);1495923069;Returns the types of all registered column qualifiers of a specific column family.__@param family The name of the column family for which the column qualifier types are returned._@return The types of all registered column qualifiers of a specific column family.;TypeInformation<?>[] getQualifierTypes(String family) {_		Map<String, TypeInformation<?>> qualifierMap = familyMap.get(family)___		if (qualifierMap == null) {_			throw new IllegalArgumentException("Family " + family + " does not exist in schema.")__		}__		TypeInformation<?>[] typeInformation = new TypeInformation[qualifierMap.size()]__		int i = 0__		for (TypeInformation<?> typeInfo : qualifierMap.values()) {_			typeInformation[i] = typeInfo__			i++__		}_		return typeInformation__	};returns,the,types,of,all,registered,column,qualifiers,of,a,specific,column,family,param,family,the,name,of,the,column,family,for,which,the,column,qualifier,types,are,returned,return,the,types,of,all,registered,column,qualifiers,of,a,specific,column,family;type,information,get,qualifier,types,string,family,map,string,type,information,qualifier,map,family,map,get,family,if,qualifier,map,null,throw,new,illegal,argument,exception,family,family,does,not,exist,in,schema,type,information,type,information,new,type,information,qualifier,map,size,int,i,0,for,type,information,type,info,qualifier,map,values,type,information,i,type,info,i,return,type,information
HBaseTableSchema -> byte[][] getFamilyKeys();1487150654;Returns the HBase identifiers of all registered column families.__@return The HBase identifiers of all registered column families.;byte[][] getFamilyKeys() {_		Charset c = Charset.forName(charset)___		byte[][] familyKeys = new byte[this.familyMap.size()][]__		int i = 0__		for(String name : this.familyMap.keySet()) {_			familyKeys[i++] = name.getBytes(c)__		}_		return familyKeys__	};returns,the,hbase,identifiers,of,all,registered,column,families,return,the,hbase,identifiers,of,all,registered,column,families;byte,get,family,keys,charset,c,charset,for,name,charset,byte,family,keys,new,byte,this,family,map,size,int,i,0,for,string,name,this,family,map,key,set,family,keys,i,name,get,bytes,c,return,family,keys
HBaseTableSchema -> byte[][] getFamilyKeys();1495923069;Returns the HBase identifiers of all registered column families.__@return The HBase identifiers of all registered column families.;byte[][] getFamilyKeys() {_		Charset c = Charset.forName(charset)___		byte[][] familyKeys = new byte[this.familyMap.size()][]__		int i = 0__		for (String name : this.familyMap.keySet()) {_			familyKeys[i++] = name.getBytes(c)__		}_		return familyKeys__	};returns,the,hbase,identifiers,of,all,registered,column,families,return,the,hbase,identifiers,of,all,registered,column,families;byte,get,family,keys,charset,c,charset,for,name,charset,byte,family,keys,new,byte,this,family,map,size,int,i,0,for,string,name,this,family,map,key,set,family,keys,i,name,get,bytes,c,return,family,keys
HBaseTableSchema -> String[] getQualifierNames(String family);1487150654;Returns the names of all registered column qualifiers of a specific column family.__@param family The name of the column family for which the column qualifier names are returned._@return The names of all registered column qualifiers of a specific column family.;String[] getQualifierNames(String family) {_		Map<String, TypeInformation<?>> qualifierMap = familyMap.get(family)___		if (qualifierMap == null) {_			throw new IllegalArgumentException("Family " + family + " does not exist in schema.")__		}__		String[] qualifierNames = new String[qualifierMap.size()]__		int i = 0__		for (String qualifier: qualifierMap.keySet()) {_			qualifierNames[i] = qualifier__			i++__		}_		return qualifierNames__	};returns,the,names,of,all,registered,column,qualifiers,of,a,specific,column,family,param,family,the,name,of,the,column,family,for,which,the,column,qualifier,names,are,returned,return,the,names,of,all,registered,column,qualifiers,of,a,specific,column,family;string,get,qualifier,names,string,family,map,string,type,information,qualifier,map,family,map,get,family,if,qualifier,map,null,throw,new,illegal,argument,exception,family,family,does,not,exist,in,schema,string,qualifier,names,new,string,qualifier,map,size,int,i,0,for,string,qualifier,qualifier,map,key,set,qualifier,names,i,qualifier,i,return,qualifier,names
HBaseTableSchema -> String[] getQualifierNames(String family);1495923069;Returns the names of all registered column qualifiers of a specific column family.__@param family The name of the column family for which the column qualifier names are returned._@return The names of all registered column qualifiers of a specific column family.;String[] getQualifierNames(String family) {_		Map<String, TypeInformation<?>> qualifierMap = familyMap.get(family)___		if (qualifierMap == null) {_			throw new IllegalArgumentException("Family " + family + " does not exist in schema.")__		}__		String[] qualifierNames = new String[qualifierMap.size()]__		int i = 0__		for (String qualifier: qualifierMap.keySet()) {_			qualifierNames[i] = qualifier__			i++__		}_		return qualifierNames__	};returns,the,names,of,all,registered,column,qualifiers,of,a,specific,column,family,param,family,the,name,of,the,column,family,for,which,the,column,qualifier,names,are,returned,return,the,names,of,all,registered,column,qualifiers,of,a,specific,column,family;string,get,qualifier,names,string,family,map,string,type,information,qualifier,map,family,map,get,family,if,qualifier,map,null,throw,new,illegal,argument,exception,family,family,does,not,exist,in,schema,string,qualifier,names,new,string,qualifier,map,size,int,i,0,for,string,qualifier,qualifier,map,key,set,qualifier,names,i,qualifier,i,return,qualifier,names
HBaseTableSchema -> void addColumn(String family, String qualifier, Class<?> clazz);1487150653;Allows specifying the family and qualifier name along with the data type of the qualifier for an HBase table__@param family    the family name_@param qualifier the qualifier name_@param clazz     the data type of the qualifier;void addColumn(String family, String qualifier, Class<?> clazz) {_		Preconditions.checkNotNull(family, "family name")__		Preconditions.checkNotNull(qualifier, "qualifier name")__		Preconditions.checkNotNull(clazz, "class type")__		Map<String, TypeInformation<?>> map = this.familyMap.get(family)__		if (map == null) {_			map = new TreeMap<>()__		}_		if (!CLASS_TYPES.contains(clazz)) {_			_			throw new IllegalArgumentException("Unsupported class type found " + clazz+". Better to use byte[].class and deserialize using user defined scalar functions")__		}_		map.put(qualifier, TypeExtractor.getForClass(clazz))__		familyMap.put(family, map)__	};allows,specifying,the,family,and,qualifier,name,along,with,the,data,type,of,the,qualifier,for,an,hbase,table,param,family,the,family,name,param,qualifier,the,qualifier,name,param,clazz,the,data,type,of,the,qualifier;void,add,column,string,family,string,qualifier,class,clazz,preconditions,check,not,null,family,family,name,preconditions,check,not,null,qualifier,qualifier,name,preconditions,check,not,null,clazz,class,type,map,string,type,information,map,this,family,map,get,family,if,map,null,map,new,tree,map,if,contains,clazz,throw,new,illegal,argument,exception,unsupported,class,type,found,clazz,better,to,use,byte,class,and,deserialize,using,user,defined,scalar,functions,map,put,qualifier,type,extractor,get,for,class,clazz,family,map,put,family,map
HBaseTableSchema -> void addColumn(String family, String qualifier, Class<?> clazz);1487150654;Adds a column defined by family, qualifier, and type to the table schema.__@param family    the family name_@param qualifier the qualifier name_@param clazz     the data type of the qualifier;void addColumn(String family, String qualifier, Class<?> clazz) {_		Preconditions.checkNotNull(family, "family name")__		Preconditions.checkNotNull(qualifier, "qualifier name")__		Preconditions.checkNotNull(clazz, "class type")__		Map<String, TypeInformation<?>> qualifierMap = this.familyMap.get(family)___		if (!HBaseRowInputFormat.isSupportedType(clazz)) {_			_			throw new IllegalArgumentException("Unsupported class type found " + clazz+". " +_				"Better to use byte[].class and deserialize using user defined scalar functions")__		}__		if (qualifierMap == null) {_			qualifierMap = new LinkedHashMap<>()__		}_		qualifierMap.put(qualifier, TypeExtractor.getForClass(clazz))__		familyMap.put(family, qualifierMap)__	};adds,a,column,defined,by,family,qualifier,and,type,to,the,table,schema,param,family,the,family,name,param,qualifier,the,qualifier,name,param,clazz,the,data,type,of,the,qualifier;void,add,column,string,family,string,qualifier,class,clazz,preconditions,check,not,null,family,family,name,preconditions,check,not,null,qualifier,qualifier,name,preconditions,check,not,null,clazz,class,type,map,string,type,information,qualifier,map,this,family,map,get,family,if,hbase,row,input,format,is,supported,type,clazz,throw,new,illegal,argument,exception,unsupported,class,type,found,clazz,better,to,use,byte,class,and,deserialize,using,user,defined,scalar,functions,if,qualifier,map,null,qualifier,map,new,linked,hash,map,qualifier,map,put,qualifier,type,extractor,get,for,class,clazz,family,map,put,family,qualifier,map
HBaseTableSchema -> void addColumn(String family, String qualifier, Class<?> clazz);1495923069;Adds a column defined by family, qualifier, and type to the table schema.__@param family    the family name_@param qualifier the qualifier name_@param clazz     the data type of the qualifier;void addColumn(String family, String qualifier, Class<?> clazz) {_		Preconditions.checkNotNull(family, "family name")__		Preconditions.checkNotNull(qualifier, "qualifier name")__		Preconditions.checkNotNull(clazz, "class type")__		Map<String, TypeInformation<?>> qualifierMap = this.familyMap.get(family)___		if (!HBaseRowInputFormat.isSupportedType(clazz)) {_			_			throw new IllegalArgumentException("Unsupported class type found " + clazz + ". " +_				"Better to use byte[].class and deserialize using user defined scalar functions")__		}__		if (qualifierMap == null) {_			qualifierMap = new LinkedHashMap<>()__		}_		qualifierMap.put(qualifier, TypeExtractor.getForClass(clazz))__		familyMap.put(family, qualifierMap)__	};adds,a,column,defined,by,family,qualifier,and,type,to,the,table,schema,param,family,the,family,name,param,qualifier,the,qualifier,name,param,clazz,the,data,type,of,the,qualifier;void,add,column,string,family,string,qualifier,class,clazz,preconditions,check,not,null,family,family,name,preconditions,check,not,null,qualifier,qualifier,name,preconditions,check,not,null,clazz,class,type,map,string,type,information,qualifier,map,this,family,map,get,family,if,hbase,row,input,format,is,supported,type,clazz,throw,new,illegal,argument,exception,unsupported,class,type,found,clazz,better,to,use,byte,class,and,deserialize,using,user,defined,scalar,functions,if,qualifier,map,null,qualifier,map,new,linked,hash,map,qualifier,map,put,qualifier,type,extractor,get,for,class,clazz,family,map,put,family,qualifier,map
HBaseTableSchema -> String getStringCharset();1487150654;Returns the charset for value strings and HBase identifiers.__@return The charset for value strings and HBase identifiers.;String getStringCharset() {_		return this.charset__	};returns,the,charset,for,value,strings,and,hbase,identifiers,return,the,charset,for,value,strings,and,hbase,identifiers;string,get,string,charset,return,this,charset
HBaseTableSchema -> String getStringCharset();1495923069;Returns the charset for value strings and HBase identifiers.__@return The charset for value strings and HBase identifiers.;String getStringCharset() {_		return this.charset__	};returns,the,charset,for,value,strings,and,hbase,identifiers,return,the,charset,for,value,strings,and,hbase,identifiers;string,get,string,charset,return,this,charset
