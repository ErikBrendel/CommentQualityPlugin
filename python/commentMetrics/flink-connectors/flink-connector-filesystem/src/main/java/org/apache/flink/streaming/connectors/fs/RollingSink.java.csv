# id;timestamp;commentText;codeText;commentWords;codeWords
RollingSink -> public RollingSink(String basePath);1480685315;Creates a new {@code RollingSink} that writes files to the given base directory.__<p>_This uses a{@link DateTimeBucketer} as bucketer and a {@link StringWriter} has writer._The maximum bucket size is set to 384 MB.__@param basePath The directory to which to write the bucket files.;public RollingSink(String basePath) {_		this.basePath = basePath__		this.bucketer = new DateTimeBucketer()__		this.batchSize = DEFAULT_BATCH_SIZE__		this.writerTemplate = new StringWriter<>()__	};creates,a,new,code,rolling,sink,that,writes,files,to,the,given,base,directory,p,this,uses,a,link,date,time,bucketer,as,bucketer,and,a,link,string,writer,has,writer,the,maximum,bucket,size,is,set,to,384,mb,param,base,path,the,directory,to,which,to,write,the,bucket,files;public,rolling,sink,string,base,path,this,base,path,base,path,this,bucketer,new,date,time,bucketer,this,batch,size,this,writer,template,new,string,writer
RollingSink -> public RollingSink(String basePath);1484304405;Creates a new {@code RollingSink} that writes files to the given base directory.__<p>_This uses a{@link DateTimeBucketer} as bucketer and a {@link StringWriter} has writer._The maximum bucket size is set to 384 MB.__@param basePath The directory to which to write the bucket files.;public RollingSink(String basePath) {_		this.basePath = basePath__		this.bucketer = new DateTimeBucketer()__		this.batchSize = DEFAULT_BATCH_SIZE__		this.writerTemplate = new StringWriter<>()__	};creates,a,new,code,rolling,sink,that,writes,files,to,the,given,base,directory,p,this,uses,a,link,date,time,bucketer,as,bucketer,and,a,link,string,writer,has,writer,the,maximum,bucket,size,is,set,to,384,mb,param,base,path,the,directory,to,which,to,write,the,bucket,files;public,rolling,sink,string,base,path,this,base,path,base,path,this,bucketer,new,date,time,bucketer,this,batch,size,this,writer,template,new,string,writer
RollingSink -> public RollingSink(String basePath);1484304405;Creates a new {@code RollingSink} that writes files to the given base directory.__<p>_This uses a{@link DateTimeBucketer} as bucketer and a {@link StringWriter} has writer._The maximum bucket size is set to 384 MB.__@param basePath The directory to which to write the bucket files.;public RollingSink(String basePath) {_		this.basePath = basePath__		this.bucketer = new DateTimeBucketer()__		this.batchSize = DEFAULT_BATCH_SIZE__		this.writerTemplate = new StringWriter<>()__	};creates,a,new,code,rolling,sink,that,writes,files,to,the,given,base,directory,p,this,uses,a,link,date,time,bucketer,as,bucketer,and,a,link,string,writer,has,writer,the,maximum,bucket,size,is,set,to,384,mb,param,base,path,the,directory,to,which,to,write,the,bucket,files;public,rolling,sink,string,base,path,this,base,path,base,path,this,bucketer,new,date,time,bucketer,this,batch,size,this,writer,template,new,string,writer
RollingSink -> public RollingSink(String basePath);1495923089;Creates a new {@code RollingSink} that writes files to the given base directory.___<p>This uses a{@link DateTimeBucketer} as bucketer and a {@link StringWriter} has writer._The maximum bucket size is set to 384 MB.__@param basePath The directory to which to write the bucket files.;public RollingSink(String basePath) {_		this.basePath = basePath__		this.bucketer = new DateTimeBucketer()__		this.batchSize = DEFAULT_BATCH_SIZE__		this.writerTemplate = new StringWriter<>()__	};creates,a,new,code,rolling,sink,that,writes,files,to,the,given,base,directory,p,this,uses,a,link,date,time,bucketer,as,bucketer,and,a,link,string,writer,has,writer,the,maximum,bucket,size,is,set,to,384,mb,param,base,path,the,directory,to,which,to,write,the,bucket,files;public,rolling,sink,string,base,path,this,base,path,base,path,this,bucketer,new,date,time,bucketer,this,batch,size,this,writer,template,new,string,writer
RollingSink -> public RollingSink(String basePath);1503598628;Creates a new {@code RollingSink} that writes files to the given base directory.___<p>This uses a{@link DateTimeBucketer} as bucketer and a {@link StringWriter} has writer._The maximum bucket size is set to 384 MB.__@param basePath The directory to which to write the bucket files.;public RollingSink(String basePath) {_		this.basePath = basePath__		this.bucketer = new DateTimeBucketer()__		this.batchSize = DEFAULT_BATCH_SIZE__		this.writerTemplate = new StringWriter<>()__	};creates,a,new,code,rolling,sink,that,writes,files,to,the,given,base,directory,p,this,uses,a,link,date,time,bucketer,as,bucketer,and,a,link,string,writer,has,writer,the,maximum,bucket,size,is,set,to,384,mb,param,base,path,the,directory,to,which,to,write,the,bucket,files;public,rolling,sink,string,base,path,this,base,path,base,path,this,bucketer,new,date,time,bucketer,this,batch,size,this,writer,template,new,string,writer
RollingSink -> public RollingSink(String basePath);1507304600;Creates a new {@code RollingSink} that writes files to the given base directory.___<p>This uses a{@link DateTimeBucketer} as bucketer and a {@link StringWriter} has writer._The maximum bucket size is set to 384 MB.__@param basePath The directory to which to write the bucket files.;public RollingSink(String basePath) {_		this.basePath = basePath__		this.bucketer = new DateTimeBucketer()__		this.batchSize = DEFAULT_BATCH_SIZE__		this.writerTemplate = new StringWriter<>()__	};creates,a,new,code,rolling,sink,that,writes,files,to,the,given,base,directory,p,this,uses,a,link,date,time,bucketer,as,bucketer,and,a,link,string,writer,has,writer,the,maximum,bucket,size,is,set,to,384,mb,param,base,path,the,directory,to,which,to,write,the,bucket,files;public,rolling,sink,string,base,path,this,base,path,base,path,this,bucketer,new,date,time,bucketer,this,batch,size,this,writer,template,new,string,writer
RollingSink -> public RollingSink(String basePath);1511347989;Creates a new {@code RollingSink} that writes files to the given base directory.___<p>This uses a{@link DateTimeBucketer} as bucketer and a {@link StringWriter} has writer._The maximum bucket size is set to 384 MB.__@param basePath The directory to which to write the bucket files.;public RollingSink(String basePath) {_		this.basePath = basePath__		this.bucketer = new DateTimeBucketer()__		this.batchSize = DEFAULT_BATCH_SIZE__		this.writerTemplate = new StringWriter<>()__	};creates,a,new,code,rolling,sink,that,writes,files,to,the,given,base,directory,p,this,uses,a,link,date,time,bucketer,as,bucketer,and,a,link,string,writer,has,writer,the,maximum,bucket,size,is,set,to,384,mb,param,base,path,the,directory,to,which,to,write,the,bucket,files;public,rolling,sink,string,base,path,this,base,path,base,path,this,bucketer,new,date,time,bucketer,this,batch,size,this,writer,template,new,string,writer
RollingSink -> public RollingSink(String basePath);1524138809;Creates a new {@code RollingSink} that writes files to the given base directory.___<p>This uses a{@link DateTimeBucketer} as bucketer and a {@link StringWriter} has writer._The maximum bucket size is set to 384 MB.__@param basePath The directory to which to write the bucket files.;public RollingSink(String basePath) {_		this.basePath = basePath__		this.bucketer = new DateTimeBucketer()__		this.batchSize = DEFAULT_BATCH_SIZE__		this.writerTemplate = new StringWriter<>()__	};creates,a,new,code,rolling,sink,that,writes,files,to,the,given,base,directory,p,this,uses,a,link,date,time,bucketer,as,bucketer,and,a,link,string,writer,has,writer,the,maximum,bucket,size,is,set,to,384,mb,param,base,path,the,directory,to,which,to,write,the,bucket,files;public,rolling,sink,string,base,path,this,base,path,base,path,this,bucketer,new,date,time,bucketer,this,batch,size,this,writer,template,new,string,writer
RollingSink -> public RollingSink(String basePath);1531303510;Creates a new {@code RollingSink} that writes files to the given base directory.___<p>This uses a{@link DateTimeBucketer} as bucketer and a {@link StringWriter} has writer._The maximum bucket size is set to 384 MB.__@param basePath The directory to which to write the bucket files.;public RollingSink(String basePath) {_		this.basePath = basePath__		this.bucketer = new DateTimeBucketer()__		this.batchSize = DEFAULT_BATCH_SIZE__		this.writerTemplate = new StringWriter<>()__	};creates,a,new,code,rolling,sink,that,writes,files,to,the,given,base,directory,p,this,uses,a,link,date,time,bucketer,as,bucketer,and,a,link,string,writer,has,writer,the,maximum,bucket,size,is,set,to,384,mb,param,base,path,the,directory,to,which,to,write,the,bucket,files;public,rolling,sink,string,base,path,this,base,path,base,path,this,bucketer,new,date,time,bucketer,this,batch,size,this,writer,template,new,string,writer
RollingSink -> public RollingSink(String basePath);1549286603;Creates a new {@code RollingSink} that writes files to the given base directory.___<p>This uses a{@link DateTimeBucketer} as bucketer and a {@link StringWriter} has writer._The maximum bucket size is set to 384 MB.__@param basePath The directory to which to write the bucket files.;public RollingSink(String basePath) {_		this.basePath = basePath__		this.bucketer = new DateTimeBucketer()__		this.batchSize = DEFAULT_BATCH_SIZE__		this.writerTemplate = new StringWriter<>()__	};creates,a,new,code,rolling,sink,that,writes,files,to,the,given,base,directory,p,this,uses,a,link,date,time,bucketer,as,bucketer,and,a,link,string,writer,has,writer,the,maximum,bucket,size,is,set,to,384,mb,param,base,path,the,directory,to,which,to,write,the,bucket,files;public,rolling,sink,string,base,path,this,base,path,base,path,this,bucketer,new,date,time,bucketer,this,batch,size,this,writer,template,new,string,writer
RollingSink -> public RollingSink<T> setAsyncTimeout(long timeout);1480685315;Sets the default timeout for asynchronous operations such as recoverLease and truncate.__@param timeout The timeout, in milliseconds.;public RollingSink<T> setAsyncTimeout(long timeout) {_		this.asyncTimeout = timeout__		return this__	};sets,the,default,timeout,for,asynchronous,operations,such,as,recover,lease,and,truncate,param,timeout,the,timeout,in,milliseconds;public,rolling,sink,t,set,async,timeout,long,timeout,this,async,timeout,timeout,return,this
RollingSink -> public RollingSink<T> setAsyncTimeout(long timeout);1484304405;Sets the default timeout for asynchronous operations such as recoverLease and truncate.__@param timeout The timeout, in milliseconds.;public RollingSink<T> setAsyncTimeout(long timeout) {_		this.asyncTimeout = timeout__		return this__	};sets,the,default,timeout,for,asynchronous,operations,such,as,recover,lease,and,truncate,param,timeout,the,timeout,in,milliseconds;public,rolling,sink,t,set,async,timeout,long,timeout,this,async,timeout,timeout,return,this
RollingSink -> public RollingSink<T> setAsyncTimeout(long timeout);1484304405;Sets the default timeout for asynchronous operations such as recoverLease and truncate.__@param timeout The timeout, in milliseconds.;public RollingSink<T> setAsyncTimeout(long timeout) {_		this.asyncTimeout = timeout__		return this__	};sets,the,default,timeout,for,asynchronous,operations,such,as,recover,lease,and,truncate,param,timeout,the,timeout,in,milliseconds;public,rolling,sink,t,set,async,timeout,long,timeout,this,async,timeout,timeout,return,this
RollingSink -> public RollingSink<T> setAsyncTimeout(long timeout);1495923089;Sets the default timeout for asynchronous operations such as recoverLease and truncate.__@param timeout The timeout, in milliseconds.;public RollingSink<T> setAsyncTimeout(long timeout) {_		this.asyncTimeout = timeout__		return this__	};sets,the,default,timeout,for,asynchronous,operations,such,as,recover,lease,and,truncate,param,timeout,the,timeout,in,milliseconds;public,rolling,sink,t,set,async,timeout,long,timeout,this,async,timeout,timeout,return,this
RollingSink -> public RollingSink<T> setAsyncTimeout(long timeout);1503598628;Sets the default timeout for asynchronous operations such as recoverLease and truncate.__@param timeout The timeout, in milliseconds.;public RollingSink<T> setAsyncTimeout(long timeout) {_		this.asyncTimeout = timeout__		return this__	};sets,the,default,timeout,for,asynchronous,operations,such,as,recover,lease,and,truncate,param,timeout,the,timeout,in,milliseconds;public,rolling,sink,t,set,async,timeout,long,timeout,this,async,timeout,timeout,return,this
RollingSink -> public RollingSink<T> setAsyncTimeout(long timeout);1507304600;Sets the default timeout for asynchronous operations such as recoverLease and truncate.__@param timeout The timeout, in milliseconds.;public RollingSink<T> setAsyncTimeout(long timeout) {_		this.asyncTimeout = timeout__		return this__	};sets,the,default,timeout,for,asynchronous,operations,such,as,recover,lease,and,truncate,param,timeout,the,timeout,in,milliseconds;public,rolling,sink,t,set,async,timeout,long,timeout,this,async,timeout,timeout,return,this
RollingSink -> public RollingSink<T> setAsyncTimeout(long timeout);1511347989;Sets the default timeout for asynchronous operations such as recoverLease and truncate.__@param timeout The timeout, in milliseconds.;public RollingSink<T> setAsyncTimeout(long timeout) {_		this.asyncTimeout = timeout__		return this__	};sets,the,default,timeout,for,asynchronous,operations,such,as,recover,lease,and,truncate,param,timeout,the,timeout,in,milliseconds;public,rolling,sink,t,set,async,timeout,long,timeout,this,async,timeout,timeout,return,this
RollingSink -> public RollingSink<T> setAsyncTimeout(long timeout);1524138809;Sets the default timeout for asynchronous operations such as recoverLease and truncate.__@param timeout The timeout, in milliseconds.;public RollingSink<T> setAsyncTimeout(long timeout) {_		this.asyncTimeout = timeout__		return this__	};sets,the,default,timeout,for,asynchronous,operations,such,as,recover,lease,and,truncate,param,timeout,the,timeout,in,milliseconds;public,rolling,sink,t,set,async,timeout,long,timeout,this,async,timeout,timeout,return,this
RollingSink -> public RollingSink<T> setAsyncTimeout(long timeout);1531303510;Sets the default timeout for asynchronous operations such as recoverLease and truncate.__@param timeout The timeout, in milliseconds.;public RollingSink<T> setAsyncTimeout(long timeout) {_		this.asyncTimeout = timeout__		return this__	};sets,the,default,timeout,for,asynchronous,operations,such,as,recover,lease,and,truncate,param,timeout,the,timeout,in,milliseconds;public,rolling,sink,t,set,async,timeout,long,timeout,this,async,timeout,timeout,return,this
RollingSink -> public RollingSink<T> setAsyncTimeout(long timeout);1549286603;Sets the default timeout for asynchronous operations such as recoverLease and truncate.__@param timeout The timeout, in milliseconds.;public RollingSink<T> setAsyncTimeout(long timeout) {_		this.asyncTimeout = timeout__		return this__	};sets,the,default,timeout,for,asynchronous,operations,such,as,recover,lease,and,truncate,param,timeout,the,timeout,in,milliseconds;public,rolling,sink,t,set,async,timeout,long,timeout,this,async,timeout,timeout,return,this
RollingSink -> private boolean shouldRoll() throws IOException;1480685315;Determines whether we should change the bucket file we are writing to.__<p>_This will roll if no file was created yet, if the file size is larger than the specified size_or if the {@code Bucketer} determines that we should roll.;private boolean shouldRoll() throws IOException {_		boolean shouldRoll = false__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		if (!isWriterOpen) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new initial bucket. ", subtaskIndex)__		}_		if (bucketer.shouldStartNewBucket(new Path(basePath), currentBucketDirectory)) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new bucket because {} said we should. ", subtaskIndex, bucketer)__			_			partCounter = 0__		}_		if (isWriterOpen) {_			long writePosition = writer.getPos()__			if (isWriterOpen && writePosition > batchSize) {_				shouldRoll = true__				LOG.debug(_						"RollingSink {} starting new bucket because file position {} is above batch size {}.",_						subtaskIndex,_						writePosition,_						batchSize)__			}_		}_		return shouldRoll__	};determines,whether,we,should,change,the,bucket,file,we,are,writing,to,p,this,will,roll,if,no,file,was,created,yet,if,the,file,size,is,larger,than,the,specified,size,or,if,the,code,bucketer,determines,that,we,should,roll;private,boolean,should,roll,throws,ioexception,boolean,should,roll,false,int,subtask,index,get,runtime,context,get,index,of,this,subtask,if,is,writer,open,should,roll,true,log,debug,rolling,sink,starting,new,initial,bucket,subtask,index,if,bucketer,should,start,new,bucket,new,path,base,path,current,bucket,directory,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,said,we,should,subtask,index,bucketer,part,counter,0,if,is,writer,open,long,write,position,writer,get,pos,if,is,writer,open,write,position,batch,size,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,file,position,is,above,batch,size,subtask,index,write,position,batch,size,return,should,roll
RollingSink -> private boolean shouldRoll() throws IOException;1484304405;Determines whether we should change the bucket file we are writing to.__<p>_This will roll if no file was created yet, if the file size is larger than the specified size_or if the {@code Bucketer} determines that we should roll.;private boolean shouldRoll() throws IOException {_		boolean shouldRoll = false__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		if (!isWriterOpen) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new initial bucket. ", subtaskIndex)__		}_		if (bucketer.shouldStartNewBucket(new Path(basePath), currentBucketDirectory)) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new bucket because {} said we should. ", subtaskIndex, bucketer)__			_			partCounter = 0__		}_		if (isWriterOpen) {_			long writePosition = writer.getPos()__			if (isWriterOpen && writePosition > batchSize) {_				shouldRoll = true__				LOG.debug(_						"RollingSink {} starting new bucket because file position {} is above batch size {}.",_						subtaskIndex,_						writePosition,_						batchSize)__			}_		}_		return shouldRoll__	};determines,whether,we,should,change,the,bucket,file,we,are,writing,to,p,this,will,roll,if,no,file,was,created,yet,if,the,file,size,is,larger,than,the,specified,size,or,if,the,code,bucketer,determines,that,we,should,roll;private,boolean,should,roll,throws,ioexception,boolean,should,roll,false,int,subtask,index,get,runtime,context,get,index,of,this,subtask,if,is,writer,open,should,roll,true,log,debug,rolling,sink,starting,new,initial,bucket,subtask,index,if,bucketer,should,start,new,bucket,new,path,base,path,current,bucket,directory,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,said,we,should,subtask,index,bucketer,part,counter,0,if,is,writer,open,long,write,position,writer,get,pos,if,is,writer,open,write,position,batch,size,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,file,position,is,above,batch,size,subtask,index,write,position,batch,size,return,should,roll
RollingSink -> private boolean shouldRoll() throws IOException;1484304405;Determines whether we should change the bucket file we are writing to.__<p>_This will roll if no file was created yet, if the file size is larger than the specified size_or if the {@code Bucketer} determines that we should roll.;private boolean shouldRoll() throws IOException {_		boolean shouldRoll = false__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		if (!isWriterOpen) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new initial bucket. ", subtaskIndex)__		}_		if (bucketer.shouldStartNewBucket(new Path(basePath), currentBucketDirectory)) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new bucket because {} said we should. ", subtaskIndex, bucketer)__			_			partCounter = 0__		}_		if (isWriterOpen) {_			long writePosition = writer.getPos()__			if (isWriterOpen && writePosition > batchSize) {_				shouldRoll = true__				LOG.debug(_						"RollingSink {} starting new bucket because file position {} is above batch size {}.",_						subtaskIndex,_						writePosition,_						batchSize)__			}_		}_		return shouldRoll__	};determines,whether,we,should,change,the,bucket,file,we,are,writing,to,p,this,will,roll,if,no,file,was,created,yet,if,the,file,size,is,larger,than,the,specified,size,or,if,the,code,bucketer,determines,that,we,should,roll;private,boolean,should,roll,throws,ioexception,boolean,should,roll,false,int,subtask,index,get,runtime,context,get,index,of,this,subtask,if,is,writer,open,should,roll,true,log,debug,rolling,sink,starting,new,initial,bucket,subtask,index,if,bucketer,should,start,new,bucket,new,path,base,path,current,bucket,directory,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,said,we,should,subtask,index,bucketer,part,counter,0,if,is,writer,open,long,write,position,writer,get,pos,if,is,writer,open,write,position,batch,size,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,file,position,is,above,batch,size,subtask,index,write,position,batch,size,return,should,roll
RollingSink -> private boolean shouldRoll() throws IOException;1495923089;Determines whether we should change the bucket file we are writing to.___<p>This will roll if no file was created yet, if the file size is larger than the specified size_or if the {@code Bucketer} determines that we should roll.;private boolean shouldRoll() throws IOException {_		boolean shouldRoll = false__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		if (!isWriterOpen) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new initial bucket. ", subtaskIndex)__		}_		if (bucketer.shouldStartNewBucket(new Path(basePath), currentBucketDirectory)) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new bucket because {} said we should. ", subtaskIndex, bucketer)__			_			partCounter = 0__		}_		if (isWriterOpen) {_			long writePosition = writer.getPos()__			if (isWriterOpen && writePosition > batchSize) {_				shouldRoll = true__				LOG.debug(_						"RollingSink {} starting new bucket because file position {} is above batch size {}.",_						subtaskIndex,_						writePosition,_						batchSize)__			}_		}_		return shouldRoll__	};determines,whether,we,should,change,the,bucket,file,we,are,writing,to,p,this,will,roll,if,no,file,was,created,yet,if,the,file,size,is,larger,than,the,specified,size,or,if,the,code,bucketer,determines,that,we,should,roll;private,boolean,should,roll,throws,ioexception,boolean,should,roll,false,int,subtask,index,get,runtime,context,get,index,of,this,subtask,if,is,writer,open,should,roll,true,log,debug,rolling,sink,starting,new,initial,bucket,subtask,index,if,bucketer,should,start,new,bucket,new,path,base,path,current,bucket,directory,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,said,we,should,subtask,index,bucketer,part,counter,0,if,is,writer,open,long,write,position,writer,get,pos,if,is,writer,open,write,position,batch,size,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,file,position,is,above,batch,size,subtask,index,write,position,batch,size,return,should,roll
RollingSink -> private boolean shouldRoll() throws IOException;1503598628;Determines whether we should change the bucket file we are writing to.___<p>This will roll if no file was created yet, if the file size is larger than the specified size_or if the {@code Bucketer} determines that we should roll.;private boolean shouldRoll() throws IOException {_		boolean shouldRoll = false__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		if (!isWriterOpen) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new initial bucket. ", subtaskIndex)__		}_		if (bucketer.shouldStartNewBucket(new Path(basePath), currentBucketDirectory)) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new bucket because {} said we should. ", subtaskIndex, bucketer)__			_			partCounter = 0__		}_		if (isWriterOpen) {_			long writePosition = writer.getPos()__			if (isWriterOpen && writePosition > batchSize) {_				shouldRoll = true__				LOG.debug(_						"RollingSink {} starting new bucket because file position {} is above batch size {}.",_						subtaskIndex,_						writePosition,_						batchSize)__			}_		}_		return shouldRoll__	};determines,whether,we,should,change,the,bucket,file,we,are,writing,to,p,this,will,roll,if,no,file,was,created,yet,if,the,file,size,is,larger,than,the,specified,size,or,if,the,code,bucketer,determines,that,we,should,roll;private,boolean,should,roll,throws,ioexception,boolean,should,roll,false,int,subtask,index,get,runtime,context,get,index,of,this,subtask,if,is,writer,open,should,roll,true,log,debug,rolling,sink,starting,new,initial,bucket,subtask,index,if,bucketer,should,start,new,bucket,new,path,base,path,current,bucket,directory,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,said,we,should,subtask,index,bucketer,part,counter,0,if,is,writer,open,long,write,position,writer,get,pos,if,is,writer,open,write,position,batch,size,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,file,position,is,above,batch,size,subtask,index,write,position,batch,size,return,should,roll
RollingSink -> private boolean shouldRoll() throws IOException;1507304600;Determines whether we should change the bucket file we are writing to.___<p>This will roll if no file was created yet, if the file size is larger than the specified size_or if the {@code Bucketer} determines that we should roll.;private boolean shouldRoll() throws IOException {_		boolean shouldRoll = false__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		if (!isWriterOpen) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new initial bucket. ", subtaskIndex)__		}_		if (bucketer.shouldStartNewBucket(new Path(basePath), currentBucketDirectory)) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new bucket because {} said we should. ", subtaskIndex, bucketer)__			_			partCounter = 0__		}_		if (isWriterOpen) {_			long writePosition = writer.getPos()__			if (isWriterOpen && writePosition > batchSize) {_				shouldRoll = true__				LOG.debug(_						"RollingSink {} starting new bucket because file position {} is above batch size {}.",_						subtaskIndex,_						writePosition,_						batchSize)__			}_		}_		return shouldRoll__	};determines,whether,we,should,change,the,bucket,file,we,are,writing,to,p,this,will,roll,if,no,file,was,created,yet,if,the,file,size,is,larger,than,the,specified,size,or,if,the,code,bucketer,determines,that,we,should,roll;private,boolean,should,roll,throws,ioexception,boolean,should,roll,false,int,subtask,index,get,runtime,context,get,index,of,this,subtask,if,is,writer,open,should,roll,true,log,debug,rolling,sink,starting,new,initial,bucket,subtask,index,if,bucketer,should,start,new,bucket,new,path,base,path,current,bucket,directory,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,said,we,should,subtask,index,bucketer,part,counter,0,if,is,writer,open,long,write,position,writer,get,pos,if,is,writer,open,write,position,batch,size,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,file,position,is,above,batch,size,subtask,index,write,position,batch,size,return,should,roll
RollingSink -> private boolean shouldRoll() throws IOException;1511347989;Determines whether we should change the bucket file we are writing to.___<p>This will roll if no file was created yet, if the file size is larger than the specified size_or if the {@code Bucketer} determines that we should roll.;private boolean shouldRoll() throws IOException {_		boolean shouldRoll = false__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		if (!isWriterOpen) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new initial bucket. ", subtaskIndex)__		}_		if (bucketer.shouldStartNewBucket(new Path(basePath), currentBucketDirectory)) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new bucket because {} said we should. ", subtaskIndex, bucketer)__			_			partCounter = 0__		}_		if (isWriterOpen) {_			long writePosition = writer.getPos()__			if (isWriterOpen && writePosition > batchSize) {_				shouldRoll = true__				LOG.debug(_						"RollingSink {} starting new bucket because file position {} is above batch size {}.",_						subtaskIndex,_						writePosition,_						batchSize)__			}_		}_		return shouldRoll__	};determines,whether,we,should,change,the,bucket,file,we,are,writing,to,p,this,will,roll,if,no,file,was,created,yet,if,the,file,size,is,larger,than,the,specified,size,or,if,the,code,bucketer,determines,that,we,should,roll;private,boolean,should,roll,throws,ioexception,boolean,should,roll,false,int,subtask,index,get,runtime,context,get,index,of,this,subtask,if,is,writer,open,should,roll,true,log,debug,rolling,sink,starting,new,initial,bucket,subtask,index,if,bucketer,should,start,new,bucket,new,path,base,path,current,bucket,directory,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,said,we,should,subtask,index,bucketer,part,counter,0,if,is,writer,open,long,write,position,writer,get,pos,if,is,writer,open,write,position,batch,size,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,file,position,is,above,batch,size,subtask,index,write,position,batch,size,return,should,roll
RollingSink -> private boolean shouldRoll() throws IOException;1524138809;Determines whether we should change the bucket file we are writing to.___<p>This will roll if no file was created yet, if the file size is larger than the specified size_or if the {@code Bucketer} determines that we should roll.;private boolean shouldRoll() throws IOException {_		boolean shouldRoll = false__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		if (!isWriterOpen) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new initial bucket. ", subtaskIndex)__		}_		if (bucketer.shouldStartNewBucket(new Path(basePath), currentBucketDirectory)) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new bucket because {} said we should. ", subtaskIndex, bucketer)__			_			partCounter = 0__		}_		if (isWriterOpen) {_			long writePosition = writer.getPos()__			if (isWriterOpen && writePosition > batchSize) {_				shouldRoll = true__				LOG.debug(_						"RollingSink {} starting new bucket because file position {} is above batch size {}.",_						subtaskIndex,_						writePosition,_						batchSize)__			}_		}_		return shouldRoll__	};determines,whether,we,should,change,the,bucket,file,we,are,writing,to,p,this,will,roll,if,no,file,was,created,yet,if,the,file,size,is,larger,than,the,specified,size,or,if,the,code,bucketer,determines,that,we,should,roll;private,boolean,should,roll,throws,ioexception,boolean,should,roll,false,int,subtask,index,get,runtime,context,get,index,of,this,subtask,if,is,writer,open,should,roll,true,log,debug,rolling,sink,starting,new,initial,bucket,subtask,index,if,bucketer,should,start,new,bucket,new,path,base,path,current,bucket,directory,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,said,we,should,subtask,index,bucketer,part,counter,0,if,is,writer,open,long,write,position,writer,get,pos,if,is,writer,open,write,position,batch,size,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,file,position,is,above,batch,size,subtask,index,write,position,batch,size,return,should,roll
RollingSink -> private boolean shouldRoll() throws IOException;1531303510;Determines whether we should change the bucket file we are writing to.___<p>This will roll if no file was created yet, if the file size is larger than the specified size_or if the {@code Bucketer} determines that we should roll.;private boolean shouldRoll() throws IOException {_		boolean shouldRoll = false__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		if (!isWriterOpen) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new initial bucket. ", subtaskIndex)__		}_		if (bucketer.shouldStartNewBucket(new Path(basePath), currentBucketDirectory)) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new bucket because {} said we should. ", subtaskIndex, bucketer)__			_			partCounter = 0__		}_		if (isWriterOpen) {_			long writePosition = writer.getPos()__			if (isWriterOpen && writePosition > batchSize) {_				shouldRoll = true__				LOG.debug(_						"RollingSink {} starting new bucket because file position {} is above batch size {}.",_						subtaskIndex,_						writePosition,_						batchSize)__			}_		}_		return shouldRoll__	};determines,whether,we,should,change,the,bucket,file,we,are,writing,to,p,this,will,roll,if,no,file,was,created,yet,if,the,file,size,is,larger,than,the,specified,size,or,if,the,code,bucketer,determines,that,we,should,roll;private,boolean,should,roll,throws,ioexception,boolean,should,roll,false,int,subtask,index,get,runtime,context,get,index,of,this,subtask,if,is,writer,open,should,roll,true,log,debug,rolling,sink,starting,new,initial,bucket,subtask,index,if,bucketer,should,start,new,bucket,new,path,base,path,current,bucket,directory,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,said,we,should,subtask,index,bucketer,part,counter,0,if,is,writer,open,long,write,position,writer,get,pos,if,is,writer,open,write,position,batch,size,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,file,position,is,above,batch,size,subtask,index,write,position,batch,size,return,should,roll
RollingSink -> private boolean shouldRoll() throws IOException;1549286603;Determines whether we should change the bucket file we are writing to.___<p>This will roll if no file was created yet, if the file size is larger than the specified size_or if the {@code Bucketer} determines that we should roll.;private boolean shouldRoll() throws IOException {_		boolean shouldRoll = false__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		if (!isWriterOpen) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new initial bucket. ", subtaskIndex)__		}_		if (bucketer.shouldStartNewBucket(new Path(basePath), currentBucketDirectory)) {_			shouldRoll = true__			LOG.debug("RollingSink {} starting new bucket because {} said we should. ", subtaskIndex, bucketer)__			_			partCounter = 0__		}_		if (isWriterOpen) {_			long writePosition = writer.getPos()__			if (isWriterOpen && writePosition > batchSize) {_				shouldRoll = true__				LOG.debug(_						"RollingSink {} starting new bucket because file position {} is above batch size {}.",_						subtaskIndex,_						writePosition,_						batchSize)__			}_		}_		return shouldRoll__	};determines,whether,we,should,change,the,bucket,file,we,are,writing,to,p,this,will,roll,if,no,file,was,created,yet,if,the,file,size,is,larger,than,the,specified,size,or,if,the,code,bucketer,determines,that,we,should,roll;private,boolean,should,roll,throws,ioexception,boolean,should,roll,false,int,subtask,index,get,runtime,context,get,index,of,this,subtask,if,is,writer,open,should,roll,true,log,debug,rolling,sink,starting,new,initial,bucket,subtask,index,if,bucketer,should,start,new,bucket,new,path,base,path,current,bucket,directory,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,said,we,should,subtask,index,bucketer,part,counter,0,if,is,writer,open,long,write,position,writer,get,pos,if,is,writer,open,write,position,batch,size,should,roll,true,log,debug,rolling,sink,starting,new,bucket,because,file,position,is,above,batch,size,subtask,index,write,position,batch,size,return,should,roll
RollingSink -> public RollingSink<T> setPendingSuffix(String pendingSuffix);1480685315;Sets the suffix of pending part files. The default is {@code ".pending"}.;public RollingSink<T> setPendingSuffix(String pendingSuffix) {_		this.pendingSuffix = pendingSuffix__		return this__	};sets,the,suffix,of,pending,part,files,the,default,is,code,pending;public,rolling,sink,t,set,pending,suffix,string,pending,suffix,this,pending,suffix,pending,suffix,return,this
RollingSink -> public RollingSink<T> setPendingSuffix(String pendingSuffix);1484304405;Sets the suffix of pending part files. The default is {@code ".pending"}.;public RollingSink<T> setPendingSuffix(String pendingSuffix) {_		this.pendingSuffix = pendingSuffix__		return this__	};sets,the,suffix,of,pending,part,files,the,default,is,code,pending;public,rolling,sink,t,set,pending,suffix,string,pending,suffix,this,pending,suffix,pending,suffix,return,this
RollingSink -> public RollingSink<T> setPendingSuffix(String pendingSuffix);1484304405;Sets the suffix of pending part files. The default is {@code ".pending"}.;public RollingSink<T> setPendingSuffix(String pendingSuffix) {_		this.pendingSuffix = pendingSuffix__		return this__	};sets,the,suffix,of,pending,part,files,the,default,is,code,pending;public,rolling,sink,t,set,pending,suffix,string,pending,suffix,this,pending,suffix,pending,suffix,return,this
RollingSink -> public RollingSink<T> setPendingSuffix(String pendingSuffix);1495923089;Sets the suffix of pending part files. The default is {@code ".pending"}.;public RollingSink<T> setPendingSuffix(String pendingSuffix) {_		this.pendingSuffix = pendingSuffix__		return this__	};sets,the,suffix,of,pending,part,files,the,default,is,code,pending;public,rolling,sink,t,set,pending,suffix,string,pending,suffix,this,pending,suffix,pending,suffix,return,this
RollingSink -> public RollingSink<T> setPendingSuffix(String pendingSuffix);1503598628;Sets the suffix of pending part files. The default is {@code ".pending"}.;public RollingSink<T> setPendingSuffix(String pendingSuffix) {_		this.pendingSuffix = pendingSuffix__		return this__	};sets,the,suffix,of,pending,part,files,the,default,is,code,pending;public,rolling,sink,t,set,pending,suffix,string,pending,suffix,this,pending,suffix,pending,suffix,return,this
RollingSink -> public RollingSink<T> setPendingSuffix(String pendingSuffix);1507304600;Sets the suffix of pending part files. The default is {@code ".pending"}.;public RollingSink<T> setPendingSuffix(String pendingSuffix) {_		this.pendingSuffix = pendingSuffix__		return this__	};sets,the,suffix,of,pending,part,files,the,default,is,code,pending;public,rolling,sink,t,set,pending,suffix,string,pending,suffix,this,pending,suffix,pending,suffix,return,this
RollingSink -> public RollingSink<T> setPendingSuffix(String pendingSuffix);1511347989;Sets the suffix of pending part files. The default is {@code ".pending"}.;public RollingSink<T> setPendingSuffix(String pendingSuffix) {_		this.pendingSuffix = pendingSuffix__		return this__	};sets,the,suffix,of,pending,part,files,the,default,is,code,pending;public,rolling,sink,t,set,pending,suffix,string,pending,suffix,this,pending,suffix,pending,suffix,return,this
RollingSink -> public RollingSink<T> setPendingSuffix(String pendingSuffix);1524138809;Sets the suffix of pending part files. The default is {@code ".pending"}.;public RollingSink<T> setPendingSuffix(String pendingSuffix) {_		this.pendingSuffix = pendingSuffix__		return this__	};sets,the,suffix,of,pending,part,files,the,default,is,code,pending;public,rolling,sink,t,set,pending,suffix,string,pending,suffix,this,pending,suffix,pending,suffix,return,this
RollingSink -> public RollingSink<T> setPendingSuffix(String pendingSuffix);1531303510;Sets the suffix of pending part files. The default is {@code ".pending"}.;public RollingSink<T> setPendingSuffix(String pendingSuffix) {_		this.pendingSuffix = pendingSuffix__		return this__	};sets,the,suffix,of,pending,part,files,the,default,is,code,pending;public,rolling,sink,t,set,pending,suffix,string,pending,suffix,this,pending,suffix,pending,suffix,return,this
RollingSink -> public RollingSink<T> setPendingSuffix(String pendingSuffix);1549286603;Sets the suffix of pending part files. The default is {@code ".pending"}.;public RollingSink<T> setPendingSuffix(String pendingSuffix) {_		this.pendingSuffix = pendingSuffix__		return this__	};sets,the,suffix,of,pending,part,files,the,default,is,code,pending;public,rolling,sink,t,set,pending,suffix,string,pending,suffix,this,pending,suffix,pending,suffix,return,this
RollingSink -> public RollingSink<T> setPendingPrefix(String pendingPrefix);1480685315;Sets the prefix of pending part files. The default is {@code "_"}.;public RollingSink<T> setPendingPrefix(String pendingPrefix) {_		this.pendingPrefix = pendingPrefix__		return this__	};sets,the,prefix,of,pending,part,files,the,default,is,code;public,rolling,sink,t,set,pending,prefix,string,pending,prefix,this,pending,prefix,pending,prefix,return,this
RollingSink -> public RollingSink<T> setPendingPrefix(String pendingPrefix);1484304405;Sets the prefix of pending part files. The default is {@code "_"}.;public RollingSink<T> setPendingPrefix(String pendingPrefix) {_		this.pendingPrefix = pendingPrefix__		return this__	};sets,the,prefix,of,pending,part,files,the,default,is,code;public,rolling,sink,t,set,pending,prefix,string,pending,prefix,this,pending,prefix,pending,prefix,return,this
RollingSink -> public RollingSink<T> setPendingPrefix(String pendingPrefix);1484304405;Sets the prefix of pending part files. The default is {@code "_"}.;public RollingSink<T> setPendingPrefix(String pendingPrefix) {_		this.pendingPrefix = pendingPrefix__		return this__	};sets,the,prefix,of,pending,part,files,the,default,is,code;public,rolling,sink,t,set,pending,prefix,string,pending,prefix,this,pending,prefix,pending,prefix,return,this
RollingSink -> public RollingSink<T> setPendingPrefix(String pendingPrefix);1495923089;Sets the prefix of pending part files. The default is {@code "_"}.;public RollingSink<T> setPendingPrefix(String pendingPrefix) {_		this.pendingPrefix = pendingPrefix__		return this__	};sets,the,prefix,of,pending,part,files,the,default,is,code;public,rolling,sink,t,set,pending,prefix,string,pending,prefix,this,pending,prefix,pending,prefix,return,this
RollingSink -> public RollingSink<T> setPendingPrefix(String pendingPrefix);1503598628;Sets the prefix of pending part files. The default is {@code "_"}.;public RollingSink<T> setPendingPrefix(String pendingPrefix) {_		this.pendingPrefix = pendingPrefix__		return this__	};sets,the,prefix,of,pending,part,files,the,default,is,code;public,rolling,sink,t,set,pending,prefix,string,pending,prefix,this,pending,prefix,pending,prefix,return,this
RollingSink -> public RollingSink<T> setPendingPrefix(String pendingPrefix);1507304600;Sets the prefix of pending part files. The default is {@code "_"}.;public RollingSink<T> setPendingPrefix(String pendingPrefix) {_		this.pendingPrefix = pendingPrefix__		return this__	};sets,the,prefix,of,pending,part,files,the,default,is,code;public,rolling,sink,t,set,pending,prefix,string,pending,prefix,this,pending,prefix,pending,prefix,return,this
RollingSink -> public RollingSink<T> setPendingPrefix(String pendingPrefix);1511347989;Sets the prefix of pending part files. The default is {@code "_"}.;public RollingSink<T> setPendingPrefix(String pendingPrefix) {_		this.pendingPrefix = pendingPrefix__		return this__	};sets,the,prefix,of,pending,part,files,the,default,is,code;public,rolling,sink,t,set,pending,prefix,string,pending,prefix,this,pending,prefix,pending,prefix,return,this
RollingSink -> public RollingSink<T> setPendingPrefix(String pendingPrefix);1524138809;Sets the prefix of pending part files. The default is {@code "_"}.;public RollingSink<T> setPendingPrefix(String pendingPrefix) {_		this.pendingPrefix = pendingPrefix__		return this__	};sets,the,prefix,of,pending,part,files,the,default,is,code;public,rolling,sink,t,set,pending,prefix,string,pending,prefix,this,pending,prefix,pending,prefix,return,this
RollingSink -> public RollingSink<T> setPendingPrefix(String pendingPrefix);1531303510;Sets the prefix of pending part files. The default is {@code "_"}.;public RollingSink<T> setPendingPrefix(String pendingPrefix) {_		this.pendingPrefix = pendingPrefix__		return this__	};sets,the,prefix,of,pending,part,files,the,default,is,code;public,rolling,sink,t,set,pending,prefix,string,pending,prefix,this,pending,prefix,pending,prefix,return,this
RollingSink -> public RollingSink<T> setPendingPrefix(String pendingPrefix);1549286603;Sets the prefix of pending part files. The default is {@code "_"}.;public RollingSink<T> setPendingPrefix(String pendingPrefix) {_		this.pendingPrefix = pendingPrefix__		return this__	};sets,the,prefix,of,pending,part,files,the,default,is,code;public,rolling,sink,t,set,pending,prefix,string,pending,prefix,this,pending,prefix,pending,prefix,return,this
RollingSink -> public RollingSink<T> setValidLengthPrefix(String validLengthPrefix);1480685315;Sets the prefix of valid-length files. The default is {@code "_"}.;public RollingSink<T> setValidLengthPrefix(String validLengthPrefix) {_		this.validLengthPrefix = validLengthPrefix__		return this__	};sets,the,prefix,of,valid,length,files,the,default,is,code;public,rolling,sink,t,set,valid,length,prefix,string,valid,length,prefix,this,valid,length,prefix,valid,length,prefix,return,this
RollingSink -> public RollingSink<T> setValidLengthPrefix(String validLengthPrefix);1484304405;Sets the prefix of valid-length files. The default is {@code "_"}.;public RollingSink<T> setValidLengthPrefix(String validLengthPrefix) {_		this.validLengthPrefix = validLengthPrefix__		return this__	};sets,the,prefix,of,valid,length,files,the,default,is,code;public,rolling,sink,t,set,valid,length,prefix,string,valid,length,prefix,this,valid,length,prefix,valid,length,prefix,return,this
RollingSink -> public RollingSink<T> setValidLengthPrefix(String validLengthPrefix);1484304405;Sets the prefix of valid-length files. The default is {@code "_"}.;public RollingSink<T> setValidLengthPrefix(String validLengthPrefix) {_		this.validLengthPrefix = validLengthPrefix__		return this__	};sets,the,prefix,of,valid,length,files,the,default,is,code;public,rolling,sink,t,set,valid,length,prefix,string,valid,length,prefix,this,valid,length,prefix,valid,length,prefix,return,this
RollingSink -> public RollingSink<T> setValidLengthPrefix(String validLengthPrefix);1495923089;Sets the prefix of valid-length files. The default is {@code "_"}.;public RollingSink<T> setValidLengthPrefix(String validLengthPrefix) {_		this.validLengthPrefix = validLengthPrefix__		return this__	};sets,the,prefix,of,valid,length,files,the,default,is,code;public,rolling,sink,t,set,valid,length,prefix,string,valid,length,prefix,this,valid,length,prefix,valid,length,prefix,return,this
RollingSink -> public RollingSink<T> setValidLengthPrefix(String validLengthPrefix);1503598628;Sets the prefix of valid-length files. The default is {@code "_"}.;public RollingSink<T> setValidLengthPrefix(String validLengthPrefix) {_		this.validLengthPrefix = validLengthPrefix__		return this__	};sets,the,prefix,of,valid,length,files,the,default,is,code;public,rolling,sink,t,set,valid,length,prefix,string,valid,length,prefix,this,valid,length,prefix,valid,length,prefix,return,this
RollingSink -> public RollingSink<T> setValidLengthPrefix(String validLengthPrefix);1507304600;Sets the prefix of valid-length files. The default is {@code "_"}.;public RollingSink<T> setValidLengthPrefix(String validLengthPrefix) {_		this.validLengthPrefix = validLengthPrefix__		return this__	};sets,the,prefix,of,valid,length,files,the,default,is,code;public,rolling,sink,t,set,valid,length,prefix,string,valid,length,prefix,this,valid,length,prefix,valid,length,prefix,return,this
RollingSink -> public RollingSink<T> setValidLengthPrefix(String validLengthPrefix);1511347989;Sets the prefix of valid-length files. The default is {@code "_"}.;public RollingSink<T> setValidLengthPrefix(String validLengthPrefix) {_		this.validLengthPrefix = validLengthPrefix__		return this__	};sets,the,prefix,of,valid,length,files,the,default,is,code;public,rolling,sink,t,set,valid,length,prefix,string,valid,length,prefix,this,valid,length,prefix,valid,length,prefix,return,this
RollingSink -> public RollingSink<T> setValidLengthPrefix(String validLengthPrefix);1524138809;Sets the prefix of valid-length files. The default is {@code "_"}.;public RollingSink<T> setValidLengthPrefix(String validLengthPrefix) {_		this.validLengthPrefix = validLengthPrefix__		return this__	};sets,the,prefix,of,valid,length,files,the,default,is,code;public,rolling,sink,t,set,valid,length,prefix,string,valid,length,prefix,this,valid,length,prefix,valid,length,prefix,return,this
RollingSink -> public RollingSink<T> setValidLengthPrefix(String validLengthPrefix);1531303510;Sets the prefix of valid-length files. The default is {@code "_"}.;public RollingSink<T> setValidLengthPrefix(String validLengthPrefix) {_		this.validLengthPrefix = validLengthPrefix__		return this__	};sets,the,prefix,of,valid,length,files,the,default,is,code;public,rolling,sink,t,set,valid,length,prefix,string,valid,length,prefix,this,valid,length,prefix,valid,length,prefix,return,this
RollingSink -> public RollingSink<T> setValidLengthPrefix(String validLengthPrefix);1549286603;Sets the prefix of valid-length files. The default is {@code "_"}.;public RollingSink<T> setValidLengthPrefix(String validLengthPrefix) {_		this.validLengthPrefix = validLengthPrefix__		return this__	};sets,the,prefix,of,valid,length,files,the,default,is,code;public,rolling,sink,t,set,valid,length,prefix,string,valid,length,prefix,this,valid,length,prefix,valid,length,prefix,return,this
RollingSink -> public RollingSink<T> setInProgressSuffix(String inProgressSuffix);1480685315;Sets the suffix of in-progress part files. The default is {@code "in-progress"}.;public RollingSink<T> setInProgressSuffix(String inProgressSuffix) {_		this.inProgressSuffix = inProgressSuffix__		return this__	};sets,the,suffix,of,in,progress,part,files,the,default,is,code,in,progress;public,rolling,sink,t,set,in,progress,suffix,string,in,progress,suffix,this,in,progress,suffix,in,progress,suffix,return,this
RollingSink -> public RollingSink<T> setInProgressSuffix(String inProgressSuffix);1484304405;Sets the suffix of in-progress part files. The default is {@code "in-progress"}.;public RollingSink<T> setInProgressSuffix(String inProgressSuffix) {_		this.inProgressSuffix = inProgressSuffix__		return this__	};sets,the,suffix,of,in,progress,part,files,the,default,is,code,in,progress;public,rolling,sink,t,set,in,progress,suffix,string,in,progress,suffix,this,in,progress,suffix,in,progress,suffix,return,this
RollingSink -> public RollingSink<T> setInProgressSuffix(String inProgressSuffix);1484304405;Sets the suffix of in-progress part files. The default is {@code "in-progress"}.;public RollingSink<T> setInProgressSuffix(String inProgressSuffix) {_		this.inProgressSuffix = inProgressSuffix__		return this__	};sets,the,suffix,of,in,progress,part,files,the,default,is,code,in,progress;public,rolling,sink,t,set,in,progress,suffix,string,in,progress,suffix,this,in,progress,suffix,in,progress,suffix,return,this
RollingSink -> public RollingSink<T> setInProgressSuffix(String inProgressSuffix);1495923089;Sets the suffix of in-progress part files. The default is {@code "in-progress"}.;public RollingSink<T> setInProgressSuffix(String inProgressSuffix) {_		this.inProgressSuffix = inProgressSuffix__		return this__	};sets,the,suffix,of,in,progress,part,files,the,default,is,code,in,progress;public,rolling,sink,t,set,in,progress,suffix,string,in,progress,suffix,this,in,progress,suffix,in,progress,suffix,return,this
RollingSink -> public RollingSink<T> setInProgressSuffix(String inProgressSuffix);1503598628;Sets the suffix of in-progress part files. The default is {@code "in-progress"}.;public RollingSink<T> setInProgressSuffix(String inProgressSuffix) {_		this.inProgressSuffix = inProgressSuffix__		return this__	};sets,the,suffix,of,in,progress,part,files,the,default,is,code,in,progress;public,rolling,sink,t,set,in,progress,suffix,string,in,progress,suffix,this,in,progress,suffix,in,progress,suffix,return,this
RollingSink -> public RollingSink<T> setInProgressSuffix(String inProgressSuffix);1507304600;Sets the suffix of in-progress part files. The default is {@code "in-progress"}.;public RollingSink<T> setInProgressSuffix(String inProgressSuffix) {_		this.inProgressSuffix = inProgressSuffix__		return this__	};sets,the,suffix,of,in,progress,part,files,the,default,is,code,in,progress;public,rolling,sink,t,set,in,progress,suffix,string,in,progress,suffix,this,in,progress,suffix,in,progress,suffix,return,this
RollingSink -> public RollingSink<T> setInProgressSuffix(String inProgressSuffix);1511347989;Sets the suffix of in-progress part files. The default is {@code "in-progress"}.;public RollingSink<T> setInProgressSuffix(String inProgressSuffix) {_		this.inProgressSuffix = inProgressSuffix__		return this__	};sets,the,suffix,of,in,progress,part,files,the,default,is,code,in,progress;public,rolling,sink,t,set,in,progress,suffix,string,in,progress,suffix,this,in,progress,suffix,in,progress,suffix,return,this
RollingSink -> public RollingSink<T> setInProgressSuffix(String inProgressSuffix);1524138809;Sets the suffix of in-progress part files. The default is {@code "in-progress"}.;public RollingSink<T> setInProgressSuffix(String inProgressSuffix) {_		this.inProgressSuffix = inProgressSuffix__		return this__	};sets,the,suffix,of,in,progress,part,files,the,default,is,code,in,progress;public,rolling,sink,t,set,in,progress,suffix,string,in,progress,suffix,this,in,progress,suffix,in,progress,suffix,return,this
RollingSink -> public RollingSink<T> setInProgressSuffix(String inProgressSuffix);1531303510;Sets the suffix of in-progress part files. The default is {@code "in-progress"}.;public RollingSink<T> setInProgressSuffix(String inProgressSuffix) {_		this.inProgressSuffix = inProgressSuffix__		return this__	};sets,the,suffix,of,in,progress,part,files,the,default,is,code,in,progress;public,rolling,sink,t,set,in,progress,suffix,string,in,progress,suffix,this,in,progress,suffix,in,progress,suffix,return,this
RollingSink -> public RollingSink<T> setInProgressSuffix(String inProgressSuffix);1549286603;Sets the suffix of in-progress part files. The default is {@code "in-progress"}.;public RollingSink<T> setInProgressSuffix(String inProgressSuffix) {_		this.inProgressSuffix = inProgressSuffix__		return this__	};sets,the,suffix,of,in,progress,part,files,the,default,is,code,in,progress;public,rolling,sink,t,set,in,progress,suffix,string,in,progress,suffix,this,in,progress,suffix,in,progress,suffix,return,this
RollingSink -> public RollingSink<T> setFSConfig(Configuration config);1480685315;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(Configuration config) {_		this.fsConfig = new Configuration()__		fsConfig.addAll(config)__		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,configuration,config,this,fs,config,new,configuration,fs,config,add,all,config,return,this
RollingSink -> public RollingSink<T> setFSConfig(Configuration config);1484304405;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(Configuration config) {_		this.fsConfig = new Configuration()__		fsConfig.addAll(config)__		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,configuration,config,this,fs,config,new,configuration,fs,config,add,all,config,return,this
RollingSink -> public RollingSink<T> setFSConfig(Configuration config);1484304405;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(Configuration config) {_		this.fsConfig = new Configuration()__		fsConfig.addAll(config)__		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,configuration,config,this,fs,config,new,configuration,fs,config,add,all,config,return,this
RollingSink -> public RollingSink<T> setFSConfig(Configuration config);1495923089;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(Configuration config) {_		this.fsConfig = new Configuration()__		fsConfig.addAll(config)__		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,configuration,config,this,fs,config,new,configuration,fs,config,add,all,config,return,this
RollingSink -> public RollingSink<T> setFSConfig(Configuration config);1503598628;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(Configuration config) {_		this.fsConfig = new Configuration()__		fsConfig.addAll(config)__		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,configuration,config,this,fs,config,new,configuration,fs,config,add,all,config,return,this
RollingSink -> public RollingSink<T> setFSConfig(Configuration config);1507304600;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(Configuration config) {_		this.fsConfig = new Configuration()__		fsConfig.addAll(config)__		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,configuration,config,this,fs,config,new,configuration,fs,config,add,all,config,return,this
RollingSink -> public RollingSink<T> setFSConfig(Configuration config);1511347989;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(Configuration config) {_		this.fsConfig = new Configuration()__		fsConfig.addAll(config)__		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,configuration,config,this,fs,config,new,configuration,fs,config,add,all,config,return,this
RollingSink -> public RollingSink<T> setFSConfig(Configuration config);1524138809;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(Configuration config) {_		this.fsConfig = new Configuration()__		fsConfig.addAll(config)__		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,configuration,config,this,fs,config,new,configuration,fs,config,add,all,config,return,this
RollingSink -> public RollingSink<T> setFSConfig(Configuration config);1531303510;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(Configuration config) {_		this.fsConfig = new Configuration()__		fsConfig.addAll(config)__		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,configuration,config,this,fs,config,new,configuration,fs,config,add,all,config,return,this
RollingSink -> public RollingSink<T> setFSConfig(Configuration config);1549286603;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(Configuration config) {_		this.fsConfig = new Configuration()__		fsConfig.addAll(config)__		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,configuration,config,this,fs,config,new,configuration,fs,config,add,all,config,return,this
RollingSink -> @Deprecated 	public RollingSink<T> disableCleanupOnOpen();1480685315;Disable cleanup of leftover in-progress/pending files when the sink is opened.__<p>_This should only be disabled if using the sink without checkpoints, to not remove_the files already in the directory.__@deprecated This option is deprecated and remains only for backwards compatibility._We do not clean up lingering files anymore.;@Deprecated_	public RollingSink<T> disableCleanupOnOpen() {_		return this__	};disable,cleanup,of,leftover,in,progress,pending,files,when,the,sink,is,opened,p,this,should,only,be,disabled,if,using,the,sink,without,checkpoints,to,not,remove,the,files,already,in,the,directory,deprecated,this,option,is,deprecated,and,remains,only,for,backwards,compatibility,we,do,not,clean,up,lingering,files,anymore;deprecated,public,rolling,sink,t,disable,cleanup,on,open,return,this
RollingSink -> @Deprecated 	public RollingSink<T> disableCleanupOnOpen();1484304405;Disable cleanup of leftover in-progress/pending files when the sink is opened.__<p>_This should only be disabled if using the sink without checkpoints, to not remove_the files already in the directory.__@deprecated This option is deprecated and remains only for backwards compatibility._We do not clean up lingering files anymore.;@Deprecated_	public RollingSink<T> disableCleanupOnOpen() {_		return this__	};disable,cleanup,of,leftover,in,progress,pending,files,when,the,sink,is,opened,p,this,should,only,be,disabled,if,using,the,sink,without,checkpoints,to,not,remove,the,files,already,in,the,directory,deprecated,this,option,is,deprecated,and,remains,only,for,backwards,compatibility,we,do,not,clean,up,lingering,files,anymore;deprecated,public,rolling,sink,t,disable,cleanup,on,open,return,this
RollingSink -> @Deprecated 	public RollingSink<T> disableCleanupOnOpen();1484304405;Disable cleanup of leftover in-progress/pending files when the sink is opened.__<p>_This should only be disabled if using the sink without checkpoints, to not remove_the files already in the directory.__@deprecated This option is deprecated and remains only for backwards compatibility._We do not clean up lingering files anymore.;@Deprecated_	public RollingSink<T> disableCleanupOnOpen() {_		return this__	};disable,cleanup,of,leftover,in,progress,pending,files,when,the,sink,is,opened,p,this,should,only,be,disabled,if,using,the,sink,without,checkpoints,to,not,remove,the,files,already,in,the,directory,deprecated,this,option,is,deprecated,and,remains,only,for,backwards,compatibility,we,do,not,clean,up,lingering,files,anymore;deprecated,public,rolling,sink,t,disable,cleanup,on,open,return,this
RollingSink -> @Deprecated 	public RollingSink<T> disableCleanupOnOpen();1495923089;Disable cleanup of leftover in-progress/pending files when the sink is opened.___<p>This should only be disabled if using the sink without checkpoints, to not remove_the files already in the directory.__@deprecated This option is deprecated and remains only for backwards compatibility._We do not clean up lingering files anymore.;@Deprecated_	public RollingSink<T> disableCleanupOnOpen() {_		return this__	};disable,cleanup,of,leftover,in,progress,pending,files,when,the,sink,is,opened,p,this,should,only,be,disabled,if,using,the,sink,without,checkpoints,to,not,remove,the,files,already,in,the,directory,deprecated,this,option,is,deprecated,and,remains,only,for,backwards,compatibility,we,do,not,clean,up,lingering,files,anymore;deprecated,public,rolling,sink,t,disable,cleanup,on,open,return,this
RollingSink -> @Deprecated 	public RollingSink<T> disableCleanupOnOpen();1503598628;Disable cleanup of leftover in-progress/pending files when the sink is opened.___<p>This should only be disabled if using the sink without checkpoints, to not remove_the files already in the directory.__@deprecated This option is deprecated and remains only for backwards compatibility._We do not clean up lingering files anymore.;@Deprecated_	public RollingSink<T> disableCleanupOnOpen() {_		return this__	};disable,cleanup,of,leftover,in,progress,pending,files,when,the,sink,is,opened,p,this,should,only,be,disabled,if,using,the,sink,without,checkpoints,to,not,remove,the,files,already,in,the,directory,deprecated,this,option,is,deprecated,and,remains,only,for,backwards,compatibility,we,do,not,clean,up,lingering,files,anymore;deprecated,public,rolling,sink,t,disable,cleanup,on,open,return,this
RollingSink -> @Deprecated 	public RollingSink<T> disableCleanupOnOpen();1507304600;Disable cleanup of leftover in-progress/pending files when the sink is opened.___<p>This should only be disabled if using the sink without checkpoints, to not remove_the files already in the directory.__@deprecated This option is deprecated and remains only for backwards compatibility._We do not clean up lingering files anymore.;@Deprecated_	public RollingSink<T> disableCleanupOnOpen() {_		return this__	};disable,cleanup,of,leftover,in,progress,pending,files,when,the,sink,is,opened,p,this,should,only,be,disabled,if,using,the,sink,without,checkpoints,to,not,remove,the,files,already,in,the,directory,deprecated,this,option,is,deprecated,and,remains,only,for,backwards,compatibility,we,do,not,clean,up,lingering,files,anymore;deprecated,public,rolling,sink,t,disable,cleanup,on,open,return,this
RollingSink -> @Deprecated 	public RollingSink<T> disableCleanupOnOpen();1511347989;Disable cleanup of leftover in-progress/pending files when the sink is opened.___<p>This should only be disabled if using the sink without checkpoints, to not remove_the files already in the directory.__@deprecated This option is deprecated and remains only for backwards compatibility._We do not clean up lingering files anymore.;@Deprecated_	public RollingSink<T> disableCleanupOnOpen() {_		return this__	};disable,cleanup,of,leftover,in,progress,pending,files,when,the,sink,is,opened,p,this,should,only,be,disabled,if,using,the,sink,without,checkpoints,to,not,remove,the,files,already,in,the,directory,deprecated,this,option,is,deprecated,and,remains,only,for,backwards,compatibility,we,do,not,clean,up,lingering,files,anymore;deprecated,public,rolling,sink,t,disable,cleanup,on,open,return,this
RollingSink -> @Deprecated 	public RollingSink<T> disableCleanupOnOpen();1524138809;Disable cleanup of leftover in-progress/pending files when the sink is opened.___<p>This should only be disabled if using the sink without checkpoints, to not remove_the files already in the directory.__@deprecated This option is deprecated and remains only for backwards compatibility._We do not clean up lingering files anymore.;@Deprecated_	public RollingSink<T> disableCleanupOnOpen() {_		return this__	};disable,cleanup,of,leftover,in,progress,pending,files,when,the,sink,is,opened,p,this,should,only,be,disabled,if,using,the,sink,without,checkpoints,to,not,remove,the,files,already,in,the,directory,deprecated,this,option,is,deprecated,and,remains,only,for,backwards,compatibility,we,do,not,clean,up,lingering,files,anymore;deprecated,public,rolling,sink,t,disable,cleanup,on,open,return,this
RollingSink -> @Deprecated 	public RollingSink<T> disableCleanupOnOpen();1531303510;Disable cleanup of leftover in-progress/pending files when the sink is opened.___<p>This should only be disabled if using the sink without checkpoints, to not remove_the files already in the directory.__@deprecated This option is deprecated and remains only for backwards compatibility._We do not clean up lingering files anymore.;@Deprecated_	public RollingSink<T> disableCleanupOnOpen() {_		return this__	};disable,cleanup,of,leftover,in,progress,pending,files,when,the,sink,is,opened,p,this,should,only,be,disabled,if,using,the,sink,without,checkpoints,to,not,remove,the,files,already,in,the,directory,deprecated,this,option,is,deprecated,and,remains,only,for,backwards,compatibility,we,do,not,clean,up,lingering,files,anymore;deprecated,public,rolling,sink,t,disable,cleanup,on,open,return,this
RollingSink -> @Deprecated 	public RollingSink<T> disableCleanupOnOpen();1549286603;Disable cleanup of leftover in-progress/pending files when the sink is opened.___<p>This should only be disabled if using the sink without checkpoints, to not remove_the files already in the directory.__@deprecated This option is deprecated and remains only for backwards compatibility._We do not clean up lingering files anymore.;@Deprecated_	public RollingSink<T> disableCleanupOnOpen() {_		return this__	};disable,cleanup,of,leftover,in,progress,pending,files,when,the,sink,is,opened,p,this,should,only,be,disabled,if,using,the,sink,without,checkpoints,to,not,remove,the,files,already,in,the,directory,deprecated,this,option,is,deprecated,and,remains,only,for,backwards,compatibility,we,do,not,clean,up,lingering,files,anymore;deprecated,public,rolling,sink,t,disable,cleanup,on,open,return,this
RollingSink -> private void initFileSystem() throws IOException;1480685315;Create a file system with the user-defined hdfs config_@throws IOException;private void initFileSystem() throws IOException {_		if (fs != null) {_			return__		}_		org.apache.hadoop.conf.Configuration hadoopConf = HadoopFileSystem.getHadoopConfiguration()__		if (fsConfig != null) {_			String disableCacheName = String.format("fs.%s.impl.disable.cache", new Path(basePath).toUri().getScheme())__			hadoopConf.setBoolean(disableCacheName, true)__			for (String key : fsConfig.keySet()) {_				hadoopConf.set(key, fsConfig.getString(key, null))__			}_		}__		fs = new Path(basePath).getFileSystem(hadoopConf)__	};create,a,file,system,with,the,user,defined,hdfs,config,throws,ioexception;private,void,init,file,system,throws,ioexception,if,fs,null,return,org,apache,hadoop,conf,configuration,hadoop,conf,hadoop,file,system,get,hadoop,configuration,if,fs,config,null,string,disable,cache,name,string,format,fs,s,impl,disable,cache,new,path,base,path,to,uri,get,scheme,hadoop,conf,set,boolean,disable,cache,name,true,for,string,key,fs,config,key,set,hadoop,conf,set,key,fs,config,get,string,key,null,fs,new,path,base,path,get,file,system,hadoop,conf
RollingSink -> private void initFileSystem() throws IOException;1484304405;Create a file system with the user-defined hdfs config_@throws IOException;private void initFileSystem() throws IOException {_		if (fs != null) {_			return__		}_		org.apache.hadoop.conf.Configuration hadoopConf = HadoopFileSystem.getHadoopConfiguration()__		if (fsConfig != null) {_			String disableCacheName = String.format("fs.%s.impl.disable.cache", new Path(basePath).toUri().getScheme())__			hadoopConf.setBoolean(disableCacheName, true)__			for (String key : fsConfig.keySet()) {_				hadoopConf.set(key, fsConfig.getString(key, null))__			}_		}__		fs = new Path(basePath).getFileSystem(hadoopConf)__	};create,a,file,system,with,the,user,defined,hdfs,config,throws,ioexception;private,void,init,file,system,throws,ioexception,if,fs,null,return,org,apache,hadoop,conf,configuration,hadoop,conf,hadoop,file,system,get,hadoop,configuration,if,fs,config,null,string,disable,cache,name,string,format,fs,s,impl,disable,cache,new,path,base,path,to,uri,get,scheme,hadoop,conf,set,boolean,disable,cache,name,true,for,string,key,fs,config,key,set,hadoop,conf,set,key,fs,config,get,string,key,null,fs,new,path,base,path,get,file,system,hadoop,conf
RollingSink -> private void initFileSystem() throws IOException;1484304405;Create a file system with the user-defined hdfs config_@throws IOException;private void initFileSystem() throws IOException {_		if (fs != null) {_			return__		}_		org.apache.hadoop.conf.Configuration hadoopConf = HadoopFileSystem.getHadoopConfiguration()__		if (fsConfig != null) {_			String disableCacheName = String.format("fs.%s.impl.disable.cache", new Path(basePath).toUri().getScheme())__			hadoopConf.setBoolean(disableCacheName, true)__			for (String key : fsConfig.keySet()) {_				hadoopConf.set(key, fsConfig.getString(key, null))__			}_		}__		fs = new Path(basePath).getFileSystem(hadoopConf)__	};create,a,file,system,with,the,user,defined,hdfs,config,throws,ioexception;private,void,init,file,system,throws,ioexception,if,fs,null,return,org,apache,hadoop,conf,configuration,hadoop,conf,hadoop,file,system,get,hadoop,configuration,if,fs,config,null,string,disable,cache,name,string,format,fs,s,impl,disable,cache,new,path,base,path,to,uri,get,scheme,hadoop,conf,set,boolean,disable,cache,name,true,for,string,key,fs,config,key,set,hadoop,conf,set,key,fs,config,get,string,key,null,fs,new,path,base,path,get,file,system,hadoop,conf
RollingSink -> private void initFileSystem() throws IOException;1495923089;Create a file system with the user-defined hdfs config._@throws IOException;private void initFileSystem() throws IOException {_		if (fs != null) {_			return__		}_		org.apache.hadoop.conf.Configuration hadoopConf = HadoopFileSystem.getHadoopConfiguration()__		if (fsConfig != null) {_			String disableCacheName = String.format("fs.%s.impl.disable.cache", new Path(basePath).toUri().getScheme())__			hadoopConf.setBoolean(disableCacheName, true)__			for (String key : fsConfig.keySet()) {_				hadoopConf.set(key, fsConfig.getString(key, null))__			}_		}__		fs = new Path(basePath).getFileSystem(hadoopConf)__	};create,a,file,system,with,the,user,defined,hdfs,config,throws,ioexception;private,void,init,file,system,throws,ioexception,if,fs,null,return,org,apache,hadoop,conf,configuration,hadoop,conf,hadoop,file,system,get,hadoop,configuration,if,fs,config,null,string,disable,cache,name,string,format,fs,s,impl,disable,cache,new,path,base,path,to,uri,get,scheme,hadoop,conf,set,boolean,disable,cache,name,true,for,string,key,fs,config,key,set,hadoop,conf,set,key,fs,config,get,string,key,null,fs,new,path,base,path,get,file,system,hadoop,conf
RollingSink -> private void initFileSystem() throws IOException;1503598628;Create a file system with the user-defined hdfs config._@throws IOException;private void initFileSystem() throws IOException {_		if (fs != null) {_			return__		}_		org.apache.hadoop.conf.Configuration hadoopConf = HadoopFileSystem.getHadoopConfiguration()__		if (fsConfig != null) {_			String disableCacheName = String.format("fs.%s.impl.disable.cache", new Path(basePath).toUri().getScheme())__			hadoopConf.setBoolean(disableCacheName, true)__			for (String key : fsConfig.keySet()) {_				hadoopConf.set(key, fsConfig.getString(key, null))__			}_		}__		fs = new Path(basePath).getFileSystem(hadoopConf)__	};create,a,file,system,with,the,user,defined,hdfs,config,throws,ioexception;private,void,init,file,system,throws,ioexception,if,fs,null,return,org,apache,hadoop,conf,configuration,hadoop,conf,hadoop,file,system,get,hadoop,configuration,if,fs,config,null,string,disable,cache,name,string,format,fs,s,impl,disable,cache,new,path,base,path,to,uri,get,scheme,hadoop,conf,set,boolean,disable,cache,name,true,for,string,key,fs,config,key,set,hadoop,conf,set,key,fs,config,get,string,key,null,fs,new,path,base,path,get,file,system,hadoop,conf
RollingSink -> private void initFileSystem() throws IOException;1507304600;Create a file system with the user-defined hdfs config._@throws IOException;private void initFileSystem() throws IOException {_		if (fs == null) {_			Path path = new Path(basePath)__			fs = BucketingSink.createHadoopFileSystem(path, fsConfig)__		}_	};create,a,file,system,with,the,user,defined,hdfs,config,throws,ioexception;private,void,init,file,system,throws,ioexception,if,fs,null,path,path,new,path,base,path,fs,bucketing,sink,create,hadoop,file,system,path,fs,config
RollingSink -> private void initFileSystem() throws IOException;1511347989;Create a file system with the user-defined hdfs config._@throws IOException;private void initFileSystem() throws IOException {_		if (fs == null) {_			Path path = new Path(basePath)__			fs = BucketingSink.createHadoopFileSystem(path, fsConfig)__		}_	};create,a,file,system,with,the,user,defined,hdfs,config,throws,ioexception;private,void,init,file,system,throws,ioexception,if,fs,null,path,path,new,path,base,path,fs,bucketing,sink,create,hadoop,file,system,path,fs,config
RollingSink -> private void initFileSystem() throws IOException;1524138809;Create a file system with the user-defined hdfs config._@throws IOException;private void initFileSystem() throws IOException {_		if (fs == null) {_			Path path = new Path(basePath)__			fs = BucketingSink.createHadoopFileSystem(path, fsConfig)__		}_	};create,a,file,system,with,the,user,defined,hdfs,config,throws,ioexception;private,void,init,file,system,throws,ioexception,if,fs,null,path,path,new,path,base,path,fs,bucketing,sink,create,hadoop,file,system,path,fs,config
RollingSink -> private void initFileSystem() throws IOException;1531303510;Create a file system with the user-defined hdfs config._@throws IOException;private void initFileSystem() throws IOException {_		if (fs == null) {_			Path path = new Path(basePath)__			fs = BucketingSink.createHadoopFileSystem(path, fsConfig)__		}_	};create,a,file,system,with,the,user,defined,hdfs,config,throws,ioexception;private,void,init,file,system,throws,ioexception,if,fs,null,path,path,new,path,base,path,fs,bucketing,sink,create,hadoop,file,system,path,fs,config
RollingSink -> private void initFileSystem() throws IOException;1549286603;Create a file system with the user-defined hdfs config._@throws IOException;private void initFileSystem() throws IOException {_		if (fs == null) {_			Path path = new Path(basePath)__			fs = BucketingSink.createHadoopFileSystem(path, fsConfig)__		}_	};create,a,file,system,with,the,user,defined,hdfs,config,throws,ioexception;private,void,init,file,system,throws,ioexception,if,fs,null,path,path,new,path,base,path,fs,bucketing,sink,create,hadoop,file,system,path,fs,config
RollingSink -> public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config);1480685315;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config) {_		this.fsConfig = new Configuration()__		for(Map.Entry<String, String> entry : config) {_			fsConfig.setString(entry.getKey(), entry.getValue())__		}_		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,org,apache,hadoop,conf,configuration,config,this,fs,config,new,configuration,for,map,entry,string,string,entry,config,fs,config,set,string,entry,get,key,entry,get,value,return,this
RollingSink -> public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config);1484304405;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config) {_		this.fsConfig = new Configuration()__		for(Map.Entry<String, String> entry : config) {_			fsConfig.setString(entry.getKey(), entry.getValue())__		}_		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,org,apache,hadoop,conf,configuration,config,this,fs,config,new,configuration,for,map,entry,string,string,entry,config,fs,config,set,string,entry,get,key,entry,get,value,return,this
RollingSink -> public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config);1484304405;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config) {_		this.fsConfig = new Configuration()__		for(Map.Entry<String, String> entry : config) {_			fsConfig.setString(entry.getKey(), entry.getValue())__		}_		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,org,apache,hadoop,conf,configuration,config,this,fs,config,new,configuration,for,map,entry,string,string,entry,config,fs,config,set,string,entry,get,key,entry,get,value,return,this
RollingSink -> public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config);1495923089;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config) {_		this.fsConfig = new Configuration()__		for (Map.Entry<String, String> entry : config) {_			fsConfig.setString(entry.getKey(), entry.getValue())__		}_		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,org,apache,hadoop,conf,configuration,config,this,fs,config,new,configuration,for,map,entry,string,string,entry,config,fs,config,set,string,entry,get,key,entry,get,value,return,this
RollingSink -> public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config);1503598628;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config) {_		this.fsConfig = new Configuration()__		for (Map.Entry<String, String> entry : config) {_			fsConfig.setString(entry.getKey(), entry.getValue())__		}_		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,org,apache,hadoop,conf,configuration,config,this,fs,config,new,configuration,for,map,entry,string,string,entry,config,fs,config,set,string,entry,get,key,entry,get,value,return,this
RollingSink -> public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config);1507304600;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config) {_		this.fsConfig = new Configuration()__		for (Map.Entry<String, String> entry : config) {_			fsConfig.setString(entry.getKey(), entry.getValue())__		}_		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,org,apache,hadoop,conf,configuration,config,this,fs,config,new,configuration,for,map,entry,string,string,entry,config,fs,config,set,string,entry,get,key,entry,get,value,return,this
RollingSink -> public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config);1511347989;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config) {_		this.fsConfig = new Configuration()__		for (Map.Entry<String, String> entry : config) {_			fsConfig.setString(entry.getKey(), entry.getValue())__		}_		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,org,apache,hadoop,conf,configuration,config,this,fs,config,new,configuration,for,map,entry,string,string,entry,config,fs,config,set,string,entry,get,key,entry,get,value,return,this
RollingSink -> public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config);1524138809;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config) {_		this.fsConfig = new Configuration()__		for (Map.Entry<String, String> entry : config) {_			fsConfig.setString(entry.getKey(), entry.getValue())__		}_		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,org,apache,hadoop,conf,configuration,config,this,fs,config,new,configuration,for,map,entry,string,string,entry,config,fs,config,set,string,entry,get,key,entry,get,value,return,this
RollingSink -> public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config);1531303510;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config) {_		this.fsConfig = new Configuration()__		for (Map.Entry<String, String> entry : config) {_			fsConfig.setString(entry.getKey(), entry.getValue())__		}_		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,org,apache,hadoop,conf,configuration,config,this,fs,config,new,configuration,for,map,entry,string,string,entry,config,fs,config,set,string,entry,get,key,entry,get,value,return,this
RollingSink -> public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config);1549286603;Specify a custom {@code Configuration} that will be used when creating_the {@link FileSystem} for writing.;public RollingSink<T> setFSConfig(org.apache.hadoop.conf.Configuration config) {_		this.fsConfig = new Configuration()__		for (Map.Entry<String, String> entry : config) {_			fsConfig.setString(entry.getKey(), entry.getValue())__		}_		return this__	};specify,a,custom,code,configuration,that,will,be,used,when,creating,the,link,file,system,for,writing;public,rolling,sink,t,set,fsconfig,org,apache,hadoop,conf,configuration,config,this,fs,config,new,configuration,for,map,entry,string,string,entry,config,fs,config,set,string,entry,get,key,entry,get,value,return,this
RollingSink -> private Method reflectTruncate(FileSystem fs);1480685315;Gets the truncate() call using reflection._<p>_<b>NOTE: </b>This code comes from Flume;private Method reflectTruncate(FileSystem fs) {_		Method m = null__		if (fs != null) {_			Class<?> fsClass = fs.getClass()__			try {_				m = fsClass.getMethod("truncate", Path.class, long.class)__			} catch (NoSuchMethodException ex) {_				LOG.debug("Truncate not found. Will write a file with suffix '{}' " +_						" and prefix '{}' to specify how many bytes in a bucket are valid.", validLengthSuffix, validLengthPrefix)__				return null__			}__			_			FSDataOutputStream outputStream__			Path testPath = new Path(UUID.randomUUID().toString())__			try {_				outputStream = fs.create(testPath)__				outputStream.writeUTF("hello")__				outputStream.close()__			} catch (IOException e) {_				LOG.error("Could not create file for checking if truncate works.", e)__				throw new RuntimeException("Could not create file for checking if truncate works.", e)__			}__			try {_				m.invoke(fs, testPath, 2)__			} catch (IllegalAccessException | InvocationTargetException e) {_				LOG.debug("Truncate is not supported.", e)__				m = null__			}__			try {_				fs.delete(testPath, false)__			} catch (IOException e) {_				LOG.error("Could not delete truncate test file.", e)__				throw new RuntimeException("Could not delete truncate test file.", e)__			}_		}_		return m__	};gets,the,truncate,call,using,reflection,p,b,note,b,this,code,comes,from,flume;private,method,reflect,truncate,file,system,fs,method,m,null,if,fs,null,class,fs,class,fs,get,class,try,m,fs,class,get,method,truncate,path,class,long,class,catch,no,such,method,exception,ex,log,debug,truncate,not,found,will,write,a,file,with,suffix,and,prefix,to,specify,how,many,bytes,in,a,bucket,are,valid,valid,length,suffix,valid,length,prefix,return,null,fsdata,output,stream,output,stream,path,test,path,new,path,uuid,random,uuid,to,string,try,output,stream,fs,create,test,path,output,stream,write,utf,hello,output,stream,close,catch,ioexception,e,log,error,could,not,create,file,for,checking,if,truncate,works,e,throw,new,runtime,exception,could,not,create,file,for,checking,if,truncate,works,e,try,m,invoke,fs,test,path,2,catch,illegal,access,exception,invocation,target,exception,e,log,debug,truncate,is,not,supported,e,m,null,try,fs,delete,test,path,false,catch,ioexception,e,log,error,could,not,delete,truncate,test,file,e,throw,new,runtime,exception,could,not,delete,truncate,test,file,e,return,m
RollingSink -> private Method reflectTruncate(FileSystem fs);1484304405;Gets the truncate() call using reflection._<p>_<b>NOTE: </b>This code comes from Flume;private Method reflectTruncate(FileSystem fs) {_		Method m = null__		if (fs != null) {_			Class<?> fsClass = fs.getClass()__			try {_				m = fsClass.getMethod("truncate", Path.class, long.class)__			} catch (NoSuchMethodException ex) {_				LOG.debug("Truncate not found. Will write a file with suffix '{}' " +_						" and prefix '{}' to specify how many bytes in a bucket are valid.", validLengthSuffix, validLengthPrefix)__				return null__			}__			_			FSDataOutputStream outputStream__			Path testPath = new Path(UUID.randomUUID().toString())__			try {_				outputStream = fs.create(testPath)__				outputStream.writeUTF("hello")__				outputStream.close()__			} catch (IOException e) {_				LOG.error("Could not create file for checking if truncate works.", e)__				throw new RuntimeException("Could not create file for checking if truncate works.", e)__			}__			try {_				m.invoke(fs, testPath, 2)__			} catch (IllegalAccessException | InvocationTargetException e) {_				LOG.debug("Truncate is not supported.", e)__				m = null__			}__			try {_				fs.delete(testPath, false)__			} catch (IOException e) {_				LOG.error("Could not delete truncate test file.", e)__				throw new RuntimeException("Could not delete truncate test file.", e)__			}_		}_		return m__	};gets,the,truncate,call,using,reflection,p,b,note,b,this,code,comes,from,flume;private,method,reflect,truncate,file,system,fs,method,m,null,if,fs,null,class,fs,class,fs,get,class,try,m,fs,class,get,method,truncate,path,class,long,class,catch,no,such,method,exception,ex,log,debug,truncate,not,found,will,write,a,file,with,suffix,and,prefix,to,specify,how,many,bytes,in,a,bucket,are,valid,valid,length,suffix,valid,length,prefix,return,null,fsdata,output,stream,output,stream,path,test,path,new,path,uuid,random,uuid,to,string,try,output,stream,fs,create,test,path,output,stream,write,utf,hello,output,stream,close,catch,ioexception,e,log,error,could,not,create,file,for,checking,if,truncate,works,e,throw,new,runtime,exception,could,not,create,file,for,checking,if,truncate,works,e,try,m,invoke,fs,test,path,2,catch,illegal,access,exception,invocation,target,exception,e,log,debug,truncate,is,not,supported,e,m,null,try,fs,delete,test,path,false,catch,ioexception,e,log,error,could,not,delete,truncate,test,file,e,throw,new,runtime,exception,could,not,delete,truncate,test,file,e,return,m
RollingSink -> private Method reflectTruncate(FileSystem fs);1484304405;Gets the truncate() call using reflection._<p>_<b>NOTE: </b>This code comes from Flume;private Method reflectTruncate(FileSystem fs) {_		Method m = null__		if (fs != null) {_			Class<?> fsClass = fs.getClass()__			try {_				m = fsClass.getMethod("truncate", Path.class, long.class)__			} catch (NoSuchMethodException ex) {_				LOG.debug("Truncate not found. Will write a file with suffix '{}' " +_						" and prefix '{}' to specify how many bytes in a bucket are valid.", validLengthSuffix, validLengthPrefix)__				return null__			}__			_			FSDataOutputStream outputStream__			Path testPath = new Path(UUID.randomUUID().toString())__			try {_				outputStream = fs.create(testPath)__				outputStream.writeUTF("hello")__				outputStream.close()__			} catch (IOException e) {_				LOG.error("Could not create file for checking if truncate works.", e)__				throw new RuntimeException("Could not create file for checking if truncate works.", e)__			}__			try {_				m.invoke(fs, testPath, 2)__			} catch (IllegalAccessException | InvocationTargetException e) {_				LOG.debug("Truncate is not supported.", e)__				m = null__			}__			try {_				fs.delete(testPath, false)__			} catch (IOException e) {_				LOG.error("Could not delete truncate test file.", e)__				throw new RuntimeException("Could not delete truncate test file.", e)__			}_		}_		return m__	};gets,the,truncate,call,using,reflection,p,b,note,b,this,code,comes,from,flume;private,method,reflect,truncate,file,system,fs,method,m,null,if,fs,null,class,fs,class,fs,get,class,try,m,fs,class,get,method,truncate,path,class,long,class,catch,no,such,method,exception,ex,log,debug,truncate,not,found,will,write,a,file,with,suffix,and,prefix,to,specify,how,many,bytes,in,a,bucket,are,valid,valid,length,suffix,valid,length,prefix,return,null,fsdata,output,stream,output,stream,path,test,path,new,path,uuid,random,uuid,to,string,try,output,stream,fs,create,test,path,output,stream,write,utf,hello,output,stream,close,catch,ioexception,e,log,error,could,not,create,file,for,checking,if,truncate,works,e,throw,new,runtime,exception,could,not,create,file,for,checking,if,truncate,works,e,try,m,invoke,fs,test,path,2,catch,illegal,access,exception,invocation,target,exception,e,log,debug,truncate,is,not,supported,e,m,null,try,fs,delete,test,path,false,catch,ioexception,e,log,error,could,not,delete,truncate,test,file,e,throw,new,runtime,exception,could,not,delete,truncate,test,file,e,return,m
RollingSink -> private Method reflectTruncate(FileSystem fs);1495923089;Gets the truncate() call using reflection.__<p><b>NOTE: </b>This code comes from Flume;private Method reflectTruncate(FileSystem fs) {_		Method m = null__		if (fs != null) {_			Class<?> fsClass = fs.getClass()__			try {_				m = fsClass.getMethod("truncate", Path.class, long.class)__			} catch (NoSuchMethodException ex) {_				LOG.debug("Truncate not found. Will write a file with suffix '{}' " +_						" and prefix '{}' to specify how many bytes in a bucket are valid.", validLengthSuffix, validLengthPrefix)__				return null__			}__			_			FSDataOutputStream outputStream__			Path testPath = new Path(UUID.randomUUID().toString())__			try {_				outputStream = fs.create(testPath)__				outputStream.writeUTF("hello")__				outputStream.close()__			} catch (IOException e) {_				LOG.error("Could not create file for checking if truncate works.", e)__				throw new RuntimeException("Could not create file for checking if truncate works.", e)__			}__			try {_				m.invoke(fs, testPath, 2)__			} catch (IllegalAccessException | InvocationTargetException e) {_				LOG.debug("Truncate is not supported.", e)__				m = null__			}__			try {_				fs.delete(testPath, false)__			} catch (IOException e) {_				LOG.error("Could not delete truncate test file.", e)__				throw new RuntimeException("Could not delete truncate test file.", e)__			}_		}_		return m__	};gets,the,truncate,call,using,reflection,p,b,note,b,this,code,comes,from,flume;private,method,reflect,truncate,file,system,fs,method,m,null,if,fs,null,class,fs,class,fs,get,class,try,m,fs,class,get,method,truncate,path,class,long,class,catch,no,such,method,exception,ex,log,debug,truncate,not,found,will,write,a,file,with,suffix,and,prefix,to,specify,how,many,bytes,in,a,bucket,are,valid,valid,length,suffix,valid,length,prefix,return,null,fsdata,output,stream,output,stream,path,test,path,new,path,uuid,random,uuid,to,string,try,output,stream,fs,create,test,path,output,stream,write,utf,hello,output,stream,close,catch,ioexception,e,log,error,could,not,create,file,for,checking,if,truncate,works,e,throw,new,runtime,exception,could,not,create,file,for,checking,if,truncate,works,e,try,m,invoke,fs,test,path,2,catch,illegal,access,exception,invocation,target,exception,e,log,debug,truncate,is,not,supported,e,m,null,try,fs,delete,test,path,false,catch,ioexception,e,log,error,could,not,delete,truncate,test,file,e,throw,new,runtime,exception,could,not,delete,truncate,test,file,e,return,m
RollingSink -> private Method reflectTruncate(FileSystem fs);1503598628;Gets the truncate() call using reflection.__<p><b>NOTE: </b>This code comes from Flume;private Method reflectTruncate(FileSystem fs) {_		Method m = null__		if (fs != null) {_			Class<?> fsClass = fs.getClass()__			try {_				m = fsClass.getMethod("truncate", Path.class, long.class)__			} catch (NoSuchMethodException ex) {_				LOG.debug("Truncate not found. Will write a file with suffix '{}' " +_						" and prefix '{}' to specify how many bytes in a bucket are valid.", validLengthSuffix, validLengthPrefix)__				return null__			}__			_			FSDataOutputStream outputStream__			Path testPath = new Path(UUID.randomUUID().toString())__			try {_				outputStream = fs.create(testPath)__				outputStream.writeUTF("hello")__				outputStream.close()__			} catch (IOException e) {_				LOG.error("Could not create file for checking if truncate works.", e)__				throw new RuntimeException("Could not create file for checking if truncate works.", e)__			}__			try {_				m.invoke(fs, testPath, 2)__			} catch (IllegalAccessException | InvocationTargetException e) {_				LOG.debug("Truncate is not supported.", e)__				m = null__			}__			try {_				fs.delete(testPath, false)__			} catch (IOException e) {_				LOG.error("Could not delete truncate test file.", e)__				throw new RuntimeException("Could not delete truncate test file.", e)__			}_		}_		return m__	};gets,the,truncate,call,using,reflection,p,b,note,b,this,code,comes,from,flume;private,method,reflect,truncate,file,system,fs,method,m,null,if,fs,null,class,fs,class,fs,get,class,try,m,fs,class,get,method,truncate,path,class,long,class,catch,no,such,method,exception,ex,log,debug,truncate,not,found,will,write,a,file,with,suffix,and,prefix,to,specify,how,many,bytes,in,a,bucket,are,valid,valid,length,suffix,valid,length,prefix,return,null,fsdata,output,stream,output,stream,path,test,path,new,path,uuid,random,uuid,to,string,try,output,stream,fs,create,test,path,output,stream,write,utf,hello,output,stream,close,catch,ioexception,e,log,error,could,not,create,file,for,checking,if,truncate,works,e,throw,new,runtime,exception,could,not,create,file,for,checking,if,truncate,works,e,try,m,invoke,fs,test,path,2,catch,illegal,access,exception,invocation,target,exception,e,log,debug,truncate,is,not,supported,e,m,null,try,fs,delete,test,path,false,catch,ioexception,e,log,error,could,not,delete,truncate,test,file,e,throw,new,runtime,exception,could,not,delete,truncate,test,file,e,return,m
RollingSink -> private Method reflectTruncate(FileSystem fs);1507304600;Gets the truncate() call using reflection.__<p><b>NOTE: </b>This code comes from Flume;private Method reflectTruncate(FileSystem fs) {_		Method m = null__		if (fs != null) {_			Class<?> fsClass = fs.getClass()__			try {_				m = fsClass.getMethod("truncate", Path.class, long.class)__			} catch (NoSuchMethodException ex) {_				LOG.debug("Truncate not found. Will write a file with suffix '{}' " +_						" and prefix '{}' to specify how many bytes in a bucket are valid.", validLengthSuffix, validLengthPrefix)__				return null__			}__			_			FSDataOutputStream outputStream__			Path testPath = new Path(UUID.randomUUID().toString())__			try {_				outputStream = fs.create(testPath)__				outputStream.writeUTF("hello")__				outputStream.close()__			} catch (IOException e) {_				LOG.error("Could not create file for checking if truncate works.", e)__				throw new RuntimeException("Could not create file for checking if truncate works.", e)__			}__			try {_				m.invoke(fs, testPath, 2)__			} catch (IllegalAccessException | InvocationTargetException e) {_				LOG.debug("Truncate is not supported.", e)__				m = null__			}__			try {_				fs.delete(testPath, false)__			} catch (IOException e) {_				LOG.error("Could not delete truncate test file.", e)__				throw new RuntimeException("Could not delete truncate test file.", e)__			}_		}_		return m__	};gets,the,truncate,call,using,reflection,p,b,note,b,this,code,comes,from,flume;private,method,reflect,truncate,file,system,fs,method,m,null,if,fs,null,class,fs,class,fs,get,class,try,m,fs,class,get,method,truncate,path,class,long,class,catch,no,such,method,exception,ex,log,debug,truncate,not,found,will,write,a,file,with,suffix,and,prefix,to,specify,how,many,bytes,in,a,bucket,are,valid,valid,length,suffix,valid,length,prefix,return,null,fsdata,output,stream,output,stream,path,test,path,new,path,uuid,random,uuid,to,string,try,output,stream,fs,create,test,path,output,stream,write,utf,hello,output,stream,close,catch,ioexception,e,log,error,could,not,create,file,for,checking,if,truncate,works,e,throw,new,runtime,exception,could,not,create,file,for,checking,if,truncate,works,e,try,m,invoke,fs,test,path,2,catch,illegal,access,exception,invocation,target,exception,e,log,debug,truncate,is,not,supported,e,m,null,try,fs,delete,test,path,false,catch,ioexception,e,log,error,could,not,delete,truncate,test,file,e,throw,new,runtime,exception,could,not,delete,truncate,test,file,e,return,m
RollingSink -> private Method reflectTruncate(FileSystem fs);1511347989;Gets the truncate() call using reflection.__<p><b>NOTE: </b>This code comes from Flume;private Method reflectTruncate(FileSystem fs) {_		Method m = null__		if (fs != null) {_			Class<?> fsClass = fs.getClass()__			try {_				m = fsClass.getMethod("truncate", Path.class, long.class)__			} catch (NoSuchMethodException ex) {_				LOG.debug("Truncate not found. Will write a file with suffix '{}' " +_						" and prefix '{}' to specify how many bytes in a bucket are valid.", validLengthSuffix, validLengthPrefix)__				return null__			}__			_			FSDataOutputStream outputStream__			Path testPath = new Path(UUID.randomUUID().toString())__			try {_				outputStream = fs.create(testPath)__				outputStream.writeUTF("hello")__				outputStream.close()__			} catch (IOException e) {_				LOG.error("Could not create file for checking if truncate works.", e)__				throw new RuntimeException("Could not create file for checking if truncate works.", e)__			}__			try {_				m.invoke(fs, testPath, 2)__			} catch (IllegalAccessException | InvocationTargetException e) {_				LOG.debug("Truncate is not supported.", e)__				m = null__			}__			try {_				fs.delete(testPath, false)__			} catch (IOException e) {_				LOG.error("Could not delete truncate test file.", e)__				throw new RuntimeException("Could not delete truncate test file.", e)__			}_		}_		return m__	};gets,the,truncate,call,using,reflection,p,b,note,b,this,code,comes,from,flume;private,method,reflect,truncate,file,system,fs,method,m,null,if,fs,null,class,fs,class,fs,get,class,try,m,fs,class,get,method,truncate,path,class,long,class,catch,no,such,method,exception,ex,log,debug,truncate,not,found,will,write,a,file,with,suffix,and,prefix,to,specify,how,many,bytes,in,a,bucket,are,valid,valid,length,suffix,valid,length,prefix,return,null,fsdata,output,stream,output,stream,path,test,path,new,path,uuid,random,uuid,to,string,try,output,stream,fs,create,test,path,output,stream,write,utf,hello,output,stream,close,catch,ioexception,e,log,error,could,not,create,file,for,checking,if,truncate,works,e,throw,new,runtime,exception,could,not,create,file,for,checking,if,truncate,works,e,try,m,invoke,fs,test,path,2,catch,illegal,access,exception,invocation,target,exception,e,log,debug,truncate,is,not,supported,e,m,null,try,fs,delete,test,path,false,catch,ioexception,e,log,error,could,not,delete,truncate,test,file,e,throw,new,runtime,exception,could,not,delete,truncate,test,file,e,return,m
RollingSink -> private Method reflectTruncate(FileSystem fs);1524138809;Gets the truncate() call using reflection.__<p><b>NOTE: </b>This code comes from Flume;private Method reflectTruncate(FileSystem fs) {_		Method m = null__		if (fs != null) {_			Class<?> fsClass = fs.getClass()__			try {_				m = fsClass.getMethod("truncate", Path.class, long.class)__			} catch (NoSuchMethodException ex) {_				LOG.debug("Truncate not found. Will write a file with suffix '{}' " +_						" and prefix '{}' to specify how many bytes in a bucket are valid.", validLengthSuffix, validLengthPrefix)__				return null__			}__			_			FSDataOutputStream outputStream__			Path testPath = new Path(UUID.randomUUID().toString())__			try {_				outputStream = fs.create(testPath)__				outputStream.writeUTF("hello")__				outputStream.close()__			} catch (IOException e) {_				LOG.error("Could not create file for checking if truncate works.", e)__				throw new RuntimeException("Could not create file for checking if truncate works.", e)__			}__			try {_				m.invoke(fs, testPath, 2)__			} catch (IllegalAccessException | InvocationTargetException e) {_				LOG.debug("Truncate is not supported.", e)__				m = null__			}__			try {_				fs.delete(testPath, false)__			} catch (IOException e) {_				LOG.error("Could not delete truncate test file.", e)__				throw new RuntimeException("Could not delete truncate test file.", e)__			}_		}_		return m__	};gets,the,truncate,call,using,reflection,p,b,note,b,this,code,comes,from,flume;private,method,reflect,truncate,file,system,fs,method,m,null,if,fs,null,class,fs,class,fs,get,class,try,m,fs,class,get,method,truncate,path,class,long,class,catch,no,such,method,exception,ex,log,debug,truncate,not,found,will,write,a,file,with,suffix,and,prefix,to,specify,how,many,bytes,in,a,bucket,are,valid,valid,length,suffix,valid,length,prefix,return,null,fsdata,output,stream,output,stream,path,test,path,new,path,uuid,random,uuid,to,string,try,output,stream,fs,create,test,path,output,stream,write,utf,hello,output,stream,close,catch,ioexception,e,log,error,could,not,create,file,for,checking,if,truncate,works,e,throw,new,runtime,exception,could,not,create,file,for,checking,if,truncate,works,e,try,m,invoke,fs,test,path,2,catch,illegal,access,exception,invocation,target,exception,e,log,debug,truncate,is,not,supported,e,m,null,try,fs,delete,test,path,false,catch,ioexception,e,log,error,could,not,delete,truncate,test,file,e,throw,new,runtime,exception,could,not,delete,truncate,test,file,e,return,m
RollingSink -> private Method reflectTruncate(FileSystem fs);1531303510;Gets the truncate() call using reflection.__<p><b>NOTE: </b>This code comes from Flume;private Method reflectTruncate(FileSystem fs) {_		Method m = null__		if (fs != null) {_			Class<?> fsClass = fs.getClass()__			try {_				m = fsClass.getMethod("truncate", Path.class, long.class)__			} catch (NoSuchMethodException ex) {_				LOG.debug("Truncate not found. Will write a file with suffix '{}' " +_						" and prefix '{}' to specify how many bytes in a bucket are valid.", validLengthSuffix, validLengthPrefix)__				return null__			}__			_			Path testPath = new Path(UUID.randomUUID().toString())__			try (FSDataOutputStream outputStream = fs.create(testPath)) {_				outputStream.writeUTF("hello")__			} catch (IOException e) {_				LOG.error("Could not create file for checking if truncate works.", e)__				throw new RuntimeException("Could not create file for checking if truncate works.", e)__			}__			try {_				m.invoke(fs, testPath, 2)__			} catch (IllegalAccessException | InvocationTargetException e) {_				LOG.debug("Truncate is not supported.", e)__				m = null__			}__			try {_				fs.delete(testPath, false)__			} catch (IOException e) {_				LOG.error("Could not delete truncate test file.", e)__				throw new RuntimeException("Could not delete truncate test file.", e)__			}_		}_		return m__	};gets,the,truncate,call,using,reflection,p,b,note,b,this,code,comes,from,flume;private,method,reflect,truncate,file,system,fs,method,m,null,if,fs,null,class,fs,class,fs,get,class,try,m,fs,class,get,method,truncate,path,class,long,class,catch,no,such,method,exception,ex,log,debug,truncate,not,found,will,write,a,file,with,suffix,and,prefix,to,specify,how,many,bytes,in,a,bucket,are,valid,valid,length,suffix,valid,length,prefix,return,null,path,test,path,new,path,uuid,random,uuid,to,string,try,fsdata,output,stream,output,stream,fs,create,test,path,output,stream,write,utf,hello,catch,ioexception,e,log,error,could,not,create,file,for,checking,if,truncate,works,e,throw,new,runtime,exception,could,not,create,file,for,checking,if,truncate,works,e,try,m,invoke,fs,test,path,2,catch,illegal,access,exception,invocation,target,exception,e,log,debug,truncate,is,not,supported,e,m,null,try,fs,delete,test,path,false,catch,ioexception,e,log,error,could,not,delete,truncate,test,file,e,throw,new,runtime,exception,could,not,delete,truncate,test,file,e,return,m
RollingSink -> private Method reflectTruncate(FileSystem fs);1549286603;Gets the truncate() call using reflection.__<p><b>NOTE: </b>This code comes from Flume;private Method reflectTruncate(FileSystem fs) {_		Method m = null__		if (fs != null) {_			Class<?> fsClass = fs.getClass()__			try {_				m = fsClass.getMethod("truncate", Path.class, long.class)__			} catch (NoSuchMethodException ex) {_				LOG.debug("Truncate not found. Will write a file with suffix '{}' " +_						" and prefix '{}' to specify how many bytes in a bucket are valid.", validLengthSuffix, validLengthPrefix)__				return null__			}__			_			Path testPath = new Path(basePath, UUID.randomUUID().toString())__			try {_				try (FSDataOutputStream outputStream = fs.create(testPath)) {_					outputStream.writeUTF("hello")__				} catch (IOException e) {_					LOG.error("Could not create file for checking if truncate works.", e)__					throw new RuntimeException(_							"Could not create file for checking if truncate works. " +_									"You can disable support for truncate() completely via " +_									"BucketingSink.setUseTruncate(false).", e)__				}__				try {_					m.invoke(fs, testPath, 2)__				} catch (IllegalAccessException | InvocationTargetException e) {_					LOG.debug("Truncate is not supported.", e)__					m = null__				}_			} finally {_				try {_					fs.delete(testPath, false)__				} catch (IOException e) {_					LOG.error("Could not delete truncate test file.", e)__					throw new RuntimeException("Could not delete truncate test file. " +_							"You can disable support for truncate() completely via " +_							"BucketingSink.setUseTruncate(false).", e)__				}_			}_		}_		return m__	};gets,the,truncate,call,using,reflection,p,b,note,b,this,code,comes,from,flume;private,method,reflect,truncate,file,system,fs,method,m,null,if,fs,null,class,fs,class,fs,get,class,try,m,fs,class,get,method,truncate,path,class,long,class,catch,no,such,method,exception,ex,log,debug,truncate,not,found,will,write,a,file,with,suffix,and,prefix,to,specify,how,many,bytes,in,a,bucket,are,valid,valid,length,suffix,valid,length,prefix,return,null,path,test,path,new,path,base,path,uuid,random,uuid,to,string,try,try,fsdata,output,stream,output,stream,fs,create,test,path,output,stream,write,utf,hello,catch,ioexception,e,log,error,could,not,create,file,for,checking,if,truncate,works,e,throw,new,runtime,exception,could,not,create,file,for,checking,if,truncate,works,you,can,disable,support,for,truncate,completely,via,bucketing,sink,set,use,truncate,false,e,try,m,invoke,fs,test,path,2,catch,illegal,access,exception,invocation,target,exception,e,log,debug,truncate,is,not,supported,e,m,null,finally,try,fs,delete,test,path,false,catch,ioexception,e,log,error,could,not,delete,truncate,test,file,e,throw,new,runtime,exception,could,not,delete,truncate,test,file,you,can,disable,support,for,truncate,completely,via,bucketing,sink,set,use,truncate,false,e,return,m
RollingSink -> private void closeCurrentPartFile() throws Exception;1480685315;Closes the current part file.__<p>_This moves the current in-progress part file to a pending file and adds it to the list_of pending files in our bucket state.;private void closeCurrentPartFile() throws Exception {_		if (isWriterOpen) {_			writer.close()__			isWriterOpen = false__		}__		if (currentPartPath != null) {_			Path inProgressPath = getInProgressPathFor(currentPartPath)__			Path pendingPath = getPendingPathFor(currentPartPath)__			fs.rename(inProgressPath, pendingPath)__			LOG.debug("Moving in-progress bucket {} to pending file {}", inProgressPath, pendingPath)__			this.bucketState.pendingFiles.add(currentPartPath.toString())__		}_	};closes,the,current,part,file,p,this,moves,the,current,in,progress,part,file,to,a,pending,file,and,adds,it,to,the,list,of,pending,files,in,our,bucket,state;private,void,close,current,part,file,throws,exception,if,is,writer,open,writer,close,is,writer,open,false,if,current,part,path,null,path,in,progress,path,get,in,progress,path,for,current,part,path,path,pending,path,get,pending,path,for,current,part,path,fs,rename,in,progress,path,pending,path,log,debug,moving,in,progress,bucket,to,pending,file,in,progress,path,pending,path,this,bucket,state,pending,files,add,current,part,path,to,string
RollingSink -> private void closeCurrentPartFile() throws Exception;1484304405;Closes the current part file.__<p>_This moves the current in-progress part file to a pending file and adds it to the list_of pending files in our bucket state.;private void closeCurrentPartFile() throws Exception {_		if (isWriterOpen) {_			writer.close()__			isWriterOpen = false__		}__		if (currentPartPath != null) {_			Path inProgressPath = getInProgressPathFor(currentPartPath)__			Path pendingPath = getPendingPathFor(currentPartPath)__			fs.rename(inProgressPath, pendingPath)__			LOG.debug("Moving in-progress bucket {} to pending file {}", inProgressPath, pendingPath)__			this.bucketState.pendingFiles.add(currentPartPath.toString())__		}_	};closes,the,current,part,file,p,this,moves,the,current,in,progress,part,file,to,a,pending,file,and,adds,it,to,the,list,of,pending,files,in,our,bucket,state;private,void,close,current,part,file,throws,exception,if,is,writer,open,writer,close,is,writer,open,false,if,current,part,path,null,path,in,progress,path,get,in,progress,path,for,current,part,path,path,pending,path,get,pending,path,for,current,part,path,fs,rename,in,progress,path,pending,path,log,debug,moving,in,progress,bucket,to,pending,file,in,progress,path,pending,path,this,bucket,state,pending,files,add,current,part,path,to,string
RollingSink -> private void closeCurrentPartFile() throws Exception;1484304405;Closes the current part file.__<p>_This moves the current in-progress part file to a pending file and adds it to the list_of pending files in our bucket state.;private void closeCurrentPartFile() throws Exception {_		if (isWriterOpen) {_			writer.close()__			isWriterOpen = false__		}__		if (currentPartPath != null) {_			Path inProgressPath = getInProgressPathFor(currentPartPath)__			Path pendingPath = getPendingPathFor(currentPartPath)__			fs.rename(inProgressPath, pendingPath)__			LOG.debug("Moving in-progress bucket {} to pending file {}", inProgressPath, pendingPath)__			this.bucketState.pendingFiles.add(currentPartPath.toString())__		}_	};closes,the,current,part,file,p,this,moves,the,current,in,progress,part,file,to,a,pending,file,and,adds,it,to,the,list,of,pending,files,in,our,bucket,state;private,void,close,current,part,file,throws,exception,if,is,writer,open,writer,close,is,writer,open,false,if,current,part,path,null,path,in,progress,path,get,in,progress,path,for,current,part,path,path,pending,path,get,pending,path,for,current,part,path,fs,rename,in,progress,path,pending,path,log,debug,moving,in,progress,bucket,to,pending,file,in,progress,path,pending,path,this,bucket,state,pending,files,add,current,part,path,to,string
RollingSink -> private void closeCurrentPartFile() throws Exception;1495923089;Closes the current part file.___<p>This moves the current in-progress part file to a pending file and adds it to the list_of pending files in our bucket state.;private void closeCurrentPartFile() throws Exception {_		if (isWriterOpen) {_			writer.close()__			isWriterOpen = false__		}__		if (currentPartPath != null) {_			Path inProgressPath = getInProgressPathFor(currentPartPath)__			Path pendingPath = getPendingPathFor(currentPartPath)__			fs.rename(inProgressPath, pendingPath)__			LOG.debug("Moving in-progress bucket {} to pending file {}", inProgressPath, pendingPath)__			this.bucketState.pendingFiles.add(currentPartPath.toString())__		}_	};closes,the,current,part,file,p,this,moves,the,current,in,progress,part,file,to,a,pending,file,and,adds,it,to,the,list,of,pending,files,in,our,bucket,state;private,void,close,current,part,file,throws,exception,if,is,writer,open,writer,close,is,writer,open,false,if,current,part,path,null,path,in,progress,path,get,in,progress,path,for,current,part,path,path,pending,path,get,pending,path,for,current,part,path,fs,rename,in,progress,path,pending,path,log,debug,moving,in,progress,bucket,to,pending,file,in,progress,path,pending,path,this,bucket,state,pending,files,add,current,part,path,to,string
RollingSink -> private void closeCurrentPartFile() throws Exception;1503598628;Closes the current part file.___<p>This moves the current in-progress part file to a pending file and adds it to the list_of pending files in our bucket state.;private void closeCurrentPartFile() throws Exception {_		if (isWriterOpen) {_			writer.close()__			isWriterOpen = false__		}__		if (currentPartPath != null) {_			Path inProgressPath = getInProgressPathFor(currentPartPath)__			Path pendingPath = getPendingPathFor(currentPartPath)__			fs.rename(inProgressPath, pendingPath)__			LOG.debug("Moving in-progress bucket {} to pending file {}", inProgressPath, pendingPath)__			this.bucketState.pendingFiles.add(currentPartPath.toString())__		}_	};closes,the,current,part,file,p,this,moves,the,current,in,progress,part,file,to,a,pending,file,and,adds,it,to,the,list,of,pending,files,in,our,bucket,state;private,void,close,current,part,file,throws,exception,if,is,writer,open,writer,close,is,writer,open,false,if,current,part,path,null,path,in,progress,path,get,in,progress,path,for,current,part,path,path,pending,path,get,pending,path,for,current,part,path,fs,rename,in,progress,path,pending,path,log,debug,moving,in,progress,bucket,to,pending,file,in,progress,path,pending,path,this,bucket,state,pending,files,add,current,part,path,to,string
RollingSink -> private void closeCurrentPartFile() throws Exception;1507304600;Closes the current part file.___<p>This moves the current in-progress part file to a pending file and adds it to the list_of pending files in our bucket state.;private void closeCurrentPartFile() throws Exception {_		if (isWriterOpen) {_			writer.close()__			isWriterOpen = false__		}__		if (currentPartPath != null) {_			Path inProgressPath = getInProgressPathFor(currentPartPath)__			Path pendingPath = getPendingPathFor(currentPartPath)__			fs.rename(inProgressPath, pendingPath)__			LOG.debug("Moving in-progress bucket {} to pending file {}", inProgressPath, pendingPath)__			this.bucketState.pendingFiles.add(currentPartPath.toString())__		}_	};closes,the,current,part,file,p,this,moves,the,current,in,progress,part,file,to,a,pending,file,and,adds,it,to,the,list,of,pending,files,in,our,bucket,state;private,void,close,current,part,file,throws,exception,if,is,writer,open,writer,close,is,writer,open,false,if,current,part,path,null,path,in,progress,path,get,in,progress,path,for,current,part,path,path,pending,path,get,pending,path,for,current,part,path,fs,rename,in,progress,path,pending,path,log,debug,moving,in,progress,bucket,to,pending,file,in,progress,path,pending,path,this,bucket,state,pending,files,add,current,part,path,to,string
RollingSink -> private void closeCurrentPartFile() throws Exception;1511347989;Closes the current part file.___<p>This moves the current in-progress part file to a pending file and adds it to the list_of pending files in our bucket state.;private void closeCurrentPartFile() throws Exception {_		if (isWriterOpen) {_			writer.close()__			isWriterOpen = false__		}__		if (currentPartPath != null) {_			Path inProgressPath = getInProgressPathFor(currentPartPath)__			Path pendingPath = getPendingPathFor(currentPartPath)__			fs.rename(inProgressPath, pendingPath)__			LOG.debug("Moving in-progress bucket {} to pending file {}", inProgressPath, pendingPath)__			this.bucketState.pendingFiles.add(currentPartPath.toString())__		}_	};closes,the,current,part,file,p,this,moves,the,current,in,progress,part,file,to,a,pending,file,and,adds,it,to,the,list,of,pending,files,in,our,bucket,state;private,void,close,current,part,file,throws,exception,if,is,writer,open,writer,close,is,writer,open,false,if,current,part,path,null,path,in,progress,path,get,in,progress,path,for,current,part,path,path,pending,path,get,pending,path,for,current,part,path,fs,rename,in,progress,path,pending,path,log,debug,moving,in,progress,bucket,to,pending,file,in,progress,path,pending,path,this,bucket,state,pending,files,add,current,part,path,to,string
RollingSink -> private void closeCurrentPartFile() throws Exception;1524138809;Closes the current part file.___<p>This moves the current in-progress part file to a pending file and adds it to the list_of pending files in our bucket state.;private void closeCurrentPartFile() throws Exception {_		if (isWriterOpen) {_			writer.close()__			isWriterOpen = false__		}__		if (currentPartPath != null) {_			Path inProgressPath = getInProgressPathFor(currentPartPath)__			Path pendingPath = getPendingPathFor(currentPartPath)__			fs.rename(inProgressPath, pendingPath)__			LOG.debug("Moving in-progress bucket {} to pending file {}", inProgressPath, pendingPath)__			this.bucketState.pendingFiles.add(currentPartPath.toString())__		}_	};closes,the,current,part,file,p,this,moves,the,current,in,progress,part,file,to,a,pending,file,and,adds,it,to,the,list,of,pending,files,in,our,bucket,state;private,void,close,current,part,file,throws,exception,if,is,writer,open,writer,close,is,writer,open,false,if,current,part,path,null,path,in,progress,path,get,in,progress,path,for,current,part,path,path,pending,path,get,pending,path,for,current,part,path,fs,rename,in,progress,path,pending,path,log,debug,moving,in,progress,bucket,to,pending,file,in,progress,path,pending,path,this,bucket,state,pending,files,add,current,part,path,to,string
RollingSink -> private void closeCurrentPartFile() throws Exception;1531303510;Closes the current part file.___<p>This moves the current in-progress part file to a pending file and adds it to the list_of pending files in our bucket state.;private void closeCurrentPartFile() throws Exception {_		if (isWriterOpen) {_			writer.close()__			isWriterOpen = false__		}__		if (currentPartPath != null) {_			Path inProgressPath = getInProgressPathFor(currentPartPath)__			Path pendingPath = getPendingPathFor(currentPartPath)__			fs.rename(inProgressPath, pendingPath)__			LOG.debug("Moving in-progress bucket {} to pending file {}", inProgressPath, pendingPath)__			this.bucketState.pendingFiles.add(currentPartPath.toString())__		}_	};closes,the,current,part,file,p,this,moves,the,current,in,progress,part,file,to,a,pending,file,and,adds,it,to,the,list,of,pending,files,in,our,bucket,state;private,void,close,current,part,file,throws,exception,if,is,writer,open,writer,close,is,writer,open,false,if,current,part,path,null,path,in,progress,path,get,in,progress,path,for,current,part,path,path,pending,path,get,pending,path,for,current,part,path,fs,rename,in,progress,path,pending,path,log,debug,moving,in,progress,bucket,to,pending,file,in,progress,path,pending,path,this,bucket,state,pending,files,add,current,part,path,to,string
RollingSink -> private void closeCurrentPartFile() throws Exception;1549286603;Closes the current part file.___<p>This moves the current in-progress part file to a pending file and adds it to the list_of pending files in our bucket state.;private void closeCurrentPartFile() throws Exception {_		if (isWriterOpen) {_			writer.close()__			isWriterOpen = false__		}__		if (currentPartPath != null) {_			Path inProgressPath = getInProgressPathFor(currentPartPath)__			Path pendingPath = getPendingPathFor(currentPartPath)__			fs.rename(inProgressPath, pendingPath)__			LOG.debug("Moving in-progress bucket {} to pending file {}", inProgressPath, pendingPath)__			this.bucketState.pendingFiles.add(currentPartPath.toString())__		}_	};closes,the,current,part,file,p,this,moves,the,current,in,progress,part,file,to,a,pending,file,and,adds,it,to,the,list,of,pending,files,in,our,bucket,state;private,void,close,current,part,file,throws,exception,if,is,writer,open,writer,close,is,writer,open,false,if,current,part,path,null,path,in,progress,path,get,in,progress,path,for,current,part,path,path,pending,path,get,pending,path,for,current,part,path,fs,rename,in,progress,path,pending,path,log,debug,moving,in,progress,bucket,to,pending,file,in,progress,path,pending,path,this,bucket,state,pending,files,add,current,part,path,to,string
RollingSink -> public RollingSink<T> setPartPrefix(String partPrefix);1480685315;Sets the prefix of part files.  The default is {@code "part"}.;public RollingSink<T> setPartPrefix(String partPrefix) {_		this.partPrefix = partPrefix__		return this__	};sets,the,prefix,of,part,files,the,default,is,code,part;public,rolling,sink,t,set,part,prefix,string,part,prefix,this,part,prefix,part,prefix,return,this
RollingSink -> public RollingSink<T> setPartPrefix(String partPrefix);1484304405;Sets the prefix of part files.  The default is {@code "part"}.;public RollingSink<T> setPartPrefix(String partPrefix) {_		this.partPrefix = partPrefix__		return this__	};sets,the,prefix,of,part,files,the,default,is,code,part;public,rolling,sink,t,set,part,prefix,string,part,prefix,this,part,prefix,part,prefix,return,this
RollingSink -> public RollingSink<T> setPartPrefix(String partPrefix);1484304405;Sets the prefix of part files.  The default is {@code "part"}.;public RollingSink<T> setPartPrefix(String partPrefix) {_		this.partPrefix = partPrefix__		return this__	};sets,the,prefix,of,part,files,the,default,is,code,part;public,rolling,sink,t,set,part,prefix,string,part,prefix,this,part,prefix,part,prefix,return,this
RollingSink -> public RollingSink<T> setPartPrefix(String partPrefix);1495923089;Sets the prefix of part files.  The default is {@code "part"}.;public RollingSink<T> setPartPrefix(String partPrefix) {_		this.partPrefix = partPrefix__		return this__	};sets,the,prefix,of,part,files,the,default,is,code,part;public,rolling,sink,t,set,part,prefix,string,part,prefix,this,part,prefix,part,prefix,return,this
RollingSink -> public RollingSink<T> setPartPrefix(String partPrefix);1503598628;Sets the prefix of part files.  The default is {@code "part"}.;public RollingSink<T> setPartPrefix(String partPrefix) {_		this.partPrefix = partPrefix__		return this__	};sets,the,prefix,of,part,files,the,default,is,code,part;public,rolling,sink,t,set,part,prefix,string,part,prefix,this,part,prefix,part,prefix,return,this
RollingSink -> public RollingSink<T> setPartPrefix(String partPrefix);1507304600;Sets the prefix of part files.  The default is {@code "part"}.;public RollingSink<T> setPartPrefix(String partPrefix) {_		this.partPrefix = partPrefix__		return this__	};sets,the,prefix,of,part,files,the,default,is,code,part;public,rolling,sink,t,set,part,prefix,string,part,prefix,this,part,prefix,part,prefix,return,this
RollingSink -> public RollingSink<T> setPartPrefix(String partPrefix);1511347989;Sets the prefix of part files.  The default is {@code "part"}.;public RollingSink<T> setPartPrefix(String partPrefix) {_		this.partPrefix = partPrefix__		return this__	};sets,the,prefix,of,part,files,the,default,is,code,part;public,rolling,sink,t,set,part,prefix,string,part,prefix,this,part,prefix,part,prefix,return,this
RollingSink -> public RollingSink<T> setPartPrefix(String partPrefix);1524138809;Sets the prefix of part files.  The default is {@code "part"}.;public RollingSink<T> setPartPrefix(String partPrefix) {_		this.partPrefix = partPrefix__		return this__	};sets,the,prefix,of,part,files,the,default,is,code,part;public,rolling,sink,t,set,part,prefix,string,part,prefix,this,part,prefix,part,prefix,return,this
RollingSink -> public RollingSink<T> setPartPrefix(String partPrefix);1531303510;Sets the prefix of part files.  The default is {@code "part"}.;public RollingSink<T> setPartPrefix(String partPrefix) {_		this.partPrefix = partPrefix__		return this__	};sets,the,prefix,of,part,files,the,default,is,code,part;public,rolling,sink,t,set,part,prefix,string,part,prefix,this,part,prefix,part,prefix,return,this
RollingSink -> public RollingSink<T> setPartPrefix(String partPrefix);1549286603;Sets the prefix of part files.  The default is {@code "part"}.;public RollingSink<T> setPartPrefix(String partPrefix) {_		this.partPrefix = partPrefix__		return this__	};sets,the,prefix,of,part,files,the,default,is,code,part;public,rolling,sink,t,set,part,prefix,string,part,prefix,this,part,prefix,part,prefix,return,this
RollingSink -> public RollingSink<T> setBatchSize(long batchSize);1480685315;Sets the maximum bucket size in bytes.__<p>_When a bucket part file becomes larger than this size a new bucket part file is started and_the old one is closed. The name of the bucket files depends on the {@link Bucketer}.__@param batchSize The bucket part file size in bytes.;public RollingSink<T> setBatchSize(long batchSize) {_		this.batchSize = batchSize__		return this__	};sets,the,maximum,bucket,size,in,bytes,p,when,a,bucket,part,file,becomes,larger,than,this,size,a,new,bucket,part,file,is,started,and,the,old,one,is,closed,the,name,of,the,bucket,files,depends,on,the,link,bucketer,param,batch,size,the,bucket,part,file,size,in,bytes;public,rolling,sink,t,set,batch,size,long,batch,size,this,batch,size,batch,size,return,this
RollingSink -> public RollingSink<T> setBatchSize(long batchSize);1484304405;Sets the maximum bucket size in bytes.__<p>_When a bucket part file becomes larger than this size a new bucket part file is started and_the old one is closed. The name of the bucket files depends on the {@link Bucketer}.__@param batchSize The bucket part file size in bytes.;public RollingSink<T> setBatchSize(long batchSize) {_		this.batchSize = batchSize__		return this__	};sets,the,maximum,bucket,size,in,bytes,p,when,a,bucket,part,file,becomes,larger,than,this,size,a,new,bucket,part,file,is,started,and,the,old,one,is,closed,the,name,of,the,bucket,files,depends,on,the,link,bucketer,param,batch,size,the,bucket,part,file,size,in,bytes;public,rolling,sink,t,set,batch,size,long,batch,size,this,batch,size,batch,size,return,this
RollingSink -> public RollingSink<T> setBatchSize(long batchSize);1484304405;Sets the maximum bucket size in bytes.__<p>_When a bucket part file becomes larger than this size a new bucket part file is started and_the old one is closed. The name of the bucket files depends on the {@link Bucketer}.__@param batchSize The bucket part file size in bytes.;public RollingSink<T> setBatchSize(long batchSize) {_		this.batchSize = batchSize__		return this__	};sets,the,maximum,bucket,size,in,bytes,p,when,a,bucket,part,file,becomes,larger,than,this,size,a,new,bucket,part,file,is,started,and,the,old,one,is,closed,the,name,of,the,bucket,files,depends,on,the,link,bucketer,param,batch,size,the,bucket,part,file,size,in,bytes;public,rolling,sink,t,set,batch,size,long,batch,size,this,batch,size,batch,size,return,this
RollingSink -> public RollingSink<T> setBatchSize(long batchSize);1495923089;Sets the maximum bucket size in bytes.___<p>When a bucket part file becomes larger than this size a new bucket part file is started and_the old one is closed. The name of the bucket files depends on the {@link Bucketer}.__@param batchSize The bucket part file size in bytes.;public RollingSink<T> setBatchSize(long batchSize) {_		this.batchSize = batchSize__		return this__	};sets,the,maximum,bucket,size,in,bytes,p,when,a,bucket,part,file,becomes,larger,than,this,size,a,new,bucket,part,file,is,started,and,the,old,one,is,closed,the,name,of,the,bucket,files,depends,on,the,link,bucketer,param,batch,size,the,bucket,part,file,size,in,bytes;public,rolling,sink,t,set,batch,size,long,batch,size,this,batch,size,batch,size,return,this
RollingSink -> public RollingSink<T> setBatchSize(long batchSize);1503598628;Sets the maximum bucket size in bytes.___<p>When a bucket part file becomes larger than this size a new bucket part file is started and_the old one is closed. The name of the bucket files depends on the {@link Bucketer}.__@param batchSize The bucket part file size in bytes.;public RollingSink<T> setBatchSize(long batchSize) {_		this.batchSize = batchSize__		return this__	};sets,the,maximum,bucket,size,in,bytes,p,when,a,bucket,part,file,becomes,larger,than,this,size,a,new,bucket,part,file,is,started,and,the,old,one,is,closed,the,name,of,the,bucket,files,depends,on,the,link,bucketer,param,batch,size,the,bucket,part,file,size,in,bytes;public,rolling,sink,t,set,batch,size,long,batch,size,this,batch,size,batch,size,return,this
RollingSink -> public RollingSink<T> setBatchSize(long batchSize);1507304600;Sets the maximum bucket size in bytes.___<p>When a bucket part file becomes larger than this size a new bucket part file is started and_the old one is closed. The name of the bucket files depends on the {@link Bucketer}.__@param batchSize The bucket part file size in bytes.;public RollingSink<T> setBatchSize(long batchSize) {_		this.batchSize = batchSize__		return this__	};sets,the,maximum,bucket,size,in,bytes,p,when,a,bucket,part,file,becomes,larger,than,this,size,a,new,bucket,part,file,is,started,and,the,old,one,is,closed,the,name,of,the,bucket,files,depends,on,the,link,bucketer,param,batch,size,the,bucket,part,file,size,in,bytes;public,rolling,sink,t,set,batch,size,long,batch,size,this,batch,size,batch,size,return,this
RollingSink -> public RollingSink<T> setBatchSize(long batchSize);1511347989;Sets the maximum bucket size in bytes.___<p>When a bucket part file becomes larger than this size a new bucket part file is started and_the old one is closed. The name of the bucket files depends on the {@link Bucketer}.__@param batchSize The bucket part file size in bytes.;public RollingSink<T> setBatchSize(long batchSize) {_		this.batchSize = batchSize__		return this__	};sets,the,maximum,bucket,size,in,bytes,p,when,a,bucket,part,file,becomes,larger,than,this,size,a,new,bucket,part,file,is,started,and,the,old,one,is,closed,the,name,of,the,bucket,files,depends,on,the,link,bucketer,param,batch,size,the,bucket,part,file,size,in,bytes;public,rolling,sink,t,set,batch,size,long,batch,size,this,batch,size,batch,size,return,this
RollingSink -> public RollingSink<T> setBatchSize(long batchSize);1524138809;Sets the maximum bucket size in bytes.___<p>When a bucket part file becomes larger than this size a new bucket part file is started and_the old one is closed. The name of the bucket files depends on the {@link Bucketer}.__@param batchSize The bucket part file size in bytes.;public RollingSink<T> setBatchSize(long batchSize) {_		this.batchSize = batchSize__		return this__	};sets,the,maximum,bucket,size,in,bytes,p,when,a,bucket,part,file,becomes,larger,than,this,size,a,new,bucket,part,file,is,started,and,the,old,one,is,closed,the,name,of,the,bucket,files,depends,on,the,link,bucketer,param,batch,size,the,bucket,part,file,size,in,bytes;public,rolling,sink,t,set,batch,size,long,batch,size,this,batch,size,batch,size,return,this
RollingSink -> public RollingSink<T> setBatchSize(long batchSize);1531303510;Sets the maximum bucket size in bytes.___<p>When a bucket part file becomes larger than this size a new bucket part file is started and_the old one is closed. The name of the bucket files depends on the {@link Bucketer}.__@param batchSize The bucket part file size in bytes.;public RollingSink<T> setBatchSize(long batchSize) {_		this.batchSize = batchSize__		return this__	};sets,the,maximum,bucket,size,in,bytes,p,when,a,bucket,part,file,becomes,larger,than,this,size,a,new,bucket,part,file,is,started,and,the,old,one,is,closed,the,name,of,the,bucket,files,depends,on,the,link,bucketer,param,batch,size,the,bucket,part,file,size,in,bytes;public,rolling,sink,t,set,batch,size,long,batch,size,this,batch,size,batch,size,return,this
RollingSink -> public RollingSink<T> setBatchSize(long batchSize);1549286603;Sets the maximum bucket size in bytes.___<p>When a bucket part file becomes larger than this size a new bucket part file is started and_the old one is closed. The name of the bucket files depends on the {@link Bucketer}.__@param batchSize The bucket part file size in bytes.;public RollingSink<T> setBatchSize(long batchSize) {_		this.batchSize = batchSize__		return this__	};sets,the,maximum,bucket,size,in,bytes,p,when,a,bucket,part,file,becomes,larger,than,this,size,a,new,bucket,part,file,is,started,and,the,old,one,is,closed,the,name,of,the,bucket,files,depends,on,the,link,bucketer,param,batch,size,the,bucket,part,file,size,in,bytes;public,rolling,sink,t,set,batch,size,long,batch,size,this,batch,size,batch,size,return,this
RollingSink -> private void openNewPartFile() throws Exception;1480685315;Opens a new part file.__<p>_This closes the old bucket file and retrieves a new bucket path from the {@code Bucketer}.;private void openNewPartFile() throws Exception {_		closeCurrentPartFile()___		Path newBucketDirectory = bucketer.getNextBucketPath(new Path(basePath))___		if (!newBucketDirectory.equals(currentBucketDirectory)) {_			currentBucketDirectory = newBucketDirectory__			try {_				if (fs.mkdirs(currentBucketDirectory)) {_					LOG.debug("Created new bucket directory: {}", currentBucketDirectory)__				}_			} catch (IOException e) {_				throw new RuntimeException("Could not create base path for new rolling file.", e)__			}_		}__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)___		_		_		while (fs.exists(currentPartPath) ||_				fs.exists(getPendingPathFor(currentPartPath)) ||_				fs.exists(getInProgressPathFor(currentPartPath))) {_			partCounter++__			currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)__		}__		_		partCounter++___		LOG.debug("Next part path is {}", currentPartPath.toString())___		Path inProgressPath = getInProgressPathFor(currentPartPath)__		writer.open(fs, inProgressPath)__		isWriterOpen = true__	};opens,a,new,part,file,p,this,closes,the,old,bucket,file,and,retrieves,a,new,bucket,path,from,the,code,bucketer;private,void,open,new,part,file,throws,exception,close,current,part,file,path,new,bucket,directory,bucketer,get,next,bucket,path,new,path,base,path,if,new,bucket,directory,equals,current,bucket,directory,current,bucket,directory,new,bucket,directory,try,if,fs,mkdirs,current,bucket,directory,log,debug,created,new,bucket,directory,current,bucket,directory,catch,ioexception,e,throw,new,runtime,exception,could,not,create,base,path,for,new,rolling,file,e,int,subtask,index,get,runtime,context,get,index,of,this,subtask,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,while,fs,exists,current,part,path,fs,exists,get,pending,path,for,current,part,path,fs,exists,get,in,progress,path,for,current,part,path,part,counter,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,part,counter,log,debug,next,part,path,is,current,part,path,to,string,path,in,progress,path,get,in,progress,path,for,current,part,path,writer,open,fs,in,progress,path,is,writer,open,true
RollingSink -> private void openNewPartFile() throws Exception;1484304405;Opens a new part file.__<p>_This closes the old bucket file and retrieves a new bucket path from the {@code Bucketer}.;private void openNewPartFile() throws Exception {_		closeCurrentPartFile()___		Path newBucketDirectory = bucketer.getNextBucketPath(new Path(basePath))___		if (!newBucketDirectory.equals(currentBucketDirectory)) {_			currentBucketDirectory = newBucketDirectory__			try {_				if (fs.mkdirs(currentBucketDirectory)) {_					LOG.debug("Created new bucket directory: {}", currentBucketDirectory)__				}_			} catch (IOException e) {_				throw new RuntimeException("Could not create base path for new rolling file.", e)__			}_		}__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)___		_		_		while (fs.exists(currentPartPath) ||_				fs.exists(getPendingPathFor(currentPartPath)) ||_				fs.exists(getInProgressPathFor(currentPartPath))) {_			partCounter++__			currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)__		}__		_		partCounter++___		LOG.debug("Next part path is {}", currentPartPath.toString())___		Path inProgressPath = getInProgressPathFor(currentPartPath)__		writer.open(fs, inProgressPath)__		isWriterOpen = true__	};opens,a,new,part,file,p,this,closes,the,old,bucket,file,and,retrieves,a,new,bucket,path,from,the,code,bucketer;private,void,open,new,part,file,throws,exception,close,current,part,file,path,new,bucket,directory,bucketer,get,next,bucket,path,new,path,base,path,if,new,bucket,directory,equals,current,bucket,directory,current,bucket,directory,new,bucket,directory,try,if,fs,mkdirs,current,bucket,directory,log,debug,created,new,bucket,directory,current,bucket,directory,catch,ioexception,e,throw,new,runtime,exception,could,not,create,base,path,for,new,rolling,file,e,int,subtask,index,get,runtime,context,get,index,of,this,subtask,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,while,fs,exists,current,part,path,fs,exists,get,pending,path,for,current,part,path,fs,exists,get,in,progress,path,for,current,part,path,part,counter,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,part,counter,log,debug,next,part,path,is,current,part,path,to,string,path,in,progress,path,get,in,progress,path,for,current,part,path,writer,open,fs,in,progress,path,is,writer,open,true
RollingSink -> private void openNewPartFile() throws Exception;1484304405;Opens a new part file.__<p>_This closes the old bucket file and retrieves a new bucket path from the {@code Bucketer}.;private void openNewPartFile() throws Exception {_		closeCurrentPartFile()___		Path newBucketDirectory = bucketer.getNextBucketPath(new Path(basePath))___		if (!newBucketDirectory.equals(currentBucketDirectory)) {_			currentBucketDirectory = newBucketDirectory__			try {_				if (fs.mkdirs(currentBucketDirectory)) {_					LOG.debug("Created new bucket directory: {}", currentBucketDirectory)__				}_			} catch (IOException e) {_				throw new RuntimeException("Could not create base path for new rolling file.", e)__			}_		}__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)___		_		_		while (fs.exists(currentPartPath) ||_				fs.exists(getPendingPathFor(currentPartPath)) ||_				fs.exists(getInProgressPathFor(currentPartPath))) {_			partCounter++__			currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)__		}__		_		partCounter++___		LOG.debug("Next part path is {}", currentPartPath.toString())___		Path inProgressPath = getInProgressPathFor(currentPartPath)__		writer.open(fs, inProgressPath)__		isWriterOpen = true__	};opens,a,new,part,file,p,this,closes,the,old,bucket,file,and,retrieves,a,new,bucket,path,from,the,code,bucketer;private,void,open,new,part,file,throws,exception,close,current,part,file,path,new,bucket,directory,bucketer,get,next,bucket,path,new,path,base,path,if,new,bucket,directory,equals,current,bucket,directory,current,bucket,directory,new,bucket,directory,try,if,fs,mkdirs,current,bucket,directory,log,debug,created,new,bucket,directory,current,bucket,directory,catch,ioexception,e,throw,new,runtime,exception,could,not,create,base,path,for,new,rolling,file,e,int,subtask,index,get,runtime,context,get,index,of,this,subtask,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,while,fs,exists,current,part,path,fs,exists,get,pending,path,for,current,part,path,fs,exists,get,in,progress,path,for,current,part,path,part,counter,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,part,counter,log,debug,next,part,path,is,current,part,path,to,string,path,in,progress,path,get,in,progress,path,for,current,part,path,writer,open,fs,in,progress,path,is,writer,open,true
RollingSink -> private void openNewPartFile() throws Exception;1495923089;Opens a new part file.___<p>This closes the old bucket file and retrieves a new bucket path from the {@code Bucketer}.;private void openNewPartFile() throws Exception {_		closeCurrentPartFile()___		Path newBucketDirectory = bucketer.getNextBucketPath(new Path(basePath))___		if (!newBucketDirectory.equals(currentBucketDirectory)) {_			currentBucketDirectory = newBucketDirectory__			try {_				if (fs.mkdirs(currentBucketDirectory)) {_					LOG.debug("Created new bucket directory: {}", currentBucketDirectory)__				}_			} catch (IOException e) {_				throw new RuntimeException("Could not create base path for new rolling file.", e)__			}_		}__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)___		_		_		while (fs.exists(currentPartPath) ||_				fs.exists(getPendingPathFor(currentPartPath)) ||_				fs.exists(getInProgressPathFor(currentPartPath))) {_			partCounter++__			currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)__		}__		_		partCounter++___		LOG.debug("Next part path is {}", currentPartPath.toString())___		Path inProgressPath = getInProgressPathFor(currentPartPath)__		writer.open(fs, inProgressPath)__		isWriterOpen = true__	};opens,a,new,part,file,p,this,closes,the,old,bucket,file,and,retrieves,a,new,bucket,path,from,the,code,bucketer;private,void,open,new,part,file,throws,exception,close,current,part,file,path,new,bucket,directory,bucketer,get,next,bucket,path,new,path,base,path,if,new,bucket,directory,equals,current,bucket,directory,current,bucket,directory,new,bucket,directory,try,if,fs,mkdirs,current,bucket,directory,log,debug,created,new,bucket,directory,current,bucket,directory,catch,ioexception,e,throw,new,runtime,exception,could,not,create,base,path,for,new,rolling,file,e,int,subtask,index,get,runtime,context,get,index,of,this,subtask,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,while,fs,exists,current,part,path,fs,exists,get,pending,path,for,current,part,path,fs,exists,get,in,progress,path,for,current,part,path,part,counter,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,part,counter,log,debug,next,part,path,is,current,part,path,to,string,path,in,progress,path,get,in,progress,path,for,current,part,path,writer,open,fs,in,progress,path,is,writer,open,true
RollingSink -> private void openNewPartFile() throws Exception;1503598628;Opens a new part file.___<p>This closes the old bucket file and retrieves a new bucket path from the {@code Bucketer}.;private void openNewPartFile() throws Exception {_		closeCurrentPartFile()___		Path newBucketDirectory = bucketer.getNextBucketPath(new Path(basePath))___		if (!newBucketDirectory.equals(currentBucketDirectory)) {_			currentBucketDirectory = newBucketDirectory__			try {_				if (fs.mkdirs(currentBucketDirectory)) {_					LOG.debug("Created new bucket directory: {}", currentBucketDirectory)__				}_			} catch (IOException e) {_				throw new RuntimeException("Could not create base path for new rolling file.", e)__			}_		}__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)___		_		_		while (fs.exists(currentPartPath) ||_				fs.exists(getPendingPathFor(currentPartPath)) ||_				fs.exists(getInProgressPathFor(currentPartPath))) {_			partCounter++__			currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)__		}__		_		partCounter++___		LOG.debug("Next part path is {}", currentPartPath.toString())___		Path inProgressPath = getInProgressPathFor(currentPartPath)__		writer.open(fs, inProgressPath)__		isWriterOpen = true__	};opens,a,new,part,file,p,this,closes,the,old,bucket,file,and,retrieves,a,new,bucket,path,from,the,code,bucketer;private,void,open,new,part,file,throws,exception,close,current,part,file,path,new,bucket,directory,bucketer,get,next,bucket,path,new,path,base,path,if,new,bucket,directory,equals,current,bucket,directory,current,bucket,directory,new,bucket,directory,try,if,fs,mkdirs,current,bucket,directory,log,debug,created,new,bucket,directory,current,bucket,directory,catch,ioexception,e,throw,new,runtime,exception,could,not,create,base,path,for,new,rolling,file,e,int,subtask,index,get,runtime,context,get,index,of,this,subtask,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,while,fs,exists,current,part,path,fs,exists,get,pending,path,for,current,part,path,fs,exists,get,in,progress,path,for,current,part,path,part,counter,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,part,counter,log,debug,next,part,path,is,current,part,path,to,string,path,in,progress,path,get,in,progress,path,for,current,part,path,writer,open,fs,in,progress,path,is,writer,open,true
RollingSink -> private void openNewPartFile() throws Exception;1507304600;Opens a new part file.___<p>This closes the old bucket file and retrieves a new bucket path from the {@code Bucketer}.;private void openNewPartFile() throws Exception {_		closeCurrentPartFile()___		Path newBucketDirectory = bucketer.getNextBucketPath(new Path(basePath))___		if (!newBucketDirectory.equals(currentBucketDirectory)) {_			currentBucketDirectory = newBucketDirectory__			try {_				if (fs.mkdirs(currentBucketDirectory)) {_					LOG.debug("Created new bucket directory: {}", currentBucketDirectory)__				}_			} catch (IOException e) {_				throw new RuntimeException("Could not create base path for new rolling file.", e)__			}_		}__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)___		_		_		while (fs.exists(currentPartPath) ||_				fs.exists(getPendingPathFor(currentPartPath)) ||_				fs.exists(getInProgressPathFor(currentPartPath))) {_			partCounter++__			currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)__		}__		_		partCounter++___		LOG.debug("Next part path is {}", currentPartPath.toString())___		Path inProgressPath = getInProgressPathFor(currentPartPath)__		writer.open(fs, inProgressPath)__		isWriterOpen = true__	};opens,a,new,part,file,p,this,closes,the,old,bucket,file,and,retrieves,a,new,bucket,path,from,the,code,bucketer;private,void,open,new,part,file,throws,exception,close,current,part,file,path,new,bucket,directory,bucketer,get,next,bucket,path,new,path,base,path,if,new,bucket,directory,equals,current,bucket,directory,current,bucket,directory,new,bucket,directory,try,if,fs,mkdirs,current,bucket,directory,log,debug,created,new,bucket,directory,current,bucket,directory,catch,ioexception,e,throw,new,runtime,exception,could,not,create,base,path,for,new,rolling,file,e,int,subtask,index,get,runtime,context,get,index,of,this,subtask,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,while,fs,exists,current,part,path,fs,exists,get,pending,path,for,current,part,path,fs,exists,get,in,progress,path,for,current,part,path,part,counter,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,part,counter,log,debug,next,part,path,is,current,part,path,to,string,path,in,progress,path,get,in,progress,path,for,current,part,path,writer,open,fs,in,progress,path,is,writer,open,true
RollingSink -> private void openNewPartFile() throws Exception;1511347989;Opens a new part file.___<p>This closes the old bucket file and retrieves a new bucket path from the {@code Bucketer}.;private void openNewPartFile() throws Exception {_		closeCurrentPartFile()___		Path newBucketDirectory = bucketer.getNextBucketPath(new Path(basePath))___		if (!newBucketDirectory.equals(currentBucketDirectory)) {_			currentBucketDirectory = newBucketDirectory__			try {_				if (fs.mkdirs(currentBucketDirectory)) {_					LOG.debug("Created new bucket directory: {}", currentBucketDirectory)__				}_			} catch (IOException e) {_				throw new RuntimeException("Could not create base path for new rolling file.", e)__			}_		}__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)___		_		_		while (fs.exists(currentPartPath) ||_				fs.exists(getPendingPathFor(currentPartPath)) ||_				fs.exists(getInProgressPathFor(currentPartPath))) {_			partCounter++__			currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)__		}__		_		partCounter++___		LOG.debug("Next part path is {}", currentPartPath.toString())___		Path inProgressPath = getInProgressPathFor(currentPartPath)__		writer.open(fs, inProgressPath)__		isWriterOpen = true__	};opens,a,new,part,file,p,this,closes,the,old,bucket,file,and,retrieves,a,new,bucket,path,from,the,code,bucketer;private,void,open,new,part,file,throws,exception,close,current,part,file,path,new,bucket,directory,bucketer,get,next,bucket,path,new,path,base,path,if,new,bucket,directory,equals,current,bucket,directory,current,bucket,directory,new,bucket,directory,try,if,fs,mkdirs,current,bucket,directory,log,debug,created,new,bucket,directory,current,bucket,directory,catch,ioexception,e,throw,new,runtime,exception,could,not,create,base,path,for,new,rolling,file,e,int,subtask,index,get,runtime,context,get,index,of,this,subtask,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,while,fs,exists,current,part,path,fs,exists,get,pending,path,for,current,part,path,fs,exists,get,in,progress,path,for,current,part,path,part,counter,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,part,counter,log,debug,next,part,path,is,current,part,path,to,string,path,in,progress,path,get,in,progress,path,for,current,part,path,writer,open,fs,in,progress,path,is,writer,open,true
RollingSink -> private void openNewPartFile() throws Exception;1524138809;Opens a new part file.___<p>This closes the old bucket file and retrieves a new bucket path from the {@code Bucketer}.;private void openNewPartFile() throws Exception {_		closeCurrentPartFile()___		Path newBucketDirectory = bucketer.getNextBucketPath(new Path(basePath))___		if (!newBucketDirectory.equals(currentBucketDirectory)) {_			currentBucketDirectory = newBucketDirectory__			try {_				if (fs.mkdirs(currentBucketDirectory)) {_					LOG.debug("Created new bucket directory: {}", currentBucketDirectory)__				}_			} catch (IOException e) {_				throw new RuntimeException("Could not create base path for new rolling file.", e)__			}_		}__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)___		_		_		while (fs.exists(currentPartPath) ||_				fs.exists(getPendingPathFor(currentPartPath)) ||_				fs.exists(getInProgressPathFor(currentPartPath))) {_			partCounter++__			currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)__		}__		_		partCounter++___		LOG.debug("Next part path is {}", currentPartPath.toString())___		Path inProgressPath = getInProgressPathFor(currentPartPath)__		writer.open(fs, inProgressPath)__		isWriterOpen = true__	};opens,a,new,part,file,p,this,closes,the,old,bucket,file,and,retrieves,a,new,bucket,path,from,the,code,bucketer;private,void,open,new,part,file,throws,exception,close,current,part,file,path,new,bucket,directory,bucketer,get,next,bucket,path,new,path,base,path,if,new,bucket,directory,equals,current,bucket,directory,current,bucket,directory,new,bucket,directory,try,if,fs,mkdirs,current,bucket,directory,log,debug,created,new,bucket,directory,current,bucket,directory,catch,ioexception,e,throw,new,runtime,exception,could,not,create,base,path,for,new,rolling,file,e,int,subtask,index,get,runtime,context,get,index,of,this,subtask,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,while,fs,exists,current,part,path,fs,exists,get,pending,path,for,current,part,path,fs,exists,get,in,progress,path,for,current,part,path,part,counter,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,part,counter,log,debug,next,part,path,is,current,part,path,to,string,path,in,progress,path,get,in,progress,path,for,current,part,path,writer,open,fs,in,progress,path,is,writer,open,true
RollingSink -> private void openNewPartFile() throws Exception;1531303510;Opens a new part file.___<p>This closes the old bucket file and retrieves a new bucket path from the {@code Bucketer}.;private void openNewPartFile() throws Exception {_		closeCurrentPartFile()___		Path newBucketDirectory = bucketer.getNextBucketPath(new Path(basePath))___		if (!newBucketDirectory.equals(currentBucketDirectory)) {_			currentBucketDirectory = newBucketDirectory__			try {_				if (fs.mkdirs(currentBucketDirectory)) {_					LOG.debug("Created new bucket directory: {}", currentBucketDirectory)__				}_			} catch (IOException e) {_				throw new RuntimeException("Could not create base path for new rolling file.", e)__			}_		}__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)___		_		_		while (fs.exists(currentPartPath) ||_				fs.exists(getPendingPathFor(currentPartPath)) ||_				fs.exists(getInProgressPathFor(currentPartPath))) {_			partCounter++__			currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)__		}__		_		partCounter++___		LOG.debug("Next part path is {}", currentPartPath.toString())___		Path inProgressPath = getInProgressPathFor(currentPartPath)__		writer.open(fs, inProgressPath)__		isWriterOpen = true__	};opens,a,new,part,file,p,this,closes,the,old,bucket,file,and,retrieves,a,new,bucket,path,from,the,code,bucketer;private,void,open,new,part,file,throws,exception,close,current,part,file,path,new,bucket,directory,bucketer,get,next,bucket,path,new,path,base,path,if,new,bucket,directory,equals,current,bucket,directory,current,bucket,directory,new,bucket,directory,try,if,fs,mkdirs,current,bucket,directory,log,debug,created,new,bucket,directory,current,bucket,directory,catch,ioexception,e,throw,new,runtime,exception,could,not,create,base,path,for,new,rolling,file,e,int,subtask,index,get,runtime,context,get,index,of,this,subtask,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,while,fs,exists,current,part,path,fs,exists,get,pending,path,for,current,part,path,fs,exists,get,in,progress,path,for,current,part,path,part,counter,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,part,counter,log,debug,next,part,path,is,current,part,path,to,string,path,in,progress,path,get,in,progress,path,for,current,part,path,writer,open,fs,in,progress,path,is,writer,open,true
RollingSink -> private void openNewPartFile() throws Exception;1549286603;Opens a new part file.___<p>This closes the old bucket file and retrieves a new bucket path from the {@code Bucketer}.;private void openNewPartFile() throws Exception {_		closeCurrentPartFile()___		Path newBucketDirectory = bucketer.getNextBucketPath(new Path(basePath))___		if (!newBucketDirectory.equals(currentBucketDirectory)) {_			currentBucketDirectory = newBucketDirectory__			try {_				if (fs.mkdirs(currentBucketDirectory)) {_					LOG.debug("Created new bucket directory: {}", currentBucketDirectory)__				}_			} catch (IOException e) {_				throw new RuntimeException("Could not create base path for new rolling file.", e)__			}_		}__		int subtaskIndex = getRuntimeContext().getIndexOfThisSubtask()__		currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)___		_		_		while (fs.exists(currentPartPath) ||_				fs.exists(getPendingPathFor(currentPartPath)) ||_				fs.exists(getInProgressPathFor(currentPartPath))) {_			partCounter++__			currentPartPath = new Path(currentBucketDirectory, partPrefix + "-" + subtaskIndex + "-" + partCounter)__		}__		_		partCounter++___		LOG.debug("Next part path is {}", currentPartPath.toString())___		Path inProgressPath = getInProgressPathFor(currentPartPath)__		writer.open(fs, inProgressPath)__		isWriterOpen = true__	};opens,a,new,part,file,p,this,closes,the,old,bucket,file,and,retrieves,a,new,bucket,path,from,the,code,bucketer;private,void,open,new,part,file,throws,exception,close,current,part,file,path,new,bucket,directory,bucketer,get,next,bucket,path,new,path,base,path,if,new,bucket,directory,equals,current,bucket,directory,current,bucket,directory,new,bucket,directory,try,if,fs,mkdirs,current,bucket,directory,log,debug,created,new,bucket,directory,current,bucket,directory,catch,ioexception,e,throw,new,runtime,exception,could,not,create,base,path,for,new,rolling,file,e,int,subtask,index,get,runtime,context,get,index,of,this,subtask,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,while,fs,exists,current,part,path,fs,exists,get,pending,path,for,current,part,path,fs,exists,get,in,progress,path,for,current,part,path,part,counter,current,part,path,new,path,current,bucket,directory,part,prefix,subtask,index,part,counter,part,counter,log,debug,next,part,path,is,current,part,path,to,string,path,in,progress,path,get,in,progress,path,for,current,part,path,writer,open,fs,in,progress,path,is,writer,open,true
RollingSink -> public RollingSink<T> setWriter(Writer<T> writer);1480685315;Sets the {@link Writer} to be used for writing the incoming elements to bucket files.__@param writer The {@code Writer} to use.;public RollingSink<T> setWriter(Writer<T> writer) {_		this.writerTemplate = writer__		return this__	};sets,the,link,writer,to,be,used,for,writing,the,incoming,elements,to,bucket,files,param,writer,the,code,writer,to,use;public,rolling,sink,t,set,writer,writer,t,writer,this,writer,template,writer,return,this
RollingSink -> public RollingSink<T> setWriter(Writer<T> writer);1484304405;Sets the {@link Writer} to be used for writing the incoming elements to bucket files.__@param writer The {@code Writer} to use.;public RollingSink<T> setWriter(Writer<T> writer) {_		this.writerTemplate = writer__		return this__	};sets,the,link,writer,to,be,used,for,writing,the,incoming,elements,to,bucket,files,param,writer,the,code,writer,to,use;public,rolling,sink,t,set,writer,writer,t,writer,this,writer,template,writer,return,this
RollingSink -> public RollingSink<T> setWriter(Writer<T> writer);1484304405;Sets the {@link Writer} to be used for writing the incoming elements to bucket files.__@param writer The {@code Writer} to use.;public RollingSink<T> setWriter(Writer<T> writer) {_		this.writerTemplate = writer__		return this__	};sets,the,link,writer,to,be,used,for,writing,the,incoming,elements,to,bucket,files,param,writer,the,code,writer,to,use;public,rolling,sink,t,set,writer,writer,t,writer,this,writer,template,writer,return,this
RollingSink -> public RollingSink<T> setWriter(Writer<T> writer);1495923089;Sets the {@link Writer} to be used for writing the incoming elements to bucket files.__@param writer The {@code Writer} to use.;public RollingSink<T> setWriter(Writer<T> writer) {_		this.writerTemplate = writer__		return this__	};sets,the,link,writer,to,be,used,for,writing,the,incoming,elements,to,bucket,files,param,writer,the,code,writer,to,use;public,rolling,sink,t,set,writer,writer,t,writer,this,writer,template,writer,return,this
RollingSink -> public RollingSink<T> setWriter(Writer<T> writer);1503598628;Sets the {@link Writer} to be used for writing the incoming elements to bucket files.__@param writer The {@code Writer} to use.;public RollingSink<T> setWriter(Writer<T> writer) {_		this.writerTemplate = writer__		return this__	};sets,the,link,writer,to,be,used,for,writing,the,incoming,elements,to,bucket,files,param,writer,the,code,writer,to,use;public,rolling,sink,t,set,writer,writer,t,writer,this,writer,template,writer,return,this
RollingSink -> public RollingSink<T> setWriter(Writer<T> writer);1507304600;Sets the {@link Writer} to be used for writing the incoming elements to bucket files.__@param writer The {@code Writer} to use.;public RollingSink<T> setWriter(Writer<T> writer) {_		this.writerTemplate = writer__		return this__	};sets,the,link,writer,to,be,used,for,writing,the,incoming,elements,to,bucket,files,param,writer,the,code,writer,to,use;public,rolling,sink,t,set,writer,writer,t,writer,this,writer,template,writer,return,this
RollingSink -> public RollingSink<T> setWriter(Writer<T> writer);1511347989;Sets the {@link Writer} to be used for writing the incoming elements to bucket files.__@param writer The {@code Writer} to use.;public RollingSink<T> setWriter(Writer<T> writer) {_		this.writerTemplate = writer__		return this__	};sets,the,link,writer,to,be,used,for,writing,the,incoming,elements,to,bucket,files,param,writer,the,code,writer,to,use;public,rolling,sink,t,set,writer,writer,t,writer,this,writer,template,writer,return,this
RollingSink -> public RollingSink<T> setWriter(Writer<T> writer);1524138809;Sets the {@link Writer} to be used for writing the incoming elements to bucket files.__@param writer The {@code Writer} to use.;public RollingSink<T> setWriter(Writer<T> writer) {_		this.writerTemplate = writer__		return this__	};sets,the,link,writer,to,be,used,for,writing,the,incoming,elements,to,bucket,files,param,writer,the,code,writer,to,use;public,rolling,sink,t,set,writer,writer,t,writer,this,writer,template,writer,return,this
RollingSink -> public RollingSink<T> setWriter(Writer<T> writer);1531303510;Sets the {@link Writer} to be used for writing the incoming elements to bucket files.__@param writer The {@code Writer} to use.;public RollingSink<T> setWriter(Writer<T> writer) {_		this.writerTemplate = writer__		return this__	};sets,the,link,writer,to,be,used,for,writing,the,incoming,elements,to,bucket,files,param,writer,the,code,writer,to,use;public,rolling,sink,t,set,writer,writer,t,writer,this,writer,template,writer,return,this
RollingSink -> public RollingSink<T> setWriter(Writer<T> writer);1549286603;Sets the {@link Writer} to be used for writing the incoming elements to bucket files.__@param writer The {@code Writer} to use.;public RollingSink<T> setWriter(Writer<T> writer) {_		this.writerTemplate = writer__		return this__	};sets,the,link,writer,to,be,used,for,writing,the,incoming,elements,to,bucket,files,param,writer,the,code,writer,to,use;public,rolling,sink,t,set,writer,writer,t,writer,this,writer,template,writer,return,this
RollingSink -> public RollingSink<T> setInProgressPrefix(String inProgressPrefix);1480685315;Sets the prefix of in-progress part files. The default is {@code "_"}.;public RollingSink<T> setInProgressPrefix(String inProgressPrefix) {_		this.inProgressPrefix = inProgressPrefix__		return this__	};sets,the,prefix,of,in,progress,part,files,the,default,is,code;public,rolling,sink,t,set,in,progress,prefix,string,in,progress,prefix,this,in,progress,prefix,in,progress,prefix,return,this
RollingSink -> public RollingSink<T> setInProgressPrefix(String inProgressPrefix);1484304405;Sets the prefix of in-progress part files. The default is {@code "_"}.;public RollingSink<T> setInProgressPrefix(String inProgressPrefix) {_		this.inProgressPrefix = inProgressPrefix__		return this__	};sets,the,prefix,of,in,progress,part,files,the,default,is,code;public,rolling,sink,t,set,in,progress,prefix,string,in,progress,prefix,this,in,progress,prefix,in,progress,prefix,return,this
RollingSink -> public RollingSink<T> setInProgressPrefix(String inProgressPrefix);1484304405;Sets the prefix of in-progress part files. The default is {@code "_"}.;public RollingSink<T> setInProgressPrefix(String inProgressPrefix) {_		this.inProgressPrefix = inProgressPrefix__		return this__	};sets,the,prefix,of,in,progress,part,files,the,default,is,code;public,rolling,sink,t,set,in,progress,prefix,string,in,progress,prefix,this,in,progress,prefix,in,progress,prefix,return,this
RollingSink -> public RollingSink<T> setInProgressPrefix(String inProgressPrefix);1495923089;Sets the prefix of in-progress part files. The default is {@code "_"}.;public RollingSink<T> setInProgressPrefix(String inProgressPrefix) {_		this.inProgressPrefix = inProgressPrefix__		return this__	};sets,the,prefix,of,in,progress,part,files,the,default,is,code;public,rolling,sink,t,set,in,progress,prefix,string,in,progress,prefix,this,in,progress,prefix,in,progress,prefix,return,this
RollingSink -> public RollingSink<T> setInProgressPrefix(String inProgressPrefix);1503598628;Sets the prefix of in-progress part files. The default is {@code "_"}.;public RollingSink<T> setInProgressPrefix(String inProgressPrefix) {_		this.inProgressPrefix = inProgressPrefix__		return this__	};sets,the,prefix,of,in,progress,part,files,the,default,is,code;public,rolling,sink,t,set,in,progress,prefix,string,in,progress,prefix,this,in,progress,prefix,in,progress,prefix,return,this
RollingSink -> public RollingSink<T> setInProgressPrefix(String inProgressPrefix);1507304600;Sets the prefix of in-progress part files. The default is {@code "_"}.;public RollingSink<T> setInProgressPrefix(String inProgressPrefix) {_		this.inProgressPrefix = inProgressPrefix__		return this__	};sets,the,prefix,of,in,progress,part,files,the,default,is,code;public,rolling,sink,t,set,in,progress,prefix,string,in,progress,prefix,this,in,progress,prefix,in,progress,prefix,return,this
RollingSink -> public RollingSink<T> setInProgressPrefix(String inProgressPrefix);1511347989;Sets the prefix of in-progress part files. The default is {@code "_"}.;public RollingSink<T> setInProgressPrefix(String inProgressPrefix) {_		this.inProgressPrefix = inProgressPrefix__		return this__	};sets,the,prefix,of,in,progress,part,files,the,default,is,code;public,rolling,sink,t,set,in,progress,prefix,string,in,progress,prefix,this,in,progress,prefix,in,progress,prefix,return,this
RollingSink -> public RollingSink<T> setInProgressPrefix(String inProgressPrefix);1524138809;Sets the prefix of in-progress part files. The default is {@code "_"}.;public RollingSink<T> setInProgressPrefix(String inProgressPrefix) {_		this.inProgressPrefix = inProgressPrefix__		return this__	};sets,the,prefix,of,in,progress,part,files,the,default,is,code;public,rolling,sink,t,set,in,progress,prefix,string,in,progress,prefix,this,in,progress,prefix,in,progress,prefix,return,this
RollingSink -> public RollingSink<T> setInProgressPrefix(String inProgressPrefix);1531303510;Sets the prefix of in-progress part files. The default is {@code "_"}.;public RollingSink<T> setInProgressPrefix(String inProgressPrefix) {_		this.inProgressPrefix = inProgressPrefix__		return this__	};sets,the,prefix,of,in,progress,part,files,the,default,is,code;public,rolling,sink,t,set,in,progress,prefix,string,in,progress,prefix,this,in,progress,prefix,in,progress,prefix,return,this
RollingSink -> public RollingSink<T> setInProgressPrefix(String inProgressPrefix);1549286603;Sets the prefix of in-progress part files. The default is {@code "_"}.;public RollingSink<T> setInProgressPrefix(String inProgressPrefix) {_		this.inProgressPrefix = inProgressPrefix__		return this__	};sets,the,prefix,of,in,progress,part,files,the,default,is,code;public,rolling,sink,t,set,in,progress,prefix,string,in,progress,prefix,this,in,progress,prefix,in,progress,prefix,return,this
RollingSink -> public RollingSink<T> setBucketer(Bucketer bucketer);1480685315;Sets the {@link Bucketer} to use for determining the bucket files to write to.__@param bucketer The bucketer to use.;public RollingSink<T> setBucketer(Bucketer bucketer) {_		this.bucketer = bucketer__		return this__	};sets,the,link,bucketer,to,use,for,determining,the,bucket,files,to,write,to,param,bucketer,the,bucketer,to,use;public,rolling,sink,t,set,bucketer,bucketer,bucketer,this,bucketer,bucketer,return,this
RollingSink -> public RollingSink<T> setBucketer(Bucketer bucketer);1484304405;Sets the {@link Bucketer} to use for determining the bucket files to write to.__@param bucketer The bucketer to use.;public RollingSink<T> setBucketer(Bucketer bucketer) {_		this.bucketer = bucketer__		return this__	};sets,the,link,bucketer,to,use,for,determining,the,bucket,files,to,write,to,param,bucketer,the,bucketer,to,use;public,rolling,sink,t,set,bucketer,bucketer,bucketer,this,bucketer,bucketer,return,this
RollingSink -> public RollingSink<T> setBucketer(Bucketer bucketer);1484304405;Sets the {@link Bucketer} to use for determining the bucket files to write to.__@param bucketer The bucketer to use.;public RollingSink<T> setBucketer(Bucketer bucketer) {_		this.bucketer = bucketer__		return this__	};sets,the,link,bucketer,to,use,for,determining,the,bucket,files,to,write,to,param,bucketer,the,bucketer,to,use;public,rolling,sink,t,set,bucketer,bucketer,bucketer,this,bucketer,bucketer,return,this
RollingSink -> public RollingSink<T> setBucketer(Bucketer bucketer);1495923089;Sets the {@link Bucketer} to use for determining the bucket files to write to.__@param bucketer The bucketer to use.;public RollingSink<T> setBucketer(Bucketer bucketer) {_		this.bucketer = bucketer__		return this__	};sets,the,link,bucketer,to,use,for,determining,the,bucket,files,to,write,to,param,bucketer,the,bucketer,to,use;public,rolling,sink,t,set,bucketer,bucketer,bucketer,this,bucketer,bucketer,return,this
RollingSink -> public RollingSink<T> setBucketer(Bucketer bucketer);1503598628;Sets the {@link Bucketer} to use for determining the bucket files to write to.__@param bucketer The bucketer to use.;public RollingSink<T> setBucketer(Bucketer bucketer) {_		this.bucketer = bucketer__		return this__	};sets,the,link,bucketer,to,use,for,determining,the,bucket,files,to,write,to,param,bucketer,the,bucketer,to,use;public,rolling,sink,t,set,bucketer,bucketer,bucketer,this,bucketer,bucketer,return,this
RollingSink -> public RollingSink<T> setBucketer(Bucketer bucketer);1507304600;Sets the {@link Bucketer} to use for determining the bucket files to write to.__@param bucketer The bucketer to use.;public RollingSink<T> setBucketer(Bucketer bucketer) {_		this.bucketer = bucketer__		return this__	};sets,the,link,bucketer,to,use,for,determining,the,bucket,files,to,write,to,param,bucketer,the,bucketer,to,use;public,rolling,sink,t,set,bucketer,bucketer,bucketer,this,bucketer,bucketer,return,this
RollingSink -> public RollingSink<T> setBucketer(Bucketer bucketer);1511347989;Sets the {@link Bucketer} to use for determining the bucket files to write to.__@param bucketer The bucketer to use.;public RollingSink<T> setBucketer(Bucketer bucketer) {_		this.bucketer = bucketer__		return this__	};sets,the,link,bucketer,to,use,for,determining,the,bucket,files,to,write,to,param,bucketer,the,bucketer,to,use;public,rolling,sink,t,set,bucketer,bucketer,bucketer,this,bucketer,bucketer,return,this
RollingSink -> public RollingSink<T> setBucketer(Bucketer bucketer);1524138809;Sets the {@link Bucketer} to use for determining the bucket files to write to.__@param bucketer The bucketer to use.;public RollingSink<T> setBucketer(Bucketer bucketer) {_		this.bucketer = bucketer__		return this__	};sets,the,link,bucketer,to,use,for,determining,the,bucket,files,to,write,to,param,bucketer,the,bucketer,to,use;public,rolling,sink,t,set,bucketer,bucketer,bucketer,this,bucketer,bucketer,return,this
RollingSink -> public RollingSink<T> setBucketer(Bucketer bucketer);1531303510;Sets the {@link Bucketer} to use for determining the bucket files to write to.__@param bucketer The bucketer to use.;public RollingSink<T> setBucketer(Bucketer bucketer) {_		this.bucketer = bucketer__		return this__	};sets,the,link,bucketer,to,use,for,determining,the,bucket,files,to,write,to,param,bucketer,the,bucketer,to,use;public,rolling,sink,t,set,bucketer,bucketer,bucketer,this,bucketer,bucketer,return,this
RollingSink -> public RollingSink<T> setBucketer(Bucketer bucketer);1549286603;Sets the {@link Bucketer} to use for determining the bucket files to write to.__@param bucketer The bucketer to use.;public RollingSink<T> setBucketer(Bucketer bucketer) {_		this.bucketer = bucketer__		return this__	};sets,the,link,bucketer,to,use,for,determining,the,bucket,files,to,write,to,param,bucketer,the,bucketer,to,use;public,rolling,sink,t,set,bucketer,bucketer,bucketer,this,bucketer,bucketer,return,this
RollingSink -> public RollingSink<T> setValidLengthSuffix(String validLengthSuffix);1480685315;Sets the suffix of valid-length files. The default is {@code ".valid-length"}.;public RollingSink<T> setValidLengthSuffix(String validLengthSuffix) {_		this.validLengthSuffix = validLengthSuffix__		return this__	};sets,the,suffix,of,valid,length,files,the,default,is,code,valid,length;public,rolling,sink,t,set,valid,length,suffix,string,valid,length,suffix,this,valid,length,suffix,valid,length,suffix,return,this
RollingSink -> public RollingSink<T> setValidLengthSuffix(String validLengthSuffix);1484304405;Sets the suffix of valid-length files. The default is {@code ".valid-length"}.;public RollingSink<T> setValidLengthSuffix(String validLengthSuffix) {_		this.validLengthSuffix = validLengthSuffix__		return this__	};sets,the,suffix,of,valid,length,files,the,default,is,code,valid,length;public,rolling,sink,t,set,valid,length,suffix,string,valid,length,suffix,this,valid,length,suffix,valid,length,suffix,return,this
RollingSink -> public RollingSink<T> setValidLengthSuffix(String validLengthSuffix);1484304405;Sets the suffix of valid-length files. The default is {@code ".valid-length"}.;public RollingSink<T> setValidLengthSuffix(String validLengthSuffix) {_		this.validLengthSuffix = validLengthSuffix__		return this__	};sets,the,suffix,of,valid,length,files,the,default,is,code,valid,length;public,rolling,sink,t,set,valid,length,suffix,string,valid,length,suffix,this,valid,length,suffix,valid,length,suffix,return,this
RollingSink -> public RollingSink<T> setValidLengthSuffix(String validLengthSuffix);1495923089;Sets the suffix of valid-length files. The default is {@code ".valid-length"}.;public RollingSink<T> setValidLengthSuffix(String validLengthSuffix) {_		this.validLengthSuffix = validLengthSuffix__		return this__	};sets,the,suffix,of,valid,length,files,the,default,is,code,valid,length;public,rolling,sink,t,set,valid,length,suffix,string,valid,length,suffix,this,valid,length,suffix,valid,length,suffix,return,this
RollingSink -> public RollingSink<T> setValidLengthSuffix(String validLengthSuffix);1503598628;Sets the suffix of valid-length files. The default is {@code ".valid-length"}.;public RollingSink<T> setValidLengthSuffix(String validLengthSuffix) {_		this.validLengthSuffix = validLengthSuffix__		return this__	};sets,the,suffix,of,valid,length,files,the,default,is,code,valid,length;public,rolling,sink,t,set,valid,length,suffix,string,valid,length,suffix,this,valid,length,suffix,valid,length,suffix,return,this
RollingSink -> public RollingSink<T> setValidLengthSuffix(String validLengthSuffix);1507304600;Sets the suffix of valid-length files. The default is {@code ".valid-length"}.;public RollingSink<T> setValidLengthSuffix(String validLengthSuffix) {_		this.validLengthSuffix = validLengthSuffix__		return this__	};sets,the,suffix,of,valid,length,files,the,default,is,code,valid,length;public,rolling,sink,t,set,valid,length,suffix,string,valid,length,suffix,this,valid,length,suffix,valid,length,suffix,return,this
RollingSink -> public RollingSink<T> setValidLengthSuffix(String validLengthSuffix);1511347989;Sets the suffix of valid-length files. The default is {@code ".valid-length"}.;public RollingSink<T> setValidLengthSuffix(String validLengthSuffix) {_		this.validLengthSuffix = validLengthSuffix__		return this__	};sets,the,suffix,of,valid,length,files,the,default,is,code,valid,length;public,rolling,sink,t,set,valid,length,suffix,string,valid,length,suffix,this,valid,length,suffix,valid,length,suffix,return,this
RollingSink -> public RollingSink<T> setValidLengthSuffix(String validLengthSuffix);1524138809;Sets the suffix of valid-length files. The default is {@code ".valid-length"}.;public RollingSink<T> setValidLengthSuffix(String validLengthSuffix) {_		this.validLengthSuffix = validLengthSuffix__		return this__	};sets,the,suffix,of,valid,length,files,the,default,is,code,valid,length;public,rolling,sink,t,set,valid,length,suffix,string,valid,length,suffix,this,valid,length,suffix,valid,length,suffix,return,this
RollingSink -> public RollingSink<T> setValidLengthSuffix(String validLengthSuffix);1531303510;Sets the suffix of valid-length files. The default is {@code ".valid-length"}.;public RollingSink<T> setValidLengthSuffix(String validLengthSuffix) {_		this.validLengthSuffix = validLengthSuffix__		return this__	};sets,the,suffix,of,valid,length,files,the,default,is,code,valid,length;public,rolling,sink,t,set,valid,length,suffix,string,valid,length,suffix,this,valid,length,suffix,valid,length,suffix,return,this
RollingSink -> public RollingSink<T> setValidLengthSuffix(String validLengthSuffix);1549286603;Sets the suffix of valid-length files. The default is {@code ".valid-length"}.;public RollingSink<T> setValidLengthSuffix(String validLengthSuffix) {_		this.validLengthSuffix = validLengthSuffix__		return this__	};sets,the,suffix,of,valid,length,files,the,default,is,code,valid,length;public,rolling,sink,t,set,valid,length,suffix,string,valid,length,suffix,this,valid,length,suffix,valid,length,suffix,return,this
