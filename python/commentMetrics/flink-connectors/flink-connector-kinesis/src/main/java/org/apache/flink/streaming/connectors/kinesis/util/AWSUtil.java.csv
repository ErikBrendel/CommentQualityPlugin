# id;timestamp;commentText;codeText;commentWords;codeWords
AWSUtil -> public static void setAwsClientConfigProperties(ClientConfiguration config, 													Properties configProps);1525262671;Set all prefixed properties on {@link ClientConfiguration}._@param config_@param configProps;public static void setAwsClientConfigProperties(ClientConfiguration config,_													Properties configProps) {__		Map<String, Object> awsConfigProperties = new HashMap<>()__		for (Map.Entry<Object, Object> entry : configProps.entrySet()) {_			String key = (String) entry.getKey()__			if (key.startsWith(AWS_CLIENT_CONFIG_PREFIX)) {_				awsConfigProperties.put(key.substring(AWS_CLIENT_CONFIG_PREFIX.length()), entry.getValue())__			}_		}_		_		String[] ignorableProperties = {"secureRandom"}__		BeanDeserializerModifier modifier = new BeanDeserializerModifierForIgnorables(_			ClientConfiguration.class, ignorableProperties)__		DeserializerFactory factory = BeanDeserializerFactory.instance.withDeserializerModifier(_			modifier)__		ObjectMapper mapper = new ObjectMapper(null, null,_			new DefaultDeserializationContext.Impl(factory))___		JsonNode propTree = mapper.convertValue(awsConfigProperties, JsonNode.class)__		try {_			mapper.readerForUpdating(config).readValue(propTree)__		} catch (IOException ex) {_			throw new RuntimeException(ex)__		}_	};set,all,prefixed,properties,on,link,client,configuration,param,config,param,config,props;public,static,void,set,aws,client,config,properties,client,configuration,config,properties,config,props,map,string,object,aws,config,properties,new,hash,map,for,map,entry,object,object,entry,config,props,entry,set,string,key,string,entry,get,key,if,key,starts,with,aws,config,properties,put,key,substring,length,entry,get,value,string,ignorable,properties,secure,random,bean,deserializer,modifier,modifier,new,bean,deserializer,modifier,for,ignorables,client,configuration,class,ignorable,properties,deserializer,factory,factory,bean,deserializer,factory,instance,with,deserializer,modifier,modifier,object,mapper,mapper,new,object,mapper,null,null,new,default,deserialization,context,impl,factory,json,node,prop,tree,mapper,convert,value,aws,config,properties,json,node,class,try,mapper,reader,for,updating,config,read,value,prop,tree,catch,ioexception,ex,throw,new,runtime,exception,ex
AWSUtil -> public static void setAwsClientConfigProperties(ClientConfiguration config, 													Properties configProps);1527029910;Set all prefixed properties on {@link ClientConfiguration}._@param config_@param configProps;public static void setAwsClientConfigProperties(ClientConfiguration config,_													Properties configProps) {__		Map<String, Object> awsConfigProperties = new HashMap<>()__		for (Map.Entry<Object, Object> entry : configProps.entrySet()) {_			String key = (String) entry.getKey()__			if (key.startsWith(AWS_CLIENT_CONFIG_PREFIX)) {_				awsConfigProperties.put(key.substring(AWS_CLIENT_CONFIG_PREFIX.length()), entry.getValue())__			}_		}_		_		String[] ignorableProperties = {"secureRandom"}__		BeanDeserializerModifier modifier = new BeanDeserializerModifierForIgnorables(_			ClientConfiguration.class, ignorableProperties)__		DeserializerFactory factory = BeanDeserializerFactory.instance.withDeserializerModifier(_			modifier)__		ObjectMapper mapper = new ObjectMapper(null, null,_			new DefaultDeserializationContext.Impl(factory))___		JsonNode propTree = mapper.convertValue(awsConfigProperties, JsonNode.class)__		try {_			mapper.readerForUpdating(config).readValue(propTree)__		} catch (IOException ex) {_			throw new RuntimeException(ex)__		}_	};set,all,prefixed,properties,on,link,client,configuration,param,config,param,config,props;public,static,void,set,aws,client,config,properties,client,configuration,config,properties,config,props,map,string,object,aws,config,properties,new,hash,map,for,map,entry,object,object,entry,config,props,entry,set,string,key,string,entry,get,key,if,key,starts,with,aws,config,properties,put,key,substring,length,entry,get,value,string,ignorable,properties,secure,random,bean,deserializer,modifier,modifier,new,bean,deserializer,modifier,for,ignorables,client,configuration,class,ignorable,properties,deserializer,factory,factory,bean,deserializer,factory,instance,with,deserializer,modifier,modifier,object,mapper,mapper,new,object,mapper,null,null,new,default,deserialization,context,impl,factory,json,node,prop,tree,mapper,convert,value,aws,config,properties,json,node,class,try,mapper,reader,for,updating,config,read,value,prop,tree,catch,ioexception,ex,throw,new,runtime,exception,ex
AWSUtil -> public static void setAwsClientConfigProperties(ClientConfiguration config, 													Properties configProps);1530683488;Set all prefixed properties on {@link ClientConfiguration}._@param config_@param configProps;public static void setAwsClientConfigProperties(ClientConfiguration config,_													Properties configProps) {__		Map<String, Object> awsConfigProperties = new HashMap<>()__		for (Map.Entry<Object, Object> entry : configProps.entrySet()) {_			String key = (String) entry.getKey()__			if (key.startsWith(AWS_CLIENT_CONFIG_PREFIX)) {_				awsConfigProperties.put(key.substring(AWS_CLIENT_CONFIG_PREFIX.length()), entry.getValue())__			}_		}_		_		String[] ignorableProperties = {"secureRandom"}__		BeanDeserializerModifier modifier = new BeanDeserializerModifierForIgnorables(_			ClientConfiguration.class, ignorableProperties)__		DeserializerFactory factory = BeanDeserializerFactory.instance.withDeserializerModifier(_			modifier)__		ObjectMapper mapper = new ObjectMapper(null, null,_			new DefaultDeserializationContext.Impl(factory))___		JsonNode propTree = mapper.convertValue(awsConfigProperties, JsonNode.class)__		try {_			mapper.readerForUpdating(config).readValue(propTree)__		} catch (IOException ex) {_			throw new RuntimeException(ex)__		}_	};set,all,prefixed,properties,on,link,client,configuration,param,config,param,config,props;public,static,void,set,aws,client,config,properties,client,configuration,config,properties,config,props,map,string,object,aws,config,properties,new,hash,map,for,map,entry,object,object,entry,config,props,entry,set,string,key,string,entry,get,key,if,key,starts,with,aws,config,properties,put,key,substring,length,entry,get,value,string,ignorable,properties,secure,random,bean,deserializer,modifier,modifier,new,bean,deserializer,modifier,for,ignorables,client,configuration,class,ignorable,properties,deserializer,factory,factory,bean,deserializer,factory,instance,with,deserializer,modifier,modifier,object,mapper,mapper,new,object,mapper,null,null,new,default,deserialization,context,impl,factory,json,node,prop,tree,mapper,convert,value,aws,config,properties,json,node,class,try,mapper,reader,for,updating,config,read,value,prop,tree,catch,ioexception,ex,throw,new,runtime,exception,ex
AWSUtil -> public static void setAwsClientConfigProperties(ClientConfiguration config, 													Properties configProps);1533129233;Set all prefixed properties on {@link ClientConfiguration}._@param config_@param configProps;public static void setAwsClientConfigProperties(ClientConfiguration config,_													Properties configProps) {__		Map<String, Object> awsConfigProperties = new HashMap<>()__		for (Map.Entry<Object, Object> entry : configProps.entrySet()) {_			String key = (String) entry.getKey()__			if (key.startsWith(AWS_CLIENT_CONFIG_PREFIX)) {_				awsConfigProperties.put(key.substring(AWS_CLIENT_CONFIG_PREFIX.length()), entry.getValue())__			}_		}_		_		String[] ignorableProperties = {"secureRandom"}__		BeanDeserializerModifier modifier = new BeanDeserializerModifierForIgnorables(_			ClientConfiguration.class, ignorableProperties)__		DeserializerFactory factory = BeanDeserializerFactory.instance.withDeserializerModifier(_			modifier)__		ObjectMapper mapper = new ObjectMapper(null, null,_			new DefaultDeserializationContext.Impl(factory))___		JsonNode propTree = mapper.convertValue(awsConfigProperties, JsonNode.class)__		try {_			mapper.readerForUpdating(config).readValue(propTree)__		} catch (IOException ex) {_			throw new RuntimeException(ex)__		}_	};set,all,prefixed,properties,on,link,client,configuration,param,config,param,config,props;public,static,void,set,aws,client,config,properties,client,configuration,config,properties,config,props,map,string,object,aws,config,properties,new,hash,map,for,map,entry,object,object,entry,config,props,entry,set,string,key,string,entry,get,key,if,key,starts,with,aws,config,properties,put,key,substring,length,entry,get,value,string,ignorable,properties,secure,random,bean,deserializer,modifier,modifier,new,bean,deserializer,modifier,for,ignorables,client,configuration,class,ignorable,properties,deserializer,factory,factory,bean,deserializer,factory,instance,with,deserializer,modifier,modifier,object,mapper,mapper,new,object,mapper,null,null,new,default,deserialization,context,impl,factory,json,node,prop,tree,mapper,convert,value,aws,config,properties,json,node,class,try,mapper,reader,for,updating,config,read,value,prop,tree,catch,ioexception,ex,throw,new,runtime,exception,ex
AWSUtil -> private static AWSCredentialsProvider getCredentialsProvider(final Properties configProps, final String configPrefix);1530683488;If the provider is ASSUME_ROLE, then the credentials for assuming this role are determined_recursively.__@param configProps the configuration properties_@param configPrefix the prefix of the config properties for this credentials provider,_e.g. aws.credentials.provider for the base credentials provider,_aws.credentials.provider.role.provider for the credentials provider_for assuming a role, and so on.;private static AWSCredentialsProvider getCredentialsProvider(final Properties configProps, final String configPrefix) {_		CredentialProvider credentialProviderType__		if (!configProps.containsKey(configPrefix)) {_			if (configProps.containsKey(AWSConfigConstants.accessKeyId(configPrefix))_				&& configProps.containsKey(AWSConfigConstants.secretKey(configPrefix))) {_				_				credentialProviderType = CredentialProvider.BASIC__			} else {_				_				credentialProviderType = CredentialProvider.AUTO__			}_		} else {_			credentialProviderType = CredentialProvider.valueOf(configProps.getProperty(configPrefix))__		}__		switch (credentialProviderType) {_			case ENV_VAR:_				return new EnvironmentVariableCredentialsProvider()___			case SYS_PROP:_				return new SystemPropertiesCredentialsProvider()___			case PROFILE:_				String profileName = configProps.getProperty(_						AWSConfigConstants.profileName(configPrefix), null)__				String profileConfigPath = configProps.getProperty(_						AWSConfigConstants.profilePath(configPrefix), null)__				return (profileConfigPath == null)_					? new ProfileCredentialsProvider(profileName)_					: new ProfileCredentialsProvider(profileConfigPath, profileName)___			case BASIC:_				return new AWSCredentialsProvider() {_					@Override_					public AWSCredentials getCredentials() {_						return new BasicAWSCredentials(_							configProps.getProperty(AWSConfigConstants.accessKeyId(configPrefix)),_							configProps.getProperty(AWSConfigConstants.secretKey(configPrefix)))__					}__					@Override_					public void refresh() {_						_					}_				}___			case ASSUME_ROLE:_				final AWSSecurityTokenService baseCredentials = AWSSecurityTokenServiceClientBuilder.standard()_						.withCredentials(getCredentialsProvider(configProps, AWSConfigConstants.roleCredentialsProvider(configPrefix)))_						.withRegion(configProps.getProperty(AWSConfigConstants.AWS_REGION))_						.build()__				return new STSAssumeRoleSessionCredentialsProvider.Builder(_						configProps.getProperty(AWSConfigConstants.roleArn(configPrefix)),_						configProps.getProperty(AWSConfigConstants.roleSessionName(configPrefix)))_						.withExternalId(configProps.getProperty(AWSConfigConstants.externalId(configPrefix)))_						.withStsClient(baseCredentials)_						.build()___			default:_			case AUTO:_				return new DefaultAWSCredentialsProviderChain()__		}_	};if,the,provider,is,then,the,credentials,for,assuming,this,role,are,determined,recursively,param,config,props,the,configuration,properties,param,config,prefix,the,prefix,of,the,config,properties,for,this,credentials,provider,e,g,aws,credentials,provider,for,the,base,credentials,provider,aws,credentials,provider,role,provider,for,the,credentials,provider,for,assuming,a,role,and,so,on;private,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,final,string,config,prefix,credential,provider,credential,provider,type,if,config,props,contains,key,config,prefix,if,config,props,contains,key,awsconfig,constants,access,key,id,config,prefix,config,props,contains,key,awsconfig,constants,secret,key,config,prefix,credential,provider,type,credential,provider,basic,else,credential,provider,type,credential,provider,auto,else,credential,provider,type,credential,provider,value,of,config,props,get,property,config,prefix,switch,credential,provider,type,case,return,new,environment,variable,credentials,provider,case,return,new,system,properties,credentials,provider,case,profile,string,profile,name,config,props,get,property,awsconfig,constants,profile,name,config,prefix,null,string,profile,config,path,config,props,get,property,awsconfig,constants,profile,path,config,prefix,null,return,profile,config,path,null,new,profile,credentials,provider,profile,name,new,profile,credentials,provider,profile,config,path,profile,name,case,basic,return,new,awscredentials,provider,override,public,awscredentials,get,credentials,return,new,basic,awscredentials,config,props,get,property,awsconfig,constants,access,key,id,config,prefix,config,props,get,property,awsconfig,constants,secret,key,config,prefix,override,public,void,refresh,case,final,awssecurity,token,service,base,credentials,awssecurity,token,service,client,builder,standard,with,credentials,get,credentials,provider,config,props,awsconfig,constants,role,credentials,provider,config,prefix,with,region,config,props,get,property,awsconfig,constants,build,return,new,stsassume,role,session,credentials,provider,builder,config,props,get,property,awsconfig,constants,role,arn,config,prefix,config,props,get,property,awsconfig,constants,role,session,name,config,prefix,with,external,id,config,props,get,property,awsconfig,constants,external,id,config,prefix,with,sts,client,base,credentials,build,default,case,auto,return,new,default,awscredentials,provider,chain
AWSUtil -> private static AWSCredentialsProvider getCredentialsProvider(final Properties configProps, final String configPrefix);1533129233;If the provider is ASSUME_ROLE, then the credentials for assuming this role are determined_recursively.__@param configProps the configuration properties_@param configPrefix the prefix of the config properties for this credentials provider,_e.g. aws.credentials.provider for the base credentials provider,_aws.credentials.provider.role.provider for the credentials provider_for assuming a role, and so on.;private static AWSCredentialsProvider getCredentialsProvider(final Properties configProps, final String configPrefix) {_		CredentialProvider credentialProviderType__		if (!configProps.containsKey(configPrefix)) {_			if (configProps.containsKey(AWSConfigConstants.accessKeyId(configPrefix))_				&& configProps.containsKey(AWSConfigConstants.secretKey(configPrefix))) {_				_				credentialProviderType = CredentialProvider.BASIC__			} else {_				_				credentialProviderType = CredentialProvider.AUTO__			}_		} else {_			credentialProviderType = CredentialProvider.valueOf(configProps.getProperty(configPrefix))__		}__		switch (credentialProviderType) {_			case ENV_VAR:_				return new EnvironmentVariableCredentialsProvider()___			case SYS_PROP:_				return new SystemPropertiesCredentialsProvider()___			case PROFILE:_				String profileName = configProps.getProperty(_						AWSConfigConstants.profileName(configPrefix), null)__				String profileConfigPath = configProps.getProperty(_						AWSConfigConstants.profilePath(configPrefix), null)__				return (profileConfigPath == null)_					? new ProfileCredentialsProvider(profileName)_					: new ProfileCredentialsProvider(profileConfigPath, profileName)___			case BASIC:_				return new AWSCredentialsProvider() {_					@Override_					public AWSCredentials getCredentials() {_						return new BasicAWSCredentials(_							configProps.getProperty(AWSConfigConstants.accessKeyId(configPrefix)),_							configProps.getProperty(AWSConfigConstants.secretKey(configPrefix)))__					}__					@Override_					public void refresh() {_						_					}_				}___			case ASSUME_ROLE:_				final AWSSecurityTokenService baseCredentials = AWSSecurityTokenServiceClientBuilder.standard()_						.withCredentials(getCredentialsProvider(configProps, AWSConfigConstants.roleCredentialsProvider(configPrefix)))_						.withRegion(configProps.getProperty(AWSConfigConstants.AWS_REGION))_						.build()__				return new STSAssumeRoleSessionCredentialsProvider.Builder(_						configProps.getProperty(AWSConfigConstants.roleArn(configPrefix)),_						configProps.getProperty(AWSConfigConstants.roleSessionName(configPrefix)))_						.withExternalId(configProps.getProperty(AWSConfigConstants.externalId(configPrefix)))_						.withStsClient(baseCredentials)_						.build()___			default:_			case AUTO:_				return new DefaultAWSCredentialsProviderChain()__		}_	};if,the,provider,is,then,the,credentials,for,assuming,this,role,are,determined,recursively,param,config,props,the,configuration,properties,param,config,prefix,the,prefix,of,the,config,properties,for,this,credentials,provider,e,g,aws,credentials,provider,for,the,base,credentials,provider,aws,credentials,provider,role,provider,for,the,credentials,provider,for,assuming,a,role,and,so,on;private,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,final,string,config,prefix,credential,provider,credential,provider,type,if,config,props,contains,key,config,prefix,if,config,props,contains,key,awsconfig,constants,access,key,id,config,prefix,config,props,contains,key,awsconfig,constants,secret,key,config,prefix,credential,provider,type,credential,provider,basic,else,credential,provider,type,credential,provider,auto,else,credential,provider,type,credential,provider,value,of,config,props,get,property,config,prefix,switch,credential,provider,type,case,return,new,environment,variable,credentials,provider,case,return,new,system,properties,credentials,provider,case,profile,string,profile,name,config,props,get,property,awsconfig,constants,profile,name,config,prefix,null,string,profile,config,path,config,props,get,property,awsconfig,constants,profile,path,config,prefix,null,return,profile,config,path,null,new,profile,credentials,provider,profile,name,new,profile,credentials,provider,profile,config,path,profile,name,case,basic,return,new,awscredentials,provider,override,public,awscredentials,get,credentials,return,new,basic,awscredentials,config,props,get,property,awsconfig,constants,access,key,id,config,prefix,config,props,get,property,awsconfig,constants,secret,key,config,prefix,override,public,void,refresh,case,final,awssecurity,token,service,base,credentials,awssecurity,token,service,client,builder,standard,with,credentials,get,credentials,provider,config,props,awsconfig,constants,role,credentials,provider,config,prefix,with,region,config,props,get,property,awsconfig,constants,build,return,new,stsassume,role,session,credentials,provider,builder,config,props,get,property,awsconfig,constants,role,arn,config,prefix,config,props,get,property,awsconfig,constants,role,session,name,config,prefix,with,external,id,config,props,get,property,awsconfig,constants,external,id,config,prefix,with,sts,client,base,credentials,build,default,case,auto,return,new,default,awscredentials,provider,chain
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps, ClientConfiguration awsClientConfig);1524053374;Creates an Amazon Kinesis Client._@param configProps configuration properties containing the access key, secret key, and region_@param awsClientConfig preconfigured AWS SDK client configuration_@return a new Amazon Kinesis Client;public static AmazonKinesis createKinesisClient(Properties configProps, ClientConfiguration awsClientConfig) {_		_		awsClientConfig.setUserAgentPrefix(String.format(USER_AGENT_FORMAT,_				EnvironmentInformation.getVersion(),_				EnvironmentInformation.getRevisionInformation().commitId))___		_		AmazonKinesisClientBuilder builder = AmazonKinesisClientBuilder.standard()_				.withCredentials(AWSUtil.getCredentialsProvider(configProps))_				.withClientConfiguration(awsClientConfig)_				.withRegion(Regions.fromName(configProps.getProperty(AWSConfigConstants.AWS_REGION)))___		if (configProps.containsKey(AWSConfigConstants.AWS_ENDPOINT)) {_			_			builder.withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(_													configProps.getProperty(AWSConfigConstants.AWS_ENDPOINT),_													null))__		}_		return builder.build()__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,param,aws,client,config,preconfigured,aws,sdk,client,configuration,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,client,configuration,aws,client,config,aws,client,config,set,user,agent,prefix,string,format,environment,information,get,version,environment,information,get,revision,information,commit,id,amazon,kinesis,client,builder,builder,amazon,kinesis,client,builder,standard,with,credentials,awsutil,get,credentials,provider,config,props,with,client,configuration,aws,client,config,with,region,regions,from,name,config,props,get,property,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,builder,with,endpoint,configuration,new,aws,client,builder,endpoint,configuration,config,props,get,property,awsconfig,constants,null,return,builder,build
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps, ClientConfiguration awsClientConfig);1525262671;Creates an Amazon Kinesis Client._@param configProps configuration properties containing the access key, secret key, and region_@param awsClientConfig preconfigured AWS SDK client configuration_@return a new Amazon Kinesis Client;public static AmazonKinesis createKinesisClient(Properties configProps, ClientConfiguration awsClientConfig) {_		_		awsClientConfig.setUserAgentPrefix(String.format(USER_AGENT_FORMAT,_				EnvironmentInformation.getVersion(),_				EnvironmentInformation.getRevisionInformation().commitId))___		_		AmazonKinesisClientBuilder builder = AmazonKinesisClientBuilder.standard()_				.withCredentials(AWSUtil.getCredentialsProvider(configProps))_				.withClientConfiguration(awsClientConfig)_				.withRegion(Regions.fromName(configProps.getProperty(AWSConfigConstants.AWS_REGION)))___		if (configProps.containsKey(AWSConfigConstants.AWS_ENDPOINT)) {_			_			builder.withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(_													configProps.getProperty(AWSConfigConstants.AWS_ENDPOINT),_													null))__		}_		return builder.build()__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,param,aws,client,config,preconfigured,aws,sdk,client,configuration,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,client,configuration,aws,client,config,aws,client,config,set,user,agent,prefix,string,format,environment,information,get,version,environment,information,get,revision,information,commit,id,amazon,kinesis,client,builder,builder,amazon,kinesis,client,builder,standard,with,credentials,awsutil,get,credentials,provider,config,props,with,client,configuration,aws,client,config,with,region,regions,from,name,config,props,get,property,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,builder,with,endpoint,configuration,new,aws,client,builder,endpoint,configuration,config,props,get,property,awsconfig,constants,null,return,builder,build
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps, ClientConfiguration awsClientConfig);1527029910;Creates an Amazon Kinesis Client._@param configProps configuration properties containing the access key, secret key, and region_@param awsClientConfig preconfigured AWS SDK client configuration_@return a new Amazon Kinesis Client;public static AmazonKinesis createKinesisClient(Properties configProps, ClientConfiguration awsClientConfig) {_		_		awsClientConfig.setUserAgentPrefix(String.format(USER_AGENT_FORMAT,_				EnvironmentInformation.getVersion(),_				EnvironmentInformation.getRevisionInformation().commitId))___		_		AmazonKinesisClientBuilder builder = AmazonKinesisClientBuilder.standard()_				.withCredentials(AWSUtil.getCredentialsProvider(configProps))_				.withClientConfiguration(awsClientConfig)___		if (configProps.containsKey(AWSConfigConstants.AWS_ENDPOINT)) {_			_			builder.withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(_													configProps.getProperty(AWSConfigConstants.AWS_ENDPOINT),_													null))__		} else {_			builder.withRegion(Regions.fromName(configProps.getProperty(AWSConfigConstants.AWS_REGION)))__		}_		return builder.build()__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,param,aws,client,config,preconfigured,aws,sdk,client,configuration,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,client,configuration,aws,client,config,aws,client,config,set,user,agent,prefix,string,format,environment,information,get,version,environment,information,get,revision,information,commit,id,amazon,kinesis,client,builder,builder,amazon,kinesis,client,builder,standard,with,credentials,awsutil,get,credentials,provider,config,props,with,client,configuration,aws,client,config,if,config,props,contains,key,awsconfig,constants,builder,with,endpoint,configuration,new,aws,client,builder,endpoint,configuration,config,props,get,property,awsconfig,constants,null,else,builder,with,region,regions,from,name,config,props,get,property,awsconfig,constants,return,builder,build
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps, ClientConfiguration awsClientConfig);1530683488;Creates an Amazon Kinesis Client._@param configProps configuration properties containing the access key, secret key, and region_@param awsClientConfig preconfigured AWS SDK client configuration_@return a new Amazon Kinesis Client;public static AmazonKinesis createKinesisClient(Properties configProps, ClientConfiguration awsClientConfig) {_		_		awsClientConfig.setUserAgentPrefix(String.format(USER_AGENT_FORMAT,_				EnvironmentInformation.getVersion(),_				EnvironmentInformation.getRevisionInformation().commitId))___		_		AmazonKinesisClientBuilder builder = AmazonKinesisClientBuilder.standard()_				.withCredentials(AWSUtil.getCredentialsProvider(configProps))_				.withClientConfiguration(awsClientConfig)___		if (configProps.containsKey(AWSConfigConstants.AWS_ENDPOINT)) {_			_			builder.withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(_													configProps.getProperty(AWSConfigConstants.AWS_ENDPOINT),_													null))__		} else {_			builder.withRegion(Regions.fromName(configProps.getProperty(AWSConfigConstants.AWS_REGION)))__		}_		return builder.build()__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,param,aws,client,config,preconfigured,aws,sdk,client,configuration,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,client,configuration,aws,client,config,aws,client,config,set,user,agent,prefix,string,format,environment,information,get,version,environment,information,get,revision,information,commit,id,amazon,kinesis,client,builder,builder,amazon,kinesis,client,builder,standard,with,credentials,awsutil,get,credentials,provider,config,props,with,client,configuration,aws,client,config,if,config,props,contains,key,awsconfig,constants,builder,with,endpoint,configuration,new,aws,client,builder,endpoint,configuration,config,props,get,property,awsconfig,constants,null,else,builder,with,region,regions,from,name,config,props,get,property,awsconfig,constants,return,builder,build
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps, ClientConfiguration awsClientConfig);1533129233;Creates an Amazon Kinesis Client._@param configProps configuration properties containing the access key, secret key, and region_@param awsClientConfig preconfigured AWS SDK client configuration_@return a new Amazon Kinesis Client;public static AmazonKinesis createKinesisClient(Properties configProps, ClientConfiguration awsClientConfig) {_		_		awsClientConfig.setUserAgentPrefix(String.format(USER_AGENT_FORMAT,_				EnvironmentInformation.getVersion(),_				EnvironmentInformation.getRevisionInformation().commitId))___		_		AmazonKinesisClientBuilder builder = AmazonKinesisClientBuilder.standard()_				.withCredentials(AWSUtil.getCredentialsProvider(configProps))_				.withClientConfiguration(awsClientConfig)___		if (configProps.containsKey(AWSConfigConstants.AWS_ENDPOINT)) {_			_			builder.withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(_													configProps.getProperty(AWSConfigConstants.AWS_ENDPOINT),_													null))__		} else {_			builder.withRegion(Regions.fromName(configProps.getProperty(AWSConfigConstants.AWS_REGION)))__		}_		return builder.build()__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,param,aws,client,config,preconfigured,aws,sdk,client,configuration,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,client,configuration,aws,client,config,aws,client,config,set,user,agent,prefix,string,format,environment,information,get,version,environment,information,get,revision,information,commit,id,amazon,kinesis,client,builder,builder,amazon,kinesis,client,builder,standard,with,credentials,awsutil,get,credentials,provider,config,props,with,client,configuration,aws,client,config,if,config,props,contains,key,awsconfig,constants,builder,with,endpoint,configuration,new,aws,client,builder,endpoint,configuration,config,props,get,property,awsconfig,constants,null,else,builder,with,region,regions,from,name,config,props,get,property,awsconfig,constants,return,builder,build
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps);1515757408;Creates an AmazonKinesis client._@param configProps configuration properties containing the access key, secret key, and region_@return a new AmazonKinesis client;public static AmazonKinesis createKinesisClient(Properties configProps) {_		_		ClientConfiguration awsClientConfig = new ClientConfigurationFactory().getConfig()_				.withUserAgentPrefix(String.format(USER_AGENT_FORMAT,_														EnvironmentInformation.getVersion(),_														EnvironmentInformation.getRevisionInformation().commitId))___		_		AmazonKinesisClientBuilder builder = AmazonKinesisClientBuilder.standard()_				.withCredentials(AWSUtil.getCredentialsProvider(configProps))_				.withClientConfiguration(awsClientConfig)_				.withRegion(Regions.fromName(configProps.getProperty(AWSConfigConstants.AWS_REGION)))___		if (configProps.containsKey(AWSConfigConstants.AWS_ENDPOINT)) {_			_			builder.withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(_													configProps.getProperty(AWSConfigConstants.AWS_ENDPOINT),_													null))__		}_		return builder.build()__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,client,configuration,aws,client,config,new,client,configuration,factory,get,config,with,user,agent,prefix,string,format,environment,information,get,version,environment,information,get,revision,information,commit,id,amazon,kinesis,client,builder,builder,amazon,kinesis,client,builder,standard,with,credentials,awsutil,get,credentials,provider,config,props,with,client,configuration,aws,client,config,with,region,regions,from,name,config,props,get,property,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,builder,with,endpoint,configuration,new,aws,client,builder,endpoint,configuration,config,props,get,property,awsconfig,constants,null,return,builder,build
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps);1515757408;Creates an AmazonKinesis client._@param configProps configuration properties containing the access key, secret key, and region_@return a new AmazonKinesis client;public static AmazonKinesis createKinesisClient(Properties configProps) {_		_		ClientConfiguration awsClientConfig = new ClientConfigurationFactory().getConfig()_				.withUserAgentPrefix(String.format(USER_AGENT_FORMAT,_														EnvironmentInformation.getVersion(),_														EnvironmentInformation.getRevisionInformation().commitId))___		_		AmazonKinesisClientBuilder builder = AmazonKinesisClientBuilder.standard()_				.withCredentials(AWSUtil.getCredentialsProvider(configProps))_				.withClientConfiguration(awsClientConfig)_				.withRegion(Regions.fromName(configProps.getProperty(AWSConfigConstants.AWS_REGION)))___		if (configProps.containsKey(AWSConfigConstants.AWS_ENDPOINT)) {_			_			builder.withEndpointConfiguration(new AwsClientBuilder.EndpointConfiguration(_													configProps.getProperty(AWSConfigConstants.AWS_ENDPOINT),_													null))__		}_		return builder.build()__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,client,configuration,aws,client,config,new,client,configuration,factory,get,config,with,user,agent,prefix,string,format,environment,information,get,version,environment,information,get,revision,information,commit,id,amazon,kinesis,client,builder,builder,amazon,kinesis,client,builder,standard,with,credentials,awsutil,get,credentials,provider,config,props,with,client,configuration,aws,client,config,with,region,regions,from,name,config,props,get,property,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,builder,with,endpoint,configuration,new,aws,client,builder,endpoint,configuration,config,props,get,property,awsconfig,constants,null,return,builder,build
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps);1524053374;Creates an AmazonKinesis client._@param configProps configuration properties containing the access key, secret key, and region_@return a new AmazonKinesis client;public static AmazonKinesis createKinesisClient(Properties configProps) {_		return createKinesisClient(configProps, new ClientConfigurationFactory().getConfig())__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,return,create,kinesis,client,config,props,new,client,configuration,factory,get,config
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps);1525262671;Creates an AmazonKinesis client._@param configProps configuration properties containing the access key, secret key, and region_@return a new AmazonKinesis client;public static AmazonKinesis createKinesisClient(Properties configProps) {_		return createKinesisClient(configProps, new ClientConfigurationFactory().getConfig())__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,return,create,kinesis,client,config,props,new,client,configuration,factory,get,config
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps);1527029910;Creates an AmazonKinesis client._@param configProps configuration properties containing the access key, secret key, and region_@return a new AmazonKinesis client;public static AmazonKinesis createKinesisClient(Properties configProps) {_		return createKinesisClient(configProps, new ClientConfigurationFactory().getConfig())__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,return,create,kinesis,client,config,props,new,client,configuration,factory,get,config
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps);1530683488;Creates an AmazonKinesis client._@param configProps configuration properties containing the access key, secret key, and region_@return a new AmazonKinesis client;public static AmazonKinesis createKinesisClient(Properties configProps) {_		return createKinesisClient(configProps, new ClientConfigurationFactory().getConfig())__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,return,create,kinesis,client,config,props,new,client,configuration,factory,get,config
AWSUtil -> public static AmazonKinesis createKinesisClient(Properties configProps);1533129233;Creates an AmazonKinesis client._@param configProps configuration properties containing the access key, secret key, and region_@return a new AmazonKinesis client;public static AmazonKinesis createKinesisClient(Properties configProps) {_		return createKinesisClient(configProps, new ClientConfigurationFactory().getConfig())__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,create,kinesis,client,properties,config,props,return,create,kinesis,client,config,props,new,client,configuration,factory,get,config
AWSUtil -> public static boolean isValidRegion(String region);1480685315;Checks whether or not a region ID is valid__@param region The AWS region ID to check_@return true if the supplied region ID is valid, false otherwise;public static boolean isValidRegion(String region) {_		try {_			Regions.fromName(region.toLowerCase())__		} catch (IllegalArgumentException e) {_			return false__		}_		return true__	};checks,whether,or,not,a,region,id,is,valid,param,region,the,aws,region,id,to,check,return,true,if,the,supplied,region,id,is,valid,false,otherwise;public,static,boolean,is,valid,region,string,region,try,regions,from,name,region,to,lower,case,catch,illegal,argument,exception,e,return,false,return,true
AWSUtil -> public static boolean isValidRegion(String region);1481810673;Checks whether or not a region ID is valid__@param region The AWS region ID to check_@return true if the supplied region ID is valid, false otherwise;public static boolean isValidRegion(String region) {_		try {_			Regions.fromName(region.toLowerCase())__		} catch (IllegalArgumentException e) {_			return false__		}_		return true__	};checks,whether,or,not,a,region,id,is,valid,param,region,the,aws,region,id,to,check,return,true,if,the,supplied,region,id,is,valid,false,otherwise;public,static,boolean,is,valid,region,string,region,try,regions,from,name,region,to,lower,case,catch,illegal,argument,exception,e,return,false,return,true
AWSUtil -> public static boolean isValidRegion(String region);1495923079;Checks whether or not a region ID is valid.__@param region The AWS region ID to check_@return true if the supplied region ID is valid, false otherwise;public static boolean isValidRegion(String region) {_		try {_			Regions.fromName(region.toLowerCase())__		} catch (IllegalArgumentException e) {_			return false__		}_		return true__	};checks,whether,or,not,a,region,id,is,valid,param,region,the,aws,region,id,to,check,return,true,if,the,supplied,region,id,is,valid,false,otherwise;public,static,boolean,is,valid,region,string,region,try,regions,from,name,region,to,lower,case,catch,illegal,argument,exception,e,return,false,return,true
AWSUtil -> public static boolean isValidRegion(String region);1515757408;Checks whether or not a region ID is valid.__@param region The AWS region ID to check_@return true if the supplied region ID is valid, false otherwise;public static boolean isValidRegion(String region) {_		try {_			Regions.fromName(region.toLowerCase())__		} catch (IllegalArgumentException e) {_			return false__		}_		return true__	};checks,whether,or,not,a,region,id,is,valid,param,region,the,aws,region,id,to,check,return,true,if,the,supplied,region,id,is,valid,false,otherwise;public,static,boolean,is,valid,region,string,region,try,regions,from,name,region,to,lower,case,catch,illegal,argument,exception,e,return,false,return,true
AWSUtil -> public static boolean isValidRegion(String region);1515757408;Checks whether or not a region ID is valid.__@param region The AWS region ID to check_@return true if the supplied region ID is valid, false otherwise;public static boolean isValidRegion(String region) {_		try {_			Regions.fromName(region.toLowerCase())__		} catch (IllegalArgumentException e) {_			return false__		}_		return true__	};checks,whether,or,not,a,region,id,is,valid,param,region,the,aws,region,id,to,check,return,true,if,the,supplied,region,id,is,valid,false,otherwise;public,static,boolean,is,valid,region,string,region,try,regions,from,name,region,to,lower,case,catch,illegal,argument,exception,e,return,false,return,true
AWSUtil -> public static boolean isValidRegion(String region);1524053374;Checks whether or not a region ID is valid.__@param region The AWS region ID to check_@return true if the supplied region ID is valid, false otherwise;public static boolean isValidRegion(String region) {_		try {_			Regions.fromName(region.toLowerCase())__		} catch (IllegalArgumentException e) {_			return false__		}_		return true__	};checks,whether,or,not,a,region,id,is,valid,param,region,the,aws,region,id,to,check,return,true,if,the,supplied,region,id,is,valid,false,otherwise;public,static,boolean,is,valid,region,string,region,try,regions,from,name,region,to,lower,case,catch,illegal,argument,exception,e,return,false,return,true
AWSUtil -> public static boolean isValidRegion(String region);1525262671;Checks whether or not a region ID is valid.__@param region The AWS region ID to check_@return true if the supplied region ID is valid, false otherwise;public static boolean isValidRegion(String region) {_		try {_			Regions.fromName(region.toLowerCase())__		} catch (IllegalArgumentException e) {_			return false__		}_		return true__	};checks,whether,or,not,a,region,id,is,valid,param,region,the,aws,region,id,to,check,return,true,if,the,supplied,region,id,is,valid,false,otherwise;public,static,boolean,is,valid,region,string,region,try,regions,from,name,region,to,lower,case,catch,illegal,argument,exception,e,return,false,return,true
AWSUtil -> public static boolean isValidRegion(String region);1527029910;Checks whether or not a region ID is valid.__@param region The AWS region ID to check_@return true if the supplied region ID is valid, false otherwise;public static boolean isValidRegion(String region) {_		try {_			Regions.fromName(region.toLowerCase())__		} catch (IllegalArgumentException e) {_			return false__		}_		return true__	};checks,whether,or,not,a,region,id,is,valid,param,region,the,aws,region,id,to,check,return,true,if,the,supplied,region,id,is,valid,false,otherwise;public,static,boolean,is,valid,region,string,region,try,regions,from,name,region,to,lower,case,catch,illegal,argument,exception,e,return,false,return,true
AWSUtil -> public static boolean isValidRegion(String region);1530683488;Checks whether or not a region ID is valid.__@param region The AWS region ID to check_@return true if the supplied region ID is valid, false otherwise;public static boolean isValidRegion(String region) {_		try {_			Regions.fromName(region.toLowerCase())__		} catch (IllegalArgumentException e) {_			return false__		}_		return true__	};checks,whether,or,not,a,region,id,is,valid,param,region,the,aws,region,id,to,check,return,true,if,the,supplied,region,id,is,valid,false,otherwise;public,static,boolean,is,valid,region,string,region,try,regions,from,name,region,to,lower,case,catch,illegal,argument,exception,e,return,false,return,true
AWSUtil -> public static boolean isValidRegion(String region);1533129233;Checks whether or not a region ID is valid.__@param region The AWS region ID to check_@return true if the supplied region ID is valid, false otherwise;public static boolean isValidRegion(String region) {_		try {_			Regions.fromName(region.toLowerCase())__		} catch (IllegalArgumentException e) {_			return false__		}_		return true__	};checks,whether,or,not,a,region,id,is,valid,param,region,the,aws,region,id,to,check,return,true,if,the,supplied,region,id,is,valid,false,otherwise;public,static,boolean,is,valid,region,string,region,try,regions,from,name,region,to,lower,case,catch,illegal,argument,exception,e,return,false,return,true
AWSUtil -> public static AmazonKinesisClient createKinesisClient(Properties configProps);1480685315;Creates an Amazon Kinesis Client._@param configProps configuration properties containing the access key, secret key, and region_@return a new Amazon Kinesis Client;public static AmazonKinesisClient createKinesisClient(Properties configProps) {_		_		ClientConfiguration awsClientConfig = new ClientConfigurationFactory().getConfig()__		awsClientConfig.setUserAgent("Apache Flink " + EnvironmentInformation.getVersion() +_			" (" + EnvironmentInformation.getRevisionInformation().commitId + ") Kinesis Connector")___		_		AmazonKinesisClient client = new AmazonKinesisClient(_			AWSUtil.getCredentialsProvider(configProps), awsClientConfig)___		client.setRegion(Region.getRegion(Regions.fromName(configProps.getProperty(AWSConfigConstants.AWS_REGION))))__		if (configProps.containsKey(AWSConfigConstants.AWS_ENDPOINT)) {_			client.setEndpoint(configProps.getProperty(AWSConfigConstants.AWS_ENDPOINT))__		}_		return client__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,client,create,kinesis,client,properties,config,props,client,configuration,aws,client,config,new,client,configuration,factory,get,config,aws,client,config,set,user,agent,apache,flink,environment,information,get,version,environment,information,get,revision,information,commit,id,kinesis,connector,amazon,kinesis,client,client,new,amazon,kinesis,client,awsutil,get,credentials,provider,config,props,aws,client,config,client,set,region,region,get,region,regions,from,name,config,props,get,property,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,client,set,endpoint,config,props,get,property,awsconfig,constants,return,client
AWSUtil -> public static AmazonKinesisClient createKinesisClient(Properties configProps);1481810673;Creates an Amazon Kinesis Client._@param configProps configuration properties containing the access key, secret key, and region_@return a new Amazon Kinesis Client;public static AmazonKinesisClient createKinesisClient(Properties configProps) {_		_		ClientConfiguration awsClientConfig = new ClientConfigurationFactory().getConfig()__		awsClientConfig.setUserAgent("Apache Flink " + EnvironmentInformation.getVersion() +_			" (" + EnvironmentInformation.getRevisionInformation().commitId + ") Kinesis Connector")___		_		AmazonKinesisClient client = new AmazonKinesisClient(_			AWSUtil.getCredentialsProvider(configProps), awsClientConfig)___		client.setRegion(Region.getRegion(Regions.fromName(configProps.getProperty(AWSConfigConstants.AWS_REGION))))__		if (configProps.containsKey(AWSConfigConstants.AWS_ENDPOINT)) {_			client.setEndpoint(configProps.getProperty(AWSConfigConstants.AWS_ENDPOINT))__		}_		return client__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,client,create,kinesis,client,properties,config,props,client,configuration,aws,client,config,new,client,configuration,factory,get,config,aws,client,config,set,user,agent,apache,flink,environment,information,get,version,environment,information,get,revision,information,commit,id,kinesis,connector,amazon,kinesis,client,client,new,amazon,kinesis,client,awsutil,get,credentials,provider,config,props,aws,client,config,client,set,region,region,get,region,regions,from,name,config,props,get,property,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,client,set,endpoint,config,props,get,property,awsconfig,constants,return,client
AWSUtil -> public static AmazonKinesisClient createKinesisClient(Properties configProps);1495923079;Creates an Amazon Kinesis Client._@param configProps configuration properties containing the access key, secret key, and region_@return a new Amazon Kinesis Client;public static AmazonKinesisClient createKinesisClient(Properties configProps) {_		_		ClientConfiguration awsClientConfig = new ClientConfigurationFactory().getConfig()__		awsClientConfig.setUserAgent("Apache Flink " + EnvironmentInformation.getVersion() +_			" (" + EnvironmentInformation.getRevisionInformation().commitId + ") Kinesis Connector")___		_		AmazonKinesisClient client = new AmazonKinesisClient(_			AWSUtil.getCredentialsProvider(configProps), awsClientConfig)___		client.setRegion(Region.getRegion(Regions.fromName(configProps.getProperty(AWSConfigConstants.AWS_REGION))))__		if (configProps.containsKey(AWSConfigConstants.AWS_ENDPOINT)) {_			client.setEndpoint(configProps.getProperty(AWSConfigConstants.AWS_ENDPOINT))__		}_		return client__	};creates,an,amazon,kinesis,client,param,config,props,configuration,properties,containing,the,access,key,secret,key,and,region,return,a,new,amazon,kinesis,client;public,static,amazon,kinesis,client,create,kinesis,client,properties,config,props,client,configuration,aws,client,config,new,client,configuration,factory,get,config,aws,client,config,set,user,agent,apache,flink,environment,information,get,version,environment,information,get,revision,information,commit,id,kinesis,connector,amazon,kinesis,client,client,new,amazon,kinesis,client,awsutil,get,credentials,provider,config,props,aws,client,config,client,set,region,region,get,region,regions,from,name,config,props,get,property,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,client,set,endpoint,config,props,get,property,awsconfig,constants,return,client
AWSUtil -> public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps);1480685315;Return a {@link AWSCredentialsProvider} instance corresponding to the configuration properties.__@param configProps the configuration properties_@return The corresponding AWS Credentials Provider instance;public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps) {_		CredentialProvider credentialProviderType = CredentialProvider.valueOf(configProps.getProperty(_			AWSConfigConstants.AWS_CREDENTIALS_PROVIDER, CredentialProvider.BASIC.toString()))___		AWSCredentialsProvider credentialsProvider___		switch (credentialProviderType) {_			case ENV_VAR:_				credentialsProvider = new EnvironmentVariableCredentialsProvider()__				break__			case SYS_PROP:_				credentialsProvider = new SystemPropertiesCredentialsProvider()__				break__			case PROFILE:_				String profileName = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_NAME, null)__				String profileConfigPath = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_PATH, null)__				credentialsProvider = (profileConfigPath == null)_					? new ProfileCredentialsProvider(profileName)_					: new ProfileCredentialsProvider(profileConfigPath, profileName)__				break__			case AUTO:_				credentialsProvider = new DefaultAWSCredentialsProviderChain()__				break__			default:_			case BASIC:_				credentialsProvider = new AWSCredentialsProvider() {_					@Override_					public AWSCredentials getCredentials() {_						return new BasicAWSCredentials(_							configProps.getProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID),_							configProps.getProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY))__					}__					@Override_					public void refresh() {_						_					}_				}__		}__		return credentialsProvider__	};return,a,link,awscredentials,provider,instance,corresponding,to,the,configuration,properties,param,config,props,the,configuration,properties,return,the,corresponding,aws,credentials,provider,instance;public,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,credential,provider,credential,provider,type,credential,provider,value,of,config,props,get,property,awsconfig,constants,credential,provider,basic,to,string,awscredentials,provider,credentials,provider,switch,credential,provider,type,case,credentials,provider,new,environment,variable,credentials,provider,break,case,credentials,provider,new,system,properties,credentials,provider,break,case,profile,string,profile,name,config,props,get,property,awsconfig,constants,null,string,profile,config,path,config,props,get,property,awsconfig,constants,null,credentials,provider,profile,config,path,null,new,profile,credentials,provider,profile,name,new,profile,credentials,provider,profile,config,path,profile,name,break,case,auto,credentials,provider,new,default,awscredentials,provider,chain,break,default,case,basic,credentials,provider,new,awscredentials,provider,override,public,awscredentials,get,credentials,return,new,basic,awscredentials,config,props,get,property,awsconfig,constants,config,props,get,property,awsconfig,constants,override,public,void,refresh,return,credentials,provider
AWSUtil -> public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps);1481810673;Return a {@link AWSCredentialsProvider} instance corresponding to the configuration properties.__@param configProps the configuration properties_@return The corresponding AWS Credentials Provider instance;public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps) {_		CredentialProvider credentialProviderType__		if (!configProps.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			if (configProps.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_				&& configProps.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_				_				credentialProviderType = CredentialProvider.BASIC__			} else {_				_				credentialProviderType = CredentialProvider.AUTO__			}_		} else {_			credentialProviderType = CredentialProvider.valueOf(configProps.getProperty(_				AWSConfigConstants.AWS_CREDENTIALS_PROVIDER))__		}__		AWSCredentialsProvider credentialsProvider___		switch (credentialProviderType) {_			case ENV_VAR:_				credentialsProvider = new EnvironmentVariableCredentialsProvider()__				break__			case SYS_PROP:_				credentialsProvider = new SystemPropertiesCredentialsProvider()__				break__			case PROFILE:_				String profileName = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_NAME, null)__				String profileConfigPath = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_PATH, null)__				credentialsProvider = (profileConfigPath == null)_					? new ProfileCredentialsProvider(profileName)_					: new ProfileCredentialsProvider(profileConfigPath, profileName)__				break__			case BASIC:_				credentialsProvider = new AWSCredentialsProvider() {_					@Override_					public AWSCredentials getCredentials() {_						return new BasicAWSCredentials(_							configProps.getProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID),_							configProps.getProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY))__					}__					@Override_					public void refresh() {_						_					}_				}__				break__			default:_			case AUTO:_				credentialsProvider = new DefaultAWSCredentialsProviderChain()__		}__		return credentialsProvider__	};return,a,link,awscredentials,provider,instance,corresponding,to,the,configuration,properties,param,config,props,the,configuration,properties,return,the,corresponding,aws,credentials,provider,instance;public,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,credential,provider,credential,provider,type,if,config,props,contains,key,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,config,props,contains,key,awsconfig,constants,credential,provider,type,credential,provider,basic,else,credential,provider,type,credential,provider,auto,else,credential,provider,type,credential,provider,value,of,config,props,get,property,awsconfig,constants,awscredentials,provider,credentials,provider,switch,credential,provider,type,case,credentials,provider,new,environment,variable,credentials,provider,break,case,credentials,provider,new,system,properties,credentials,provider,break,case,profile,string,profile,name,config,props,get,property,awsconfig,constants,null,string,profile,config,path,config,props,get,property,awsconfig,constants,null,credentials,provider,profile,config,path,null,new,profile,credentials,provider,profile,name,new,profile,credentials,provider,profile,config,path,profile,name,break,case,basic,credentials,provider,new,awscredentials,provider,override,public,awscredentials,get,credentials,return,new,basic,awscredentials,config,props,get,property,awsconfig,constants,config,props,get,property,awsconfig,constants,override,public,void,refresh,break,default,case,auto,credentials,provider,new,default,awscredentials,provider,chain,return,credentials,provider
AWSUtil -> public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps);1495923079;Return a {@link AWSCredentialsProvider} instance corresponding to the configuration properties.__@param configProps the configuration properties_@return The corresponding AWS Credentials Provider instance;public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps) {_		CredentialProvider credentialProviderType__		if (!configProps.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			if (configProps.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_				&& configProps.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_				_				credentialProviderType = CredentialProvider.BASIC__			} else {_				_				credentialProviderType = CredentialProvider.AUTO__			}_		} else {_			credentialProviderType = CredentialProvider.valueOf(configProps.getProperty(_				AWSConfigConstants.AWS_CREDENTIALS_PROVIDER))__		}__		AWSCredentialsProvider credentialsProvider___		switch (credentialProviderType) {_			case ENV_VAR:_				credentialsProvider = new EnvironmentVariableCredentialsProvider()__				break__			case SYS_PROP:_				credentialsProvider = new SystemPropertiesCredentialsProvider()__				break__			case PROFILE:_				String profileName = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_NAME, null)__				String profileConfigPath = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_PATH, null)__				credentialsProvider = (profileConfigPath == null)_					? new ProfileCredentialsProvider(profileName)_					: new ProfileCredentialsProvider(profileConfigPath, profileName)__				break__			case BASIC:_				credentialsProvider = new AWSCredentialsProvider() {_					@Override_					public AWSCredentials getCredentials() {_						return new BasicAWSCredentials(_							configProps.getProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID),_							configProps.getProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY))__					}__					@Override_					public void refresh() {_						_					}_				}__				break__			default:_			case AUTO:_				credentialsProvider = new DefaultAWSCredentialsProviderChain()__		}__		return credentialsProvider__	};return,a,link,awscredentials,provider,instance,corresponding,to,the,configuration,properties,param,config,props,the,configuration,properties,return,the,corresponding,aws,credentials,provider,instance;public,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,credential,provider,credential,provider,type,if,config,props,contains,key,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,config,props,contains,key,awsconfig,constants,credential,provider,type,credential,provider,basic,else,credential,provider,type,credential,provider,auto,else,credential,provider,type,credential,provider,value,of,config,props,get,property,awsconfig,constants,awscredentials,provider,credentials,provider,switch,credential,provider,type,case,credentials,provider,new,environment,variable,credentials,provider,break,case,credentials,provider,new,system,properties,credentials,provider,break,case,profile,string,profile,name,config,props,get,property,awsconfig,constants,null,string,profile,config,path,config,props,get,property,awsconfig,constants,null,credentials,provider,profile,config,path,null,new,profile,credentials,provider,profile,name,new,profile,credentials,provider,profile,config,path,profile,name,break,case,basic,credentials,provider,new,awscredentials,provider,override,public,awscredentials,get,credentials,return,new,basic,awscredentials,config,props,get,property,awsconfig,constants,config,props,get,property,awsconfig,constants,override,public,void,refresh,break,default,case,auto,credentials,provider,new,default,awscredentials,provider,chain,return,credentials,provider
AWSUtil -> public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps);1515757408;Return a {@link AWSCredentialsProvider} instance corresponding to the configuration properties.__@param configProps the configuration properties_@return The corresponding AWS Credentials Provider instance;public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps) {_		CredentialProvider credentialProviderType__		if (!configProps.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			if (configProps.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_				&& configProps.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_				_				credentialProviderType = CredentialProvider.BASIC__			} else {_				_				credentialProviderType = CredentialProvider.AUTO__			}_		} else {_			credentialProviderType = CredentialProvider.valueOf(configProps.getProperty(_				AWSConfigConstants.AWS_CREDENTIALS_PROVIDER))__		}__		AWSCredentialsProvider credentialsProvider___		switch (credentialProviderType) {_			case ENV_VAR:_				credentialsProvider = new EnvironmentVariableCredentialsProvider()__				break__			case SYS_PROP:_				credentialsProvider = new SystemPropertiesCredentialsProvider()__				break__			case PROFILE:_				String profileName = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_NAME, null)__				String profileConfigPath = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_PATH, null)__				credentialsProvider = (profileConfigPath == null)_					? new ProfileCredentialsProvider(profileName)_					: new ProfileCredentialsProvider(profileConfigPath, profileName)__				break__			case BASIC:_				credentialsProvider = new AWSCredentialsProvider() {_					@Override_					public AWSCredentials getCredentials() {_						return new BasicAWSCredentials(_							configProps.getProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID),_							configProps.getProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY))__					}__					@Override_					public void refresh() {_						_					}_				}__				break__			default:_			case AUTO:_				credentialsProvider = new DefaultAWSCredentialsProviderChain()__		}__		return credentialsProvider__	};return,a,link,awscredentials,provider,instance,corresponding,to,the,configuration,properties,param,config,props,the,configuration,properties,return,the,corresponding,aws,credentials,provider,instance;public,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,credential,provider,credential,provider,type,if,config,props,contains,key,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,config,props,contains,key,awsconfig,constants,credential,provider,type,credential,provider,basic,else,credential,provider,type,credential,provider,auto,else,credential,provider,type,credential,provider,value,of,config,props,get,property,awsconfig,constants,awscredentials,provider,credentials,provider,switch,credential,provider,type,case,credentials,provider,new,environment,variable,credentials,provider,break,case,credentials,provider,new,system,properties,credentials,provider,break,case,profile,string,profile,name,config,props,get,property,awsconfig,constants,null,string,profile,config,path,config,props,get,property,awsconfig,constants,null,credentials,provider,profile,config,path,null,new,profile,credentials,provider,profile,name,new,profile,credentials,provider,profile,config,path,profile,name,break,case,basic,credentials,provider,new,awscredentials,provider,override,public,awscredentials,get,credentials,return,new,basic,awscredentials,config,props,get,property,awsconfig,constants,config,props,get,property,awsconfig,constants,override,public,void,refresh,break,default,case,auto,credentials,provider,new,default,awscredentials,provider,chain,return,credentials,provider
AWSUtil -> public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps);1515757408;Return a {@link AWSCredentialsProvider} instance corresponding to the configuration properties.__@param configProps the configuration properties_@return The corresponding AWS Credentials Provider instance;public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps) {_		CredentialProvider credentialProviderType__		if (!configProps.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			if (configProps.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_				&& configProps.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_				_				credentialProviderType = CredentialProvider.BASIC__			} else {_				_				credentialProviderType = CredentialProvider.AUTO__			}_		} else {_			credentialProviderType = CredentialProvider.valueOf(configProps.getProperty(_				AWSConfigConstants.AWS_CREDENTIALS_PROVIDER))__		}__		AWSCredentialsProvider credentialsProvider___		switch (credentialProviderType) {_			case ENV_VAR:_				credentialsProvider = new EnvironmentVariableCredentialsProvider()__				break__			case SYS_PROP:_				credentialsProvider = new SystemPropertiesCredentialsProvider()__				break__			case PROFILE:_				String profileName = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_NAME, null)__				String profileConfigPath = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_PATH, null)__				credentialsProvider = (profileConfigPath == null)_					? new ProfileCredentialsProvider(profileName)_					: new ProfileCredentialsProvider(profileConfigPath, profileName)__				break__			case BASIC:_				credentialsProvider = new AWSCredentialsProvider() {_					@Override_					public AWSCredentials getCredentials() {_						return new BasicAWSCredentials(_							configProps.getProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID),_							configProps.getProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY))__					}__					@Override_					public void refresh() {_						_					}_				}__				break__			default:_			case AUTO:_				credentialsProvider = new DefaultAWSCredentialsProviderChain()__		}__		return credentialsProvider__	};return,a,link,awscredentials,provider,instance,corresponding,to,the,configuration,properties,param,config,props,the,configuration,properties,return,the,corresponding,aws,credentials,provider,instance;public,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,credential,provider,credential,provider,type,if,config,props,contains,key,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,config,props,contains,key,awsconfig,constants,credential,provider,type,credential,provider,basic,else,credential,provider,type,credential,provider,auto,else,credential,provider,type,credential,provider,value,of,config,props,get,property,awsconfig,constants,awscredentials,provider,credentials,provider,switch,credential,provider,type,case,credentials,provider,new,environment,variable,credentials,provider,break,case,credentials,provider,new,system,properties,credentials,provider,break,case,profile,string,profile,name,config,props,get,property,awsconfig,constants,null,string,profile,config,path,config,props,get,property,awsconfig,constants,null,credentials,provider,profile,config,path,null,new,profile,credentials,provider,profile,name,new,profile,credentials,provider,profile,config,path,profile,name,break,case,basic,credentials,provider,new,awscredentials,provider,override,public,awscredentials,get,credentials,return,new,basic,awscredentials,config,props,get,property,awsconfig,constants,config,props,get,property,awsconfig,constants,override,public,void,refresh,break,default,case,auto,credentials,provider,new,default,awscredentials,provider,chain,return,credentials,provider
AWSUtil -> public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps);1524053374;Return a {@link AWSCredentialsProvider} instance corresponding to the configuration properties.__@param configProps the configuration properties_@return The corresponding AWS Credentials Provider instance;public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps) {_		CredentialProvider credentialProviderType__		if (!configProps.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			if (configProps.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_				&& configProps.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_				_				credentialProviderType = CredentialProvider.BASIC__			} else {_				_				credentialProviderType = CredentialProvider.AUTO__			}_		} else {_			credentialProviderType = CredentialProvider.valueOf(configProps.getProperty(_				AWSConfigConstants.AWS_CREDENTIALS_PROVIDER))__		}__		AWSCredentialsProvider credentialsProvider___		switch (credentialProviderType) {_			case ENV_VAR:_				credentialsProvider = new EnvironmentVariableCredentialsProvider()__				break__			case SYS_PROP:_				credentialsProvider = new SystemPropertiesCredentialsProvider()__				break__			case PROFILE:_				String profileName = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_NAME, null)__				String profileConfigPath = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_PATH, null)__				credentialsProvider = (profileConfigPath == null)_					? new ProfileCredentialsProvider(profileName)_					: new ProfileCredentialsProvider(profileConfigPath, profileName)__				break__			case BASIC:_				credentialsProvider = new AWSCredentialsProvider() {_					@Override_					public AWSCredentials getCredentials() {_						return new BasicAWSCredentials(_							configProps.getProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID),_							configProps.getProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY))__					}__					@Override_					public void refresh() {_						_					}_				}__				break__			default:_			case AUTO:_				credentialsProvider = new DefaultAWSCredentialsProviderChain()__		}__		return credentialsProvider__	};return,a,link,awscredentials,provider,instance,corresponding,to,the,configuration,properties,param,config,props,the,configuration,properties,return,the,corresponding,aws,credentials,provider,instance;public,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,credential,provider,credential,provider,type,if,config,props,contains,key,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,config,props,contains,key,awsconfig,constants,credential,provider,type,credential,provider,basic,else,credential,provider,type,credential,provider,auto,else,credential,provider,type,credential,provider,value,of,config,props,get,property,awsconfig,constants,awscredentials,provider,credentials,provider,switch,credential,provider,type,case,credentials,provider,new,environment,variable,credentials,provider,break,case,credentials,provider,new,system,properties,credentials,provider,break,case,profile,string,profile,name,config,props,get,property,awsconfig,constants,null,string,profile,config,path,config,props,get,property,awsconfig,constants,null,credentials,provider,profile,config,path,null,new,profile,credentials,provider,profile,name,new,profile,credentials,provider,profile,config,path,profile,name,break,case,basic,credentials,provider,new,awscredentials,provider,override,public,awscredentials,get,credentials,return,new,basic,awscredentials,config,props,get,property,awsconfig,constants,config,props,get,property,awsconfig,constants,override,public,void,refresh,break,default,case,auto,credentials,provider,new,default,awscredentials,provider,chain,return,credentials,provider
AWSUtil -> public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps);1525262671;Return a {@link AWSCredentialsProvider} instance corresponding to the configuration properties.__@param configProps the configuration properties_@return The corresponding AWS Credentials Provider instance;public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps) {_		CredentialProvider credentialProviderType__		if (!configProps.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			if (configProps.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_				&& configProps.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_				_				credentialProviderType = CredentialProvider.BASIC__			} else {_				_				credentialProviderType = CredentialProvider.AUTO__			}_		} else {_			credentialProviderType = CredentialProvider.valueOf(configProps.getProperty(_				AWSConfigConstants.AWS_CREDENTIALS_PROVIDER))__		}__		AWSCredentialsProvider credentialsProvider___		switch (credentialProviderType) {_			case ENV_VAR:_				credentialsProvider = new EnvironmentVariableCredentialsProvider()__				break__			case SYS_PROP:_				credentialsProvider = new SystemPropertiesCredentialsProvider()__				break__			case PROFILE:_				String profileName = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_NAME, null)__				String profileConfigPath = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_PATH, null)__				credentialsProvider = (profileConfigPath == null)_					? new ProfileCredentialsProvider(profileName)_					: new ProfileCredentialsProvider(profileConfigPath, profileName)__				break__			case BASIC:_				credentialsProvider = new AWSCredentialsProvider() {_					@Override_					public AWSCredentials getCredentials() {_						return new BasicAWSCredentials(_							configProps.getProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID),_							configProps.getProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY))__					}__					@Override_					public void refresh() {_						_					}_				}__				break__			default:_			case AUTO:_				credentialsProvider = new DefaultAWSCredentialsProviderChain()__		}__		return credentialsProvider__	};return,a,link,awscredentials,provider,instance,corresponding,to,the,configuration,properties,param,config,props,the,configuration,properties,return,the,corresponding,aws,credentials,provider,instance;public,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,credential,provider,credential,provider,type,if,config,props,contains,key,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,config,props,contains,key,awsconfig,constants,credential,provider,type,credential,provider,basic,else,credential,provider,type,credential,provider,auto,else,credential,provider,type,credential,provider,value,of,config,props,get,property,awsconfig,constants,awscredentials,provider,credentials,provider,switch,credential,provider,type,case,credentials,provider,new,environment,variable,credentials,provider,break,case,credentials,provider,new,system,properties,credentials,provider,break,case,profile,string,profile,name,config,props,get,property,awsconfig,constants,null,string,profile,config,path,config,props,get,property,awsconfig,constants,null,credentials,provider,profile,config,path,null,new,profile,credentials,provider,profile,name,new,profile,credentials,provider,profile,config,path,profile,name,break,case,basic,credentials,provider,new,awscredentials,provider,override,public,awscredentials,get,credentials,return,new,basic,awscredentials,config,props,get,property,awsconfig,constants,config,props,get,property,awsconfig,constants,override,public,void,refresh,break,default,case,auto,credentials,provider,new,default,awscredentials,provider,chain,return,credentials,provider
AWSUtil -> public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps);1527029910;Return a {@link AWSCredentialsProvider} instance corresponding to the configuration properties.__@param configProps the configuration properties_@return The corresponding AWS Credentials Provider instance;public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps) {_		CredentialProvider credentialProviderType__		if (!configProps.containsKey(AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)) {_			if (configProps.containsKey(AWSConfigConstants.AWS_ACCESS_KEY_ID)_				&& configProps.containsKey(AWSConfigConstants.AWS_SECRET_ACCESS_KEY)) {_				_				credentialProviderType = CredentialProvider.BASIC__			} else {_				_				credentialProviderType = CredentialProvider.AUTO__			}_		} else {_			credentialProviderType = CredentialProvider.valueOf(configProps.getProperty(_				AWSConfigConstants.AWS_CREDENTIALS_PROVIDER))__		}__		AWSCredentialsProvider credentialsProvider___		switch (credentialProviderType) {_			case ENV_VAR:_				credentialsProvider = new EnvironmentVariableCredentialsProvider()__				break__			case SYS_PROP:_				credentialsProvider = new SystemPropertiesCredentialsProvider()__				break__			case PROFILE:_				String profileName = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_NAME, null)__				String profileConfigPath = configProps.getProperty(_					AWSConfigConstants.AWS_PROFILE_PATH, null)__				credentialsProvider = (profileConfigPath == null)_					? new ProfileCredentialsProvider(profileName)_					: new ProfileCredentialsProvider(profileConfigPath, profileName)__				break__			case BASIC:_				credentialsProvider = new AWSCredentialsProvider() {_					@Override_					public AWSCredentials getCredentials() {_						return new BasicAWSCredentials(_							configProps.getProperty(AWSConfigConstants.AWS_ACCESS_KEY_ID),_							configProps.getProperty(AWSConfigConstants.AWS_SECRET_ACCESS_KEY))__					}__					@Override_					public void refresh() {_						_					}_				}__				break__			default:_			case AUTO:_				credentialsProvider = new DefaultAWSCredentialsProviderChain()__		}__		return credentialsProvider__	};return,a,link,awscredentials,provider,instance,corresponding,to,the,configuration,properties,param,config,props,the,configuration,properties,return,the,corresponding,aws,credentials,provider,instance;public,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,credential,provider,credential,provider,type,if,config,props,contains,key,awsconfig,constants,if,config,props,contains,key,awsconfig,constants,config,props,contains,key,awsconfig,constants,credential,provider,type,credential,provider,basic,else,credential,provider,type,credential,provider,auto,else,credential,provider,type,credential,provider,value,of,config,props,get,property,awsconfig,constants,awscredentials,provider,credentials,provider,switch,credential,provider,type,case,credentials,provider,new,environment,variable,credentials,provider,break,case,credentials,provider,new,system,properties,credentials,provider,break,case,profile,string,profile,name,config,props,get,property,awsconfig,constants,null,string,profile,config,path,config,props,get,property,awsconfig,constants,null,credentials,provider,profile,config,path,null,new,profile,credentials,provider,profile,name,new,profile,credentials,provider,profile,config,path,profile,name,break,case,basic,credentials,provider,new,awscredentials,provider,override,public,awscredentials,get,credentials,return,new,basic,awscredentials,config,props,get,property,awsconfig,constants,config,props,get,property,awsconfig,constants,override,public,void,refresh,break,default,case,auto,credentials,provider,new,default,awscredentials,provider,chain,return,credentials,provider
AWSUtil -> public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps);1530683488;Return a {@link AWSCredentialsProvider} instance corresponding to the configuration properties.__@param configProps the configuration properties_@return The corresponding AWS Credentials Provider instance;public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps) {_		return getCredentialsProvider(configProps, AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)__	};return,a,link,awscredentials,provider,instance,corresponding,to,the,configuration,properties,param,config,props,the,configuration,properties,return,the,corresponding,aws,credentials,provider,instance;public,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,return,get,credentials,provider,config,props,awsconfig,constants
AWSUtil -> public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps);1533129233;Return a {@link AWSCredentialsProvider} instance corresponding to the configuration properties.__@param configProps the configuration properties_@return The corresponding AWS Credentials Provider instance;public static AWSCredentialsProvider getCredentialsProvider(final Properties configProps) {_		return getCredentialsProvider(configProps, AWSConfigConstants.AWS_CREDENTIALS_PROVIDER)__	};return,a,link,awscredentials,provider,instance,corresponding,to,the,configuration,properties,param,config,props,the,configuration,properties,return,the,corresponding,aws,credentials,provider,instance;public,static,awscredentials,provider,get,credentials,provider,final,properties,config,props,return,get,credentials,provider,config,props,awsconfig,constants
