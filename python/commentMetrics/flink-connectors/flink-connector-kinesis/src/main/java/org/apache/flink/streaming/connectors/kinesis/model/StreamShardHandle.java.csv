# id;timestamp;commentText;codeText;commentWords;codeWords
StreamShardHandle -> public static int compareShardIds(String firstShardId, String secondShardId);1495787238;Utility function to compare two shard ids__@param firstShardId first shard id to compare_@param secondShardId second shard id to compare_@return a value less than 0 if the first shard id is smaller than the second shard id,_or a value larger than 0 the first shard is larger then the second shard id,_or 0 if they are equal;public static int compareShardIds(String firstShardId, String secondShardId) {_		if (!isValidShardId(firstShardId)) {_			throw new IllegalArgumentException("The first shard id has invalid format.")__		}__		if (!isValidShardId(secondShardId)) {_			throw new IllegalArgumentException("The second shard id has invalid format.")__		}__		_		return Long.compare(Long.parseLong(firstShardId.substring(8)), Long.parseLong(secondShardId.substring(8)))__	};utility,function,to,compare,two,shard,ids,param,first,shard,id,first,shard,id,to,compare,param,second,shard,id,second,shard,id,to,compare,return,a,value,less,than,0,if,the,first,shard,id,is,smaller,than,the,second,shard,id,or,a,value,larger,than,0,the,first,shard,is,larger,then,the,second,shard,id,or,0,if,they,are,equal;public,static,int,compare,shard,ids,string,first,shard,id,string,second,shard,id,if,is,valid,shard,id,first,shard,id,throw,new,illegal,argument,exception,the,first,shard,id,has,invalid,format,if,is,valid,shard,id,second,shard,id,throw,new,illegal,argument,exception,the,second,shard,id,has,invalid,format,return,long,compare,long,parse,long,first,shard,id,substring,8,long,parse,long,second,shard,id,substring,8
StreamShardHandle -> public static int compareShardIds(String firstShardId, String secondShardId);1495923079;Utility function to compare two shard ids.__@param firstShardId first shard id to compare_@param secondShardId second shard id to compare_@return a value less than 0 if the first shard id is smaller than the second shard id,_or a value larger than 0 the first shard is larger then the second shard id,_or 0 if they are equal;public static int compareShardIds(String firstShardId, String secondShardId) {_		if (!isValidShardId(firstShardId)) {_			throw new IllegalArgumentException("The first shard id has invalid format.")__		}__		if (!isValidShardId(secondShardId)) {_			throw new IllegalArgumentException("The second shard id has invalid format.")__		}__		_		return Long.compare(Long.parseLong(firstShardId.substring(8)), Long.parseLong(secondShardId.substring(8)))__	};utility,function,to,compare,two,shard,ids,param,first,shard,id,first,shard,id,to,compare,param,second,shard,id,second,shard,id,to,compare,return,a,value,less,than,0,if,the,first,shard,id,is,smaller,than,the,second,shard,id,or,a,value,larger,than,0,the,first,shard,is,larger,then,the,second,shard,id,or,0,if,they,are,equal;public,static,int,compare,shard,ids,string,first,shard,id,string,second,shard,id,if,is,valid,shard,id,first,shard,id,throw,new,illegal,argument,exception,the,first,shard,id,has,invalid,format,if,is,valid,shard,id,second,shard,id,throw,new,illegal,argument,exception,the,second,shard,id,has,invalid,format,return,long,compare,long,parse,long,first,shard,id,substring,8,long,parse,long,second,shard,id,substring,8
StreamShardHandle -> public static int compareShardIds(String firstShardId, String secondShardId);1515757408;Utility function to compare two shard ids.__@param firstShardId first shard id to compare_@param secondShardId second shard id to compare_@return a value less than 0 if the first shard id is smaller than the second shard id,_or a value larger than 0 the first shard is larger then the second shard id,_or 0 if they are equal;public static int compareShardIds(String firstShardId, String secondShardId) {_		if (!isValidShardId(firstShardId)) {_			throw new IllegalArgumentException("The first shard id has invalid format.")__		}__		if (!isValidShardId(secondShardId)) {_			throw new IllegalArgumentException("The second shard id has invalid format.")__		}__		_		return Long.compare(Long.parseLong(firstShardId.substring(8)), Long.parseLong(secondShardId.substring(8)))__	};utility,function,to,compare,two,shard,ids,param,first,shard,id,first,shard,id,to,compare,param,second,shard,id,second,shard,id,to,compare,return,a,value,less,than,0,if,the,first,shard,id,is,smaller,than,the,second,shard,id,or,a,value,larger,than,0,the,first,shard,is,larger,then,the,second,shard,id,or,0,if,they,are,equal;public,static,int,compare,shard,ids,string,first,shard,id,string,second,shard,id,if,is,valid,shard,id,first,shard,id,throw,new,illegal,argument,exception,the,first,shard,id,has,invalid,format,if,is,valid,shard,id,second,shard,id,throw,new,illegal,argument,exception,the,second,shard,id,has,invalid,format,return,long,compare,long,parse,long,first,shard,id,substring,8,long,parse,long,second,shard,id,substring,8
StreamShardHandle -> public static int compareShardIds(String firstShardId, String secondShardId);1549739849;Utility function to compare two shard ids.__@param firstShardId first shard id to compare_@param secondShardId second shard id to compare_@return a value less than 0 if the first shard id is smaller than the second shard id,_or a value larger than 0 the first shard is larger then the second shard id,_or 0 if they are equal;public static int compareShardIds(String firstShardId, String secondShardId) {_		return firstShardId.compareTo(secondShardId)__	};utility,function,to,compare,two,shard,ids,param,first,shard,id,first,shard,id,to,compare,param,second,shard,id,second,shard,id,to,compare,return,a,value,less,than,0,if,the,first,shard,id,is,smaller,than,the,second,shard,id,or,a,value,larger,than,0,the,first,shard,is,larger,then,the,second,shard,id,or,0,if,they,are,equal;public,static,int,compare,shard,ids,string,first,shard,id,string,second,shard,id,return,first,shard,id,compare,to,second,shard,id
StreamShardHandle -> public static int compareShardIds(String firstShardId, String secondShardId);1550567875;Utility function to compare two shard ids.__@param firstShardId first shard id to compare_@param secondShardId second shard id to compare_@return a value less than 0 if the first shard id is smaller than the second shard id,_or a value larger than 0 the first shard is larger than the second shard id,_or 0 if they are equal;public static int compareShardIds(String firstShardId, String secondShardId) {_		return firstShardId.compareTo(secondShardId)__	};utility,function,to,compare,two,shard,ids,param,first,shard,id,first,shard,id,to,compare,param,second,shard,id,second,shard,id,to,compare,return,a,value,less,than,0,if,the,first,shard,id,is,smaller,than,the,second,shard,id,or,a,value,larger,than,0,the,first,shard,is,larger,than,the,second,shard,id,or,0,if,they,are,equal;public,static,int,compare,shard,ids,string,first,shard,id,string,second,shard,id,return,first,shard,id,compare,to,second,shard,id
StreamShardHandle -> public static boolean isValidShardId(String shardId);1495787238;Checks if a shard id has valid format._Kinesis stream shard ids have 12-digit numbers left-padded with 0's,_prefixed with "shardId-", ex. "shardId-000000000015".__@param shardId the shard id to check_@return whether the shard id is valid;public static boolean isValidShardId(String shardId) {_		if (shardId == null) { return false_ }_		return shardId.matches("^shardId-\\d{12}")__	};checks,if,a,shard,id,has,valid,format,kinesis,stream,shard,ids,have,12,digit,numbers,left,padded,with,0,s,prefixed,with,shard,id,ex,shard,id,000000000015,param,shard,id,the,shard,id,to,check,return,whether,the,shard,id,is,valid;public,static,boolean,is,valid,shard,id,string,shard,id,if,shard,id,null,return,false,return,shard,id,matches,shard,id,d,12
StreamShardHandle -> public static boolean isValidShardId(String shardId);1495923079;Checks if a shard id has valid format._Kinesis stream shard ids have 12-digit numbers left-padded with 0's,_prefixed with "shardId-", ex. "shardId-000000000015".__@param shardId the shard id to check_@return whether the shard id is valid;public static boolean isValidShardId(String shardId) {_		if (shardId == null) {_			return false__		}_		return shardId.matches("^shardId-\\d{12}")__	};checks,if,a,shard,id,has,valid,format,kinesis,stream,shard,ids,have,12,digit,numbers,left,padded,with,0,s,prefixed,with,shard,id,ex,shard,id,000000000015,param,shard,id,the,shard,id,to,check,return,whether,the,shard,id,is,valid;public,static,boolean,is,valid,shard,id,string,shard,id,if,shard,id,null,return,false,return,shard,id,matches,shard,id,d,12
StreamShardHandle -> public static boolean isValidShardId(String shardId);1515757408;Checks if a shard id has valid format._Kinesis stream shard ids have 12-digit numbers left-padded with 0's,_prefixed with "shardId-", ex. "shardId-000000000015".__@param shardId the shard id to check_@return whether the shard id is valid;public static boolean isValidShardId(String shardId) {_		if (shardId == null) {_			return false__		}_		return shardId.matches("^shardId-\\d{12}")__	};checks,if,a,shard,id,has,valid,format,kinesis,stream,shard,ids,have,12,digit,numbers,left,padded,with,0,s,prefixed,with,shard,id,ex,shard,id,000000000015,param,shard,id,the,shard,id,to,check,return,whether,the,shard,id,is,valid;public,static,boolean,is,valid,shard,id,string,shard,id,if,shard,id,null,return,false,return,shard,id,matches,shard,id,d,12
StreamShardHandle -> public StreamShardHandle(String streamName, Shard shard);1495787238;Create a new StreamShardHandle__@param streamName_the name of the Kinesis stream that this shard belongs to_@param shard_the actual AWS Shard instance that will be wrapped within this StreamShardHandle;public StreamShardHandle(String streamName, Shard shard) {_		this.streamName = checkNotNull(streamName)__		this.shard = checkNotNull(shard)___		_		_		int hash = 17__		hash = 37 * hash + streamName.hashCode()__		hash = 37 * hash + shard.getShardId().hashCode()__		this.cachedHash = hash__	};create,a,new,stream,shard,handle,param,stream,name,the,name,of,the,kinesis,stream,that,this,shard,belongs,to,param,shard,the,actual,aws,shard,instance,that,will,be,wrapped,within,this,stream,shard,handle;public,stream,shard,handle,string,stream,name,shard,shard,this,stream,name,check,not,null,stream,name,this,shard,check,not,null,shard,int,hash,17,hash,37,hash,stream,name,hash,code,hash,37,hash,shard,get,shard,id,hash,code,this,cached,hash,hash
StreamShardHandle -> public StreamShardHandle(String streamName, Shard shard);1495923079;Create a new StreamShardHandle.__@param streamName_the name of the Kinesis stream that this shard belongs to_@param shard_the actual AWS Shard instance that will be wrapped within this StreamShardHandle;public StreamShardHandle(String streamName, Shard shard) {_		this.streamName = checkNotNull(streamName)__		this.shard = checkNotNull(shard)___		_		_		int hash = 17__		hash = 37 * hash + streamName.hashCode()__		hash = 37 * hash + shard.getShardId().hashCode()__		this.cachedHash = hash__	};create,a,new,stream,shard,handle,param,stream,name,the,name,of,the,kinesis,stream,that,this,shard,belongs,to,param,shard,the,actual,aws,shard,instance,that,will,be,wrapped,within,this,stream,shard,handle;public,stream,shard,handle,string,stream,name,shard,shard,this,stream,name,check,not,null,stream,name,this,shard,check,not,null,shard,int,hash,17,hash,37,hash,stream,name,hash,code,hash,37,hash,shard,get,shard,id,hash,code,this,cached,hash,hash
StreamShardHandle -> public StreamShardHandle(String streamName, Shard shard);1515757408;Create a new StreamShardHandle.__@param streamName_the name of the Kinesis stream that this shard belongs to_@param shard_the actual AWS Shard instance that will be wrapped within this StreamShardHandle;public StreamShardHandle(String streamName, Shard shard) {_		this.streamName = checkNotNull(streamName)__		this.shard = checkNotNull(shard)___		_		_		int hash = 17__		hash = 37 * hash + streamName.hashCode()__		hash = 37 * hash + shard.getShardId().hashCode()__		this.cachedHash = hash__	};create,a,new,stream,shard,handle,param,stream,name,the,name,of,the,kinesis,stream,that,this,shard,belongs,to,param,shard,the,actual,aws,shard,instance,that,will,be,wrapped,within,this,stream,shard,handle;public,stream,shard,handle,string,stream,name,shard,shard,this,stream,name,check,not,null,stream,name,this,shard,check,not,null,shard,int,hash,17,hash,37,hash,stream,name,hash,code,hash,37,hash,shard,get,shard,id,hash,code,this,cached,hash,hash
StreamShardHandle -> public StreamShardHandle(String streamName, Shard shard);1549739849;Create a new StreamShardHandle.__@param streamName_the name of the Kinesis stream that this shard belongs to_@param shard_the actual AWS Shard instance that will be wrapped within this StreamShardHandle;public StreamShardHandle(String streamName, Shard shard) {_		this.streamName = checkNotNull(streamName)__		this.shard = checkNotNull(shard)___		_		_		int hash = 17__		hash = 37 * hash + streamName.hashCode()__		hash = 37 * hash + shard.getShardId().hashCode()__		this.cachedHash = hash__	};create,a,new,stream,shard,handle,param,stream,name,the,name,of,the,kinesis,stream,that,this,shard,belongs,to,param,shard,the,actual,aws,shard,instance,that,will,be,wrapped,within,this,stream,shard,handle;public,stream,shard,handle,string,stream,name,shard,shard,this,stream,name,check,not,null,stream,name,this,shard,check,not,null,shard,int,hash,17,hash,37,hash,stream,name,hash,code,hash,37,hash,shard,get,shard,id,hash,code,this,cached,hash,hash
StreamShardHandle -> public StreamShardHandle(String streamName, Shard shard);1550567875;Create a new StreamShardHandle.__@param streamName_the name of the Kinesis stream that this shard belongs to_@param shard_the actual AWS Shard instance that will be wrapped within this StreamShardHandle;public StreamShardHandle(String streamName, Shard shard) {_		this.streamName = checkNotNull(streamName)__		this.shard = checkNotNull(shard)___		_		_		int hash = 17__		hash = 37 * hash + streamName.hashCode()__		hash = 37 * hash + shard.getShardId().hashCode()__		this.cachedHash = hash__	};create,a,new,stream,shard,handle,param,stream,name,the,name,of,the,kinesis,stream,that,this,shard,belongs,to,param,shard,the,actual,aws,shard,instance,that,will,be,wrapped,within,this,stream,shard,handle;public,stream,shard,handle,string,stream,name,shard,shard,this,stream,name,check,not,null,stream,name,this,shard,check,not,null,shard,int,hash,17,hash,37,hash,stream,name,hash,code,hash,37,hash,shard,get,shard,id,hash,code,this,cached,hash,hash
