# id;timestamp;commentText;codeText;commentWords;codeWords
KryoClearedBufferTest -> @Test 	public void testOutputBufferedBeingClearedInCaseOfException() throws Exception;1454428544;Tests that the kryo output buffer is cleared in case of an exception. Flink uses the_EOFException to signal that a buffer is full. In such a case, the record which was tried_to be written will be rewritten. Therefore, eventually buffered data of this record has_to be cleared.;@Test_	public void testOutputBufferedBeingClearedInCaseOfException() throws Exception {_		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerTypeWithKryoSerializer(TestRecord.class, new TestRecordSerializer())__		executionConfig.registerKryoType(TestRecord.class)___		KryoSerializer<TestRecord> kryoSerializer = new KryoSerializer<TestRecord>(_			TestRecord.class,_			executionConfig)___		int size = 94__		int bufferSize = 150___		TestRecord testRecord = new TestRecord(size)___		TestDataOutputView target = new TestDataOutputView(bufferSize)___		kryoSerializer.serialize(testRecord, target)___		try {_			kryoSerializer.serialize(testRecord, target)__			Assert.fail("Expected an EOFException.")__		} catch(EOFException eofException) {_			_			_		}__		TestRecord actualRecord = kryoSerializer.deserialize(_				new DataInputViewStreamWrapper(new ByteArrayInputStream(target.getBuffer())))___		Assert.assertEquals(testRecord, actualRecord)___		target.clear()___		_		_		kryoSerializer.serialize(testRecord, target)___		byte[] buffer = target.getBuffer()__		int counter = 0___		for (int i = 0_ i < buffer.length_ i++) {_			if(buffer[i] == 42) {_				counter++__			}_		}__		Assert.assertEquals(size, counter)__	};tests,that,the,kryo,output,buffer,is,cleared,in,case,of,an,exception,flink,uses,the,eofexception,to,signal,that,a,buffer,is,full,in,such,a,case,the,record,which,was,tried,to,be,written,will,be,rewritten,therefore,eventually,buffered,data,of,this,record,has,to,be,cleared;test,public,void,test,output,buffered,being,cleared,in,case,of,exception,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,type,with,kryo,serializer,test,record,class,new,test,record,serializer,execution,config,register,kryo,type,test,record,class,kryo,serializer,test,record,kryo,serializer,new,kryo,serializer,test,record,test,record,class,execution,config,int,size,94,int,buffer,size,150,test,record,test,record,new,test,record,size,test,data,output,view,target,new,test,data,output,view,buffer,size,kryo,serializer,serialize,test,record,target,try,kryo,serializer,serialize,test,record,target,assert,fail,expected,an,eofexception,catch,eofexception,eof,exception,test,record,actual,record,kryo,serializer,deserialize,new,data,input,view,stream,wrapper,new,byte,array,input,stream,target,get,buffer,assert,assert,equals,test,record,actual,record,target,clear,kryo,serializer,serialize,test,record,target,byte,buffer,target,get,buffer,int,counter,0,for,int,i,0,i,buffer,length,i,if,buffer,i,42,counter,assert,assert,equals,size,counter
KryoClearedBufferTest -> @Test 	public void testOutputBufferedBeingClearedInCaseOfException() throws Exception;1489060855;Tests that the kryo output buffer is cleared in case of an exception. Flink uses the_EOFException to signal that a buffer is full. In such a case, the record which was tried_to be written will be rewritten. Therefore, eventually buffered data of this record has_to be cleared.;@Test_	public void testOutputBufferedBeingClearedInCaseOfException() throws Exception {_		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerTypeWithKryoSerializer(TestRecord.class, new TestRecordSerializer())__		executionConfig.registerKryoType(TestRecord.class)___		KryoSerializer<TestRecord> kryoSerializer = new KryoSerializer<TestRecord>(_			TestRecord.class,_			executionConfig)___		int size = 94__		int bufferSize = 150___		TestRecord testRecord = new TestRecord(size)___		TestDataOutputView target = new TestDataOutputView(bufferSize)___		kryoSerializer.serialize(testRecord, target)___		try {_			kryoSerializer.serialize(testRecord, target)__			Assert.fail("Expected an EOFException.")__		} catch(EOFException eofException) {_			_			_		}__		TestRecord actualRecord = kryoSerializer.deserialize(_				new DataInputViewStreamWrapper(new ByteArrayInputStream(target.getBuffer())))___		Assert.assertEquals(testRecord, actualRecord)___		target.clear()___		_		_		kryoSerializer.serialize(testRecord, target)___		byte[] buffer = target.getBuffer()__		int counter = 0___		for (int i = 0_ i < buffer.length_ i++) {_			if(buffer[i] == 42) {_				counter++__			}_		}__		Assert.assertEquals(size, counter)__	};tests,that,the,kryo,output,buffer,is,cleared,in,case,of,an,exception,flink,uses,the,eofexception,to,signal,that,a,buffer,is,full,in,such,a,case,the,record,which,was,tried,to,be,written,will,be,rewritten,therefore,eventually,buffered,data,of,this,record,has,to,be,cleared;test,public,void,test,output,buffered,being,cleared,in,case,of,exception,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,type,with,kryo,serializer,test,record,class,new,test,record,serializer,execution,config,register,kryo,type,test,record,class,kryo,serializer,test,record,kryo,serializer,new,kryo,serializer,test,record,test,record,class,execution,config,int,size,94,int,buffer,size,150,test,record,test,record,new,test,record,size,test,data,output,view,target,new,test,data,output,view,buffer,size,kryo,serializer,serialize,test,record,target,try,kryo,serializer,serialize,test,record,target,assert,fail,expected,an,eofexception,catch,eofexception,eof,exception,test,record,actual,record,kryo,serializer,deserialize,new,data,input,view,stream,wrapper,new,byte,array,input,stream,target,get,buffer,assert,assert,equals,test,record,actual,record,target,clear,kryo,serializer,serialize,test,record,target,byte,buffer,target,get,buffer,int,counter,0,for,int,i,0,i,buffer,length,i,if,buffer,i,42,counter,assert,assert,equals,size,counter
KryoClearedBufferTest -> @Test 	public void testOutputBufferedBeingClearedInCaseOfException() throws Exception;1489589988;Tests that the kryo output buffer is cleared in case of an exception. Flink uses the_EOFException to signal that a buffer is full. In such a case, the record which was tried_to be written will be rewritten. Therefore, eventually buffered data of this record has_to be cleared.;@Test_	public void testOutputBufferedBeingClearedInCaseOfException() throws Exception {_		ExecutionConfig executionConfig = new ExecutionConfig()__		executionConfig.registerTypeWithKryoSerializer(TestRecord.class, new TestRecordSerializer())__		executionConfig.registerKryoType(TestRecord.class)___		KryoSerializer<TestRecord> kryoSerializer = new KryoSerializer<TestRecord>(_			TestRecord.class,_			executionConfig)___		int size = 94__		int bufferSize = 150___		TestRecord testRecord = new TestRecord(size)___		TestDataOutputView target = new TestDataOutputView(bufferSize)___		kryoSerializer.serialize(testRecord, target)___		try {_			kryoSerializer.serialize(testRecord, target)__			Assert.fail("Expected an EOFException.")__		} catch(EOFException eofException) {_			_			_		}__		TestRecord actualRecord = kryoSerializer.deserialize(_				new DataInputViewStreamWrapper(new ByteArrayInputStream(target.getBuffer())))___		Assert.assertEquals(testRecord, actualRecord)___		target.clear()___		_		_		kryoSerializer.serialize(testRecord, target)___		byte[] buffer = target.getBuffer()__		int counter = 0___		for (int i = 0_ i < buffer.length_ i++) {_			if(buffer[i] == 42) {_				counter++__			}_		}__		Assert.assertEquals(size, counter)__	};tests,that,the,kryo,output,buffer,is,cleared,in,case,of,an,exception,flink,uses,the,eofexception,to,signal,that,a,buffer,is,full,in,such,a,case,the,record,which,was,tried,to,be,written,will,be,rewritten,therefore,eventually,buffered,data,of,this,record,has,to,be,cleared;test,public,void,test,output,buffered,being,cleared,in,case,of,exception,throws,exception,execution,config,execution,config,new,execution,config,execution,config,register,type,with,kryo,serializer,test,record,class,new,test,record,serializer,execution,config,register,kryo,type,test,record,class,kryo,serializer,test,record,kryo,serializer,new,kryo,serializer,test,record,test,record,class,execution,config,int,size,94,int,buffer,size,150,test,record,test,record,new,test,record,size,test,data,output,view,target,new,test,data,output,view,buffer,size,kryo,serializer,serialize,test,record,target,try,kryo,serializer,serialize,test,record,target,assert,fail,expected,an,eofexception,catch,eofexception,eof,exception,test,record,actual,record,kryo,serializer,deserialize,new,data,input,view,stream,wrapper,new,byte,array,input,stream,target,get,buffer,assert,assert,equals,test,record,actual,record,target,clear,kryo,serializer,serialize,test,record,target,byte,buffer,target,get,buffer,int,counter,0,for,int,i,0,i,buffer,length,i,if,buffer,i,42,counter,assert,assert,equals,size,counter
