# id;timestamp;commentText;codeText;commentWords;codeWords
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryFalse();1418636270;Test with one nested directory and recursive.file.enumeration = false;@Test_	public void testOneNestedDirectoryFalse() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", false)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,false;test,public,void,test,one,nested,directory,false,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,false,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryFalse();1418636270;Test with one nested directory and recursive.file.enumeration = false;@Test_	public void testOneNestedDirectoryFalse() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", false)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,false;test,public,void,test,one,nested,directory,false,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,false,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryFalse();1432722957;Test with one nested directory and recursive.file.enumeration = false;@Test_	public void testOneNestedDirectoryFalse() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", false)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,false;test,public,void,test,one,nested,directory,false,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,false,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryFalse();1433170803;Test with one nested directory and recursive.file.enumeration = false;@Test_	public void testOneNestedDirectoryFalse() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", false)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,false;test,public,void,test,one,nested,directory,false,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,false,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryFalse();1465920682;Test with one nested directory and recursive.file.enumeration = false;@Test_	public void testOneNestedDirectoryFalse() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", false)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,false;test,public,void,test,one,nested,directory,false,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,false,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryFalse();1469630409;Test with one nested directory and recursive.file.enumeration = false;@Test_	public void testOneNestedDirectoryFalse() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", false)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,false;test,public,void,test,one,nested,directory,false,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,false,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryFalse();1475688973;Test with one nested directory and recursive.file.enumeration = false;@Test_	public void testOneNestedDirectoryFalse() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", false)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,false;test,public,void,test,one,nested,directory,false,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,false,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryFalse();1532591535;Test with one nested directory and recursive.file.enumeration = false;@Test_	public void testOneNestedDirectoryFalse() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File insideNestedDir = tempFolder.newFolder(firstLevelDir, secondLevelDir)__			File nestedDir = insideNestedDir.getParentFile()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", false)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,false;test,public,void,test,one,nested,directory,false,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,inside,nested,dir,temp,folder,new,folder,first,level,dir,second,level,dir,file,nested,dir,inside,nested,dir,get,parent,file,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,false,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesWithFilteredFilesTrue();1418636270;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesWithFilteredFilesTrue() {__		String sep = System.getProperty("file.separator")___		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()__			String secondLevelFilterDir = "_"+TestFileUtils.randomFileName()__			String thirdLevelFilterDir = "_"+TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + sep + firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()__			File insideNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelFilterDir)__			insideNestedDirFiltered.mkdirs()__			insideNestedDirFiltered.deleteOnExit()__			File filteredFile = new File(tempPath + sep + firstLevelDir + sep + "_IWillBeFiltered")__			filteredFile.createNewFile()__			filteredFile.deleteOnExit()___			File nestedNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()__			File nestedNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelFilterDir)__			nestedNestedDirFiltered.mkdirs()__			nestedNestedDirFiltered.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")__			_			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDirFiltered.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,with,filtered,files,true,string,sep,system,get,property,file,separator,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,string,second,level,filter,dir,test,file,utils,random,file,name,string,third,level,filter,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,sep,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,inside,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,filter,dir,inside,nested,dir,filtered,mkdirs,inside,nested,dir,filtered,delete,on,exit,file,filtered,file,new,file,temp,path,sep,first,level,dir,sep,filtered,file,create,new,file,filtered,file,delete,on,exit,file,nested,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,file,nested,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,filter,dir,nested,nested,dir,filtered,mkdirs,nested,nested,dir,filtered,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,filtered,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesWithFilteredFilesTrue();1432722957;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesWithFilteredFilesTrue() {__		String sep = System.getProperty("file.separator")___		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()__			String secondLevelFilterDir = "_"+TestFileUtils.randomFileName()__			String thirdLevelFilterDir = "_"+TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + sep + firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()__			File insideNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelFilterDir)__			insideNestedDirFiltered.mkdirs()__			insideNestedDirFiltered.deleteOnExit()__			File filteredFile = new File(tempPath + sep + firstLevelDir + sep + "_IWillBeFiltered")__			filteredFile.createNewFile()__			filteredFile.deleteOnExit()___			File nestedNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()__			File nestedNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelFilterDir)__			nestedNestedDirFiltered.mkdirs()__			nestedNestedDirFiltered.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")__			_			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDirFiltered.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,with,filtered,files,true,string,sep,system,get,property,file,separator,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,string,second,level,filter,dir,test,file,utils,random,file,name,string,third,level,filter,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,sep,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,inside,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,filter,dir,inside,nested,dir,filtered,mkdirs,inside,nested,dir,filtered,delete,on,exit,file,filtered,file,new,file,temp,path,sep,first,level,dir,sep,filtered,file,create,new,file,filtered,file,delete,on,exit,file,nested,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,file,nested,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,filter,dir,nested,nested,dir,filtered,mkdirs,nested,nested,dir,filtered,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,filtered,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesWithFilteredFilesTrue();1433170803;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesWithFilteredFilesTrue() {__		String sep = System.getProperty("file.separator")___		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()__			String secondLevelFilterDir = "_"+TestFileUtils.randomFileName()__			String thirdLevelFilterDir = "_"+TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + sep + firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()__			File insideNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelFilterDir)__			insideNestedDirFiltered.mkdirs()__			insideNestedDirFiltered.deleteOnExit()__			File filteredFile = new File(tempPath + sep + firstLevelDir + sep + "_IWillBeFiltered")__			filteredFile.createNewFile()__			filteredFile.deleteOnExit()___			File nestedNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()__			File nestedNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelFilterDir)__			nestedNestedDirFiltered.mkdirs()__			nestedNestedDirFiltered.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")__			_			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDirFiltered.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,with,filtered,files,true,string,sep,system,get,property,file,separator,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,string,second,level,filter,dir,test,file,utils,random,file,name,string,third,level,filter,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,sep,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,inside,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,filter,dir,inside,nested,dir,filtered,mkdirs,inside,nested,dir,filtered,delete,on,exit,file,filtered,file,new,file,temp,path,sep,first,level,dir,sep,filtered,file,create,new,file,filtered,file,delete,on,exit,file,nested,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,file,nested,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,filter,dir,nested,nested,dir,filtered,mkdirs,nested,nested,dir,filtered,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,filtered,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesWithFilteredFilesTrue();1465920682;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesWithFilteredFilesTrue() {__		String sep = System.getProperty("file.separator")___		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()__			String secondLevelFilterDir = "_"+TestFileUtils.randomFileName()__			String thirdLevelFilterDir = "_"+TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + sep + firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()__			File insideNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelFilterDir)__			insideNestedDirFiltered.mkdirs()__			insideNestedDirFiltered.deleteOnExit()__			File filteredFile = new File(tempPath + sep + firstLevelDir + sep + "_IWillBeFiltered")__			filteredFile.createNewFile()__			filteredFile.deleteOnExit()___			File nestedNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()__			File nestedNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelFilterDir)__			nestedNestedDirFiltered.mkdirs()__			nestedNestedDirFiltered.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")__			_			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDirFiltered.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,with,filtered,files,true,string,sep,system,get,property,file,separator,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,string,second,level,filter,dir,test,file,utils,random,file,name,string,third,level,filter,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,sep,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,inside,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,filter,dir,inside,nested,dir,filtered,mkdirs,inside,nested,dir,filtered,delete,on,exit,file,filtered,file,new,file,temp,path,sep,first,level,dir,sep,filtered,file,create,new,file,filtered,file,delete,on,exit,file,nested,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,file,nested,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,filter,dir,nested,nested,dir,filtered,mkdirs,nested,nested,dir,filtered,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,filtered,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesWithFilteredFilesTrue();1469630409;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesWithFilteredFilesTrue() {__		String sep = System.getProperty("file.separator")___		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()__			String secondLevelFilterDir = "_"+TestFileUtils.randomFileName()__			String thirdLevelFilterDir = "_"+TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + sep + firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()__			File insideNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelFilterDir)__			insideNestedDirFiltered.mkdirs()__			insideNestedDirFiltered.deleteOnExit()__			File filteredFile = new File(tempPath + sep + firstLevelDir + sep + "_IWillBeFiltered")__			filteredFile.createNewFile()__			filteredFile.deleteOnExit()___			File nestedNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()__			File nestedNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelFilterDir)__			nestedNestedDirFiltered.mkdirs()__			nestedNestedDirFiltered.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")__			_			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDirFiltered.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,with,filtered,files,true,string,sep,system,get,property,file,separator,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,string,second,level,filter,dir,test,file,utils,random,file,name,string,third,level,filter,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,sep,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,inside,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,filter,dir,inside,nested,dir,filtered,mkdirs,inside,nested,dir,filtered,delete,on,exit,file,filtered,file,new,file,temp,path,sep,first,level,dir,sep,filtered,file,create,new,file,filtered,file,delete,on,exit,file,nested,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,file,nested,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,filter,dir,nested,nested,dir,filtered,mkdirs,nested,nested,dir,filtered,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,filtered,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesWithFilteredFilesTrue();1475688973;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesWithFilteredFilesTrue() {__		String sep = System.getProperty("file.separator")___		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()__			String secondLevelFilterDir = "_"+TestFileUtils.randomFileName()__			String thirdLevelFilterDir = "_"+TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + sep + firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()__			File insideNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelFilterDir)__			insideNestedDirFiltered.mkdirs()__			insideNestedDirFiltered.deleteOnExit()__			File filteredFile = new File(tempPath + sep + firstLevelDir + sep + "_IWillBeFiltered")__			filteredFile.createNewFile()__			filteredFile.deleteOnExit()___			File nestedNestedDir = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()__			File nestedNestedDirFiltered = new File(tempPath + sep + firstLevelDir + sep + secondLevelDir + sep + thirdLevelFilterDir)__			nestedNestedDirFiltered.mkdirs()__			nestedNestedDirFiltered.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")__			_			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDirFiltered.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,with,filtered,files,true,string,sep,system,get,property,file,separator,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,string,second,level,filter,dir,test,file,utils,random,file,name,string,third,level,filter,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,sep,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,inside,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,filter,dir,inside,nested,dir,filtered,mkdirs,inside,nested,dir,filtered,delete,on,exit,file,filtered,file,new,file,temp,path,sep,first,level,dir,sep,filtered,file,create,new,file,filtered,file,delete,on,exit,file,nested,nested,dir,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,file,nested,nested,dir,filtered,new,file,temp,path,sep,first,level,dir,sep,second,level,dir,sep,third,level,filter,dir,nested,nested,dir,filtered,mkdirs,nested,nested,dir,filtered,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,filtered,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesWithFilteredFilesTrue();1532591535;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesWithFilteredFilesTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()__			String secondLevelFilterDir = "_"+TestFileUtils.randomFileName()__			String thirdLevelFilterDir = "_"+TestFileUtils.randomFileName()___			File nestedNestedDirFiltered = tempFolder.newFolder(firstLevelDir, secondLevelDir, thirdLevelDir, thirdLevelFilterDir)__			File nestedNestedDir = nestedNestedDirFiltered.getParentFile()__			File insideNestedDir = nestedNestedDir.getParentFile()__			File nestedDir = insideNestedDir.getParentFile()__			File insideNestedDirFiltered = tempFolder.newFolder(firstLevelDir, secondLevelFilterDir)__			File filteredFile = new File(nestedDir, "_IWillBeFiltered")__			filteredFile.createNewFile()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")__			_			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDirFiltered.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDirFiltered.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,with,filtered,files,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,string,second,level,filter,dir,test,file,utils,random,file,name,string,third,level,filter,dir,test,file,utils,random,file,name,file,nested,nested,dir,filtered,temp,folder,new,folder,first,level,dir,second,level,dir,third,level,dir,third,level,filter,dir,file,nested,nested,dir,nested,nested,dir,filtered,get,parent,file,file,inside,nested,dir,nested,nested,dir,get,parent,file,file,nested,dir,inside,nested,dir,get,parent,file,file,inside,nested,dir,filtered,temp,folder,new,folder,first,level,dir,second,level,filter,dir,file,filtered,file,new,file,nested,dir,filtered,file,create,new,file,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,filtered,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,filtered,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesTrue();1418636270;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			File nestedNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir_					+ System.getProperty("file.separator") + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)__			_			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,nested,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,system,get,property,file,separator,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesTrue();1418636270;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			File nestedNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir_					+ System.getProperty("file.separator") + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)__			_			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,nested,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,system,get,property,file,separator,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesTrue();1432722957;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			File nestedNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir_					+ System.getProperty("file.separator") + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)__			_			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,nested,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,system,get,property,file,separator,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesTrue();1433170803;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			File nestedNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir_					+ System.getProperty("file.separator") + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)__			_			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,nested,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,system,get,property,file,separator,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesTrue();1465920682;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			File nestedNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir_					+ System.getProperty("file.separator") + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)__			_			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,nested,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,system,get,property,file,separator,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesTrue();1469630409;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			File nestedNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir_					+ System.getProperty("file.separator") + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)__			_			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,nested,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,system,get,property,file,separator,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesTrue();1475688973;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			File nestedNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir_					+ System.getProperty("file.separator") + thirdLevelDir)__			nestedNestedDir.mkdirs()__			nestedNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)__			_			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,file,nested,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,system,get,property,file,separator,third,level,dir,nested,nested,dir,mkdirs,nested,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testTwoNestedDirectoriesTrue();1532591535;Test with two nested directories and recursive.file.enumeration = true;@Test_	public void testTwoNestedDirectoriesTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()__			String thirdLevelDir = TestFileUtils.randomFileName()___			File nestedNestedDir = tempFolder.newFolder(firstLevelDir, secondLevelDir, thirdLevelDir)__			File insideNestedDir = nestedNestedDir.getParentFile()__			File nestedDir = insideNestedDir.getParentFile()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)__			_			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,two,nested,directories,and,recursive,file,enumeration,true;test,public,void,test,two,nested,directories,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,string,third,level,dir,test,file,utils,random,file,name,file,nested,nested,dir,temp,folder,new,folder,first,level,dir,second,level,dir,third,level,dir,file,inside,nested,dir,nested,nested,dir,get,parent,file,file,nested,dir,inside,nested,dir,get,parent,file,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir,get,absolute,path,bravas,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testNoNestedDirectoryTrue();1418636270;Test without nested directory and recursive.file.enumeration = true;@Test_	public void testNoNestedDirectoryTrue() {_		try {_			String filePath = TestFileUtils.createTempFile("foo")___			this.format.setFilePath(new Path(filePath))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,without,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,no,nested,directory,true,try,string,file,path,test,file,utils,create,temp,file,foo,this,format,set,file,path,new,path,file,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testNoNestedDirectoryTrue();1418636270;Test without nested directory and recursive.file.enumeration = true;@Test_	public void testNoNestedDirectoryTrue() {_		try {_			String filePath = TestFileUtils.createTempFile("foo")___			this.format.setFilePath(new Path(filePath))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,without,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,no,nested,directory,true,try,string,file,path,test,file,utils,create,temp,file,foo,this,format,set,file,path,new,path,file,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testNoNestedDirectoryTrue();1432722957;Test without nested directory and recursive.file.enumeration = true;@Test_	public void testNoNestedDirectoryTrue() {_		try {_			String filePath = TestFileUtils.createTempFile("foo")___			this.format.setFilePath(new Path(filePath))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,without,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,no,nested,directory,true,try,string,file,path,test,file,utils,create,temp,file,foo,this,format,set,file,path,new,path,file,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testNoNestedDirectoryTrue();1433170803;Test without nested directory and recursive.file.enumeration = true;@Test_	public void testNoNestedDirectoryTrue() {_		try {_			String filePath = TestFileUtils.createTempFile("foo")___			this.format.setFilePath(new Path(filePath))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,without,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,no,nested,directory,true,try,string,file,path,test,file,utils,create,temp,file,foo,this,format,set,file,path,new,path,file,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testNoNestedDirectoryTrue();1465920682;Test without nested directory and recursive.file.enumeration = true;@Test_	public void testNoNestedDirectoryTrue() {_		try {_			String filePath = TestFileUtils.createTempFile("foo")___			this.format.setFilePath(new Path(filePath))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,without,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,no,nested,directory,true,try,string,file,path,test,file,utils,create,temp,file,foo,this,format,set,file,path,new,path,file,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testNoNestedDirectoryTrue();1469630409;Test without nested directory and recursive.file.enumeration = true;@Test_	public void testNoNestedDirectoryTrue() {_		try {_			String filePath = TestFileUtils.createTempFile("foo")___			this.format.setFilePath(new Path(filePath))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,without,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,no,nested,directory,true,try,string,file,path,test,file,utils,create,temp,file,foo,this,format,set,file,path,new,path,file,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testNoNestedDirectoryTrue();1475688973;Test without nested directory and recursive.file.enumeration = true;@Test_	public void testNoNestedDirectoryTrue() {_		try {_			String filePath = TestFileUtils.createTempFile("foo")___			this.format.setFilePath(new Path(filePath))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,without,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,no,nested,directory,true,try,string,file,path,test,file,utils,create,temp,file,foo,this,format,set,file,path,new,path,file,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testNoNestedDirectoryTrue();1532591535;Test without nested directory and recursive.file.enumeration = true;@Test_	public void testNoNestedDirectoryTrue() {_		try {_			String filePath = TestFileUtils.createTempFile("foo")___			this.format.setFilePath(new Path(filePath))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(1, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,without,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,no,nested,directory,true,try,string,file,path,test,file,utils,create,temp,file,foo,this,format,set,file,path,new,path,file,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,1,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryTrue();1418636270;Test with one nested directory and recursive.file.enumeration = true;@Test_	public void testOneNestedDirectoryTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(3, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,one,nested,directory,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,3,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryTrue();1418636270;Test with one nested directory and recursive.file.enumeration = true;@Test_	public void testOneNestedDirectoryTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(3, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,one,nested,directory,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,3,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryTrue();1432722957;Test with one nested directory and recursive.file.enumeration = true;@Test_	public void testOneNestedDirectoryTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(3, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,one,nested,directory,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,3,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryTrue();1433170803;Test with one nested directory and recursive.file.enumeration = true;@Test_	public void testOneNestedDirectoryTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(3, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,one,nested,directory,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,3,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryTrue();1465920682;Test with one nested directory and recursive.file.enumeration = true;@Test_	public void testOneNestedDirectoryTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(3, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,one,nested,directory,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,3,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryTrue();1469630409;Test with one nested directory and recursive.file.enumeration = true;@Test_	public void testOneNestedDirectoryTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(3, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,one,nested,directory,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,3,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryTrue();1475688973;Test with one nested directory and recursive.file.enumeration = true;@Test_	public void testOneNestedDirectoryTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File nestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir)__			nestedDir.mkdirs()__			nestedDir.deleteOnExit()___			File insideNestedDir = new File(tempPath + System.getProperty("file.separator") _					+ firstLevelDir + System.getProperty("file.separator") + secondLevelDir)__			insideNestedDir.mkdirs()__			insideNestedDir.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(3, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,one,nested,directory,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,nested,dir,mkdirs,nested,dir,delete,on,exit,file,inside,nested,dir,new,file,temp,path,system,get,property,file,separator,first,level,dir,system,get,property,file,separator,second,level,dir,inside,nested,dir,mkdirs,inside,nested,dir,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,3,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOneNestedDirectoryTrue();1532591535;Test with one nested directory and recursive.file.enumeration = true;@Test_	public void testOneNestedDirectoryTrue() {_		try {_			String firstLevelDir = TestFileUtils.randomFileName()__			String secondLevelDir = TestFileUtils.randomFileName()___			File insideNestedDir = tempFolder.newFolder(firstLevelDir, secondLevelDir)__			File nestedDir = insideNestedDir.getParentFile()___			_			TestFileUtils.createTempFileInDirectory(nestedDir.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(insideNestedDir.getAbsolutePath(), "fideua")___			this.format.setFilePath(new Path(nestedDir.toURI().toString()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(3, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};test,with,one,nested,directory,and,recursive,file,enumeration,true;test,public,void,test,one,nested,directory,true,try,string,first,level,dir,test,file,utils,random,file,name,string,second,level,dir,test,file,utils,random,file,name,file,inside,nested,dir,temp,folder,new,folder,first,level,dir,second,level,dir,file,nested,dir,inside,nested,dir,get,parent,file,test,file,utils,create,temp,file,in,directory,nested,dir,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,inside,nested,dir,get,absolute,path,fideua,this,format,set,file,path,new,path,nested,dir,to,uri,to,string,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,3,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOnlyLevel2NestedDirectories();1432722957;Tests if the recursion is invoked correctly in nested directories.;@Test_	public void testOnlyLevel2NestedDirectories() {_		try {_			String rootDir = TestFileUtils.randomFileName()__			String nestedDir = TestFileUtils.randomFileName()__			String firstNestedNestedDir = TestFileUtils.randomFileName()__			String secondNestedNestedDir = TestFileUtils.randomFileName()___			File testDir = new File(tempPath + System.getProperty("file.separator") + rootDir)__			testDir.mkdirs()__			testDir.deleteOnExit()___			File nested = new File(testDir.getAbsolutePath() + System.getProperty("file.separator") + nestedDir)__			nested.mkdirs()__			nested.deleteOnExit()___			File nestedNestedDir1 = new File(nested.getAbsolutePath() + System.getProperty("file.separator")_					+ firstNestedNestedDir)__			nestedNestedDir1.mkdirs()__			nestedNestedDir1.deleteOnExit()___			File nestedNestedDir2 = new File(nested.getAbsolutePath() + System.getProperty("file.separator")_					+ secondNestedNestedDir)__			nestedNestedDir2.mkdirs()__			nestedNestedDir2.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(testDir.getAbsolutePath()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};tests,if,the,recursion,is,invoked,correctly,in,nested,directories;test,public,void,test,only,level2nested,directories,try,string,root,dir,test,file,utils,random,file,name,string,nested,dir,test,file,utils,random,file,name,string,first,nested,nested,dir,test,file,utils,random,file,name,string,second,nested,nested,dir,test,file,utils,random,file,name,file,test,dir,new,file,temp,path,system,get,property,file,separator,root,dir,test,dir,mkdirs,test,dir,delete,on,exit,file,nested,new,file,test,dir,get,absolute,path,system,get,property,file,separator,nested,dir,nested,mkdirs,nested,delete,on,exit,file,nested,nested,dir1,new,file,nested,get,absolute,path,system,get,property,file,separator,first,nested,nested,dir,nested,nested,dir1,mkdirs,nested,nested,dir1,delete,on,exit,file,nested,nested,dir2,new,file,nested,get,absolute,path,system,get,property,file,separator,second,nested,nested,dir,nested,nested,dir2,mkdirs,nested,nested,dir2,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,bravas,this,format,set,file,path,new,path,test,dir,get,absolute,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOnlyLevel2NestedDirectories();1433170803;Tests if the recursion is invoked correctly in nested directories.;@Test_	public void testOnlyLevel2NestedDirectories() {_		try {_			String rootDir = TestFileUtils.randomFileName()__			String nestedDir = TestFileUtils.randomFileName()__			String firstNestedNestedDir = TestFileUtils.randomFileName()__			String secondNestedNestedDir = TestFileUtils.randomFileName()___			File testDir = new File(tempPath + System.getProperty("file.separator") + rootDir)__			testDir.mkdirs()__			testDir.deleteOnExit()___			File nested = new File(testDir.getAbsolutePath() + System.getProperty("file.separator") + nestedDir)__			nested.mkdirs()__			nested.deleteOnExit()___			File nestedNestedDir1 = new File(nested.getAbsolutePath() + System.getProperty("file.separator")_					+ firstNestedNestedDir)__			nestedNestedDir1.mkdirs()__			nestedNestedDir1.deleteOnExit()___			File nestedNestedDir2 = new File(nested.getAbsolutePath() + System.getProperty("file.separator")_					+ secondNestedNestedDir)__			nestedNestedDir2.mkdirs()__			nestedNestedDir2.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(testDir.getAbsolutePath()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};tests,if,the,recursion,is,invoked,correctly,in,nested,directories;test,public,void,test,only,level2nested,directories,try,string,root,dir,test,file,utils,random,file,name,string,nested,dir,test,file,utils,random,file,name,string,first,nested,nested,dir,test,file,utils,random,file,name,string,second,nested,nested,dir,test,file,utils,random,file,name,file,test,dir,new,file,temp,path,system,get,property,file,separator,root,dir,test,dir,mkdirs,test,dir,delete,on,exit,file,nested,new,file,test,dir,get,absolute,path,system,get,property,file,separator,nested,dir,nested,mkdirs,nested,delete,on,exit,file,nested,nested,dir1,new,file,nested,get,absolute,path,system,get,property,file,separator,first,nested,nested,dir,nested,nested,dir1,mkdirs,nested,nested,dir1,delete,on,exit,file,nested,nested,dir2,new,file,nested,get,absolute,path,system,get,property,file,separator,second,nested,nested,dir,nested,nested,dir2,mkdirs,nested,nested,dir2,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,bravas,this,format,set,file,path,new,path,test,dir,get,absolute,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOnlyLevel2NestedDirectories();1465920682;Tests if the recursion is invoked correctly in nested directories.;@Test_	public void testOnlyLevel2NestedDirectories() {_		try {_			String rootDir = TestFileUtils.randomFileName()__			String nestedDir = TestFileUtils.randomFileName()__			String firstNestedNestedDir = TestFileUtils.randomFileName()__			String secondNestedNestedDir = TestFileUtils.randomFileName()___			File testDir = new File(tempPath + System.getProperty("file.separator") + rootDir)__			testDir.mkdirs()__			testDir.deleteOnExit()___			File nested = new File(testDir.getAbsolutePath() + System.getProperty("file.separator") + nestedDir)__			nested.mkdirs()__			nested.deleteOnExit()___			File nestedNestedDir1 = new File(nested.getAbsolutePath() + System.getProperty("file.separator")_					+ firstNestedNestedDir)__			nestedNestedDir1.mkdirs()__			nestedNestedDir1.deleteOnExit()___			File nestedNestedDir2 = new File(nested.getAbsolutePath() + System.getProperty("file.separator")_					+ secondNestedNestedDir)__			nestedNestedDir2.mkdirs()__			nestedNestedDir2.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(testDir.getAbsolutePath()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};tests,if,the,recursion,is,invoked,correctly,in,nested,directories;test,public,void,test,only,level2nested,directories,try,string,root,dir,test,file,utils,random,file,name,string,nested,dir,test,file,utils,random,file,name,string,first,nested,nested,dir,test,file,utils,random,file,name,string,second,nested,nested,dir,test,file,utils,random,file,name,file,test,dir,new,file,temp,path,system,get,property,file,separator,root,dir,test,dir,mkdirs,test,dir,delete,on,exit,file,nested,new,file,test,dir,get,absolute,path,system,get,property,file,separator,nested,dir,nested,mkdirs,nested,delete,on,exit,file,nested,nested,dir1,new,file,nested,get,absolute,path,system,get,property,file,separator,first,nested,nested,dir,nested,nested,dir1,mkdirs,nested,nested,dir1,delete,on,exit,file,nested,nested,dir2,new,file,nested,get,absolute,path,system,get,property,file,separator,second,nested,nested,dir,nested,nested,dir2,mkdirs,nested,nested,dir2,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,bravas,this,format,set,file,path,new,path,test,dir,get,absolute,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOnlyLevel2NestedDirectories();1469630409;Tests if the recursion is invoked correctly in nested directories.;@Test_	public void testOnlyLevel2NestedDirectories() {_		try {_			String rootDir = TestFileUtils.randomFileName()__			String nestedDir = TestFileUtils.randomFileName()__			String firstNestedNestedDir = TestFileUtils.randomFileName()__			String secondNestedNestedDir = TestFileUtils.randomFileName()___			File testDir = new File(tempPath + System.getProperty("file.separator") + rootDir)__			testDir.mkdirs()__			testDir.deleteOnExit()___			File nested = new File(testDir.getAbsolutePath() + System.getProperty("file.separator") + nestedDir)__			nested.mkdirs()__			nested.deleteOnExit()___			File nestedNestedDir1 = new File(nested.getAbsolutePath() + System.getProperty("file.separator")_					+ firstNestedNestedDir)__			nestedNestedDir1.mkdirs()__			nestedNestedDir1.deleteOnExit()___			File nestedNestedDir2 = new File(nested.getAbsolutePath() + System.getProperty("file.separator")_					+ secondNestedNestedDir)__			nestedNestedDir2.mkdirs()__			nestedNestedDir2.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(testDir.getAbsolutePath()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};tests,if,the,recursion,is,invoked,correctly,in,nested,directories;test,public,void,test,only,level2nested,directories,try,string,root,dir,test,file,utils,random,file,name,string,nested,dir,test,file,utils,random,file,name,string,first,nested,nested,dir,test,file,utils,random,file,name,string,second,nested,nested,dir,test,file,utils,random,file,name,file,test,dir,new,file,temp,path,system,get,property,file,separator,root,dir,test,dir,mkdirs,test,dir,delete,on,exit,file,nested,new,file,test,dir,get,absolute,path,system,get,property,file,separator,nested,dir,nested,mkdirs,nested,delete,on,exit,file,nested,nested,dir1,new,file,nested,get,absolute,path,system,get,property,file,separator,first,nested,nested,dir,nested,nested,dir1,mkdirs,nested,nested,dir1,delete,on,exit,file,nested,nested,dir2,new,file,nested,get,absolute,path,system,get,property,file,separator,second,nested,nested,dir,nested,nested,dir2,mkdirs,nested,nested,dir2,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,bravas,this,format,set,file,path,new,path,test,dir,get,absolute,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOnlyLevel2NestedDirectories();1475688973;Tests if the recursion is invoked correctly in nested directories.;@Test_	public void testOnlyLevel2NestedDirectories() {_		try {_			String rootDir = TestFileUtils.randomFileName()__			String nestedDir = TestFileUtils.randomFileName()__			String firstNestedNestedDir = TestFileUtils.randomFileName()__			String secondNestedNestedDir = TestFileUtils.randomFileName()___			File testDir = new File(tempPath + System.getProperty("file.separator") + rootDir)__			testDir.mkdirs()__			testDir.deleteOnExit()___			File nested = new File(testDir.getAbsolutePath() + System.getProperty("file.separator") + nestedDir)__			nested.mkdirs()__			nested.deleteOnExit()___			File nestedNestedDir1 = new File(nested.getAbsolutePath() + System.getProperty("file.separator")_					+ firstNestedNestedDir)__			nestedNestedDir1.mkdirs()__			nestedNestedDir1.deleteOnExit()___			File nestedNestedDir2 = new File(nested.getAbsolutePath() + System.getProperty("file.separator")_					+ secondNestedNestedDir)__			nestedNestedDir2.mkdirs()__			nestedNestedDir2.deleteOnExit()___			_			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(testDir.getAbsolutePath()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};tests,if,the,recursion,is,invoked,correctly,in,nested,directories;test,public,void,test,only,level2nested,directories,try,string,root,dir,test,file,utils,random,file,name,string,nested,dir,test,file,utils,random,file,name,string,first,nested,nested,dir,test,file,utils,random,file,name,string,second,nested,nested,dir,test,file,utils,random,file,name,file,test,dir,new,file,temp,path,system,get,property,file,separator,root,dir,test,dir,mkdirs,test,dir,delete,on,exit,file,nested,new,file,test,dir,get,absolute,path,system,get,property,file,separator,nested,dir,nested,mkdirs,nested,delete,on,exit,file,nested,nested,dir1,new,file,nested,get,absolute,path,system,get,property,file,separator,first,nested,nested,dir,nested,nested,dir1,mkdirs,nested,nested,dir1,delete,on,exit,file,nested,nested,dir2,new,file,nested,get,absolute,path,system,get,property,file,separator,second,nested,nested,dir,nested,nested,dir2,mkdirs,nested,nested,dir2,delete,on,exit,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,bravas,this,format,set,file,path,new,path,test,dir,get,absolute,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
EnumerateNestedFilesTest -> @Test 	public void testOnlyLevel2NestedDirectories();1532591535;Tests if the recursion is invoked correctly in nested directories.;@Test_	public void testOnlyLevel2NestedDirectories() {_		try {_			String rootDir = TestFileUtils.randomFileName()__			String nestedDir = TestFileUtils.randomFileName()__			String firstNestedNestedDir = TestFileUtils.randomFileName()__			String secondNestedNestedDir = TestFileUtils.randomFileName()___			File testDir = tempFolder.newFolder(rootDir)__			tempFolder.newFolder(rootDir, nestedDir)__			File nestedNestedDir1 = tempFolder.newFolder(rootDir, nestedDir, firstNestedNestedDir)__			File nestedNestedDir2 = tempFolder.newFolder(rootDir, nestedDir, secondNestedNestedDir)___			_			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "paella")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir1.getAbsolutePath(), "kalamari")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "fideua")__			TestFileUtils.createTempFileInDirectory(nestedNestedDir2.getAbsolutePath(), "bravas")___			this.format.setFilePath(new Path(testDir.getAbsolutePath()))__			this.config.setBoolean("recursive.file.enumeration", true)__			format.configure(this.config)___			FileInputSplit[] splits = format.createInputSplits(1)__			Assert.assertEquals(4, splits.length)__		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};tests,if,the,recursion,is,invoked,correctly,in,nested,directories;test,public,void,test,only,level2nested,directories,try,string,root,dir,test,file,utils,random,file,name,string,nested,dir,test,file,utils,random,file,name,string,first,nested,nested,dir,test,file,utils,random,file,name,string,second,nested,nested,dir,test,file,utils,random,file,name,file,test,dir,temp,folder,new,folder,root,dir,temp,folder,new,folder,root,dir,nested,dir,file,nested,nested,dir1,temp,folder,new,folder,root,dir,nested,dir,first,nested,nested,dir,file,nested,nested,dir2,temp,folder,new,folder,root,dir,nested,dir,second,nested,nested,dir,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,paella,test,file,utils,create,temp,file,in,directory,nested,nested,dir1,get,absolute,path,kalamari,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,fideua,test,file,utils,create,temp,file,in,directory,nested,nested,dir2,get,absolute,path,bravas,this,format,set,file,path,new,path,test,dir,get,absolute,path,this,config,set,boolean,recursive,file,enumeration,true,format,configure,this,config,file,input,split,splits,format,create,input,splits,1,assert,assert,equals,4,splits,length,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
