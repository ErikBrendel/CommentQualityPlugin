# id;timestamp;commentText;codeText;commentWords;codeWords
FileInputFormatTest -> @Test 	public void testFileInputSplit();1405024514;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1405090423;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1409911022;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1411236168;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1411473593;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1418636270;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1432128952;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1436793281;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1461679220;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1465920682;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1472134098;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1472459882;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1475688973;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1483634119;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1489060855;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1518772855;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1518772855;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1519233578;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
FileInputFormatTest -> @Test 	public void testFileInputSplit();1532591535;Create directory with files with .deflate extension and see if it creates a split_for each file. Each split has to start from the beginning.;@Test_	public void testFileInputSplit() {_		try {_			String tempFile = TestFileUtils.createTempFileDirExtension(temporaryFolder.newFolder(), ".deflate", "some", "stupid", "meaningless", "files")__			final DummyFileInputFormat format = new DummyFileInputFormat()__			format.setFilePath(tempFile)__			format.configure(new Configuration())__			FileInputSplit[] splits = format.createInputSplits(2)__			Assert.assertEquals(4, splits.length)__			for(FileInputSplit split : splits) {_				Assert.assertEquals(-1L, split.getLength())_ _				Assert.assertEquals(0L, split.getStart())_ _			}_			_			_			TestFileUtils.createTempFileInDirectory(tempFile.replace("file:", ""), "this creates a test file with a random extension (at least not .deflate)")__			_			final DummyFileInputFormat formatMixed = new DummyFileInputFormat()__			formatMixed.setFilePath(tempFile)__			formatMixed.configure(new Configuration())__			FileInputSplit[] splitsMixed = formatMixed.createInputSplits(2)__			Assert.assertEquals(5, splitsMixed.length)__			for(FileInputSplit split : splitsMixed) {_				if(split.getPath().getName().endsWith(".deflate")) {_					Assert.assertEquals(-1L, split.getLength())_ _					Assert.assertEquals(0L, split.getStart())_ _				} else {_					Assert.assertEquals(0L, split.getStart())__					Assert.assertTrue("split size not correct", split.getLength() > 0)__				}_			}_			_			_		} catch (Exception ex) {_			ex.printStackTrace()__			Assert.fail(ex.getMessage())__		}_	};create,directory,with,files,with,deflate,extension,and,see,if,it,creates,a,split,for,each,file,each,split,has,to,start,from,the,beginning;test,public,void,test,file,input,split,try,string,temp,file,test,file,utils,create,temp,file,dir,extension,temporary,folder,new,folder,deflate,some,stupid,meaningless,files,final,dummy,file,input,format,format,new,dummy,file,input,format,format,set,file,path,temp,file,format,configure,new,configuration,file,input,split,splits,format,create,input,splits,2,assert,assert,equals,4,splits,length,for,file,input,split,split,splits,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,test,file,utils,create,temp,file,in,directory,temp,file,replace,file,this,creates,a,test,file,with,a,random,extension,at,least,not,deflate,final,dummy,file,input,format,format,mixed,new,dummy,file,input,format,format,mixed,set,file,path,temp,file,format,mixed,configure,new,configuration,file,input,split,splits,mixed,format,mixed,create,input,splits,2,assert,assert,equals,5,splits,mixed,length,for,file,input,split,split,splits,mixed,if,split,get,path,get,name,ends,with,deflate,assert,assert,equals,1l,split,get,length,assert,assert,equals,0l,split,get,start,else,assert,assert,equals,0l,split,get,start,assert,assert,true,split,size,not,correct,split,get,length,0,catch,exception,ex,ex,print,stack,trace,assert,fail,ex,get,message
