# id;timestamp;commentText;codeText;commentWords;codeWords
PojoTypeExtractionTest -> @Test 	public void testPojoWithGenericsSomeFieldsGeneric();1454428544;Test if the TypeExtractor is accepting untyped generics,_making them GenericTypes;@Test_	public void testPojoWithGenericsSomeFieldsGeneric() {_		TypeInformation<?> typeForClass = TypeExtractor.createTypeInfo(PojoWithGenerics.class)__		Assert.assertTrue(typeForClass instanceof PojoTypeInfo<?>)__		PojoTypeInfo<?> pojoTypeForClass = (PojoTypeInfo<?>) typeForClass__		for(int i = 0_ i < pojoTypeForClass.getArity()_ i++) {_			PojoField field = pojoTypeForClass.getPojoFieldAt(i)__			String name = field.getField().getName()__			if(name.equals("field1")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("field2")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("key")) {_				Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, field.getTypeInformation())__			} else {_				Assert.fail("Unexpected field "+field)__			}_		}_	};test,if,the,type,extractor,is,accepting,untyped,generics,making,them,generic,types;test,public,void,test,pojo,with,generics,some,fields,generic,type,information,type,for,class,type,extractor,create,type,info,pojo,with,generics,class,assert,assert,true,type,for,class,instanceof,pojo,type,info,pojo,type,info,pojo,type,for,class,pojo,type,info,type,for,class,for,int,i,0,i,pojo,type,for,class,get,arity,i,pojo,field,field,pojo,type,for,class,get,pojo,field,at,i,string,name,field,get,field,get,name,if,name,equals,field1,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,field2,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,key,assert,assert,equals,basic,type,info,field,get,type,information,else,assert,fail,unexpected,field,field
PojoTypeExtractionTest -> @Test 	public void testPojoWithGenericsSomeFieldsGeneric();1460741894;Test if the TypeExtractor is accepting untyped generics,_making them GenericTypes;@Test_	public void testPojoWithGenericsSomeFieldsGeneric() {_		TypeInformation<?> typeForClass = TypeExtractor.createTypeInfo(PojoWithGenerics.class)__		Assert.assertTrue(typeForClass instanceof PojoTypeInfo<?>)__		PojoTypeInfo<?> pojoTypeForClass = (PojoTypeInfo<?>) typeForClass__		for(int i = 0_ i < pojoTypeForClass.getArity()_ i++) {_			PojoField field = pojoTypeForClass.getPojoFieldAt(i)__			String name = field.getField().getName()__			if(name.equals("field1")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("field2")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("key")) {_				Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, field.getTypeInformation())__			} else {_				Assert.fail("Unexpected field "+field)__			}_		}_	};test,if,the,type,extractor,is,accepting,untyped,generics,making,them,generic,types;test,public,void,test,pojo,with,generics,some,fields,generic,type,information,type,for,class,type,extractor,create,type,info,pojo,with,generics,class,assert,assert,true,type,for,class,instanceof,pojo,type,info,pojo,type,info,pojo,type,for,class,pojo,type,info,type,for,class,for,int,i,0,i,pojo,type,for,class,get,arity,i,pojo,field,field,pojo,type,for,class,get,pojo,field,at,i,string,name,field,get,field,get,name,if,name,equals,field1,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,field2,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,key,assert,assert,equals,basic,type,info,field,get,type,information,else,assert,fail,unexpected,field,field
PojoTypeExtractionTest -> @Test 	public void testPojoWithGenericsSomeFieldsGeneric();1465391830;Test if the TypeExtractor is accepting untyped generics,_making them GenericTypes;@Test_	public void testPojoWithGenericsSomeFieldsGeneric() {_		TypeInformation<?> typeForClass = TypeExtractor.createTypeInfo(PojoWithGenerics.class)__		Assert.assertTrue(typeForClass instanceof PojoTypeInfo<?>)__		PojoTypeInfo<?> pojoTypeForClass = (PojoTypeInfo<?>) typeForClass__		for(int i = 0_ i < pojoTypeForClass.getArity()_ i++) {_			PojoField field = pojoTypeForClass.getPojoFieldAt(i)__			String name = field.getField().getName()__			if(name.equals("field1")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("field2")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("key")) {_				Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, field.getTypeInformation())__			} else {_				Assert.fail("Unexpected field "+field)__			}_		}_	};test,if,the,type,extractor,is,accepting,untyped,generics,making,them,generic,types;test,public,void,test,pojo,with,generics,some,fields,generic,type,information,type,for,class,type,extractor,create,type,info,pojo,with,generics,class,assert,assert,true,type,for,class,instanceof,pojo,type,info,pojo,type,info,pojo,type,for,class,pojo,type,info,type,for,class,for,int,i,0,i,pojo,type,for,class,get,arity,i,pojo,field,field,pojo,type,for,class,get,pojo,field,at,i,string,name,field,get,field,get,name,if,name,equals,field1,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,field2,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,key,assert,assert,equals,basic,type,info,field,get,type,information,else,assert,fail,unexpected,field,field
PojoTypeExtractionTest -> @Test 	public void testPojoWithGenericsSomeFieldsGeneric();1470775474;Test if the TypeExtractor is accepting untyped generics,_making them GenericTypes;@Test_	public void testPojoWithGenericsSomeFieldsGeneric() {_		TypeInformation<?> typeForClass = TypeExtractor.createTypeInfo(PojoWithGenerics.class)__		Assert.assertTrue(typeForClass instanceof PojoTypeInfo<?>)__		PojoTypeInfo<?> pojoTypeForClass = (PojoTypeInfo<?>) typeForClass__		for(int i = 0_ i < pojoTypeForClass.getArity()_ i++) {_			PojoField field = pojoTypeForClass.getPojoFieldAt(i)__			String name = field.getField().getName()__			if(name.equals("field1")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("field2")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("key")) {_				Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, field.getTypeInformation())__			} else {_				Assert.fail("Unexpected field "+field)__			}_		}_	};test,if,the,type,extractor,is,accepting,untyped,generics,making,them,generic,types;test,public,void,test,pojo,with,generics,some,fields,generic,type,information,type,for,class,type,extractor,create,type,info,pojo,with,generics,class,assert,assert,true,type,for,class,instanceof,pojo,type,info,pojo,type,info,pojo,type,for,class,pojo,type,info,type,for,class,for,int,i,0,i,pojo,type,for,class,get,arity,i,pojo,field,field,pojo,type,for,class,get,pojo,field,at,i,string,name,field,get,field,get,name,if,name,equals,field1,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,field2,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,key,assert,assert,equals,basic,type,info,field,get,type,information,else,assert,fail,unexpected,field,field
PojoTypeExtractionTest -> @Test 	public void testPojoWithGenericsSomeFieldsGeneric();1484924697;Test if the TypeExtractor is accepting untyped generics,_making them GenericTypes;@Test_	public void testPojoWithGenericsSomeFieldsGeneric() {_		TypeInformation<?> typeForClass = TypeExtractor.createTypeInfo(PojoWithGenerics.class)__		Assert.assertTrue(typeForClass instanceof PojoTypeInfo<?>)__		PojoTypeInfo<?> pojoTypeForClass = (PojoTypeInfo<?>) typeForClass__		for(int i = 0_ i < pojoTypeForClass.getArity()_ i++) {_			PojoField field = pojoTypeForClass.getPojoFieldAt(i)__			String name = field.getField().getName()__			if(name.equals("field1")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("field2")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("key")) {_				Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, field.getTypeInformation())__			} else {_				Assert.fail("Unexpected field "+field)__			}_		}_	};test,if,the,type,extractor,is,accepting,untyped,generics,making,them,generic,types;test,public,void,test,pojo,with,generics,some,fields,generic,type,information,type,for,class,type,extractor,create,type,info,pojo,with,generics,class,assert,assert,true,type,for,class,instanceof,pojo,type,info,pojo,type,info,pojo,type,for,class,pojo,type,info,type,for,class,for,int,i,0,i,pojo,type,for,class,get,arity,i,pojo,field,field,pojo,type,for,class,get,pojo,field,at,i,string,name,field,get,field,get,name,if,name,equals,field1,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,field2,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,key,assert,assert,equals,basic,type,info,field,get,type,information,else,assert,fail,unexpected,field,field
PojoTypeExtractionTest -> @Test 	public void testPojoWithGenericsSomeFieldsGeneric();1525452496;Test if the TypeExtractor is accepting untyped generics,_making them GenericTypes;@Test_	public void testPojoWithGenericsSomeFieldsGeneric() {_		TypeInformation<?> typeForClass = TypeExtractor.createTypeInfo(PojoWithGenerics.class)__		Assert.assertTrue(typeForClass instanceof PojoTypeInfo<?>)__		PojoTypeInfo<?> pojoTypeForClass = (PojoTypeInfo<?>) typeForClass__		for(int i = 0_ i < pojoTypeForClass.getArity()_ i++) {_			PojoField field = pojoTypeForClass.getPojoFieldAt(i)__			String name = field.getField().getName()__			if(name.equals("field1")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("field2")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("key")) {_				Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, field.getTypeInformation())__			} else {_				Assert.fail("Unexpected field "+field)__			}_		}_	};test,if,the,type,extractor,is,accepting,untyped,generics,making,them,generic,types;test,public,void,test,pojo,with,generics,some,fields,generic,type,information,type,for,class,type,extractor,create,type,info,pojo,with,generics,class,assert,assert,true,type,for,class,instanceof,pojo,type,info,pojo,type,info,pojo,type,for,class,pojo,type,info,type,for,class,for,int,i,0,i,pojo,type,for,class,get,arity,i,pojo,field,field,pojo,type,for,class,get,pojo,field,at,i,string,name,field,get,field,get,name,if,name,equals,field1,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,field2,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,key,assert,assert,equals,basic,type,info,field,get,type,information,else,assert,fail,unexpected,field,field
PojoTypeExtractionTest -> @Test 	public void testPojoWithGenericsSomeFieldsGeneric();1526992031;Test if the TypeExtractor is accepting untyped generics,_making them GenericTypes;@Test_	public void testPojoWithGenericsSomeFieldsGeneric() {_		TypeInformation<?> typeForClass = TypeExtractor.createTypeInfo(PojoWithGenerics.class)__		Assert.assertTrue(typeForClass instanceof PojoTypeInfo<?>)__		PojoTypeInfo<?> pojoTypeForClass = (PojoTypeInfo<?>) typeForClass__		for(int i = 0_ i < pojoTypeForClass.getArity()_ i++) {_			PojoField field = pojoTypeForClass.getPojoFieldAt(i)__			String name = field.getField().getName()__			if(name.equals("field1")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("field2")) {_				Assert.assertEquals(new GenericTypeInfo<Object>(Object.class), field.getTypeInformation())__			} else if (name.equals("key")) {_				Assert.assertEquals(BasicTypeInfo.INT_TYPE_INFO, field.getTypeInformation())__			} else {_				Assert.fail("Unexpected field "+field)__			}_		}_	};test,if,the,type,extractor,is,accepting,untyped,generics,making,them,generic,types;test,public,void,test,pojo,with,generics,some,fields,generic,type,information,type,for,class,type,extractor,create,type,info,pojo,with,generics,class,assert,assert,true,type,for,class,instanceof,pojo,type,info,pojo,type,info,pojo,type,for,class,pojo,type,info,type,for,class,for,int,i,0,i,pojo,type,for,class,get,arity,i,pojo,field,field,pojo,type,for,class,get,pojo,field,at,i,string,name,field,get,field,get,name,if,name,equals,field1,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,field2,assert,assert,equals,new,generic,type,info,object,object,class,field,get,type,information,else,if,name,equals,key,assert,assert,equals,basic,type,info,field,get,type,information,else,assert,fail,unexpected,field,field
