# id;timestamp;commentText;codeText;commentWords;codeWords
LocalFileSystemTest -> @Test 	public void testDeletePathIfEmpty() throws IOException;1481644337;Test that {@link FileUtils#deletePathIfEmpty(FileSystem, Path)} deletes the path if it is_empty. A path can only be empty if it is a directory which does not contain any_files/directories.;@Test_	public void testDeletePathIfEmpty() throws IOException {_		File file = temporaryFolder.newFile()__		File directory = temporaryFolder.newFolder()__		File directoryFile = new File(directory, UUID.randomUUID().toString())___		assertTrue(directoryFile.createNewFile())___		Path filePath = new Path(file.toURI())__		Path directoryPath = new Path(directory.toURI())__		Path directoryFilePath = new Path(directoryFile.toURI())___		FileSystem fs = FileSystem.getLocalFileSystem()___		_		assertTrue(fs.exists(filePath))__		assertTrue(fs.exists(directoryFilePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, filePath))__		assertTrue(fs.exists(filePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertTrue(fs.exists(directoryPath))___		_		assertTrue(fs.delete(directoryFilePath, false))___		_		assertTrue(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertFalse(fs.exists(directoryPath))__	};test,that,link,file,utils,delete,path,if,empty,file,system,path,deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,files,directories;test,public,void,test,delete,path,if,empty,throws,ioexception,file,file,temporary,folder,new,file,file,directory,temporary,folder,new,folder,file,directory,file,new,file,directory,uuid,random,uuid,to,string,assert,true,directory,file,create,new,file,path,file,path,new,path,file,to,uri,path,directory,path,new,path,directory,to,uri,path,directory,file,path,new,path,directory,file,to,uri,file,system,fs,file,system,get,local,file,system,assert,true,fs,exists,file,path,assert,true,fs,exists,directory,file,path,assert,false,file,utils,delete,path,if,empty,fs,file,path,assert,true,fs,exists,file,path,assert,false,file,utils,delete,path,if,empty,fs,directory,path,assert,true,fs,exists,directory,path,assert,true,fs,delete,directory,file,path,false,assert,true,file,utils,delete,path,if,empty,fs,directory,path,assert,false,fs,exists,directory,path
LocalFileSystemTest -> @Test 	public void testDeletePathIfEmpty() throws IOException;1492761311;Test that {@link FileUtils#deletePathIfEmpty(FileSystem, Path)} deletes the path if it is_empty. A path can only be empty if it is a directory which does not contain any_files/directories.;@Test_	public void testDeletePathIfEmpty() throws IOException {_		File file = temporaryFolder.newFile()__		File directory = temporaryFolder.newFolder()__		File directoryFile = new File(directory, UUID.randomUUID().toString())___		assertTrue(directoryFile.createNewFile())___		Path filePath = new Path(file.toURI())__		Path directoryPath = new Path(directory.toURI())__		Path directoryFilePath = new Path(directoryFile.toURI())___		FileSystem fs = FileSystem.getLocalFileSystem()___		_		assertTrue(fs.exists(filePath))__		assertTrue(fs.exists(directoryFilePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, filePath))__		assertTrue(fs.exists(filePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertTrue(fs.exists(directoryPath))___		_		assertTrue(fs.delete(directoryFilePath, false))___		_		assertTrue(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertFalse(fs.exists(directoryPath))__	};test,that,link,file,utils,delete,path,if,empty,file,system,path,deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,files,directories;test,public,void,test,delete,path,if,empty,throws,ioexception,file,file,temporary,folder,new,file,file,directory,temporary,folder,new,folder,file,directory,file,new,file,directory,uuid,random,uuid,to,string,assert,true,directory,file,create,new,file,path,file,path,new,path,file,to,uri,path,directory,path,new,path,directory,to,uri,path,directory,file,path,new,path,directory,file,to,uri,file,system,fs,file,system,get,local,file,system,assert,true,fs,exists,file,path,assert,true,fs,exists,directory,file,path,assert,false,file,utils,delete,path,if,empty,fs,file,path,assert,true,fs,exists,file,path,assert,false,file,utils,delete,path,if,empty,fs,directory,path,assert,true,fs,exists,directory,path,assert,true,fs,delete,directory,file,path,false,assert,true,file,utils,delete,path,if,empty,fs,directory,path,assert,false,fs,exists,directory,path
LocalFileSystemTest -> @Test 	public void testDeletePathIfEmpty() throws IOException;1492761311;Test that {@link FileUtils#deletePathIfEmpty(FileSystem, Path)} deletes the path if it is_empty. A path can only be empty if it is a directory which does not contain any_files/directories.;@Test_	public void testDeletePathIfEmpty() throws IOException {_		File file = temporaryFolder.newFile()__		File directory = temporaryFolder.newFolder()__		File directoryFile = new File(directory, UUID.randomUUID().toString())___		assertTrue(directoryFile.createNewFile())___		Path filePath = new Path(file.toURI())__		Path directoryPath = new Path(directory.toURI())__		Path directoryFilePath = new Path(directoryFile.toURI())___		FileSystem fs = FileSystem.getLocalFileSystem()___		_		assertTrue(fs.exists(filePath))__		assertTrue(fs.exists(directoryFilePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, filePath))__		assertTrue(fs.exists(filePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertTrue(fs.exists(directoryPath))___		_		assertTrue(fs.delete(directoryFilePath, false))___		_		assertTrue(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertFalse(fs.exists(directoryPath))__	};test,that,link,file,utils,delete,path,if,empty,file,system,path,deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,files,directories;test,public,void,test,delete,path,if,empty,throws,ioexception,file,file,temporary,folder,new,file,file,directory,temporary,folder,new,folder,file,directory,file,new,file,directory,uuid,random,uuid,to,string,assert,true,directory,file,create,new,file,path,file,path,new,path,file,to,uri,path,directory,path,new,path,directory,to,uri,path,directory,file,path,new,path,directory,file,to,uri,file,system,fs,file,system,get,local,file,system,assert,true,fs,exists,file,path,assert,true,fs,exists,directory,file,path,assert,false,file,utils,delete,path,if,empty,fs,file,path,assert,true,fs,exists,file,path,assert,false,file,utils,delete,path,if,empty,fs,directory,path,assert,true,fs,exists,directory,path,assert,true,fs,delete,directory,file,path,false,assert,true,file,utils,delete,path,if,empty,fs,directory,path,assert,false,fs,exists,directory,path
LocalFileSystemTest -> @Test 	public void testDeletePathIfEmpty() throws IOException;1510933709;Test that {@link FileUtils#deletePathIfEmpty(FileSystem, Path)} deletes the path if it is_empty. A path can only be empty if it is a directory which does not contain any_files/directories.;@Test_	public void testDeletePathIfEmpty() throws IOException {_		File file = temporaryFolder.newFile()__		File directory = temporaryFolder.newFolder()__		File directoryFile = new File(directory, UUID.randomUUID().toString())___		assertTrue(directoryFile.createNewFile())___		Path filePath = new Path(file.toURI())__		Path directoryPath = new Path(directory.toURI())__		Path directoryFilePath = new Path(directoryFile.toURI())___		FileSystem fs = FileSystem.getLocalFileSystem()___		_		assertTrue(fs.exists(filePath))__		assertTrue(fs.exists(directoryFilePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, filePath))__		assertTrue(fs.exists(filePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertTrue(fs.exists(directoryPath))___		_		assertTrue(fs.delete(directoryFilePath, false))___		_		assertTrue(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertFalse(fs.exists(directoryPath))__	};test,that,link,file,utils,delete,path,if,empty,file,system,path,deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,files,directories;test,public,void,test,delete,path,if,empty,throws,ioexception,file,file,temporary,folder,new,file,file,directory,temporary,folder,new,folder,file,directory,file,new,file,directory,uuid,random,uuid,to,string,assert,true,directory,file,create,new,file,path,file,path,new,path,file,to,uri,path,directory,path,new,path,directory,to,uri,path,directory,file,path,new,path,directory,file,to,uri,file,system,fs,file,system,get,local,file,system,assert,true,fs,exists,file,path,assert,true,fs,exists,directory,file,path,assert,false,file,utils,delete,path,if,empty,fs,file,path,assert,true,fs,exists,file,path,assert,false,file,utils,delete,path,if,empty,fs,directory,path,assert,true,fs,exists,directory,path,assert,true,fs,delete,directory,file,path,false,assert,true,file,utils,delete,path,if,empty,fs,directory,path,assert,false,fs,exists,directory,path
LocalFileSystemTest -> @Test 	public void testDeletePathIfEmpty() throws IOException;1512410190;Test that {@link FileUtils#deletePathIfEmpty(FileSystem, Path)} deletes the path if it is_empty. A path can only be empty if it is a directory which does not contain any_files/directories.;@Test_	public void testDeletePathIfEmpty() throws IOException {_		File file = temporaryFolder.newFile()__		File directory = temporaryFolder.newFolder()__		File directoryFile = new File(directory, UUID.randomUUID().toString())___		assertTrue(directoryFile.createNewFile())___		Path filePath = new Path(file.toURI())__		Path directoryPath = new Path(directory.toURI())__		Path directoryFilePath = new Path(directoryFile.toURI())___		FileSystem fs = FileSystem.getLocalFileSystem()___		_		assertTrue(fs.exists(filePath))__		assertTrue(fs.exists(directoryFilePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, filePath))__		assertTrue(fs.exists(filePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertTrue(fs.exists(directoryPath))___		_		assertTrue(fs.delete(directoryFilePath, false))___		_		assertTrue(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertFalse(fs.exists(directoryPath))__	};test,that,link,file,utils,delete,path,if,empty,file,system,path,deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,files,directories;test,public,void,test,delete,path,if,empty,throws,ioexception,file,file,temporary,folder,new,file,file,directory,temporary,folder,new,folder,file,directory,file,new,file,directory,uuid,random,uuid,to,string,assert,true,directory,file,create,new,file,path,file,path,new,path,file,to,uri,path,directory,path,new,path,directory,to,uri,path,directory,file,path,new,path,directory,file,to,uri,file,system,fs,file,system,get,local,file,system,assert,true,fs,exists,file,path,assert,true,fs,exists,directory,file,path,assert,false,file,utils,delete,path,if,empty,fs,file,path,assert,true,fs,exists,file,path,assert,false,file,utils,delete,path,if,empty,fs,directory,path,assert,true,fs,exists,directory,path,assert,true,fs,delete,directory,file,path,false,assert,true,file,utils,delete,path,if,empty,fs,directory,path,assert,false,fs,exists,directory,path
LocalFileSystemTest -> @Test 	public void testDeletePathIfEmpty() throws IOException;1530698526;Test that {@link FileUtils#deletePathIfEmpty(FileSystem, Path)} deletes the path if it is_empty. A path can only be empty if it is a directory which does not contain any_files/directories.;@Test_	public void testDeletePathIfEmpty() throws IOException {_		File file = temporaryFolder.newFile()__		File directory = temporaryFolder.newFolder()__		File directoryFile = new File(directory, UUID.randomUUID().toString())___		assertTrue(directoryFile.createNewFile())___		Path filePath = new Path(file.toURI())__		Path directoryPath = new Path(directory.toURI())__		Path directoryFilePath = new Path(directoryFile.toURI())___		FileSystem fs = FileSystem.getLocalFileSystem()___		_		assertTrue(fs.exists(filePath))__		assertTrue(fs.exists(directoryFilePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, filePath))__		assertTrue(fs.exists(filePath))___		_		assertFalse(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertTrue(fs.exists(directoryPath))___		_		assertTrue(fs.delete(directoryFilePath, false))___		_		assertTrue(FileUtils.deletePathIfEmpty(fs, directoryPath))__		assertFalse(fs.exists(directoryPath))__	};test,that,link,file,utils,delete,path,if,empty,file,system,path,deletes,the,path,if,it,is,empty,a,path,can,only,be,empty,if,it,is,a,directory,which,does,not,contain,any,files,directories;test,public,void,test,delete,path,if,empty,throws,ioexception,file,file,temporary,folder,new,file,file,directory,temporary,folder,new,folder,file,directory,file,new,file,directory,uuid,random,uuid,to,string,assert,true,directory,file,create,new,file,path,file,path,new,path,file,to,uri,path,directory,path,new,path,directory,to,uri,path,directory,file,path,new,path,directory,file,to,uri,file,system,fs,file,system,get,local,file,system,assert,true,fs,exists,file,path,assert,true,fs,exists,directory,file,path,assert,false,file,utils,delete,path,if,empty,fs,file,path,assert,true,fs,exists,file,path,assert,false,file,utils,delete,path,if,empty,fs,directory,path,assert,true,fs,exists,directory,path,assert,true,fs,delete,directory,file,path,false,assert,true,file,utils,delete,path,if,empty,fs,directory,path,assert,false,fs,exists,directory,path
LocalFileSystemTest -> @Test 	public void testLocalFilesystem();1405024514;This test checks the functionality of the {@link LocalFileSystem} class.;@Test_	public void testLocalFilesystem() {__		File tempdir = new File(CommonTestUtils.getTempDir() + File.separator_			+ CommonTestUtils.getRandomDirectoryName() + File.separator)___		_		_		while (tempdir.exists()) {_			tempdir = new File(CommonTestUtils.getTempDir() + File.separator + CommonTestUtils.getRandomDirectoryName()_				+ File.separator)__		}__		final File testfile1 = new File(tempdir.getAbsolutePath() + File.separator_			+ CommonTestUtils.getRandomFilename())___		final File testfile2 = new File(tempdir.getAbsolutePath() + File.separator_			+ CommonTestUtils.getRandomFilename())___		final Path pathtotestfile1 = new Path(testfile1.toURI().getPath())__		final Path pathtotestfile2 = new Path(testfile2.toURI().getPath())___		try {_			final LocalFileSystem lfs = new LocalFileSystem()___			final Path pathtotmpdir = new Path(tempdir.toURI().getPath())___			__			_			assertFalse(lfs.exists(pathtotmpdir))__			tempdir.mkdirs()___			_			assertTrue(lfs.exists(pathtotmpdir))__			final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir)___			_			assertTrue(localstatus1.isDir())___			_			final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir)___			_			assertTrue(statusforfiles.length == 0)___			_			lfs.delete(pathtotmpdir, true)___			_			assertFalse(lfs.exists(pathtotmpdir))__			assertFalse(tempdir.exists())___			_			lfs.mkdirs(pathtotmpdir)___			_			assertTrue(tempdir.exists())___			__			_			final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, false)__			testfile2.createNewFile()___			_			assertTrue(testfile1.exists())__			assertTrue(lfs.exists(pathtotestfile2))___			_			final byte[] testbytes = { 1, 2, 3, 4, 5 }__			lfsoutput1.write(testbytes)__			lfsoutput1.close()___			assertEquals(testfile1.length(), 5l)___			final FileInputStream fisfile1 = new FileInputStream(testfile1)__			byte[] testbytestest = new byte[5]__			fisfile1.read(testbytestest)__			fisfile1.close()___			_			_			assertTrue(Arrays.equals(testbytes, testbytestest))___			_			assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length())___			_			assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length())___			_			final FileOutputStream fosfile2 = new FileOutputStream(testfile2)__			fosfile2.write(testbytes)__			fosfile2.close()___			testbytestest = new byte[5]__			final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2)__			assertEquals(lfsinput2.read(testbytestest), 5)__			lfsinput2.close()__			assertTrue(Arrays.equals(testbytes, testbytestest))___			_			assertEquals(lfs.listStatus(pathtotmpdir).length, 2)___			_			assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1)___			_			assertTrue(lfs.delete(pathtotestfile1, false))___			_			assertTrue(lfs.delete(pathtotmpdir, true))___			assertTrue(!tempdir.exists())___		} catch (IOException e) {_			fail(e.getMessage())__		} finally {_			_			testfile1.delete()__			testfile2.delete()__			tempdir.delete()__		}_	};this,test,checks,the,functionality,of,the,link,local,file,system,class;test,public,void,test,local,filesystem,file,tempdir,new,file,common,test,utils,get,temp,dir,file,separator,common,test,utils,get,random,directory,name,file,separator,while,tempdir,exists,tempdir,new,file,common,test,utils,get,temp,dir,file,separator,common,test,utils,get,random,directory,name,file,separator,final,file,testfile1,new,file,tempdir,get,absolute,path,file,separator,common,test,utils,get,random,filename,final,file,testfile2,new,file,tempdir,get,absolute,path,file,separator,common,test,utils,get,random,filename,final,path,pathtotestfile1,new,path,testfile1,to,uri,get,path,final,path,pathtotestfile2,new,path,testfile2,to,uri,get,path,try,final,local,file,system,lfs,new,local,file,system,final,path,pathtotmpdir,new,path,tempdir,to,uri,get,path,assert,false,lfs,exists,pathtotmpdir,tempdir,mkdirs,assert,true,lfs,exists,pathtotmpdir,final,file,status,localstatus1,lfs,get,file,status,pathtotmpdir,assert,true,localstatus1,is,dir,final,file,status,statusforfiles,lfs,list,status,pathtotmpdir,assert,true,statusforfiles,length,0,lfs,delete,pathtotmpdir,true,assert,false,lfs,exists,pathtotmpdir,assert,false,tempdir,exists,lfs,mkdirs,pathtotmpdir,assert,true,tempdir,exists,final,fsdata,output,stream,lfsoutput1,lfs,create,pathtotestfile1,false,testfile2,create,new,file,assert,true,testfile1,exists,assert,true,lfs,exists,pathtotestfile2,final,byte,testbytes,1,2,3,4,5,lfsoutput1,write,testbytes,lfsoutput1,close,assert,equals,testfile1,length,5l,final,file,input,stream,fisfile1,new,file,input,stream,testfile1,byte,testbytestest,new,byte,5,fisfile1,read,testbytestest,fisfile1,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,get,file,status,pathtotestfile1,get,len,testfile1,length,assert,equals,lfs,list,status,pathtotestfile1,0,get,len,testfile1,length,final,file,output,stream,fosfile2,new,file,output,stream,testfile2,fosfile2,write,testbytes,fosfile2,close,testbytestest,new,byte,5,final,fsdata,input,stream,lfsinput2,lfs,open,pathtotestfile2,assert,equals,lfsinput2,read,testbytestest,5,lfsinput2,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,list,status,pathtotmpdir,length,2,assert,equals,lfs,get,file,block,locations,lfs,get,file,status,pathtotestfile1,0,0,length,1,assert,true,lfs,delete,pathtotestfile1,false,assert,true,lfs,delete,pathtotmpdir,true,assert,true,tempdir,exists,catch,ioexception,e,fail,e,get,message,finally,testfile1,delete,testfile2,delete,tempdir,delete
LocalFileSystemTest -> @Test 	public void testLocalFilesystem();1405090423;This test checks the functionality of the {@link LocalFileSystem} class.;@Test_	public void testLocalFilesystem() {__		File tempdir = new File(CommonTestUtils.getTempDir() + File.separator_			+ CommonTestUtils.getRandomDirectoryName() + File.separator)___		_		_		while (tempdir.exists()) {_			tempdir = new File(CommonTestUtils.getTempDir() + File.separator + CommonTestUtils.getRandomDirectoryName()_				+ File.separator)__		}__		final File testfile1 = new File(tempdir.getAbsolutePath() + File.separator_			+ CommonTestUtils.getRandomFilename())___		final File testfile2 = new File(tempdir.getAbsolutePath() + File.separator_			+ CommonTestUtils.getRandomFilename())___		final Path pathtotestfile1 = new Path(testfile1.toURI().getPath())__		final Path pathtotestfile2 = new Path(testfile2.toURI().getPath())___		try {_			final LocalFileSystem lfs = new LocalFileSystem()___			final Path pathtotmpdir = new Path(tempdir.toURI().getPath())___			__			_			assertFalse(lfs.exists(pathtotmpdir))__			tempdir.mkdirs()___			_			assertTrue(lfs.exists(pathtotmpdir))__			final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir)___			_			assertTrue(localstatus1.isDir())___			_			final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir)___			_			assertTrue(statusforfiles.length == 0)___			_			lfs.delete(pathtotmpdir, true)___			_			assertFalse(lfs.exists(pathtotmpdir))__			assertFalse(tempdir.exists())___			_			lfs.mkdirs(pathtotmpdir)___			_			assertTrue(tempdir.exists())___			__			_			final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, false)__			testfile2.createNewFile()___			_			assertTrue(testfile1.exists())__			assertTrue(lfs.exists(pathtotestfile2))___			_			final byte[] testbytes = { 1, 2, 3, 4, 5 }__			lfsoutput1.write(testbytes)__			lfsoutput1.close()___			assertEquals(testfile1.length(), 5l)___			final FileInputStream fisfile1 = new FileInputStream(testfile1)__			byte[] testbytestest = new byte[5]__			fisfile1.read(testbytestest)__			fisfile1.close()___			_			_			assertTrue(Arrays.equals(testbytes, testbytestest))___			_			assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length())___			_			assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length())___			_			final FileOutputStream fosfile2 = new FileOutputStream(testfile2)__			fosfile2.write(testbytes)__			fosfile2.close()___			testbytestest = new byte[5]__			final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2)__			assertEquals(lfsinput2.read(testbytestest), 5)__			lfsinput2.close()__			assertTrue(Arrays.equals(testbytes, testbytestest))___			_			assertEquals(lfs.listStatus(pathtotmpdir).length, 2)___			_			assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1)___			_			assertTrue(lfs.delete(pathtotestfile1, false))___			_			assertTrue(lfs.delete(pathtotmpdir, true))___			assertTrue(!tempdir.exists())___		} catch (IOException e) {_			fail(e.getMessage())__		} finally {_			_			testfile1.delete()__			testfile2.delete()__			tempdir.delete()__		}_	};this,test,checks,the,functionality,of,the,link,local,file,system,class;test,public,void,test,local,filesystem,file,tempdir,new,file,common,test,utils,get,temp,dir,file,separator,common,test,utils,get,random,directory,name,file,separator,while,tempdir,exists,tempdir,new,file,common,test,utils,get,temp,dir,file,separator,common,test,utils,get,random,directory,name,file,separator,final,file,testfile1,new,file,tempdir,get,absolute,path,file,separator,common,test,utils,get,random,filename,final,file,testfile2,new,file,tempdir,get,absolute,path,file,separator,common,test,utils,get,random,filename,final,path,pathtotestfile1,new,path,testfile1,to,uri,get,path,final,path,pathtotestfile2,new,path,testfile2,to,uri,get,path,try,final,local,file,system,lfs,new,local,file,system,final,path,pathtotmpdir,new,path,tempdir,to,uri,get,path,assert,false,lfs,exists,pathtotmpdir,tempdir,mkdirs,assert,true,lfs,exists,pathtotmpdir,final,file,status,localstatus1,lfs,get,file,status,pathtotmpdir,assert,true,localstatus1,is,dir,final,file,status,statusforfiles,lfs,list,status,pathtotmpdir,assert,true,statusforfiles,length,0,lfs,delete,pathtotmpdir,true,assert,false,lfs,exists,pathtotmpdir,assert,false,tempdir,exists,lfs,mkdirs,pathtotmpdir,assert,true,tempdir,exists,final,fsdata,output,stream,lfsoutput1,lfs,create,pathtotestfile1,false,testfile2,create,new,file,assert,true,testfile1,exists,assert,true,lfs,exists,pathtotestfile2,final,byte,testbytes,1,2,3,4,5,lfsoutput1,write,testbytes,lfsoutput1,close,assert,equals,testfile1,length,5l,final,file,input,stream,fisfile1,new,file,input,stream,testfile1,byte,testbytestest,new,byte,5,fisfile1,read,testbytestest,fisfile1,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,get,file,status,pathtotestfile1,get,len,testfile1,length,assert,equals,lfs,list,status,pathtotestfile1,0,get,len,testfile1,length,final,file,output,stream,fosfile2,new,file,output,stream,testfile2,fosfile2,write,testbytes,fosfile2,close,testbytestest,new,byte,5,final,fsdata,input,stream,lfsinput2,lfs,open,pathtotestfile2,assert,equals,lfsinput2,read,testbytestest,5,lfsinput2,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,list,status,pathtotmpdir,length,2,assert,equals,lfs,get,file,block,locations,lfs,get,file,status,pathtotestfile1,0,0,length,1,assert,true,lfs,delete,pathtotestfile1,false,assert,true,lfs,delete,pathtotmpdir,true,assert,true,tempdir,exists,catch,ioexception,e,fail,e,get,message,finally,testfile1,delete,testfile2,delete,tempdir,delete
LocalFileSystemTest -> @Test 	public void testLocalFilesystem();1411473593;This test checks the functionality of the {@link LocalFileSystem} class.;@Test_	public void testLocalFilesystem() {__		File tempdir = new File(CommonTestUtils.getTempDir() + File.separator_			+ CommonTestUtils.getRandomDirectoryName() + File.separator)___		_		_		while (tempdir.exists()) {_			tempdir = new File(CommonTestUtils.getTempDir() + File.separator + CommonTestUtils.getRandomDirectoryName()_				+ File.separator)__		}__		final File testfile1 = new File(tempdir.getAbsolutePath() + File.separator_			+ CommonTestUtils.getRandomFilename())___		final File testfile2 = new File(tempdir.getAbsolutePath() + File.separator_			+ CommonTestUtils.getRandomFilename())___		final Path pathtotestfile1 = new Path(testfile1.toURI().getPath())__		final Path pathtotestfile2 = new Path(testfile2.toURI().getPath())___		try {_			final LocalFileSystem lfs = new LocalFileSystem()___			final Path pathtotmpdir = new Path(tempdir.toURI().getPath())___			__			_			assertFalse(lfs.exists(pathtotmpdir))__			tempdir.mkdirs()___			_			assertTrue(lfs.exists(pathtotmpdir))__			final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir)___			_			assertTrue(localstatus1.isDir())___			_			final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir)___			_			assertTrue(statusforfiles.length == 0)___			_			lfs.delete(pathtotmpdir, true)___			_			assertFalse(lfs.exists(pathtotmpdir))__			assertFalse(tempdir.exists())___			_			lfs.mkdirs(pathtotmpdir)___			_			assertTrue(tempdir.exists())___			__			_			final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, false)__			testfile2.createNewFile()___			_			assertTrue(testfile1.exists())__			assertTrue(lfs.exists(pathtotestfile2))___			_			final byte[] testbytes = { 1, 2, 3, 4, 5 }__			lfsoutput1.write(testbytes)__			lfsoutput1.close()___			assertEquals(testfile1.length(), 5l)___			final FileInputStream fisfile1 = new FileInputStream(testfile1)__			byte[] testbytestest = new byte[5]__			fisfile1.read(testbytestest)__			fisfile1.close()___			_			_			assertTrue(Arrays.equals(testbytes, testbytestest))___			_			assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length())___			_			assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length())___			_			final FileOutputStream fosfile2 = new FileOutputStream(testfile2)__			fosfile2.write(testbytes)__			fosfile2.close()___			testbytestest = new byte[5]__			final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2)__			assertEquals(lfsinput2.read(testbytestest), 5)__			lfsinput2.close()__			assertTrue(Arrays.equals(testbytes, testbytestest))___			_			assertEquals(lfs.listStatus(pathtotmpdir).length, 2)___			_			assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1)___			_			assertTrue(lfs.delete(pathtotestfile1, false))___			_			assertTrue(lfs.delete(pathtotmpdir, true))___			assertTrue(!tempdir.exists())___		} catch (IOException e) {_			fail(e.getMessage())__		} finally {_			_			testfile1.delete()__			testfile2.delete()__			tempdir.delete()__		}_	};this,test,checks,the,functionality,of,the,link,local,file,system,class;test,public,void,test,local,filesystem,file,tempdir,new,file,common,test,utils,get,temp,dir,file,separator,common,test,utils,get,random,directory,name,file,separator,while,tempdir,exists,tempdir,new,file,common,test,utils,get,temp,dir,file,separator,common,test,utils,get,random,directory,name,file,separator,final,file,testfile1,new,file,tempdir,get,absolute,path,file,separator,common,test,utils,get,random,filename,final,file,testfile2,new,file,tempdir,get,absolute,path,file,separator,common,test,utils,get,random,filename,final,path,pathtotestfile1,new,path,testfile1,to,uri,get,path,final,path,pathtotestfile2,new,path,testfile2,to,uri,get,path,try,final,local,file,system,lfs,new,local,file,system,final,path,pathtotmpdir,new,path,tempdir,to,uri,get,path,assert,false,lfs,exists,pathtotmpdir,tempdir,mkdirs,assert,true,lfs,exists,pathtotmpdir,final,file,status,localstatus1,lfs,get,file,status,pathtotmpdir,assert,true,localstatus1,is,dir,final,file,status,statusforfiles,lfs,list,status,pathtotmpdir,assert,true,statusforfiles,length,0,lfs,delete,pathtotmpdir,true,assert,false,lfs,exists,pathtotmpdir,assert,false,tempdir,exists,lfs,mkdirs,pathtotmpdir,assert,true,tempdir,exists,final,fsdata,output,stream,lfsoutput1,lfs,create,pathtotestfile1,false,testfile2,create,new,file,assert,true,testfile1,exists,assert,true,lfs,exists,pathtotestfile2,final,byte,testbytes,1,2,3,4,5,lfsoutput1,write,testbytes,lfsoutput1,close,assert,equals,testfile1,length,5l,final,file,input,stream,fisfile1,new,file,input,stream,testfile1,byte,testbytestest,new,byte,5,fisfile1,read,testbytestest,fisfile1,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,get,file,status,pathtotestfile1,get,len,testfile1,length,assert,equals,lfs,list,status,pathtotestfile1,0,get,len,testfile1,length,final,file,output,stream,fosfile2,new,file,output,stream,testfile2,fosfile2,write,testbytes,fosfile2,close,testbytestest,new,byte,5,final,fsdata,input,stream,lfsinput2,lfs,open,pathtotestfile2,assert,equals,lfsinput2,read,testbytestest,5,lfsinput2,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,list,status,pathtotmpdir,length,2,assert,equals,lfs,get,file,block,locations,lfs,get,file,status,pathtotestfile1,0,0,length,1,assert,true,lfs,delete,pathtotestfile1,false,assert,true,lfs,delete,pathtotmpdir,true,assert,true,tempdir,exists,catch,ioexception,e,fail,e,get,message,finally,testfile1,delete,testfile2,delete,tempdir,delete
LocalFileSystemTest -> @Test 	public void testLocalFilesystem();1467726586;This test checks the functionality of the {@link LocalFileSystem} class.;@Test_	public void testLocalFilesystem() {_		final File tempdir = new File(CommonTestUtils.getTempDir(), UUID.randomUUID().toString())___		final File testfile1 = new File(tempdir, UUID.randomUUID().toString())__		final File testfile2 = new File(tempdir, UUID.randomUUID().toString())___		final Path pathtotestfile1 = new Path(testfile1.toURI().getPath())__		final Path pathtotestfile2 = new Path(testfile2.toURI().getPath())___		try {_			final LocalFileSystem lfs = new LocalFileSystem()___			final Path pathtotmpdir = new Path(tempdir.toURI().getPath())___			__			_			assertFalse(lfs.exists(pathtotmpdir))__			assertTrue(tempdir.mkdirs())___			_			assertTrue(lfs.exists(pathtotmpdir))__			final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir)___			_			assertTrue(localstatus1.isDir())___			_			final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir)___			_			assertTrue(statusforfiles.length == 0)___			_			lfs.delete(pathtotmpdir, true)___			_			assertFalse(lfs.exists(pathtotmpdir))__			assertFalse(tempdir.exists())___			_			lfs.mkdirs(pathtotmpdir)___			_			assertTrue(tempdir.exists())___			__			_			final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, false)__			assertTrue(testfile2.createNewFile())___			_			assertTrue(testfile1.exists())__			assertTrue(lfs.exists(pathtotestfile2))___			_			final byte[] testbytes = { 1, 2, 3, 4, 5 }__			lfsoutput1.write(testbytes)__			lfsoutput1.close()___			assertEquals(testfile1.length(), 5L)___			final FileInputStream fisfile1 = new FileInputStream(testfile1)__			byte[] testbytestest = new byte[5]__			assertEquals(testbytestest.length, fisfile1.read(testbytestest))__			fisfile1.close()__			_			assertArrayEquals(testbytes, testbytestest)___			_			assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length())___			_			assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length())___			_			final FileOutputStream fosfile2 = new FileOutputStream(testfile2)__			fosfile2.write(testbytes)__			fosfile2.close()___			testbytestest = new byte[5]__			final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2)__			assertEquals(lfsinput2.read(testbytestest), 5)__			lfsinput2.close()__			assertTrue(Arrays.equals(testbytes, testbytestest))___			_			assertEquals(lfs.listStatus(pathtotmpdir).length, 2)___			_			assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1)___			_			assertTrue(lfs.delete(pathtotestfile1, false))___			_			assertTrue(lfs.delete(pathtotmpdir, true))___			assertTrue(!tempdir.exists())___		} catch (IOException e) {_			fail(e.getMessage())__		}_		finally {_			_			testfile1.delete()__			testfile2.delete()__			tempdir.delete()__		}_	};this,test,checks,the,functionality,of,the,link,local,file,system,class;test,public,void,test,local,filesystem,final,file,tempdir,new,file,common,test,utils,get,temp,dir,uuid,random,uuid,to,string,final,file,testfile1,new,file,tempdir,uuid,random,uuid,to,string,final,file,testfile2,new,file,tempdir,uuid,random,uuid,to,string,final,path,pathtotestfile1,new,path,testfile1,to,uri,get,path,final,path,pathtotestfile2,new,path,testfile2,to,uri,get,path,try,final,local,file,system,lfs,new,local,file,system,final,path,pathtotmpdir,new,path,tempdir,to,uri,get,path,assert,false,lfs,exists,pathtotmpdir,assert,true,tempdir,mkdirs,assert,true,lfs,exists,pathtotmpdir,final,file,status,localstatus1,lfs,get,file,status,pathtotmpdir,assert,true,localstatus1,is,dir,final,file,status,statusforfiles,lfs,list,status,pathtotmpdir,assert,true,statusforfiles,length,0,lfs,delete,pathtotmpdir,true,assert,false,lfs,exists,pathtotmpdir,assert,false,tempdir,exists,lfs,mkdirs,pathtotmpdir,assert,true,tempdir,exists,final,fsdata,output,stream,lfsoutput1,lfs,create,pathtotestfile1,false,assert,true,testfile2,create,new,file,assert,true,testfile1,exists,assert,true,lfs,exists,pathtotestfile2,final,byte,testbytes,1,2,3,4,5,lfsoutput1,write,testbytes,lfsoutput1,close,assert,equals,testfile1,length,5l,final,file,input,stream,fisfile1,new,file,input,stream,testfile1,byte,testbytestest,new,byte,5,assert,equals,testbytestest,length,fisfile1,read,testbytestest,fisfile1,close,assert,array,equals,testbytes,testbytestest,assert,equals,lfs,get,file,status,pathtotestfile1,get,len,testfile1,length,assert,equals,lfs,list,status,pathtotestfile1,0,get,len,testfile1,length,final,file,output,stream,fosfile2,new,file,output,stream,testfile2,fosfile2,write,testbytes,fosfile2,close,testbytestest,new,byte,5,final,fsdata,input,stream,lfsinput2,lfs,open,pathtotestfile2,assert,equals,lfsinput2,read,testbytestest,5,lfsinput2,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,list,status,pathtotmpdir,length,2,assert,equals,lfs,get,file,block,locations,lfs,get,file,status,pathtotestfile1,0,0,length,1,assert,true,lfs,delete,pathtotestfile1,false,assert,true,lfs,delete,pathtotmpdir,true,assert,true,tempdir,exists,catch,ioexception,e,fail,e,get,message,finally,testfile1,delete,testfile2,delete,tempdir,delete
LocalFileSystemTest -> @Test 	public void testLocalFilesystem();1474022085;This test checks the functionality of the {@link LocalFileSystem} class.;@Test_	public void testLocalFilesystem() {_		final File tempdir = new File(CommonTestUtils.getTempDir(), UUID.randomUUID().toString())___		final File testfile1 = new File(tempdir, UUID.randomUUID().toString())__		final File testfile2 = new File(tempdir, UUID.randomUUID().toString())___		final Path pathtotestfile1 = new Path(testfile1.toURI().getPath())__		final Path pathtotestfile2 = new Path(testfile2.toURI().getPath())___		try {_			final LocalFileSystem lfs = new LocalFileSystem()___			final Path pathtotmpdir = new Path(tempdir.toURI().getPath())___			__			_			assertFalse(lfs.exists(pathtotmpdir))__			assertTrue(tempdir.mkdirs())___			_			assertTrue(lfs.exists(pathtotmpdir))__			final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir)___			_			assertTrue(localstatus1.isDir())___			_			final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir)___			_			assertTrue(statusforfiles.length == 0)___			_			lfs.delete(pathtotmpdir, true)___			_			assertFalse(lfs.exists(pathtotmpdir))__			assertFalse(tempdir.exists())___			_			lfs.mkdirs(pathtotmpdir)___			_			assertTrue(tempdir.exists())___			__			_			final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, false)__			assertTrue(testfile2.createNewFile())___			_			assertTrue(testfile1.exists())__			assertTrue(lfs.exists(pathtotestfile2))___			_			final byte[] testbytes = { 1, 2, 3, 4, 5 }__			lfsoutput1.write(testbytes)__			lfsoutput1.close()___			assertEquals(testfile1.length(), 5L)___			byte[] testbytestest = new byte[5]__			try (FileInputStream fisfile1 = new FileInputStream(testfile1)) {_				assertEquals(testbytestest.length, fisfile1.read(testbytestest))__			}_			_			assertArrayEquals(testbytes, testbytestest)___			_			assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length())___			_			assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length())___			_			final FileOutputStream fosfile2 = new FileOutputStream(testfile2)__			fosfile2.write(testbytes)__			fosfile2.close()___			testbytestest = new byte[5]__			final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2)__			assertEquals(lfsinput2.read(testbytestest), 5)__			lfsinput2.close()__			assertTrue(Arrays.equals(testbytes, testbytestest))___			_			assertEquals(lfs.listStatus(pathtotmpdir).length, 2)___			_			assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1)___			_			assertTrue(lfs.delete(pathtotestfile1, false))___			_			assertTrue(lfs.delete(pathtotmpdir, true))___			assertTrue(!tempdir.exists())___		} catch (IOException e) {_			fail(e.getMessage())__		}_		finally {_			_			testfile1.delete()__			testfile2.delete()__			tempdir.delete()__		}_	};this,test,checks,the,functionality,of,the,link,local,file,system,class;test,public,void,test,local,filesystem,final,file,tempdir,new,file,common,test,utils,get,temp,dir,uuid,random,uuid,to,string,final,file,testfile1,new,file,tempdir,uuid,random,uuid,to,string,final,file,testfile2,new,file,tempdir,uuid,random,uuid,to,string,final,path,pathtotestfile1,new,path,testfile1,to,uri,get,path,final,path,pathtotestfile2,new,path,testfile2,to,uri,get,path,try,final,local,file,system,lfs,new,local,file,system,final,path,pathtotmpdir,new,path,tempdir,to,uri,get,path,assert,false,lfs,exists,pathtotmpdir,assert,true,tempdir,mkdirs,assert,true,lfs,exists,pathtotmpdir,final,file,status,localstatus1,lfs,get,file,status,pathtotmpdir,assert,true,localstatus1,is,dir,final,file,status,statusforfiles,lfs,list,status,pathtotmpdir,assert,true,statusforfiles,length,0,lfs,delete,pathtotmpdir,true,assert,false,lfs,exists,pathtotmpdir,assert,false,tempdir,exists,lfs,mkdirs,pathtotmpdir,assert,true,tempdir,exists,final,fsdata,output,stream,lfsoutput1,lfs,create,pathtotestfile1,false,assert,true,testfile2,create,new,file,assert,true,testfile1,exists,assert,true,lfs,exists,pathtotestfile2,final,byte,testbytes,1,2,3,4,5,lfsoutput1,write,testbytes,lfsoutput1,close,assert,equals,testfile1,length,5l,byte,testbytestest,new,byte,5,try,file,input,stream,fisfile1,new,file,input,stream,testfile1,assert,equals,testbytestest,length,fisfile1,read,testbytestest,assert,array,equals,testbytes,testbytestest,assert,equals,lfs,get,file,status,pathtotestfile1,get,len,testfile1,length,assert,equals,lfs,list,status,pathtotestfile1,0,get,len,testfile1,length,final,file,output,stream,fosfile2,new,file,output,stream,testfile2,fosfile2,write,testbytes,fosfile2,close,testbytestest,new,byte,5,final,fsdata,input,stream,lfsinput2,lfs,open,pathtotestfile2,assert,equals,lfsinput2,read,testbytestest,5,lfsinput2,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,list,status,pathtotmpdir,length,2,assert,equals,lfs,get,file,block,locations,lfs,get,file,status,pathtotestfile1,0,0,length,1,assert,true,lfs,delete,pathtotestfile1,false,assert,true,lfs,delete,pathtotmpdir,true,assert,true,tempdir,exists,catch,ioexception,e,fail,e,get,message,finally,testfile1,delete,testfile2,delete,tempdir,delete
LocalFileSystemTest -> @Test 	public void testLocalFilesystem();1481644337;This test checks the functionality of the {@link LocalFileSystem} class.;@Test_	public void testLocalFilesystem() {_		final File tempdir = new File(CommonTestUtils.getTempDir(), UUID.randomUUID().toString())___		final File testfile1 = new File(tempdir, UUID.randomUUID().toString())__		final File testfile2 = new File(tempdir, UUID.randomUUID().toString())___		final Path pathtotestfile1 = new Path(testfile1.toURI().getPath())__		final Path pathtotestfile2 = new Path(testfile2.toURI().getPath())___		try {_			final LocalFileSystem lfs = new LocalFileSystem()___			final Path pathtotmpdir = new Path(tempdir.toURI().getPath())___			__			_			assertFalse(lfs.exists(pathtotmpdir))__			assertTrue(tempdir.mkdirs())___			_			assertTrue(lfs.exists(pathtotmpdir))__			final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir)___			_			assertTrue(localstatus1.isDir())___			_			final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir)___			_			assertTrue(statusforfiles.length == 0)___			_			lfs.delete(pathtotmpdir, true)___			_			assertFalse(lfs.exists(pathtotmpdir))__			assertFalse(tempdir.exists())___			_			lfs.mkdirs(pathtotmpdir)___			_			assertTrue(tempdir.exists())___			__			_			final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, false)__			assertTrue(testfile2.createNewFile())___			_			assertTrue(testfile1.exists())__			assertTrue(lfs.exists(pathtotestfile2))___			_			final byte[] testbytes = { 1, 2, 3, 4, 5 }__			lfsoutput1.write(testbytes)__			lfsoutput1.close()___			assertEquals(testfile1.length(), 5L)___			byte[] testbytestest = new byte[5]__			try (FileInputStream fisfile1 = new FileInputStream(testfile1)) {_				assertEquals(testbytestest.length, fisfile1.read(testbytestest))__			}_			_			assertArrayEquals(testbytes, testbytestest)___			_			assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length())___			_			assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length())___			_			final FileOutputStream fosfile2 = new FileOutputStream(testfile2)__			fosfile2.write(testbytes)__			fosfile2.close()___			testbytestest = new byte[5]__			final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2)__			assertEquals(lfsinput2.read(testbytestest), 5)__			lfsinput2.close()__			assertTrue(Arrays.equals(testbytes, testbytestest))___			_			assertEquals(lfs.listStatus(pathtotmpdir).length, 2)___			_			assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1)___			_			assertTrue(lfs.delete(pathtotestfile1, false))___			_			assertTrue(lfs.delete(pathtotmpdir, true))___			assertTrue(!tempdir.exists())___		} catch (IOException e) {_			fail(e.getMessage())__		}_		finally {_			_			testfile1.delete()__			testfile2.delete()__			tempdir.delete()__		}_	};this,test,checks,the,functionality,of,the,link,local,file,system,class;test,public,void,test,local,filesystem,final,file,tempdir,new,file,common,test,utils,get,temp,dir,uuid,random,uuid,to,string,final,file,testfile1,new,file,tempdir,uuid,random,uuid,to,string,final,file,testfile2,new,file,tempdir,uuid,random,uuid,to,string,final,path,pathtotestfile1,new,path,testfile1,to,uri,get,path,final,path,pathtotestfile2,new,path,testfile2,to,uri,get,path,try,final,local,file,system,lfs,new,local,file,system,final,path,pathtotmpdir,new,path,tempdir,to,uri,get,path,assert,false,lfs,exists,pathtotmpdir,assert,true,tempdir,mkdirs,assert,true,lfs,exists,pathtotmpdir,final,file,status,localstatus1,lfs,get,file,status,pathtotmpdir,assert,true,localstatus1,is,dir,final,file,status,statusforfiles,lfs,list,status,pathtotmpdir,assert,true,statusforfiles,length,0,lfs,delete,pathtotmpdir,true,assert,false,lfs,exists,pathtotmpdir,assert,false,tempdir,exists,lfs,mkdirs,pathtotmpdir,assert,true,tempdir,exists,final,fsdata,output,stream,lfsoutput1,lfs,create,pathtotestfile1,false,assert,true,testfile2,create,new,file,assert,true,testfile1,exists,assert,true,lfs,exists,pathtotestfile2,final,byte,testbytes,1,2,3,4,5,lfsoutput1,write,testbytes,lfsoutput1,close,assert,equals,testfile1,length,5l,byte,testbytestest,new,byte,5,try,file,input,stream,fisfile1,new,file,input,stream,testfile1,assert,equals,testbytestest,length,fisfile1,read,testbytestest,assert,array,equals,testbytes,testbytestest,assert,equals,lfs,get,file,status,pathtotestfile1,get,len,testfile1,length,assert,equals,lfs,list,status,pathtotestfile1,0,get,len,testfile1,length,final,file,output,stream,fosfile2,new,file,output,stream,testfile2,fosfile2,write,testbytes,fosfile2,close,testbytestest,new,byte,5,final,fsdata,input,stream,lfsinput2,lfs,open,pathtotestfile2,assert,equals,lfsinput2,read,testbytestest,5,lfsinput2,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,list,status,pathtotmpdir,length,2,assert,equals,lfs,get,file,block,locations,lfs,get,file,status,pathtotestfile1,0,0,length,1,assert,true,lfs,delete,pathtotestfile1,false,assert,true,lfs,delete,pathtotmpdir,true,assert,true,tempdir,exists,catch,ioexception,e,fail,e,get,message,finally,testfile1,delete,testfile2,delete,tempdir,delete
LocalFileSystemTest -> @Test 	public void testLocalFilesystem();1492761311;This test checks the functionality of the {@link LocalFileSystem} class.;@Test_	public void testLocalFilesystem() {_		final File tempdir = new File(CommonTestUtils.getTempDir(), UUID.randomUUID().toString())___		final File testfile1 = new File(tempdir, UUID.randomUUID().toString())__		final File testfile2 = new File(tempdir, UUID.randomUUID().toString())___		final Path pathtotestfile1 = new Path(testfile1.toURI().getPath())__		final Path pathtotestfile2 = new Path(testfile2.toURI().getPath())___		try {_			final LocalFileSystem lfs = new LocalFileSystem()___			final Path pathtotmpdir = new Path(tempdir.toURI().getPath())___			__			_			assertFalse(lfs.exists(pathtotmpdir))__			assertTrue(tempdir.mkdirs())___			_			assertTrue(lfs.exists(pathtotmpdir))__			final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir)___			_			assertTrue(localstatus1.isDir())___			_			final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir)___			_			assertTrue(statusforfiles.length == 0)___			_			lfs.delete(pathtotmpdir, true)___			_			assertFalse(lfs.exists(pathtotmpdir))__			assertFalse(tempdir.exists())___			_			lfs.mkdirs(pathtotmpdir)___			_			assertTrue(tempdir.exists())___			__			_			final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, WriteMode.NO_OVERWRITE)__			assertTrue(testfile2.createNewFile())___			_			assertTrue(testfile1.exists())__			assertTrue(lfs.exists(pathtotestfile2))___			_			final byte[] testbytes = { 1, 2, 3, 4, 5 }__			lfsoutput1.write(testbytes)__			lfsoutput1.close()___			assertEquals(testfile1.length(), 5L)___			byte[] testbytestest = new byte[5]__			try (FileInputStream fisfile1 = new FileInputStream(testfile1)) {_				assertEquals(testbytestest.length, fisfile1.read(testbytestest))__			}__			assertArrayEquals(testbytes, testbytestest)___			_			assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length())___			_			assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length())___			_			final FileOutputStream fosfile2 = new FileOutputStream(testfile2)__			fosfile2.write(testbytes)__			fosfile2.close()___			testbytestest = new byte[5]__			final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2)__			assertEquals(lfsinput2.read(testbytestest), 5)__			lfsinput2.close()__			assertTrue(Arrays.equals(testbytes, testbytestest))___			_			assertEquals(lfs.listStatus(pathtotmpdir).length, 2)___			_			assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1)___			_			assertTrue(lfs.delete(pathtotestfile1, false))___			_			assertTrue(lfs.delete(pathtotmpdir, true))___			assertTrue(!tempdir.exists())___		} catch (IOException e) {_			fail(e.getMessage())__		}_		finally {_			_			testfile1.delete()__			testfile2.delete()__			tempdir.delete()__		}_	};this,test,checks,the,functionality,of,the,link,local,file,system,class;test,public,void,test,local,filesystem,final,file,tempdir,new,file,common,test,utils,get,temp,dir,uuid,random,uuid,to,string,final,file,testfile1,new,file,tempdir,uuid,random,uuid,to,string,final,file,testfile2,new,file,tempdir,uuid,random,uuid,to,string,final,path,pathtotestfile1,new,path,testfile1,to,uri,get,path,final,path,pathtotestfile2,new,path,testfile2,to,uri,get,path,try,final,local,file,system,lfs,new,local,file,system,final,path,pathtotmpdir,new,path,tempdir,to,uri,get,path,assert,false,lfs,exists,pathtotmpdir,assert,true,tempdir,mkdirs,assert,true,lfs,exists,pathtotmpdir,final,file,status,localstatus1,lfs,get,file,status,pathtotmpdir,assert,true,localstatus1,is,dir,final,file,status,statusforfiles,lfs,list,status,pathtotmpdir,assert,true,statusforfiles,length,0,lfs,delete,pathtotmpdir,true,assert,false,lfs,exists,pathtotmpdir,assert,false,tempdir,exists,lfs,mkdirs,pathtotmpdir,assert,true,tempdir,exists,final,fsdata,output,stream,lfsoutput1,lfs,create,pathtotestfile1,write,mode,assert,true,testfile2,create,new,file,assert,true,testfile1,exists,assert,true,lfs,exists,pathtotestfile2,final,byte,testbytes,1,2,3,4,5,lfsoutput1,write,testbytes,lfsoutput1,close,assert,equals,testfile1,length,5l,byte,testbytestest,new,byte,5,try,file,input,stream,fisfile1,new,file,input,stream,testfile1,assert,equals,testbytestest,length,fisfile1,read,testbytestest,assert,array,equals,testbytes,testbytestest,assert,equals,lfs,get,file,status,pathtotestfile1,get,len,testfile1,length,assert,equals,lfs,list,status,pathtotestfile1,0,get,len,testfile1,length,final,file,output,stream,fosfile2,new,file,output,stream,testfile2,fosfile2,write,testbytes,fosfile2,close,testbytestest,new,byte,5,final,fsdata,input,stream,lfsinput2,lfs,open,pathtotestfile2,assert,equals,lfsinput2,read,testbytestest,5,lfsinput2,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,list,status,pathtotmpdir,length,2,assert,equals,lfs,get,file,block,locations,lfs,get,file,status,pathtotestfile1,0,0,length,1,assert,true,lfs,delete,pathtotestfile1,false,assert,true,lfs,delete,pathtotmpdir,true,assert,true,tempdir,exists,catch,ioexception,e,fail,e,get,message,finally,testfile1,delete,testfile2,delete,tempdir,delete
LocalFileSystemTest -> @Test 	public void testLocalFilesystem() throws Exception;1492761311;This test checks the functionality of the {@link LocalFileSystem} class.;@Test_	public void testLocalFilesystem() throws Exception {_		final File tempdir = new File(temporaryFolder.getRoot(), UUID.randomUUID().toString())___		final File testfile1 = new File(tempdir, UUID.randomUUID().toString())__		final File testfile2 = new File(tempdir, UUID.randomUUID().toString())___		final Path pathtotestfile1 = new Path(testfile1.toURI().getPath())__		final Path pathtotestfile2 = new Path(testfile2.toURI().getPath())___		final LocalFileSystem lfs = new LocalFileSystem()___		final Path pathtotmpdir = new Path(tempdir.toURI().getPath())___		__		_		assertFalse(lfs.exists(pathtotmpdir))__		assertTrue(tempdir.mkdirs())___		_		assertTrue(lfs.exists(pathtotmpdir))__		final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir)___		_		assertTrue(localstatus1.isDir())___		_		final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir)___		_		assertTrue(statusforfiles.length == 0)___		_		lfs.delete(pathtotmpdir, true)___		_		assertFalse(lfs.exists(pathtotmpdir))__		assertFalse(tempdir.exists())___		_		lfs.mkdirs(pathtotmpdir)___		_		assertTrue(tempdir.exists())___		__		_		final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, WriteMode.NO_OVERWRITE)__		assertTrue(testfile2.createNewFile())___		_		assertTrue(testfile1.exists())__		assertTrue(lfs.exists(pathtotestfile2))___		_		final byte[] testbytes = { 1, 2, 3, 4, 5 }__		lfsoutput1.write(testbytes)__		lfsoutput1.close()___		assertEquals(testfile1.length(), 5L)___		byte[] testbytestest = new byte[5]__		try (FileInputStream fisfile1 = new FileInputStream(testfile1)) {_			assertEquals(testbytestest.length, fisfile1.read(testbytestest))__		}__		assertArrayEquals(testbytes, testbytestest)___		_		assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length())___		_		assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length())___		_		final FileOutputStream fosfile2 = new FileOutputStream(testfile2)__		fosfile2.write(testbytes)__		fosfile2.close()___		testbytestest = new byte[5]__		final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2)__		assertEquals(lfsinput2.read(testbytestest), 5)__		lfsinput2.close()__		assertTrue(Arrays.equals(testbytes, testbytestest))___		_		assertEquals(lfs.listStatus(pathtotmpdir).length, 2)___		_		assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1)___		_		assertTrue(lfs.delete(pathtotestfile1, false))___		_		assertTrue(lfs.delete(pathtotmpdir, true))___		assertTrue(!tempdir.exists())__	};this,test,checks,the,functionality,of,the,link,local,file,system,class;test,public,void,test,local,filesystem,throws,exception,final,file,tempdir,new,file,temporary,folder,get,root,uuid,random,uuid,to,string,final,file,testfile1,new,file,tempdir,uuid,random,uuid,to,string,final,file,testfile2,new,file,tempdir,uuid,random,uuid,to,string,final,path,pathtotestfile1,new,path,testfile1,to,uri,get,path,final,path,pathtotestfile2,new,path,testfile2,to,uri,get,path,final,local,file,system,lfs,new,local,file,system,final,path,pathtotmpdir,new,path,tempdir,to,uri,get,path,assert,false,lfs,exists,pathtotmpdir,assert,true,tempdir,mkdirs,assert,true,lfs,exists,pathtotmpdir,final,file,status,localstatus1,lfs,get,file,status,pathtotmpdir,assert,true,localstatus1,is,dir,final,file,status,statusforfiles,lfs,list,status,pathtotmpdir,assert,true,statusforfiles,length,0,lfs,delete,pathtotmpdir,true,assert,false,lfs,exists,pathtotmpdir,assert,false,tempdir,exists,lfs,mkdirs,pathtotmpdir,assert,true,tempdir,exists,final,fsdata,output,stream,lfsoutput1,lfs,create,pathtotestfile1,write,mode,assert,true,testfile2,create,new,file,assert,true,testfile1,exists,assert,true,lfs,exists,pathtotestfile2,final,byte,testbytes,1,2,3,4,5,lfsoutput1,write,testbytes,lfsoutput1,close,assert,equals,testfile1,length,5l,byte,testbytestest,new,byte,5,try,file,input,stream,fisfile1,new,file,input,stream,testfile1,assert,equals,testbytestest,length,fisfile1,read,testbytestest,assert,array,equals,testbytes,testbytestest,assert,equals,lfs,get,file,status,pathtotestfile1,get,len,testfile1,length,assert,equals,lfs,list,status,pathtotestfile1,0,get,len,testfile1,length,final,file,output,stream,fosfile2,new,file,output,stream,testfile2,fosfile2,write,testbytes,fosfile2,close,testbytestest,new,byte,5,final,fsdata,input,stream,lfsinput2,lfs,open,pathtotestfile2,assert,equals,lfsinput2,read,testbytestest,5,lfsinput2,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,list,status,pathtotmpdir,length,2,assert,equals,lfs,get,file,block,locations,lfs,get,file,status,pathtotestfile1,0,0,length,1,assert,true,lfs,delete,pathtotestfile1,false,assert,true,lfs,delete,pathtotmpdir,true,assert,true,tempdir,exists
LocalFileSystemTest -> @Test 	public void testLocalFilesystem() throws Exception;1510933709;This test checks the functionality of the {@link LocalFileSystem} class.;@Test_	public void testLocalFilesystem() throws Exception {_		final File tempdir = new File(temporaryFolder.getRoot(), UUID.randomUUID().toString())___		final File testfile1 = new File(tempdir, UUID.randomUUID().toString())__		final File testfile2 = new File(tempdir, UUID.randomUUID().toString())___		final Path pathtotestfile1 = new Path(testfile1.toURI().getPath())__		final Path pathtotestfile2 = new Path(testfile2.toURI().getPath())___		final LocalFileSystem lfs = new LocalFileSystem()___		final Path pathtotmpdir = new Path(tempdir.toURI().getPath())___		__		_		assertFalse(lfs.exists(pathtotmpdir))__		assertTrue(tempdir.mkdirs())___		_		assertTrue(lfs.exists(pathtotmpdir))__		final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir)___		_		assertTrue(localstatus1.isDir())___		_		final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir)___		_		assertTrue(statusforfiles.length == 0)___		_		lfs.delete(pathtotmpdir, true)___		_		assertFalse(lfs.exists(pathtotmpdir))__		assertFalse(tempdir.exists())___		_		lfs.mkdirs(pathtotmpdir)___		_		assertTrue(tempdir.exists())___		__		_		final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, WriteMode.NO_OVERWRITE)__		assertTrue(testfile2.createNewFile())___		_		assertTrue(testfile1.exists())__		assertTrue(lfs.exists(pathtotestfile2))___		_		final byte[] testbytes = { 1, 2, 3, 4, 5 }__		lfsoutput1.write(testbytes)__		lfsoutput1.close()___		assertEquals(testfile1.length(), 5L)___		byte[] testbytestest = new byte[5]__		try (FileInputStream fisfile1 = new FileInputStream(testfile1)) {_			assertEquals(testbytestest.length, fisfile1.read(testbytestest))__		}__		assertArrayEquals(testbytes, testbytestest)___		_		assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length())___		_		assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length())___		_		final FileOutputStream fosfile2 = new FileOutputStream(testfile2)__		fosfile2.write(testbytes)__		fosfile2.close()___		testbytestest = new byte[5]__		final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2)__		assertEquals(lfsinput2.read(testbytestest), 5)__		lfsinput2.close()__		assertTrue(Arrays.equals(testbytes, testbytestest))___		_		assertEquals(lfs.listStatus(pathtotmpdir).length, 2)___		_		assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1)___		_		assertTrue(lfs.delete(pathtotestfile1, false))___		_		assertTrue(lfs.delete(pathtotmpdir, true))___		assertTrue(!tempdir.exists())__	};this,test,checks,the,functionality,of,the,link,local,file,system,class;test,public,void,test,local,filesystem,throws,exception,final,file,tempdir,new,file,temporary,folder,get,root,uuid,random,uuid,to,string,final,file,testfile1,new,file,tempdir,uuid,random,uuid,to,string,final,file,testfile2,new,file,tempdir,uuid,random,uuid,to,string,final,path,pathtotestfile1,new,path,testfile1,to,uri,get,path,final,path,pathtotestfile2,new,path,testfile2,to,uri,get,path,final,local,file,system,lfs,new,local,file,system,final,path,pathtotmpdir,new,path,tempdir,to,uri,get,path,assert,false,lfs,exists,pathtotmpdir,assert,true,tempdir,mkdirs,assert,true,lfs,exists,pathtotmpdir,final,file,status,localstatus1,lfs,get,file,status,pathtotmpdir,assert,true,localstatus1,is,dir,final,file,status,statusforfiles,lfs,list,status,pathtotmpdir,assert,true,statusforfiles,length,0,lfs,delete,pathtotmpdir,true,assert,false,lfs,exists,pathtotmpdir,assert,false,tempdir,exists,lfs,mkdirs,pathtotmpdir,assert,true,tempdir,exists,final,fsdata,output,stream,lfsoutput1,lfs,create,pathtotestfile1,write,mode,assert,true,testfile2,create,new,file,assert,true,testfile1,exists,assert,true,lfs,exists,pathtotestfile2,final,byte,testbytes,1,2,3,4,5,lfsoutput1,write,testbytes,lfsoutput1,close,assert,equals,testfile1,length,5l,byte,testbytestest,new,byte,5,try,file,input,stream,fisfile1,new,file,input,stream,testfile1,assert,equals,testbytestest,length,fisfile1,read,testbytestest,assert,array,equals,testbytes,testbytestest,assert,equals,lfs,get,file,status,pathtotestfile1,get,len,testfile1,length,assert,equals,lfs,list,status,pathtotestfile1,0,get,len,testfile1,length,final,file,output,stream,fosfile2,new,file,output,stream,testfile2,fosfile2,write,testbytes,fosfile2,close,testbytestest,new,byte,5,final,fsdata,input,stream,lfsinput2,lfs,open,pathtotestfile2,assert,equals,lfsinput2,read,testbytestest,5,lfsinput2,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,list,status,pathtotmpdir,length,2,assert,equals,lfs,get,file,block,locations,lfs,get,file,status,pathtotestfile1,0,0,length,1,assert,true,lfs,delete,pathtotestfile1,false,assert,true,lfs,delete,pathtotmpdir,true,assert,true,tempdir,exists
LocalFileSystemTest -> @Test 	public void testLocalFilesystem() throws Exception;1512410190;This test checks the functionality of the {@link LocalFileSystem} class.;@Test_	public void testLocalFilesystem() throws Exception {_		final File tempdir = new File(temporaryFolder.getRoot(), UUID.randomUUID().toString())___		final File testfile1 = new File(tempdir, UUID.randomUUID().toString())__		final File testfile2 = new File(tempdir, UUID.randomUUID().toString())___		final Path pathtotestfile1 = new Path(testfile1.toURI().getPath())__		final Path pathtotestfile2 = new Path(testfile2.toURI().getPath())___		final LocalFileSystem lfs = new LocalFileSystem()___		final Path pathtotmpdir = new Path(tempdir.toURI().getPath())___		__		_		assertFalse(lfs.exists(pathtotmpdir))__		assertTrue(tempdir.mkdirs())___		_		assertTrue(lfs.exists(pathtotmpdir))__		final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir)___		_		assertTrue(localstatus1.isDir())___		_		final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir)___		_		assertTrue(statusforfiles.length == 0)___		_		lfs.delete(pathtotmpdir, true)___		_		assertFalse(lfs.exists(pathtotmpdir))__		assertFalse(tempdir.exists())___		_		lfs.mkdirs(pathtotmpdir)___		_		assertTrue(tempdir.exists())___		__		_		final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, WriteMode.NO_OVERWRITE)__		assertTrue(testfile2.createNewFile())___		_		assertTrue(testfile1.exists())__		assertTrue(lfs.exists(pathtotestfile2))___		_		final byte[] testbytes = { 1, 2, 3, 4, 5 }__		lfsoutput1.write(testbytes)__		lfsoutput1.close()___		assertEquals(testfile1.length(), 5L)___		byte[] testbytestest = new byte[5]__		try (FileInputStream fisfile1 = new FileInputStream(testfile1)) {_			assertEquals(testbytestest.length, fisfile1.read(testbytestest))__		}__		assertArrayEquals(testbytes, testbytestest)___		_		assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length())___		_		assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length())___		_		final FileOutputStream fosfile2 = new FileOutputStream(testfile2)__		fosfile2.write(testbytes)__		fosfile2.close()___		testbytestest = new byte[5]__		final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2)__		assertEquals(lfsinput2.read(testbytestest), 5)__		lfsinput2.close()__		assertTrue(Arrays.equals(testbytes, testbytestest))___		_		assertEquals(lfs.listStatus(pathtotmpdir).length, 2)___		_		assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1)___		_		assertTrue(lfs.delete(pathtotestfile1, false))___		_		assertTrue(lfs.delete(pathtotmpdir, true))___		assertTrue(!tempdir.exists())__	};this,test,checks,the,functionality,of,the,link,local,file,system,class;test,public,void,test,local,filesystem,throws,exception,final,file,tempdir,new,file,temporary,folder,get,root,uuid,random,uuid,to,string,final,file,testfile1,new,file,tempdir,uuid,random,uuid,to,string,final,file,testfile2,new,file,tempdir,uuid,random,uuid,to,string,final,path,pathtotestfile1,new,path,testfile1,to,uri,get,path,final,path,pathtotestfile2,new,path,testfile2,to,uri,get,path,final,local,file,system,lfs,new,local,file,system,final,path,pathtotmpdir,new,path,tempdir,to,uri,get,path,assert,false,lfs,exists,pathtotmpdir,assert,true,tempdir,mkdirs,assert,true,lfs,exists,pathtotmpdir,final,file,status,localstatus1,lfs,get,file,status,pathtotmpdir,assert,true,localstatus1,is,dir,final,file,status,statusforfiles,lfs,list,status,pathtotmpdir,assert,true,statusforfiles,length,0,lfs,delete,pathtotmpdir,true,assert,false,lfs,exists,pathtotmpdir,assert,false,tempdir,exists,lfs,mkdirs,pathtotmpdir,assert,true,tempdir,exists,final,fsdata,output,stream,lfsoutput1,lfs,create,pathtotestfile1,write,mode,assert,true,testfile2,create,new,file,assert,true,testfile1,exists,assert,true,lfs,exists,pathtotestfile2,final,byte,testbytes,1,2,3,4,5,lfsoutput1,write,testbytes,lfsoutput1,close,assert,equals,testfile1,length,5l,byte,testbytestest,new,byte,5,try,file,input,stream,fisfile1,new,file,input,stream,testfile1,assert,equals,testbytestest,length,fisfile1,read,testbytestest,assert,array,equals,testbytes,testbytestest,assert,equals,lfs,get,file,status,pathtotestfile1,get,len,testfile1,length,assert,equals,lfs,list,status,pathtotestfile1,0,get,len,testfile1,length,final,file,output,stream,fosfile2,new,file,output,stream,testfile2,fosfile2,write,testbytes,fosfile2,close,testbytestest,new,byte,5,final,fsdata,input,stream,lfsinput2,lfs,open,pathtotestfile2,assert,equals,lfsinput2,read,testbytestest,5,lfsinput2,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,list,status,pathtotmpdir,length,2,assert,equals,lfs,get,file,block,locations,lfs,get,file,status,pathtotestfile1,0,0,length,1,assert,true,lfs,delete,pathtotestfile1,false,assert,true,lfs,delete,pathtotmpdir,true,assert,true,tempdir,exists
LocalFileSystemTest -> @Test 	public void testLocalFilesystem() throws Exception;1530698526;This test checks the functionality of the {@link LocalFileSystem} class.;@Test_	public void testLocalFilesystem() throws Exception {_		final File tempdir = new File(temporaryFolder.getRoot(), UUID.randomUUID().toString())___		final File testfile1 = new File(tempdir, UUID.randomUUID().toString())__		final File testfile2 = new File(tempdir, UUID.randomUUID().toString())___		final Path pathtotestfile1 = new Path(testfile1.toURI().getPath())__		final Path pathtotestfile2 = new Path(testfile2.toURI().getPath())___		final LocalFileSystem lfs = new LocalFileSystem()___		final Path pathtotmpdir = new Path(tempdir.toURI().getPath())___		__		_		assertFalse(lfs.exists(pathtotmpdir))__		assertTrue(tempdir.mkdirs())___		_		assertTrue(lfs.exists(pathtotmpdir))__		final FileStatus localstatus1 = lfs.getFileStatus(pathtotmpdir)___		_		assertTrue(localstatus1.isDir())___		_		final FileStatus[] statusforfiles = lfs.listStatus(pathtotmpdir)___		_		assertTrue(statusforfiles.length == 0)___		_		lfs.delete(pathtotmpdir, true)___		_		assertFalse(lfs.exists(pathtotmpdir))__		assertFalse(tempdir.exists())___		_		lfs.mkdirs(pathtotmpdir)___		_		assertTrue(tempdir.exists())___		__		_		final FSDataOutputStream lfsoutput1 = lfs.create(pathtotestfile1, WriteMode.NO_OVERWRITE)__		assertTrue(testfile2.createNewFile())___		_		assertTrue(testfile1.exists())__		assertTrue(lfs.exists(pathtotestfile2))___		_		final byte[] testbytes = { 1, 2, 3, 4, 5 }__		lfsoutput1.write(testbytes)__		lfsoutput1.close()___		assertEquals(testfile1.length(), 5L)___		byte[] testbytestest = new byte[5]__		try (FileInputStream fisfile1 = new FileInputStream(testfile1)) {_			assertEquals(testbytestest.length, fisfile1.read(testbytestest))__		}__		assertArrayEquals(testbytes, testbytestest)___		_		assertEquals(lfs.getFileStatus(pathtotestfile1).getLen(), testfile1.length())___		_		assertEquals(lfs.listStatus(pathtotestfile1)[0].getLen(), testfile1.length())___		_		final FileOutputStream fosfile2 = new FileOutputStream(testfile2)__		fosfile2.write(testbytes)__		fosfile2.close()___		testbytestest = new byte[5]__		final FSDataInputStream lfsinput2 = lfs.open(pathtotestfile2)__		assertEquals(lfsinput2.read(testbytestest), 5)__		lfsinput2.close()__		assertTrue(Arrays.equals(testbytes, testbytestest))___		_		assertEquals(lfs.listStatus(pathtotmpdir).length, 2)___		_		assertEquals(lfs.getFileBlockLocations(lfs.getFileStatus(pathtotestfile1), 0, 0).length, 1)___		_		assertTrue(lfs.delete(pathtotestfile1, false))___		_		assertTrue(lfs.delete(pathtotmpdir, true))___		assertTrue(!tempdir.exists())__	};this,test,checks,the,functionality,of,the,link,local,file,system,class;test,public,void,test,local,filesystem,throws,exception,final,file,tempdir,new,file,temporary,folder,get,root,uuid,random,uuid,to,string,final,file,testfile1,new,file,tempdir,uuid,random,uuid,to,string,final,file,testfile2,new,file,tempdir,uuid,random,uuid,to,string,final,path,pathtotestfile1,new,path,testfile1,to,uri,get,path,final,path,pathtotestfile2,new,path,testfile2,to,uri,get,path,final,local,file,system,lfs,new,local,file,system,final,path,pathtotmpdir,new,path,tempdir,to,uri,get,path,assert,false,lfs,exists,pathtotmpdir,assert,true,tempdir,mkdirs,assert,true,lfs,exists,pathtotmpdir,final,file,status,localstatus1,lfs,get,file,status,pathtotmpdir,assert,true,localstatus1,is,dir,final,file,status,statusforfiles,lfs,list,status,pathtotmpdir,assert,true,statusforfiles,length,0,lfs,delete,pathtotmpdir,true,assert,false,lfs,exists,pathtotmpdir,assert,false,tempdir,exists,lfs,mkdirs,pathtotmpdir,assert,true,tempdir,exists,final,fsdata,output,stream,lfsoutput1,lfs,create,pathtotestfile1,write,mode,assert,true,testfile2,create,new,file,assert,true,testfile1,exists,assert,true,lfs,exists,pathtotestfile2,final,byte,testbytes,1,2,3,4,5,lfsoutput1,write,testbytes,lfsoutput1,close,assert,equals,testfile1,length,5l,byte,testbytestest,new,byte,5,try,file,input,stream,fisfile1,new,file,input,stream,testfile1,assert,equals,testbytestest,length,fisfile1,read,testbytestest,assert,array,equals,testbytes,testbytestest,assert,equals,lfs,get,file,status,pathtotestfile1,get,len,testfile1,length,assert,equals,lfs,list,status,pathtotestfile1,0,get,len,testfile1,length,final,file,output,stream,fosfile2,new,file,output,stream,testfile2,fosfile2,write,testbytes,fosfile2,close,testbytestest,new,byte,5,final,fsdata,input,stream,lfsinput2,lfs,open,pathtotestfile2,assert,equals,lfsinput2,read,testbytestest,5,lfsinput2,close,assert,true,arrays,equals,testbytes,testbytestest,assert,equals,lfs,list,status,pathtotmpdir,length,2,assert,equals,lfs,get,file,block,locations,lfs,get,file,status,pathtotestfile1,0,0,length,1,assert,true,lfs,delete,pathtotestfile1,false,assert,true,lfs,delete,pathtotmpdir,true,assert,true,tempdir,exists
