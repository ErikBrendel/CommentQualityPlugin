# id;timestamp;commentText;codeText;commentWords;codeWords
ReducingStateDescriptorTest -> @SuppressWarnings("unchecked") 	@Test 	public void testSerializerDuplication();1496332245;FLINK-6775__Tests that the returned serializer is duplicated. This allows to_share the state descriptor.;@SuppressWarnings("unchecked")_	@Test_	public void testSerializerDuplication() {_		TypeSerializer<String> statefulSerializer = mock(TypeSerializer.class)__		when(statefulSerializer.duplicate()).thenAnswer(new Answer<TypeSerializer<String>>() {_			@Override_			public TypeSerializer<String> answer(InvocationOnMock invocation) throws Throwable {_				return mock(TypeSerializer.class)__			}_		})___		ReduceFunction<String> reducer = mock(ReduceFunction.class)___		ReducingStateDescriptor<String> descr = new ReducingStateDescriptor<>("foobar", reducer, statefulSerializer)___		TypeSerializer<String> serializerA = descr.getSerializer()__		TypeSerializer<String> serializerB = descr.getSerializer()___		_		assertNotSame(serializerA, serializerB)__	};flink,6775,tests,that,the,returned,serializer,is,duplicated,this,allows,to,share,the,state,descriptor;suppress,warnings,unchecked,test,public,void,test,serializer,duplication,type,serializer,string,stateful,serializer,mock,type,serializer,class,when,stateful,serializer,duplicate,then,answer,new,answer,type,serializer,string,override,public,type,serializer,string,answer,invocation,on,mock,invocation,throws,throwable,return,mock,type,serializer,class,reduce,function,string,reducer,mock,reduce,function,class,reducing,state,descriptor,string,descr,new,reducing,state,descriptor,foobar,reducer,stateful,serializer,type,serializer,string,serializer,a,descr,get,serializer,type,serializer,string,serializer,b,descr,get,serializer,assert,not,same,serializer,a,serializer,b
ReducingStateDescriptorTest -> @SuppressWarnings("unchecked") 	@Test 	public void testSerializerDuplication();1521628649;FLINK-6775.__<p>Tests that the returned serializer is duplicated. This allows to_share the state descriptor.;@SuppressWarnings("unchecked")_	@Test_	public void testSerializerDuplication() {_		TypeSerializer<String> statefulSerializer = mock(TypeSerializer.class)__		when(statefulSerializer.duplicate()).thenAnswer(new Answer<TypeSerializer<String>>() {_			@Override_			public TypeSerializer<String> answer(InvocationOnMock invocation) throws Throwable {_				return mock(TypeSerializer.class)__			}_		})___		ReduceFunction<String> reducer = mock(ReduceFunction.class)___		ReducingStateDescriptor<String> descr = new ReducingStateDescriptor<>("foobar", reducer, statefulSerializer)___		TypeSerializer<String> serializerA = descr.getSerializer()__		TypeSerializer<String> serializerB = descr.getSerializer()___		_		assertNotSame(serializerA, serializerB)__	};flink,6775,p,tests,that,the,returned,serializer,is,duplicated,this,allows,to,share,the,state,descriptor;suppress,warnings,unchecked,test,public,void,test,serializer,duplication,type,serializer,string,stateful,serializer,mock,type,serializer,class,when,stateful,serializer,duplicate,then,answer,new,answer,type,serializer,string,override,public,type,serializer,string,answer,invocation,on,mock,invocation,throws,throwable,return,mock,type,serializer,class,reduce,function,string,reducer,mock,reduce,function,class,reducing,state,descriptor,string,descr,new,reducing,state,descriptor,foobar,reducer,stateful,serializer,type,serializer,string,serializer,a,descr,get,serializer,type,serializer,string,serializer,b,descr,get,serializer,assert,not,same,serializer,a,serializer,b
ReducingStateDescriptorTest -> @SuppressWarnings("unchecked") 	@Test 	public void testSerializerDuplication();1521729754;FLINK-6775.__<p>Tests that the returned serializer is duplicated. This allows to_share the state descriptor.;@SuppressWarnings("unchecked")_	@Test_	public void testSerializerDuplication() {_		_		_		TypeSerializer<String> statefulSerializer = new KryoSerializer<>(String.class, new ExecutionConfig())___		ReducingStateDescriptor<String> descr = new ReducingStateDescriptor<>(_				"foobar",_				(a, b) -> a,_				statefulSerializer)___		TypeSerializer<String> serializerA = descr.getSerializer()__		TypeSerializer<String> serializerB = descr.getSerializer()___		_		assertNotSame(serializerA, serializerB)__	};flink,6775,p,tests,that,the,returned,serializer,is,duplicated,this,allows,to,share,the,state,descriptor;suppress,warnings,unchecked,test,public,void,test,serializer,duplication,type,serializer,string,stateful,serializer,new,kryo,serializer,string,class,new,execution,config,reducing,state,descriptor,string,descr,new,reducing,state,descriptor,foobar,a,b,a,stateful,serializer,type,serializer,string,serializer,a,descr,get,serializer,type,serializer,string,serializer,b,descr,get,serializer,assert,not,same,serializer,a,serializer,b
ReducingStateDescriptorTest -> @SuppressWarnings("unchecked") 	@Test 	public void testSerializerDuplication();1521729954;FLINK-6775.__<p>Tests that the returned serializer is duplicated. This allows to_share the state descriptor.;@SuppressWarnings("unchecked")_	@Test_	public void testSerializerDuplication() {_		_		_		TypeSerializer<String> statefulSerializer = new KryoSerializer<>(String.class, new ExecutionConfig())___		ReducingStateDescriptor<String> descr = new ReducingStateDescriptor<>(_				"foobar",_				(a, b) -> a,_				statefulSerializer)___		TypeSerializer<String> serializerA = descr.getSerializer()__		TypeSerializer<String> serializerB = descr.getSerializer()___		_		assertNotSame(serializerA, serializerB)__	};flink,6775,p,tests,that,the,returned,serializer,is,duplicated,this,allows,to,share,the,state,descriptor;suppress,warnings,unchecked,test,public,void,test,serializer,duplication,type,serializer,string,stateful,serializer,new,kryo,serializer,string,class,new,execution,config,reducing,state,descriptor,string,descr,new,reducing,state,descriptor,foobar,a,b,a,stateful,serializer,type,serializer,string,serializer,a,descr,get,serializer,type,serializer,string,serializer,b,descr,get,serializer,assert,not,same,serializer,a,serializer,b
