# id;timestamp;commentText;codeText;commentWords;codeWords
NetUtils -> private static String getIPv6UrlRepresentation(Inet6Address address);1460741894;Creates a compressed URL style representation of an Inet6Address.__<p>This method copies and adopts code from Google's Guava library._We re-implement this here in order to reduce dependency on Guava._The Guava library has frequently caused dependency conflicts in the past.;private static String getIPv6UrlRepresentation(Inet6Address address) {_		_		byte[] addressBytes = address.getAddress()__		int[] hextets = new int[8]__		for (int i = 0_ i < hextets.length_ i++) {_			hextets[i] = (addressBytes[2 * i] & 0xFF) << 8 | (addressBytes[2 * i + 1] & 0xFF)__		}__		_		int bestRunStart = -1__		int bestRunLength = -1__		int runStart = -1__		for (int i = 0_ i < hextets.length + 1_ i++) {_			if (i < hextets.length && hextets[i] == 0) {_				if (runStart < 0) {_					runStart = i__				}_			} else if (runStart >= 0) {_				int runLength = i - runStart__				if (runLength > bestRunLength) {_					bestRunStart = runStart__					bestRunLength = runLength__				}_				runStart = -1__			}_		}_		if (bestRunLength >= 2) {_			Arrays.fill(hextets, bestRunStart, bestRunStart + bestRunLength, -1)__		}__		_		StringBuilder buf = new StringBuilder(40)__		buf.append('[')__		_		boolean lastWasNumber = false__		for (int i = 0_ i < hextets.length_ i++) {_			boolean thisIsNumber = hextets[i] >= 0__			if (thisIsNumber) {_				if (lastWasNumber) {_					buf.append(':')__				}_				buf.append(Integer.toHexString(hextets[i]))__			} else {_				if (i == 0 || lastWasNumber) {_					buf.append("::")__				}_			}_			lastWasNumber = thisIsNumber__		}_		buf.append(']')__		return buf.toString()__	};creates,a,compressed,url,style,representation,of,an,inet6address,p,this,method,copies,and,adopts,code,from,google,s,guava,library,we,re,implement,this,here,in,order,to,reduce,dependency,on,guava,the,guava,library,has,frequently,caused,dependency,conflicts,in,the,past;private,static,string,get,ipv6url,representation,inet6address,address,byte,address,bytes,address,get,address,int,hextets,new,int,8,for,int,i,0,i,hextets,length,i,hextets,i,address,bytes,2,i,0x,ff,8,address,bytes,2,i,1,0x,ff,int,best,run,start,1,int,best,run,length,1,int,run,start,1,for,int,i,0,i,hextets,length,1,i,if,i,hextets,length,hextets,i,0,if,run,start,0,run,start,i,else,if,run,start,0,int,run,length,i,run,start,if,run,length,best,run,length,best,run,start,run,start,best,run,length,run,length,run,start,1,if,best,run,length,2,arrays,fill,hextets,best,run,start,best,run,start,best,run,length,1,string,builder,buf,new,string,builder,40,buf,append,boolean,last,was,number,false,for,int,i,0,i,hextets,length,i,boolean,this,is,number,hextets,i,0,if,this,is,number,if,last,was,number,buf,append,buf,append,integer,to,hex,string,hextets,i,else,if,i,0,last,was,number,buf,append,last,was,number,this,is,number,buf,append,return,buf,to,string
NetUtils -> private static String getIPv6UrlRepresentation(Inet6Address address);1481907119;Creates a compressed URL style representation of an Inet6Address.__<p>This method copies and adopts code from Google's Guava library._We re-implement this here in order to reduce dependency on Guava._The Guava library has frequently caused dependency conflicts in the past.;private static String getIPv6UrlRepresentation(Inet6Address address) {_		return getIPv6UrlRepresentation(address.getAddress())__	};creates,a,compressed,url,style,representation,of,an,inet6address,p,this,method,copies,and,adopts,code,from,google,s,guava,library,we,re,implement,this,here,in,order,to,reduce,dependency,on,guava,the,guava,library,has,frequently,caused,dependency,conflicts,in,the,past;private,static,string,get,ipv6url,representation,inet6address,address,return,get,ipv6url,representation,address,get,address
NetUtils -> private static String getIPv6UrlRepresentation(Inet6Address address);1498896245;Creates a compressed URL style representation of an Inet6Address.__<p>This method copies and adopts code from Google's Guava library._We re-implement this here in order to reduce dependency on Guava._The Guava library has frequently caused dependency conflicts in the past.;private static String getIPv6UrlRepresentation(Inet6Address address) {_		return getIPv6UrlRepresentation(address.getAddress())__	};creates,a,compressed,url,style,representation,of,an,inet6address,p,this,method,copies,and,adopts,code,from,google,s,guava,library,we,re,implement,this,here,in,order,to,reduce,dependency,on,guava,the,guava,library,has,frequently,caused,dependency,conflicts,in,the,past;private,static,string,get,ipv6url,representation,inet6address,address,return,get,ipv6url,representation,address,get,address
NetUtils -> private static String getIPv6UrlRepresentation(Inet6Address address);1516295284;Creates a compressed URL style representation of an Inet6Address.__<p>This method copies and adopts code from Google's Guava library._We re-implement this here in order to reduce dependency on Guava._The Guava library has frequently caused dependency conflicts in the past.;private static String getIPv6UrlRepresentation(Inet6Address address) {_		return getIPv6UrlRepresentation(address.getAddress())__	};creates,a,compressed,url,style,representation,of,an,inet6address,p,this,method,copies,and,adopts,code,from,google,s,guava,library,we,re,implement,this,here,in,order,to,reduce,dependency,on,guava,the,guava,library,has,frequently,caused,dependency,conflicts,in,the,past;private,static,string,get,ipv6url,representation,inet6address,address,return,get,ipv6url,representation,address,get,address
NetUtils -> public static String ipAddressAndPortToUrlString(InetAddress address, int port);1443682796;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port.;public static String ipAddressAndPortToUrlString(InetAddress address, int port) {_		return ipAddressToUrlString(address) + ':' + port__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,ip,address,and,port,to,url,string,inet,address,address,int,port,return,ip,address,to,url,string,address,port
NetUtils -> public static String ipAddressAndPortToUrlString(InetAddress address, int port);1448376996;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port.;public static String ipAddressAndPortToUrlString(InetAddress address, int port) {_		return ipAddressToUrlString(address) + ':' + port__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,ip,address,and,port,to,url,string,inet,address,address,int,port,return,ip,address,to,url,string,address,port
NetUtils -> public static String ipAddressAndPortToUrlString(InetAddress address, int port);1449679265;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port.;public static String ipAddressAndPortToUrlString(InetAddress address, int port) {_		return ipAddressToUrlString(address) + ':' + port__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,ip,address,and,port,to,url,string,inet,address,address,int,port,return,ip,address,to,url,string,address,port
NetUtils -> public static String ipAddressAndPortToUrlString(InetAddress address, int port);1455479358;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port.;public static String ipAddressAndPortToUrlString(InetAddress address, int port) {_		return ipAddressToUrlString(address) + ':' + port__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,ip,address,and,port,to,url,string,inet,address,address,int,port,return,ip,address,to,url,string,address,port
NetUtils -> public static String ipAddressAndPortToUrlString(InetAddress address, int port);1459248687;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port.;public static String ipAddressAndPortToUrlString(InetAddress address, int port) {_		return ipAddressToUrlString(address) + ':' + port__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,ip,address,and,port,to,url,string,inet,address,address,int,port,return,ip,address,to,url,string,address,port
NetUtils -> public static String ipAddressAndPortToUrlString(InetAddress address, int port);1460741894;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port.;public static String ipAddressAndPortToUrlString(InetAddress address, int port) {_		return ipAddressToUrlString(address) + ':' + port__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,ip,address,and,port,to,url,string,inet,address,address,int,port,return,ip,address,to,url,string,address,port
NetUtils -> public static String ipAddressAndPortToUrlString(InetAddress address, int port);1481907119;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port.;public static String ipAddressAndPortToUrlString(InetAddress address, int port) {_		return ipAddressToUrlString(address) + ':' + port__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,ip,address,and,port,to,url,string,inet,address,address,int,port,return,ip,address,to,url,string,address,port
NetUtils -> public static String ipAddressAndPortToUrlString(InetAddress address, int port);1498896245;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port.;public static String ipAddressAndPortToUrlString(InetAddress address, int port) {_		return ipAddressToUrlString(address) + ':' + port__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,ip,address,and,port,to,url,string,inet,address,address,int,port,return,ip,address,to,url,string,address,port
NetUtils -> public static String ipAddressAndPortToUrlString(InetAddress address, int port);1516295284;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port.;public static String ipAddressAndPortToUrlString(InetAddress address, int port) {_		return ipAddressToUrlString(address) + ':' + port__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,ip,address,and,port,to,url,string,inet,address,address,int,port,return,ip,address,to,url,string,address,port
NetUtils -> public static URL getCorrectHostnamePort(String hostPort);1440672038;Method to validate if the given String represents a hostname:port.__Works also for ipv6.__See: http://stackoverflow.com/questions/2345063/java-common-way-to-validate-and-convert-hostport-to-inetsocketaddress__@return URL object for accessing host and Port;public static URL getCorrectHostnamePort(String hostPort) {_		try {_			URL u = new URL("http://"+hostPort)__			if(u.getHost() == null) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid host")__			}_			if(u.getPort() == -1) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid port")__			}_			return u__		} catch (MalformedURLException e) {_			throw new IllegalArgumentException("The given host:port ('"+hostPort+"') is invalid", e)__		}_	};method,to,validate,if,the,given,string,represents,a,hostname,port,works,also,for,ipv6,see,http,stackoverflow,com,questions,2345063,java,common,way,to,validate,and,convert,hostport,to,inetsocketaddress,return,url,object,for,accessing,host,and,port;public,static,url,get,correct,hostname,port,string,host,port,try,url,u,new,url,http,host,port,if,u,get,host,null,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,host,if,u,get,port,1,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,port,return,u,catch,malformed,urlexception,e,throw,new,illegal,argument,exception,the,given,host,port,host,port,is,invalid,e
NetUtils -> public static URL getCorrectHostnamePort(String hostPort);1443682795;Method to validate if the given String represents a hostname:port.__Works also for ipv6.__See: http://stackoverflow.com/questions/2345063/java-common-way-to-validate-and-convert-hostport-to-inetsocketaddress__@return URL object for accessing host and Port;public static URL getCorrectHostnamePort(String hostPort) {_		try {_			URL u = new URL("http://"+hostPort)__			if(u.getHost() == null) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid host")__			}_			if(u.getPort() == -1) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid port")__			}_			return u__		} catch (MalformedURLException e) {_			throw new IllegalArgumentException("The given host:port ('"+hostPort+"') is invalid", e)__		}_	};method,to,validate,if,the,given,string,represents,a,hostname,port,works,also,for,ipv6,see,http,stackoverflow,com,questions,2345063,java,common,way,to,validate,and,convert,hostport,to,inetsocketaddress,return,url,object,for,accessing,host,and,port;public,static,url,get,correct,hostname,port,string,host,port,try,url,u,new,url,http,host,port,if,u,get,host,null,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,host,if,u,get,port,1,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,port,return,u,catch,malformed,urlexception,e,throw,new,illegal,argument,exception,the,given,host,port,host,port,is,invalid,e
NetUtils -> public static URL getCorrectHostnamePort(String hostPort);1443682796;Method to validate if the given String represents a hostname:port.__Works also for ipv6.__See: http://stackoverflow.com/questions/2345063/java-common-way-to-validate-and-convert-hostport-to-inetsocketaddress__@return URL object for accessing host and Port;public static URL getCorrectHostnamePort(String hostPort) {_		try {_			URL u = new URL("http://"+hostPort)__			if(u.getHost() == null) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid host")__			}_			if(u.getPort() == -1) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid port")__			}_			return u__		} catch (MalformedURLException e) {_			throw new IllegalArgumentException("The given host:port ('"+hostPort+"') is invalid", e)__		}_	};method,to,validate,if,the,given,string,represents,a,hostname,port,works,also,for,ipv6,see,http,stackoverflow,com,questions,2345063,java,common,way,to,validate,and,convert,hostport,to,inetsocketaddress,return,url,object,for,accessing,host,and,port;public,static,url,get,correct,hostname,port,string,host,port,try,url,u,new,url,http,host,port,if,u,get,host,null,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,host,if,u,get,port,1,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,port,return,u,catch,malformed,urlexception,e,throw,new,illegal,argument,exception,the,given,host,port,host,port,is,invalid,e
NetUtils -> public static URL getCorrectHostnamePort(String hostPort);1448376996;Method to validate if the given String represents a hostname:port.__Works also for ipv6.__See: http://stackoverflow.com/questions/2345063/java-common-way-to-validate-and-convert-hostport-to-inetsocketaddress__@return URL object for accessing host and Port;public static URL getCorrectHostnamePort(String hostPort) {_		try {_			URL u = new URL("http://"+hostPort)__			if(u.getHost() == null) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid host")__			}_			if(u.getPort() == -1) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid port")__			}_			return u__		} catch (MalformedURLException e) {_			throw new IllegalArgumentException("The given host:port ('"+hostPort+"') is invalid", e)__		}_	};method,to,validate,if,the,given,string,represents,a,hostname,port,works,also,for,ipv6,see,http,stackoverflow,com,questions,2345063,java,common,way,to,validate,and,convert,hostport,to,inetsocketaddress,return,url,object,for,accessing,host,and,port;public,static,url,get,correct,hostname,port,string,host,port,try,url,u,new,url,http,host,port,if,u,get,host,null,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,host,if,u,get,port,1,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,port,return,u,catch,malformed,urlexception,e,throw,new,illegal,argument,exception,the,given,host,port,host,port,is,invalid,e
NetUtils -> public static URL getCorrectHostnamePort(String hostPort);1449679265;Method to validate if the given String represents a hostname:port.__Works also for ipv6.__See: http://stackoverflow.com/questions/2345063/java-common-way-to-validate-and-convert-hostport-to-inetsocketaddress__@return URL object for accessing host and Port;public static URL getCorrectHostnamePort(String hostPort) {_		try {_			URL u = new URL("http://"+hostPort)__			if(u.getHost() == null) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid host")__			}_			if(u.getPort() == -1) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid port")__			}_			return u__		} catch (MalformedURLException e) {_			throw new IllegalArgumentException("The given host:port ('"+hostPort+"') is invalid", e)__		}_	};method,to,validate,if,the,given,string,represents,a,hostname,port,works,also,for,ipv6,see,http,stackoverflow,com,questions,2345063,java,common,way,to,validate,and,convert,hostport,to,inetsocketaddress,return,url,object,for,accessing,host,and,port;public,static,url,get,correct,hostname,port,string,host,port,try,url,u,new,url,http,host,port,if,u,get,host,null,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,host,if,u,get,port,1,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,port,return,u,catch,malformed,urlexception,e,throw,new,illegal,argument,exception,the,given,host,port,host,port,is,invalid,e
NetUtils -> public static URL getCorrectHostnamePort(String hostPort);1455479358;Method to validate if the given String represents a hostname:port.__Works also for ipv6.__See: http://stackoverflow.com/questions/2345063/java-common-way-to-validate-and-convert-hostport-to-inetsocketaddress__@return URL object for accessing host and Port;public static URL getCorrectHostnamePort(String hostPort) {_		try {_			URL u = new URL("http://"+hostPort)__			if(u.getHost() == null) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid host")__			}_			if(u.getPort() == -1) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid port")__			}_			return u__		} catch (MalformedURLException e) {_			throw new IllegalArgumentException("The given host:port ('"+hostPort+"') is invalid", e)__		}_	};method,to,validate,if,the,given,string,represents,a,hostname,port,works,also,for,ipv6,see,http,stackoverflow,com,questions,2345063,java,common,way,to,validate,and,convert,hostport,to,inetsocketaddress,return,url,object,for,accessing,host,and,port;public,static,url,get,correct,hostname,port,string,host,port,try,url,u,new,url,http,host,port,if,u,get,host,null,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,host,if,u,get,port,1,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,port,return,u,catch,malformed,urlexception,e,throw,new,illegal,argument,exception,the,given,host,port,host,port,is,invalid,e
NetUtils -> public static URL getCorrectHostnamePort(String hostPort);1459248687;Method to validate if the given String represents a hostname:port.__Works also for ipv6.__See: http://stackoverflow.com/questions/2345063/java-common-way-to-validate-and-convert-hostport-to-inetsocketaddress__@return URL object for accessing host and Port;public static URL getCorrectHostnamePort(String hostPort) {_		try {_			URL u = new URL("http://"+hostPort)__			if(u.getHost() == null) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid host")__			}_			if(u.getPort() == -1) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid port")__			}_			return u__		} catch (MalformedURLException e) {_			throw new IllegalArgumentException("The given host:port ('"+hostPort+"') is invalid", e)__		}_	};method,to,validate,if,the,given,string,represents,a,hostname,port,works,also,for,ipv6,see,http,stackoverflow,com,questions,2345063,java,common,way,to,validate,and,convert,hostport,to,inetsocketaddress,return,url,object,for,accessing,host,and,port;public,static,url,get,correct,hostname,port,string,host,port,try,url,u,new,url,http,host,port,if,u,get,host,null,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,host,if,u,get,port,1,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,port,return,u,catch,malformed,urlexception,e,throw,new,illegal,argument,exception,the,given,host,port,host,port,is,invalid,e
NetUtils -> public static URL getCorrectHostnamePort(String hostPort);1460741894;Method to validate if the given String represents a hostname:port.__Works also for ipv6.__See: http://stackoverflow.com/questions/2345063/java-common-way-to-validate-and-convert-hostport-to-inetsocketaddress__@return URL object for accessing host and Port;public static URL getCorrectHostnamePort(String hostPort) {_		try {_			URL u = new URL("http://"+hostPort)__			if(u.getHost() == null) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid host")__			}_			if(u.getPort() == -1) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid port")__			}_			return u__		} catch (MalformedURLException e) {_			throw new IllegalArgumentException("The given host:port ('"+hostPort+"') is invalid", e)__		}_	};method,to,validate,if,the,given,string,represents,a,hostname,port,works,also,for,ipv6,see,http,stackoverflow,com,questions,2345063,java,common,way,to,validate,and,convert,hostport,to,inetsocketaddress,return,url,object,for,accessing,host,and,port;public,static,url,get,correct,hostname,port,string,host,port,try,url,u,new,url,http,host,port,if,u,get,host,null,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,host,if,u,get,port,1,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,port,return,u,catch,malformed,urlexception,e,throw,new,illegal,argument,exception,the,given,host,port,host,port,is,invalid,e
NetUtils -> public static URL getCorrectHostnamePort(String hostPort);1481907119;Method to validate if the given String represents a hostname:port.__Works also for ipv6.__See: http://stackoverflow.com/questions/2345063/java-common-way-to-validate-and-convert-hostport-to-inetsocketaddress__@return URL object for accessing host and Port;public static URL getCorrectHostnamePort(String hostPort) {_		try {_			URL u = new URL("http://"+hostPort)__			if(u.getHost() == null) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid host")__			}_			if(u.getPort() == -1) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid port")__			}_			return u__		} catch (MalformedURLException e) {_			throw new IllegalArgumentException("The given host:port ('"+hostPort+"') is invalid", e)__		}_	};method,to,validate,if,the,given,string,represents,a,hostname,port,works,also,for,ipv6,see,http,stackoverflow,com,questions,2345063,java,common,way,to,validate,and,convert,hostport,to,inetsocketaddress,return,url,object,for,accessing,host,and,port;public,static,url,get,correct,hostname,port,string,host,port,try,url,u,new,url,http,host,port,if,u,get,host,null,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,host,if,u,get,port,1,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,port,return,u,catch,malformed,urlexception,e,throw,new,illegal,argument,exception,the,given,host,port,host,port,is,invalid,e
NetUtils -> public static URL getCorrectHostnamePort(String hostPort);1498896245;Method to validate if the given String represents a hostname:port.__Works also for ipv6.__See: http://stackoverflow.com/questions/2345063/java-common-way-to-validate-and-convert-hostport-to-inetsocketaddress__@return URL object for accessing host and Port;public static URL getCorrectHostnamePort(String hostPort) {_		try {_			URL u = new URL("http://"+hostPort)__			if(u.getHost() == null) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid host")__			}_			if(u.getPort() == -1) {_				throw new IllegalArgumentException("The given host:port ('"+hostPort+"') doesn't contain a valid port")__			}_			return u__		} catch (MalformedURLException e) {_			throw new IllegalArgumentException("The given host:port ('"+hostPort+"') is invalid", e)__		}_	};method,to,validate,if,the,given,string,represents,a,hostname,port,works,also,for,ipv6,see,http,stackoverflow,com,questions,2345063,java,common,way,to,validate,and,convert,hostport,to,inetsocketaddress,return,url,object,for,accessing,host,and,port;public,static,url,get,correct,hostname,port,string,host,port,try,url,u,new,url,http,host,port,if,u,get,host,null,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,host,if,u,get,port,1,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,port,return,u,catch,malformed,urlexception,e,throw,new,illegal,argument,exception,the,given,host,port,host,port,is,invalid,e
NetUtils -> public static URL getCorrectHostnamePort(String hostPort);1516295284;Method to validate if the given String represents a hostname:port.__<p>Works also for ipv6.__<p>See: http://stackoverflow.com/questions/2345063/java-common-way-to-validate-and-convert-hostport-to-inetsocketaddress__@return URL object for accessing host and Port;public static URL getCorrectHostnamePort(String hostPort) {_		try {_			URL u = new URL("http://" + hostPort)__			if (u.getHost() == null) {_				throw new IllegalArgumentException("The given host:port ('" + hostPort + "') doesn't contain a valid host")__			}_			if (u.getPort() == -1) {_				throw new IllegalArgumentException("The given host:port ('" + hostPort + "') doesn't contain a valid port")__			}_			return u__		} catch (MalformedURLException e) {_			throw new IllegalArgumentException("The given host:port ('" + hostPort + "') is invalid", e)__		}_	};method,to,validate,if,the,given,string,represents,a,hostname,port,p,works,also,for,ipv6,p,see,http,stackoverflow,com,questions,2345063,java,common,way,to,validate,and,convert,hostport,to,inetsocketaddress,return,url,object,for,accessing,host,and,port;public,static,url,get,correct,hostname,port,string,host,port,try,url,u,new,url,http,host,port,if,u,get,host,null,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,host,if,u,get,port,1,throw,new,illegal,argument,exception,the,given,host,port,host,port,doesn,t,contain,a,valid,port,return,u,catch,malformed,urlexception,e,throw,new,illegal,argument,exception,the,given,host,port,host,port,is,invalid,e
NetUtils -> public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory);1459248687;Tries to allocate a socket from the given sets of ports.__@param portsIterator A set of ports to choose from._@param factory A factory for creating the SocketServer_@return null if no port was available or an allocated socket.;public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory) {_		while (portsIterator.hasNext()) {_			int port = portsIterator.next()__			LOG.debug("Trying to open socket on port {}", port)__			try {_				return factory.createSocket(port)__			} catch (IOException | IllegalArgumentException e) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Unable to allocate socket on port", e)__				} else {_					LOG.info("Unable to allocate on port {}, due to error: {}", port, e.getMessage())__				}_			}_		}_		return null__	};tries,to,allocate,a,socket,from,the,given,sets,of,ports,param,ports,iterator,a,set,of,ports,to,choose,from,param,factory,a,factory,for,creating,the,socket,server,return,null,if,no,port,was,available,or,an,allocated,socket;public,static,server,socket,create,socket,from,ports,iterator,integer,ports,iterator,socket,factory,factory,while,ports,iterator,has,next,int,port,ports,iterator,next,log,debug,trying,to,open,socket,on,port,port,try,return,factory,create,socket,port,catch,ioexception,illegal,argument,exception,e,if,log,is,debug,enabled,log,debug,unable,to,allocate,socket,on,port,e,else,log,info,unable,to,allocate,on,port,due,to,error,port,e,get,message,return,null
NetUtils -> public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory);1460741894;Tries to allocate a socket from the given sets of ports.__@param portsIterator A set of ports to choose from._@param factory A factory for creating the SocketServer_@return null if no port was available or an allocated socket.;public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory) {_		while (portsIterator.hasNext()) {_			int port = portsIterator.next()__			LOG.debug("Trying to open socket on port {}", port)__			try {_				return factory.createSocket(port)__			} catch (IOException | IllegalArgumentException e) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Unable to allocate socket on port", e)__				} else {_					LOG.info("Unable to allocate on port {}, due to error: {}", port, e.getMessage())__				}_			}_		}_		return null__	};tries,to,allocate,a,socket,from,the,given,sets,of,ports,param,ports,iterator,a,set,of,ports,to,choose,from,param,factory,a,factory,for,creating,the,socket,server,return,null,if,no,port,was,available,or,an,allocated,socket;public,static,server,socket,create,socket,from,ports,iterator,integer,ports,iterator,socket,factory,factory,while,ports,iterator,has,next,int,port,ports,iterator,next,log,debug,trying,to,open,socket,on,port,port,try,return,factory,create,socket,port,catch,ioexception,illegal,argument,exception,e,if,log,is,debug,enabled,log,debug,unable,to,allocate,socket,on,port,e,else,log,info,unable,to,allocate,on,port,due,to,error,port,e,get,message,return,null
NetUtils -> public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory);1481907119;Tries to allocate a socket from the given sets of ports.__@param portsIterator A set of ports to choose from._@param factory A factory for creating the SocketServer_@return null if no port was available or an allocated socket.;public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory) {_		while (portsIterator.hasNext()) {_			int port = portsIterator.next()__			LOG.debug("Trying to open socket on port {}", port)__			try {_				return factory.createSocket(port)__			} catch (IOException | IllegalArgumentException e) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Unable to allocate socket on port", e)__				} else {_					LOG.info("Unable to allocate on port {}, due to error: {}", port, e.getMessage())__				}_			}_		}_		return null__	};tries,to,allocate,a,socket,from,the,given,sets,of,ports,param,ports,iterator,a,set,of,ports,to,choose,from,param,factory,a,factory,for,creating,the,socket,server,return,null,if,no,port,was,available,or,an,allocated,socket;public,static,server,socket,create,socket,from,ports,iterator,integer,ports,iterator,socket,factory,factory,while,ports,iterator,has,next,int,port,ports,iterator,next,log,debug,trying,to,open,socket,on,port,port,try,return,factory,create,socket,port,catch,ioexception,illegal,argument,exception,e,if,log,is,debug,enabled,log,debug,unable,to,allocate,socket,on,port,e,else,log,info,unable,to,allocate,on,port,due,to,error,port,e,get,message,return,null
NetUtils -> public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory);1498896245;Tries to allocate a socket from the given sets of ports.__@param portsIterator A set of ports to choose from._@param factory A factory for creating the SocketServer_@return null if no port was available or an allocated socket.;public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory) {_		while (portsIterator.hasNext()) {_			int port = portsIterator.next()__			LOG.debug("Trying to open socket on port {}", port)__			try {_				return factory.createSocket(port)__			} catch (IOException | IllegalArgumentException e) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Unable to allocate socket on port", e)__				} else {_					LOG.info("Unable to allocate on port {}, due to error: {}", port, e.getMessage())__				}_			}_		}_		return null__	};tries,to,allocate,a,socket,from,the,given,sets,of,ports,param,ports,iterator,a,set,of,ports,to,choose,from,param,factory,a,factory,for,creating,the,socket,server,return,null,if,no,port,was,available,or,an,allocated,socket;public,static,server,socket,create,socket,from,ports,iterator,integer,ports,iterator,socket,factory,factory,while,ports,iterator,has,next,int,port,ports,iterator,next,log,debug,trying,to,open,socket,on,port,port,try,return,factory,create,socket,port,catch,ioexception,illegal,argument,exception,e,if,log,is,debug,enabled,log,debug,unable,to,allocate,socket,on,port,e,else,log,info,unable,to,allocate,on,port,due,to,error,port,e,get,message,return,null
NetUtils -> public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory);1516295284;Tries to allocate a socket from the given sets of ports.__@param portsIterator A set of ports to choose from._@param factory A factory for creating the SocketServer_@return null if no port was available or an allocated socket.;public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory) {_		while (portsIterator.hasNext()) {_			int port = portsIterator.next()__			LOG.debug("Trying to open socket on port {}", port)__			try {_				return factory.createSocket(port)__			} catch (IOException | IllegalArgumentException e) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Unable to allocate socket on port", e)__				} else {_					LOG.info("Unable to allocate on port {}, due to error: {}", port, e.getMessage())__				}_			}_		}_		return null__	};tries,to,allocate,a,socket,from,the,given,sets,of,ports,param,ports,iterator,a,set,of,ports,to,choose,from,param,factory,a,factory,for,creating,the,socket,server,return,null,if,no,port,was,available,or,an,allocated,socket;public,static,server,socket,create,socket,from,ports,iterator,integer,ports,iterator,socket,factory,factory,while,ports,iterator,has,next,int,port,ports,iterator,next,log,debug,trying,to,open,socket,on,port,port,try,return,factory,create,socket,port,catch,ioexception,illegal,argument,exception,e,if,log,is,debug,enabled,log,debug,unable,to,allocate,socket,on,port,e,else,log,info,unable,to,allocate,on,port,due,to,error,port,e,get,message,return,null
NetUtils -> public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory) throws IOException;1449679265;Tries to allocate a socket from the given sets of ports.__@param portsIterator A set of ports to choose from._@param factory A factory for creating the SocketServer_@return null if no port was available or an allocated socket.;public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory) throws IOException {_		while (portsIterator.hasNext()) {_			int port = portsIterator.next()__			LOG.debug("Trying to open socket on port {}", port)__			try {_				return factory.createSocket(port)__			} catch (IOException | IllegalArgumentException e) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Unable to allocate socket on port", e)__				} else {_					LOG.info("Unable to allocate on port {}, due to error: {}", port, e.getMessage())__				}_			}_		}_		return null__	};tries,to,allocate,a,socket,from,the,given,sets,of,ports,param,ports,iterator,a,set,of,ports,to,choose,from,param,factory,a,factory,for,creating,the,socket,server,return,null,if,no,port,was,available,or,an,allocated,socket;public,static,server,socket,create,socket,from,ports,iterator,integer,ports,iterator,socket,factory,factory,throws,ioexception,while,ports,iterator,has,next,int,port,ports,iterator,next,log,debug,trying,to,open,socket,on,port,port,try,return,factory,create,socket,port,catch,ioexception,illegal,argument,exception,e,if,log,is,debug,enabled,log,debug,unable,to,allocate,socket,on,port,e,else,log,info,unable,to,allocate,on,port,due,to,error,port,e,get,message,return,null
NetUtils -> public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory) throws IOException;1455479358;Tries to allocate a socket from the given sets of ports.__@param portsIterator A set of ports to choose from._@param factory A factory for creating the SocketServer_@return null if no port was available or an allocated socket.;public static ServerSocket createSocketFromPorts(Iterator<Integer> portsIterator, SocketFactory factory) throws IOException {_		while (portsIterator.hasNext()) {_			int port = portsIterator.next()__			LOG.debug("Trying to open socket on port {}", port)__			try {_				return factory.createSocket(port)__			} catch (IOException | IllegalArgumentException e) {_				if (LOG.isDebugEnabled()) {_					LOG.debug("Unable to allocate socket on port", e)__				} else {_					LOG.info("Unable to allocate on port {}, due to error: {}", port, e.getMessage())__				}_			}_		}_		return null__	};tries,to,allocate,a,socket,from,the,given,sets,of,ports,param,ports,iterator,a,set,of,ports,to,choose,from,param,factory,a,factory,for,creating,the,socket,server,return,null,if,no,port,was,available,or,an,allocated,socket;public,static,server,socket,create,socket,from,ports,iterator,integer,ports,iterator,socket,factory,factory,throws,ioexception,while,ports,iterator,has,next,int,port,ports,iterator,next,log,debug,trying,to,open,socket,on,port,port,try,return,factory,create,socket,port,catch,ioexception,illegal,argument,exception,e,if,log,is,debug,enabled,log,debug,unable,to,allocate,socket,on,port,e,else,log,info,unable,to,allocate,on,port,due,to,error,port,e,get,message,return,null
NetUtils -> public static String unresolvedHostAndPortToNormalizedString(String host, int port);1481907119;Returns a valid address for Akka. It returns a String of format 'host:port'._When an IPv6 address is specified, it normalizes the IPv6 address to avoid_complications with the exact URL match policy of Akka._@param host The hostname, IPv4 or IPv6 address_@param port The port_@return host:port where host will be normalized if it is an IPv6 address;public static String unresolvedHostAndPortToNormalizedString(String host, int port) {_		Preconditions.checkArgument(port >= 0 && port < 65536,_			"Port is not within the valid range,")__		return unresolvedHostToNormalizedString(host) + ":" + port__	};returns,a,valid,address,for,akka,it,returns,a,string,of,format,host,port,when,an,ipv6,address,is,specified,it,normalizes,the,ipv6,address,to,avoid,complications,with,the,exact,url,match,policy,of,akka,param,host,the,hostname,ipv4,or,ipv6,address,param,port,the,port,return,host,port,where,host,will,be,normalized,if,it,is,an,ipv6,address;public,static,string,unresolved,host,and,port,to,normalized,string,string,host,int,port,preconditions,check,argument,port,0,port,65536,port,is,not,within,the,valid,range,return,unresolved,host,to,normalized,string,host,port
NetUtils -> public static String unresolvedHostAndPortToNormalizedString(String host, int port);1498896245;Returns a valid address for Akka. It returns a String of format 'host:port'._When an IPv6 address is specified, it normalizes the IPv6 address to avoid_complications with the exact URL match policy of Akka._@param host The hostname, IPv4 or IPv6 address_@param port The port_@return host:port where host will be normalized if it is an IPv6 address;public static String unresolvedHostAndPortToNormalizedString(String host, int port) {_		Preconditions.checkArgument(port >= 0 && port < 65536,_			"Port is not within the valid range,")__		return unresolvedHostToNormalizedString(host) + ":" + port__	};returns,a,valid,address,for,akka,it,returns,a,string,of,format,host,port,when,an,ipv6,address,is,specified,it,normalizes,the,ipv6,address,to,avoid,complications,with,the,exact,url,match,policy,of,akka,param,host,the,hostname,ipv4,or,ipv6,address,param,port,the,port,return,host,port,where,host,will,be,normalized,if,it,is,an,ipv6,address;public,static,string,unresolved,host,and,port,to,normalized,string,string,host,int,port,preconditions,check,argument,port,0,port,65536,port,is,not,within,the,valid,range,return,unresolved,host,to,normalized,string,host,port
NetUtils -> public static String unresolvedHostAndPortToNormalizedString(String host, int port);1516295284;Returns a valid address for Akka. It returns a String of format 'host:port'._When an IPv6 address is specified, it normalizes the IPv6 address to avoid_complications with the exact URL match policy of Akka._@param host The hostname, IPv4 or IPv6 address_@param port The port_@return host:port where host will be normalized if it is an IPv6 address;public static String unresolvedHostAndPortToNormalizedString(String host, int port) {_		Preconditions.checkArgument(port >= 0 && port < 65536,_			"Port is not within the valid range,")__		return unresolvedHostToNormalizedString(host) + ":" + port__	};returns,a,valid,address,for,akka,it,returns,a,string,of,format,host,port,when,an,ipv6,address,is,specified,it,normalizes,the,ipv6,address,to,avoid,complications,with,the,exact,url,match,policy,of,akka,param,host,the,hostname,ipv4,or,ipv6,address,param,port,the,port,return,host,port,where,host,will,be,normalized,if,it,is,an,ipv6,address;public,static,string,unresolved,host,and,port,to,normalized,string,string,host,int,port,preconditions,check,argument,port,0,port,65536,port,is,not,within,the,valid,range,return,unresolved,host,to,normalized,string,host,port
NetUtils -> public static String getWildcardIPAddress();1481907119;Returns the wildcard address to listen on all interfaces._@return Either 0.0.0.0 or :: depending on the IP setup.;public static String getWildcardIPAddress() {_		return WILDCARD_ADDRESS__	};returns,the,wildcard,address,to,listen,on,all,interfaces,return,either,0,0,0,0,or,depending,on,the,ip,setup;public,static,string,get,wildcard,ipaddress,return
NetUtils -> public static String getWildcardIPAddress();1498896245;Returns the wildcard address to listen on all interfaces._@return Either 0.0.0.0 or :: depending on the IP setup.;public static String getWildcardIPAddress() {_		return WILDCARD_ADDRESS__	};returns,the,wildcard,address,to,listen,on,all,interfaces,return,either,0,0,0,0,or,depending,on,the,ip,setup;public,static,string,get,wildcard,ipaddress,return
NetUtils -> public static String getWildcardIPAddress();1516295284;Returns the wildcard address to listen on all interfaces._@return Either 0.0.0.0 or :: depending on the IP setup.;public static String getWildcardIPAddress() {_		return WILDCARD_ADDRESS__	};returns,the,wildcard,address,to,listen,on,all,interfaces,return,either,0,0,0,0,or,depending,on,the,ip,setup;public,static,string,get,wildcard,ipaddress,return
NetUtils -> public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException;1443682796;Normalizes and encodes a hostname and port to be included in URL._In particular, this method makes sure that IPv6 address literals have the proper_formatting to be included in URLs.__@param host The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port._@throws java.net.UnknownHostException Thrown, if the hostname cannot be translated into a URL.;public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException {_		return ipAddressAndPortToUrlString(InetAddress.getByName(host), port)__	};normalizes,and,encodes,a,hostname,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,address,literals,have,the,proper,formatting,to,be,included,in,urls,param,host,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port,throws,java,net,unknown,host,exception,thrown,if,the,hostname,cannot,be,translated,into,a,url;public,static,string,host,and,port,to,url,string,string,host,int,port,throws,unknown,host,exception,return,ip,address,and,port,to,url,string,inet,address,get,by,name,host,port
NetUtils -> public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException;1448376996;Normalizes and encodes a hostname and port to be included in URL._In particular, this method makes sure that IPv6 address literals have the proper_formatting to be included in URLs.__@param host The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port._@throws java.net.UnknownHostException Thrown, if the hostname cannot be translated into a URL.;public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException {_		return ipAddressAndPortToUrlString(InetAddress.getByName(host), port)__	};normalizes,and,encodes,a,hostname,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,address,literals,have,the,proper,formatting,to,be,included,in,urls,param,host,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port,throws,java,net,unknown,host,exception,thrown,if,the,hostname,cannot,be,translated,into,a,url;public,static,string,host,and,port,to,url,string,string,host,int,port,throws,unknown,host,exception,return,ip,address,and,port,to,url,string,inet,address,get,by,name,host,port
NetUtils -> public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException;1449679265;Normalizes and encodes a hostname and port to be included in URL._In particular, this method makes sure that IPv6 address literals have the proper_formatting to be included in URLs.__@param host The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port._@throws java.net.UnknownHostException Thrown, if the hostname cannot be translated into a URL.;public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException {_		return ipAddressAndPortToUrlString(InetAddress.getByName(host), port)__	};normalizes,and,encodes,a,hostname,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,address,literals,have,the,proper,formatting,to,be,included,in,urls,param,host,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port,throws,java,net,unknown,host,exception,thrown,if,the,hostname,cannot,be,translated,into,a,url;public,static,string,host,and,port,to,url,string,string,host,int,port,throws,unknown,host,exception,return,ip,address,and,port,to,url,string,inet,address,get,by,name,host,port
NetUtils -> public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException;1455479358;Normalizes and encodes a hostname and port to be included in URL._In particular, this method makes sure that IPv6 address literals have the proper_formatting to be included in URLs.__@param host The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port._@throws java.net.UnknownHostException Thrown, if the hostname cannot be translated into a URL.;public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException {_		return ipAddressAndPortToUrlString(InetAddress.getByName(host), port)__	};normalizes,and,encodes,a,hostname,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,address,literals,have,the,proper,formatting,to,be,included,in,urls,param,host,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port,throws,java,net,unknown,host,exception,thrown,if,the,hostname,cannot,be,translated,into,a,url;public,static,string,host,and,port,to,url,string,string,host,int,port,throws,unknown,host,exception,return,ip,address,and,port,to,url,string,inet,address,get,by,name,host,port
NetUtils -> public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException;1459248687;Normalizes and encodes a hostname and port to be included in URL._In particular, this method makes sure that IPv6 address literals have the proper_formatting to be included in URLs.__@param host The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port._@throws java.net.UnknownHostException Thrown, if the hostname cannot be translated into a URL.;public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException {_		return ipAddressAndPortToUrlString(InetAddress.getByName(host), port)__	};normalizes,and,encodes,a,hostname,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,address,literals,have,the,proper,formatting,to,be,included,in,urls,param,host,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port,throws,java,net,unknown,host,exception,thrown,if,the,hostname,cannot,be,translated,into,a,url;public,static,string,host,and,port,to,url,string,string,host,int,port,throws,unknown,host,exception,return,ip,address,and,port,to,url,string,inet,address,get,by,name,host,port
NetUtils -> public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException;1460741894;Normalizes and encodes a hostname and port to be included in URL._In particular, this method makes sure that IPv6 address literals have the proper_formatting to be included in URLs.__@param host The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port._@throws java.net.UnknownHostException Thrown, if the hostname cannot be translated into a URL.;public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException {_		return ipAddressAndPortToUrlString(InetAddress.getByName(host), port)__	};normalizes,and,encodes,a,hostname,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,address,literals,have,the,proper,formatting,to,be,included,in,urls,param,host,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port,throws,java,net,unknown,host,exception,thrown,if,the,hostname,cannot,be,translated,into,a,url;public,static,string,host,and,port,to,url,string,string,host,int,port,throws,unknown,host,exception,return,ip,address,and,port,to,url,string,inet,address,get,by,name,host,port
NetUtils -> public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException;1481907119;Normalizes and encodes a hostname and port to be included in URL._In particular, this method makes sure that IPv6 address literals have the proper_formatting to be included in URLs.__@param host The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port._@throws java.net.UnknownHostException Thrown, if the hostname cannot be translated into a URL.;public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException {_		return ipAddressAndPortToUrlString(InetAddress.getByName(host), port)__	};normalizes,and,encodes,a,hostname,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,address,literals,have,the,proper,formatting,to,be,included,in,urls,param,host,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port,throws,java,net,unknown,host,exception,thrown,if,the,hostname,cannot,be,translated,into,a,url;public,static,string,host,and,port,to,url,string,string,host,int,port,throws,unknown,host,exception,return,ip,address,and,port,to,url,string,inet,address,get,by,name,host,port
NetUtils -> public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException;1498896245;Normalizes and encodes a hostname and port to be included in URL._In particular, this method makes sure that IPv6 address literals have the proper_formatting to be included in URLs.__@param host The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port._@throws java.net.UnknownHostException Thrown, if the hostname cannot be translated into a URL.;public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException {_		return ipAddressAndPortToUrlString(InetAddress.getByName(host), port)__	};normalizes,and,encodes,a,hostname,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,address,literals,have,the,proper,formatting,to,be,included,in,urls,param,host,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port,throws,java,net,unknown,host,exception,thrown,if,the,hostname,cannot,be,translated,into,a,url;public,static,string,host,and,port,to,url,string,string,host,int,port,throws,unknown,host,exception,return,ip,address,and,port,to,url,string,inet,address,get,by,name,host,port
NetUtils -> public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException;1516295284;Normalizes and encodes a hostname and port to be included in URL._In particular, this method makes sure that IPv6 address literals have the proper_formatting to be included in URLs.__@param host The address to be included in the URL._@param port The port for the URL address._@return The proper URL string encoded IP address and port._@throws java.net.UnknownHostException Thrown, if the hostname cannot be translated into a URL.;public static String hostAndPortToUrlString(String host, int port) throws UnknownHostException {_		return ipAddressAndPortToUrlString(InetAddress.getByName(host), port)__	};normalizes,and,encodes,a,hostname,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,address,literals,have,the,proper,formatting,to,be,included,in,urls,param,host,the,address,to,be,included,in,the,url,param,port,the,port,for,the,url,address,return,the,proper,url,string,encoded,ip,address,and,port,throws,java,net,unknown,host,exception,thrown,if,the,hostname,cannot,be,translated,into,a,url;public,static,string,host,and,port,to,url,string,string,host,int,port,throws,unknown,host,exception,return,ip,address,and,port,to,url,string,inet,address,get,by,name,host,port
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1413645186;Turn a fully qualified domain name (fqdn) into a hostname.__@param fqdn_@return;public static String getHostnameFromFQDN(String fqdn) {_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,param,fqdn,return;public,static,string,get,hostname,from,fqdn,string,fqdn,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1413645189;Turn a fully qualified domain name (fqdn) into a hostname.__@param fqdn_@return;public static String getHostnameFromFQDN(String fqdn) {_		if(fqdn == null) {_			throw new IllegalArgumentException("Input string is null (fqdn)")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,param,fqdn,return;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,input,string,is,null,fqdn,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1415044729;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1426795085;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1440672038;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1443682795;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1443682796;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1448376996;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1449679265;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1455479358;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1459248687;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1460741894;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1481907119;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1498896245;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if(dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String getHostnameFromFQDN(String fqdn);1516295284;Turn a fully qualified domain name (fqdn) into a hostname. If the fqdn has multiple subparts_(separated by a period '.'), it will take the first part. Otherwise it takes the entire fqdn.__@param fqdn The fully qualified domain name._@return The hostname.;public static String getHostnameFromFQDN(String fqdn) {_		if (fqdn == null) {_			throw new IllegalArgumentException("fqdn is null")__		}_		int dotPos = fqdn.indexOf('.')__		if (dotPos == -1) {_			return fqdn__		} else {_			return fqdn.substring(0, dotPos)__		}_	};turn,a,fully,qualified,domain,name,fqdn,into,a,hostname,if,the,fqdn,has,multiple,subparts,separated,by,a,period,it,will,take,the,first,part,otherwise,it,takes,the,entire,fqdn,param,fqdn,the,fully,qualified,domain,name,return,the,hostname;public,static,string,get,hostname,from,fqdn,string,fqdn,if,fqdn,null,throw,new,illegal,argument,exception,fqdn,is,null,int,dot,pos,fqdn,index,of,if,dot,pos,1,return,fqdn,else,return,fqdn,substring,0,dot,pos
NetUtils -> public static String unresolvedHostToNormalizedString(String host);1481907119;Returns an address in a normalized format for Akka._When an IPv6 address is specified, it normalizes the IPv6 address to avoid_complications with the exact URL match policy of Akka._@param host The hostname, IPv4 or IPv6 address_@return host which will be normalized if it is an IPv6 address;public static String unresolvedHostToNormalizedString(String host) {_		_		_		if (host == null) {_			host = InetAddress.getLoopbackAddress().getHostAddress()__		} else {_			host = host.trim().toLowerCase()__		}__		_		if (IPAddressUtil.isIPv6LiteralAddress(host)) {_			byte[] ipV6Address = IPAddressUtil.textToNumericFormatV6(host)__			host = getIPv6UrlRepresentation(ipV6Address)__		} else if (!IPAddressUtil.isIPv4LiteralAddress(host)) {_			try {_				_				Preconditions.checkArgument(!host.startsWith("."))__				Preconditions.checkArgument(!host.endsWith("."))__				Preconditions.checkArgument(!host.contains(":"))__			} catch (Exception e) {_				throw new IllegalConfigurationException("The configured hostname is not valid", e)__			}_		}__		return host__	};returns,an,address,in,a,normalized,format,for,akka,when,an,ipv6,address,is,specified,it,normalizes,the,ipv6,address,to,avoid,complications,with,the,exact,url,match,policy,of,akka,param,host,the,hostname,ipv4,or,ipv6,address,return,host,which,will,be,normalized,if,it,is,an,ipv6,address;public,static,string,unresolved,host,to,normalized,string,string,host,if,host,null,host,inet,address,get,loopback,address,get,host,address,else,host,host,trim,to,lower,case,if,ipaddress,util,is,ipv6literal,address,host,byte,ip,v6address,ipaddress,util,text,to,numeric,format,v6,host,host,get,ipv6url,representation,ip,v6address,else,if,ipaddress,util,is,ipv4literal,address,host,try,preconditions,check,argument,host,starts,with,preconditions,check,argument,host,ends,with,preconditions,check,argument,host,contains,catch,exception,e,throw,new,illegal,configuration,exception,the,configured,hostname,is,not,valid,e,return,host
NetUtils -> public static String unresolvedHostToNormalizedString(String host);1498896245;Returns an address in a normalized format for Akka._When an IPv6 address is specified, it normalizes the IPv6 address to avoid_complications with the exact URL match policy of Akka._@param host The hostname, IPv4 or IPv6 address_@return host which will be normalized if it is an IPv6 address;public static String unresolvedHostToNormalizedString(String host) {_		_		_		if (host == null) {_			host = InetAddress.getLoopbackAddress().getHostAddress()__		} else {_			host = host.trim().toLowerCase()__		}__		_		if (IPAddressUtil.isIPv6LiteralAddress(host)) {_			byte[] ipV6Address = IPAddressUtil.textToNumericFormatV6(host)__			host = getIPv6UrlRepresentation(ipV6Address)__		} else if (!IPAddressUtil.isIPv4LiteralAddress(host)) {_			try {_				_				Preconditions.checkArgument(!host.startsWith("."))__				Preconditions.checkArgument(!host.endsWith("."))__				Preconditions.checkArgument(!host.contains(":"))__			} catch (Exception e) {_				throw new IllegalConfigurationException("The configured hostname is not valid", e)__			}_		}__		return host__	};returns,an,address,in,a,normalized,format,for,akka,when,an,ipv6,address,is,specified,it,normalizes,the,ipv6,address,to,avoid,complications,with,the,exact,url,match,policy,of,akka,param,host,the,hostname,ipv4,or,ipv6,address,return,host,which,will,be,normalized,if,it,is,an,ipv6,address;public,static,string,unresolved,host,to,normalized,string,string,host,if,host,null,host,inet,address,get,loopback,address,get,host,address,else,host,host,trim,to,lower,case,if,ipaddress,util,is,ipv6literal,address,host,byte,ip,v6address,ipaddress,util,text,to,numeric,format,v6,host,host,get,ipv6url,representation,ip,v6address,else,if,ipaddress,util,is,ipv4literal,address,host,try,preconditions,check,argument,host,starts,with,preconditions,check,argument,host,ends,with,preconditions,check,argument,host,contains,catch,exception,e,throw,new,illegal,configuration,exception,the,configured,hostname,is,not,valid,e,return,host
NetUtils -> public static String unresolvedHostToNormalizedString(String host);1516295284;Returns an address in a normalized format for Akka._When an IPv6 address is specified, it normalizes the IPv6 address to avoid_complications with the exact URL match policy of Akka._@param host The hostname, IPv4 or IPv6 address_@return host which will be normalized if it is an IPv6 address;public static String unresolvedHostToNormalizedString(String host) {_		_		_		if (host == null) {_			host = InetAddress.getLoopbackAddress().getHostAddress()__		} else {_			host = host.trim().toLowerCase()__		}__		_		if (IPAddressUtil.isIPv6LiteralAddress(host)) {_			byte[] ipV6Address = IPAddressUtil.textToNumericFormatV6(host)__			host = getIPv6UrlRepresentation(ipV6Address)__		} else if (!IPAddressUtil.isIPv4LiteralAddress(host)) {_			try {_				_				Preconditions.checkArgument(!host.startsWith("."))__				Preconditions.checkArgument(!host.endsWith("."))__				Preconditions.checkArgument(!host.contains(":"))__			} catch (Exception e) {_				throw new IllegalConfigurationException("The configured hostname is not valid", e)__			}_		}__		return host__	};returns,an,address,in,a,normalized,format,for,akka,when,an,ipv6,address,is,specified,it,normalizes,the,ipv6,address,to,avoid,complications,with,the,exact,url,match,policy,of,akka,param,host,the,hostname,ipv4,or,ipv6,address,return,host,which,will,be,normalized,if,it,is,an,ipv6,address;public,static,string,unresolved,host,to,normalized,string,string,host,if,host,null,host,inet,address,get,loopback,address,get,host,address,else,host,host,trim,to,lower,case,if,ipaddress,util,is,ipv6literal,address,host,byte,ip,v6address,ipaddress,util,text,to,numeric,format,v6,host,host,get,ipv6url,representation,ip,v6address,else,if,ipaddress,util,is,ipv4literal,address,host,try,preconditions,check,argument,host,starts,with,preconditions,check,argument,host,ends,with,preconditions,check,argument,host,contains,catch,exception,e,throw,new,illegal,configuration,exception,the,configured,hostname,is,not,valid,e,return,host
NetUtils -> public static int getAvailablePort();1443682795;Find a non-occupied port.__@return A non-occupied port.;public static int getAvailablePort() {_		for (int i = 0_ i < 50_ i++) {_			try (ServerSocket serverSocket = new ServerSocket(0)) {_				int port = serverSocket.getLocalPort()__				if (port != 0) {_					return port__				}_			}_			catch (IOException ignored) {}_		}__		throw new RuntimeException("Could not find a free permitted port on the machine.")__	};find,a,non,occupied,port,return,a,non,occupied,port;public,static,int,get,available,port,for,int,i,0,i,50,i,try,server,socket,server,socket,new,server,socket,0,int,port,server,socket,get,local,port,if,port,0,return,port,catch,ioexception,ignored,throw,new,runtime,exception,could,not,find,a,free,permitted,port,on,the,machine
NetUtils -> public static int getAvailablePort();1443682796;Find a non-occupied port.__@return A non-occupied port.;public static int getAvailablePort() {_		for (int i = 0_ i < 50_ i++) {_			try (ServerSocket serverSocket = new ServerSocket(0)) {_				int port = serverSocket.getLocalPort()__				if (port != 0) {_					return port__				}_			}_			catch (IOException ignored) {}_		}__		throw new RuntimeException("Could not find a free permitted port on the machine.")__	};find,a,non,occupied,port,return,a,non,occupied,port;public,static,int,get,available,port,for,int,i,0,i,50,i,try,server,socket,server,socket,new,server,socket,0,int,port,server,socket,get,local,port,if,port,0,return,port,catch,ioexception,ignored,throw,new,runtime,exception,could,not,find,a,free,permitted,port,on,the,machine
NetUtils -> public static int getAvailablePort();1448376996;Find a non-occupied port.__@return A non-occupied port.;public static int getAvailablePort() {_		for (int i = 0_ i < 50_ i++) {_			try (ServerSocket serverSocket = new ServerSocket(0)) {_				int port = serverSocket.getLocalPort()__				if (port != 0) {_					return port__				}_			}_			catch (IOException ignored) {}_		}__		throw new RuntimeException("Could not find a free permitted port on the machine.")__	};find,a,non,occupied,port,return,a,non,occupied,port;public,static,int,get,available,port,for,int,i,0,i,50,i,try,server,socket,server,socket,new,server,socket,0,int,port,server,socket,get,local,port,if,port,0,return,port,catch,ioexception,ignored,throw,new,runtime,exception,could,not,find,a,free,permitted,port,on,the,machine
NetUtils -> public static int getAvailablePort();1449679265;Find a non-occupied port.__@return A non-occupied port.;public static int getAvailablePort() {_		for (int i = 0_ i < 50_ i++) {_			try (ServerSocket serverSocket = new ServerSocket(0)) {_				int port = serverSocket.getLocalPort()__				if (port != 0) {_					return port__				}_			}_			catch (IOException ignored) {}_		}__		throw new RuntimeException("Could not find a free permitted port on the machine.")__	};find,a,non,occupied,port,return,a,non,occupied,port;public,static,int,get,available,port,for,int,i,0,i,50,i,try,server,socket,server,socket,new,server,socket,0,int,port,server,socket,get,local,port,if,port,0,return,port,catch,ioexception,ignored,throw,new,runtime,exception,could,not,find,a,free,permitted,port,on,the,machine
NetUtils -> public static int getAvailablePort();1455479358;Find a non-occupied port.__@return A non-occupied port.;public static int getAvailablePort() {_		for (int i = 0_ i < 50_ i++) {_			try (ServerSocket serverSocket = new ServerSocket(0)) {_				int port = serverSocket.getLocalPort()__				if (port != 0) {_					return port__				}_			}_			catch (IOException ignored) {}_		}__		throw new RuntimeException("Could not find a free permitted port on the machine.")__	};find,a,non,occupied,port,return,a,non,occupied,port;public,static,int,get,available,port,for,int,i,0,i,50,i,try,server,socket,server,socket,new,server,socket,0,int,port,server,socket,get,local,port,if,port,0,return,port,catch,ioexception,ignored,throw,new,runtime,exception,could,not,find,a,free,permitted,port,on,the,machine
NetUtils -> public static int getAvailablePort();1459248687;Find a non-occupied port.__@return A non-occupied port.;public static int getAvailablePort() {_		for (int i = 0_ i < 50_ i++) {_			try (ServerSocket serverSocket = new ServerSocket(0)) {_				int port = serverSocket.getLocalPort()__				if (port != 0) {_					return port__				}_			}_			catch (IOException ignored) {}_		}__		throw new RuntimeException("Could not find a free permitted port on the machine.")__	};find,a,non,occupied,port,return,a,non,occupied,port;public,static,int,get,available,port,for,int,i,0,i,50,i,try,server,socket,server,socket,new,server,socket,0,int,port,server,socket,get,local,port,if,port,0,return,port,catch,ioexception,ignored,throw,new,runtime,exception,could,not,find,a,free,permitted,port,on,the,machine
NetUtils -> public static int getAvailablePort();1460741894;Find a non-occupied port.__@return A non-occupied port.;public static int getAvailablePort() {_		for (int i = 0_ i < 50_ i++) {_			try (ServerSocket serverSocket = new ServerSocket(0)) {_				int port = serverSocket.getLocalPort()__				if (port != 0) {_					return port__				}_			}_			catch (IOException ignored) {}_		}__		throw new RuntimeException("Could not find a free permitted port on the machine.")__	};find,a,non,occupied,port,return,a,non,occupied,port;public,static,int,get,available,port,for,int,i,0,i,50,i,try,server,socket,server,socket,new,server,socket,0,int,port,server,socket,get,local,port,if,port,0,return,port,catch,ioexception,ignored,throw,new,runtime,exception,could,not,find,a,free,permitted,port,on,the,machine
NetUtils -> public static int getAvailablePort();1481907119;Find a non-occupied port.__@return A non-occupied port.;public static int getAvailablePort() {_		for (int i = 0_ i < 50_ i++) {_			try (ServerSocket serverSocket = new ServerSocket(0)) {_				int port = serverSocket.getLocalPort()__				if (port != 0) {_					return port__				}_			}_			catch (IOException ignored) {}_		}__		throw new RuntimeException("Could not find a free permitted port on the machine.")__	};find,a,non,occupied,port,return,a,non,occupied,port;public,static,int,get,available,port,for,int,i,0,i,50,i,try,server,socket,server,socket,new,server,socket,0,int,port,server,socket,get,local,port,if,port,0,return,port,catch,ioexception,ignored,throw,new,runtime,exception,could,not,find,a,free,permitted,port,on,the,machine
NetUtils -> public static int getAvailablePort();1498896245;Find a non-occupied port.__@return A non-occupied port.;public static int getAvailablePort() {_		for (int i = 0_ i < 50_ i++) {_			try (ServerSocket serverSocket = new ServerSocket(0)) {_				int port = serverSocket.getLocalPort()__				if (port != 0) {_					return port__				}_			}_			catch (IOException ignored) {}_		}__		throw new RuntimeException("Could not find a free permitted port on the machine.")__	};find,a,non,occupied,port,return,a,non,occupied,port;public,static,int,get,available,port,for,int,i,0,i,50,i,try,server,socket,server,socket,new,server,socket,0,int,port,server,socket,get,local,port,if,port,0,return,port,catch,ioexception,ignored,throw,new,runtime,exception,could,not,find,a,free,permitted,port,on,the,machine
NetUtils -> public static int getAvailablePort();1516295284;Find a non-occupied port.__@return A non-occupied port.;public static int getAvailablePort() {_		for (int i = 0_ i < 50_ i++) {_			try (ServerSocket serverSocket = new ServerSocket(0)) {_				int port = serverSocket.getLocalPort()__				if (port != 0) {_					return port__				}_			}_			catch (IOException ignored) {}_		}__		throw new RuntimeException("Could not find a free permitted port on the machine.")__	};find,a,non,occupied,port,return,a,non,occupied,port;public,static,int,get,available,port,for,int,i,0,i,50,i,try,server,socket,server,socket,new,server,socket,0,int,port,server,socket,get,local,port,if,port,0,return,port,catch,ioexception,ignored,throw,new,runtime,exception,could,not,find,a,free,permitted,port,on,the,machine
NetUtils -> public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException;1449679265;Returns an iterator over available ports defined by the range definition.__@param rangeDefinition String describing a single port, a range of ports or multiple ranges._@return Set of ports from the range definition_@throws NumberFormatException If an invalid string is passed.;public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException {_		final String[] ranges = rangeDefinition.trim().split(",")__		List<Iterator<Integer>> iterators = new ArrayList<>(ranges.length)__		for(String rawRange: ranges) {_			Iterator<Integer> rangeIterator = null__			String range = rawRange.trim()__			int dashIdx = range.indexOf('-')__			if (dashIdx == -1) {_				_				rangeIterator = Iterators.singletonIterator(Integer.valueOf(range))__			} else {_				_				final int start = Integer.valueOf(range.substring(0, dashIdx))__				final int end = Integer.valueOf(range.substring(dashIdx+1, range.length()))__				rangeIterator = new Iterator<Integer>() {_					int i = start__					@Override_					public boolean hasNext() {_						return i <= end__					}__					@Override_					public Integer next() {_						return i++__					}__					@Override_					public void remove() {_						throw new UnsupportedOperationException("Remove not supported")__					}_				}__			}_			iterators.add(rangeIterator)__		}_		return Iterators.concat(iterators.iterator())__	};returns,an,iterator,over,available,ports,defined,by,the,range,definition,param,range,definition,string,describing,a,single,port,a,range,of,ports,or,multiple,ranges,return,set,of,ports,from,the,range,definition,throws,number,format,exception,if,an,invalid,string,is,passed;public,static,iterator,integer,get,port,range,from,string,string,range,definition,throws,number,format,exception,final,string,ranges,range,definition,trim,split,list,iterator,integer,iterators,new,array,list,ranges,length,for,string,raw,range,ranges,iterator,integer,range,iterator,null,string,range,raw,range,trim,int,dash,idx,range,index,of,if,dash,idx,1,range,iterator,iterators,singleton,iterator,integer,value,of,range,else,final,int,start,integer,value,of,range,substring,0,dash,idx,final,int,end,integer,value,of,range,substring,dash,idx,1,range,length,range,iterator,new,iterator,integer,int,i,start,override,public,boolean,has,next,return,i,end,override,public,integer,next,return,i,override,public,void,remove,throw,new,unsupported,operation,exception,remove,not,supported,iterators,add,range,iterator,return,iterators,concat,iterators,iterator
NetUtils -> public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException;1455479358;Returns an iterator over available ports defined by the range definition.__@param rangeDefinition String describing a single port, a range of ports or multiple ranges._@return Set of ports from the range definition_@throws NumberFormatException If an invalid string is passed.;public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException {_		final String[] ranges = rangeDefinition.trim().split(",")__		List<Iterator<Integer>> iterators = new ArrayList<>(ranges.length)__		for(String rawRange: ranges) {_			Iterator<Integer> rangeIterator = null__			String range = rawRange.trim()__			int dashIdx = range.indexOf('-')__			if (dashIdx == -1) {_				_				rangeIterator = Iterators.singletonIterator(Integer.valueOf(range))__			} else {_				_				final int start = Integer.valueOf(range.substring(0, dashIdx))__				final int end = Integer.valueOf(range.substring(dashIdx+1, range.length()))__				rangeIterator = new Iterator<Integer>() {_					int i = start__					@Override_					public boolean hasNext() {_						return i <= end__					}__					@Override_					public Integer next() {_						return i++__					}__					@Override_					public void remove() {_						throw new UnsupportedOperationException("Remove not supported")__					}_				}__			}_			iterators.add(rangeIterator)__		}_		return Iterators.concat(iterators.iterator())__	};returns,an,iterator,over,available,ports,defined,by,the,range,definition,param,range,definition,string,describing,a,single,port,a,range,of,ports,or,multiple,ranges,return,set,of,ports,from,the,range,definition,throws,number,format,exception,if,an,invalid,string,is,passed;public,static,iterator,integer,get,port,range,from,string,string,range,definition,throws,number,format,exception,final,string,ranges,range,definition,trim,split,list,iterator,integer,iterators,new,array,list,ranges,length,for,string,raw,range,ranges,iterator,integer,range,iterator,null,string,range,raw,range,trim,int,dash,idx,range,index,of,if,dash,idx,1,range,iterator,iterators,singleton,iterator,integer,value,of,range,else,final,int,start,integer,value,of,range,substring,0,dash,idx,final,int,end,integer,value,of,range,substring,dash,idx,1,range,length,range,iterator,new,iterator,integer,int,i,start,override,public,boolean,has,next,return,i,end,override,public,integer,next,return,i,override,public,void,remove,throw,new,unsupported,operation,exception,remove,not,supported,iterators,add,range,iterator,return,iterators,concat,iterators,iterator
NetUtils -> public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException;1459248687;Returns an iterator over available ports defined by the range definition.__@param rangeDefinition String describing a single port, a range of ports or multiple ranges._@return Set of ports from the range definition_@throws NumberFormatException If an invalid string is passed.;public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException {_		final String[] ranges = rangeDefinition.trim().split(",")__		List<Iterator<Integer>> iterators = new ArrayList<>(ranges.length)__		for(String rawRange: ranges) {_			Iterator<Integer> rangeIterator__			String range = rawRange.trim()__			int dashIdx = range.indexOf('-')__			if (dashIdx == -1) {_				_				rangeIterator = Iterators.singletonIterator(Integer.valueOf(range))__			} else {_				_				final int start = Integer.valueOf(range.substring(0, dashIdx))__				final int end = Integer.valueOf(range.substring(dashIdx+1, range.length()))__				rangeIterator = new Iterator<Integer>() {_					int i = start__					@Override_					public boolean hasNext() {_						return i <= end__					}__					@Override_					public Integer next() {_						return i++__					}__					@Override_					public void remove() {_						throw new UnsupportedOperationException("Remove not supported")__					}_				}__			}_			iterators.add(rangeIterator)__		}_		return Iterators.concat(iterators.iterator())__	};returns,an,iterator,over,available,ports,defined,by,the,range,definition,param,range,definition,string,describing,a,single,port,a,range,of,ports,or,multiple,ranges,return,set,of,ports,from,the,range,definition,throws,number,format,exception,if,an,invalid,string,is,passed;public,static,iterator,integer,get,port,range,from,string,string,range,definition,throws,number,format,exception,final,string,ranges,range,definition,trim,split,list,iterator,integer,iterators,new,array,list,ranges,length,for,string,raw,range,ranges,iterator,integer,range,iterator,string,range,raw,range,trim,int,dash,idx,range,index,of,if,dash,idx,1,range,iterator,iterators,singleton,iterator,integer,value,of,range,else,final,int,start,integer,value,of,range,substring,0,dash,idx,final,int,end,integer,value,of,range,substring,dash,idx,1,range,length,range,iterator,new,iterator,integer,int,i,start,override,public,boolean,has,next,return,i,end,override,public,integer,next,return,i,override,public,void,remove,throw,new,unsupported,operation,exception,remove,not,supported,iterators,add,range,iterator,return,iterators,concat,iterators,iterator
NetUtils -> public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException;1460741894;Returns an iterator over available ports defined by the range definition.__@param rangeDefinition String describing a single port, a range of ports or multiple ranges._@return Set of ports from the range definition_@throws NumberFormatException If an invalid string is passed.;public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException {_		final String[] ranges = rangeDefinition.trim().split(",")__		_		UnionIterator<Integer> iterators = new UnionIterator<>()__		_		for (String rawRange: ranges) {_			Iterator<Integer> rangeIterator__			String range = rawRange.trim()__			int dashIdx = range.indexOf('-')__			if (dashIdx == -1) {_				_				rangeIterator = Collections.singleton(Integer.valueOf(range)).iterator()__			} else {_				_				final int start = Integer.valueOf(range.substring(0, dashIdx))__				final int end = Integer.valueOf(range.substring(dashIdx+1, range.length()))__				rangeIterator = new Iterator<Integer>() {_					int i = start__					@Override_					public boolean hasNext() {_						return i <= end__					}__					@Override_					public Integer next() {_						return i++__					}__					@Override_					public void remove() {_						throw new UnsupportedOperationException("Remove not supported")__					}_				}__			}_			iterators.add(rangeIterator)__		}_		_		return iterators__	};returns,an,iterator,over,available,ports,defined,by,the,range,definition,param,range,definition,string,describing,a,single,port,a,range,of,ports,or,multiple,ranges,return,set,of,ports,from,the,range,definition,throws,number,format,exception,if,an,invalid,string,is,passed;public,static,iterator,integer,get,port,range,from,string,string,range,definition,throws,number,format,exception,final,string,ranges,range,definition,trim,split,union,iterator,integer,iterators,new,union,iterator,for,string,raw,range,ranges,iterator,integer,range,iterator,string,range,raw,range,trim,int,dash,idx,range,index,of,if,dash,idx,1,range,iterator,collections,singleton,integer,value,of,range,iterator,else,final,int,start,integer,value,of,range,substring,0,dash,idx,final,int,end,integer,value,of,range,substring,dash,idx,1,range,length,range,iterator,new,iterator,integer,int,i,start,override,public,boolean,has,next,return,i,end,override,public,integer,next,return,i,override,public,void,remove,throw,new,unsupported,operation,exception,remove,not,supported,iterators,add,range,iterator,return,iterators
NetUtils -> public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException;1481907119;Returns an iterator over available ports defined by the range definition.__@param rangeDefinition String describing a single port, a range of ports or multiple ranges._@return Set of ports from the range definition_@throws NumberFormatException If an invalid string is passed.;public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException {_		final String[] ranges = rangeDefinition.trim().split(",")__		_		UnionIterator<Integer> iterators = new UnionIterator<>()__		_		for (String rawRange: ranges) {_			Iterator<Integer> rangeIterator__			String range = rawRange.trim()__			int dashIdx = range.indexOf('-')__			if (dashIdx == -1) {_				_				rangeIterator = Collections.singleton(Integer.valueOf(range)).iterator()__			} else {_				_				final int start = Integer.valueOf(range.substring(0, dashIdx))__				final int end = Integer.valueOf(range.substring(dashIdx+1, range.length()))__				rangeIterator = new Iterator<Integer>() {_					int i = start__					@Override_					public boolean hasNext() {_						return i <= end__					}__					@Override_					public Integer next() {_						return i++__					}__					@Override_					public void remove() {_						throw new UnsupportedOperationException("Remove not supported")__					}_				}__			}_			iterators.add(rangeIterator)__		}_		_		return iterators__	};returns,an,iterator,over,available,ports,defined,by,the,range,definition,param,range,definition,string,describing,a,single,port,a,range,of,ports,or,multiple,ranges,return,set,of,ports,from,the,range,definition,throws,number,format,exception,if,an,invalid,string,is,passed;public,static,iterator,integer,get,port,range,from,string,string,range,definition,throws,number,format,exception,final,string,ranges,range,definition,trim,split,union,iterator,integer,iterators,new,union,iterator,for,string,raw,range,ranges,iterator,integer,range,iterator,string,range,raw,range,trim,int,dash,idx,range,index,of,if,dash,idx,1,range,iterator,collections,singleton,integer,value,of,range,iterator,else,final,int,start,integer,value,of,range,substring,0,dash,idx,final,int,end,integer,value,of,range,substring,dash,idx,1,range,length,range,iterator,new,iterator,integer,int,i,start,override,public,boolean,has,next,return,i,end,override,public,integer,next,return,i,override,public,void,remove,throw,new,unsupported,operation,exception,remove,not,supported,iterators,add,range,iterator,return,iterators
NetUtils -> public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException;1498896245;Returns an iterator over available ports defined by the range definition.__@param rangeDefinition String describing a single port, a range of ports or multiple ranges._@return Set of ports from the range definition_@throws NumberFormatException If an invalid string is passed.;public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException {_		final String[] ranges = rangeDefinition.trim().split(",")__		_		UnionIterator<Integer> iterators = new UnionIterator<>()__		_		for (String rawRange: ranges) {_			Iterator<Integer> rangeIterator__			String range = rawRange.trim()__			int dashIdx = range.indexOf('-')__			if (dashIdx == -1) {_				_				final int port = Integer.valueOf(range)__				if (port < 0 || port > 65535) {_					throw new IllegalConfigurationException("Invalid port configuration. Port must be between 0" +_						"and 65535, but was " + port + ".")__				}_				rangeIterator = Collections.singleton(Integer.valueOf(range)).iterator()__			} else {_				_				final int start = Integer.valueOf(range.substring(0, dashIdx))__				if (start < 0 || start > 65535) {_					throw new IllegalConfigurationException("Invalid port configuration. Port must be between 0" +_						"and 65535, but was " + start + ".")__				}_				final int end = Integer.valueOf(range.substring(dashIdx+1, range.length()))__				if (end < 0 || end > 65535) {_					throw new IllegalConfigurationException("Invalid port configuration. Port must be between 0" +_						"and 65535, but was " + end + ".")__				}_				rangeIterator = new Iterator<Integer>() {_					int i = start__					@Override_					public boolean hasNext() {_						return i <= end__					}__					@Override_					public Integer next() {_						return i++__					}__					@Override_					public void remove() {_						throw new UnsupportedOperationException("Remove not supported")__					}_				}__			}_			iterators.add(rangeIterator)__		}_		_		return iterators__	};returns,an,iterator,over,available,ports,defined,by,the,range,definition,param,range,definition,string,describing,a,single,port,a,range,of,ports,or,multiple,ranges,return,set,of,ports,from,the,range,definition,throws,number,format,exception,if,an,invalid,string,is,passed;public,static,iterator,integer,get,port,range,from,string,string,range,definition,throws,number,format,exception,final,string,ranges,range,definition,trim,split,union,iterator,integer,iterators,new,union,iterator,for,string,raw,range,ranges,iterator,integer,range,iterator,string,range,raw,range,trim,int,dash,idx,range,index,of,if,dash,idx,1,final,int,port,integer,value,of,range,if,port,0,port,65535,throw,new,illegal,configuration,exception,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,port,range,iterator,collections,singleton,integer,value,of,range,iterator,else,final,int,start,integer,value,of,range,substring,0,dash,idx,if,start,0,start,65535,throw,new,illegal,configuration,exception,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,start,final,int,end,integer,value,of,range,substring,dash,idx,1,range,length,if,end,0,end,65535,throw,new,illegal,configuration,exception,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,end,range,iterator,new,iterator,integer,int,i,start,override,public,boolean,has,next,return,i,end,override,public,integer,next,return,i,override,public,void,remove,throw,new,unsupported,operation,exception,remove,not,supported,iterators,add,range,iterator,return,iterators
NetUtils -> public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException;1516295284;Returns an iterator over available ports defined by the range definition.__@param rangeDefinition String describing a single port, a range of ports or multiple ranges._@return Set of ports from the range definition_@throws NumberFormatException If an invalid string is passed.;public static Iterator<Integer> getPortRangeFromString(String rangeDefinition) throws NumberFormatException {_		final String[] ranges = rangeDefinition.trim().split(",")___		UnionIterator<Integer> iterators = new UnionIterator<>()___		for (String rawRange: ranges) {_			Iterator<Integer> rangeIterator__			String range = rawRange.trim()__			int dashIdx = range.indexOf('-')__			if (dashIdx == -1) {_				_				final int port = Integer.valueOf(range)__				if (port < 0 || port > 65535) {_					throw new IllegalConfigurationException("Invalid port configuration. Port must be between 0" +_						"and 65535, but was " + port + ".")__				}_				rangeIterator = Collections.singleton(Integer.valueOf(range)).iterator()__			} else {_				_				final int start = Integer.valueOf(range.substring(0, dashIdx))__				if (start < 0 || start > 65535) {_					throw new IllegalConfigurationException("Invalid port configuration. Port must be between 0" +_						"and 65535, but was " + start + ".")__				}_				final int end = Integer.valueOf(range.substring(dashIdx + 1, range.length()))__				if (end < 0 || end > 65535) {_					throw new IllegalConfigurationException("Invalid port configuration. Port must be between 0" +_						"and 65535, but was " + end + ".")__				}_				rangeIterator = new Iterator<Integer>() {_					int i = start__					@Override_					public boolean hasNext() {_						return i <= end__					}__					@Override_					public Integer next() {_						return i++__					}__					@Override_					public void remove() {_						throw new UnsupportedOperationException("Remove not supported")__					}_				}__			}_			iterators.add(rangeIterator)__		}__		return iterators__	};returns,an,iterator,over,available,ports,defined,by,the,range,definition,param,range,definition,string,describing,a,single,port,a,range,of,ports,or,multiple,ranges,return,set,of,ports,from,the,range,definition,throws,number,format,exception,if,an,invalid,string,is,passed;public,static,iterator,integer,get,port,range,from,string,string,range,definition,throws,number,format,exception,final,string,ranges,range,definition,trim,split,union,iterator,integer,iterators,new,union,iterator,for,string,raw,range,ranges,iterator,integer,range,iterator,string,range,raw,range,trim,int,dash,idx,range,index,of,if,dash,idx,1,final,int,port,integer,value,of,range,if,port,0,port,65535,throw,new,illegal,configuration,exception,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,port,range,iterator,collections,singleton,integer,value,of,range,iterator,else,final,int,start,integer,value,of,range,substring,0,dash,idx,if,start,0,start,65535,throw,new,illegal,configuration,exception,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,start,final,int,end,integer,value,of,range,substring,dash,idx,1,range,length,if,end,0,end,65535,throw,new,illegal,configuration,exception,invalid,port,configuration,port,must,be,between,0,and,65535,but,was,end,range,iterator,new,iterator,integer,int,i,start,override,public,boolean,has,next,return,i,end,override,public,integer,next,return,i,override,public,void,remove,throw,new,unsupported,operation,exception,remove,not,supported,iterators,add,range,iterator,return,iterators
NetUtils -> public static String ipAddressToUrlString(InetAddress address);1443682796;Encodes an IP address properly as a URL string. This method makes sure that IPv6 addresses_have the proper formatting to be included in URLs._<p>_This method internally uses Guava's functionality to properly encode IPv6 addresses.__@param address The IP address to encode._@return The proper URL string encoded IP address.;public static String ipAddressToUrlString(InetAddress address) {_		if (address == null) {_			throw new NullPointerException("address is null")__		}_		else if (address instanceof Inet4Address) {_			return address.getHostAddress()__		}_		else if (address instanceof Inet6Address) {_			return '[' + InetAddresses.toAddrString(address) + ']'__		}_		else {_			throw new IllegalArgumentException("Unrecognized type of InetAddress: " + address)__		}_	};encodes,an,ip,address,properly,as,a,url,string,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,p,this,method,internally,uses,guava,s,functionality,to,properly,encode,ipv6,addresses,param,address,the,ip,address,to,encode,return,the,proper,url,string,encoded,ip,address;public,static,string,ip,address,to,url,string,inet,address,address,if,address,null,throw,new,null,pointer,exception,address,is,null,else,if,address,instanceof,inet4address,return,address,get,host,address,else,if,address,instanceof,inet6address,return,inet,addresses,to,addr,string,address,else,throw,new,illegal,argument,exception,unrecognized,type,of,inet,address,address
NetUtils -> public static String ipAddressToUrlString(InetAddress address);1448376996;Encodes an IP address properly as a URL string. This method makes sure that IPv6 addresses_have the proper formatting to be included in URLs._<p>_This method internally uses Guava's functionality to properly encode IPv6 addresses.__@param address The IP address to encode._@return The proper URL string encoded IP address.;public static String ipAddressToUrlString(InetAddress address) {_		if (address == null) {_			throw new NullPointerException("address is null")__		}_		else if (address instanceof Inet4Address) {_			return address.getHostAddress()__		}_		else if (address instanceof Inet6Address) {_			return '[' + InetAddresses.toAddrString(address) + ']'__		}_		else {_			throw new IllegalArgumentException("Unrecognized type of InetAddress: " + address)__		}_	};encodes,an,ip,address,properly,as,a,url,string,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,p,this,method,internally,uses,guava,s,functionality,to,properly,encode,ipv6,addresses,param,address,the,ip,address,to,encode,return,the,proper,url,string,encoded,ip,address;public,static,string,ip,address,to,url,string,inet,address,address,if,address,null,throw,new,null,pointer,exception,address,is,null,else,if,address,instanceof,inet4address,return,address,get,host,address,else,if,address,instanceof,inet6address,return,inet,addresses,to,addr,string,address,else,throw,new,illegal,argument,exception,unrecognized,type,of,inet,address,address
NetUtils -> public static String ipAddressToUrlString(InetAddress address);1449679265;Encodes an IP address properly as a URL string. This method makes sure that IPv6 addresses_have the proper formatting to be included in URLs._<p>_This method internally uses Guava's functionality to properly encode IPv6 addresses.__@param address The IP address to encode._@return The proper URL string encoded IP address.;public static String ipAddressToUrlString(InetAddress address) {_		if (address == null) {_			throw new NullPointerException("address is null")__		}_		else if (address instanceof Inet4Address) {_			return address.getHostAddress()__		}_		else if (address instanceof Inet6Address) {_			return '[' + InetAddresses.toAddrString(address) + ']'__		}_		else {_			throw new IllegalArgumentException("Unrecognized type of InetAddress: " + address)__		}_	};encodes,an,ip,address,properly,as,a,url,string,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,p,this,method,internally,uses,guava,s,functionality,to,properly,encode,ipv6,addresses,param,address,the,ip,address,to,encode,return,the,proper,url,string,encoded,ip,address;public,static,string,ip,address,to,url,string,inet,address,address,if,address,null,throw,new,null,pointer,exception,address,is,null,else,if,address,instanceof,inet4address,return,address,get,host,address,else,if,address,instanceof,inet6address,return,inet,addresses,to,addr,string,address,else,throw,new,illegal,argument,exception,unrecognized,type,of,inet,address,address
NetUtils -> public static String ipAddressToUrlString(InetAddress address);1455479358;Encodes an IP address properly as a URL string. This method makes sure that IPv6 addresses_have the proper formatting to be included in URLs._<p>_This method internally uses Guava's functionality to properly encode IPv6 addresses.__@param address The IP address to encode._@return The proper URL string encoded IP address.;public static String ipAddressToUrlString(InetAddress address) {_		if (address == null) {_			throw new NullPointerException("address is null")__		}_		else if (address instanceof Inet4Address) {_			return address.getHostAddress()__		}_		else if (address instanceof Inet6Address) {_			return '[' + InetAddresses.toAddrString(address) + ']'__		}_		else {_			throw new IllegalArgumentException("Unrecognized type of InetAddress: " + address)__		}_	};encodes,an,ip,address,properly,as,a,url,string,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,p,this,method,internally,uses,guava,s,functionality,to,properly,encode,ipv6,addresses,param,address,the,ip,address,to,encode,return,the,proper,url,string,encoded,ip,address;public,static,string,ip,address,to,url,string,inet,address,address,if,address,null,throw,new,null,pointer,exception,address,is,null,else,if,address,instanceof,inet4address,return,address,get,host,address,else,if,address,instanceof,inet6address,return,inet,addresses,to,addr,string,address,else,throw,new,illegal,argument,exception,unrecognized,type,of,inet,address,address
NetUtils -> public static String ipAddressToUrlString(InetAddress address);1459248687;Encodes an IP address properly as a URL string. This method makes sure that IPv6 addresses_have the proper formatting to be included in URLs._<p>_This method internally uses Guava's functionality to properly encode IPv6 addresses.__@param address The IP address to encode._@return The proper URL string encoded IP address.;public static String ipAddressToUrlString(InetAddress address) {_		if (address == null) {_			throw new NullPointerException("address is null")__		}_		else if (address instanceof Inet4Address) {_			return address.getHostAddress()__		}_		else if (address instanceof Inet6Address) {_			return '[' + InetAddresses.toAddrString(address) + ']'__		}_		else {_			throw new IllegalArgumentException("Unrecognized type of InetAddress: " + address)__		}_	};encodes,an,ip,address,properly,as,a,url,string,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,p,this,method,internally,uses,guava,s,functionality,to,properly,encode,ipv6,addresses,param,address,the,ip,address,to,encode,return,the,proper,url,string,encoded,ip,address;public,static,string,ip,address,to,url,string,inet,address,address,if,address,null,throw,new,null,pointer,exception,address,is,null,else,if,address,instanceof,inet4address,return,address,get,host,address,else,if,address,instanceof,inet6address,return,inet,addresses,to,addr,string,address,else,throw,new,illegal,argument,exception,unrecognized,type,of,inet,address,address
NetUtils -> public static String ipAddressToUrlString(InetAddress address);1460741894;Encodes an IP address properly as a URL string. This method makes sure that IPv6 addresses_have the proper formatting to be included in URLs.__@param address The IP address to encode._@return The proper URL string encoded IP address.;public static String ipAddressToUrlString(InetAddress address) {_		if (address == null) {_			throw new NullPointerException("address is null")__		}_		else if (address instanceof Inet4Address) {_			return address.getHostAddress()__		}_		else if (address instanceof Inet6Address) {_			return getIPv6UrlRepresentation((Inet6Address) address)__		}_		else {_			throw new IllegalArgumentException("Unrecognized type of InetAddress: " + address)__		}_	};encodes,an,ip,address,properly,as,a,url,string,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,ip,address,to,encode,return,the,proper,url,string,encoded,ip,address;public,static,string,ip,address,to,url,string,inet,address,address,if,address,null,throw,new,null,pointer,exception,address,is,null,else,if,address,instanceof,inet4address,return,address,get,host,address,else,if,address,instanceof,inet6address,return,get,ipv6url,representation,inet6address,address,else,throw,new,illegal,argument,exception,unrecognized,type,of,inet,address,address
NetUtils -> public static String ipAddressToUrlString(InetAddress address);1481907119;Encodes an IP address properly as a URL string. This method makes sure that IPv6 addresses_have the proper formatting to be included in URLs.__@param address The IP address to encode._@return The proper URL string encoded IP address.;public static String ipAddressToUrlString(InetAddress address) {_		if (address == null) {_			throw new NullPointerException("address is null")__		}_		else if (address instanceof Inet4Address) {_			return address.getHostAddress()__		}_		else if (address instanceof Inet6Address) {_			return getIPv6UrlRepresentation((Inet6Address) address)__		}_		else {_			throw new IllegalArgumentException("Unrecognized type of InetAddress: " + address)__		}_	};encodes,an,ip,address,properly,as,a,url,string,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,ip,address,to,encode,return,the,proper,url,string,encoded,ip,address;public,static,string,ip,address,to,url,string,inet,address,address,if,address,null,throw,new,null,pointer,exception,address,is,null,else,if,address,instanceof,inet4address,return,address,get,host,address,else,if,address,instanceof,inet6address,return,get,ipv6url,representation,inet6address,address,else,throw,new,illegal,argument,exception,unrecognized,type,of,inet,address,address
NetUtils -> public static String ipAddressToUrlString(InetAddress address);1498896245;Encodes an IP address properly as a URL string. This method makes sure that IPv6 addresses_have the proper formatting to be included in URLs.__@param address The IP address to encode._@return The proper URL string encoded IP address.;public static String ipAddressToUrlString(InetAddress address) {_		if (address == null) {_			throw new NullPointerException("address is null")__		}_		else if (address instanceof Inet4Address) {_			return address.getHostAddress()__		}_		else if (address instanceof Inet6Address) {_			return getIPv6UrlRepresentation((Inet6Address) address)__		}_		else {_			throw new IllegalArgumentException("Unrecognized type of InetAddress: " + address)__		}_	};encodes,an,ip,address,properly,as,a,url,string,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,ip,address,to,encode,return,the,proper,url,string,encoded,ip,address;public,static,string,ip,address,to,url,string,inet,address,address,if,address,null,throw,new,null,pointer,exception,address,is,null,else,if,address,instanceof,inet4address,return,address,get,host,address,else,if,address,instanceof,inet6address,return,get,ipv6url,representation,inet6address,address,else,throw,new,illegal,argument,exception,unrecognized,type,of,inet,address,address
NetUtils -> public static String ipAddressToUrlString(InetAddress address);1516295284;Encodes an IP address properly as a URL string. This method makes sure that IPv6 addresses_have the proper formatting to be included in URLs.__@param address The IP address to encode._@return The proper URL string encoded IP address.;public static String ipAddressToUrlString(InetAddress address) {_		if (address == null) {_			throw new NullPointerException("address is null")__		}_		else if (address instanceof Inet4Address) {_			return address.getHostAddress()__		}_		else if (address instanceof Inet6Address) {_			return getIPv6UrlRepresentation((Inet6Address) address)__		}_		else {_			throw new IllegalArgumentException("Unrecognized type of InetAddress: " + address)__		}_	};encodes,an,ip,address,properly,as,a,url,string,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,ip,address,to,encode,return,the,proper,url,string,encoded,ip,address;public,static,string,ip,address,to,url,string,inet,address,address,if,address,null,throw,new,null,pointer,exception,address,is,null,else,if,address,instanceof,inet4address,return,address,get,host,address,else,if,address,instanceof,inet6address,return,get,ipv6url,representation,inet6address,address,else,throw,new,illegal,argument,exception,unrecognized,type,of,inet,address,address
NetUtils -> private static String getIPv6UrlRepresentation(byte[] addressBytes);1481907119;Creates a compressed URL style representation of an Inet6Address.__<p>This method copies and adopts code from Google's Guava library._We re-implement this here in order to reduce dependency on Guava._The Guava library has frequently caused dependency conflicts in the past.;private static String getIPv6UrlRepresentation(byte[] addressBytes) {_		_		int[] hextets = new int[8]__		for (int i = 0_ i < hextets.length_ i++) {_			hextets[i] = (addressBytes[2 * i] & 0xFF) << 8 | (addressBytes[2 * i + 1] & 0xFF)__		}__		_		int bestRunStart = -1__		int bestRunLength = -1__		int runStart = -1__		for (int i = 0_ i < hextets.length + 1_ i++) {_			if (i < hextets.length && hextets[i] == 0) {_				if (runStart < 0) {_					runStart = i__				}_			} else if (runStart >= 0) {_				int runLength = i - runStart__				if (runLength > bestRunLength) {_					bestRunStart = runStart__					bestRunLength = runLength__				}_				runStart = -1__			}_		}_		if (bestRunLength >= 2) {_			Arrays.fill(hextets, bestRunStart, bestRunStart + bestRunLength, -1)__		}__		_		StringBuilder buf = new StringBuilder(40)__		buf.append('[')__		_		boolean lastWasNumber = false__		for (int i = 0_ i < hextets.length_ i++) {_			boolean thisIsNumber = hextets[i] >= 0__			if (thisIsNumber) {_				if (lastWasNumber) {_					buf.append(':')__				}_				buf.append(Integer.toHexString(hextets[i]))__			} else {_				if (i == 0 || lastWasNumber) {_					buf.append("::")__				}_			}_			lastWasNumber = thisIsNumber__		}_		buf.append(']')__		return buf.toString()__	};creates,a,compressed,url,style,representation,of,an,inet6address,p,this,method,copies,and,adopts,code,from,google,s,guava,library,we,re,implement,this,here,in,order,to,reduce,dependency,on,guava,the,guava,library,has,frequently,caused,dependency,conflicts,in,the,past;private,static,string,get,ipv6url,representation,byte,address,bytes,int,hextets,new,int,8,for,int,i,0,i,hextets,length,i,hextets,i,address,bytes,2,i,0x,ff,8,address,bytes,2,i,1,0x,ff,int,best,run,start,1,int,best,run,length,1,int,run,start,1,for,int,i,0,i,hextets,length,1,i,if,i,hextets,length,hextets,i,0,if,run,start,0,run,start,i,else,if,run,start,0,int,run,length,i,run,start,if,run,length,best,run,length,best,run,start,run,start,best,run,length,run,length,run,start,1,if,best,run,length,2,arrays,fill,hextets,best,run,start,best,run,start,best,run,length,1,string,builder,buf,new,string,builder,40,buf,append,boolean,last,was,number,false,for,int,i,0,i,hextets,length,i,boolean,this,is,number,hextets,i,0,if,this,is,number,if,last,was,number,buf,append,buf,append,integer,to,hex,string,hextets,i,else,if,i,0,last,was,number,buf,append,last,was,number,this,is,number,buf,append,return,buf,to,string
NetUtils -> private static String getIPv6UrlRepresentation(byte[] addressBytes);1498896245;Creates a compressed URL style representation of an Inet6Address.__<p>This method copies and adopts code from Google's Guava library._We re-implement this here in order to reduce dependency on Guava._The Guava library has frequently caused dependency conflicts in the past.;private static String getIPv6UrlRepresentation(byte[] addressBytes) {_		_		int[] hextets = new int[8]__		for (int i = 0_ i < hextets.length_ i++) {_			hextets[i] = (addressBytes[2 * i] & 0xFF) << 8 | (addressBytes[2 * i + 1] & 0xFF)__		}__		_		int bestRunStart = -1__		int bestRunLength = -1__		int runStart = -1__		for (int i = 0_ i < hextets.length + 1_ i++) {_			if (i < hextets.length && hextets[i] == 0) {_				if (runStart < 0) {_					runStart = i__				}_			} else if (runStart >= 0) {_				int runLength = i - runStart__				if (runLength > bestRunLength) {_					bestRunStart = runStart__					bestRunLength = runLength__				}_				runStart = -1__			}_		}_		if (bestRunLength >= 2) {_			Arrays.fill(hextets, bestRunStart, bestRunStart + bestRunLength, -1)__		}__		_		StringBuilder buf = new StringBuilder(40)__		buf.append('[')__		_		boolean lastWasNumber = false__		for (int i = 0_ i < hextets.length_ i++) {_			boolean thisIsNumber = hextets[i] >= 0__			if (thisIsNumber) {_				if (lastWasNumber) {_					buf.append(':')__				}_				buf.append(Integer.toHexString(hextets[i]))__			} else {_				if (i == 0 || lastWasNumber) {_					buf.append("::")__				}_			}_			lastWasNumber = thisIsNumber__		}_		buf.append(']')__		return buf.toString()__	};creates,a,compressed,url,style,representation,of,an,inet6address,p,this,method,copies,and,adopts,code,from,google,s,guava,library,we,re,implement,this,here,in,order,to,reduce,dependency,on,guava,the,guava,library,has,frequently,caused,dependency,conflicts,in,the,past;private,static,string,get,ipv6url,representation,byte,address,bytes,int,hextets,new,int,8,for,int,i,0,i,hextets,length,i,hextets,i,address,bytes,2,i,0x,ff,8,address,bytes,2,i,1,0x,ff,int,best,run,start,1,int,best,run,length,1,int,run,start,1,for,int,i,0,i,hextets,length,1,i,if,i,hextets,length,hextets,i,0,if,run,start,0,run,start,i,else,if,run,start,0,int,run,length,i,run,start,if,run,length,best,run,length,best,run,start,run,start,best,run,length,run,length,run,start,1,if,best,run,length,2,arrays,fill,hextets,best,run,start,best,run,start,best,run,length,1,string,builder,buf,new,string,builder,40,buf,append,boolean,last,was,number,false,for,int,i,0,i,hextets,length,i,boolean,this,is,number,hextets,i,0,if,this,is,number,if,last,was,number,buf,append,buf,append,integer,to,hex,string,hextets,i,else,if,i,0,last,was,number,buf,append,last,was,number,this,is,number,buf,append,return,buf,to,string
NetUtils -> private static String getIPv6UrlRepresentation(byte[] addressBytes);1516295284;Creates a compressed URL style representation of an Inet6Address.__<p>This method copies and adopts code from Google's Guava library._We re-implement this here in order to reduce dependency on Guava._The Guava library has frequently caused dependency conflicts in the past.;private static String getIPv6UrlRepresentation(byte[] addressBytes) {_		_		int[] hextets = new int[8]__		for (int i = 0_ i < hextets.length_ i++) {_			hextets[i] = (addressBytes[2 * i] & 0xFF) << 8 | (addressBytes[2 * i + 1] & 0xFF)__		}__		_		int bestRunStart = -1__		int bestRunLength = -1__		int runStart = -1__		for (int i = 0_ i < hextets.length + 1_ i++) {_			if (i < hextets.length && hextets[i] == 0) {_				if (runStart < 0) {_					runStart = i__				}_			} else if (runStart >= 0) {_				int runLength = i - runStart__				if (runLength > bestRunLength) {_					bestRunStart = runStart__					bestRunLength = runLength__				}_				runStart = -1__			}_		}_		if (bestRunLength >= 2) {_			Arrays.fill(hextets, bestRunStart, bestRunStart + bestRunLength, -1)__		}__		_		StringBuilder buf = new StringBuilder(40)__		buf.append('[')___		boolean lastWasNumber = false__		for (int i = 0_ i < hextets.length_ i++) {_			boolean thisIsNumber = hextets[i] >= 0__			if (thisIsNumber) {_				if (lastWasNumber) {_					buf.append(':')__				}_				buf.append(Integer.toHexString(hextets[i]))__			} else {_				if (i == 0 || lastWasNumber) {_					buf.append("::")__				}_			}_			lastWasNumber = thisIsNumber__		}_		buf.append(']')__		return buf.toString()__	};creates,a,compressed,url,style,representation,of,an,inet6address,p,this,method,copies,and,adopts,code,from,google,s,guava,library,we,re,implement,this,here,in,order,to,reduce,dependency,on,guava,the,guava,library,has,frequently,caused,dependency,conflicts,in,the,past;private,static,string,get,ipv6url,representation,byte,address,bytes,int,hextets,new,int,8,for,int,i,0,i,hextets,length,i,hextets,i,address,bytes,2,i,0x,ff,8,address,bytes,2,i,1,0x,ff,int,best,run,start,1,int,best,run,length,1,int,run,start,1,for,int,i,0,i,hextets,length,1,i,if,i,hextets,length,hextets,i,0,if,run,start,0,run,start,i,else,if,run,start,0,int,run,length,i,run,start,if,run,length,best,run,length,best,run,start,run,start,best,run,length,run,length,run,start,1,if,best,run,length,2,arrays,fill,hextets,best,run,start,best,run,start,best,run,length,1,string,builder,buf,new,string,builder,40,buf,append,boolean,last,was,number,false,for,int,i,0,i,hextets,length,i,boolean,this,is,number,hextets,i,0,if,this,is,number,if,last,was,number,buf,append,buf,append,integer,to,hex,string,hextets,i,else,if,i,0,last,was,number,buf,append,last,was,number,this,is,number,buf,append,return,buf,to,string
NetUtils -> public static String socketAddressToUrlString(InetSocketAddress address);1443682796;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The socket address with the IP address and port._@return The proper URL string encoded IP address and port.;public static String socketAddressToUrlString(InetSocketAddress address) {_		if (address.isUnresolved()) {_			throw new IllegalArgumentException("Address cannot be resolved: " + address.getHostString())__		}_		return ipAddressAndPortToUrlString(address.getAddress(), address.getPort())__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,socket,address,with,the,ip,address,and,port,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,socket,address,to,url,string,inet,socket,address,address,if,address,is,unresolved,throw,new,illegal,argument,exception,address,cannot,be,resolved,address,get,host,string,return,ip,address,and,port,to,url,string,address,get,address,address,get,port
NetUtils -> public static String socketAddressToUrlString(InetSocketAddress address);1448376996;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The socket address with the IP address and port._@return The proper URL string encoded IP address and port.;public static String socketAddressToUrlString(InetSocketAddress address) {_		if (address.isUnresolved()) {_			throw new IllegalArgumentException("Address cannot be resolved: " + address.getHostString())__		}_		return ipAddressAndPortToUrlString(address.getAddress(), address.getPort())__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,socket,address,with,the,ip,address,and,port,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,socket,address,to,url,string,inet,socket,address,address,if,address,is,unresolved,throw,new,illegal,argument,exception,address,cannot,be,resolved,address,get,host,string,return,ip,address,and,port,to,url,string,address,get,address,address,get,port
NetUtils -> public static String socketAddressToUrlString(InetSocketAddress address);1449679265;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The socket address with the IP address and port._@return The proper URL string encoded IP address and port.;public static String socketAddressToUrlString(InetSocketAddress address) {_		if (address.isUnresolved()) {_			throw new IllegalArgumentException("Address cannot be resolved: " + address.getHostString())__		}_		return ipAddressAndPortToUrlString(address.getAddress(), address.getPort())__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,socket,address,with,the,ip,address,and,port,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,socket,address,to,url,string,inet,socket,address,address,if,address,is,unresolved,throw,new,illegal,argument,exception,address,cannot,be,resolved,address,get,host,string,return,ip,address,and,port,to,url,string,address,get,address,address,get,port
NetUtils -> public static String socketAddressToUrlString(InetSocketAddress address);1455479358;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The socket address with the IP address and port._@return The proper URL string encoded IP address and port.;public static String socketAddressToUrlString(InetSocketAddress address) {_		if (address.isUnresolved()) {_			throw new IllegalArgumentException("Address cannot be resolved: " + address.getHostString())__		}_		return ipAddressAndPortToUrlString(address.getAddress(), address.getPort())__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,socket,address,with,the,ip,address,and,port,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,socket,address,to,url,string,inet,socket,address,address,if,address,is,unresolved,throw,new,illegal,argument,exception,address,cannot,be,resolved,address,get,host,string,return,ip,address,and,port,to,url,string,address,get,address,address,get,port
NetUtils -> public static String socketAddressToUrlString(InetSocketAddress address);1459248687;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The socket address with the IP address and port._@return The proper URL string encoded IP address and port.;public static String socketAddressToUrlString(InetSocketAddress address) {_		if (address.isUnresolved()) {_			throw new IllegalArgumentException("Address cannot be resolved: " + address.getHostString())__		}_		return ipAddressAndPortToUrlString(address.getAddress(), address.getPort())__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,socket,address,with,the,ip,address,and,port,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,socket,address,to,url,string,inet,socket,address,address,if,address,is,unresolved,throw,new,illegal,argument,exception,address,cannot,be,resolved,address,get,host,string,return,ip,address,and,port,to,url,string,address,get,address,address,get,port
NetUtils -> public static String socketAddressToUrlString(InetSocketAddress address);1460741894;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The socket address with the IP address and port._@return The proper URL string encoded IP address and port.;public static String socketAddressToUrlString(InetSocketAddress address) {_		if (address.isUnresolved()) {_			throw new IllegalArgumentException("Address cannot be resolved: " + address.getHostString())__		}_		return ipAddressAndPortToUrlString(address.getAddress(), address.getPort())__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,socket,address,with,the,ip,address,and,port,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,socket,address,to,url,string,inet,socket,address,address,if,address,is,unresolved,throw,new,illegal,argument,exception,address,cannot,be,resolved,address,get,host,string,return,ip,address,and,port,to,url,string,address,get,address,address,get,port
NetUtils -> public static String socketAddressToUrlString(InetSocketAddress address);1481907119;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The socket address with the IP address and port._@return The proper URL string encoded IP address and port.;public static String socketAddressToUrlString(InetSocketAddress address) {_		if (address.isUnresolved()) {_			throw new IllegalArgumentException("Address cannot be resolved: " + address.getHostString())__		}_		return ipAddressAndPortToUrlString(address.getAddress(), address.getPort())__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,socket,address,with,the,ip,address,and,port,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,socket,address,to,url,string,inet,socket,address,address,if,address,is,unresolved,throw,new,illegal,argument,exception,address,cannot,be,resolved,address,get,host,string,return,ip,address,and,port,to,url,string,address,get,address,address,get,port
NetUtils -> public static String socketAddressToUrlString(InetSocketAddress address);1498896245;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The socket address with the IP address and port._@return The proper URL string encoded IP address and port.;public static String socketAddressToUrlString(InetSocketAddress address) {_		if (address.isUnresolved()) {_			throw new IllegalArgumentException("Address cannot be resolved: " + address.getHostString())__		}_		return ipAddressAndPortToUrlString(address.getAddress(), address.getPort())__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,socket,address,with,the,ip,address,and,port,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,socket,address,to,url,string,inet,socket,address,address,if,address,is,unresolved,throw,new,illegal,argument,exception,address,cannot,be,resolved,address,get,host,string,return,ip,address,and,port,to,url,string,address,get,address,address,get,port
NetUtils -> public static String socketAddressToUrlString(InetSocketAddress address);1516295284;Encodes an IP address and port to be included in URL. in particular, this method makes_sure that IPv6 addresses have the proper formatting to be included in URLs.__@param address The socket address with the IP address and port._@return The proper URL string encoded IP address and port.;public static String socketAddressToUrlString(InetSocketAddress address) {_		if (address.isUnresolved()) {_			throw new IllegalArgumentException("Address cannot be resolved: " + address.getHostString())__		}_		return ipAddressAndPortToUrlString(address.getAddress(), address.getPort())__	};encodes,an,ip,address,and,port,to,be,included,in,url,in,particular,this,method,makes,sure,that,ipv6,addresses,have,the,proper,formatting,to,be,included,in,urls,param,address,the,socket,address,with,the,ip,address,and,port,return,the,proper,url,string,encoded,ip,address,and,port;public,static,string,socket,address,to,url,string,inet,socket,address,address,if,address,is,unresolved,throw,new,illegal,argument,exception,address,cannot,be,resolved,address,get,host,string,return,ip,address,and,port,to,url,string,address,get,address,address,get,port
