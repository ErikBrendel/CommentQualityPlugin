# id;timestamp;commentText;codeText;commentWords;codeWords
TypeSerializerSnapshot -> int getCurrentVersion()_;1539149114;Returns the version of the current snapshot's written binary format.__@return the version of the current snapshot's written binary format.;int getCurrentVersion()_;returns,the,version,of,the,current,snapshot,s,written,binary,format,return,the,version,of,the,current,snapshot,s,written,binary,format;int,get,current,version
TypeSerializerSnapshot -> int getCurrentVersion()_;1540907750;Returns the version of the current snapshot's written binary format.__@return the version of the current snapshot's written binary format.;int getCurrentVersion()_;returns,the,version,of,the,current,snapshot,s,written,binary,format,return,the,version,of,the,current,snapshot,s,written,binary,format;int,get,current,version
TypeSerializerSnapshot -> int getCurrentVersion()_;1540907751;Returns the version of the current snapshot's written binary format.__@return the version of the current snapshot's written binary format.;int getCurrentVersion()_;returns,the,version,of,the,current,snapshot,s,written,binary,format,return,the,version,of,the,current,snapshot,s,written,binary,format;int,get,current,version
TypeSerializerSnapshot -> int getCurrentVersion()_;1540907751;Returns the version of the current snapshot's written binary format.__@return the version of the current snapshot's written binary format.;int getCurrentVersion()_;returns,the,version,of,the,current,snapshot,s,written,binary,format,return,the,version,of,the,current,snapshot,s,written,binary,format;int,get,current,version
TypeSerializerSnapshot -> int getCurrentVersion()_;1540907751;Returns the version of the current snapshot's written binary format.__@return the version of the current snapshot's written binary format.;int getCurrentVersion()_;returns,the,version,of,the,current,snapshot,s,written,binary,format,return,the,version,of,the,current,snapshot,s,written,binary,format;int,get,current,version
TypeSerializerSnapshot -> int getCurrentVersion()_;1540907751;Returns the version of the current snapshot's written binary format.__@return the version of the current snapshot's written binary format.;int getCurrentVersion()_;returns,the,version,of,the,current,snapshot,s,written,binary,format,return,the,version,of,the,current,snapshot,s,written,binary,format;int,get,current,version
TypeSerializerSnapshot -> int getCurrentVersion()_;1540907751;Returns the version of the current snapshot's written binary format.__@return the version of the current snapshot's written binary format.;int getCurrentVersion()_;returns,the,version,of,the,current,snapshot,s,written,binary,format,return,the,version,of,the,current,snapshot,s,written,binary,format;int,get,current,version
TypeSerializerSnapshot -> <NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;1539149114;Checks a new serializer's compatibility to read data written by the prior_serializer.__@param newSerializer the new serializer to check._@param <NS> the type of the new serializer__@return the serializer compatibility result.;<NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;checks,a,new,serializer,s,compatibility,to,read,data,written,by,the,prior,serializer,param,new,serializer,the,new,serializer,to,check,param,ns,the,type,of,the,new,serializer,return,the,serializer,compatibility,result;ns,extends,type,serializer,t,type,serializer,schema,compatibility,t,ns,resolve,schema,compatibility,ns,new,serializer
TypeSerializerSnapshot -> <NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;1540907750;Checks a new serializer's compatibility to read data written by the prior_serializer.__@param newSerializer the new serializer to check._@param <NS> the type of the new serializer__@return the serializer compatibility result.;<NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;checks,a,new,serializer,s,compatibility,to,read,data,written,by,the,prior,serializer,param,new,serializer,the,new,serializer,to,check,param,ns,the,type,of,the,new,serializer,return,the,serializer,compatibility,result;ns,extends,type,serializer,t,type,serializer,schema,compatibility,t,ns,resolve,schema,compatibility,ns,new,serializer
TypeSerializerSnapshot -> <NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;1540907751;Checks a new serializer's compatibility to read data written by the prior serializer.__<p>When a checkpoint/savepoint is restored, this method checks whether the serialization_format of the data in the checkpoint/savepoint is compatible for the format of the serializer used by the_program that restores the checkpoint/savepoint. The outcome can be that the serialization format is_compatible, that the program's serializer needs to reconfigure itself (meaning to incorporate some_information from the TypeSerializerSnapshot to be compatible), that the format is outright incompatible,_or that a migration needed. In the latter case, the TypeSerializerSnapshot produces a serializer to_deserialize the data, and the restoring program's serializer re-serializes the data, thus converting_the format during the restore operation.__@param newSerializer the new serializer to check._@param <NS> the type of the new serializer__@return the serializer compatibility result.;<NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;checks,a,new,serializer,s,compatibility,to,read,data,written,by,the,prior,serializer,p,when,a,checkpoint,savepoint,is,restored,this,method,checks,whether,the,serialization,format,of,the,data,in,the,checkpoint,savepoint,is,compatible,for,the,format,of,the,serializer,used,by,the,program,that,restores,the,checkpoint,savepoint,the,outcome,can,be,that,the,serialization,format,is,compatible,that,the,program,s,serializer,needs,to,reconfigure,itself,meaning,to,incorporate,some,information,from,the,type,serializer,snapshot,to,be,compatible,that,the,format,is,outright,incompatible,or,that,a,migration,needed,in,the,latter,case,the,type,serializer,snapshot,produces,a,serializer,to,deserialize,the,data,and,the,restoring,program,s,serializer,re,serializes,the,data,thus,converting,the,format,during,the,restore,operation,param,new,serializer,the,new,serializer,to,check,param,ns,the,type,of,the,new,serializer,return,the,serializer,compatibility,result;ns,extends,type,serializer,t,type,serializer,schema,compatibility,t,ns,resolve,schema,compatibility,ns,new,serializer
TypeSerializerSnapshot -> <NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;1540907751;Checks a new serializer's compatibility to read data written by the prior serializer.__<p>When a checkpoint/savepoint is restored, this method checks whether the serialization_format of the data in the checkpoint/savepoint is compatible for the format of the serializer used by the_program that restores the checkpoint/savepoint. The outcome can be that the serialization format is_compatible, that the program's serializer needs to reconfigure itself (meaning to incorporate some_information from the TypeSerializerSnapshot to be compatible), that the format is outright incompatible,_or that a migration needed. In the latter case, the TypeSerializerSnapshot produces a serializer to_deserialize the data, and the restoring program's serializer re-serializes the data, thus converting_the format during the restore operation.__@param newSerializer the new serializer to check._@param <NS> the type of the new serializer__@return the serializer compatibility result.;<NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;checks,a,new,serializer,s,compatibility,to,read,data,written,by,the,prior,serializer,p,when,a,checkpoint,savepoint,is,restored,this,method,checks,whether,the,serialization,format,of,the,data,in,the,checkpoint,savepoint,is,compatible,for,the,format,of,the,serializer,used,by,the,program,that,restores,the,checkpoint,savepoint,the,outcome,can,be,that,the,serialization,format,is,compatible,that,the,program,s,serializer,needs,to,reconfigure,itself,meaning,to,incorporate,some,information,from,the,type,serializer,snapshot,to,be,compatible,that,the,format,is,outright,incompatible,or,that,a,migration,needed,in,the,latter,case,the,type,serializer,snapshot,produces,a,serializer,to,deserialize,the,data,and,the,restoring,program,s,serializer,re,serializes,the,data,thus,converting,the,format,during,the,restore,operation,param,new,serializer,the,new,serializer,to,check,param,ns,the,type,of,the,new,serializer,return,the,serializer,compatibility,result;ns,extends,type,serializer,t,type,serializer,schema,compatibility,t,ns,resolve,schema,compatibility,ns,new,serializer
TypeSerializerSnapshot -> <NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;1540907751;Checks a new serializer's compatibility to read data written by the prior serializer.__<p>When a checkpoint/savepoint is restored, this method checks whether the serialization_format of the data in the checkpoint/savepoint is compatible for the format of the serializer used by the_program that restores the checkpoint/savepoint. The outcome can be that the serialization format is_compatible, that the program's serializer needs to reconfigure itself (meaning to incorporate some_information from the TypeSerializerSnapshot to be compatible), that the format is outright incompatible,_or that a migration needed. In the latter case, the TypeSerializerSnapshot produces a serializer to_deserialize the data, and the restoring program's serializer re-serializes the data, thus converting_the format during the restore operation.__@param newSerializer the new serializer to check._@param <NS> the type of the new serializer__@return the serializer compatibility result.;<NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;checks,a,new,serializer,s,compatibility,to,read,data,written,by,the,prior,serializer,p,when,a,checkpoint,savepoint,is,restored,this,method,checks,whether,the,serialization,format,of,the,data,in,the,checkpoint,savepoint,is,compatible,for,the,format,of,the,serializer,used,by,the,program,that,restores,the,checkpoint,savepoint,the,outcome,can,be,that,the,serialization,format,is,compatible,that,the,program,s,serializer,needs,to,reconfigure,itself,meaning,to,incorporate,some,information,from,the,type,serializer,snapshot,to,be,compatible,that,the,format,is,outright,incompatible,or,that,a,migration,needed,in,the,latter,case,the,type,serializer,snapshot,produces,a,serializer,to,deserialize,the,data,and,the,restoring,program,s,serializer,re,serializes,the,data,thus,converting,the,format,during,the,restore,operation,param,new,serializer,the,new,serializer,to,check,param,ns,the,type,of,the,new,serializer,return,the,serializer,compatibility,result;ns,extends,type,serializer,t,type,serializer,schema,compatibility,t,ns,resolve,schema,compatibility,ns,new,serializer
TypeSerializerSnapshot -> <NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;1540907751;Checks a new serializer's compatibility to read data written by the prior serializer.__<p>When a checkpoint/savepoint is restored, this method checks whether the serialization_format of the data in the checkpoint/savepoint is compatible for the format of the serializer used by the_program that restores the checkpoint/savepoint. The outcome can be that the serialization format is_compatible, that the program's serializer needs to reconfigure itself (meaning to incorporate some_information from the TypeSerializerSnapshot to be compatible), that the format is outright incompatible,_or that a migration needed. In the latter case, the TypeSerializerSnapshot produces a serializer to_deserialize the data, and the restoring program's serializer re-serializes the data, thus converting_the format during the restore operation.__@param newSerializer the new serializer to check._@param <NS> the type of the new serializer__@return the serializer compatibility result.;<NS extends TypeSerializer<T>> TypeSerializerSchemaCompatibility<T, NS> resolveSchemaCompatibility(NS newSerializer)_;checks,a,new,serializer,s,compatibility,to,read,data,written,by,the,prior,serializer,p,when,a,checkpoint,savepoint,is,restored,this,method,checks,whether,the,serialization,format,of,the,data,in,the,checkpoint,savepoint,is,compatible,for,the,format,of,the,serializer,used,by,the,program,that,restores,the,checkpoint,savepoint,the,outcome,can,be,that,the,serialization,format,is,compatible,that,the,program,s,serializer,needs,to,reconfigure,itself,meaning,to,incorporate,some,information,from,the,type,serializer,snapshot,to,be,compatible,that,the,format,is,outright,incompatible,or,that,a,migration,needed,in,the,latter,case,the,type,serializer,snapshot,produces,a,serializer,to,deserialize,the,data,and,the,restoring,program,s,serializer,re,serializes,the,data,thus,converting,the,format,during,the,restore,operation,param,new,serializer,the,new,serializer,to,check,param,ns,the,type,of,the,new,serializer,return,the,serializer,compatibility,result;ns,extends,type,serializer,t,type,serializer,schema,compatibility,t,ns,resolve,schema,compatibility,ns,new,serializer
TypeSerializerSnapshot -> TypeSerializer<T> restoreSerializer()_;1539149114;Recreates a serializer instance from this snapshot. The returned_serializer can be safely used to read data written by the prior serializer_(i.e., the serializer that created this snapshot).__@return a serializer instance restored from this serializer snapshot.;TypeSerializer<T> restoreSerializer()_;recreates,a,serializer,instance,from,this,snapshot,the,returned,serializer,can,be,safely,used,to,read,data,written,by,the,prior,serializer,i,e,the,serializer,that,created,this,snapshot,return,a,serializer,instance,restored,from,this,serializer,snapshot;type,serializer,t,restore,serializer
TypeSerializerSnapshot -> TypeSerializer<T> restoreSerializer()_;1540907750;Recreates a serializer instance from this snapshot. The returned_serializer can be safely used to read data written by the prior serializer_(i.e., the serializer that created this snapshot).__@return a serializer instance restored from this serializer snapshot.;TypeSerializer<T> restoreSerializer()_;recreates,a,serializer,instance,from,this,snapshot,the,returned,serializer,can,be,safely,used,to,read,data,written,by,the,prior,serializer,i,e,the,serializer,that,created,this,snapshot,return,a,serializer,instance,restored,from,this,serializer,snapshot;type,serializer,t,restore,serializer
TypeSerializerSnapshot -> TypeSerializer<T> restoreSerializer()_;1540907751;Recreates a serializer instance from this snapshot. The returned_serializer can be safely used to read data written by the prior serializer_(i.e., the serializer that created this snapshot).__@return a serializer instance restored from this serializer snapshot.;TypeSerializer<T> restoreSerializer()_;recreates,a,serializer,instance,from,this,snapshot,the,returned,serializer,can,be,safely,used,to,read,data,written,by,the,prior,serializer,i,e,the,serializer,that,created,this,snapshot,return,a,serializer,instance,restored,from,this,serializer,snapshot;type,serializer,t,restore,serializer
TypeSerializerSnapshot -> TypeSerializer<T> restoreSerializer()_;1540907751;Recreates a serializer instance from this snapshot. The returned_serializer can be safely used to read data written by the prior serializer_(i.e., the serializer that created this snapshot).__@return a serializer instance restored from this serializer snapshot.;TypeSerializer<T> restoreSerializer()_;recreates,a,serializer,instance,from,this,snapshot,the,returned,serializer,can,be,safely,used,to,read,data,written,by,the,prior,serializer,i,e,the,serializer,that,created,this,snapshot,return,a,serializer,instance,restored,from,this,serializer,snapshot;type,serializer,t,restore,serializer
TypeSerializerSnapshot -> TypeSerializer<T> restoreSerializer()_;1540907751;Recreates a serializer instance from this snapshot. The returned_serializer can be safely used to read data written by the prior serializer_(i.e., the serializer that created this snapshot).__@return a serializer instance restored from this serializer snapshot.;TypeSerializer<T> restoreSerializer()_;recreates,a,serializer,instance,from,this,snapshot,the,returned,serializer,can,be,safely,used,to,read,data,written,by,the,prior,serializer,i,e,the,serializer,that,created,this,snapshot,return,a,serializer,instance,restored,from,this,serializer,snapshot;type,serializer,t,restore,serializer
TypeSerializerSnapshot -> TypeSerializer<T> restoreSerializer()_;1540907751;Recreates a serializer instance from this snapshot. The returned_serializer can be safely used to read data written by the prior serializer_(i.e., the serializer that created this snapshot).__@return a serializer instance restored from this serializer snapshot.;TypeSerializer<T> restoreSerializer()_;recreates,a,serializer,instance,from,this,snapshot,the,returned,serializer,can,be,safely,used,to,read,data,written,by,the,prior,serializer,i,e,the,serializer,that,created,this,snapshot,return,a,serializer,instance,restored,from,this,serializer,snapshot;type,serializer,t,restore,serializer
TypeSerializerSnapshot -> TypeSerializer<T> restoreSerializer()_;1540907751;Recreates a serializer instance from this snapshot. The returned_serializer can be safely used to read data written by the prior serializer_(i.e., the serializer that created this snapshot).__@return a serializer instance restored from this serializer snapshot.;TypeSerializer<T> restoreSerializer()_;recreates,a,serializer,instance,from,this,snapshot,the,returned,serializer,can,be,safely,used,to,read,data,written,by,the,prior,serializer,i,e,the,serializer,that,created,this,snapshot,return,a,serializer,instance,restored,from,this,serializer,snapshot;type,serializer,t,restore,serializer
TypeSerializerSnapshot -> static <T> TypeSerializerSnapshot<T> readVersionedSnapshot(DataInputView in, ClassLoader cl) throws IOException;1540907751;Reads a snapshot from the stream, performing resolving__<p>This method reads snapshots written by {@link #writeVersionedSnapshot(DataOutputView, TypeSerializerSnapshot)}.;static <T> TypeSerializerSnapshot<T> readVersionedSnapshot(DataInputView in, ClassLoader cl) throws IOException {_		final TypeSerializerSnapshot<T> snapshot =_				TypeSerializerSnapshotSerializationUtil.readAndInstantiateSnapshotClass(in, cl)___		final int version = in.readInt()__		snapshot.readSnapshot(version, in, cl)___		return snapshot__	};reads,a,snapshot,from,the,stream,performing,resolving,p,this,method,reads,snapshots,written,by,link,write,versioned,snapshot,data,output,view,type,serializer,snapshot;static,t,type,serializer,snapshot,t,read,versioned,snapshot,data,input,view,in,class,loader,cl,throws,ioexception,final,type,serializer,snapshot,t,snapshot,type,serializer,snapshot,serialization,util,read,and,instantiate,snapshot,class,in,cl,final,int,version,in,read,int,snapshot,read,snapshot,version,in,cl,return,snapshot
TypeSerializerSnapshot -> static <T> TypeSerializerSnapshot<T> readVersionedSnapshot(DataInputView in, ClassLoader cl) throws IOException;1540907751;Reads a snapshot from the stream, performing resolving__<p>This method reads snapshots written by {@link #writeVersionedSnapshot(DataOutputView, TypeSerializerSnapshot)}.;static <T> TypeSerializerSnapshot<T> readVersionedSnapshot(DataInputView in, ClassLoader cl) throws IOException {_		final TypeSerializerSnapshot<T> snapshot =_				TypeSerializerSnapshotSerializationUtil.readAndInstantiateSnapshotClass(in, cl)___		final int version = in.readInt()__		snapshot.readSnapshot(version, in, cl)___		return snapshot__	};reads,a,snapshot,from,the,stream,performing,resolving,p,this,method,reads,snapshots,written,by,link,write,versioned,snapshot,data,output,view,type,serializer,snapshot;static,t,type,serializer,snapshot,t,read,versioned,snapshot,data,input,view,in,class,loader,cl,throws,ioexception,final,type,serializer,snapshot,t,snapshot,type,serializer,snapshot,serialization,util,read,and,instantiate,snapshot,class,in,cl,final,int,version,in,read,int,snapshot,read,snapshot,version,in,cl,return,snapshot
TypeSerializerSnapshot -> static <T> TypeSerializerSnapshot<T> readVersionedSnapshot(DataInputView in, ClassLoader cl) throws IOException;1540907751;Reads a snapshot from the stream, performing resolving__<p>This method reads snapshots written by {@link #writeVersionedSnapshot(DataOutputView, TypeSerializerSnapshot)}.;static <T> TypeSerializerSnapshot<T> readVersionedSnapshot(DataInputView in, ClassLoader cl) throws IOException {_		final TypeSerializerSnapshot<T> snapshot =_				TypeSerializerSnapshotSerializationUtil.readAndInstantiateSnapshotClass(in, cl)___		final int version = in.readInt()__		snapshot.readSnapshot(version, in, cl)___		return snapshot__	};reads,a,snapshot,from,the,stream,performing,resolving,p,this,method,reads,snapshots,written,by,link,write,versioned,snapshot,data,output,view,type,serializer,snapshot;static,t,type,serializer,snapshot,t,read,versioned,snapshot,data,input,view,in,class,loader,cl,throws,ioexception,final,type,serializer,snapshot,t,snapshot,type,serializer,snapshot,serialization,util,read,and,instantiate,snapshot,class,in,cl,final,int,version,in,read,int,snapshot,read,snapshot,version,in,cl,return,snapshot
TypeSerializerSnapshot -> static <T> TypeSerializerSnapshot<T> readVersionedSnapshot(DataInputView in, ClassLoader cl) throws IOException;1540907751;Reads a snapshot from the stream, performing resolving__<p>This method reads snapshots written by {@link #writeVersionedSnapshot(DataOutputView, TypeSerializerSnapshot)}.;static <T> TypeSerializerSnapshot<T> readVersionedSnapshot(DataInputView in, ClassLoader cl) throws IOException {_		final TypeSerializerSnapshot<T> snapshot =_				TypeSerializerSnapshotSerializationUtil.readAndInstantiateSnapshotClass(in, cl)___		final int version = in.readInt()__		snapshot.readSnapshot(version, in, cl)___		return snapshot__	};reads,a,snapshot,from,the,stream,performing,resolving,p,this,method,reads,snapshots,written,by,link,write,versioned,snapshot,data,output,view,type,serializer,snapshot;static,t,type,serializer,snapshot,t,read,versioned,snapshot,data,input,view,in,class,loader,cl,throws,ioexception,final,type,serializer,snapshot,t,snapshot,type,serializer,snapshot,serialization,util,read,and,instantiate,snapshot,class,in,cl,final,int,version,in,read,int,snapshot,read,snapshot,version,in,cl,return,snapshot
TypeSerializerSnapshot -> void writeSnapshot(DataOutputView out) throws IOException_;1540907750;Writes the serializer snapshot to the provided {@link DataOutputView}._The current version of the written serializer snapshot's binary format_is specified by the {@link #getCurrentVersion()} method.__@param out the {@link DataOutputView} to write the snapshot to.__@throws IOException Thrown if the snapshot data could not be written.;void writeSnapshot(DataOutputView out) throws IOException_;writes,the,serializer,snapshot,to,the,provided,link,data,output,view,the,current,version,of,the,written,serializer,snapshot,s,binary,format,is,specified,by,the,link,get,current,version,method,param,out,the,link,data,output,view,to,write,the,snapshot,to,throws,ioexception,thrown,if,the,snapshot,data,could,not,be,written;void,write,snapshot,data,output,view,out,throws,ioexception
TypeSerializerSnapshot -> void writeSnapshot(DataOutputView out) throws IOException_;1540907751;Writes the serializer snapshot to the provided {@link DataOutputView}._The current version of the written serializer snapshot's binary format_is specified by the {@link #getCurrentVersion()} method.__@param out the {@link DataOutputView} to write the snapshot to.__@throws IOException Thrown if the snapshot data could not be written.;void writeSnapshot(DataOutputView out) throws IOException_;writes,the,serializer,snapshot,to,the,provided,link,data,output,view,the,current,version,of,the,written,serializer,snapshot,s,binary,format,is,specified,by,the,link,get,current,version,method,param,out,the,link,data,output,view,to,write,the,snapshot,to,throws,ioexception,thrown,if,the,snapshot,data,could,not,be,written;void,write,snapshot,data,output,view,out,throws,ioexception
TypeSerializerSnapshot -> void writeSnapshot(DataOutputView out) throws IOException_;1540907751;Writes the serializer snapshot to the provided {@link DataOutputView}._The current version of the written serializer snapshot's binary format_is specified by the {@link #getCurrentVersion()} method.__@param out the {@link DataOutputView} to write the snapshot to.__@throws IOException Thrown if the snapshot data could not be written.;void writeSnapshot(DataOutputView out) throws IOException_;writes,the,serializer,snapshot,to,the,provided,link,data,output,view,the,current,version,of,the,written,serializer,snapshot,s,binary,format,is,specified,by,the,link,get,current,version,method,param,out,the,link,data,output,view,to,write,the,snapshot,to,throws,ioexception,thrown,if,the,snapshot,data,could,not,be,written;void,write,snapshot,data,output,view,out,throws,ioexception
TypeSerializerSnapshot -> void writeSnapshot(DataOutputView out) throws IOException_;1540907751;Writes the serializer snapshot to the provided {@link DataOutputView}._The current version of the written serializer snapshot's binary format_is specified by the {@link #getCurrentVersion()} method.__@param out the {@link DataOutputView} to write the snapshot to.__@throws IOException Thrown if the snapshot data could not be written.;void writeSnapshot(DataOutputView out) throws IOException_;writes,the,serializer,snapshot,to,the,provided,link,data,output,view,the,current,version,of,the,written,serializer,snapshot,s,binary,format,is,specified,by,the,link,get,current,version,method,param,out,the,link,data,output,view,to,write,the,snapshot,to,throws,ioexception,thrown,if,the,snapshot,data,could,not,be,written;void,write,snapshot,data,output,view,out,throws,ioexception
TypeSerializerSnapshot -> void writeSnapshot(DataOutputView out) throws IOException_;1540907751;Writes the serializer snapshot to the provided {@link DataOutputView}._The current version of the written serializer snapshot's binary format_is specified by the {@link #getCurrentVersion()} method.__@param out the {@link DataOutputView} to write the snapshot to.__@throws IOException Thrown if the snapshot data could not be written.;void writeSnapshot(DataOutputView out) throws IOException_;writes,the,serializer,snapshot,to,the,provided,link,data,output,view,the,current,version,of,the,written,serializer,snapshot,s,binary,format,is,specified,by,the,link,get,current,version,method,param,out,the,link,data,output,view,to,write,the,snapshot,to,throws,ioexception,thrown,if,the,snapshot,data,could,not,be,written;void,write,snapshot,data,output,view,out,throws,ioexception
TypeSerializerSnapshot -> void writeSnapshot(DataOutputView out) throws IOException_;1540907751;Writes the serializer snapshot to the provided {@link DataOutputView}._The current version of the written serializer snapshot's binary format_is specified by the {@link #getCurrentVersion()} method.__@param out the {@link DataOutputView} to write the snapshot to.__@throws IOException Thrown if the snapshot data could not be written.;void writeSnapshot(DataOutputView out) throws IOException_;writes,the,serializer,snapshot,to,the,provided,link,data,output,view,the,current,version,of,the,written,serializer,snapshot,s,binary,format,is,specified,by,the,link,get,current,version,method,param,out,the,link,data,output,view,to,write,the,snapshot,to,throws,ioexception,thrown,if,the,snapshot,data,could,not,be,written;void,write,snapshot,data,output,view,out,throws,ioexception
TypeSerializerSnapshot -> void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;1540907750;Reads the serializer snapshot from the provided {@link DataInputView}._The version of the binary format that the serializer snapshot was written_with is provided. This version can be used to determine how the serializer_snapshot should be read.__@param readVersion version of the serializer snapshot's written binary format_@param in the {@link DataInputView} to read the snapshot from._@param userCodeClassLoader the user code classloader__* @throws IOException Thrown if the snapshot data could be read or parsed.;void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;reads,the,serializer,snapshot,from,the,provided,link,data,input,view,the,version,of,the,binary,format,that,the,serializer,snapshot,was,written,with,is,provided,this,version,can,be,used,to,determine,how,the,serializer,snapshot,should,be,read,param,read,version,version,of,the,serializer,snapshot,s,written,binary,format,param,in,the,link,data,input,view,to,read,the,snapshot,from,param,user,code,class,loader,the,user,code,classloader,throws,ioexception,thrown,if,the,snapshot,data,could,be,read,or,parsed;void,read,snapshot,int,read,version,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception
TypeSerializerSnapshot -> void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;1540907751;Reads the serializer snapshot from the provided {@link DataInputView}._The version of the binary format that the serializer snapshot was written_with is provided. This version can be used to determine how the serializer_snapshot should be read.__@param readVersion version of the serializer snapshot's written binary format_@param in the {@link DataInputView} to read the snapshot from._@param userCodeClassLoader the user code classloader__* @throws IOException Thrown if the snapshot data could be read or parsed.;void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;reads,the,serializer,snapshot,from,the,provided,link,data,input,view,the,version,of,the,binary,format,that,the,serializer,snapshot,was,written,with,is,provided,this,version,can,be,used,to,determine,how,the,serializer,snapshot,should,be,read,param,read,version,version,of,the,serializer,snapshot,s,written,binary,format,param,in,the,link,data,input,view,to,read,the,snapshot,from,param,user,code,class,loader,the,user,code,classloader,throws,ioexception,thrown,if,the,snapshot,data,could,be,read,or,parsed;void,read,snapshot,int,read,version,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception
TypeSerializerSnapshot -> void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;1540907751;Reads the serializer snapshot from the provided {@link DataInputView}._The version of the binary format that the serializer snapshot was written_with is provided. This version can be used to determine how the serializer_snapshot should be read.__@param readVersion version of the serializer snapshot's written binary format_@param in the {@link DataInputView} to read the snapshot from._@param userCodeClassLoader the user code classloader__* @throws IOException Thrown if the snapshot data could be read or parsed.;void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;reads,the,serializer,snapshot,from,the,provided,link,data,input,view,the,version,of,the,binary,format,that,the,serializer,snapshot,was,written,with,is,provided,this,version,can,be,used,to,determine,how,the,serializer,snapshot,should,be,read,param,read,version,version,of,the,serializer,snapshot,s,written,binary,format,param,in,the,link,data,input,view,to,read,the,snapshot,from,param,user,code,class,loader,the,user,code,classloader,throws,ioexception,thrown,if,the,snapshot,data,could,be,read,or,parsed;void,read,snapshot,int,read,version,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception
TypeSerializerSnapshot -> void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;1540907751;Reads the serializer snapshot from the provided {@link DataInputView}._The version of the binary format that the serializer snapshot was written_with is provided. This version can be used to determine how the serializer_snapshot should be read.__@param readVersion version of the serializer snapshot's written binary format_@param in the {@link DataInputView} to read the snapshot from._@param userCodeClassLoader the user code classloader__* @throws IOException Thrown if the snapshot data could be read or parsed.;void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;reads,the,serializer,snapshot,from,the,provided,link,data,input,view,the,version,of,the,binary,format,that,the,serializer,snapshot,was,written,with,is,provided,this,version,can,be,used,to,determine,how,the,serializer,snapshot,should,be,read,param,read,version,version,of,the,serializer,snapshot,s,written,binary,format,param,in,the,link,data,input,view,to,read,the,snapshot,from,param,user,code,class,loader,the,user,code,classloader,throws,ioexception,thrown,if,the,snapshot,data,could,be,read,or,parsed;void,read,snapshot,int,read,version,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception
TypeSerializerSnapshot -> void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;1540907751;Reads the serializer snapshot from the provided {@link DataInputView}._The version of the binary format that the serializer snapshot was written_with is provided. This version can be used to determine how the serializer_snapshot should be read.__@param readVersion version of the serializer snapshot's written binary format_@param in the {@link DataInputView} to read the snapshot from._@param userCodeClassLoader the user code classloader__* @throws IOException Thrown if the snapshot data could be read or parsed.;void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;reads,the,serializer,snapshot,from,the,provided,link,data,input,view,the,version,of,the,binary,format,that,the,serializer,snapshot,was,written,with,is,provided,this,version,can,be,used,to,determine,how,the,serializer,snapshot,should,be,read,param,read,version,version,of,the,serializer,snapshot,s,written,binary,format,param,in,the,link,data,input,view,to,read,the,snapshot,from,param,user,code,class,loader,the,user,code,classloader,throws,ioexception,thrown,if,the,snapshot,data,could,be,read,or,parsed;void,read,snapshot,int,read,version,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception
TypeSerializerSnapshot -> void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;1540907751;Reads the serializer snapshot from the provided {@link DataInputView}._The version of the binary format that the serializer snapshot was written_with is provided. This version can be used to determine how the serializer_snapshot should be read.__@param readVersion version of the serializer snapshot's written binary format_@param in the {@link DataInputView} to read the snapshot from._@param userCodeClassLoader the user code classloader__* @throws IOException Thrown if the snapshot data could be read or parsed.;void readSnapshot(int readVersion, DataInputView in, ClassLoader userCodeClassLoader) throws IOException_;reads,the,serializer,snapshot,from,the,provided,link,data,input,view,the,version,of,the,binary,format,that,the,serializer,snapshot,was,written,with,is,provided,this,version,can,be,used,to,determine,how,the,serializer,snapshot,should,be,read,param,read,version,version,of,the,serializer,snapshot,s,written,binary,format,param,in,the,link,data,input,view,to,read,the,snapshot,from,param,user,code,class,loader,the,user,code,classloader,throws,ioexception,thrown,if,the,snapshot,data,could,be,read,or,parsed;void,read,snapshot,int,read,version,data,input,view,in,class,loader,user,code,class,loader,throws,ioexception
TypeSerializerSnapshot -> static void writeVersionedSnapshot(DataOutputView out, TypeSerializerSnapshot<?> snapshot) throws IOException;1540907751;Writes the given snapshot to the out stream. One should always use this method to write_snapshots out, rather than directly calling {@link #writeSnapshot(DataOutputView)}.__<p>The snapshot written with this method can be read via {@link #readVersionedSnapshot(DataInputView, ClassLoader)}.;static void writeVersionedSnapshot(DataOutputView out, TypeSerializerSnapshot<?> snapshot) throws IOException {_		out.writeUTF(snapshot.getClass().getName())__		out.writeInt(snapshot.getCurrentVersion())__		snapshot.writeSnapshot(out)__	};writes,the,given,snapshot,to,the,out,stream,one,should,always,use,this,method,to,write,snapshots,out,rather,than,directly,calling,link,write,snapshot,data,output,view,p,the,snapshot,written,with,this,method,can,be,read,via,link,read,versioned,snapshot,data,input,view,class,loader;static,void,write,versioned,snapshot,data,output,view,out,type,serializer,snapshot,snapshot,throws,ioexception,out,write,utf,snapshot,get,class,get,name,out,write,int,snapshot,get,current,version,snapshot,write,snapshot,out
TypeSerializerSnapshot -> static void writeVersionedSnapshot(DataOutputView out, TypeSerializerSnapshot<?> snapshot) throws IOException;1540907751;Writes the given snapshot to the out stream. One should always use this method to write_snapshots out, rather than directly calling {@link #writeSnapshot(DataOutputView)}.__<p>The snapshot written with this method can be read via {@link #readVersionedSnapshot(DataInputView, ClassLoader)}.;static void writeVersionedSnapshot(DataOutputView out, TypeSerializerSnapshot<?> snapshot) throws IOException {_		out.writeUTF(snapshot.getClass().getName())__		out.writeInt(snapshot.getCurrentVersion())__		snapshot.writeSnapshot(out)__	};writes,the,given,snapshot,to,the,out,stream,one,should,always,use,this,method,to,write,snapshots,out,rather,than,directly,calling,link,write,snapshot,data,output,view,p,the,snapshot,written,with,this,method,can,be,read,via,link,read,versioned,snapshot,data,input,view,class,loader;static,void,write,versioned,snapshot,data,output,view,out,type,serializer,snapshot,snapshot,throws,ioexception,out,write,utf,snapshot,get,class,get,name,out,write,int,snapshot,get,current,version,snapshot,write,snapshot,out
TypeSerializerSnapshot -> static void writeVersionedSnapshot(DataOutputView out, TypeSerializerSnapshot<?> snapshot) throws IOException;1540907751;Writes the given snapshot to the out stream. One should always use this method to write_snapshots out, rather than directly calling {@link #writeSnapshot(DataOutputView)}.__<p>The snapshot written with this method can be read via {@link #readVersionedSnapshot(DataInputView, ClassLoader)}.;static void writeVersionedSnapshot(DataOutputView out, TypeSerializerSnapshot<?> snapshot) throws IOException {_		out.writeUTF(snapshot.getClass().getName())__		out.writeInt(snapshot.getCurrentVersion())__		snapshot.writeSnapshot(out)__	};writes,the,given,snapshot,to,the,out,stream,one,should,always,use,this,method,to,write,snapshots,out,rather,than,directly,calling,link,write,snapshot,data,output,view,p,the,snapshot,written,with,this,method,can,be,read,via,link,read,versioned,snapshot,data,input,view,class,loader;static,void,write,versioned,snapshot,data,output,view,out,type,serializer,snapshot,snapshot,throws,ioexception,out,write,utf,snapshot,get,class,get,name,out,write,int,snapshot,get,current,version,snapshot,write,snapshot,out
TypeSerializerSnapshot -> static void writeVersionedSnapshot(DataOutputView out, TypeSerializerSnapshot<?> snapshot) throws IOException;1540907751;Writes the given snapshot to the out stream. One should always use this method to write_snapshots out, rather than directly calling {@link #writeSnapshot(DataOutputView)}.__<p>The snapshot written with this method can be read via {@link #readVersionedSnapshot(DataInputView, ClassLoader)}.;static void writeVersionedSnapshot(DataOutputView out, TypeSerializerSnapshot<?> snapshot) throws IOException {_		out.writeUTF(snapshot.getClass().getName())__		out.writeInt(snapshot.getCurrentVersion())__		snapshot.writeSnapshot(out)__	};writes,the,given,snapshot,to,the,out,stream,one,should,always,use,this,method,to,write,snapshots,out,rather,than,directly,calling,link,write,snapshot,data,output,view,p,the,snapshot,written,with,this,method,can,be,read,via,link,read,versioned,snapshot,data,input,view,class,loader;static,void,write,versioned,snapshot,data,output,view,out,type,serializer,snapshot,snapshot,throws,ioexception,out,write,utf,snapshot,get,class,get,name,out,write,int,snapshot,get,current,version,snapshot,write,snapshot,out
