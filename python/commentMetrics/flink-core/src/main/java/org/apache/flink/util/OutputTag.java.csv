# id;timestamp;commentText;codeText;commentWords;codeWords
OutputTag -> public OutputTag(String id);1489819457;Creates a new named {@code OutputTag} with the given id.__@param id The id of the created {@code OutputTag}.;public OutputTag(String id) {_		this.id = Preconditions.checkNotNull(id, "OutputTag id cannot be null.")___		try {_			TypeHint<T> typeHint = new TypeHint<T>(OutputTag.class, this, 0) {}__			this.typeInfo = typeHint.getTypeInfo()__		} catch (InvalidTypesException e) {_			throw new InvalidTypesException("Could not determine TypeInformation for generic " +_					"OutputTag type. Did you forget to make your OutputTag an anonymous inner class?", e)__		}_	};creates,a,new,named,code,output,tag,with,the,given,id,param,id,the,id,of,the,created,code,output,tag;public,output,tag,string,id,this,id,preconditions,check,not,null,id,output,tag,id,cannot,be,null,try,type,hint,t,type,hint,new,type,hint,t,output,tag,class,this,0,this,type,info,type,hint,get,type,info,catch,invalid,types,exception,e,throw,new,invalid,types,exception,could,not,determine,type,information,for,generic,output,tag,type,did,you,forget,to,make,your,output,tag,an,anonymous,inner,class,e
OutputTag -> public OutputTag(String id);1489819457;Creates a new named {@code OutputTag} with the given id.__@param id The id of the created {@code OutputTag}.;public OutputTag(String id) {_		this.id = Preconditions.checkNotNull(id, "OutputTag id cannot be null.")___		try {_			TypeHint<T> typeHint = new TypeHint<T>(OutputTag.class, this, 0) {}__			this.typeInfo = typeHint.getTypeInfo()__		} catch (InvalidTypesException e) {_			throw new InvalidTypesException("Could not determine TypeInformation for generic " +_					"OutputTag type. Did you forget to make your OutputTag an anonymous inner class?", e)__		}_	};creates,a,new,named,code,output,tag,with,the,given,id,param,id,the,id,of,the,created,code,output,tag;public,output,tag,string,id,this,id,preconditions,check,not,null,id,output,tag,id,cannot,be,null,try,type,hint,t,type,hint,new,type,hint,t,output,tag,class,this,0,this,type,info,type,hint,get,type,info,catch,invalid,types,exception,e,throw,new,invalid,types,exception,could,not,determine,type,information,for,generic,output,tag,type,did,you,forget,to,make,your,output,tag,an,anonymous,inner,class,e
OutputTag -> public OutputTag(String id);1495289103;Creates a new named {@code OutputTag} with the given id.__@param id The id of the created {@code OutputTag}.;public OutputTag(String id) {_		Preconditions.checkNotNull(id, "OutputTag id cannot be null.")__		Preconditions.checkArgument(!id.isEmpty(), "OutputTag id must not be empty.")__		this.id = id___		try {_			TypeHint<T> typeHint = new TypeHint<T>(OutputTag.class, this, 0) {}__			this.typeInfo = typeHint.getTypeInfo()__		} catch (InvalidTypesException e) {_			throw new InvalidTypesException("Could not determine TypeInformation for generic " +_					"OutputTag type. Did you forget to make your OutputTag an anonymous inner class?", e)__		}_	};creates,a,new,named,code,output,tag,with,the,given,id,param,id,the,id,of,the,created,code,output,tag;public,output,tag,string,id,preconditions,check,not,null,id,output,tag,id,cannot,be,null,preconditions,check,argument,id,is,empty,output,tag,id,must,not,be,empty,this,id,id,try,type,hint,t,type,hint,new,type,hint,t,output,tag,class,this,0,this,type,info,type,hint,get,type,info,catch,invalid,types,exception,e,throw,new,invalid,types,exception,could,not,determine,type,information,for,generic,output,tag,type,did,you,forget,to,make,your,output,tag,an,anonymous,inner,class,e
OutputTag -> public OutputTag(String id);1516295284;Creates a new named {@code OutputTag} with the given id.__@param id The id of the created {@code OutputTag}.;public OutputTag(String id) {_		Preconditions.checkNotNull(id, "OutputTag id cannot be null.")__		Preconditions.checkArgument(!id.isEmpty(), "OutputTag id must not be empty.")__		this.id = id___		try {_			TypeHint<T> typeHint = new TypeHint<T>(OutputTag.class, this, 0) {}__			this.typeInfo = typeHint.getTypeInfo()__		} catch (InvalidTypesException e) {_			throw new InvalidTypesException("Could not determine TypeInformation for generic " +_					"OutputTag type. Did you forget to make your OutputTag an anonymous inner class?", e)__		}_	};creates,a,new,named,code,output,tag,with,the,given,id,param,id,the,id,of,the,created,code,output,tag;public,output,tag,string,id,preconditions,check,not,null,id,output,tag,id,cannot,be,null,preconditions,check,argument,id,is,empty,output,tag,id,must,not,be,empty,this,id,id,try,type,hint,t,type,hint,new,type,hint,t,output,tag,class,this,0,this,type,info,type,hint,get,type,info,catch,invalid,types,exception,e,throw,new,invalid,types,exception,could,not,determine,type,information,for,generic,output,tag,type,did,you,forget,to,make,your,output,tag,an,anonymous,inner,class,e
OutputTag -> public OutputTag(String id);1524407314;Creates a new named {@code OutputTag} with the given id.__@param id The id of the created {@code OutputTag}.;public OutputTag(String id) {_		Preconditions.checkNotNull(id, "OutputTag id cannot be null.")__		Preconditions.checkArgument(!id.isEmpty(), "OutputTag id must not be empty.")__		this.id = id___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(this, OutputTag.class, getClass(), 0)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Could not determine TypeInformation for the OutputTag type. " +_					"The most common reason is forgetting to make the OutputTag an anonymous inner class. " +_					"It is also not possible to use generic type variables with OutputTags, such as 'Tuple2<A, B>'.", e)__		}_	};creates,a,new,named,code,output,tag,with,the,given,id,param,id,the,id,of,the,created,code,output,tag;public,output,tag,string,id,preconditions,check,not,null,id,output,tag,id,cannot,be,null,preconditions,check,argument,id,is,empty,output,tag,id,must,not,be,empty,this,id,id,try,this,type,info,type,extractor,create,type,info,this,output,tag,class,get,class,0,catch,invalid,types,exception,e,throw,new,invalid,types,exception,could,not,determine,type,information,for,the,output,tag,type,the,most,common,reason,is,forgetting,to,make,the,output,tag,an,anonymous,inner,class,it,is,also,not,possible,to,use,generic,type,variables,with,output,tags,such,as,tuple2,a,b,e
OutputTag -> public OutputTag(String id);1524407314;Creates a new named {@code OutputTag} with the given id.__@param id The id of the created {@code OutputTag}.;public OutputTag(String id) {_		Preconditions.checkNotNull(id, "OutputTag id cannot be null.")__		Preconditions.checkArgument(!id.isEmpty(), "OutputTag id must not be empty.")__		this.id = id___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(this, OutputTag.class, getClass(), 0)__		}_		catch (InvalidTypesException e) {_			throw new InvalidTypesException("Could not determine TypeInformation for the OutputTag type. " +_					"The most common reason is forgetting to make the OutputTag an anonymous inner class. " +_					"It is also not possible to use generic type variables with OutputTags, such as 'Tuple2<A, B>'.", e)__		}_	};creates,a,new,named,code,output,tag,with,the,given,id,param,id,the,id,of,the,created,code,output,tag;public,output,tag,string,id,preconditions,check,not,null,id,output,tag,id,cannot,be,null,preconditions,check,argument,id,is,empty,output,tag,id,must,not,be,empty,this,id,id,try,this,type,info,type,extractor,create,type,info,this,output,tag,class,get,class,0,catch,invalid,types,exception,e,throw,new,invalid,types,exception,could,not,determine,type,information,for,the,output,tag,type,the,most,common,reason,is,forgetting,to,make,the,output,tag,an,anonymous,inner,class,it,is,also,not,possible,to,use,generic,type,variables,with,output,tags,such,as,tuple2,a,b,e
OutputTag -> public OutputTag(String id, TypeInformation<T> typeInfo);1489819457;Creates a new named {@code OutputTag} with the given id and output {@link TypeInformation}.__@param id The id of the created {@code OutputTag}._@param typeInfo The {@code TypeInformation} for the side output.;public OutputTag(String id, TypeInformation<T> typeInfo) {_		this.id = Preconditions.checkNotNull(id, "OutputTag id cannot be null.")__		this.typeInfo = Preconditions.checkNotNull(typeInfo, "TypeInformation cannot be null.")__	};creates,a,new,named,code,output,tag,with,the,given,id,and,output,link,type,information,param,id,the,id,of,the,created,code,output,tag,param,type,info,the,code,type,information,for,the,side,output;public,output,tag,string,id,type,information,t,type,info,this,id,preconditions,check,not,null,id,output,tag,id,cannot,be,null,this,type,info,preconditions,check,not,null,type,info,type,information,cannot,be,null
OutputTag -> public OutputTag(String id, TypeInformation<T> typeInfo);1495289103;Creates a new named {@code OutputTag} with the given id and output {@link TypeInformation}.__@param id The id of the created {@code OutputTag}._@param typeInfo The {@code TypeInformation} for the side output.;public OutputTag(String id, TypeInformation<T> typeInfo) {_		Preconditions.checkNotNull(id, "OutputTag id cannot be null.")__		Preconditions.checkArgument(!id.isEmpty(), "OutputTag id must not be empty.")__		this.id = id__		this.typeInfo = Preconditions.checkNotNull(typeInfo, "TypeInformation cannot be null.")__	};creates,a,new,named,code,output,tag,with,the,given,id,and,output,link,type,information,param,id,the,id,of,the,created,code,output,tag,param,type,info,the,code,type,information,for,the,side,output;public,output,tag,string,id,type,information,t,type,info,preconditions,check,not,null,id,output,tag,id,cannot,be,null,preconditions,check,argument,id,is,empty,output,tag,id,must,not,be,empty,this,id,id,this,type,info,preconditions,check,not,null,type,info,type,information,cannot,be,null
OutputTag -> public OutputTag(String id, TypeInformation<T> typeInfo);1516295284;Creates a new named {@code OutputTag} with the given id and output {@link TypeInformation}.__@param id The id of the created {@code OutputTag}._@param typeInfo The {@code TypeInformation} for the side output.;public OutputTag(String id, TypeInformation<T> typeInfo) {_		Preconditions.checkNotNull(id, "OutputTag id cannot be null.")__		Preconditions.checkArgument(!id.isEmpty(), "OutputTag id must not be empty.")__		this.id = id__		this.typeInfo = Preconditions.checkNotNull(typeInfo, "TypeInformation cannot be null.")__	};creates,a,new,named,code,output,tag,with,the,given,id,and,output,link,type,information,param,id,the,id,of,the,created,code,output,tag,param,type,info,the,code,type,information,for,the,side,output;public,output,tag,string,id,type,information,t,type,info,preconditions,check,not,null,id,output,tag,id,cannot,be,null,preconditions,check,argument,id,is,empty,output,tag,id,must,not,be,empty,this,id,id,this,type,info,preconditions,check,not,null,type,info,type,information,cannot,be,null
OutputTag -> public OutputTag(String id, TypeInformation<T> typeInfo);1524407314;Creates a new named {@code OutputTag} with the given id and output {@link TypeInformation}.__@param id The id of the created {@code OutputTag}._@param typeInfo The {@code TypeInformation} for the side output.;public OutputTag(String id, TypeInformation<T> typeInfo) {_		Preconditions.checkNotNull(id, "OutputTag id cannot be null.")__		Preconditions.checkArgument(!id.isEmpty(), "OutputTag id must not be empty.")__		this.id = id__		this.typeInfo = Preconditions.checkNotNull(typeInfo, "TypeInformation cannot be null.")__	};creates,a,new,named,code,output,tag,with,the,given,id,and,output,link,type,information,param,id,the,id,of,the,created,code,output,tag,param,type,info,the,code,type,information,for,the,side,output;public,output,tag,string,id,type,information,t,type,info,preconditions,check,not,null,id,output,tag,id,cannot,be,null,preconditions,check,argument,id,is,empty,output,tag,id,must,not,be,empty,this,id,id,this,type,info,preconditions,check,not,null,type,info,type,information,cannot,be,null
OutputTag -> public OutputTag(String id, TypeInformation<T> typeInfo);1524407314;Creates a new named {@code OutputTag} with the given id and output {@link TypeInformation}.__@param id The id of the created {@code OutputTag}._@param typeInfo The {@code TypeInformation} for the side output.;public OutputTag(String id, TypeInformation<T> typeInfo) {_		Preconditions.checkNotNull(id, "OutputTag id cannot be null.")__		Preconditions.checkArgument(!id.isEmpty(), "OutputTag id must not be empty.")__		this.id = id__		this.typeInfo = Preconditions.checkNotNull(typeInfo, "TypeInformation cannot be null.")__	};creates,a,new,named,code,output,tag,with,the,given,id,and,output,link,type,information,param,id,the,id,of,the,created,code,output,tag,param,type,info,the,code,type,information,for,the,side,output;public,output,tag,string,id,type,information,t,type,info,preconditions,check,not,null,id,output,tag,id,cannot,be,null,preconditions,check,argument,id,is,empty,output,tag,id,must,not,be,empty,this,id,id,this,type,info,preconditions,check,not,null,type,info,type,information,cannot,be,null
