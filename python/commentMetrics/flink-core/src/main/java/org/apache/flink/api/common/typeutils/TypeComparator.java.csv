# id;timestamp;commentText;codeText;commentWords;codeWords
TypeComparator -> @SuppressWarnings("rawtypes") 	public abstract TypeComparator[] getFlatComparators()_;1412761141;Get the field comparators. This is used together with {@link #extractKeys(Object)} to provide_interoperability between different record types.;@SuppressWarnings("rawtypes")_	public abstract TypeComparator[] getFlatComparators()_;get,the,field,comparators,this,is,used,together,with,link,extract,keys,object,to,provide,interoperability,between,different,record,types;suppress,warnings,rawtypes,public,abstract,type,comparator,get,flat,comparators
TypeComparator -> @SuppressWarnings("rawtypes") 	public abstract TypeComparator[] getFlatComparators()_;1416309577;Get the field comparators. This is used together with {@link #extractKeys(Object, Object[], int)} to provide_interoperability between different record types.;@SuppressWarnings("rawtypes")_	public abstract TypeComparator[] getFlatComparators()_;get,the,field,comparators,this,is,used,together,with,link,extract,keys,object,object,int,to,provide,interoperability,between,different,record,types;suppress,warnings,rawtypes,public,abstract,type,comparator,get,flat,comparators
TypeComparator -> @SuppressWarnings("rawtypes") 	public abstract TypeComparator[] getFlatComparators()_;1443779522;Get the field comparators. This is used together with {@link #extractKeys(Object, Object[], int)}_to provide interoperability between different record types. Note, that this should return at_least one Comparator and that the number of Comparators must match the number of extracted_keys._@return An Array of Comparators for the extracted keys.;@SuppressWarnings("rawtypes")_	public abstract TypeComparator[] getFlatComparators()_;get,the,field,comparators,this,is,used,together,with,link,extract,keys,object,object,int,to,provide,interoperability,between,different,record,types,note,that,this,should,return,at,least,one,comparator,and,that,the,number,of,comparators,must,match,the,number,of,extracted,keys,return,an,array,of,comparators,for,the,extracted,keys;suppress,warnings,rawtypes,public,abstract,type,comparator,get,flat,comparators
TypeComparator -> @SuppressWarnings("rawtypes") 	public abstract TypeComparator[] getFlatComparators()_;1445427423;Get the field comparators. This is used together with {@link #extractKeys(Object, Object[], int)}_to provide interoperability between different record types. Note, that this should return at_least one Comparator and that the number of Comparators must match the number of extracted_keys._@return An Array of Comparators for the extracted keys.;@SuppressWarnings("rawtypes")_	public abstract TypeComparator[] getFlatComparators()_;get,the,field,comparators,this,is,used,together,with,link,extract,keys,object,object,int,to,provide,interoperability,between,different,record,types,note,that,this,should,return,at,least,one,comparator,and,that,the,number,of,comparators,must,match,the,number,of,extracted,keys,return,an,array,of,comparators,for,the,extracted,keys;suppress,warnings,rawtypes,public,abstract,type,comparator,get,flat,comparators
TypeComparator -> @SuppressWarnings("rawtypes") 	public abstract TypeComparator[] getFlatComparators()_;1446112342;Get the field comparators. This is used together with {@link #extractKeys(Object, Object[], int)}_to provide interoperability between different record types. Note, that this should return at_least one Comparator and that the number of Comparators must match the number of extracted_keys._@return An Array of Comparators for the extracted keys.;@SuppressWarnings("rawtypes")_	public abstract TypeComparator[] getFlatComparators()_;get,the,field,comparators,this,is,used,together,with,link,extract,keys,object,object,int,to,provide,interoperability,between,different,record,types,note,that,this,should,return,at,least,one,comparator,and,that,the,number,of,comparators,must,match,the,number,of,extracted,keys,return,an,array,of,comparators,for,the,extracted,keys;suppress,warnings,rawtypes,public,abstract,type,comparator,get,flat,comparators
TypeComparator -> @SuppressWarnings("rawtypes") 	public abstract TypeComparator[] getFlatComparators()_;1455479358;Get the field comparators. This is used together with {@link #extractKeys(Object, Object[], int)}_to provide interoperability between different record types. Note, that this should return at_least one Comparator and that the number of Comparators must match the number of extracted_keys._@return An Array of Comparators for the extracted keys.;@SuppressWarnings("rawtypes")_	public abstract TypeComparator[] getFlatComparators()_;get,the,field,comparators,this,is,used,together,with,link,extract,keys,object,object,int,to,provide,interoperability,between,different,record,types,note,that,this,should,return,at,least,one,comparator,and,that,the,number,of,comparators,must,match,the,number,of,extracted,keys,return,an,array,of,comparators,for,the,extracted,keys;suppress,warnings,rawtypes,public,abstract,type,comparator,get,flat,comparators
TypeComparator -> @SuppressWarnings("rawtypes") 	public abstract TypeComparator[] getFlatComparators()_;1482509593;Get the field comparators. This is used together with {@link #extractKeys(Object, Object[], int)}_to provide interoperability between different record types. Note, that this should return at_least one Comparator and that the number of Comparators must match the number of extracted_keys._@return An Array of Comparators for the extracted keys.;@SuppressWarnings("rawtypes")_	public abstract TypeComparator[] getFlatComparators()_;get,the,field,comparators,this,is,used,together,with,link,extract,keys,object,object,int,to,provide,interoperability,between,different,record,types,note,that,this,should,return,at,least,one,comparator,and,that,the,number,of,comparators,must,match,the,number,of,extracted,keys,return,an,array,of,comparators,for,the,extracted,keys;suppress,warnings,rawtypes,public,abstract,type,comparator,get,flat,comparators
TypeComparator -> @SuppressWarnings("rawtypes") 	public abstract TypeComparator[] getFlatComparators()_;1551194270;Get the field comparators. This is used together with {@link #extractKeys(Object, Object[], int)}_to provide interoperability between different record types. Note, that this should return at_least one Comparator and that the number of Comparators must match the number of extracted_keys._@return An Array of Comparators for the extracted keys.;@SuppressWarnings("rawtypes")_	public abstract TypeComparator[] getFlatComparators()_;get,the,field,comparators,this,is,used,together,with,link,extract,keys,object,object,int,to,provide,interoperability,between,different,record,types,note,that,this,should,return,at,least,one,comparator,and,that,the,number,of,comparators,must,match,the,number,of,extracted,keys,return,an,array,of,comparators,for,the,extracted,keys;suppress,warnings,rawtypes,public,abstract,type,comparator,get,flat,comparators
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1405024514;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1405090423;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1411372797;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1411473593;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1412166614;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1412761141;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1416309577;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1443779522;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1445427423;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1446112342;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1455479358;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1482509593;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;1551194270;Writes the record in such a fashion that all keys are normalizing and at the beginning of the serialized data._This must only be used when for all the key fields the full normalized key is used. The method_{@code #supportsSerializationWithKeyNormalization()} allows to check that.__@param record The record object into which to read the record data._@param target The stream to which to write the data,__@see #supportsSerializationWithKeyNormalization()_@see #readWithKeyDenormalization(Object, DataInputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void writeWithKeyNormalization(T record, DataOutputView target) throws IOException_;writes,the,record,in,such,a,fashion,that,all,keys,are,normalizing,and,at,the,beginning,of,the,serialized,data,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,the,method,code,supports,serialization,with,key,normalization,allows,to,check,that,param,record,the,record,object,into,which,to,read,the,record,data,param,target,the,stream,to,which,to,write,the,data,see,supports,serialization,with,key,normalization,see,read,with,key,denormalization,object,data,input,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,write,with,key,normalization,t,record,data,output,view,target,throws,ioexception
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1405024514;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1405090423;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1411372797;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1411473593;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1412166614;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1412761141;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1416309577;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1443779522;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1445427423;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1446112342;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>{@code_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__}</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,code,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1455479358;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>{@code_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__}</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,code,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1482509593;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>{@code_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__}</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,code,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract int compareToReference(TypeComparator<T> referencedComparator)_;1551194270;This method compares the element that has been set as reference in this type accessor, to the_element set as reference in the given type accessor. Similar to comparing two_elements {@code e1} and {@code e2} via a comparator, this method can be used the_following way.__<pre>{@code_E e1 = ...__E e2 = ...___TypeComparator<E> acc1 = ...__TypeComparator<E> acc2 = ...___acc1.setReference(e1)__acc2.setReference(e2)___int comp = acc1.compareToReference(acc2)__}</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is typically compared to many other elements when establishing a_sorted order. The actual comparison performed by this method may be very cheap, as it_happens on the extracted features.__@param referencedComparator The type accessors where the element for comparison has been set_as reference.__@return A value smaller than zero, if the reference value of {@code referencedAccessors} is smaller_than the reference value of this type accessor_ a value greater than zero, if it is larger__zero, if both are equal.__@see #setReference(Object);public abstract int compareToReference(TypeComparator<T> referencedComparator)_;this,method,compares,the,element,that,has,been,set,as,reference,in,this,type,accessor,to,the,element,set,as,reference,in,the,given,type,accessor,similar,to,comparing,two,elements,code,e1,and,code,e2,via,a,comparator,this,method,can,be,used,the,following,way,pre,code,e,e1,e,e2,type,comparator,e,acc1,type,comparator,e,acc2,acc1,set,reference,e1,acc2,set,reference,e2,int,comp,acc1,compare,to,reference,acc2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,typically,compared,to,many,other,elements,when,establishing,a,sorted,order,the,actual,comparison,performed,by,this,method,may,be,very,cheap,as,it,happens,on,the,extracted,features,param,referenced,comparator,the,type,accessors,where,the,element,for,comparison,has,been,set,as,reference,return,a,value,smaller,than,zero,if,the,reference,value,of,code,referenced,accessors,is,smaller,than,the,reference,value,of,this,type,accessor,a,value,greater,than,zero,if,it,is,larger,zero,if,both,are,equal,see,set,reference,object;public,abstract,int,compare,to,reference,type,comparator,t,referenced,comparator
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1405024514;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1405090423;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1411372797;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1411473593;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1412166614;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1412761141;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1416309577;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1443779522;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1445427423;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1446112342;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1455479358;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1482509593;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract boolean supportsNormalizedKey()_;1551194270;Checks whether the data type supports the creation of a normalized key for comparison.__@return True, if the data type supports the creation of a normalized key for comparison, false otherwise.;public abstract boolean supportsNormalizedKey()_;checks,whether,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,return,true,if,the,data,type,supports,the,creation,of,a,normalized,key,for,comparison,false,otherwise;public,abstract,boolean,supports,normalized,key
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1405024514;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1405090423;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1411372797;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1411473593;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1412166614;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1412761141;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1416309577;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1443779522;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1445427423;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1446112342;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1455479358;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1482509593;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;1551194270;Reads the record back while de-normalizing the key fields. This must only be used when_for all the key fields the full normalized key is used, which is hinted by the_{@code #supportsSerializationWithKeyNormalization()} method.__@param reuse The reuse object into which to read the record data._@param source The stream from which to read the data,__@see #supportsSerializationWithKeyNormalization()_@see #writeWithKeyNormalization(Object, DataOutputView)_@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract T readWithKeyDenormalization(T reuse, DataInputView source) throws IOException_;reads,the,record,back,while,de,normalizing,the,key,fields,this,must,only,be,used,when,for,all,the,key,fields,the,full,normalized,key,is,used,which,is,hinted,by,the,code,supports,serialization,with,key,normalization,method,param,reuse,the,reuse,object,into,which,to,read,the,record,data,param,source,the,stream,from,which,to,read,the,data,see,supports,serialization,with,key,normalization,see,write,with,key,normalization,object,data,output,view,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,t,read,with,key,denormalization,t,reuse,data,input,view,source,throws,ioexception
TypeComparator -> public abstract Object[] extractKeys(T record)_;1411372797;Extracts the key fields from a record. This is for use by the PairComparator to provide_interoperability between different record types.;public abstract Object[] extractKeys(T record)_;extracts,the,key,fields,from,a,record,this,is,for,use,by,the,pair,comparator,to,provide,interoperability,between,different,record,types;public,abstract,object,extract,keys,t,record
TypeComparator -> public abstract Object[] extractKeys(T record)_;1411473593;Extracts the key fields from a record. This is for use by the PairComparator to provide_interoperability between different record types.;public abstract Object[] extractKeys(T record)_;extracts,the,key,fields,from,a,record,this,is,for,use,by,the,pair,comparator,to,provide,interoperability,between,different,record,types;public,abstract,object,extract,keys,t,record
TypeComparator -> public abstract Object[] extractKeys(T record)_;1412166614;Extracts the key fields from a record. This is for use by the PairComparator to provide_interoperability between different record types.;public abstract Object[] extractKeys(T record)_;extracts,the,key,fields,from,a,record,this,is,for,use,by,the,pair,comparator,to,provide,interoperability,between,different,record,types;public,abstract,object,extract,keys,t,record
TypeComparator -> public abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException_;1405024514;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException_;1405090423;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1405024514;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1405090423;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1411372797;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1411473593;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1412166614;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1412761141;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1416309577;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1443779522;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1445427423;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1446112342;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1455479358;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1482509593;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;1551194270;Checks, whether the given number of bytes for a normalized is only a prefix to determine the order of elements_of the data type for which this comparator provides the comparison methods. For example, if the_data type is ordered with respect to an integer value it contains, then this method would return_true, if the number of key bytes is smaller than four.__@return True, if the given number of bytes is only a prefix,_false otherwise.;public abstract boolean isNormalizedKeyPrefixOnly(int keyBytes)_;checks,whether,the,given,number,of,bytes,for,a,normalized,is,only,a,prefix,to,determine,the,order,of,elements,of,the,data,type,for,which,this,comparator,provides,the,comparison,methods,for,example,if,the,data,type,is,ordered,with,respect,to,an,integer,value,it,contains,then,this,method,would,return,true,if,the,number,of,key,bytes,is,smaller,than,four,return,true,if,the,given,number,of,bytes,is,only,a,prefix,false,otherwise;public,abstract,boolean,is,normalized,key,prefix,only,int,key,bytes
TypeComparator -> public abstract void setReference(T toCompare)_;1405024514;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1405090423;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1411372797;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1411473593;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1412166614;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1412761141;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1416309577;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1443779522;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1445427423;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1446112342;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>{@code_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__}</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,code,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1455479358;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>{@code_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__}</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,code,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1482509593;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>{@code_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__}</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,code,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract void setReference(T toCompare)_;1551194270;Sets the given element as the comparison reference for future calls to_{@link #equalToReference(Object)} and {@link #compareToReference(TypeComparator)}. This method_must set the given element into this comparator instance's state. If the comparison happens on a subset_of the fields from the record, this method may extract those fields._<p>_A typical example for checking the equality of two elements is the following:_<pre>{@code_E e1 = ...__E e2 = ...___TypeComparator<E> acc = ...___acc.setReference(e1)__boolean equal = acc.equalToReference(e2)__}</pre>__The rational behind this method is that elements are typically compared using certain features that_are extracted from them, (such de-serializing as a subset of fields). When setting the_reference, this extraction happens. The extraction needs happen only once per element,_even though an element is often compared to multiple other elements, such as when finding equal elements_in the process of grouping the elements.__@param toCompare The element to set as the comparison reference.;public abstract void setReference(T toCompare)_;sets,the,given,element,as,the,comparison,reference,for,future,calls,to,link,equal,to,reference,object,and,link,compare,to,reference,type,comparator,this,method,must,set,the,given,element,into,this,comparator,instance,s,state,if,the,comparison,happens,on,a,subset,of,the,fields,from,the,record,this,method,may,extract,those,fields,p,a,typical,example,for,checking,the,equality,of,two,elements,is,the,following,pre,code,e,e1,e,e2,type,comparator,e,acc,acc,set,reference,e1,boolean,equal,acc,equal,to,reference,e2,pre,the,rational,behind,this,method,is,that,elements,are,typically,compared,using,certain,features,that,are,extracted,from,them,such,de,serializing,as,a,subset,of,fields,when,setting,the,reference,this,extraction,happens,the,extraction,needs,happen,only,once,per,element,even,though,an,element,is,often,compared,to,multiple,other,elements,such,as,when,finding,equal,elements,in,the,process,of,grouping,the,elements,param,to,compare,the,element,to,set,as,the,comparison,reference;public,abstract,void,set,reference,t,to,compare
TypeComparator -> public abstract TypeComparator[] getComparators()_;1411372797;Get the field comparators. This is used together with {@link #extractKeys(Object)} to provide_interoperability between different record types.;public abstract TypeComparator[] getComparators()_;get,the,field,comparators,this,is,used,together,with,link,extract,keys,object,to,provide,interoperability,between,different,record,types;public,abstract,type,comparator,get,comparators
TypeComparator -> public abstract TypeComparator[] getComparators()_;1411473593;Get the field comparators. This is used together with {@link #extractKeys(Object)} to provide_interoperability between different record types.;public abstract TypeComparator[] getComparators()_;get,the,field,comparators,this,is,used,together,with,link,extract,keys,object,to,provide,interoperability,between,different,record,types;public,abstract,type,comparator,get,comparators
TypeComparator -> public abstract int compare(T first, T second)_;1405024514;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1405090423;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1411372797;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1411473593;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1412166614;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1412761141;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1416309577;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1443779522;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1445427423;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1446112342;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1455479358;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1482509593;Compares two records in object form. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,object,form,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int compare(T first, T second)_;1551194270;Compares two records in object form. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}.__@param first The first record._@param second The second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}.__@see java.util.Comparator#compare(Object, Object);public abstract int compare(T first, T second)_;compares,two,records,in,object,form,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,param,first,the,first,record,param,second,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,see,java,util,comparator,compare,object,object;public,abstract,int,compare,t,first,t,second
TypeComparator -> public abstract int hash(T record)_;1405024514;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as good as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,good,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1405090423;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as good as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,good,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1411372797;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as good as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,good,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1411473593;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as good as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,good,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1412166614;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as good as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,good,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1412761141;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as good as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,good,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1416309577;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as good as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,good,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1443779522;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as good as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,good,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1445427423;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as much as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,much,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1446112342;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as much as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,much,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1455479358;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as much as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,much,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1482509593;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as much as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,much,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract int hash(T record)_;1551194270;Computes a hash value for the given record. The hash value should include all fields in the record_relevant to the comparison._<p>_The hash code is typically not used as it is in hash tables and for partitioning, but it is further_scrambled to make sure that a projection of the hash values to a lower cardinality space is as_results in a rather uniform value distribution._However, any collisions produced by this method cannot be undone. While it is NOT_important to create hash codes that cover the full spectrum of bits in the integer, it IS important_to avoid collisions when combining two value as much as possible.__@param record The record to be hashed._@return A hash value for the record.__@see java.lang.Object#hashCode();public abstract int hash(T record)_;computes,a,hash,value,for,the,given,record,the,hash,value,should,include,all,fields,in,the,record,relevant,to,the,comparison,p,the,hash,code,is,typically,not,used,as,it,is,in,hash,tables,and,for,partitioning,but,it,is,further,scrambled,to,make,sure,that,a,projection,of,the,hash,values,to,a,lower,cardinality,space,is,as,results,in,a,rather,uniform,value,distribution,however,any,collisions,produced,by,this,method,cannot,be,undone,while,it,is,not,important,to,create,hash,codes,that,cover,the,full,spectrum,of,bits,in,the,integer,it,is,important,to,avoid,collisions,when,combining,two,value,as,much,as,possible,param,record,the,record,to,be,hashed,return,a,hash,value,for,the,record,see,java,lang,object,hash,code;public,abstract,int,hash,t,record
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1405024514;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1405090423;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1411372797;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1411473593;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1412166614;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1412761141;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1416309577;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1443779522;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1445427423;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1446112342;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1455479358;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1482509593;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract TypeComparator<T> duplicate()_;1551194270;Creates a copy of this class. The copy must be deep such that no state set in the copy affects this_instance of the comparator class.__@return A deep copy of this comparator instance.;public abstract TypeComparator<T> duplicate()_;creates,a,copy,of,this,class,the,copy,must,be,deep,such,that,no,state,set,in,the,copy,affects,this,instance,of,the,comparator,class,return,a,deep,copy,of,this,comparator,instance;public,abstract,type,comparator,t,duplicate
TypeComparator -> public abstract int getNormalizeKeyLen()_;1405024514;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1405090423;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1411372797;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1411473593;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1412166614;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1412761141;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1416309577;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1443779522;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1445427423;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1446112342;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1455479358;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1482509593;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract int getNormalizeKeyLen()_;1551194270;Gets the number of bytes that the normalized key would maximally take. A value of_{@link java.lang.Integer}.MAX_VALUE is interpreted as infinite.__@return The number of bytes that the normalized key would maximally take.;public abstract int getNormalizeKeyLen()_;gets,the,number,of,bytes,that,the,normalized,key,would,maximally,take,a,value,of,link,java,lang,integer,is,interpreted,as,infinite,return,the,number,of,bytes,that,the,normalized,key,would,maximally,take;public,abstract,int,get,normalize,key,len
TypeComparator -> public abstract boolean invertNormalizedKey()_;1405024514;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1405090423;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1411372797;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1411473593;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1412166614;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1412761141;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1416309577;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1443779522;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1445427423;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1446112342;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1455479358;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1482509593;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract boolean invertNormalizedKey()_;1551194270;Flag whether normalized key comparisons should be inverted key should be interpreted_inverted, i.e. descending.__@return True, if all normalized key comparisons should invert the sign of the comparison result,_false if the normalized key should be used as is.;public abstract boolean invertNormalizedKey()_;flag,whether,normalized,key,comparisons,should,be,inverted,key,should,be,interpreted,inverted,i,e,descending,return,true,if,all,normalized,key,comparisons,should,invert,the,sign,of,the,comparison,result,false,if,the,normalized,key,should,be,used,as,is;public,abstract,boolean,invert,normalized,key
TypeComparator -> public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;1411372797;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,serialized,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;1411473593;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,serialized,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;1412166614;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,serialized,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;1412761141;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,serialized,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;1416309577;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,serialized,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;1443779522;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,serialized,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;1445427423;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,serialized,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;1446112342;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,serialized,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;1455479358;Compares two records in serialized from. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,from,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,serialized,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;1482509593;Compares two records in serialized form. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,form,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,serialized,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;1551194270;Compares two records in serialized form. The return value indicates the order of the two in the same way_as defined by {@link java.util.Comparator#compare(Object, Object)}._<p>_This method may de-serialize the records or compare them directly based on their binary representation.__@param firstSource The input view containing the first record._@param secondSource The input view containing the second record._@return An integer defining the oder among the objects in the same way as {@link java.util.Comparator#compare(Object, Object)}._@throws IOException Thrown, if any of the input views raised an exception when reading the records.__@see java.util.Comparator#compare(Object, Object);public abstract int compareSerialized(DataInputView firstSource, DataInputView secondSource) throws IOException_;compares,two,records,in,serialized,form,the,return,value,indicates,the,order,of,the,two,in,the,same,way,as,defined,by,link,java,util,comparator,compare,object,object,p,this,method,may,de,serialize,the,records,or,compare,them,directly,based,on,their,binary,representation,param,first,source,the,input,view,containing,the,first,record,param,second,source,the,input,view,containing,the,second,record,return,an,integer,defining,the,oder,among,the,objects,in,the,same,way,as,link,java,util,comparator,compare,object,object,throws,ioexception,thrown,if,any,of,the,input,views,raised,an,exception,when,reading,the,records,see,java,util,comparator,compare,object,object;public,abstract,int,compare,serialized,data,input,view,first,source,data,input,view,second,source,throws,ioexception
TypeComparator -> public abstract int extractKeys(Object record, Object[] target, int index)_;1412761141;Extracts the key fields from a record. This is for use by the PairComparator to provide_interoperability between different record types._@return the number of keys added to target.;public abstract int extractKeys(Object record, Object[] target, int index)_;extracts,the,key,fields,from,a,record,this,is,for,use,by,the,pair,comparator,to,provide,interoperability,between,different,record,types,return,the,number,of,keys,added,to,target;public,abstract,int,extract,keys,object,record,object,target,int,index
TypeComparator -> public abstract int extractKeys(Object record, Object[] target, int index)_;1416309577;Extracts the key fields from a record. This is for use by the PairComparator to provide_interoperability between different record types._@return the number of keys added to target.;public abstract int extractKeys(Object record, Object[] target, int index)_;extracts,the,key,fields,from,a,record,this,is,for,use,by,the,pair,comparator,to,provide,interoperability,between,different,record,types,return,the,number,of,keys,added,to,target;public,abstract,int,extract,keys,object,record,object,target,int,index
TypeComparator -> public abstract int extractKeys(Object record, Object[] target, int index)_;1443779522;Extracts the key fields from a record. This is for use by the PairComparator to provide_interoperability between different record types. Note, that at least one key should be extracted._@param record The record that contains the key(s)_@param target The array to write the key(s) into._@param index The offset of the target array to start writing into._@return the number of keys added to target.;public abstract int extractKeys(Object record, Object[] target, int index)_;extracts,the,key,fields,from,a,record,this,is,for,use,by,the,pair,comparator,to,provide,interoperability,between,different,record,types,note,that,at,least,one,key,should,be,extracted,param,record,the,record,that,contains,the,key,s,param,target,the,array,to,write,the,key,s,into,param,index,the,offset,of,the,target,array,to,start,writing,into,return,the,number,of,keys,added,to,target;public,abstract,int,extract,keys,object,record,object,target,int,index
TypeComparator -> public abstract int extractKeys(Object record, Object[] target, int index)_;1445427423;Extracts the key fields from a record. This is for use by the PairComparator to provide_interoperability between different record types. Note, that at least one key should be extracted._@param record The record that contains the key(s)_@param target The array to write the key(s) into._@param index The offset of the target array to start writing into._@return the number of keys added to target.;public abstract int extractKeys(Object record, Object[] target, int index)_;extracts,the,key,fields,from,a,record,this,is,for,use,by,the,pair,comparator,to,provide,interoperability,between,different,record,types,note,that,at,least,one,key,should,be,extracted,param,record,the,record,that,contains,the,key,s,param,target,the,array,to,write,the,key,s,into,param,index,the,offset,of,the,target,array,to,start,writing,into,return,the,number,of,keys,added,to,target;public,abstract,int,extract,keys,object,record,object,target,int,index
TypeComparator -> public abstract int extractKeys(Object record, Object[] target, int index)_;1446112342;Extracts the key fields from a record. This is for use by the PairComparator to provide_interoperability between different record types. Note, that at least one key should be extracted._@param record The record that contains the key(s)_@param target The array to write the key(s) into._@param index The offset of the target array to start writing into._@return the number of keys added to target.;public abstract int extractKeys(Object record, Object[] target, int index)_;extracts,the,key,fields,from,a,record,this,is,for,use,by,the,pair,comparator,to,provide,interoperability,between,different,record,types,note,that,at,least,one,key,should,be,extracted,param,record,the,record,that,contains,the,key,s,param,target,the,array,to,write,the,key,s,into,param,index,the,offset,of,the,target,array,to,start,writing,into,return,the,number,of,keys,added,to,target;public,abstract,int,extract,keys,object,record,object,target,int,index
TypeComparator -> public abstract int extractKeys(Object record, Object[] target, int index)_;1455479358;Extracts the key fields from a record. This is for use by the PairComparator to provide_interoperability between different record types. Note, that at least one key should be extracted._@param record The record that contains the key(s)_@param target The array to write the key(s) into._@param index The offset of the target array to start writing into._@return the number of keys added to target.;public abstract int extractKeys(Object record, Object[] target, int index)_;extracts,the,key,fields,from,a,record,this,is,for,use,by,the,pair,comparator,to,provide,interoperability,between,different,record,types,note,that,at,least,one,key,should,be,extracted,param,record,the,record,that,contains,the,key,s,param,target,the,array,to,write,the,key,s,into,param,index,the,offset,of,the,target,array,to,start,writing,into,return,the,number,of,keys,added,to,target;public,abstract,int,extract,keys,object,record,object,target,int,index
TypeComparator -> public abstract int extractKeys(Object record, Object[] target, int index)_;1482509593;Extracts the key fields from a record. This is for use by the PairComparator to provide_interoperability between different record types. Note, that at least one key should be extracted._@param record The record that contains the key(s)_@param target The array to write the key(s) into._@param index The offset of the target array to start writing into._@return the number of keys added to target.;public abstract int extractKeys(Object record, Object[] target, int index)_;extracts,the,key,fields,from,a,record,this,is,for,use,by,the,pair,comparator,to,provide,interoperability,between,different,record,types,note,that,at,least,one,key,should,be,extracted,param,record,the,record,that,contains,the,key,s,param,target,the,array,to,write,the,key,s,into,param,index,the,offset,of,the,target,array,to,start,writing,into,return,the,number,of,keys,added,to,target;public,abstract,int,extract,keys,object,record,object,target,int,index
TypeComparator -> public abstract int extractKeys(Object record, Object[] target, int index)_;1551194270;Extracts the key fields from a record. This is for use by the PairComparator to provide_interoperability between different record types. Note, that at least one key should be extracted._@param record The record that contains the key(s)_@param target The array to write the key(s) into._@param index The offset of the target array to start writing into._@return the number of keys added to target.;public abstract int extractKeys(Object record, Object[] target, int index)_;extracts,the,key,fields,from,a,record,this,is,for,use,by,the,pair,comparator,to,provide,interoperability,between,different,record,types,note,that,at,least,one,key,should,be,extracted,param,record,the,record,that,contains,the,key,s,param,target,the,array,to,write,the,key,s,into,param,index,the,offset,of,the,target,array,to,start,writing,into,return,the,number,of,keys,added,to,target;public,abstract,int,extract,keys,object,record,object,target,int,index
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1405024514;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1405090423;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1411372797;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1411473593;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1412166614;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1412761141;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1416309577;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1443779522;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1445427423;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1446112342;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1455479358;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1482509593;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean equalToReference(T candidate)_;1551194270;Checks, whether the given element is equal to the element that has been set as the comparison_reference in this comparator instance.__@param candidate The candidate to check._@return True, if the element is equal to the comparison reference, false otherwise.__@see #setReference(Object);public abstract boolean equalToReference(T candidate)_;checks,whether,the,given,element,is,equal,to,the,element,that,has,been,set,as,the,comparison,reference,in,this,comparator,instance,param,candidate,the,candidate,to,check,return,true,if,the,element,is,equal,to,the,comparison,reference,false,otherwise,see,set,reference,object;public,abstract,boolean,equal,to,reference,t,candidate
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1405024514;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1405090423;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1411372797;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1411473593;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1412166614;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1412761141;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1416309577;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1443779522;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1445427423;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1446112342;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1455479358;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1482509593;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract boolean supportsSerializationWithKeyNormalization()_;1551194270;Check whether this comparator supports to serialize the record in a format that replaces its keys by a normalized_key.__@return True, if the comparator supports that specific form of serialization, false if not.;public abstract boolean supportsSerializationWithKeyNormalization()_;check,whether,this,comparator,supports,to,serialize,the,record,in,a,format,that,replaces,its,keys,by,a,normalized,key,return,true,if,the,comparator,supports,that,specific,form,of,serialization,false,if,not;public,abstract,boolean,supports,serialization,with,key,normalization
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1405024514;Writes a normalized key for the given record into the target byte array, starting at the specified position_an writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,an,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1405090423;Writes a normalized key for the given record into the target byte array, starting at the specified position_an writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,an,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1411372797;Writes a normalized key for the given record into the target byte array, starting at the specified position_an writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,an,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1411473593;Writes a normalized key for the given record into the target byte array, starting at the specified position_an writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,an,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1412166614;Writes a normalized key for the given record into the target byte array, starting at the specified position_an writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,an,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1412761141;Writes a normalized key for the given record into the target byte array, starting at the specified position_an writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,an,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1416309577;Writes a normalized key for the given record into the target byte array, starting at the specified position_an writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,an,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1443779522;Writes a normalized key for the given record into the target byte array, starting at the specified position_an writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,an,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1445427423;Writes a normalized key for the given record into the target byte array, starting at the specified position_an writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,an,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1446112342;Writes a normalized key for the given record into the target byte array, starting at the specified position_an writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,an,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1455479358;Writes a normalized key for the given record into the target byte array, starting at the specified position_an writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,an,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1482509593;Writes a normalized key for the given record into the target byte array, starting at the specified position_and writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, than it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,and,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,than,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
TypeComparator -> public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;1551194270;Writes a normalized key for the given record into the target byte array, starting at the specified position_and writing exactly the given number of bytes. Note that the comparison of the bytes is treating the bytes_as unsigned bytes: {@code int byteI = bytes[i] & 0xFF_}_<p>_If the meaningful part of the normalized key takes less than the given number of bytes, then it must be padded._Padding is typically required for variable length data types, such as strings. The padding uses a special_character, either {@code 0} or {@code 0xff}, depending on whether shorter values are sorted to the beginning or_the end._<p>_This method is similar to {@link org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int)}. In the case that_multiple fields of a record contribute to the normalized key, it is crucial that the fields align on the_byte field, i.e. that every field always takes up the exact same number of bytes.__@param record The record for which to create the normalized key._@param target The byte array into which to write the normalized key bytes._@param offset The offset in the byte array, where to start writing the normalized key bytes._@param numBytes The number of bytes to be written exactly.__@see org.apache.flink.types.NormalizableKey#copyNormalizedKey(MemorySegment, int, int);public abstract void putNormalizedKey(T record, MemorySegment target, int offset, int numBytes)_;writes,a,normalized,key,for,the,given,record,into,the,target,byte,array,starting,at,the,specified,position,and,writing,exactly,the,given,number,of,bytes,note,that,the,comparison,of,the,bytes,is,treating,the,bytes,as,unsigned,bytes,code,int,byte,i,bytes,i,0x,ff,p,if,the,meaningful,part,of,the,normalized,key,takes,less,than,the,given,number,of,bytes,then,it,must,be,padded,padding,is,typically,required,for,variable,length,data,types,such,as,strings,the,padding,uses,a,special,character,either,code,0,or,code,0xff,depending,on,whether,shorter,values,are,sorted,to,the,beginning,or,the,end,p,this,method,is,similar,to,link,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int,in,the,case,that,multiple,fields,of,a,record,contribute,to,the,normalized,key,it,is,crucial,that,the,fields,align,on,the,byte,field,i,e,that,every,field,always,takes,up,the,exact,same,number,of,bytes,param,record,the,record,for,which,to,create,the,normalized,key,param,target,the,byte,array,into,which,to,write,the,normalized,key,bytes,param,offset,the,offset,in,the,byte,array,where,to,start,writing,the,normalized,key,bytes,param,num,bytes,the,number,of,bytes,to,be,written,exactly,see,org,apache,flink,types,normalizable,key,copy,normalized,key,memory,segment,int,int;public,abstract,void,put,normalized,key,t,record,memory,segment,target,int,offset,int,num,bytes
