# id;timestamp;commentText;codeText;commentWords;codeWords
LocatableInputSplitAssigner -> LocatableInputSplitChooser -> public LocatableInputSplitWithCount getNextUnassignedMinLocalCountSplit(Set<LocatableInputSplitWithCount> unassignedSplits);1418395997;Retrieves a LocatableInputSplit with minimum local count._InputSplits which have already been assigned (i.e., which are not contained in the provided set) are filtered out._The returned input split is NOT removed from the provided set.__@param unassignedSplits Set of unassigned input splits._@return An input split with minimum local count or null if all splits have been assigned.;public LocatableInputSplitWithCount getNextUnassignedMinLocalCountSplit(Set<LocatableInputSplitWithCount> unassignedSplits) {__			if(splits.size() == 0) {_				return null__			}__			do {_				elementCycleCount--__				_				LocatableInputSplitWithCount split = splits.pollFirst()__				if (unassignedSplits.contains(split)) {_					int localCount = split.getLocalCount()__					_					if (localCount > minLocalCount) {_						_						splits.offerLast(split)__						_						if (nextMinLocalCount == -1 || split.getLocalCount() < nextMinLocalCount) {_							nextMinLocalCount = split.getLocalCount()__						}_						split = null__					}_				} else {_					_					split = null__				}_				if(elementCycleCount == 0) {_					_					_					minLocalCount = nextMinLocalCount__					nextMinLocalCount = -1__					elementCycleCount = splits.size()__				}_				if (split != null) {_					_					return split__				}_			} while (elementCycleCount > 0)___			_			return null__		};retrieves,a,locatable,input,split,with,minimum,local,count,input,splits,which,have,already,been,assigned,i,e,which,are,not,contained,in,the,provided,set,are,filtered,out,the,returned,input,split,is,not,removed,from,the,provided,set,param,unassigned,splits,set,of,unassigned,input,splits,return,an,input,split,with,minimum,local,count,or,null,if,all,splits,have,been,assigned;public,locatable,input,split,with,count,get,next,unassigned,min,local,count,split,set,locatable,input,split,with,count,unassigned,splits,if,splits,size,0,return,null,do,element,cycle,count,locatable,input,split,with,count,split,splits,poll,first,if,unassigned,splits,contains,split,int,local,count,split,get,local,count,if,local,count,min,local,count,splits,offer,last,split,if,next,min,local,count,1,split,get,local,count,next,min,local,count,next,min,local,count,split,get,local,count,split,null,else,split,null,if,element,cycle,count,0,min,local,count,next,min,local,count,next,min,local,count,1,element,cycle,count,splits,size,if,split,null,return,split,while,element,cycle,count,0,return,null
LocatableInputSplitAssigner -> LocatableInputSplitChooser -> public LocatableInputSplitWithCount getNextUnassignedMinLocalCountSplit(Set<LocatableInputSplitWithCount> unassignedSplits);1423131483;Retrieves a LocatableInputSplit with minimum local count._InputSplits which have already been assigned (i.e., which are not contained in the provided set) are filtered out._The returned input split is NOT removed from the provided set.__@param unassignedSplits Set of unassigned input splits._@return An input split with minimum local count or null if all splits have been assigned.;public LocatableInputSplitWithCount getNextUnassignedMinLocalCountSplit(Set<LocatableInputSplitWithCount> unassignedSplits) {__			if(splits.size() == 0) {_				return null__			}__			do {_				elementCycleCount--__				_				LocatableInputSplitWithCount split = splits.pollFirst()__				if (unassignedSplits.contains(split)) {_					int localCount = split.getLocalCount()__					_					if (localCount > minLocalCount) {_						_						splits.offerLast(split)__						_						if (nextMinLocalCount == -1 || split.getLocalCount() < nextMinLocalCount) {_							nextMinLocalCount = split.getLocalCount()__						}_						split = null__					}_				} else {_					_					split = null__				}_				if(elementCycleCount == 0) {_					_					_					minLocalCount = nextMinLocalCount__					nextMinLocalCount = -1__					elementCycleCount = splits.size()__				}_				if (split != null) {_					_					return split__				}_			} while (elementCycleCount > 0)___			_			return null__		};retrieves,a,locatable,input,split,with,minimum,local,count,input,splits,which,have,already,been,assigned,i,e,which,are,not,contained,in,the,provided,set,are,filtered,out,the,returned,input,split,is,not,removed,from,the,provided,set,param,unassigned,splits,set,of,unassigned,input,splits,return,an,input,split,with,minimum,local,count,or,null,if,all,splits,have,been,assigned;public,locatable,input,split,with,count,get,next,unassigned,min,local,count,split,set,locatable,input,split,with,count,unassigned,splits,if,splits,size,0,return,null,do,element,cycle,count,locatable,input,split,with,count,split,splits,poll,first,if,unassigned,splits,contains,split,int,local,count,split,get,local,count,if,local,count,min,local,count,splits,offer,last,split,if,next,min,local,count,1,split,get,local,count,next,min,local,count,next,min,local,count,split,get,local,count,split,null,else,split,null,if,element,cycle,count,0,min,local,count,next,min,local,count,next,min,local,count,1,element,cycle,count,splits,size,if,split,null,return,split,while,element,cycle,count,0,return,null
LocatableInputSplitAssigner -> LocatableInputSplitChooser -> public LocatableInputSplitWithCount getNextUnassignedMinLocalCountSplit(Set<LocatableInputSplitWithCount> unassignedSplits);1452178883;Retrieves a LocatableInputSplit with minimum local count._InputSplits which have already been assigned (i.e., which are not contained in the provided set) are filtered out._The returned input split is NOT removed from the provided set.__@param unassignedSplits Set of unassigned input splits._@return An input split with minimum local count or null if all splits have been assigned.;public LocatableInputSplitWithCount getNextUnassignedMinLocalCountSplit(Set<LocatableInputSplitWithCount> unassignedSplits) {__			if(splits.size() == 0) {_				return null__			}__			do {_				elementCycleCount--__				_				LocatableInputSplitWithCount split = splits.pollFirst()__				if (unassignedSplits.contains(split)) {_					int localCount = split.getLocalCount()__					_					if (localCount > minLocalCount) {_						_						splits.offerLast(split)__						_						if (nextMinLocalCount == -1 || split.getLocalCount() < nextMinLocalCount) {_							nextMinLocalCount = split.getLocalCount()__						}_						split = null__					}_				} else {_					_					split = null__				}_				if(elementCycleCount == 0) {_					_					_					minLocalCount = nextMinLocalCount__					nextMinLocalCount = -1__					elementCycleCount = splits.size()__				}_				if (split != null) {_					_					return split__				}_			} while (elementCycleCount > 0)___			_			return null__		};retrieves,a,locatable,input,split,with,minimum,local,count,input,splits,which,have,already,been,assigned,i,e,which,are,not,contained,in,the,provided,set,are,filtered,out,the,returned,input,split,is,not,removed,from,the,provided,set,param,unassigned,splits,set,of,unassigned,input,splits,return,an,input,split,with,minimum,local,count,or,null,if,all,splits,have,been,assigned;public,locatable,input,split,with,count,get,next,unassigned,min,local,count,split,set,locatable,input,split,with,count,unassigned,splits,if,splits,size,0,return,null,do,element,cycle,count,locatable,input,split,with,count,split,splits,poll,first,if,unassigned,splits,contains,split,int,local,count,split,get,local,count,if,local,count,min,local,count,splits,offer,last,split,if,next,min,local,count,1,split,get,local,count,next,min,local,count,next,min,local,count,split,get,local,count,split,null,else,split,null,if,element,cycle,count,0,min,local,count,next,min,local,count,next,min,local,count,1,element,cycle,count,splits,size,if,split,null,return,split,while,element,cycle,count,0,return,null
LocatableInputSplitAssigner -> LocatableInputSplitChooser -> public void addInputSplit(LocatableInputSplitWithCount split);1418395997;Adds a single input split__@param split The input split to add;public void addInputSplit(LocatableInputSplitWithCount split) {_			int localCount = split.getLocalCount()___			if (minLocalCount == -1) {_				_				this.minLocalCount = localCount__				this.elementCycleCount = 1__				this.splits.offerFirst(split)__			} else if (localCount < minLocalCount) {_				_				this.nextMinLocalCount = this.minLocalCount__				this.minLocalCount = localCount__				_				this.elementCycleCount = 1__				splits.offerFirst(split)__			} else if (localCount == minLocalCount ) {_				this.elementCycleCount++__				this.splits.offerFirst(split)__			} else {_				if (localCount < nextMinLocalCount) {_					nextMinLocalCount = localCount__				}_				splits.offerLast(split)__			}_		};adds,a,single,input,split,param,split,the,input,split,to,add;public,void,add,input,split,locatable,input,split,with,count,split,int,local,count,split,get,local,count,if,min,local,count,1,this,min,local,count,local,count,this,element,cycle,count,1,this,splits,offer,first,split,else,if,local,count,min,local,count,this,next,min,local,count,this,min,local,count,this,min,local,count,local,count,this,element,cycle,count,1,splits,offer,first,split,else,if,local,count,min,local,count,this,element,cycle,count,this,splits,offer,first,split,else,if,local,count,next,min,local,count,next,min,local,count,local,count,splits,offer,last,split
LocatableInputSplitAssigner -> LocatableInputSplitChooser -> public void addInputSplit(LocatableInputSplitWithCount split);1423131483;Adds a single input split__@param split The input split to add;public void addInputSplit(LocatableInputSplitWithCount split) {_			int localCount = split.getLocalCount()___			if (minLocalCount == -1) {_				_				this.minLocalCount = localCount__				this.elementCycleCount = 1__				this.splits.offerFirst(split)__			} else if (localCount < minLocalCount) {_				_				this.nextMinLocalCount = this.minLocalCount__				this.minLocalCount = localCount__				_				this.elementCycleCount = 1__				splits.offerFirst(split)__			} else if (localCount == minLocalCount ) {_				this.elementCycleCount++__				this.splits.offerFirst(split)__			} else {_				if (localCount < nextMinLocalCount) {_					nextMinLocalCount = localCount__				}_				splits.offerLast(split)__			}_		};adds,a,single,input,split,param,split,the,input,split,to,add;public,void,add,input,split,locatable,input,split,with,count,split,int,local,count,split,get,local,count,if,min,local,count,1,this,min,local,count,local,count,this,element,cycle,count,1,this,splits,offer,first,split,else,if,local,count,min,local,count,this,next,min,local,count,this,min,local,count,this,min,local,count,local,count,this,element,cycle,count,1,splits,offer,first,split,else,if,local,count,min,local,count,this,element,cycle,count,this,splits,offer,first,split,else,if,local,count,next,min,local,count,next,min,local,count,local,count,splits,offer,last,split
LocatableInputSplitAssigner -> LocatableInputSplitChooser -> public void addInputSplit(LocatableInputSplitWithCount split);1452178883;Adds a single input split__@param split The input split to add;public void addInputSplit(LocatableInputSplitWithCount split) {_			int localCount = split.getLocalCount()___			if (minLocalCount == -1) {_				_				this.minLocalCount = localCount__				this.elementCycleCount = 1__				this.splits.offerFirst(split)__			} else if (localCount < minLocalCount) {_				_				this.nextMinLocalCount = this.minLocalCount__				this.minLocalCount = localCount__				_				this.elementCycleCount = 1__				splits.offerFirst(split)__			} else if (localCount == minLocalCount ) {_				this.elementCycleCount++__				this.splits.offerFirst(split)__			} else {_				if (localCount < nextMinLocalCount) {_					nextMinLocalCount = localCount__				}_				splits.offerLast(split)__			}_		};adds,a,single,input,split,param,split,the,input,split,to,add;public,void,add,input,split,locatable,input,split,with,count,split,int,local,count,split,get,local,count,if,min,local,count,1,this,min,local,count,local,count,this,element,cycle,count,1,this,splits,offer,first,split,else,if,local,count,min,local,count,this,next,min,local,count,this,min,local,count,this,min,local,count,local,count,this,element,cycle,count,1,splits,offer,first,split,else,if,local,count,min,local,count,this,element,cycle,count,this,splits,offer,first,split,else,if,local,count,next,min,local,count,next,min,local,count,local,count,splits,offer,last,split
