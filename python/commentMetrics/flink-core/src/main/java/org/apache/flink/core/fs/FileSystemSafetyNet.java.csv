# id;timestamp;commentText;codeText;commentWords;codeWords
FileSystemSafetyNet -> @Internal 	public static void closeSafetyNetAndGuardedResourcesForThread();1487548884;Closes the safety net for a thread. This closes all remaining unclosed streams that were opened_by safety-net-guarded file systems. After this method was called, no streams can be opened any more_from any FileSystem instance that was obtained while the thread was guarded by the safety net.__<p>This method should be called at the very end of a guarded thread.;@Internal_	public static void closeSafetyNetAndGuardedResourcesForThread() {_		SafetyNetCloseableRegistry registry = REGISTRIES.get()__		if (null != registry) {_			LOG.info("Ensuring all FileSystem streams are closed for {}", Thread.currentThread().getName())__			REGISTRIES.remove()__			IOUtils.closeQuietly(registry)__		}_	};closes,the,safety,net,for,a,thread,this,closes,all,remaining,unclosed,streams,that,were,opened,by,safety,net,guarded,file,systems,after,this,method,was,called,no,streams,can,be,opened,any,more,from,any,file,system,instance,that,was,obtained,while,the,thread,was,guarded,by,the,safety,net,p,this,method,should,be,called,at,the,very,end,of,a,guarded,thread;internal,public,static,void,close,safety,net,and,guarded,resources,for,thread,safety,net,closeable,registry,registry,registries,get,if,null,registry,log,info,ensuring,all,file,system,streams,are,closed,for,thread,current,thread,get,name,registries,remove,ioutils,close,quietly,registry
FileSystemSafetyNet -> @Internal 	public static void closeSafetyNetAndGuardedResourcesForThread();1487934918;Closes the safety net for a thread. This closes all remaining unclosed streams that were opened_by safety-net-guarded file systems. After this method was called, no streams can be opened any more_from any FileSystem instance that was obtained while the thread was guarded by the safety net.__<p>This method should be called at the very end of a guarded thread.;@Internal_	public static void closeSafetyNetAndGuardedResourcesForThread() {_		SafetyNetCloseableRegistry registry = REGISTRIES.get()__		if (null != registry) {_			REGISTRIES.remove()__			IOUtils.closeQuietly(registry)__		}_	};closes,the,safety,net,for,a,thread,this,closes,all,remaining,unclosed,streams,that,were,opened,by,safety,net,guarded,file,systems,after,this,method,was,called,no,streams,can,be,opened,any,more,from,any,file,system,instance,that,was,obtained,while,the,thread,was,guarded,by,the,safety,net,p,this,method,should,be,called,at,the,very,end,of,a,guarded,thread;internal,public,static,void,close,safety,net,and,guarded,resources,for,thread,safety,net,closeable,registry,registry,registries,get,if,null,registry,registries,remove,ioutils,close,quietly,registry
FileSystemSafetyNet -> @Internal 	public static void closeSafetyNetAndGuardedResourcesForThread();1495627333;Closes the safety net for a thread. This closes all remaining unclosed streams that were opened_by safety-net-guarded file systems. After this method was called, no streams can be opened any more_from any FileSystem instance that was obtained while the thread was guarded by the safety net.__<p>This method should be called at the very end of a guarded thread.;@Internal_	public static void closeSafetyNetAndGuardedResourcesForThread() {_		SafetyNetCloseableRegistry registry = REGISTRIES.get()__		if (null != registry) {_			REGISTRIES.remove()__			IOUtils.closeQuietly(registry)__		}_	};closes,the,safety,net,for,a,thread,this,closes,all,remaining,unclosed,streams,that,were,opened,by,safety,net,guarded,file,systems,after,this,method,was,called,no,streams,can,be,opened,any,more,from,any,file,system,instance,that,was,obtained,while,the,thread,was,guarded,by,the,safety,net,p,this,method,should,be,called,at,the,very,end,of,a,guarded,thread;internal,public,static,void,close,safety,net,and,guarded,resources,for,thread,safety,net,closeable,registry,registry,registries,get,if,null,registry,registries,remove,ioutils,close,quietly,registry
FileSystemSafetyNet -> @Internal 	public static void closeSafetyNetAndGuardedResourcesForThread();1497346544;Closes the safety net for a thread. This closes all remaining unclosed streams that were opened_by safety-net-guarded file systems. After this method was called, no streams can be opened any more_from any FileSystem instance that was obtained while the thread was guarded by the safety net.__<p>This method should be called at the very end of a guarded thread.;@Internal_	public static void closeSafetyNetAndGuardedResourcesForThread() {_		SafetyNetCloseableRegistry registry = REGISTRIES.get()__		if (null != registry) {_			REGISTRIES.remove()__			IOUtils.closeQuietly(registry)__		}_	};closes,the,safety,net,for,a,thread,this,closes,all,remaining,unclosed,streams,that,were,opened,by,safety,net,guarded,file,systems,after,this,method,was,called,no,streams,can,be,opened,any,more,from,any,file,system,instance,that,was,obtained,while,the,thread,was,guarded,by,the,safety,net,p,this,method,should,be,called,at,the,very,end,of,a,guarded,thread;internal,public,static,void,close,safety,net,and,guarded,resources,for,thread,safety,net,closeable,registry,registry,registries,get,if,null,registry,registries,remove,ioutils,close,quietly,registry
FileSystemSafetyNet -> @Internal 	public static void closeSafetyNetAndGuardedResourcesForThread();1512410190;Closes the safety net for a thread. This closes all remaining unclosed streams that were opened_by safety-net-guarded file systems. After this method was called, no streams can be opened any more_from any FileSystem instance that was obtained while the thread was guarded by the safety net.__<p>This method should be called at the very end of a guarded thread.;@Internal_	public static void closeSafetyNetAndGuardedResourcesForThread() {_		SafetyNetCloseableRegistry registry = REGISTRIES.get()__		if (null != registry) {_			REGISTRIES.remove()__			IOUtils.closeQuietly(registry)__		}_	};closes,the,safety,net,for,a,thread,this,closes,all,remaining,unclosed,streams,that,were,opened,by,safety,net,guarded,file,systems,after,this,method,was,called,no,streams,can,be,opened,any,more,from,any,file,system,instance,that,was,obtained,while,the,thread,was,guarded,by,the,safety,net,p,this,method,should,be,called,at,the,very,end,of,a,guarded,thread;internal,public,static,void,close,safety,net,and,guarded,resources,for,thread,safety,net,closeable,registry,registry,registries,get,if,null,registry,registries,remove,ioutils,close,quietly,registry
FileSystemSafetyNet -> @Deprecated 	@Internal 	public static SafetyNetCloseableRegistry getSafetyNetCloseableRegistryForThread();1495627333;Returns the active safety-net registry for the current thread._@deprecated This method should be removed after FLINK-6684 is implemented.;@Deprecated_	@Internal_	public static SafetyNetCloseableRegistry getSafetyNetCloseableRegistryForThread() {_		return REGISTRIES.get()__	};returns,the,active,safety,net,registry,for,the,current,thread,deprecated,this,method,should,be,removed,after,flink,6684,is,implemented;deprecated,internal,public,static,safety,net,closeable,registry,get,safety,net,closeable,registry,for,thread,return,registries,get
FileSystemSafetyNet -> @Deprecated 	@Internal 	public static SafetyNetCloseableRegistry getSafetyNetCloseableRegistryForThread();1497346544;Returns the active safety-net registry for the current thread._@deprecated This method should be removed after FLINK-6684 is implemented.;@Deprecated_	@Internal_	public static SafetyNetCloseableRegistry getSafetyNetCloseableRegistryForThread() {_		return REGISTRIES.get()__	};returns,the,active,safety,net,registry,for,the,current,thread,deprecated,this,method,should,be,removed,after,flink,6684,is,implemented;deprecated,internal,public,static,safety,net,closeable,registry,get,safety,net,closeable,registry,for,thread,return,registries,get
FileSystemSafetyNet -> @Deprecated 	@Internal 	public static SafetyNetCloseableRegistry getSafetyNetCloseableRegistryForThread();1512410190;Returns the active safety-net registry for the current thread._@deprecated This method should be removed after FLINK-6684 is implemented.;@Deprecated_	@Internal_	public static SafetyNetCloseableRegistry getSafetyNetCloseableRegistryForThread() {_		return REGISTRIES.get()__	};returns,the,active,safety,net,registry,for,the,current,thread,deprecated,this,method,should,be,removed,after,flink,6684,is,implemented;deprecated,internal,public,static,safety,net,closeable,registry,get,safety,net,closeable,registry,for,thread,return,registries,get
FileSystemSafetyNet -> @Internal 	public static void setSafetyNetCloseableRegistryForThread(SafetyNetCloseableRegistry registry);1497346544;Sets the active safety-net registry for the current thread.;@Internal_	public static void setSafetyNetCloseableRegistryForThread(SafetyNetCloseableRegistry registry) {_		REGISTRIES.set(registry)__	};sets,the,active,safety,net,registry,for,the,current,thread;internal,public,static,void,set,safety,net,closeable,registry,for,thread,safety,net,closeable,registry,registry,registries,set,registry
FileSystemSafetyNet -> @Internal 	public static void setSafetyNetCloseableRegistryForThread(SafetyNetCloseableRegistry registry);1512410190;Sets the active safety-net registry for the current thread.;@Internal_	public static void setSafetyNetCloseableRegistryForThread(SafetyNetCloseableRegistry registry) {_		REGISTRIES.set(registry)__	};sets,the,active,safety,net,registry,for,the,current,thread;internal,public,static,void,set,safety,net,closeable,registry,for,thread,safety,net,closeable,registry,registry,registries,set,registry
FileSystemSafetyNet -> @Internal 	public static void initializeSafetyNetForThread();1487548884;Activates the safety net for a thread. {@link FileSystem} instances obtained by the thread_that called this method will be guarded, meaning that their created streams are tracked and can_be closed via the safety net closing hook.__<p>This method should be called at the beginning of a thread that should be guarded.__@throws IllegalStateException Thrown, if a safety net was already registered for the thread.;@Internal_	public static void initializeSafetyNetForThread() {_		SafetyNetCloseableRegistry oldRegistry = REGISTRIES.get()___		checkState(null == oldRegistry, "Found an existing FileSystem safety net for this thread: %s " +_				"This may indicate an accidental repeated initialization, or a leak of the" +_				"(Inheritable)ThreadLocal through a ThreadPool.", oldRegistry)___		SafetyNetCloseableRegistry newRegistry = new SafetyNetCloseableRegistry()__		REGISTRIES.set(newRegistry)__		LOG.info("Created new CloseableRegistry {} for {}", newRegistry, Thread.currentThread().getName())__	};activates,the,safety,net,for,a,thread,link,file,system,instances,obtained,by,the,thread,that,called,this,method,will,be,guarded,meaning,that,their,created,streams,are,tracked,and,can,be,closed,via,the,safety,net,closing,hook,p,this,method,should,be,called,at,the,beginning,of,a,thread,that,should,be,guarded,throws,illegal,state,exception,thrown,if,a,safety,net,was,already,registered,for,the,thread;internal,public,static,void,initialize,safety,net,for,thread,safety,net,closeable,registry,old,registry,registries,get,check,state,null,old,registry,found,an,existing,file,system,safety,net,for,this,thread,s,this,may,indicate,an,accidental,repeated,initialization,or,a,leak,of,the,inheritable,thread,local,through,a,thread,pool,old,registry,safety,net,closeable,registry,new,registry,new,safety,net,closeable,registry,registries,set,new,registry,log,info,created,new,closeable,registry,for,new,registry,thread,current,thread,get,name
FileSystemSafetyNet -> @Internal 	public static void initializeSafetyNetForThread();1487934918;Activates the safety net for a thread. {@link FileSystem} instances obtained by the thread_that called this method will be guarded, meaning that their created streams are tracked and can_be closed via the safety net closing hook.__<p>This method should be called at the beginning of a thread that should be guarded.__@throws IllegalStateException Thrown, if a safety net was already registered for the thread.;@Internal_	public static void initializeSafetyNetForThread() {_		SafetyNetCloseableRegistry oldRegistry = REGISTRIES.get()___		checkState(null == oldRegistry, "Found an existing FileSystem safety net for this thread: %s " +_				"This may indicate an accidental repeated initialization, or a leak of the" +_				"(Inheritable)ThreadLocal through a ThreadPool.", oldRegistry)___		SafetyNetCloseableRegistry newRegistry = new SafetyNetCloseableRegistry()__		REGISTRIES.set(newRegistry)__	};activates,the,safety,net,for,a,thread,link,file,system,instances,obtained,by,the,thread,that,called,this,method,will,be,guarded,meaning,that,their,created,streams,are,tracked,and,can,be,closed,via,the,safety,net,closing,hook,p,this,method,should,be,called,at,the,beginning,of,a,thread,that,should,be,guarded,throws,illegal,state,exception,thrown,if,a,safety,net,was,already,registered,for,the,thread;internal,public,static,void,initialize,safety,net,for,thread,safety,net,closeable,registry,old,registry,registries,get,check,state,null,old,registry,found,an,existing,file,system,safety,net,for,this,thread,s,this,may,indicate,an,accidental,repeated,initialization,or,a,leak,of,the,inheritable,thread,local,through,a,thread,pool,old,registry,safety,net,closeable,registry,new,registry,new,safety,net,closeable,registry,registries,set,new,registry
FileSystemSafetyNet -> @Internal 	public static void initializeSafetyNetForThread();1495627333;Activates the safety net for a thread. {@link FileSystem} instances obtained by the thread_that called this method will be guarded, meaning that their created streams are tracked and can_be closed via the safety net closing hook.__<p>This method should be called at the beginning of a thread that should be guarded.__@throws IllegalStateException Thrown, if a safety net was already registered for the thread.;@Internal_	public static void initializeSafetyNetForThread() {_		SafetyNetCloseableRegistry oldRegistry = REGISTRIES.get()___		checkState(null == oldRegistry, "Found an existing FileSystem safety net for this thread: %s " +_				"This may indicate an accidental repeated initialization, or a leak of the" +_				"(Inheritable)ThreadLocal through a ThreadPool.", oldRegistry)___		SafetyNetCloseableRegistry newRegistry = new SafetyNetCloseableRegistry()__		REGISTRIES.set(newRegistry)__	};activates,the,safety,net,for,a,thread,link,file,system,instances,obtained,by,the,thread,that,called,this,method,will,be,guarded,meaning,that,their,created,streams,are,tracked,and,can,be,closed,via,the,safety,net,closing,hook,p,this,method,should,be,called,at,the,beginning,of,a,thread,that,should,be,guarded,throws,illegal,state,exception,thrown,if,a,safety,net,was,already,registered,for,the,thread;internal,public,static,void,initialize,safety,net,for,thread,safety,net,closeable,registry,old,registry,registries,get,check,state,null,old,registry,found,an,existing,file,system,safety,net,for,this,thread,s,this,may,indicate,an,accidental,repeated,initialization,or,a,leak,of,the,inheritable,thread,local,through,a,thread,pool,old,registry,safety,net,closeable,registry,new,registry,new,safety,net,closeable,registry,registries,set,new,registry
FileSystemSafetyNet -> @Internal 	public static void initializeSafetyNetForThread();1497346544;Activates the safety net for a thread. {@link FileSystem} instances obtained by the thread_that called this method will be guarded, meaning that their created streams are tracked and can_be closed via the safety net closing hook.__<p>This method should be called at the beginning of a thread that should be guarded.__@throws IllegalStateException Thrown, if a safety net was already registered for the thread.;@Internal_	public static void initializeSafetyNetForThread() {_		SafetyNetCloseableRegistry oldRegistry = REGISTRIES.get()___		checkState(null == oldRegistry, "Found an existing FileSystem safety net for this thread: %s " +_				"This may indicate an accidental repeated initialization, or a leak of the" +_				"(Inheritable)ThreadLocal through a ThreadPool.", oldRegistry)___		SafetyNetCloseableRegistry newRegistry = new SafetyNetCloseableRegistry()__		REGISTRIES.set(newRegistry)__	};activates,the,safety,net,for,a,thread,link,file,system,instances,obtained,by,the,thread,that,called,this,method,will,be,guarded,meaning,that,their,created,streams,are,tracked,and,can,be,closed,via,the,safety,net,closing,hook,p,this,method,should,be,called,at,the,beginning,of,a,thread,that,should,be,guarded,throws,illegal,state,exception,thrown,if,a,safety,net,was,already,registered,for,the,thread;internal,public,static,void,initialize,safety,net,for,thread,safety,net,closeable,registry,old,registry,registries,get,check,state,null,old,registry,found,an,existing,file,system,safety,net,for,this,thread,s,this,may,indicate,an,accidental,repeated,initialization,or,a,leak,of,the,inheritable,thread,local,through,a,thread,pool,old,registry,safety,net,closeable,registry,new,registry,new,safety,net,closeable,registry,registries,set,new,registry
FileSystemSafetyNet -> @Internal 	public static void initializeSafetyNetForThread();1512410190;Activates the safety net for a thread. {@link FileSystem} instances obtained by the thread_that called this method will be guarded, meaning that their created streams are tracked and can_be closed via the safety net closing hook.__<p>This method should be called at the beginning of a thread that should be guarded.__@throws IllegalStateException Thrown, if a safety net was already registered for the thread.;@Internal_	public static void initializeSafetyNetForThread() {_		SafetyNetCloseableRegistry oldRegistry = REGISTRIES.get()___		checkState(null == oldRegistry, "Found an existing FileSystem safety net for this thread: %s " +_				"This may indicate an accidental repeated initialization, or a leak of the" +_				"(Inheritable)ThreadLocal through a ThreadPool.", oldRegistry)___		SafetyNetCloseableRegistry newRegistry = new SafetyNetCloseableRegistry()__		REGISTRIES.set(newRegistry)__	};activates,the,safety,net,for,a,thread,link,file,system,instances,obtained,by,the,thread,that,called,this,method,will,be,guarded,meaning,that,their,created,streams,are,tracked,and,can,be,closed,via,the,safety,net,closing,hook,p,this,method,should,be,called,at,the,beginning,of,a,thread,that,should,be,guarded,throws,illegal,state,exception,thrown,if,a,safety,net,was,already,registered,for,the,thread;internal,public,static,void,initialize,safety,net,for,thread,safety,net,closeable,registry,old,registry,registries,get,check,state,null,old,registry,found,an,existing,file,system,safety,net,for,this,thread,s,this,may,indicate,an,accidental,repeated,initialization,or,a,leak,of,the,inheritable,thread,local,through,a,thread,pool,old,registry,safety,net,closeable,registry,new,registry,new,safety,net,closeable,registry,registries,set,new,registry
