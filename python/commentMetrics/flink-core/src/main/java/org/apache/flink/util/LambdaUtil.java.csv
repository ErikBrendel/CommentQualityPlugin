# id;timestamp;commentText;codeText;commentWords;codeWords
LambdaUtil -> public static <T> void applyToAllWhileSuppressingExceptions( 		Iterable<T> inputs, 		ThrowingConsumer<T> throwingConsumer) throws Exception;1503598628;This method supplies all elements from the input to the consumer. Exceptions that happen on elements are_suppressed until all elements are processed. If exceptions happened for one or more of the inputs, they are_reported in a combining suppressed exception.__@param inputs iterator for all inputs to the throwingConsumer._@param throwingConsumer this consumer will be called for all elements delivered by the input iterator._@param <T> the type of input._@throws Exception collected exceptions that happened during the invocation of the consumer on the input elements.;public static <T> void applyToAllWhileSuppressingExceptions(_		Iterable<T> inputs,_		ThrowingConsumer<T> throwingConsumer) throws Exception {__		if (inputs != null && throwingConsumer != null) {_			Exception exception = null___			for (T input : inputs) {__				if (input != null) {_					try {_						throwingConsumer.accept(input)__					} catch (Exception ex) {_						exception = ExceptionUtils.firstOrSuppressed(ex, exception)__					}_				}_			}__			if (exception != null) {_				throw exception__			}_		}_	};this,method,supplies,all,elements,from,the,input,to,the,consumer,exceptions,that,happen,on,elements,are,suppressed,until,all,elements,are,processed,if,exceptions,happened,for,one,or,more,of,the,inputs,they,are,reported,in,a,combining,suppressed,exception,param,inputs,iterator,for,all,inputs,to,the,throwing,consumer,param,throwing,consumer,this,consumer,will,be,called,for,all,elements,delivered,by,the,input,iterator,param,t,the,type,of,input,throws,exception,collected,exceptions,that,happened,during,the,invocation,of,the,consumer,on,the,input,elements;public,static,t,void,apply,to,all,while,suppressing,exceptions,iterable,t,inputs,throwing,consumer,t,throwing,consumer,throws,exception,if,inputs,null,throwing,consumer,null,exception,exception,null,for,t,input,inputs,if,input,null,try,throwing,consumer,accept,input,catch,exception,ex,exception,exception,utils,first,or,suppressed,ex,exception,if,exception,null,throw,exception
LambdaUtil -> public static <T> void applyToAllWhileSuppressingExceptions( 		Iterable<T> inputs, 		ThrowingConsumer<T> throwingConsumer) throws Exception;1516295284;This method supplies all elements from the input to the consumer. Exceptions that happen on elements are_suppressed until all elements are processed. If exceptions happened for one or more of the inputs, they are_reported in a combining suppressed exception.__@param inputs iterator for all inputs to the throwingConsumer._@param throwingConsumer this consumer will be called for all elements delivered by the input iterator._@param <T> the type of input._@throws Exception collected exceptions that happened during the invocation of the consumer on the input elements.;public static <T> void applyToAllWhileSuppressingExceptions(_		Iterable<T> inputs,_		ThrowingConsumer<T> throwingConsumer) throws Exception {__		if (inputs != null && throwingConsumer != null) {_			Exception exception = null___			for (T input : inputs) {__				if (input != null) {_					try {_						throwingConsumer.accept(input)__					} catch (Exception ex) {_						exception = ExceptionUtils.firstOrSuppressed(ex, exception)__					}_				}_			}__			if (exception != null) {_				throw exception__			}_		}_	};this,method,supplies,all,elements,from,the,input,to,the,consumer,exceptions,that,happen,on,elements,are,suppressed,until,all,elements,are,processed,if,exceptions,happened,for,one,or,more,of,the,inputs,they,are,reported,in,a,combining,suppressed,exception,param,inputs,iterator,for,all,inputs,to,the,throwing,consumer,param,throwing,consumer,this,consumer,will,be,called,for,all,elements,delivered,by,the,input,iterator,param,t,the,type,of,input,throws,exception,collected,exceptions,that,happened,during,the,invocation,of,the,consumer,on,the,input,elements;public,static,t,void,apply,to,all,while,suppressing,exceptions,iterable,t,inputs,throwing,consumer,t,throwing,consumer,throws,exception,if,inputs,null,throwing,consumer,null,exception,exception,null,for,t,input,inputs,if,input,null,try,throwing,consumer,accept,input,catch,exception,ex,exception,exception,utils,first,or,suppressed,ex,exception,if,exception,null,throw,exception
LambdaUtil -> public static <T> void applyToAllWhileSuppressingExceptions( 		Iterable<T> inputs, 		ThrowingConsumer<T, ? extends Exception> throwingConsumer) throws Exception;1517324056;This method supplies all elements from the input to the consumer. Exceptions that happen on elements are_suppressed until all elements are processed. If exceptions happened for one or more of the inputs, they are_reported in a combining suppressed exception.__@param inputs iterator for all inputs to the throwingConsumer._@param throwingConsumer this consumer will be called for all elements delivered by the input iterator._@param <T> the type of input._@throws Exception collected exceptions that happened during the invocation of the consumer on the input elements.;public static <T> void applyToAllWhileSuppressingExceptions(_		Iterable<T> inputs,_		ThrowingConsumer<T, ? extends Exception> throwingConsumer) throws Exception {__		if (inputs != null && throwingConsumer != null) {_			Exception exception = null___			for (T input : inputs) {__				if (input != null) {_					try {_						throwingConsumer.accept(input)__					} catch (Exception ex) {_						exception = ExceptionUtils.firstOrSuppressed(ex, exception)__					}_				}_			}__			if (exception != null) {_				throw exception__			}_		}_	};this,method,supplies,all,elements,from,the,input,to,the,consumer,exceptions,that,happen,on,elements,are,suppressed,until,all,elements,are,processed,if,exceptions,happened,for,one,or,more,of,the,inputs,they,are,reported,in,a,combining,suppressed,exception,param,inputs,iterator,for,all,inputs,to,the,throwing,consumer,param,throwing,consumer,this,consumer,will,be,called,for,all,elements,delivered,by,the,input,iterator,param,t,the,type,of,input,throws,exception,collected,exceptions,that,happened,during,the,invocation,of,the,consumer,on,the,input,elements;public,static,t,void,apply,to,all,while,suppressing,exceptions,iterable,t,inputs,throwing,consumer,t,extends,exception,throwing,consumer,throws,exception,if,inputs,null,throwing,consumer,null,exception,exception,null,for,t,input,inputs,if,input,null,try,throwing,consumer,accept,input,catch,exception,ex,exception,exception,utils,first,or,suppressed,ex,exception,if,exception,null,throw,exception
LambdaUtil -> public static <T> void applyToAllWhileSuppressingExceptions( 		Iterable<T> inputs, 		ThrowingConsumer<T, ? extends Exception> throwingConsumer) throws Exception;1525852381;This method supplies all elements from the input to the consumer. Exceptions that happen on elements are_suppressed until all elements are processed. If exceptions happened for one or more of the inputs, they are_reported in a combining suppressed exception.__@param inputs iterator for all inputs to the throwingConsumer._@param throwingConsumer this consumer will be called for all elements delivered by the input iterator._@param <T> the type of input._@throws Exception collected exceptions that happened during the invocation of the consumer on the input elements.;public static <T> void applyToAllWhileSuppressingExceptions(_		Iterable<T> inputs,_		ThrowingConsumer<T, ? extends Exception> throwingConsumer) throws Exception {__		if (inputs != null && throwingConsumer != null) {_			Exception exception = null___			for (T input : inputs) {__				if (input != null) {_					try {_						throwingConsumer.accept(input)__					} catch (Exception ex) {_						exception = ExceptionUtils.firstOrSuppressed(ex, exception)__					}_				}_			}__			if (exception != null) {_				throw exception__			}_		}_	};this,method,supplies,all,elements,from,the,input,to,the,consumer,exceptions,that,happen,on,elements,are,suppressed,until,all,elements,are,processed,if,exceptions,happened,for,one,or,more,of,the,inputs,they,are,reported,in,a,combining,suppressed,exception,param,inputs,iterator,for,all,inputs,to,the,throwing,consumer,param,throwing,consumer,this,consumer,will,be,called,for,all,elements,delivered,by,the,input,iterator,param,t,the,type,of,input,throws,exception,collected,exceptions,that,happened,during,the,invocation,of,the,consumer,on,the,input,elements;public,static,t,void,apply,to,all,while,suppressing,exceptions,iterable,t,inputs,throwing,consumer,t,extends,exception,throwing,consumer,throws,exception,if,inputs,null,throwing,consumer,null,exception,exception,null,for,t,input,inputs,if,input,null,try,throwing,consumer,accept,input,catch,exception,ex,exception,exception,utils,first,or,suppressed,ex,exception,if,exception,null,throw,exception
