# id;timestamp;commentText;codeText;commentWords;codeWords
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> compatibleWithReconfiguredSerializer(TypeSerializer<T> reconfiguredSerializer);1546867949;Returns a result that indicates a reconfigured version of the new serializer is compatible, and should be_used instead of the original new serializer.__@param reconfiguredSerializer the reconfigured version of the new serializer._@return a result that indicates a reconfigured version of the new serializer is compatible, and should be_used instead of the original new serializer.;public static <T> TypeSerializerSchemaCompatibility<T> compatibleWithReconfiguredSerializer(TypeSerializer<T> reconfiguredSerializer) {_		return new TypeSerializerSchemaCompatibility<>(_			Type.COMPATIBLE_WITH_RECONFIGURED_SERIALIZER,_			Preconditions.checkNotNull(reconfiguredSerializer))__	};returns,a,result,that,indicates,a,reconfigured,version,of,the,new,serializer,is,compatible,and,should,be,used,instead,of,the,original,new,serializer,param,reconfigured,serializer,the,reconfigured,version,of,the,new,serializer,return,a,result,that,indicates,a,reconfigured,version,of,the,new,serializer,is,compatible,and,should,be,used,instead,of,the,original,new,serializer;public,static,t,type,serializer,schema,compatibility,t,compatible,with,reconfigured,serializer,type,serializer,t,reconfigured,serializer,return,new,type,serializer,schema,compatibility,type,preconditions,check,not,null,reconfigured,serializer
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> compatibleWithReconfiguredSerializer(TypeSerializer<T> reconfiguredSerializer);1550738934;Returns a result that indicates a reconfigured version of the new serializer is compatible, and should be_used instead of the original new serializer.__@param reconfiguredSerializer the reconfigured version of the new serializer._@return a result that indicates a reconfigured version of the new serializer is compatible, and should be_used instead of the original new serializer.;public static <T> TypeSerializerSchemaCompatibility<T> compatibleWithReconfiguredSerializer(TypeSerializer<T> reconfiguredSerializer) {_		return new TypeSerializerSchemaCompatibility<>(_			Type.COMPATIBLE_WITH_RECONFIGURED_SERIALIZER,_			Preconditions.checkNotNull(reconfiguredSerializer))__	};returns,a,result,that,indicates,a,reconfigured,version,of,the,new,serializer,is,compatible,and,should,be,used,instead,of,the,original,new,serializer,param,reconfigured,serializer,the,reconfigured,version,of,the,new,serializer,return,a,result,that,indicates,a,reconfigured,version,of,the,new,serializer,is,compatible,and,should,be,used,instead,of,the,original,new,serializer;public,static,t,type,serializer,schema,compatibility,t,compatible,with,reconfigured,serializer,type,serializer,t,reconfigured,serializer,return,new,type,serializer,schema,compatibility,type,preconditions,check,not,null,reconfigured,serializer
TypeSerializerSchemaCompatibility -> public boolean isCompatibleAfterMigration();1539149033;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.;public boolean isCompatibleAfterMigration() {_		return resultType == Type.COMPATIBLE_AFTER_MIGRATION__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,after,migration,return,result,type,type
TypeSerializerSchemaCompatibility -> public boolean isCompatibleAfterMigration();1539149114;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.;public boolean isCompatibleAfterMigration() {_		return resultType == Type.COMPATIBLE_AFTER_MIGRATION__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,after,migration,return,result,type,type
TypeSerializerSchemaCompatibility -> public boolean isCompatibleAfterMigration();1540907751;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.;public boolean isCompatibleAfterMigration() {_		return resultType == Type.COMPATIBLE_AFTER_MIGRATION__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,after,migration,return,result,type,type
TypeSerializerSchemaCompatibility -> public boolean isCompatibleAfterMigration();1546867949;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.;public boolean isCompatibleAfterMigration() {_		return resultType == Type.COMPATIBLE_AFTER_MIGRATION__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,after,migration,return,result,type,type
TypeSerializerSchemaCompatibility -> public boolean isCompatibleAfterMigration();1550738934;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AFTER_MIGRATION}.;public boolean isCompatibleAfterMigration() {_		return resultType == Type.COMPATIBLE_AFTER_MIGRATION__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,after,migration,return,result,type,type
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> compatibleAfterMigration();1539149033;Returns a result that indicates that the new serializer can be used after migrating the written bytes, i.e._reading it with the old serializer and then writing it again with the new serializer.__@return a result that indicates that the new serializer can be used after migrating the written bytes.;public static <T> TypeSerializerSchemaCompatibility<T> compatibleAfterMigration() {_		return new TypeSerializerSchemaCompatibility<T>(Type.COMPATIBLE_AFTER_MIGRATION, null)__	};returns,a,result,that,indicates,that,the,new,serializer,can,be,used,after,migrating,the,written,bytes,i,e,reading,it,with,the,old,serializer,and,then,writing,it,again,with,the,new,serializer,return,a,result,that,indicates,that,the,new,serializer,can,be,used,after,migrating,the,written,bytes;public,static,t,type,serializer,schema,compatibility,t,compatible,after,migration,return,new,type,serializer,schema,compatibility,t,type,null
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> compatibleAfterMigration();1540907751;Returns a result that indicates that the new serializer can be used after migrating the written bytes, i.e._reading it with the old serializer and then writing it again with the new serializer.__@return a result that indicates that the new serializer can be used after migrating the written bytes.;public static <T> TypeSerializerSchemaCompatibility<T> compatibleAfterMigration() {_		return new TypeSerializerSchemaCompatibility<>(Type.COMPATIBLE_AFTER_MIGRATION, null)__	};returns,a,result,that,indicates,that,the,new,serializer,can,be,used,after,migrating,the,written,bytes,i,e,reading,it,with,the,old,serializer,and,then,writing,it,again,with,the,new,serializer,return,a,result,that,indicates,that,the,new,serializer,can,be,used,after,migrating,the,written,bytes;public,static,t,type,serializer,schema,compatibility,t,compatible,after,migration,return,new,type,serializer,schema,compatibility,type,null
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> compatibleAfterMigration();1546867949;Returns a result that indicates that the new serializer can be used after migrating the written bytes, i.e._reading it with the old serializer and then writing it again with the new serializer.__@return a result that indicates that the new serializer can be used after migrating the written bytes.;public static <T> TypeSerializerSchemaCompatibility<T> compatibleAfterMigration() {_		return new TypeSerializerSchemaCompatibility<>(Type.COMPATIBLE_AFTER_MIGRATION, null)__	};returns,a,result,that,indicates,that,the,new,serializer,can,be,used,after,migrating,the,written,bytes,i,e,reading,it,with,the,old,serializer,and,then,writing,it,again,with,the,new,serializer,return,a,result,that,indicates,that,the,new,serializer,can,be,used,after,migrating,the,written,bytes;public,static,t,type,serializer,schema,compatibility,t,compatible,after,migration,return,new,type,serializer,schema,compatibility,type,null
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> compatibleAfterMigration();1550738934;Returns a result that indicates that the new serializer can be used after migrating the written bytes, i.e._reading it with the old serializer and then writing it again with the new serializer.__@return a result that indicates that the new serializer can be used after migrating the written bytes.;public static <T> TypeSerializerSchemaCompatibility<T> compatibleAfterMigration() {_		return new TypeSerializerSchemaCompatibility<>(Type.COMPATIBLE_AFTER_MIGRATION, null)__	};returns,a,result,that,indicates,that,the,new,serializer,can,be,used,after,migrating,the,written,bytes,i,e,reading,it,with,the,old,serializer,and,then,writing,it,again,with,the,new,serializer,return,a,result,that,indicates,that,the,new,serializer,can,be,used,after,migrating,the,written,bytes;public,static,t,type,serializer,schema,compatibility,t,compatible,after,migration,return,new,type,serializer,schema,compatibility,type,null
TypeSerializerSchemaCompatibility -> public TypeSerializer<T> getReconfiguredSerializer();1546867949;Gets the reconfigured serializer. This throws an exception if_{@link #isCompatibleWithReconfiguredSerializer()} is {@code false}.;public TypeSerializer<T> getReconfiguredSerializer() {_		Preconditions.checkState(_			isCompatibleWithReconfiguredSerializer(),_			"It is only possible to get a reconfigured serializer if the compatibility type is %s, but the type is %s",_			Type.COMPATIBLE_WITH_RECONFIGURED_SERIALIZER, resultType)__		return reconfiguredNewSerializer__	};gets,the,reconfigured,serializer,this,throws,an,exception,if,link,is,compatible,with,reconfigured,serializer,is,code,false;public,type,serializer,t,get,reconfigured,serializer,preconditions,check,state,is,compatible,with,reconfigured,serializer,it,is,only,possible,to,get,a,reconfigured,serializer,if,the,compatibility,type,is,s,but,the,type,is,s,type,result,type,return,reconfigured,new,serializer
TypeSerializerSchemaCompatibility -> public TypeSerializer<T> getReconfiguredSerializer();1550738934;Gets the reconfigured serializer. This throws an exception if_{@link #isCompatibleWithReconfiguredSerializer()} is {@code false}.;public TypeSerializer<T> getReconfiguredSerializer() {_		Preconditions.checkState(_			isCompatibleWithReconfiguredSerializer(),_			"It is only possible to get a reconfigured serializer if the compatibility type is %s, but the type is %s",_			Type.COMPATIBLE_WITH_RECONFIGURED_SERIALIZER, resultType)__		return reconfiguredNewSerializer__	};gets,the,reconfigured,serializer,this,throws,an,exception,if,link,is,compatible,with,reconfigured,serializer,is,code,false;public,type,serializer,t,get,reconfigured,serializer,preconditions,check,state,is,compatible,with,reconfigured,serializer,it,is,only,possible,to,get,a,reconfigured,serializer,if,the,compatibility,type,is,s,but,the,type,is,s,type,result,type,return,reconfigured,new,serializer
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> compatibleAsIs();1539149033;Returns a result that indicates that the new serializer is compatible and no migration is required._The new serializer can continued to be used as is.__@return a result that indicates migration is not required for the new serializer.;public static <T> TypeSerializerSchemaCompatibility<T> compatibleAsIs() {_		return new TypeSerializerSchemaCompatibility<>(Type.COMPATIBLE_AS_IS, null)__	};returns,a,result,that,indicates,that,the,new,serializer,is,compatible,and,no,migration,is,required,the,new,serializer,can,continued,to,be,used,as,is,return,a,result,that,indicates,migration,is,not,required,for,the,new,serializer;public,static,t,type,serializer,schema,compatibility,t,compatible,as,is,return,new,type,serializer,schema,compatibility,type,null
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> compatibleAsIs();1540907751;Returns a result that indicates that the new serializer is compatible and no migration is required._The new serializer can continued to be used as is.__@return a result that indicates migration is not required for the new serializer.;public static <T> TypeSerializerSchemaCompatibility<T> compatibleAsIs() {_		return new TypeSerializerSchemaCompatibility<>(Type.COMPATIBLE_AS_IS, null)__	};returns,a,result,that,indicates,that,the,new,serializer,is,compatible,and,no,migration,is,required,the,new,serializer,can,continued,to,be,used,as,is,return,a,result,that,indicates,migration,is,not,required,for,the,new,serializer;public,static,t,type,serializer,schema,compatibility,t,compatible,as,is,return,new,type,serializer,schema,compatibility,type,null
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> compatibleAsIs();1546867949;Returns a result that indicates that the new serializer is compatible and no migration is required._The new serializer can continued to be used as is.__@return a result that indicates migration is not required for the new serializer.;public static <T> TypeSerializerSchemaCompatibility<T> compatibleAsIs() {_		return new TypeSerializerSchemaCompatibility<>(Type.COMPATIBLE_AS_IS, null)__	};returns,a,result,that,indicates,that,the,new,serializer,is,compatible,and,no,migration,is,required,the,new,serializer,can,continued,to,be,used,as,is,return,a,result,that,indicates,migration,is,not,required,for,the,new,serializer;public,static,t,type,serializer,schema,compatibility,t,compatible,as,is,return,new,type,serializer,schema,compatibility,type,null
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> compatibleAsIs();1550738934;Returns a result that indicates that the new serializer is compatible and no migration is required._The new serializer can continued to be used as is.__@return a result that indicates migration is not required for the new serializer.;public static <T> TypeSerializerSchemaCompatibility<T> compatibleAsIs() {_		return new TypeSerializerSchemaCompatibility<>(Type.COMPATIBLE_AS_IS, null)__	};returns,a,result,that,indicates,that,the,new,serializer,is,compatible,and,no,migration,is,required,the,new,serializer,can,continued,to,be,used,as,is,return,a,result,that,indicates,migration,is,not,required,for,the,new,serializer;public,static,t,type,serializer,schema,compatibility,t,compatible,as,is,return,new,type,serializer,schema,compatibility,type,null
TypeSerializerSchemaCompatibility -> public boolean isCompatibleWithReconfiguredSerializer();1546867949;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_WITH_RECONFIGURED_SERIALIZER}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_WITH_RECONFIGURED_SERIALIZER}.;public boolean isCompatibleWithReconfiguredSerializer() {_		return resultType == Type.COMPATIBLE_WITH_RECONFIGURED_SERIALIZER__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,with,reconfigured,serializer,return,result,type,type
TypeSerializerSchemaCompatibility -> public boolean isCompatibleWithReconfiguredSerializer();1550738934;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_WITH_RECONFIGURED_SERIALIZER}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_WITH_RECONFIGURED_SERIALIZER}.;public boolean isCompatibleWithReconfiguredSerializer() {_		return resultType == Type.COMPATIBLE_WITH_RECONFIGURED_SERIALIZER__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,with,reconfigured,serializer,return,result,type,type
TypeSerializerSchemaCompatibility -> public boolean isCompatibleAsIs();1539149033;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.;public boolean isCompatibleAsIs() {_		return resultType == Type.COMPATIBLE_AS_IS__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,as,is,return,result,type,type
TypeSerializerSchemaCompatibility -> public boolean isCompatibleAsIs();1539149114;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.;public boolean isCompatibleAsIs() {_		return resultType == Type.COMPATIBLE_AS_IS__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,as,is,return,result,type,type
TypeSerializerSchemaCompatibility -> public boolean isCompatibleAsIs();1540907751;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.;public boolean isCompatibleAsIs() {_		return resultType == Type.COMPATIBLE_AS_IS__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,as,is,return,result,type,type
TypeSerializerSchemaCompatibility -> public boolean isCompatibleAsIs();1546867949;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.;public boolean isCompatibleAsIs() {_		return resultType == Type.COMPATIBLE_AS_IS__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,as,is,return,result,type,type
TypeSerializerSchemaCompatibility -> public boolean isCompatibleAsIs();1550738934;Returns whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.__@return whether or not the type of the compatibility is {@link Type#COMPATIBLE_AS_IS}.;public boolean isCompatibleAsIs() {_		return resultType == Type.COMPATIBLE_AS_IS__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,return,whether,or,not,the,type,of,the,compatibility,is,link,type;public,boolean,is,compatible,as,is,return,result,type,type
TypeSerializerSchemaCompatibility -> public boolean isIncompatible();1539149033;Returns whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.__@return whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.;public boolean isIncompatible() {_		return resultType == Type.INCOMPATIBLE__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,incompatible,return,whether,or,not,the,type,of,the,compatibility,is,link,type,incompatible;public,boolean,is,incompatible,return,result,type,type,incompatible
TypeSerializerSchemaCompatibility -> public boolean isIncompatible();1539149114;Returns whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.__@return whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.;public boolean isIncompatible() {_		return resultType == Type.INCOMPATIBLE__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,incompatible,return,whether,or,not,the,type,of,the,compatibility,is,link,type,incompatible;public,boolean,is,incompatible,return,result,type,type,incompatible
TypeSerializerSchemaCompatibility -> public boolean isIncompatible();1540907751;Returns whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.__@return whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.;public boolean isIncompatible() {_		return resultType == Type.INCOMPATIBLE__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,incompatible,return,whether,or,not,the,type,of,the,compatibility,is,link,type,incompatible;public,boolean,is,incompatible,return,result,type,type,incompatible
TypeSerializerSchemaCompatibility -> public boolean isIncompatible();1546867949;Returns whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.__@return whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.;public boolean isIncompatible() {_		return resultType == Type.INCOMPATIBLE__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,incompatible,return,whether,or,not,the,type,of,the,compatibility,is,link,type,incompatible;public,boolean,is,incompatible,return,result,type,type,incompatible
TypeSerializerSchemaCompatibility -> public boolean isIncompatible();1550738934;Returns whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.__@return whether or not the type of the compatibility is {@link Type#INCOMPATIBLE}.;public boolean isIncompatible() {_		return resultType == Type.INCOMPATIBLE__	};returns,whether,or,not,the,type,of,the,compatibility,is,link,type,incompatible,return,whether,or,not,the,type,of,the,compatibility,is,link,type,incompatible;public,boolean,is,incompatible,return,result,type,type,incompatible
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> incompatible();1539149033;Returns a result that indicates there is no possible way for the new serializer to be use-able._This normally indicates that there is no common Java class between what the previous bytes can be_deserialized into and what can be written by the new serializer.__@return a result that indicates incompatibility between the new and previous serializer.;public static <T> TypeSerializerSchemaCompatibility<T> incompatible() {_		return new TypeSerializerSchemaCompatibility<T>(Type.INCOMPATIBLE, null)__	};returns,a,result,that,indicates,there,is,no,possible,way,for,the,new,serializer,to,be,use,able,this,normally,indicates,that,there,is,no,common,java,class,between,what,the,previous,bytes,can,be,deserialized,into,and,what,can,be,written,by,the,new,serializer,return,a,result,that,indicates,incompatibility,between,the,new,and,previous,serializer;public,static,t,type,serializer,schema,compatibility,t,incompatible,return,new,type,serializer,schema,compatibility,t,type,incompatible,null
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> incompatible();1540907751;Returns a result that indicates there is no possible way for the new serializer to be use-able._This normally indicates that there is no common Java class between what the previous bytes can be_deserialized into and what can be written by the new serializer.__<p>In this case, there is no possible way for the new serializer to continue to be used, even with_migration. Recovery of the Flink job will fail.__@return a result that indicates incompatibility between the new and previous serializer.;public static <T> TypeSerializerSchemaCompatibility<T> incompatible() {_		return new TypeSerializerSchemaCompatibility<>(Type.INCOMPATIBLE, null)__	};returns,a,result,that,indicates,there,is,no,possible,way,for,the,new,serializer,to,be,use,able,this,normally,indicates,that,there,is,no,common,java,class,between,what,the,previous,bytes,can,be,deserialized,into,and,what,can,be,written,by,the,new,serializer,p,in,this,case,there,is,no,possible,way,for,the,new,serializer,to,continue,to,be,used,even,with,migration,recovery,of,the,flink,job,will,fail,return,a,result,that,indicates,incompatibility,between,the,new,and,previous,serializer;public,static,t,type,serializer,schema,compatibility,t,incompatible,return,new,type,serializer,schema,compatibility,type,incompatible,null
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> incompatible();1546867949;Returns a result that indicates there is no possible way for the new serializer to be use-able._This normally indicates that there is no common Java class between what the previous bytes can be_deserialized into and what can be written by the new serializer.__<p>In this case, there is no possible way for the new serializer to continue to be used, even with_migration. Recovery of the Flink job will fail.__@return a result that indicates incompatibility between the new and previous serializer.;public static <T> TypeSerializerSchemaCompatibility<T> incompatible() {_		return new TypeSerializerSchemaCompatibility<>(Type.INCOMPATIBLE, null)__	};returns,a,result,that,indicates,there,is,no,possible,way,for,the,new,serializer,to,be,use,able,this,normally,indicates,that,there,is,no,common,java,class,between,what,the,previous,bytes,can,be,deserialized,into,and,what,can,be,written,by,the,new,serializer,p,in,this,case,there,is,no,possible,way,for,the,new,serializer,to,continue,to,be,used,even,with,migration,recovery,of,the,flink,job,will,fail,return,a,result,that,indicates,incompatibility,between,the,new,and,previous,serializer;public,static,t,type,serializer,schema,compatibility,t,incompatible,return,new,type,serializer,schema,compatibility,type,incompatible,null
TypeSerializerSchemaCompatibility -> public static <T> TypeSerializerSchemaCompatibility<T> incompatible();1550738934;Returns a result that indicates there is no possible way for the new serializer to be use-able._This normally indicates that there is no common Java class between what the previous bytes can be_deserialized into and what can be written by the new serializer.__<p>In this case, there is no possible way for the new serializer to continue to be used, even with_migration. Recovery of the Flink job will fail.__@return a result that indicates incompatibility between the new and previous serializer.;public static <T> TypeSerializerSchemaCompatibility<T> incompatible() {_		return new TypeSerializerSchemaCompatibility<>(Type.INCOMPATIBLE, null)__	};returns,a,result,that,indicates,there,is,no,possible,way,for,the,new,serializer,to,be,use,able,this,normally,indicates,that,there,is,no,common,java,class,between,what,the,previous,bytes,can,be,deserialized,into,and,what,can,be,written,by,the,new,serializer,p,in,this,case,there,is,no,possible,way,for,the,new,serializer,to,continue,to,be,used,even,with,migration,recovery,of,the,flink,job,will,fail,return,a,result,that,indicates,incompatibility,between,the,new,and,previous,serializer;public,static,t,type,serializer,schema,compatibility,t,incompatible,return,new,type,serializer,schema,compatibility,type,incompatible,null
