# id;timestamp;commentText;codeText;commentWords;codeWords
Types -> public static <K, V> TypeInformation<Map<K, V>> MAP(TypeInformation<K> keyType, TypeInformation<V> valueType);1513672409;Returns type information for a Java {@link java.util.Map}. A map must not be null. Null values_in keys are not supported. An entry's value can be null.__<p>By default, maps are untyped and treated as a generic type in Flink_ therefore, it is useful_to pass type information whenever a map is used.__<p><strong>Note:</strong> Flink does not preserve the concrete {@link Map} type. It converts a map into {@link HashMap} when_copying or deserializing.__@param keyType type information for the map's keys_@param valueType type information for the map's values;public static <K, V> TypeInformation<Map<K, V>> MAP(TypeInformation<K> keyType, TypeInformation<V> valueType) {_		return new MapTypeInfo<>(keyType, valueType)__	};returns,type,information,for,a,java,link,java,util,map,a,map,must,not,be,null,null,values,in,keys,are,not,supported,an,entry,s,value,can,be,null,p,by,default,maps,are,untyped,and,treated,as,a,generic,type,in,flink,therefore,it,is,useful,to,pass,type,information,whenever,a,map,is,used,p,strong,note,strong,flink,does,not,preserve,the,concrete,link,map,type,it,converts,a,map,into,link,hash,map,when,copying,or,deserializing,param,key,type,type,information,for,the,map,s,keys,param,value,type,type,information,for,the,map,s,values;public,static,k,v,type,information,map,k,v,map,type,information,k,key,type,type,information,v,value,type,return,new,map,type,info,key,type,value,type
Types -> public static <K, V> TypeInformation<Map<K, V>> MAP(TypeInformation<K> keyType, TypeInformation<V> valueType);1524407314;Returns type information for a Java {@link java.util.Map}. A map must not be null. Null values_in keys are not supported. An entry's value can be null.__<p>By default, maps are untyped and treated as a generic type in Flink_ therefore, it is useful_to pass type information whenever a map is used.__<p><strong>Note:</strong> Flink does not preserve the concrete {@link Map} type. It converts a map into {@link HashMap} when_copying or deserializing.__@param keyType type information for the map's keys_@param valueType type information for the map's values;public static <K, V> TypeInformation<Map<K, V>> MAP(TypeInformation<K> keyType, TypeInformation<V> valueType) {_		return new MapTypeInfo<>(keyType, valueType)__	};returns,type,information,for,a,java,link,java,util,map,a,map,must,not,be,null,null,values,in,keys,are,not,supported,an,entry,s,value,can,be,null,p,by,default,maps,are,untyped,and,treated,as,a,generic,type,in,flink,therefore,it,is,useful,to,pass,type,information,whenever,a,map,is,used,p,strong,note,strong,flink,does,not,preserve,the,concrete,link,map,type,it,converts,a,map,into,link,hash,map,when,copying,or,deserializing,param,key,type,type,information,for,the,map,s,keys,param,value,type,type,information,for,the,map,s,values;public,static,k,v,type,information,map,k,v,map,type,information,k,key,type,type,information,v,value,type,return,new,map,type,info,key,type,value,type
Types -> public static <K, V> TypeInformation<Map<K, V>> MAP(TypeInformation<K> keyType, TypeInformation<V> valueType);1534883557;Returns type information for a Java {@link java.util.Map}. A map must not be null. Null values_in keys are not supported. An entry's value can be null.__<p>By default, maps are untyped and treated as a generic type in Flink_ therefore, it is useful_to pass type information whenever a map is used.__<p><strong>Note:</strong> Flink does not preserve the concrete {@link Map} type. It converts a map into {@link HashMap} when_copying or deserializing.__@param keyType type information for the map's keys_@param valueType type information for the map's values;public static <K, V> TypeInformation<Map<K, V>> MAP(TypeInformation<K> keyType, TypeInformation<V> valueType) {_		return new MapTypeInfo<>(keyType, valueType)__	};returns,type,information,for,a,java,link,java,util,map,a,map,must,not,be,null,null,values,in,keys,are,not,supported,an,entry,s,value,can,be,null,p,by,default,maps,are,untyped,and,treated,as,a,generic,type,in,flink,therefore,it,is,useful,to,pass,type,information,whenever,a,map,is,used,p,strong,note,strong,flink,does,not,preserve,the,concrete,link,map,type,it,converts,a,map,into,link,hash,map,when,copying,or,deserializing,param,key,type,type,information,for,the,map,s,keys,param,value,type,type,information,for,the,map,s,values;public,static,k,v,type,information,map,k,v,map,type,information,k,key,type,type,information,v,value,type,return,new,map,type,info,key,type,value,type
Types -> public static RowTypeInfo ROW(TypeInformation<?>... types);1492678357;Generates a RowTypeInfo with fields of the given types._The fields have the default names (f1, f2 ..).__<p>This method is a shortcut to {@code new RowTypeInfo(types)}.__@param types The types of the row fields, e.g., Types.STRING, Types.INT;public static RowTypeInfo ROW(TypeInformation<?>... types) {_		return new RowTypeInfo(types)__	};generates,a,row,type,info,with,fields,of,the,given,types,the,fields,have,the,default,names,f1,f2,p,this,method,is,a,shortcut,to,code,new,row,type,info,types,param,types,the,types,of,the,row,fields,e,g,types,string,types,int;public,static,row,type,info,row,type,information,types,return,new,row,type,info,types
Types -> public static RowTypeInfo ROW(TypeInformation<?>... types);1493217721;Generates a RowTypeInfo with fields of the given types._The fields have the default names (f0, f1, f2 ..).__<p>This method is a shortcut to {@code new RowTypeInfo(types)}.__@param types The types of the row fields, e.g., Types.STRING, Types.INT;public static RowTypeInfo ROW(TypeInformation<?>... types) {_		return new RowTypeInfo(types)__	};generates,a,row,type,info,with,fields,of,the,given,types,the,fields,have,the,default,names,f0,f1,f2,p,this,method,is,a,shortcut,to,code,new,row,type,info,types,param,types,the,types,of,the,row,fields,e,g,types,string,types,int;public,static,row,type,info,row,type,information,types,return,new,row,type,info,types
Types -> public static TypeInformation<Row> ROW(TypeInformation<?>... types);1513672409;Returns type information for {@link org.apache.flink.types.Row} with fields of the given types._A row itself must not be null.__<p>A row is a fixed-length, null-aware composite type for storing multiple values in a_deterministic field order. Every field can be null regardless of the field's type._The type of row fields cannot be automatically inferred_ therefore, it is required to provide_type information whenever a row is used.__<p>The schema of rows can have up to <code>Integer.MAX_VALUE</code> fields, however, all row instances_must strictly adhere to the schema defined by the type info.__<p>This method generates type information with fields of the given types_ the fields have_the default names (f0, f1, f2 ..).__@param types The types of the row fields, e.g., Types.STRING, Types.INT;public static TypeInformation<Row> ROW(TypeInformation<?>... types) {_		return new RowTypeInfo(types)__	};returns,type,information,for,link,org,apache,flink,types,row,with,fields,of,the,given,types,a,row,itself,must,not,be,null,p,a,row,is,a,fixed,length,null,aware,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,every,field,can,be,null,regardless,of,the,field,s,type,the,type,of,row,fields,cannot,be,automatically,inferred,therefore,it,is,required,to,provide,type,information,whenever,a,row,is,used,p,the,schema,of,rows,can,have,up,to,code,integer,code,fields,however,all,row,instances,must,strictly,adhere,to,the,schema,defined,by,the,type,info,p,this,method,generates,type,information,with,fields,of,the,given,types,the,fields,have,the,default,names,f0,f1,f2,param,types,the,types,of,the,row,fields,e,g,types,string,types,int;public,static,type,information,row,row,type,information,types,return,new,row,type,info,types
Types -> public static TypeInformation<Row> ROW(TypeInformation<?>... types);1524407314;Returns type information for {@link org.apache.flink.types.Row} with fields of the given types._A row itself must not be null.__<p>A row is a fixed-length, null-aware composite type for storing multiple values in a_deterministic field order. Every field can be null regardless of the field's type._The type of row fields cannot be automatically inferred_ therefore, it is required to provide_type information whenever a row is used.__<p>The schema of rows can have up to <code>Integer.MAX_VALUE</code> fields, however, all row instances_must strictly adhere to the schema defined by the type info.__<p>This method generates type information with fields of the given types_ the fields have_the default names (f0, f1, f2 ..).__@param types The types of the row fields, e.g., Types.STRING, Types.INT;public static TypeInformation<Row> ROW(TypeInformation<?>... types) {_		return new RowTypeInfo(types)__	};returns,type,information,for,link,org,apache,flink,types,row,with,fields,of,the,given,types,a,row,itself,must,not,be,null,p,a,row,is,a,fixed,length,null,aware,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,every,field,can,be,null,regardless,of,the,field,s,type,the,type,of,row,fields,cannot,be,automatically,inferred,therefore,it,is,required,to,provide,type,information,whenever,a,row,is,used,p,the,schema,of,rows,can,have,up,to,code,integer,code,fields,however,all,row,instances,must,strictly,adhere,to,the,schema,defined,by,the,type,info,p,this,method,generates,type,information,with,fields,of,the,given,types,the,fields,have,the,default,names,f0,f1,f2,param,types,the,types,of,the,row,fields,e,g,types,string,types,int;public,static,type,information,row,row,type,information,types,return,new,row,type,info,types
Types -> public static TypeInformation<Row> ROW(TypeInformation<?>... types);1534883557;Returns type information for {@link org.apache.flink.types.Row} with fields of the given types._A row itself must not be null.__<p>A row is a fixed-length, null-aware composite type for storing multiple values in a_deterministic field order. Every field can be null regardless of the field's type._The type of row fields cannot be automatically inferred_ therefore, it is required to provide_type information whenever a row is used.__<p>The schema of rows can have up to <code>Integer.MAX_VALUE</code> fields, however, all row instances_must strictly adhere to the schema defined by the type info.__<p>This method generates type information with fields of the given types_ the fields have_the default names (f0, f1, f2 ..).__@param types The types of the row fields, e.g., Types.STRING, Types.INT;public static TypeInformation<Row> ROW(TypeInformation<?>... types) {_		return new RowTypeInfo(types)__	};returns,type,information,for,link,org,apache,flink,types,row,with,fields,of,the,given,types,a,row,itself,must,not,be,null,p,a,row,is,a,fixed,length,null,aware,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,every,field,can,be,null,regardless,of,the,field,s,type,the,type,of,row,fields,cannot,be,automatically,inferred,therefore,it,is,required,to,provide,type,information,whenever,a,row,is,used,p,the,schema,of,rows,can,have,up,to,code,integer,code,fields,however,all,row,instances,must,strictly,adhere,to,the,schema,defined,by,the,type,info,p,this,method,generates,type,information,with,fields,of,the,given,types,the,fields,have,the,default,names,f0,f1,f2,param,types,the,types,of,the,row,fields,e,g,types,string,types,int;public,static,type,information,row,row,type,information,types,return,new,row,type,info,types
Types -> public static <L, R> TypeInformation<Either<L, R>> EITHER(TypeInformation<L> leftType, TypeInformation<R> rightType);1513672409;Returns type information for Flink's {@link org.apache.flink.types.Either} type. Null values_are not supported.__<p>Either type can be used for a value of two possible types.__<p>Example use: <code>Types.EITHER(Types.VOID, Types.INT)</code>__@param leftType type information of left side / {@link org.apache.flink.types.Either.Left}_@param rightType type information of right side / {@link org.apache.flink.types.Either.Right};public static <L, R> TypeInformation<Either<L, R>> EITHER(TypeInformation<L> leftType, TypeInformation<R> rightType) {_		return new EitherTypeInfo<>(leftType, rightType)__	};returns,type,information,for,flink,s,link,org,apache,flink,types,either,type,null,values,are,not,supported,p,either,type,can,be,used,for,a,value,of,two,possible,types,p,example,use,code,types,either,types,void,types,int,code,param,left,type,type,information,of,left,side,link,org,apache,flink,types,either,left,param,right,type,type,information,of,right,side,link,org,apache,flink,types,either,right;public,static,l,r,type,information,either,l,r,either,type,information,l,left,type,type,information,r,right,type,return,new,either,type,info,left,type,right,type
Types -> public static <L, R> TypeInformation<Either<L, R>> EITHER(TypeInformation<L> leftType, TypeInformation<R> rightType);1524407314;Returns type information for Flink's {@link org.apache.flink.types.Either} type. Null values_are not supported.__<p>Either type can be used for a value of two possible types.__<p>Example use: <code>Types.EITHER(Types.VOID, Types.INT)</code>__@param leftType type information of left side / {@link org.apache.flink.types.Either.Left}_@param rightType type information of right side / {@link org.apache.flink.types.Either.Right};public static <L, R> TypeInformation<Either<L, R>> EITHER(TypeInformation<L> leftType, TypeInformation<R> rightType) {_		return new EitherTypeInfo<>(leftType, rightType)__	};returns,type,information,for,flink,s,link,org,apache,flink,types,either,type,null,values,are,not,supported,p,either,type,can,be,used,for,a,value,of,two,possible,types,p,example,use,code,types,either,types,void,types,int,code,param,left,type,type,information,of,left,side,link,org,apache,flink,types,either,left,param,right,type,type,information,of,right,side,link,org,apache,flink,types,either,right;public,static,l,r,type,information,either,l,r,either,type,information,l,left,type,type,information,r,right,type,return,new,either,type,info,left,type,right,type
Types -> public static <L, R> TypeInformation<Either<L, R>> EITHER(TypeInformation<L> leftType, TypeInformation<R> rightType);1534883557;Returns type information for Flink's {@link org.apache.flink.types.Either} type. Null values_are not supported.__<p>Either type can be used for a value of two possible types.__<p>Example use: <code>Types.EITHER(Types.VOID, Types.INT)</code>__@param leftType type information of left side / {@link org.apache.flink.types.Either.Left}_@param rightType type information of right side / {@link org.apache.flink.types.Either.Right};public static <L, R> TypeInformation<Either<L, R>> EITHER(TypeInformation<L> leftType, TypeInformation<R> rightType) {_		return new EitherTypeInfo<>(leftType, rightType)__	};returns,type,information,for,flink,s,link,org,apache,flink,types,either,type,null,values,are,not,supported,p,either,type,can,be,used,for,a,value,of,two,possible,types,p,example,use,code,types,either,types,void,types,int,code,param,left,type,type,information,of,left,side,link,org,apache,flink,types,either,left,param,right,type,type,information,of,right,side,link,org,apache,flink,types,either,right;public,static,l,r,type,information,either,l,r,either,type,information,l,left,type,type,information,r,right,type,return,new,either,type,info,left,type,right,type
Types -> @SuppressWarnings("unchecked") 	public static <E> TypeInformation<E[]> OBJECT_ARRAY(TypeInformation<E> elementType);1513672409;Returns type information for Java arrays of object types (such as <code>String[]</code>,_<code>Integer[]</code>). The array itself must not be null. Null values for elements are supported.__@param elementType element type of the array;@SuppressWarnings("unchecked")_	public static <E> TypeInformation<E[]> OBJECT_ARRAY(TypeInformation<E> elementType) {_		if (elementType == Types.STRING) {_			return (TypeInformation) BasicArrayTypeInfo.STRING_ARRAY_TYPE_INFO__		}_		return ObjectArrayTypeInfo.getInfoFor(elementType)__	};returns,type,information,for,java,arrays,of,object,types,such,as,code,string,code,code,integer,code,the,array,itself,must,not,be,null,null,values,for,elements,are,supported,param,element,type,element,type,of,the,array;suppress,warnings,unchecked,public,static,e,type,information,e,type,information,e,element,type,if,element,type,types,string,return,type,information,basic,array,type,info,return,object,array,type,info,get,info,for,element,type
Types -> @SuppressWarnings("unchecked") 	public static <E> TypeInformation<E[]> OBJECT_ARRAY(TypeInformation<E> elementType);1524407314;Returns type information for Java arrays of object types (such as <code>String[]</code>,_<code>Integer[]</code>). The array itself must not be null. Null values for elements are supported.__@param elementType element type of the array;@SuppressWarnings("unchecked")_	public static <E> TypeInformation<E[]> OBJECT_ARRAY(TypeInformation<E> elementType) {_		if (elementType == Types.STRING) {_			return (TypeInformation) BasicArrayTypeInfo.STRING_ARRAY_TYPE_INFO__		}_		return ObjectArrayTypeInfo.getInfoFor(elementType)__	};returns,type,information,for,java,arrays,of,object,types,such,as,code,string,code,code,integer,code,the,array,itself,must,not,be,null,null,values,for,elements,are,supported,param,element,type,element,type,of,the,array;suppress,warnings,unchecked,public,static,e,type,information,e,type,information,e,element,type,if,element,type,types,string,return,type,information,basic,array,type,info,return,object,array,type,info,get,info,for,element,type
Types -> @SuppressWarnings("unchecked") 	public static <E> TypeInformation<E[]> OBJECT_ARRAY(TypeInformation<E> elementType);1534883557;Returns type information for Java arrays of object types (such as <code>String[]</code>,_<code>Integer[]</code>). The array itself must not be null. Null values for elements are supported.__@param elementType element type of the array;@SuppressWarnings("unchecked")_	public static <E> TypeInformation<E[]> OBJECT_ARRAY(TypeInformation<E> elementType) {_		if (elementType == Types.STRING) {_			return (TypeInformation) BasicArrayTypeInfo.STRING_ARRAY_TYPE_INFO__		}_		return ObjectArrayTypeInfo.getInfoFor(elementType)__	};returns,type,information,for,java,arrays,of,object,types,such,as,code,string,code,code,integer,code,the,array,itself,must,not,be,null,null,values,for,elements,are,supported,param,element,type,element,type,of,the,array;suppress,warnings,unchecked,public,static,e,type,information,e,type,information,e,element,type,if,element,type,types,string,return,type,information,basic,array,type,info,return,object,array,type,info,get,info,for,element,type
Types -> public static TypeInformation<?> PRIMITIVE_ARRAY(TypeInformation<?> elementType);1513672409;Returns type information for Java arrays of primitive type (such as <code>byte[]</code>). The array_must not be null.__@param elementType element type of the array (e.g. Types.BOOLEAN, Types.INT, Types.DOUBLE);public static TypeInformation<?> PRIMITIVE_ARRAY(TypeInformation<?> elementType) {_		if (elementType == BOOLEAN) {_			return PrimitiveArrayTypeInfo.BOOLEAN_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == BYTE) {_			return PrimitiveArrayTypeInfo.BYTE_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == SHORT) {_			return PrimitiveArrayTypeInfo.SHORT_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == INT) {_			return PrimitiveArrayTypeInfo.INT_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == LONG) {_			return PrimitiveArrayTypeInfo.LONG_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == FLOAT) {_			return PrimitiveArrayTypeInfo.FLOAT_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == DOUBLE) {_			return PrimitiveArrayTypeInfo.DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == CHAR) {_			return PrimitiveArrayTypeInfo.CHAR_PRIMITIVE_ARRAY_TYPE_INFO__		}_		throw new IllegalArgumentException("Invalid element type for a primitive array.")__	};returns,type,information,for,java,arrays,of,primitive,type,such,as,code,byte,code,the,array,must,not,be,null,param,element,type,element,type,of,the,array,e,g,types,boolean,types,int,types,double;public,static,type,information,type,information,element,type,if,element,type,boolean,return,primitive,array,type,info,else,if,element,type,byte,return,primitive,array,type,info,else,if,element,type,short,return,primitive,array,type,info,else,if,element,type,int,return,primitive,array,type,info,else,if,element,type,long,return,primitive,array,type,info,else,if,element,type,float,return,primitive,array,type,info,else,if,element,type,double,return,primitive,array,type,info,else,if,element,type,char,return,primitive,array,type,info,throw,new,illegal,argument,exception,invalid,element,type,for,a,primitive,array
Types -> public static TypeInformation<?> PRIMITIVE_ARRAY(TypeInformation<?> elementType);1524407314;Returns type information for Java arrays of primitive type (such as <code>byte[]</code>). The array_must not be null.__@param elementType element type of the array (e.g. Types.BOOLEAN, Types.INT, Types.DOUBLE);public static TypeInformation<?> PRIMITIVE_ARRAY(TypeInformation<?> elementType) {_		if (elementType == BOOLEAN) {_			return PrimitiveArrayTypeInfo.BOOLEAN_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == BYTE) {_			return PrimitiveArrayTypeInfo.BYTE_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == SHORT) {_			return PrimitiveArrayTypeInfo.SHORT_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == INT) {_			return PrimitiveArrayTypeInfo.INT_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == LONG) {_			return PrimitiveArrayTypeInfo.LONG_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == FLOAT) {_			return PrimitiveArrayTypeInfo.FLOAT_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == DOUBLE) {_			return PrimitiveArrayTypeInfo.DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == CHAR) {_			return PrimitiveArrayTypeInfo.CHAR_PRIMITIVE_ARRAY_TYPE_INFO__		}_		throw new IllegalArgumentException("Invalid element type for a primitive array.")__	};returns,type,information,for,java,arrays,of,primitive,type,such,as,code,byte,code,the,array,must,not,be,null,param,element,type,element,type,of,the,array,e,g,types,boolean,types,int,types,double;public,static,type,information,type,information,element,type,if,element,type,boolean,return,primitive,array,type,info,else,if,element,type,byte,return,primitive,array,type,info,else,if,element,type,short,return,primitive,array,type,info,else,if,element,type,int,return,primitive,array,type,info,else,if,element,type,long,return,primitive,array,type,info,else,if,element,type,float,return,primitive,array,type,info,else,if,element,type,double,return,primitive,array,type,info,else,if,element,type,char,return,primitive,array,type,info,throw,new,illegal,argument,exception,invalid,element,type,for,a,primitive,array
Types -> public static TypeInformation<?> PRIMITIVE_ARRAY(TypeInformation<?> elementType);1534883557;Returns type information for Java arrays of primitive type (such as <code>byte[]</code>). The array_must not be null.__@param elementType element type of the array (e.g. Types.BOOLEAN, Types.INT, Types.DOUBLE);public static TypeInformation<?> PRIMITIVE_ARRAY(TypeInformation<?> elementType) {_		if (elementType == BOOLEAN) {_			return PrimitiveArrayTypeInfo.BOOLEAN_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == BYTE) {_			return PrimitiveArrayTypeInfo.BYTE_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == SHORT) {_			return PrimitiveArrayTypeInfo.SHORT_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == INT) {_			return PrimitiveArrayTypeInfo.INT_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == LONG) {_			return PrimitiveArrayTypeInfo.LONG_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == FLOAT) {_			return PrimitiveArrayTypeInfo.FLOAT_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == DOUBLE) {_			return PrimitiveArrayTypeInfo.DOUBLE_PRIMITIVE_ARRAY_TYPE_INFO__		} else if (elementType == CHAR) {_			return PrimitiveArrayTypeInfo.CHAR_PRIMITIVE_ARRAY_TYPE_INFO__		}_		throw new IllegalArgumentException("Invalid element type for a primitive array.")__	};returns,type,information,for,java,arrays,of,primitive,type,such,as,code,byte,code,the,array,must,not,be,null,param,element,type,element,type,of,the,array,e,g,types,boolean,types,int,types,double;public,static,type,information,type,information,element,type,if,element,type,boolean,return,primitive,array,type,info,else,if,element,type,byte,return,primitive,array,type,info,else,if,element,type,short,return,primitive,array,type,info,else,if,element,type,int,return,primitive,array,type,info,else,if,element,type,long,return,primitive,array,type,info,else,if,element,type,float,return,primitive,array,type,info,else,if,element,type,double,return,primitive,array,type,info,else,if,element,type,char,return,primitive,array,type,info,throw,new,illegal,argument,exception,invalid,element,type,for,a,primitive,array
Types -> public static <T extends Tuple> TypeInformation<T> TUPLE(TypeInformation<?>... types);1513672409;Returns type information for subclasses of Flink's {@link org.apache.flink.api.java.tuple.Tuple}_(namely {@link org.apache.flink.api.java.tuple.Tuple0} till {@link org.apache.flink.api.java.tuple.Tuple25})_with fields of the given types. A tuple must not be null.__<p>A tuple is a fixed-length composite type for storing multiple values in a_deterministic field order. Fields of a tuple are typed. Tuples are the most efficient composite_type_ a tuple does not support null-valued fields unless the type of the field supports nullability.__@param types The types of the tuple fields, e.g., Types.STRING, Types.INT;public static <T extends Tuple> TypeInformation<T> TUPLE(TypeInformation<?>... types) {_		return new TupleTypeInfo<>(types)__	};returns,type,information,for,subclasses,of,flink,s,link,org,apache,flink,api,java,tuple,tuple,namely,link,org,apache,flink,api,java,tuple,tuple0,till,link,org,apache,flink,api,java,tuple,tuple25,with,fields,of,the,given,types,a,tuple,must,not,be,null,p,a,tuple,is,a,fixed,length,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,fields,of,a,tuple,are,typed,tuples,are,the,most,efficient,composite,type,a,tuple,does,not,support,null,valued,fields,unless,the,type,of,the,field,supports,nullability,param,types,the,types,of,the,tuple,fields,e,g,types,string,types,int;public,static,t,extends,tuple,type,information,t,tuple,type,information,types,return,new,tuple,type,info,types
Types -> public static <T extends Tuple> TypeInformation<T> TUPLE(TypeInformation<?>... types);1524407314;Returns type information for subclasses of Flink's {@link org.apache.flink.api.java.tuple.Tuple}_(namely {@link org.apache.flink.api.java.tuple.Tuple0} till {@link org.apache.flink.api.java.tuple.Tuple25})_with fields of the given types. A tuple must not be null.__<p>A tuple is a fixed-length composite type for storing multiple values in a_deterministic field order. Fields of a tuple are typed. Tuples are the most efficient composite_type_ a tuple does not support null-valued fields unless the type of the field supports nullability.__@param types The types of the tuple fields, e.g., Types.STRING, Types.INT;public static <T extends Tuple> TypeInformation<T> TUPLE(TypeInformation<?>... types) {_		return new TupleTypeInfo<>(types)__	};returns,type,information,for,subclasses,of,flink,s,link,org,apache,flink,api,java,tuple,tuple,namely,link,org,apache,flink,api,java,tuple,tuple0,till,link,org,apache,flink,api,java,tuple,tuple25,with,fields,of,the,given,types,a,tuple,must,not,be,null,p,a,tuple,is,a,fixed,length,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,fields,of,a,tuple,are,typed,tuples,are,the,most,efficient,composite,type,a,tuple,does,not,support,null,valued,fields,unless,the,type,of,the,field,supports,nullability,param,types,the,types,of,the,tuple,fields,e,g,types,string,types,int;public,static,t,extends,tuple,type,information,t,tuple,type,information,types,return,new,tuple,type,info,types
Types -> public static <T extends Tuple> TypeInformation<T> TUPLE(TypeInformation<?>... types);1534883557;Returns type information for subclasses of Flink's {@link org.apache.flink.api.java.tuple.Tuple}_(namely {@link org.apache.flink.api.java.tuple.Tuple0} till {@link org.apache.flink.api.java.tuple.Tuple25})_with fields of the given types. A tuple must not be null.__<p>A tuple is a fixed-length composite type for storing multiple values in a_deterministic field order. Fields of a tuple are typed. Tuples are the most efficient composite_type_ a tuple does not support null-valued fields unless the type of the field supports nullability.__@param types The types of the tuple fields, e.g., Types.STRING, Types.INT;public static <T extends Tuple> TypeInformation<T> TUPLE(TypeInformation<?>... types) {_		return new TupleTypeInfo<>(types)__	};returns,type,information,for,subclasses,of,flink,s,link,org,apache,flink,api,java,tuple,tuple,namely,link,org,apache,flink,api,java,tuple,tuple0,till,link,org,apache,flink,api,java,tuple,tuple25,with,fields,of,the,given,types,a,tuple,must,not,be,null,p,a,tuple,is,a,fixed,length,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,fields,of,a,tuple,are,typed,tuples,are,the,most,efficient,composite,type,a,tuple,does,not,support,null,valued,fields,unless,the,type,of,the,field,supports,nullability,param,types,the,types,of,the,tuple,fields,e,g,types,string,types,int;public,static,t,extends,tuple,type,information,t,tuple,type,information,types,return,new,tuple,type,info,types
Types -> public static <V extends Value> TypeInformation<V> VALUE(Class<V> valueType);1513672409;Returns type information for Flink value types (classes that implement_{@link org.apache.flink.types.Value}). Built-in value types do not support null values (except_for {@link org.apache.flink.types.StringValue}).__<p>Value types describe their serialization and deserialization manually. Instead of going_through a general purpose serialization framework. A value type is reasonable when general purpose_serialization would be highly inefficient. The wrapped value can be altered, allowing programmers to_reuse objects and take pressure off the garbage collector.__<p>Flink provides built-in value types for all Java primitive types (such as_{@link org.apache.flink.types.BooleanValue}, {@link org.apache.flink.types.IntValue}) as well_as {@link org.apache.flink.types.StringValue}, {@link org.apache.flink.types.NullValue},_{@link org.apache.flink.types.ListValue}, and {@link org.apache.flink.types.MapValue}.__@param valueType class that implements {@link org.apache.flink.types.Value};public static <V extends Value> TypeInformation<V> VALUE(Class<V> valueType) {_		return new ValueTypeInfo<>(valueType)__	};returns,type,information,for,flink,value,types,classes,that,implement,link,org,apache,flink,types,value,built,in,value,types,do,not,support,null,values,except,for,link,org,apache,flink,types,string,value,p,value,types,describe,their,serialization,and,deserialization,manually,instead,of,going,through,a,general,purpose,serialization,framework,a,value,type,is,reasonable,when,general,purpose,serialization,would,be,highly,inefficient,the,wrapped,value,can,be,altered,allowing,programmers,to,reuse,objects,and,take,pressure,off,the,garbage,collector,p,flink,provides,built,in,value,types,for,all,java,primitive,types,such,as,link,org,apache,flink,types,boolean,value,link,org,apache,flink,types,int,value,as,well,as,link,org,apache,flink,types,string,value,link,org,apache,flink,types,null,value,link,org,apache,flink,types,list,value,and,link,org,apache,flink,types,map,value,param,value,type,class,that,implements,link,org,apache,flink,types,value;public,static,v,extends,value,type,information,v,value,class,v,value,type,return,new,value,type,info,value,type
Types -> public static <V extends Value> TypeInformation<V> VALUE(Class<V> valueType);1524407314;Returns type information for Flink value types (classes that implement_{@link org.apache.flink.types.Value}). Built-in value types do not support null values (except_for {@link org.apache.flink.types.StringValue}).__<p>Value types describe their serialization and deserialization manually. Instead of going_through a general purpose serialization framework. A value type is reasonable when general purpose_serialization would be highly inefficient. The wrapped value can be altered, allowing programmers to_reuse objects and take pressure off the garbage collector.__<p>Flink provides built-in value types for all Java primitive types (such as_{@link org.apache.flink.types.BooleanValue}, {@link org.apache.flink.types.IntValue}) as well_as {@link org.apache.flink.types.StringValue}, {@link org.apache.flink.types.NullValue},_{@link org.apache.flink.types.ListValue}, and {@link org.apache.flink.types.MapValue}.__@param valueType class that implements {@link org.apache.flink.types.Value};public static <V extends Value> TypeInformation<V> VALUE(Class<V> valueType) {_		return new ValueTypeInfo<>(valueType)__	};returns,type,information,for,flink,value,types,classes,that,implement,link,org,apache,flink,types,value,built,in,value,types,do,not,support,null,values,except,for,link,org,apache,flink,types,string,value,p,value,types,describe,their,serialization,and,deserialization,manually,instead,of,going,through,a,general,purpose,serialization,framework,a,value,type,is,reasonable,when,general,purpose,serialization,would,be,highly,inefficient,the,wrapped,value,can,be,altered,allowing,programmers,to,reuse,objects,and,take,pressure,off,the,garbage,collector,p,flink,provides,built,in,value,types,for,all,java,primitive,types,such,as,link,org,apache,flink,types,boolean,value,link,org,apache,flink,types,int,value,as,well,as,link,org,apache,flink,types,string,value,link,org,apache,flink,types,null,value,link,org,apache,flink,types,list,value,and,link,org,apache,flink,types,map,value,param,value,type,class,that,implements,link,org,apache,flink,types,value;public,static,v,extends,value,type,information,v,value,class,v,value,type,return,new,value,type,info,value,type
Types -> public static <V extends Value> TypeInformation<V> VALUE(Class<V> valueType);1534883557;Returns type information for Flink value types (classes that implement_{@link org.apache.flink.types.Value}). Built-in value types do not support null values (except_for {@link org.apache.flink.types.StringValue}).__<p>Value types describe their serialization and deserialization manually. Instead of going_through a general purpose serialization framework. A value type is reasonable when general purpose_serialization would be highly inefficient. The wrapped value can be altered, allowing programmers to_reuse objects and take pressure off the garbage collector.__<p>Flink provides built-in value types for all Java primitive types (such as_{@link org.apache.flink.types.BooleanValue}, {@link org.apache.flink.types.IntValue}) as well_as {@link org.apache.flink.types.StringValue}, {@link org.apache.flink.types.NullValue},_{@link org.apache.flink.types.ListValue}, and {@link org.apache.flink.types.MapValue}.__@param valueType class that implements {@link org.apache.flink.types.Value};public static <V extends Value> TypeInformation<V> VALUE(Class<V> valueType) {_		return new ValueTypeInfo<>(valueType)__	};returns,type,information,for,flink,value,types,classes,that,implement,link,org,apache,flink,types,value,built,in,value,types,do,not,support,null,values,except,for,link,org,apache,flink,types,string,value,p,value,types,describe,their,serialization,and,deserialization,manually,instead,of,going,through,a,general,purpose,serialization,framework,a,value,type,is,reasonable,when,general,purpose,serialization,would,be,highly,inefficient,the,wrapped,value,can,be,altered,allowing,programmers,to,reuse,objects,and,take,pressure,off,the,garbage,collector,p,flink,provides,built,in,value,types,for,all,java,primitive,types,such,as,link,org,apache,flink,types,boolean,value,link,org,apache,flink,types,int,value,as,well,as,link,org,apache,flink,types,string,value,link,org,apache,flink,types,null,value,link,org,apache,flink,types,list,value,and,link,org,apache,flink,types,map,value,param,value,type,class,that,implements,link,org,apache,flink,types,value;public,static,v,extends,value,type,information,v,value,class,v,value,type,return,new,value,type,info,value,type
Types -> public static <E extends Enum<E>> TypeInformation<E> ENUM(Class<E> enumType);1513672409;Returns type information for Java enumerations. Null values are not supported.__@param enumType enumeration class extending {@link java.lang.Enum};public static <E extends Enum<E>> TypeInformation<E> ENUM(Class<E> enumType) {_		return new EnumTypeInfo<>(enumType)__	};returns,type,information,for,java,enumerations,null,values,are,not,supported,param,enum,type,enumeration,class,extending,link,java,lang,enum;public,static,e,extends,enum,e,type,information,e,enum,class,e,enum,type,return,new,enum,type,info,enum,type
Types -> public static <E extends Enum<E>> TypeInformation<E> ENUM(Class<E> enumType);1524407314;Returns type information for Java enumerations. Null values are not supported.__@param enumType enumeration class extending {@link java.lang.Enum};public static <E extends Enum<E>> TypeInformation<E> ENUM(Class<E> enumType) {_		return new EnumTypeInfo<>(enumType)__	};returns,type,information,for,java,enumerations,null,values,are,not,supported,param,enum,type,enumeration,class,extending,link,java,lang,enum;public,static,e,extends,enum,e,type,information,e,enum,class,e,enum,type,return,new,enum,type,info,enum,type
Types -> public static <E extends Enum<E>> TypeInformation<E> ENUM(Class<E> enumType);1534883557;Returns type information for Java enumerations. Null values are not supported.__@param enumType enumeration class extending {@link java.lang.Enum};public static <E extends Enum<E>> TypeInformation<E> ENUM(Class<E> enumType) {_		return new EnumTypeInfo<>(enumType)__	};returns,type,information,for,java,enumerations,null,values,are,not,supported,param,enum,type,enumeration,class,extending,link,java,lang,enum;public,static,e,extends,enum,e,type,information,e,enum,class,e,enum,type,return,new,enum,type,info,enum,type
Types -> public static <T> TypeInformation<T> POJO(Class<T> pojoClass, Map<String, TypeInformation<?>> fields);1513672409;Returns type information for a POJO (Plain Old Java Object) and allows to specify all fields manually.__<p>A POJO class is public and standalone (no non-static inner class). It has a public no-argument_constructor. All non-static, non-transient fields in the class (and all superclasses) are either public_(and non-final) or have a public getter and a setter method that follows the Java beans naming_conventions for getters and setters.__<p>A POJO is a fixed-length, null-aware composite type with non-deterministic field order. Every field_can be null independent of the field's type.__<p>The generic types for all fields of the POJO can be defined in a hierarchy of subclasses.__<p>If Flink's type analyzer is unable to extract a POJO field, an_{@link org.apache.flink.api.common.functions.InvalidTypesException} is thrown.__<p><strong>Note:</strong> In most cases the type information of fields can be determined automatically,_we recommend to use {@link Types#POJO(Class)}.__@param pojoClass POJO class_@param fields map of fields that map a name to type information. The map key is the name of_the field and the value is its type.;public static <T> TypeInformation<T> POJO(Class<T> pojoClass, Map<String, TypeInformation<?>> fields) {_		final List<PojoField> pojoFields = new ArrayList<>(fields.size())__		for (Map.Entry<String, TypeInformation<?>> field : fields.entrySet()) {_			final Field f = TypeExtractor.getDeclaredField(pojoClass, field.getKey())__			if (f == null) {_				throw new InvalidTypesException("Field '" + field.getKey() + "'could not be accessed.")__			}_			pojoFields.add(new PojoField(f, field.getValue()))__		}__		return new PojoTypeInfo<>(pojoClass, pojoFields)__	};returns,type,information,for,a,pojo,plain,old,java,object,and,allows,to,specify,all,fields,manually,p,a,pojo,class,is,public,and,standalone,no,non,static,inner,class,it,has,a,public,no,argument,constructor,all,non,static,non,transient,fields,in,the,class,and,all,superclasses,are,either,public,and,non,final,or,have,a,public,getter,and,a,setter,method,that,follows,the,java,beans,naming,conventions,for,getters,and,setters,p,a,pojo,is,a,fixed,length,null,aware,composite,type,with,non,deterministic,field,order,every,field,can,be,null,independent,of,the,field,s,type,p,the,generic,types,for,all,fields,of,the,pojo,can,be,defined,in,a,hierarchy,of,subclasses,p,if,flink,s,type,analyzer,is,unable,to,extract,a,pojo,field,an,link,org,apache,flink,api,common,functions,invalid,types,exception,is,thrown,p,strong,note,strong,in,most,cases,the,type,information,of,fields,can,be,determined,automatically,we,recommend,to,use,link,types,pojo,class,param,pojo,class,pojo,class,param,fields,map,of,fields,that,map,a,name,to,type,information,the,map,key,is,the,name,of,the,field,and,the,value,is,its,type;public,static,t,type,information,t,pojo,class,t,pojo,class,map,string,type,information,fields,final,list,pojo,field,pojo,fields,new,array,list,fields,size,for,map,entry,string,type,information,field,fields,entry,set,final,field,f,type,extractor,get,declared,field,pojo,class,field,get,key,if,f,null,throw,new,invalid,types,exception,field,field,get,key,could,not,be,accessed,pojo,fields,add,new,pojo,field,f,field,get,value,return,new,pojo,type,info,pojo,class,pojo,fields
Types -> public static <T> TypeInformation<T> POJO(Class<T> pojoClass, Map<String, TypeInformation<?>> fields);1524407314;Returns type information for a POJO (Plain Old Java Object) and allows to specify all fields manually.__<p>A POJO class is public and standalone (no non-static inner class). It has a public no-argument_constructor. All non-static, non-transient fields in the class (and all superclasses) are either public_(and non-final) or have a public getter and a setter method that follows the Java beans naming_conventions for getters and setters.__<p>A POJO is a fixed-length, null-aware composite type with non-deterministic field order. Every field_can be null independent of the field's type.__<p>The generic types for all fields of the POJO can be defined in a hierarchy of subclasses.__<p>If Flink's type analyzer is unable to extract a POJO field, an_{@link org.apache.flink.api.common.functions.InvalidTypesException} is thrown.__<p><strong>Note:</strong> In most cases the type information of fields can be determined automatically,_we recommend to use {@link Types#POJO(Class)}.__@param pojoClass POJO class_@param fields map of fields that map a name to type information. The map key is the name of_the field and the value is its type.;public static <T> TypeInformation<T> POJO(Class<T> pojoClass, Map<String, TypeInformation<?>> fields) {_		final List<PojoField> pojoFields = new ArrayList<>(fields.size())__		for (Map.Entry<String, TypeInformation<?>> field : fields.entrySet()) {_			final Field f = TypeExtractor.getDeclaredField(pojoClass, field.getKey())__			if (f == null) {_				throw new InvalidTypesException("Field '" + field.getKey() + "'could not be accessed.")__			}_			pojoFields.add(new PojoField(f, field.getValue()))__		}__		return new PojoTypeInfo<>(pojoClass, pojoFields)__	};returns,type,information,for,a,pojo,plain,old,java,object,and,allows,to,specify,all,fields,manually,p,a,pojo,class,is,public,and,standalone,no,non,static,inner,class,it,has,a,public,no,argument,constructor,all,non,static,non,transient,fields,in,the,class,and,all,superclasses,are,either,public,and,non,final,or,have,a,public,getter,and,a,setter,method,that,follows,the,java,beans,naming,conventions,for,getters,and,setters,p,a,pojo,is,a,fixed,length,null,aware,composite,type,with,non,deterministic,field,order,every,field,can,be,null,independent,of,the,field,s,type,p,the,generic,types,for,all,fields,of,the,pojo,can,be,defined,in,a,hierarchy,of,subclasses,p,if,flink,s,type,analyzer,is,unable,to,extract,a,pojo,field,an,link,org,apache,flink,api,common,functions,invalid,types,exception,is,thrown,p,strong,note,strong,in,most,cases,the,type,information,of,fields,can,be,determined,automatically,we,recommend,to,use,link,types,pojo,class,param,pojo,class,pojo,class,param,fields,map,of,fields,that,map,a,name,to,type,information,the,map,key,is,the,name,of,the,field,and,the,value,is,its,type;public,static,t,type,information,t,pojo,class,t,pojo,class,map,string,type,information,fields,final,list,pojo,field,pojo,fields,new,array,list,fields,size,for,map,entry,string,type,information,field,fields,entry,set,final,field,f,type,extractor,get,declared,field,pojo,class,field,get,key,if,f,null,throw,new,invalid,types,exception,field,field,get,key,could,not,be,accessed,pojo,fields,add,new,pojo,field,f,field,get,value,return,new,pojo,type,info,pojo,class,pojo,fields
Types -> public static <T> TypeInformation<T> POJO(Class<T> pojoClass, Map<String, TypeInformation<?>> fields);1534883557;Returns type information for a POJO (Plain Old Java Object) and allows to specify all fields manually.__<p>A POJO class is public and standalone (no non-static inner class). It has a public no-argument_constructor. All non-static, non-transient fields in the class (and all superclasses) are either public_(and non-final) or have a public getter and a setter method that follows the Java beans naming_conventions for getters and setters.__<p>A POJO is a fixed-length, null-aware composite type with non-deterministic field order. Every field_can be null independent of the field's type.__<p>The generic types for all fields of the POJO can be defined in a hierarchy of subclasses.__<p>If Flink's type analyzer is unable to extract a POJO field, an_{@link org.apache.flink.api.common.functions.InvalidTypesException} is thrown.__<p><strong>Note:</strong> In most cases the type information of fields can be determined automatically,_we recommend to use {@link Types#POJO(Class)}.__@param pojoClass POJO class_@param fields map of fields that map a name to type information. The map key is the name of_the field and the value is its type.;public static <T> TypeInformation<T> POJO(Class<T> pojoClass, Map<String, TypeInformation<?>> fields) {_		final List<PojoField> pojoFields = new ArrayList<>(fields.size())__		for (Map.Entry<String, TypeInformation<?>> field : fields.entrySet()) {_			final Field f = TypeExtractor.getDeclaredField(pojoClass, field.getKey())__			if (f == null) {_				throw new InvalidTypesException("Field '" + field.getKey() + "'could not be accessed.")__			}_			pojoFields.add(new PojoField(f, field.getValue()))__		}__		return new PojoTypeInfo<>(pojoClass, pojoFields)__	};returns,type,information,for,a,pojo,plain,old,java,object,and,allows,to,specify,all,fields,manually,p,a,pojo,class,is,public,and,standalone,no,non,static,inner,class,it,has,a,public,no,argument,constructor,all,non,static,non,transient,fields,in,the,class,and,all,superclasses,are,either,public,and,non,final,or,have,a,public,getter,and,a,setter,method,that,follows,the,java,beans,naming,conventions,for,getters,and,setters,p,a,pojo,is,a,fixed,length,null,aware,composite,type,with,non,deterministic,field,order,every,field,can,be,null,independent,of,the,field,s,type,p,the,generic,types,for,all,fields,of,the,pojo,can,be,defined,in,a,hierarchy,of,subclasses,p,if,flink,s,type,analyzer,is,unable,to,extract,a,pojo,field,an,link,org,apache,flink,api,common,functions,invalid,types,exception,is,thrown,p,strong,note,strong,in,most,cases,the,type,information,of,fields,can,be,determined,automatically,we,recommend,to,use,link,types,pojo,class,param,pojo,class,pojo,class,param,fields,map,of,fields,that,map,a,name,to,type,information,the,map,key,is,the,name,of,the,field,and,the,value,is,its,type;public,static,t,type,information,t,pojo,class,t,pojo,class,map,string,type,information,fields,final,list,pojo,field,pojo,fields,new,array,list,fields,size,for,map,entry,string,type,information,field,fields,entry,set,final,field,f,type,extractor,get,declared,field,pojo,class,field,get,key,if,f,null,throw,new,invalid,types,exception,field,field,get,key,could,not,be,accessed,pojo,fields,add,new,pojo,field,f,field,get,value,return,new,pojo,type,info,pojo,class,pojo,fields
Types -> public static RowTypeInfo ROW_NAMED(String[] fieldNames, TypeInformation<?>... types);1492678357;Generates a RowTypeInfo with fields of the given types and with given names.__<p>Example use: {@code ROW_NAMED(new String[]{"name", "number"}, Types.STRING, Types.INT)}.__<p>This method is identical to {@code new RowTypeInfo(types, names)}.__@param fieldNames array of field names_@param types array of field types;public static RowTypeInfo ROW_NAMED(String[] fieldNames, TypeInformation<?>... types) {_		return new RowTypeInfo(types, fieldNames)__	};generates,a,row,type,info,with,fields,of,the,given,types,and,with,given,names,p,example,use,code,new,string,name,number,types,string,types,int,p,this,method,is,identical,to,code,new,row,type,info,types,names,param,field,names,array,of,field,names,param,types,array,of,field,types;public,static,row,type,info,string,field,names,type,information,types,return,new,row,type,info,types,field,names
Types -> public static RowTypeInfo ROW_NAMED(String[] fieldNames, TypeInformation<?>... types);1493217721;Generates a RowTypeInfo with fields of the given types and with given names.__<p>Example use: {@code ROW_NAMED(new String[]{"name", "number"}, Types.STRING, Types.INT)}.__<p>This method is identical to {@code new RowTypeInfo(types, names)}.__@param fieldNames array of field names_@param types array of field types;public static RowTypeInfo ROW_NAMED(String[] fieldNames, TypeInformation<?>... types) {_		return new RowTypeInfo(types, fieldNames)__	};generates,a,row,type,info,with,fields,of,the,given,types,and,with,given,names,p,example,use,code,new,string,name,number,types,string,types,int,p,this,method,is,identical,to,code,new,row,type,info,types,names,param,field,names,array,of,field,names,param,types,array,of,field,types;public,static,row,type,info,string,field,names,type,information,types,return,new,row,type,info,types,field,names
Types -> public static <T> TypeInformation<T> GENERIC(Class<T> genericClass);1513672409;Returns generic type information for any Java object. The serialization logic will_use the general purpose serializer Kryo.__<p>Generic types are black-boxes for Flink, but allow any object and null values in fields.__<p>By default, serialization of this type is not very efficient. Please read the documentation_about how to improve efficiency (namely by pre-registering classes).__@param genericClass any Java class;public static <T> TypeInformation<T> GENERIC(Class<T> genericClass) {_		return new GenericTypeInfo<>(genericClass)__	};returns,generic,type,information,for,any,java,object,the,serialization,logic,will,use,the,general,purpose,serializer,kryo,p,generic,types,are,black,boxes,for,flink,but,allow,any,object,and,null,values,in,fields,p,by,default,serialization,of,this,type,is,not,very,efficient,please,read,the,documentation,about,how,to,improve,efficiency,namely,by,pre,registering,classes,param,generic,class,any,java,class;public,static,t,type,information,t,generic,class,t,generic,class,return,new,generic,type,info,generic,class
Types -> public static <T> TypeInformation<T> GENERIC(Class<T> genericClass);1524407314;Returns generic type information for any Java object. The serialization logic will_use the general purpose serializer Kryo.__<p>Generic types are black-boxes for Flink, but allow any object and null values in fields.__<p>By default, serialization of this type is not very efficient. Please read the documentation_about how to improve efficiency (namely by pre-registering classes).__@param genericClass any Java class;public static <T> TypeInformation<T> GENERIC(Class<T> genericClass) {_		return new GenericTypeInfo<>(genericClass)__	};returns,generic,type,information,for,any,java,object,the,serialization,logic,will,use,the,general,purpose,serializer,kryo,p,generic,types,are,black,boxes,for,flink,but,allow,any,object,and,null,values,in,fields,p,by,default,serialization,of,this,type,is,not,very,efficient,please,read,the,documentation,about,how,to,improve,efficiency,namely,by,pre,registering,classes,param,generic,class,any,java,class;public,static,t,type,information,t,generic,class,t,generic,class,return,new,generic,type,info,generic,class
Types -> public static <T> TypeInformation<T> GENERIC(Class<T> genericClass);1534883557;Returns generic type information for any Java object. The serialization logic will_use the general purpose serializer Kryo.__<p>Generic types are black-boxes for Flink, but allow any object and null values in fields.__<p>By default, serialization of this type is not very efficient. Please read the documentation_about how to improve efficiency (namely by pre-registering classes).__@param genericClass any Java class;public static <T> TypeInformation<T> GENERIC(Class<T> genericClass) {_		return new GenericTypeInfo<>(genericClass)__	};returns,generic,type,information,for,any,java,object,the,serialization,logic,will,use,the,general,purpose,serializer,kryo,p,generic,types,are,black,boxes,for,flink,but,allow,any,object,and,null,values,in,fields,p,by,default,serialization,of,this,type,is,not,very,efficient,please,read,the,documentation,about,how,to,improve,efficiency,namely,by,pre,registering,classes,param,generic,class,any,java,class;public,static,t,type,information,t,generic,class,t,generic,class,return,new,generic,type,info,generic,class
Types -> public static <T extends Tuple> TypeInformation<T> TUPLE(Class<T> tupleSubclass);1513672409;Returns type information for typed subclasses of Flink's {@link org.apache.flink.api.java.tuple.Tuple}._Typed subclassed are classes that extend {@link org.apache.flink.api.java.tuple.Tuple0} till_{@link org.apache.flink.api.java.tuple.Tuple25} to provide types for all fields and might add_additional getters and setters for better readability. Additional member fields must not be added._A tuple must not be null.__<p>A tuple is a fixed-length composite type for storing multiple values in a_deterministic field order. Fields of a tuple are typed. Tuples are the most efficient composite_type_ a tuple does not support null-valued fields unless the type of the field supports nullability.__<p>The generic types for all fields of the tuple can be defined in a hierarchy of subclasses.__<p>If Flink's type analyzer is unable to extract a tuple type information with_type information for all fields, an {@link org.apache.flink.api.common.functions.InvalidTypesException}_is thrown.__<p>Example use:_<pre>_{@code_class MyTuple extends Tuple2<Integer, String> {__public int getId() { return f0_ }__public String getName() { return f1_ }____Types.TUPLE(MyTuple.class)_</pre>__@param tupleSubclass A subclass of {@link org.apache.flink.api.java.tuple.Tuple0} till_{@link org.apache.flink.api.java.tuple.Tuple25} that defines all field types and_does not add any additional fields;public static <T extends Tuple> TypeInformation<T> TUPLE(Class<T> tupleSubclass) {_		final TypeInformation<T> ti = TypeExtractor.createTypeInfo(tupleSubclass)__		if (ti instanceof TupleTypeInfo) {_			return ti__		}_		throw new InvalidTypesException("Tuple type expected but was: " + ti)__	};returns,type,information,for,typed,subclasses,of,flink,s,link,org,apache,flink,api,java,tuple,tuple,typed,subclassed,are,classes,that,extend,link,org,apache,flink,api,java,tuple,tuple0,till,link,org,apache,flink,api,java,tuple,tuple25,to,provide,types,for,all,fields,and,might,add,additional,getters,and,setters,for,better,readability,additional,member,fields,must,not,be,added,a,tuple,must,not,be,null,p,a,tuple,is,a,fixed,length,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,fields,of,a,tuple,are,typed,tuples,are,the,most,efficient,composite,type,a,tuple,does,not,support,null,valued,fields,unless,the,type,of,the,field,supports,nullability,p,the,generic,types,for,all,fields,of,the,tuple,can,be,defined,in,a,hierarchy,of,subclasses,p,if,flink,s,type,analyzer,is,unable,to,extract,a,tuple,type,information,with,type,information,for,all,fields,an,link,org,apache,flink,api,common,functions,invalid,types,exception,is,thrown,p,example,use,pre,code,class,my,tuple,extends,tuple2,integer,string,public,int,get,id,return,f0,public,string,get,name,return,f1,types,tuple,my,tuple,class,pre,param,tuple,subclass,a,subclass,of,link,org,apache,flink,api,java,tuple,tuple0,till,link,org,apache,flink,api,java,tuple,tuple25,that,defines,all,field,types,and,does,not,add,any,additional,fields;public,static,t,extends,tuple,type,information,t,tuple,class,t,tuple,subclass,final,type,information,t,ti,type,extractor,create,type,info,tuple,subclass,if,ti,instanceof,tuple,type,info,return,ti,throw,new,invalid,types,exception,tuple,type,expected,but,was,ti
Types -> public static <T extends Tuple> TypeInformation<T> TUPLE(Class<T> tupleSubclass);1524407314;Returns type information for typed subclasses of Flink's {@link org.apache.flink.api.java.tuple.Tuple}._Typed subclassed are classes that extend {@link org.apache.flink.api.java.tuple.Tuple0} till_{@link org.apache.flink.api.java.tuple.Tuple25} to provide types for all fields and might add_additional getters and setters for better readability. Additional member fields must not be added._A tuple must not be null.__<p>A tuple is a fixed-length composite type for storing multiple values in a_deterministic field order. Fields of a tuple are typed. Tuples are the most efficient composite_type_ a tuple does not support null-valued fields unless the type of the field supports nullability.__<p>The generic types for all fields of the tuple can be defined in a hierarchy of subclasses.__<p>If Flink's type analyzer is unable to extract a tuple type information with_type information for all fields, an {@link org.apache.flink.api.common.functions.InvalidTypesException}_is thrown.__<p>Example use:_<pre>_{@code_class MyTuple extends Tuple2<Integer, String> {__public int getId() { return f0_ }__public String getName() { return f1_ }____Types.TUPLE(MyTuple.class)_</pre>__@param tupleSubclass A subclass of {@link org.apache.flink.api.java.tuple.Tuple0} till_{@link org.apache.flink.api.java.tuple.Tuple25} that defines all field types and_does not add any additional fields;public static <T extends Tuple> TypeInformation<T> TUPLE(Class<T> tupleSubclass) {_		final TypeInformation<T> ti = TypeExtractor.createTypeInfo(tupleSubclass)__		if (ti instanceof TupleTypeInfo) {_			return ti__		}_		throw new InvalidTypesException("Tuple type expected but was: " + ti)__	};returns,type,information,for,typed,subclasses,of,flink,s,link,org,apache,flink,api,java,tuple,tuple,typed,subclassed,are,classes,that,extend,link,org,apache,flink,api,java,tuple,tuple0,till,link,org,apache,flink,api,java,tuple,tuple25,to,provide,types,for,all,fields,and,might,add,additional,getters,and,setters,for,better,readability,additional,member,fields,must,not,be,added,a,tuple,must,not,be,null,p,a,tuple,is,a,fixed,length,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,fields,of,a,tuple,are,typed,tuples,are,the,most,efficient,composite,type,a,tuple,does,not,support,null,valued,fields,unless,the,type,of,the,field,supports,nullability,p,the,generic,types,for,all,fields,of,the,tuple,can,be,defined,in,a,hierarchy,of,subclasses,p,if,flink,s,type,analyzer,is,unable,to,extract,a,tuple,type,information,with,type,information,for,all,fields,an,link,org,apache,flink,api,common,functions,invalid,types,exception,is,thrown,p,example,use,pre,code,class,my,tuple,extends,tuple2,integer,string,public,int,get,id,return,f0,public,string,get,name,return,f1,types,tuple,my,tuple,class,pre,param,tuple,subclass,a,subclass,of,link,org,apache,flink,api,java,tuple,tuple0,till,link,org,apache,flink,api,java,tuple,tuple25,that,defines,all,field,types,and,does,not,add,any,additional,fields;public,static,t,extends,tuple,type,information,t,tuple,class,t,tuple,subclass,final,type,information,t,ti,type,extractor,create,type,info,tuple,subclass,if,ti,instanceof,tuple,type,info,return,ti,throw,new,invalid,types,exception,tuple,type,expected,but,was,ti
Types -> public static <T extends Tuple> TypeInformation<T> TUPLE(Class<T> tupleSubclass);1534883557;Returns type information for typed subclasses of Flink's {@link org.apache.flink.api.java.tuple.Tuple}._Typed subclassed are classes that extend {@link org.apache.flink.api.java.tuple.Tuple0} till_{@link org.apache.flink.api.java.tuple.Tuple25} to provide types for all fields and might add_additional getters and setters for better readability. Additional member fields must not be added._A tuple must not be null.__<p>A tuple is a fixed-length composite type for storing multiple values in a_deterministic field order. Fields of a tuple are typed. Tuples are the most efficient composite_type_ a tuple does not support null-valued fields unless the type of the field supports nullability.__<p>The generic types for all fields of the tuple can be defined in a hierarchy of subclasses.__<p>If Flink's type analyzer is unable to extract a tuple type information with_type information for all fields, an {@link org.apache.flink.api.common.functions.InvalidTypesException}_is thrown.__<p>Example use:_<pre>_{@code_class MyTuple extends Tuple2<Integer, String> {__public int getId() { return f0_ }__public String getName() { return f1_ }____Types.TUPLE(MyTuple.class)_</pre>__@param tupleSubclass A subclass of {@link org.apache.flink.api.java.tuple.Tuple0} till_{@link org.apache.flink.api.java.tuple.Tuple25} that defines all field types and_does not add any additional fields;public static <T extends Tuple> TypeInformation<T> TUPLE(Class<T> tupleSubclass) {_		final TypeInformation<T> ti = TypeExtractor.createTypeInfo(tupleSubclass)__		if (ti instanceof TupleTypeInfo) {_			return ti__		}_		throw new InvalidTypesException("Tuple type expected but was: " + ti)__	};returns,type,information,for,typed,subclasses,of,flink,s,link,org,apache,flink,api,java,tuple,tuple,typed,subclassed,are,classes,that,extend,link,org,apache,flink,api,java,tuple,tuple0,till,link,org,apache,flink,api,java,tuple,tuple25,to,provide,types,for,all,fields,and,might,add,additional,getters,and,setters,for,better,readability,additional,member,fields,must,not,be,added,a,tuple,must,not,be,null,p,a,tuple,is,a,fixed,length,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,fields,of,a,tuple,are,typed,tuples,are,the,most,efficient,composite,type,a,tuple,does,not,support,null,valued,fields,unless,the,type,of,the,field,supports,nullability,p,the,generic,types,for,all,fields,of,the,tuple,can,be,defined,in,a,hierarchy,of,subclasses,p,if,flink,s,type,analyzer,is,unable,to,extract,a,tuple,type,information,with,type,information,for,all,fields,an,link,org,apache,flink,api,common,functions,invalid,types,exception,is,thrown,p,example,use,pre,code,class,my,tuple,extends,tuple2,integer,string,public,int,get,id,return,f0,public,string,get,name,return,f1,types,tuple,my,tuple,class,pre,param,tuple,subclass,a,subclass,of,link,org,apache,flink,api,java,tuple,tuple0,till,link,org,apache,flink,api,java,tuple,tuple25,that,defines,all,field,types,and,does,not,add,any,additional,fields;public,static,t,extends,tuple,type,information,t,tuple,class,t,tuple,subclass,final,type,information,t,ti,type,extractor,create,type,info,tuple,subclass,if,ti,instanceof,tuple,type,info,return,ti,throw,new,invalid,types,exception,tuple,type,expected,but,was,ti
Types -> public static <T> TypeInformation<T> POJO(Class<T> pojoClass);1513672409;Returns type information for a POJO (Plain Old Java Object).__<p>A POJO class is public and standalone (no non-static inner class). It has a public no-argument_constructor. All non-static, non-transient fields in the class (and all superclasses) are either public_(and non-final) or have a public getter and a setter method that follows the Java beans naming_conventions for getters and setters.__<p>A POJO is a fixed-length and null-aware composite type. Every field can be null independent_of the field's type.__<p>The generic types for all fields of the POJO can be defined in a hierarchy of subclasses.__<p>If Flink's type analyzer is unable to extract a valid POJO type information with_type information for all fields, an {@link org.apache.flink.api.common.functions.InvalidTypesException}_is thrown. Alternatively, you can use {@link Types#POJO(Class, Map)} to specify all fields manually.__@param pojoClass POJO class to be analyzed by Flink;public static <T> TypeInformation<T> POJO(Class<T> pojoClass) {_		final TypeInformation<T> ti = TypeExtractor.createTypeInfo(pojoClass)__		if (ti instanceof PojoTypeInfo) {_			return ti__		}_		throw new InvalidTypesException("POJO type expected but was: " + ti)__	};returns,type,information,for,a,pojo,plain,old,java,object,p,a,pojo,class,is,public,and,standalone,no,non,static,inner,class,it,has,a,public,no,argument,constructor,all,non,static,non,transient,fields,in,the,class,and,all,superclasses,are,either,public,and,non,final,or,have,a,public,getter,and,a,setter,method,that,follows,the,java,beans,naming,conventions,for,getters,and,setters,p,a,pojo,is,a,fixed,length,and,null,aware,composite,type,every,field,can,be,null,independent,of,the,field,s,type,p,the,generic,types,for,all,fields,of,the,pojo,can,be,defined,in,a,hierarchy,of,subclasses,p,if,flink,s,type,analyzer,is,unable,to,extract,a,valid,pojo,type,information,with,type,information,for,all,fields,an,link,org,apache,flink,api,common,functions,invalid,types,exception,is,thrown,alternatively,you,can,use,link,types,pojo,class,map,to,specify,all,fields,manually,param,pojo,class,pojo,class,to,be,analyzed,by,flink;public,static,t,type,information,t,pojo,class,t,pojo,class,final,type,information,t,ti,type,extractor,create,type,info,pojo,class,if,ti,instanceof,pojo,type,info,return,ti,throw,new,invalid,types,exception,pojo,type,expected,but,was,ti
Types -> public static <T> TypeInformation<T> POJO(Class<T> pojoClass);1524407314;Returns type information for a POJO (Plain Old Java Object).__<p>A POJO class is public and standalone (no non-static inner class). It has a public no-argument_constructor. All non-static, non-transient fields in the class (and all superclasses) are either public_(and non-final) or have a public getter and a setter method that follows the Java beans naming_conventions for getters and setters.__<p>A POJO is a fixed-length and null-aware composite type. Every field can be null independent_of the field's type.__<p>The generic types for all fields of the POJO can be defined in a hierarchy of subclasses.__<p>If Flink's type analyzer is unable to extract a valid POJO type information with_type information for all fields, an {@link org.apache.flink.api.common.functions.InvalidTypesException}_is thrown. Alternatively, you can use {@link Types#POJO(Class, Map)} to specify all fields manually.__@param pojoClass POJO class to be analyzed by Flink;public static <T> TypeInformation<T> POJO(Class<T> pojoClass) {_		final TypeInformation<T> ti = TypeExtractor.createTypeInfo(pojoClass)__		if (ti instanceof PojoTypeInfo) {_			return ti__		}_		throw new InvalidTypesException("POJO type expected but was: " + ti)__	};returns,type,information,for,a,pojo,plain,old,java,object,p,a,pojo,class,is,public,and,standalone,no,non,static,inner,class,it,has,a,public,no,argument,constructor,all,non,static,non,transient,fields,in,the,class,and,all,superclasses,are,either,public,and,non,final,or,have,a,public,getter,and,a,setter,method,that,follows,the,java,beans,naming,conventions,for,getters,and,setters,p,a,pojo,is,a,fixed,length,and,null,aware,composite,type,every,field,can,be,null,independent,of,the,field,s,type,p,the,generic,types,for,all,fields,of,the,pojo,can,be,defined,in,a,hierarchy,of,subclasses,p,if,flink,s,type,analyzer,is,unable,to,extract,a,valid,pojo,type,information,with,type,information,for,all,fields,an,link,org,apache,flink,api,common,functions,invalid,types,exception,is,thrown,alternatively,you,can,use,link,types,pojo,class,map,to,specify,all,fields,manually,param,pojo,class,pojo,class,to,be,analyzed,by,flink;public,static,t,type,information,t,pojo,class,t,pojo,class,final,type,information,t,ti,type,extractor,create,type,info,pojo,class,if,ti,instanceof,pojo,type,info,return,ti,throw,new,invalid,types,exception,pojo,type,expected,but,was,ti
Types -> public static <T> TypeInformation<T> POJO(Class<T> pojoClass);1534883557;Returns type information for a POJO (Plain Old Java Object).__<p>A POJO class is public and standalone (no non-static inner class). It has a public no-argument_constructor. All non-static, non-transient fields in the class (and all superclasses) are either public_(and non-final) or have a public getter and a setter method that follows the Java beans naming_conventions for getters and setters.__<p>A POJO is a fixed-length and null-aware composite type. Every field can be null independent_of the field's type.__<p>The generic types for all fields of the POJO can be defined in a hierarchy of subclasses.__<p>If Flink's type analyzer is unable to extract a valid POJO type information with_type information for all fields, an {@link org.apache.flink.api.common.functions.InvalidTypesException}_is thrown. Alternatively, you can use {@link Types#POJO(Class, Map)} to specify all fields manually.__@param pojoClass POJO class to be analyzed by Flink;public static <T> TypeInformation<T> POJO(Class<T> pojoClass) {_		final TypeInformation<T> ti = TypeExtractor.createTypeInfo(pojoClass)__		if (ti instanceof PojoTypeInfo) {_			return ti__		}_		throw new InvalidTypesException("POJO type expected but was: " + ti)__	};returns,type,information,for,a,pojo,plain,old,java,object,p,a,pojo,class,is,public,and,standalone,no,non,static,inner,class,it,has,a,public,no,argument,constructor,all,non,static,non,transient,fields,in,the,class,and,all,superclasses,are,either,public,and,non,final,or,have,a,public,getter,and,a,setter,method,that,follows,the,java,beans,naming,conventions,for,getters,and,setters,p,a,pojo,is,a,fixed,length,and,null,aware,composite,type,every,field,can,be,null,independent,of,the,field,s,type,p,the,generic,types,for,all,fields,of,the,pojo,can,be,defined,in,a,hierarchy,of,subclasses,p,if,flink,s,type,analyzer,is,unable,to,extract,a,valid,pojo,type,information,with,type,information,for,all,fields,an,link,org,apache,flink,api,common,functions,invalid,types,exception,is,thrown,alternatively,you,can,use,link,types,pojo,class,map,to,specify,all,fields,manually,param,pojo,class,pojo,class,to,be,analyzed,by,flink;public,static,t,type,information,t,pojo,class,t,pojo,class,final,type,information,t,ti,type,extractor,create,type,info,pojo,class,if,ti,instanceof,pojo,type,info,return,ti,throw,new,invalid,types,exception,pojo,type,expected,but,was,ti
Types -> public static <E> TypeInformation<List<E>> LIST(TypeInformation<E> elementType);1513672409;Returns type information for a Java {@link java.util.List}. A list must not be null. Null values_in elements are not supported.__<p>By default, lists are untyped and treated as a generic type in Flink_ therefore, it is useful_to pass type information whenever a list is used.__<p><strong>Note:</strong> Flink does not preserve the concrete {@link List} type. It converts a list into {@link ArrayList} when_copying or deserializing.__@param elementType type information for the list's elements;public static <E> TypeInformation<List<E>> LIST(TypeInformation<E> elementType) {_		return new ListTypeInfo<>(elementType)__	};returns,type,information,for,a,java,link,java,util,list,a,list,must,not,be,null,null,values,in,elements,are,not,supported,p,by,default,lists,are,untyped,and,treated,as,a,generic,type,in,flink,therefore,it,is,useful,to,pass,type,information,whenever,a,list,is,used,p,strong,note,strong,flink,does,not,preserve,the,concrete,link,list,type,it,converts,a,list,into,link,array,list,when,copying,or,deserializing,param,element,type,type,information,for,the,list,s,elements;public,static,e,type,information,list,e,list,type,information,e,element,type,return,new,list,type,info,element,type
Types -> public static <E> TypeInformation<List<E>> LIST(TypeInformation<E> elementType);1524407314;Returns type information for a Java {@link java.util.List}. A list must not be null. Null values_in elements are not supported.__<p>By default, lists are untyped and treated as a generic type in Flink_ therefore, it is useful_to pass type information whenever a list is used.__<p><strong>Note:</strong> Flink does not preserve the concrete {@link List} type. It converts a list into {@link ArrayList} when_copying or deserializing.__@param elementType type information for the list's elements;public static <E> TypeInformation<List<E>> LIST(TypeInformation<E> elementType) {_		return new ListTypeInfo<>(elementType)__	};returns,type,information,for,a,java,link,java,util,list,a,list,must,not,be,null,null,values,in,elements,are,not,supported,p,by,default,lists,are,untyped,and,treated,as,a,generic,type,in,flink,therefore,it,is,useful,to,pass,type,information,whenever,a,list,is,used,p,strong,note,strong,flink,does,not,preserve,the,concrete,link,list,type,it,converts,a,list,into,link,array,list,when,copying,or,deserializing,param,element,type,type,information,for,the,list,s,elements;public,static,e,type,information,list,e,list,type,information,e,element,type,return,new,list,type,info,element,type
Types -> public static <E> TypeInformation<List<E>> LIST(TypeInformation<E> elementType);1534883557;Returns type information for a Java {@link java.util.List}. A list must not be null. Null values_in elements are not supported.__<p>By default, lists are untyped and treated as a generic type in Flink_ therefore, it is useful_to pass type information whenever a list is used.__<p><strong>Note:</strong> Flink does not preserve the concrete {@link List} type. It converts a list into {@link ArrayList} when_copying or deserializing.__@param elementType type information for the list's elements;public static <E> TypeInformation<List<E>> LIST(TypeInformation<E> elementType) {_		return new ListTypeInfo<>(elementType)__	};returns,type,information,for,a,java,link,java,util,list,a,list,must,not,be,null,null,values,in,elements,are,not,supported,p,by,default,lists,are,untyped,and,treated,as,a,generic,type,in,flink,therefore,it,is,useful,to,pass,type,information,whenever,a,list,is,used,p,strong,note,strong,flink,does,not,preserve,the,concrete,link,list,type,it,converts,a,list,into,link,array,list,when,copying,or,deserializing,param,element,type,type,information,for,the,list,s,elements;public,static,e,type,information,list,e,list,type,information,e,element,type,return,new,list,type,info,element,type
Types -> public static TypeInformation<Row> ROW_NAMED(String[] fieldNames, TypeInformation<?>... types);1513672409;Returns type information for {@link org.apache.flink.types.Row} with fields of the given types and_with given names. A row must not be null.__<p>A row is a fixed-length, null-aware composite type for storing multiple values in a_deterministic field order. Every field can be null independent of the field's type._The type of row fields cannot be automatically inferred_ therefore, it is required to provide_type information whenever a row is used.__<p>The schema of rows can have up to <code>Integer.MAX_VALUE</code> fields, however, all row instances_must strictly adhere to the schema defined by the type info.__<p>Example use: {@code ROW_NAMED(new String[]{"name", "number"}, Types.STRING, Types.INT)}.__@param fieldNames array of field names_@param types array of field types;public static TypeInformation<Row> ROW_NAMED(String[] fieldNames, TypeInformation<?>... types) {_		return new RowTypeInfo(types, fieldNames)__	};returns,type,information,for,link,org,apache,flink,types,row,with,fields,of,the,given,types,and,with,given,names,a,row,must,not,be,null,p,a,row,is,a,fixed,length,null,aware,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,every,field,can,be,null,independent,of,the,field,s,type,the,type,of,row,fields,cannot,be,automatically,inferred,therefore,it,is,required,to,provide,type,information,whenever,a,row,is,used,p,the,schema,of,rows,can,have,up,to,code,integer,code,fields,however,all,row,instances,must,strictly,adhere,to,the,schema,defined,by,the,type,info,p,example,use,code,new,string,name,number,types,string,types,int,param,field,names,array,of,field,names,param,types,array,of,field,types;public,static,type,information,row,string,field,names,type,information,types,return,new,row,type,info,types,field,names
Types -> public static TypeInformation<Row> ROW_NAMED(String[] fieldNames, TypeInformation<?>... types);1524407314;Returns type information for {@link org.apache.flink.types.Row} with fields of the given types and_with given names. A row must not be null.__<p>A row is a fixed-length, null-aware composite type for storing multiple values in a_deterministic field order. Every field can be null independent of the field's type._The type of row fields cannot be automatically inferred_ therefore, it is required to provide_type information whenever a row is used.__<p>The schema of rows can have up to <code>Integer.MAX_VALUE</code> fields, however, all row instances_must strictly adhere to the schema defined by the type info.__<p>Example use: {@code ROW_NAMED(new String[]{"name", "number"}, Types.STRING, Types.INT)}.__@param fieldNames array of field names_@param types array of field types;public static TypeInformation<Row> ROW_NAMED(String[] fieldNames, TypeInformation<?>... types) {_		return new RowTypeInfo(types, fieldNames)__	};returns,type,information,for,link,org,apache,flink,types,row,with,fields,of,the,given,types,and,with,given,names,a,row,must,not,be,null,p,a,row,is,a,fixed,length,null,aware,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,every,field,can,be,null,independent,of,the,field,s,type,the,type,of,row,fields,cannot,be,automatically,inferred,therefore,it,is,required,to,provide,type,information,whenever,a,row,is,used,p,the,schema,of,rows,can,have,up,to,code,integer,code,fields,however,all,row,instances,must,strictly,adhere,to,the,schema,defined,by,the,type,info,p,example,use,code,new,string,name,number,types,string,types,int,param,field,names,array,of,field,names,param,types,array,of,field,types;public,static,type,information,row,string,field,names,type,information,types,return,new,row,type,info,types,field,names
Types -> public static TypeInformation<Row> ROW_NAMED(String[] fieldNames, TypeInformation<?>... types);1534883557;Returns type information for {@link org.apache.flink.types.Row} with fields of the given types and_with given names. A row must not be null.__<p>A row is a fixed-length, null-aware composite type for storing multiple values in a_deterministic field order. Every field can be null independent of the field's type._The type of row fields cannot be automatically inferred_ therefore, it is required to provide_type information whenever a row is used.__<p>The schema of rows can have up to <code>Integer.MAX_VALUE</code> fields, however, all row instances_must strictly adhere to the schema defined by the type info.__<p>Example use: {@code ROW_NAMED(new String[]{"name", "number"}, Types.STRING, Types.INT)}.__@param fieldNames array of field names_@param types array of field types;public static TypeInformation<Row> ROW_NAMED(String[] fieldNames, TypeInformation<?>... types) {_		return new RowTypeInfo(types, fieldNames)__	};returns,type,information,for,link,org,apache,flink,types,row,with,fields,of,the,given,types,and,with,given,names,a,row,must,not,be,null,p,a,row,is,a,fixed,length,null,aware,composite,type,for,storing,multiple,values,in,a,deterministic,field,order,every,field,can,be,null,independent,of,the,field,s,type,the,type,of,row,fields,cannot,be,automatically,inferred,therefore,it,is,required,to,provide,type,information,whenever,a,row,is,used,p,the,schema,of,rows,can,have,up,to,code,integer,code,fields,however,all,row,instances,must,strictly,adhere,to,the,schema,defined,by,the,type,info,p,example,use,code,new,string,name,number,types,string,types,int,param,field,names,array,of,field,names,param,types,array,of,field,types;public,static,type,information,row,string,field,names,type,information,types,return,new,row,type,info,types,field,names
