# id;timestamp;commentText;codeText;commentWords;codeWords
AggregateFunction -> ACC merge(ACC a, ACC b)_;1485370583;Merges two accumulators, returning an accumulator with the merged state.__<p>This function may reuse any of the given accumulators as the target for the merge_and return that. The assumption is that the given accumulators will not be used any_more after having been passed to this function.__@param a An accumulator to merge_@param b Another accumulator to merge__@return The accumulator with the merged state;ACC merge(ACC a, ACC b)_;merges,two,accumulators,returning,an,accumulator,with,the,merged,state,p,this,function,may,reuse,any,of,the,given,accumulators,as,the,target,for,the,merge,and,return,that,the,assumption,is,that,the,given,accumulators,will,not,be,used,any,more,after,having,been,passed,to,this,function,param,a,an,accumulator,to,merge,param,b,another,accumulator,to,merge,return,the,accumulator,with,the,merged,state;acc,merge,acc,a,acc,b
AggregateFunction -> ACC merge(ACC a, ACC b)_;1508571218;Merges two accumulators, returning an accumulator with the merged state.__<p>This function may reuse any of the given accumulators as the target for the merge_and return that. The assumption is that the given accumulators will not be used any_more after having been passed to this function.__@param a An accumulator to merge_@param b Another accumulator to merge__@return The accumulator with the merged state;ACC merge(ACC a, ACC b)_;merges,two,accumulators,returning,an,accumulator,with,the,merged,state,p,this,function,may,reuse,any,of,the,given,accumulators,as,the,target,for,the,merge,and,return,that,the,assumption,is,that,the,given,accumulators,will,not,be,used,any,more,after,having,been,passed,to,this,function,param,a,an,accumulator,to,merge,param,b,another,accumulator,to,merge,return,the,accumulator,with,the,merged,state;acc,merge,acc,a,acc,b
AggregateFunction -> ACC merge(ACC a, ACC b)_;1526630739;Merges two accumulators, returning an accumulator with the merged state.__<p>This function may reuse any of the given accumulators as the target for the merge_and return that. The assumption is that the given accumulators will not be used any_more after having been passed to this function.__@param a An accumulator to merge_@param b Another accumulator to merge__@return The accumulator with the merged state;ACC merge(ACC a, ACC b)_;merges,two,accumulators,returning,an,accumulator,with,the,merged,state,p,this,function,may,reuse,any,of,the,given,accumulators,as,the,target,for,the,merge,and,return,that,the,assumption,is,that,the,given,accumulators,will,not,be,used,any,more,after,having,been,passed,to,this,function,param,a,an,accumulator,to,merge,param,b,another,accumulator,to,merge,return,the,accumulator,with,the,merged,state;acc,merge,acc,a,acc,b
AggregateFunction -> ACC add(IN value, ACC accumulator)_;1508571218;Adds the given input value to the given accumulator, returning the_new accumulator value.__<p>For efficiency, the input accumulator may be modified and returned.__@param value The value to add_@param accumulator The accumulator to add the value to;ACC add(IN value, ACC accumulator)_;adds,the,given,input,value,to,the,given,accumulator,returning,the,new,accumulator,value,p,for,efficiency,the,input,accumulator,may,be,modified,and,returned,param,value,the,value,to,add,param,accumulator,the,accumulator,to,add,the,value,to;acc,add,in,value,acc,accumulator
AggregateFunction -> ACC add(IN value, ACC accumulator)_;1526630739;Adds the given input value to the given accumulator, returning the_new accumulator value.__<p>For efficiency, the input accumulator may be modified and returned.__@param value The value to add_@param accumulator The accumulator to add the value to;ACC add(IN value, ACC accumulator)_;adds,the,given,input,value,to,the,given,accumulator,returning,the,new,accumulator,value,p,for,efficiency,the,input,accumulator,may,be,modified,and,returned,param,value,the,value,to,add,param,accumulator,the,accumulator,to,add,the,value,to;acc,add,in,value,acc,accumulator
AggregateFunction -> ACC createAccumulator()_;1485370583;Creates a new accumulator, starting a new aggregate.__<p>The new accumulator is typically meaningless unless a value is added_via {@link #add(Object, Object)}.__<p>The accumulator is the state of a running aggregation. When a program has multiple_aggregates in progress (such as per key and window), the state (per key and window)_is the size of the accumulator.__@return A new accumulator, corresponding to an empty aggregate.;ACC createAccumulator()_;creates,a,new,accumulator,starting,a,new,aggregate,p,the,new,accumulator,is,typically,meaningless,unless,a,value,is,added,via,link,add,object,object,p,the,accumulator,is,the,state,of,a,running,aggregation,when,a,program,has,multiple,aggregates,in,progress,such,as,per,key,and,window,the,state,per,key,and,window,is,the,size,of,the,accumulator,return,a,new,accumulator,corresponding,to,an,empty,aggregate;acc,create,accumulator
AggregateFunction -> ACC createAccumulator()_;1508571218;Creates a new accumulator, starting a new aggregate.__<p>The new accumulator is typically meaningless unless a value is added_via {@link #add(Object, Object)}.__<p>The accumulator is the state of a running aggregation. When a program has multiple_aggregates in progress (such as per key and window), the state (per key and window)_is the size of the accumulator.__@return A new accumulator, corresponding to an empty aggregate.;ACC createAccumulator()_;creates,a,new,accumulator,starting,a,new,aggregate,p,the,new,accumulator,is,typically,meaningless,unless,a,value,is,added,via,link,add,object,object,p,the,accumulator,is,the,state,of,a,running,aggregation,when,a,program,has,multiple,aggregates,in,progress,such,as,per,key,and,window,the,state,per,key,and,window,is,the,size,of,the,accumulator,return,a,new,accumulator,corresponding,to,an,empty,aggregate;acc,create,accumulator
AggregateFunction -> ACC createAccumulator()_;1526630739;Creates a new accumulator, starting a new aggregate.__<p>The new accumulator is typically meaningless unless a value is added_via {@link #add(Object, Object)}.__<p>The accumulator is the state of a running aggregation. When a program has multiple_aggregates in progress (such as per key and window), the state (per key and window)_is the size of the accumulator.__@return A new accumulator, corresponding to an empty aggregate.;ACC createAccumulator()_;creates,a,new,accumulator,starting,a,new,aggregate,p,the,new,accumulator,is,typically,meaningless,unless,a,value,is,added,via,link,add,object,object,p,the,accumulator,is,the,state,of,a,running,aggregation,when,a,program,has,multiple,aggregates,in,progress,such,as,per,key,and,window,the,state,per,key,and,window,is,the,size,of,the,accumulator,return,a,new,accumulator,corresponding,to,an,empty,aggregate;acc,create,accumulator
AggregateFunction -> OUT getResult(ACC accumulator)_;1485370583;Gets the result of the aggregation from the accumulator.__@param accumulator The accumulator of the aggregation_@return The final aggregation result.;OUT getResult(ACC accumulator)_;gets,the,result,of,the,aggregation,from,the,accumulator,param,accumulator,the,accumulator,of,the,aggregation,return,the,final,aggregation,result;out,get,result,acc,accumulator
AggregateFunction -> OUT getResult(ACC accumulator)_;1508571218;Gets the result of the aggregation from the accumulator.__@param accumulator The accumulator of the aggregation_@return The final aggregation result.;OUT getResult(ACC accumulator)_;gets,the,result,of,the,aggregation,from,the,accumulator,param,accumulator,the,accumulator,of,the,aggregation,return,the,final,aggregation,result;out,get,result,acc,accumulator
AggregateFunction -> OUT getResult(ACC accumulator)_;1526630739;Gets the result of the aggregation from the accumulator.__@param accumulator The accumulator of the aggregation_@return The final aggregation result.;OUT getResult(ACC accumulator)_;gets,the,result,of,the,aggregation,from,the,accumulator,param,accumulator,the,accumulator,of,the,aggregation,return,the,final,aggregation,result;out,get,result,acc,accumulator
