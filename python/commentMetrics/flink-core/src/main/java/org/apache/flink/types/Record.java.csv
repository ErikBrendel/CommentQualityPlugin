# id;timestamp;commentText;codeText;commentWords;codeWords
Record -> public Record(int numFields);1405024514;Creates a new record, containing the given number of fields. The fields are initially all nulls.__@param numFields The number of fields for the record.;public Record(int numFields) {_		setNumFields(numFields)__	};creates,a,new,record,containing,the,given,number,of,fields,the,fields,are,initially,all,nulls,param,num,fields,the,number,of,fields,for,the,record;public,record,int,num,fields,set,num,fields,num,fields
Record -> public Record(int numFields);1405090423;Creates a new record, containing the given number of fields. The fields are initially all nulls.__@param numFields The number of fields for the record.;public Record(int numFields) {_		setNumFields(numFields)__	};creates,a,new,record,containing,the,given,number,of,fields,the,fields,are,initially,all,nulls,param,num,fields,the,number,of,fields,for,the,record;public,record,int,num,fields,set,num,fields,num,fields
Record -> public Record(int numFields);1411473593;Creates a new record, containing the given number of fields. The fields are initially all nulls.__@param numFields The number of fields for the record.;public Record(int numFields) {_		setNumFields(numFields)__	};creates,a,new,record,containing,the,given,number,of,fields,the,fields,are,initially,all,nulls,param,num,fields,the,number,of,fields,for,the,record;public,record,int,num,fields,set,num,fields,num,fields
Record -> public Record(int numFields);1414786554;Creates a new record, containing the given number of fields. The fields are initially all nulls.__@param numFields The number of fields for the record.;public Record(int numFields) {_		setNumFields(numFields)__	};creates,a,new,record,containing,the,given,number,of,fields,the,fields,are,initially,all,nulls,param,num,fields,the,number,of,fields,for,the,record;public,record,int,num,fields,set,num,fields,num,fields
Record -> public Record(int numFields);1423847366;Creates a new record, containing the given number of fields. The fields are initially all nulls.__@param numFields The number of fields for the record.;public Record(int numFields) {_		setNumFields(numFields)__	};creates,a,new,record,containing,the,given,number,of,fields,the,fields,are,initially,all,nulls,param,num,fields,the,number,of,fields,for,the,record;public,record,int,num,fields,set,num,fields,num,fields
Record -> public Record(int numFields);1443521887;Creates a new record, containing the given number of fields. The fields are initially all nulls.__@param numFields The number of fields for the record.;public Record(int numFields) {_		setNumFields(numFields)__	};creates,a,new,record,containing,the,given,number,of,fields,the,fields,are,initially,all,nulls,param,num,fields,the,number,of,fields,for,the,record;public,record,int,num,fields,set,num,fields,num,fields
Record -> public Record(int numFields);1446112342;Creates a new record, containing the given number of fields. The fields are initially all nulls.__@param numFields The number of fields for the record.;public Record(int numFields) {_		setNumFields(numFields)__	};creates,a,new,record,containing,the,given,number,of,fields,the,fields,are,initially,all,nulls,param,num,fields,the,number,of,fields,for,the,record;public,record,int,num,fields,set,num,fields,num,fields
Record -> public Record(int numFields);1448491524;Creates a new record, containing the given number of fields. The fields are initially all nulls.__@param numFields The number of fields for the record.;public Record(int numFields) {_		setNumFields(numFields)__	};creates,a,new,record,containing,the,given,number,of,fields,the,fields,are,initially,all,nulls,param,num,fields,the,number,of,fields,for,the,record;public,record,int,num,fields,set,num,fields,num,fields
Record -> public Record(int numFields);1452178883;Creates a new record, containing the given number of fields. The fields are initially all nulls.__@param numFields The number of fields for the record.;public Record(int numFields) {_		setNumFields(numFields)__	};creates,a,new,record,containing,the,given,number,of,fields,the,fields,are,initially,all,nulls,param,num,fields,the,number,of,fields,for,the,record;public,record,int,num,fields,set,num,fields,num,fields
Record -> public Record(int numFields);1489589988;Creates a new record, containing the given number of fields. The fields are initially all nulls.__@param numFields The number of fields for the record.;public Record(int numFields) {_		setNumFields(numFields)__	};creates,a,new,record,containing,the,given,number,of,fields,the,fields,are,initially,all,nulls,param,num,fields,the,number,of,fields,for,the,record;public,record,int,num,fields,set,num,fields,num,fields
Record -> public boolean getFieldsInto(int[] positions, Value[] targets);1405024514;Gets the fields at the given positions into an array._If at any position a field is null, then this method returns false._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@return True if all fields were successfully read, false if some read failed.;public boolean getFieldsInto(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				return false__			}_		}_		return true__	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,returns,false,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,return,true,if,all,fields,were,successfully,read,false,if,some,read,failed;public,boolean,get,fields,into,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,return,false,return,true
Record -> public boolean getFieldsInto(int[] positions, Value[] targets);1405090423;Gets the fields at the given positions into an array._If at any position a field is null, then this method returns false._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@return True if all fields were successfully read, false if some read failed.;public boolean getFieldsInto(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				return false__			}_		}_		return true__	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,returns,false,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,return,true,if,all,fields,were,successfully,read,false,if,some,read,failed;public,boolean,get,fields,into,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,return,false,return,true
Record -> public boolean getFieldsInto(int[] positions, Value[] targets);1411473593;Gets the fields at the given positions into an array._If at any position a field is null, then this method returns false._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@return True if all fields were successfully read, false if some read failed.;public boolean getFieldsInto(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				return false__			}_		}_		return true__	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,returns,false,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,return,true,if,all,fields,were,successfully,read,false,if,some,read,failed;public,boolean,get,fields,into,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,return,false,return,true
Record -> public boolean getFieldsInto(int[] positions, Value[] targets);1414786554;Gets the fields at the given positions into an array._If at any position a field is null, then this method returns false._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@return True if all fields were successfully read, false if some read failed.;public boolean getFieldsInto(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				return false__			}_		}_		return true__	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,returns,false,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,return,true,if,all,fields,were,successfully,read,false,if,some,read,failed;public,boolean,get,fields,into,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,return,false,return,true
Record -> public boolean getFieldsInto(int[] positions, Value[] targets);1423847366;Gets the fields at the given positions into an array._If at any position a field is null, then this method returns false._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@return True if all fields were successfully read, false if some read failed.;public boolean getFieldsInto(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				return false__			}_		}_		return true__	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,returns,false,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,return,true,if,all,fields,were,successfully,read,false,if,some,read,failed;public,boolean,get,fields,into,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,return,false,return,true
Record -> public boolean getFieldsInto(int[] positions, Value[] targets);1443521887;Gets the fields at the given positions into an array._If at any position a field is null, then this method returns false._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@return True if all fields were successfully read, false if some read failed.;public boolean getFieldsInto(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				return false__			}_		}_		return true__	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,returns,false,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,return,true,if,all,fields,were,successfully,read,false,if,some,read,failed;public,boolean,get,fields,into,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,return,false,return,true
Record -> public boolean getFieldsInto(int[] positions, Value[] targets);1446112342;Gets the fields at the given positions into an array._If at any position a field is null, then this method returns false._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@return True if all fields were successfully read, false if some read failed.;public boolean getFieldsInto(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				return false__			}_		}_		return true__	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,returns,false,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,return,true,if,all,fields,were,successfully,read,false,if,some,read,failed;public,boolean,get,fields,into,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,return,false,return,true
Record -> public boolean getFieldsInto(int[] positions, Value[] targets);1448491524;Gets the fields at the given positions into an array._If at any position a field is null, then this method returns false._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@return True if all fields were successfully read, false if some read failed.;public boolean getFieldsInto(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				return false__			}_		}_		return true__	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,returns,false,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,return,true,if,all,fields,were,successfully,read,false,if,some,read,failed;public,boolean,get,fields,into,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,return,false,return,true
Record -> public boolean getFieldsInto(int[] positions, Value[] targets);1452178883;Gets the fields at the given positions into an array._If at any position a field is null, then this method returns false._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@return True if all fields were successfully read, false if some read failed.;public boolean getFieldsInto(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				return false__			}_		}_		return true__	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,returns,false,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,return,true,if,all,fields,were,successfully,read,false,if,some,read,failed;public,boolean,get,fields,into,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,return,false,return,true
Record -> public boolean getFieldsInto(int[] positions, Value[] targets);1489589988;Gets the fields at the given positions into an array._If at any position a field is null, then this method returns false._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@return True if all fields were successfully read, false if some read failed.;public boolean getFieldsInto(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				return false__			}_		}_		return true__	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,returns,false,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,return,true,if,all,fields,were,successfully,read,false,if,some,read,failed;public,boolean,get,fields,into,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,return,false,return,true
Record -> public int getNumFields();1405024514;Gets the number of fields currently in the record. This also includes null fields.__@return The number of fields in the record.;public int getNumFields() {_		return this.numFields__	};gets,the,number,of,fields,currently,in,the,record,this,also,includes,null,fields,return,the,number,of,fields,in,the,record;public,int,get,num,fields,return,this,num,fields
Record -> public int getNumFields();1405090423;Gets the number of fields currently in the record. This also includes null fields.__@return The number of fields in the record.;public int getNumFields() {_		return this.numFields__	};gets,the,number,of,fields,currently,in,the,record,this,also,includes,null,fields,return,the,number,of,fields,in,the,record;public,int,get,num,fields,return,this,num,fields
Record -> public int getNumFields();1411473593;Gets the number of fields currently in the record. This also includes null fields.__@return The number of fields in the record.;public int getNumFields() {_		return this.numFields__	};gets,the,number,of,fields,currently,in,the,record,this,also,includes,null,fields,return,the,number,of,fields,in,the,record;public,int,get,num,fields,return,this,num,fields
Record -> public int getNumFields();1414786554;Gets the number of fields currently in the record. This also includes null fields.__@return The number of fields in the record.;public int getNumFields() {_		return this.numFields__	};gets,the,number,of,fields,currently,in,the,record,this,also,includes,null,fields,return,the,number,of,fields,in,the,record;public,int,get,num,fields,return,this,num,fields
Record -> public int getNumFields();1423847366;Gets the number of fields currently in the record. This also includes null fields.__@return The number of fields in the record.;public int getNumFields() {_		return this.numFields__	};gets,the,number,of,fields,currently,in,the,record,this,also,includes,null,fields,return,the,number,of,fields,in,the,record;public,int,get,num,fields,return,this,num,fields
Record -> public int getNumFields();1443521887;Gets the number of fields currently in the record. This also includes null fields.__@return The number of fields in the record.;public int getNumFields() {_		return this.numFields__	};gets,the,number,of,fields,currently,in,the,record,this,also,includes,null,fields,return,the,number,of,fields,in,the,record;public,int,get,num,fields,return,this,num,fields
Record -> public int getNumFields();1446112342;Gets the number of fields currently in the record. This also includes null fields.__@return The number of fields in the record.;public int getNumFields() {_		return this.numFields__	};gets,the,number,of,fields,currently,in,the,record,this,also,includes,null,fields,return,the,number,of,fields,in,the,record;public,int,get,num,fields,return,this,num,fields
Record -> public int getNumFields();1448491524;Gets the number of fields currently in the record. This also includes null fields.__@return The number of fields in the record.;public int getNumFields() {_		return this.numFields__	};gets,the,number,of,fields,currently,in,the,record,this,also,includes,null,fields,return,the,number,of,fields,in,the,record;public,int,get,num,fields,return,this,num,fields
Record -> public int getNumFields();1452178883;Gets the number of fields currently in the record. This also includes null fields.__@return The number of fields in the record.;public int getNumFields() {_		return this.numFields__	};gets,the,number,of,fields,currently,in,the,record,this,also,includes,null,fields,return,the,number,of,fields,in,the,record;public,int,get,num,fields,return,this,num,fields
Record -> public int getNumFields();1489589988;Gets the number of fields currently in the record. This also includes null fields.__@return The number of fields in the record.;public int getNumFields() {_		return this.numFields__	};gets,the,number,of,fields,currently,in,the,record,this,also,includes,null,fields,return,the,number,of,fields,in,the,record;public,int,get,num,fields,return,this,num,fields
Record -> public Record createCopy();1405024514;Creates an exact copy of this record.__@return An exact copy of this record.;public Record createCopy() {_		final Record rec = new Record()__		copyTo(rec)__		return rec__	};creates,an,exact,copy,of,this,record,return,an,exact,copy,of,this,record;public,record,create,copy,final,record,rec,new,record,copy,to,rec,return,rec
Record -> public Record createCopy();1405090423;Creates an exact copy of this record.__@return An exact copy of this record.;public Record createCopy() {_		final Record rec = new Record()__		copyTo(rec)__		return rec__	};creates,an,exact,copy,of,this,record,return,an,exact,copy,of,this,record;public,record,create,copy,final,record,rec,new,record,copy,to,rec,return,rec
Record -> public Record createCopy();1411473593;Creates an exact copy of this record.__@return An exact copy of this record.;public Record createCopy() {_		final Record rec = new Record()__		copyTo(rec)__		return rec__	};creates,an,exact,copy,of,this,record,return,an,exact,copy,of,this,record;public,record,create,copy,final,record,rec,new,record,copy,to,rec,return,rec
Record -> public Record createCopy();1414786554;Creates an exact copy of this record.__@return An exact copy of this record.;public Record createCopy() {_		final Record rec = new Record()__		copyTo(rec)__		return rec__	};creates,an,exact,copy,of,this,record,return,an,exact,copy,of,this,record;public,record,create,copy,final,record,rec,new,record,copy,to,rec,return,rec
Record -> public Record createCopy();1423847366;Creates an exact copy of this record.__@return An exact copy of this record.;public Record createCopy() {_		final Record rec = new Record()__		copyTo(rec)__		return rec__	};creates,an,exact,copy,of,this,record,return,an,exact,copy,of,this,record;public,record,create,copy,final,record,rec,new,record,copy,to,rec,return,rec
Record -> public Record createCopy();1443521887;Creates an exact copy of this record.__@return An exact copy of this record.;public Record createCopy() {_		final Record rec = new Record()__		copyTo(rec)__		return rec__	};creates,an,exact,copy,of,this,record,return,an,exact,copy,of,this,record;public,record,create,copy,final,record,rec,new,record,copy,to,rec,return,rec
Record -> public Record createCopy();1446112342;Creates an exact copy of this record.__@return An exact copy of this record.;public Record createCopy() {_		final Record rec = new Record()__		copyTo(rec)__		return rec__	};creates,an,exact,copy,of,this,record,return,an,exact,copy,of,this,record;public,record,create,copy,final,record,rec,new,record,copy,to,rec,return,rec
Record -> public Record createCopy();1448491524;Creates an exact copy of this record.__@return An exact copy of this record.;public Record createCopy() {_		final Record rec = new Record()__		copyTo(rec)__		return rec__	};creates,an,exact,copy,of,this,record,return,an,exact,copy,of,this,record;public,record,create,copy,final,record,rec,new,record,copy,to,rec,return,rec
Record -> public Record createCopy();1452178883;Creates an exact copy of this record.__@return An exact copy of this record.;public Record createCopy() {_		final Record rec = new Record()__		copyTo(rec)__		return rec__	};creates,an,exact,copy,of,this,record,return,an,exact,copy,of,this,record;public,record,create,copy,final,record,rec,new,record,copy,to,rec,return,rec
Record -> public Record createCopy();1489589988;Creates an exact copy of this record.__@return An exact copy of this record.;public Record createCopy() {_		final Record rec = new Record()__		copyTo(rec)__		return rec__	};creates,an,exact,copy,of,this,record,return,an,exact,copy,of,this,record;public,record,create,copy,final,record,rec,new,record,copy,to,rec,return,rec
Record -> public void removeField(int fieldNum);1405024514;Removes the field at the given position._<p>_This method should be used carefully. Be aware that as the field is actually removed from the record, the_total number of fields is modified, and all fields to the right of the field removed shift one position to_the left.__@param fieldNum The position of the field to be removed, starting at zero._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void removeField(int fieldNum)_	{_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		int lastIndex = this.numFields - 1_		__		if (fieldNum < lastIndex) {_			int len = lastIndex - fieldNum__			System.arraycopy(this.offsets, fieldNum + 1, this.offsets, fieldNum, len)__			System.arraycopy(this.lengths, fieldNum + 1, this.lengths, fieldNum, len)__			System.arraycopy(this.readFields, fieldNum + 1, this.readFields, fieldNum, len)__			System.arraycopy(this.writeFields, fieldNum + 1, this.writeFields, fieldNum, len)__			markModified(fieldNum)__		}_		this.offsets[lastIndex] = NULL_INDICATOR_OFFSET__		this.lengths[lastIndex] = 0__		this.writeFields[lastIndex] = null___		setNumFields(lastIndex)__	};removes,the,field,at,the,given,position,p,this,method,should,be,used,carefully,be,aware,that,as,the,field,is,actually,removed,from,the,record,the,total,number,of,fields,is,modified,and,all,fields,to,the,right,of,the,field,removed,shift,one,position,to,the,left,param,field,num,the,position,of,the,field,to,be,removed,starting,at,zero,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,remove,field,int,field,num,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,last,index,this,num,fields,1,if,field,num,last,index,int,len,last,index,field,num,system,arraycopy,this,offsets,field,num,1,this,offsets,field,num,len,system,arraycopy,this,lengths,field,num,1,this,lengths,field,num,len,system,arraycopy,this,read,fields,field,num,1,this,read,fields,field,num,len,system,arraycopy,this,write,fields,field,num,1,this,write,fields,field,num,len,mark,modified,field,num,this,offsets,last,index,this,lengths,last,index,0,this,write,fields,last,index,null,set,num,fields,last,index
Record -> public void removeField(int fieldNum);1405090423;Removes the field at the given position._<p>_This method should be used carefully. Be aware that as the field is actually removed from the record, the_total number of fields is modified, and all fields to the right of the field removed shift one position to_the left.__@param fieldNum The position of the field to be removed, starting at zero._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void removeField(int fieldNum)_	{_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		int lastIndex = this.numFields - 1_		__		if (fieldNum < lastIndex) {_			int len = lastIndex - fieldNum__			System.arraycopy(this.offsets, fieldNum + 1, this.offsets, fieldNum, len)__			System.arraycopy(this.lengths, fieldNum + 1, this.lengths, fieldNum, len)__			System.arraycopy(this.readFields, fieldNum + 1, this.readFields, fieldNum, len)__			System.arraycopy(this.writeFields, fieldNum + 1, this.writeFields, fieldNum, len)__			markModified(fieldNum)__		}_		this.offsets[lastIndex] = NULL_INDICATOR_OFFSET__		this.lengths[lastIndex] = 0__		this.writeFields[lastIndex] = null___		setNumFields(lastIndex)__	};removes,the,field,at,the,given,position,p,this,method,should,be,used,carefully,be,aware,that,as,the,field,is,actually,removed,from,the,record,the,total,number,of,fields,is,modified,and,all,fields,to,the,right,of,the,field,removed,shift,one,position,to,the,left,param,field,num,the,position,of,the,field,to,be,removed,starting,at,zero,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,remove,field,int,field,num,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,last,index,this,num,fields,1,if,field,num,last,index,int,len,last,index,field,num,system,arraycopy,this,offsets,field,num,1,this,offsets,field,num,len,system,arraycopy,this,lengths,field,num,1,this,lengths,field,num,len,system,arraycopy,this,read,fields,field,num,1,this,read,fields,field,num,len,system,arraycopy,this,write,fields,field,num,1,this,write,fields,field,num,len,mark,modified,field,num,this,offsets,last,index,this,lengths,last,index,0,this,write,fields,last,index,null,set,num,fields,last,index
Record -> public void removeField(int fieldNum);1411473593;Removes the field at the given position._<p>_This method should be used carefully. Be aware that as the field is actually removed from the record, the_total number of fields is modified, and all fields to the right of the field removed shift one position to_the left.__@param fieldNum The position of the field to be removed, starting at zero._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void removeField(int fieldNum)_	{_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		int lastIndex = this.numFields - 1_		__		if (fieldNum < lastIndex) {_			int len = lastIndex - fieldNum__			System.arraycopy(this.offsets, fieldNum + 1, this.offsets, fieldNum, len)__			System.arraycopy(this.lengths, fieldNum + 1, this.lengths, fieldNum, len)__			System.arraycopy(this.readFields, fieldNum + 1, this.readFields, fieldNum, len)__			System.arraycopy(this.writeFields, fieldNum + 1, this.writeFields, fieldNum, len)__			markModified(fieldNum)__		}_		this.offsets[lastIndex] = NULL_INDICATOR_OFFSET__		this.lengths[lastIndex] = 0__		this.writeFields[lastIndex] = null___		setNumFields(lastIndex)__	};removes,the,field,at,the,given,position,p,this,method,should,be,used,carefully,be,aware,that,as,the,field,is,actually,removed,from,the,record,the,total,number,of,fields,is,modified,and,all,fields,to,the,right,of,the,field,removed,shift,one,position,to,the,left,param,field,num,the,position,of,the,field,to,be,removed,starting,at,zero,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,remove,field,int,field,num,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,last,index,this,num,fields,1,if,field,num,last,index,int,len,last,index,field,num,system,arraycopy,this,offsets,field,num,1,this,offsets,field,num,len,system,arraycopy,this,lengths,field,num,1,this,lengths,field,num,len,system,arraycopy,this,read,fields,field,num,1,this,read,fields,field,num,len,system,arraycopy,this,write,fields,field,num,1,this,write,fields,field,num,len,mark,modified,field,num,this,offsets,last,index,this,lengths,last,index,0,this,write,fields,last,index,null,set,num,fields,last,index
Record -> public void removeField(int fieldNum);1414786554;Removes the field at the given position._<p>_This method should be used carefully. Be aware that as the field is actually removed from the record, the_total number of fields is modified, and all fields to the right of the field removed shift one position to_the left.__@param fieldNum The position of the field to be removed, starting at zero._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void removeField(int fieldNum)_	{_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		int lastIndex = this.numFields - 1_		__		if (fieldNum < lastIndex) {_			int len = lastIndex - fieldNum__			System.arraycopy(this.offsets, fieldNum + 1, this.offsets, fieldNum, len)__			System.arraycopy(this.lengths, fieldNum + 1, this.lengths, fieldNum, len)__			System.arraycopy(this.readFields, fieldNum + 1, this.readFields, fieldNum, len)__			System.arraycopy(this.writeFields, fieldNum + 1, this.writeFields, fieldNum, len)__			markModified(fieldNum)__		}_		this.offsets[lastIndex] = NULL_INDICATOR_OFFSET__		this.lengths[lastIndex] = 0__		this.writeFields[lastIndex] = null___		setNumFields(lastIndex)__	};removes,the,field,at,the,given,position,p,this,method,should,be,used,carefully,be,aware,that,as,the,field,is,actually,removed,from,the,record,the,total,number,of,fields,is,modified,and,all,fields,to,the,right,of,the,field,removed,shift,one,position,to,the,left,param,field,num,the,position,of,the,field,to,be,removed,starting,at,zero,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,remove,field,int,field,num,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,last,index,this,num,fields,1,if,field,num,last,index,int,len,last,index,field,num,system,arraycopy,this,offsets,field,num,1,this,offsets,field,num,len,system,arraycopy,this,lengths,field,num,1,this,lengths,field,num,len,system,arraycopy,this,read,fields,field,num,1,this,read,fields,field,num,len,system,arraycopy,this,write,fields,field,num,1,this,write,fields,field,num,len,mark,modified,field,num,this,offsets,last,index,this,lengths,last,index,0,this,write,fields,last,index,null,set,num,fields,last,index
Record -> public void removeField(int fieldNum);1423847366;Removes the field at the given position._<p>_This method should be used carefully. Be aware that as the field is actually removed from the record, the_total number of fields is modified, and all fields to the right of the field removed shift one position to_the left.__@param fieldNum The position of the field to be removed, starting at zero._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void removeField(int fieldNum)_	{_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		int lastIndex = this.numFields - 1_		__		if (fieldNum < lastIndex) {_			int len = lastIndex - fieldNum__			System.arraycopy(this.offsets, fieldNum + 1, this.offsets, fieldNum, len)__			System.arraycopy(this.lengths, fieldNum + 1, this.lengths, fieldNum, len)__			System.arraycopy(this.readFields, fieldNum + 1, this.readFields, fieldNum, len)__			System.arraycopy(this.writeFields, fieldNum + 1, this.writeFields, fieldNum, len)__			markModified(fieldNum)__		}_		this.offsets[lastIndex] = NULL_INDICATOR_OFFSET__		this.lengths[lastIndex] = 0__		this.writeFields[lastIndex] = null___		setNumFields(lastIndex)__	};removes,the,field,at,the,given,position,p,this,method,should,be,used,carefully,be,aware,that,as,the,field,is,actually,removed,from,the,record,the,total,number,of,fields,is,modified,and,all,fields,to,the,right,of,the,field,removed,shift,one,position,to,the,left,param,field,num,the,position,of,the,field,to,be,removed,starting,at,zero,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,remove,field,int,field,num,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,last,index,this,num,fields,1,if,field,num,last,index,int,len,last,index,field,num,system,arraycopy,this,offsets,field,num,1,this,offsets,field,num,len,system,arraycopy,this,lengths,field,num,1,this,lengths,field,num,len,system,arraycopy,this,read,fields,field,num,1,this,read,fields,field,num,len,system,arraycopy,this,write,fields,field,num,1,this,write,fields,field,num,len,mark,modified,field,num,this,offsets,last,index,this,lengths,last,index,0,this,write,fields,last,index,null,set,num,fields,last,index
Record -> public void removeField(int fieldNum);1443521887;Removes the field at the given position._<p>_This method should be used carefully. Be aware that as the field is actually removed from the record, the_total number of fields is modified, and all fields to the right of the field removed shift one position to_the left.__@param fieldNum The position of the field to be removed, starting at zero._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void removeField(int fieldNum)_	{_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		int lastIndex = this.numFields - 1_		__		if (fieldNum < lastIndex) {_			int len = lastIndex - fieldNum__			System.arraycopy(this.offsets, fieldNum + 1, this.offsets, fieldNum, len)__			System.arraycopy(this.lengths, fieldNum + 1, this.lengths, fieldNum, len)__			System.arraycopy(this.readFields, fieldNum + 1, this.readFields, fieldNum, len)__			System.arraycopy(this.writeFields, fieldNum + 1, this.writeFields, fieldNum, len)__			markModified(fieldNum)__		}_		this.offsets[lastIndex] = NULL_INDICATOR_OFFSET__		this.lengths[lastIndex] = 0__		this.writeFields[lastIndex] = null___		setNumFields(lastIndex)__	};removes,the,field,at,the,given,position,p,this,method,should,be,used,carefully,be,aware,that,as,the,field,is,actually,removed,from,the,record,the,total,number,of,fields,is,modified,and,all,fields,to,the,right,of,the,field,removed,shift,one,position,to,the,left,param,field,num,the,position,of,the,field,to,be,removed,starting,at,zero,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,remove,field,int,field,num,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,last,index,this,num,fields,1,if,field,num,last,index,int,len,last,index,field,num,system,arraycopy,this,offsets,field,num,1,this,offsets,field,num,len,system,arraycopy,this,lengths,field,num,1,this,lengths,field,num,len,system,arraycopy,this,read,fields,field,num,1,this,read,fields,field,num,len,system,arraycopy,this,write,fields,field,num,1,this,write,fields,field,num,len,mark,modified,field,num,this,offsets,last,index,this,lengths,last,index,0,this,write,fields,last,index,null,set,num,fields,last,index
Record -> public void removeField(int fieldNum);1446112342;Removes the field at the given position._<p>_This method should be used carefully. Be aware that as the field is actually removed from the record, the_total number of fields is modified, and all fields to the right of the field removed shift one position to_the left.__@param fieldNum The position of the field to be removed, starting at zero._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void removeField(int fieldNum)_	{_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		int lastIndex = this.numFields - 1_		__		if (fieldNum < lastIndex) {_			int len = lastIndex - fieldNum__			System.arraycopy(this.offsets, fieldNum + 1, this.offsets, fieldNum, len)__			System.arraycopy(this.lengths, fieldNum + 1, this.lengths, fieldNum, len)__			System.arraycopy(this.readFields, fieldNum + 1, this.readFields, fieldNum, len)__			System.arraycopy(this.writeFields, fieldNum + 1, this.writeFields, fieldNum, len)__			markModified(fieldNum)__		}_		this.offsets[lastIndex] = NULL_INDICATOR_OFFSET__		this.lengths[lastIndex] = 0__		this.writeFields[lastIndex] = null___		setNumFields(lastIndex)__	};removes,the,field,at,the,given,position,p,this,method,should,be,used,carefully,be,aware,that,as,the,field,is,actually,removed,from,the,record,the,total,number,of,fields,is,modified,and,all,fields,to,the,right,of,the,field,removed,shift,one,position,to,the,left,param,field,num,the,position,of,the,field,to,be,removed,starting,at,zero,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,remove,field,int,field,num,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,last,index,this,num,fields,1,if,field,num,last,index,int,len,last,index,field,num,system,arraycopy,this,offsets,field,num,1,this,offsets,field,num,len,system,arraycopy,this,lengths,field,num,1,this,lengths,field,num,len,system,arraycopy,this,read,fields,field,num,1,this,read,fields,field,num,len,system,arraycopy,this,write,fields,field,num,1,this,write,fields,field,num,len,mark,modified,field,num,this,offsets,last,index,this,lengths,last,index,0,this,write,fields,last,index,null,set,num,fields,last,index
Record -> public void removeField(int fieldNum);1448491524;Removes the field at the given position._<p>_This method should be used carefully. Be aware that as the field is actually removed from the record, the_total number of fields is modified, and all fields to the right of the field removed shift one position to_the left.__@param fieldNum The position of the field to be removed, starting at zero._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void removeField(int fieldNum)_	{_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		int lastIndex = this.numFields - 1_		__		if (fieldNum < lastIndex) {_			int len = lastIndex - fieldNum__			System.arraycopy(this.offsets, fieldNum + 1, this.offsets, fieldNum, len)__			System.arraycopy(this.lengths, fieldNum + 1, this.lengths, fieldNum, len)__			System.arraycopy(this.readFields, fieldNum + 1, this.readFields, fieldNum, len)__			System.arraycopy(this.writeFields, fieldNum + 1, this.writeFields, fieldNum, len)__			markModified(fieldNum)__		}_		this.offsets[lastIndex] = NULL_INDICATOR_OFFSET__		this.lengths[lastIndex] = 0__		this.writeFields[lastIndex] = null___		setNumFields(lastIndex)__	};removes,the,field,at,the,given,position,p,this,method,should,be,used,carefully,be,aware,that,as,the,field,is,actually,removed,from,the,record,the,total,number,of,fields,is,modified,and,all,fields,to,the,right,of,the,field,removed,shift,one,position,to,the,left,param,field,num,the,position,of,the,field,to,be,removed,starting,at,zero,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,remove,field,int,field,num,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,last,index,this,num,fields,1,if,field,num,last,index,int,len,last,index,field,num,system,arraycopy,this,offsets,field,num,1,this,offsets,field,num,len,system,arraycopy,this,lengths,field,num,1,this,lengths,field,num,len,system,arraycopy,this,read,fields,field,num,1,this,read,fields,field,num,len,system,arraycopy,this,write,fields,field,num,1,this,write,fields,field,num,len,mark,modified,field,num,this,offsets,last,index,this,lengths,last,index,0,this,write,fields,last,index,null,set,num,fields,last,index
Record -> public void removeField(int fieldNum);1452178883;Removes the field at the given position._<p>_This method should be used carefully. Be aware that as the field is actually removed from the record, the_total number of fields is modified, and all fields to the right of the field removed shift one position to_the left.__@param fieldNum The position of the field to be removed, starting at zero._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void removeField(int fieldNum)_	{_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		int lastIndex = this.numFields - 1_		__		if (fieldNum < lastIndex) {_			int len = lastIndex - fieldNum__			System.arraycopy(this.offsets, fieldNum + 1, this.offsets, fieldNum, len)__			System.arraycopy(this.lengths, fieldNum + 1, this.lengths, fieldNum, len)__			System.arraycopy(this.readFields, fieldNum + 1, this.readFields, fieldNum, len)__			System.arraycopy(this.writeFields, fieldNum + 1, this.writeFields, fieldNum, len)__			markModified(fieldNum)__		}_		this.offsets[lastIndex] = NULL_INDICATOR_OFFSET__		this.lengths[lastIndex] = 0__		this.writeFields[lastIndex] = null___		setNumFields(lastIndex)__	};removes,the,field,at,the,given,position,p,this,method,should,be,used,carefully,be,aware,that,as,the,field,is,actually,removed,from,the,record,the,total,number,of,fields,is,modified,and,all,fields,to,the,right,of,the,field,removed,shift,one,position,to,the,left,param,field,num,the,position,of,the,field,to,be,removed,starting,at,zero,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,remove,field,int,field,num,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,last,index,this,num,fields,1,if,field,num,last,index,int,len,last,index,field,num,system,arraycopy,this,offsets,field,num,1,this,offsets,field,num,len,system,arraycopy,this,lengths,field,num,1,this,lengths,field,num,len,system,arraycopy,this,read,fields,field,num,1,this,read,fields,field,num,len,system,arraycopy,this,write,fields,field,num,1,this,write,fields,field,num,len,mark,modified,field,num,this,offsets,last,index,this,lengths,last,index,0,this,write,fields,last,index,null,set,num,fields,last,index
Record -> public void removeField(int fieldNum);1489589988;Removes the field at the given position._<p>_This method should be used carefully. Be aware that as the field is actually removed from the record, the_total number of fields is modified, and all fields to the right of the field removed shift one position to_the left.__@param fieldNum The position of the field to be removed, starting at zero._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void removeField(int fieldNum)_	{_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		int lastIndex = this.numFields - 1_		__		if (fieldNum < lastIndex) {_			int len = lastIndex - fieldNum__			System.arraycopy(this.offsets, fieldNum + 1, this.offsets, fieldNum, len)__			System.arraycopy(this.lengths, fieldNum + 1, this.lengths, fieldNum, len)__			System.arraycopy(this.readFields, fieldNum + 1, this.readFields, fieldNum, len)__			System.arraycopy(this.writeFields, fieldNum + 1, this.writeFields, fieldNum, len)__			markModified(fieldNum)__		}_		this.offsets[lastIndex] = NULL_INDICATOR_OFFSET__		this.lengths[lastIndex] = 0__		this.writeFields[lastIndex] = null___		setNumFields(lastIndex)__	};removes,the,field,at,the,given,position,p,this,method,should,be,used,carefully,be,aware,that,as,the,field,is,actually,removed,from,the,record,the,total,number,of,fields,is,modified,and,all,fields,to,the,right,of,the,field,removed,shift,one,position,to,the,left,param,field,num,the,position,of,the,field,to,be,removed,starting,at,zero,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,remove,field,int,field,num,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,last,index,this,num,fields,1,if,field,num,last,index,int,len,last,index,field,num,system,arraycopy,this,offsets,field,num,1,this,offsets,field,num,len,system,arraycopy,this,lengths,field,num,1,this,lengths,field,num,len,system,arraycopy,this,read,fields,field,num,1,this,read,fields,field,num,len,system,arraycopy,this,write,fields,field,num,1,this,write,fields,field,num,len,mark,modified,field,num,this,offsets,last,index,this,lengths,last,index,0,this,write,fields,last,index,null,set,num,fields,last,index
Record -> public void addField(Value value);1405024514;@param value;public void addField(Value value) {_		final int num = this.numFields__		setNumFields(num + 1)__		internallySetField(num, value)__	};param,value;public,void,add,field,value,value,final,int,num,this,num,fields,set,num,fields,num,1,internally,set,field,num,value
Record -> public void addField(Value value);1405090423;@param value;public void addField(Value value) {_		final int num = this.numFields__		setNumFields(num + 1)__		internallySetField(num, value)__	};param,value;public,void,add,field,value,value,final,int,num,this,num,fields,set,num,fields,num,1,internally,set,field,num,value
Record -> public void addField(Value value);1411473593;@param value;public void addField(Value value) {_		final int num = this.numFields__		setNumFields(num + 1)__		internallySetField(num, value)__	};param,value;public,void,add,field,value,value,final,int,num,this,num,fields,set,num,fields,num,1,internally,set,field,num,value
Record -> public void addField(Value value);1414786554;@param value;public void addField(Value value) {_		final int num = this.numFields__		setNumFields(num + 1)__		internallySetField(num, value)__	};param,value;public,void,add,field,value,value,final,int,num,this,num,fields,set,num,fields,num,1,internally,set,field,num,value
Record -> public void addField(Value value);1423847366;@param value;public void addField(Value value) {_		final int num = this.numFields__		setNumFields(num + 1)__		internallySetField(num, value)__	};param,value;public,void,add,field,value,value,final,int,num,this,num,fields,set,num,fields,num,1,internally,set,field,num,value
Record -> public void addField(Value value);1443521887;@param value;public void addField(Value value) {_		final int num = this.numFields__		setNumFields(num + 1)__		internallySetField(num, value)__	};param,value;public,void,add,field,value,value,final,int,num,this,num,fields,set,num,fields,num,1,internally,set,field,num,value
Record -> public void addField(Value value);1446112342;@param value;public void addField(Value value) {_		final int num = this.numFields__		setNumFields(num + 1)__		internallySetField(num, value)__	};param,value;public,void,add,field,value,value,final,int,num,this,num,fields,set,num,fields,num,1,internally,set,field,num,value
Record -> public void addField(Value value);1448491524;@param value;public void addField(Value value) {_		final int num = this.numFields__		setNumFields(num + 1)__		internallySetField(num, value)__	};param,value;public,void,add,field,value,value,final,int,num,this,num,fields,set,num,fields,num,1,internally,set,field,num,value
Record -> public void addField(Value value);1452178883;@param value;public void addField(Value value) {_		final int num = this.numFields__		setNumFields(num + 1)__		internallySetField(num, value)__	};param,value;public,void,add,field,value,value,final,int,num,this,num,fields,set,num,fields,num,1,internally,set,field,num,value
Record -> public void addField(Value value);1489589988;@param value;public void addField(Value value) {_		final int num = this.numFields__		setNumFields(num + 1)__		internallySetField(num, value)__	};param,value;public,void,add,field,value,value,final,int,num,this,num,fields,set,num,fields,num,1,internally,set,field,num,value
Record -> public void setNull(int field);1405024514;Sets the field at the given position to <code>null</code>.__@param field The field index._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void setNull(int field) {_		_		if (field < 0 || field >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}__		internallySetField(field, null)__	};sets,the,field,at,the,given,position,to,code,null,code,param,field,the,field,index,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,set,null,int,field,if,field,0,field,this,num,fields,throw,new,index,out,of,bounds,exception,internally,set,field,field,null
Record -> public void setNull(int field);1405090423;Sets the field at the given position to <code>null</code>.__@param field The field index._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void setNull(int field) {_		_		if (field < 0 || field >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}__		internallySetField(field, null)__	};sets,the,field,at,the,given,position,to,code,null,code,param,field,the,field,index,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,set,null,int,field,if,field,0,field,this,num,fields,throw,new,index,out,of,bounds,exception,internally,set,field,field,null
Record -> public void setNull(int field);1411473593;Sets the field at the given position to <code>null</code>.__@param field The field index._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void setNull(int field) {_		_		if (field < 0 || field >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}__		internallySetField(field, null)__	};sets,the,field,at,the,given,position,to,code,null,code,param,field,the,field,index,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,set,null,int,field,if,field,0,field,this,num,fields,throw,new,index,out,of,bounds,exception,internally,set,field,field,null
Record -> public void setNull(int field);1414786554;Sets the field at the given position to <code>null</code>.__@param field The field index._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void setNull(int field) {_		_		if (field < 0 || field >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}__		internallySetField(field, null)__	};sets,the,field,at,the,given,position,to,code,null,code,param,field,the,field,index,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,set,null,int,field,if,field,0,field,this,num,fields,throw,new,index,out,of,bounds,exception,internally,set,field,field,null
Record -> public void setNull(int field);1423847366;Sets the field at the given position to <code>null</code>.__@param field The field index._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void setNull(int field) {_		_		if (field < 0 || field >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}__		internallySetField(field, null)__	};sets,the,field,at,the,given,position,to,code,null,code,param,field,the,field,index,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,set,null,int,field,if,field,0,field,this,num,fields,throw,new,index,out,of,bounds,exception,internally,set,field,field,null
Record -> public void setNull(int field);1443521887;Sets the field at the given position to <code>null</code>.__@param field The field index._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void setNull(int field) {_		_		if (field < 0 || field >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}__		internallySetField(field, null)__	};sets,the,field,at,the,given,position,to,code,null,code,param,field,the,field,index,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,set,null,int,field,if,field,0,field,this,num,fields,throw,new,index,out,of,bounds,exception,internally,set,field,field,null
Record -> public void setNull(int field);1446112342;Sets the field at the given position to <code>null</code>.__@param field The field index._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void setNull(int field) {_		_		if (field < 0 || field >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}__		internallySetField(field, null)__	};sets,the,field,at,the,given,position,to,code,null,code,param,field,the,field,index,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,set,null,int,field,if,field,0,field,this,num,fields,throw,new,index,out,of,bounds,exception,internally,set,field,field,null
Record -> public void setNull(int field);1448491524;Sets the field at the given position to <code>null</code>.__@param field The field index._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void setNull(int field) {_		_		if (field < 0 || field >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}__		internallySetField(field, null)__	};sets,the,field,at,the,given,position,to,code,null,code,param,field,the,field,index,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,set,null,int,field,if,field,0,field,this,num,fields,throw,new,index,out,of,bounds,exception,internally,set,field,field,null
Record -> public void setNull(int field);1452178883;Sets the field at the given position to <code>null</code>.__@param field The field index._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void setNull(int field) {_		_		if (field < 0 || field >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}__		internallySetField(field, null)__	};sets,the,field,at,the,given,position,to,code,null,code,param,field,the,field,index,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,set,null,int,field,if,field,0,field,this,num,fields,throw,new,index,out,of,bounds,exception,internally,set,field,field,null
Record -> public void setNull(int field);1489589988;Sets the field at the given position to <code>null</code>.__@param field The field index._@throws IndexOutOfBoundsException Thrown, when the position is not between 0 (inclusive) and the_number of fields (exclusive).;public void setNull(int field) {_		_		if (field < 0 || field >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}__		internallySetField(field, null)__	};sets,the,field,at,the,given,position,to,code,null,code,param,field,the,field,index,throws,index,out,of,bounds,exception,thrown,when,the,position,is,not,between,0,inclusive,and,the,number,of,fields,exclusive;public,void,set,null,int,field,if,field,0,field,this,num,fields,throw,new,index,out,of,bounds,exception,internally,set,field,field,null
Record -> public void setNumFields(final int numFields);1405024514;Sets the number of fields in the record. If the new number of fields is longer than the current number of_fields, then null fields are appended. If the new number of fields is smaller than the current number of_fields, then the last fields are truncated.__@param numFields The new number of fields.;public void setNumFields(final int numFields) {_		final int oldNumFields = this.numFields__		_		if (numFields > oldNumFields) {_			makeSpace(numFields)__			for (int i = oldNumFields_ i < numFields_ i++) {_				this.offsets[i] = NULL_INDICATOR_OFFSET__			}_			markModified(oldNumFields)__		}_		else {_			_			_			_			markModified(numFields)__		}_		this.numFields = numFields__	};sets,the,number,of,fields,in,the,record,if,the,new,number,of,fields,is,longer,than,the,current,number,of,fields,then,null,fields,are,appended,if,the,new,number,of,fields,is,smaller,than,the,current,number,of,fields,then,the,last,fields,are,truncated,param,num,fields,the,new,number,of,fields;public,void,set,num,fields,final,int,num,fields,final,int,old,num,fields,this,num,fields,if,num,fields,old,num,fields,make,space,num,fields,for,int,i,old,num,fields,i,num,fields,i,this,offsets,i,mark,modified,old,num,fields,else,mark,modified,num,fields,this,num,fields,num,fields
Record -> public void setNumFields(final int numFields);1405090423;Sets the number of fields in the record. If the new number of fields is longer than the current number of_fields, then null fields are appended. If the new number of fields is smaller than the current number of_fields, then the last fields are truncated.__@param numFields The new number of fields.;public void setNumFields(final int numFields) {_		final int oldNumFields = this.numFields__		_		if (numFields > oldNumFields) {_			makeSpace(numFields)__			for (int i = oldNumFields_ i < numFields_ i++) {_				this.offsets[i] = NULL_INDICATOR_OFFSET__			}_			markModified(oldNumFields)__		}_		else {_			_			_			_			markModified(numFields)__		}_		this.numFields = numFields__	};sets,the,number,of,fields,in,the,record,if,the,new,number,of,fields,is,longer,than,the,current,number,of,fields,then,null,fields,are,appended,if,the,new,number,of,fields,is,smaller,than,the,current,number,of,fields,then,the,last,fields,are,truncated,param,num,fields,the,new,number,of,fields;public,void,set,num,fields,final,int,num,fields,final,int,old,num,fields,this,num,fields,if,num,fields,old,num,fields,make,space,num,fields,for,int,i,old,num,fields,i,num,fields,i,this,offsets,i,mark,modified,old,num,fields,else,mark,modified,num,fields,this,num,fields,num,fields
Record -> public void setNumFields(final int numFields);1411473593;Sets the number of fields in the record. If the new number of fields is longer than the current number of_fields, then null fields are appended. If the new number of fields is smaller than the current number of_fields, then the last fields are truncated.__@param numFields The new number of fields.;public void setNumFields(final int numFields) {_		final int oldNumFields = this.numFields__		_		if (numFields > oldNumFields) {_			makeSpace(numFields)__			for (int i = oldNumFields_ i < numFields_ i++) {_				this.offsets[i] = NULL_INDICATOR_OFFSET__			}_			markModified(oldNumFields)__		}_		else {_			_			_			_			markModified(numFields)__		}_		this.numFields = numFields__	};sets,the,number,of,fields,in,the,record,if,the,new,number,of,fields,is,longer,than,the,current,number,of,fields,then,null,fields,are,appended,if,the,new,number,of,fields,is,smaller,than,the,current,number,of,fields,then,the,last,fields,are,truncated,param,num,fields,the,new,number,of,fields;public,void,set,num,fields,final,int,num,fields,final,int,old,num,fields,this,num,fields,if,num,fields,old,num,fields,make,space,num,fields,for,int,i,old,num,fields,i,num,fields,i,this,offsets,i,mark,modified,old,num,fields,else,mark,modified,num,fields,this,num,fields,num,fields
Record -> public void setNumFields(final int numFields);1414786554;Sets the number of fields in the record. If the new number of fields is longer than the current number of_fields, then null fields are appended. If the new number of fields is smaller than the current number of_fields, then the last fields are truncated.__@param numFields The new number of fields.;public void setNumFields(final int numFields) {_		final int oldNumFields = this.numFields__		_		if (numFields > oldNumFields) {_			makeSpace(numFields)__			for (int i = oldNumFields_ i < numFields_ i++) {_				this.offsets[i] = NULL_INDICATOR_OFFSET__			}_			markModified(oldNumFields)__		}_		else {_			_			_			_			markModified(numFields)__		}_		this.numFields = numFields__	};sets,the,number,of,fields,in,the,record,if,the,new,number,of,fields,is,longer,than,the,current,number,of,fields,then,null,fields,are,appended,if,the,new,number,of,fields,is,smaller,than,the,current,number,of,fields,then,the,last,fields,are,truncated,param,num,fields,the,new,number,of,fields;public,void,set,num,fields,final,int,num,fields,final,int,old,num,fields,this,num,fields,if,num,fields,old,num,fields,make,space,num,fields,for,int,i,old,num,fields,i,num,fields,i,this,offsets,i,mark,modified,old,num,fields,else,mark,modified,num,fields,this,num,fields,num,fields
Record -> public void setNumFields(final int numFields);1423847366;Sets the number of fields in the record. If the new number of fields is longer than the current number of_fields, then null fields are appended. If the new number of fields is smaller than the current number of_fields, then the last fields are truncated.__@param numFields The new number of fields.;public void setNumFields(final int numFields) {_		final int oldNumFields = this.numFields__		_		if (numFields > oldNumFields) {_			makeSpace(numFields)__			for (int i = oldNumFields_ i < numFields_ i++) {_				this.offsets[i] = NULL_INDICATOR_OFFSET__			}_			markModified(oldNumFields)__		}_		else {_			_			_			_			markModified(numFields)__		}_		this.numFields = numFields__	};sets,the,number,of,fields,in,the,record,if,the,new,number,of,fields,is,longer,than,the,current,number,of,fields,then,null,fields,are,appended,if,the,new,number,of,fields,is,smaller,than,the,current,number,of,fields,then,the,last,fields,are,truncated,param,num,fields,the,new,number,of,fields;public,void,set,num,fields,final,int,num,fields,final,int,old,num,fields,this,num,fields,if,num,fields,old,num,fields,make,space,num,fields,for,int,i,old,num,fields,i,num,fields,i,this,offsets,i,mark,modified,old,num,fields,else,mark,modified,num,fields,this,num,fields,num,fields
Record -> public void setNumFields(final int numFields);1443521887;Sets the number of fields in the record. If the new number of fields is longer than the current number of_fields, then null fields are appended. If the new number of fields is smaller than the current number of_fields, then the last fields are truncated.__@param numFields The new number of fields.;public void setNumFields(final int numFields) {_		final int oldNumFields = this.numFields__		_		if (numFields > oldNumFields) {_			makeSpace(numFields)__			for (int i = oldNumFields_ i < numFields_ i++) {_				this.offsets[i] = NULL_INDICATOR_OFFSET__			}_			markModified(oldNumFields)__		}_		else {_			_			_			_			markModified(numFields)__		}_		this.numFields = numFields__	};sets,the,number,of,fields,in,the,record,if,the,new,number,of,fields,is,longer,than,the,current,number,of,fields,then,null,fields,are,appended,if,the,new,number,of,fields,is,smaller,than,the,current,number,of,fields,then,the,last,fields,are,truncated,param,num,fields,the,new,number,of,fields;public,void,set,num,fields,final,int,num,fields,final,int,old,num,fields,this,num,fields,if,num,fields,old,num,fields,make,space,num,fields,for,int,i,old,num,fields,i,num,fields,i,this,offsets,i,mark,modified,old,num,fields,else,mark,modified,num,fields,this,num,fields,num,fields
Record -> public void setNumFields(final int numFields);1446112342;Sets the number of fields in the record. If the new number of fields is longer than the current number of_fields, then null fields are appended. If the new number of fields is smaller than the current number of_fields, then the last fields are truncated.__@param numFields The new number of fields.;public void setNumFields(final int numFields) {_		final int oldNumFields = this.numFields__		_		if (numFields > oldNumFields) {_			makeSpace(numFields)__			for (int i = oldNumFields_ i < numFields_ i++) {_				this.offsets[i] = NULL_INDICATOR_OFFSET__			}_			markModified(oldNumFields)__		}_		else {_			_			_			_			markModified(numFields)__		}_		this.numFields = numFields__	};sets,the,number,of,fields,in,the,record,if,the,new,number,of,fields,is,longer,than,the,current,number,of,fields,then,null,fields,are,appended,if,the,new,number,of,fields,is,smaller,than,the,current,number,of,fields,then,the,last,fields,are,truncated,param,num,fields,the,new,number,of,fields;public,void,set,num,fields,final,int,num,fields,final,int,old,num,fields,this,num,fields,if,num,fields,old,num,fields,make,space,num,fields,for,int,i,old,num,fields,i,num,fields,i,this,offsets,i,mark,modified,old,num,fields,else,mark,modified,num,fields,this,num,fields,num,fields
Record -> public void setNumFields(final int numFields);1448491524;Sets the number of fields in the record. If the new number of fields is longer than the current number of_fields, then null fields are appended. If the new number of fields is smaller than the current number of_fields, then the last fields are truncated.__@param numFields The new number of fields.;public void setNumFields(final int numFields) {_		final int oldNumFields = this.numFields__		_		if (numFields > oldNumFields) {_			makeSpace(numFields)__			for (int i = oldNumFields_ i < numFields_ i++) {_				this.offsets[i] = NULL_INDICATOR_OFFSET__			}_			markModified(oldNumFields)__		}_		else {_			_			_			_			markModified(numFields)__		}_		this.numFields = numFields__	};sets,the,number,of,fields,in,the,record,if,the,new,number,of,fields,is,longer,than,the,current,number,of,fields,then,null,fields,are,appended,if,the,new,number,of,fields,is,smaller,than,the,current,number,of,fields,then,the,last,fields,are,truncated,param,num,fields,the,new,number,of,fields;public,void,set,num,fields,final,int,num,fields,final,int,old,num,fields,this,num,fields,if,num,fields,old,num,fields,make,space,num,fields,for,int,i,old,num,fields,i,num,fields,i,this,offsets,i,mark,modified,old,num,fields,else,mark,modified,num,fields,this,num,fields,num,fields
Record -> public void setNumFields(final int numFields);1452178883;Sets the number of fields in the record. If the new number of fields is longer than the current number of_fields, then null fields are appended. If the new number of fields is smaller than the current number of_fields, then the last fields are truncated.__@param numFields The new number of fields.;public void setNumFields(final int numFields) {_		final int oldNumFields = this.numFields__		_		if (numFields > oldNumFields) {_			makeSpace(numFields)__			for (int i = oldNumFields_ i < numFields_ i++) {_				this.offsets[i] = NULL_INDICATOR_OFFSET__			}_			markModified(oldNumFields)__		}_		else {_			_			_			_			markModified(numFields)__		}_		this.numFields = numFields__	};sets,the,number,of,fields,in,the,record,if,the,new,number,of,fields,is,longer,than,the,current,number,of,fields,then,null,fields,are,appended,if,the,new,number,of,fields,is,smaller,than,the,current,number,of,fields,then,the,last,fields,are,truncated,param,num,fields,the,new,number,of,fields;public,void,set,num,fields,final,int,num,fields,final,int,old,num,fields,this,num,fields,if,num,fields,old,num,fields,make,space,num,fields,for,int,i,old,num,fields,i,num,fields,i,this,offsets,i,mark,modified,old,num,fields,else,mark,modified,num,fields,this,num,fields,num,fields
Record -> public void setNumFields(final int numFields);1489589988;Sets the number of fields in the record. If the new number of fields is longer than the current number of_fields, then null fields are appended. If the new number of fields is smaller than the current number of_fields, then the last fields are truncated.__@param numFields The new number of fields.;public void setNumFields(final int numFields) {_		final int oldNumFields = this.numFields__		_		if (numFields > oldNumFields) {_			makeSpace(numFields)__			for (int i = oldNumFields_ i < numFields_ i++) {_				this.offsets[i] = NULL_INDICATOR_OFFSET__			}_			markModified(oldNumFields)__		}_		else {_			_			_			_			markModified(numFields)__		}_		this.numFields = numFields__	};sets,the,number,of,fields,in,the,record,if,the,new,number,of,fields,is,longer,than,the,current,number,of,fields,then,null,fields,are,appended,if,the,new,number,of,fields,is,smaller,than,the,current,number,of,fields,then,the,last,fields,are,truncated,param,num,fields,the,new,number,of,fields;public,void,set,num,fields,final,int,num,fields,final,int,old,num,fields,this,num,fields,if,num,fields,old,num,fields,make,space,num,fields,for,int,i,old,num,fields,i,num,fields,i,this,offsets,i,mark,modified,old,num,fields,else,mark,modified,num,fields,this,num,fields,num,fields
Record -> public Record(Value value);1405024514;Creates a new record containing only a single field, which is the given value.__@param value The value for the single field of the record.;public Record(Value value) {_		setField(0, value)__	};creates,a,new,record,containing,only,a,single,field,which,is,the,given,value,param,value,the,value,for,the,single,field,of,the,record;public,record,value,value,set,field,0,value
Record -> public Record(Value value);1405090423;Creates a new record containing only a single field, which is the given value.__@param value The value for the single field of the record.;public Record(Value value) {_		setField(0, value)__	};creates,a,new,record,containing,only,a,single,field,which,is,the,given,value,param,value,the,value,for,the,single,field,of,the,record;public,record,value,value,set,field,0,value
Record -> public Record(Value value);1411473593;Creates a new record containing only a single field, which is the given value.__@param value The value for the single field of the record.;public Record(Value value) {_		setField(0, value)__	};creates,a,new,record,containing,only,a,single,field,which,is,the,given,value,param,value,the,value,for,the,single,field,of,the,record;public,record,value,value,set,field,0,value
Record -> public Record(Value value);1414786554;Creates a new record containing only a single field, which is the given value.__@param value The value for the single field of the record.;public Record(Value value) {_		setField(0, value)__	};creates,a,new,record,containing,only,a,single,field,which,is,the,given,value,param,value,the,value,for,the,single,field,of,the,record;public,record,value,value,set,field,0,value
Record -> public Record(Value value);1423847366;Creates a new record containing only a single field, which is the given value.__@param value The value for the single field of the record.;public Record(Value value) {_		setField(0, value)__	};creates,a,new,record,containing,only,a,single,field,which,is,the,given,value,param,value,the,value,for,the,single,field,of,the,record;public,record,value,value,set,field,0,value
Record -> public Record(Value value);1443521887;Creates a new record containing only a single field, which is the given value.__@param value The value for the single field of the record.;public Record(Value value) {_		setField(0, value)__	};creates,a,new,record,containing,only,a,single,field,which,is,the,given,value,param,value,the,value,for,the,single,field,of,the,record;public,record,value,value,set,field,0,value
Record -> public Record(Value value);1446112342;Creates a new record containing only a single field, which is the given value.__@param value The value for the single field of the record.;public Record(Value value) {_		setField(0, value)__	};creates,a,new,record,containing,only,a,single,field,which,is,the,given,value,param,value,the,value,for,the,single,field,of,the,record;public,record,value,value,set,field,0,value
Record -> public Record(Value value);1448491524;Creates a new record containing only a single field, which is the given value.__@param value The value for the single field of the record.;public Record(Value value) {_		setField(0, value)__	};creates,a,new,record,containing,only,a,single,field,which,is,the,given,value,param,value,the,value,for,the,single,field,of,the,record;public,record,value,value,set,field,0,value
Record -> public Record(Value value);1452178883;Creates a new record containing only a single field, which is the given value.__@param value The value for the single field of the record.;public Record(Value value) {_		setField(0, value)__	};creates,a,new,record,containing,only,a,single,field,which,is,the,given,value,param,value,the,value,for,the,single,field,of,the,record;public,record,value,value,set,field,0,value
Record -> public Record(Value value);1489589988;Creates a new record containing only a single field, which is the given value.__@param value The value for the single field of the record.;public Record(Value value) {_		setField(0, value)__	};creates,a,new,record,containing,only,a,single,field,which,is,the,given,value,param,value,the,value,for,the,single,field,of,the,record;public,record,value,value,set,field,0,value
Record -> public void setField(int fieldNum, Value value);1405024514;Sets the field at the given position to the given value. If the field position is larger or equal than_the current number of fields in the record, than the record is expanded to host as many columns._<p>_The value is kept as a reference in the record until the binary representation is synchronized. Until that_point, all modifications to the value's object will change the value inside the record._<p>_The binary representation is synchronized the latest when the record is emitted. It may be triggered_manually at an earlier point, but it is generally not necessary and advisable. Because the synchronization_triggers the serialization on all modified values, it may be an expensive operation.__@param fieldNum The position of the field, starting at zero._@param value The new value.;public void setField(int fieldNum, Value value) {_		_		if (fieldNum < 0) {_			throw new IndexOutOfBoundsException()__		}_		_		_		if (fieldNum >= this.numFields) {_			setNumFields(fieldNum + 1)__		}_		internallySetField(fieldNum, value)__	};sets,the,field,at,the,given,position,to,the,given,value,if,the,field,position,is,larger,or,equal,than,the,current,number,of,fields,in,the,record,than,the,record,is,expanded,to,host,as,many,columns,p,the,value,is,kept,as,a,reference,in,the,record,until,the,binary,representation,is,synchronized,until,that,point,all,modifications,to,the,value,s,object,will,change,the,value,inside,the,record,p,the,binary,representation,is,synchronized,the,latest,when,the,record,is,emitted,it,may,be,triggered,manually,at,an,earlier,point,but,it,is,generally,not,necessary,and,advisable,because,the,synchronization,triggers,the,serialization,on,all,modified,values,it,may,be,an,expensive,operation,param,field,num,the,position,of,the,field,starting,at,zero,param,value,the,new,value;public,void,set,field,int,field,num,value,value,if,field,num,0,throw,new,index,out,of,bounds,exception,if,field,num,this,num,fields,set,num,fields,field,num,1,internally,set,field,field,num,value
Record -> public void setField(int fieldNum, Value value);1405090423;Sets the field at the given position to the given value. If the field position is larger or equal than_the current number of fields in the record, than the record is expanded to host as many columns._<p>_The value is kept as a reference in the record until the binary representation is synchronized. Until that_point, all modifications to the value's object will change the value inside the record._<p>_The binary representation is synchronized the latest when the record is emitted. It may be triggered_manually at an earlier point, but it is generally not necessary and advisable. Because the synchronization_triggers the serialization on all modified values, it may be an expensive operation.__@param fieldNum The position of the field, starting at zero._@param value The new value.;public void setField(int fieldNum, Value value) {_		_		if (fieldNum < 0) {_			throw new IndexOutOfBoundsException()__		}_		_		_		if (fieldNum >= this.numFields) {_			setNumFields(fieldNum + 1)__		}_		internallySetField(fieldNum, value)__	};sets,the,field,at,the,given,position,to,the,given,value,if,the,field,position,is,larger,or,equal,than,the,current,number,of,fields,in,the,record,than,the,record,is,expanded,to,host,as,many,columns,p,the,value,is,kept,as,a,reference,in,the,record,until,the,binary,representation,is,synchronized,until,that,point,all,modifications,to,the,value,s,object,will,change,the,value,inside,the,record,p,the,binary,representation,is,synchronized,the,latest,when,the,record,is,emitted,it,may,be,triggered,manually,at,an,earlier,point,but,it,is,generally,not,necessary,and,advisable,because,the,synchronization,triggers,the,serialization,on,all,modified,values,it,may,be,an,expensive,operation,param,field,num,the,position,of,the,field,starting,at,zero,param,value,the,new,value;public,void,set,field,int,field,num,value,value,if,field,num,0,throw,new,index,out,of,bounds,exception,if,field,num,this,num,fields,set,num,fields,field,num,1,internally,set,field,field,num,value
Record -> public void setField(int fieldNum, Value value);1411473593;Sets the field at the given position to the given value. If the field position is larger or equal than_the current number of fields in the record, than the record is expanded to host as many columns._<p>_The value is kept as a reference in the record until the binary representation is synchronized. Until that_point, all modifications to the value's object will change the value inside the record._<p>_The binary representation is synchronized the latest when the record is emitted. It may be triggered_manually at an earlier point, but it is generally not necessary and advisable. Because the synchronization_triggers the serialization on all modified values, it may be an expensive operation.__@param fieldNum The position of the field, starting at zero._@param value The new value.;public void setField(int fieldNum, Value value) {_		_		if (fieldNum < 0) {_			throw new IndexOutOfBoundsException()__		}_		_		_		if (fieldNum >= this.numFields) {_			setNumFields(fieldNum + 1)__		}_		internallySetField(fieldNum, value)__	};sets,the,field,at,the,given,position,to,the,given,value,if,the,field,position,is,larger,or,equal,than,the,current,number,of,fields,in,the,record,than,the,record,is,expanded,to,host,as,many,columns,p,the,value,is,kept,as,a,reference,in,the,record,until,the,binary,representation,is,synchronized,until,that,point,all,modifications,to,the,value,s,object,will,change,the,value,inside,the,record,p,the,binary,representation,is,synchronized,the,latest,when,the,record,is,emitted,it,may,be,triggered,manually,at,an,earlier,point,but,it,is,generally,not,necessary,and,advisable,because,the,synchronization,triggers,the,serialization,on,all,modified,values,it,may,be,an,expensive,operation,param,field,num,the,position,of,the,field,starting,at,zero,param,value,the,new,value;public,void,set,field,int,field,num,value,value,if,field,num,0,throw,new,index,out,of,bounds,exception,if,field,num,this,num,fields,set,num,fields,field,num,1,internally,set,field,field,num,value
Record -> public void setField(int fieldNum, Value value);1414786554;Sets the field at the given position to the given value. If the field position is larger or equal than_the current number of fields in the record, than the record is expanded to host as many columns._<p>_The value is kept as a reference in the record until the binary representation is synchronized. Until that_point, all modifications to the value's object will change the value inside the record._<p>_The binary representation is synchronized the latest when the record is emitted. It may be triggered_manually at an earlier point, but it is generally not necessary and advisable. Because the synchronization_triggers the serialization on all modified values, it may be an expensive operation.__@param fieldNum The position of the field, starting at zero._@param value The new value.;public void setField(int fieldNum, Value value) {_		_		if (fieldNum < 0) {_			throw new IndexOutOfBoundsException()__		}_		_		_		if (fieldNum >= this.numFields) {_			setNumFields(fieldNum + 1)__		}_		internallySetField(fieldNum, value)__	};sets,the,field,at,the,given,position,to,the,given,value,if,the,field,position,is,larger,or,equal,than,the,current,number,of,fields,in,the,record,than,the,record,is,expanded,to,host,as,many,columns,p,the,value,is,kept,as,a,reference,in,the,record,until,the,binary,representation,is,synchronized,until,that,point,all,modifications,to,the,value,s,object,will,change,the,value,inside,the,record,p,the,binary,representation,is,synchronized,the,latest,when,the,record,is,emitted,it,may,be,triggered,manually,at,an,earlier,point,but,it,is,generally,not,necessary,and,advisable,because,the,synchronization,triggers,the,serialization,on,all,modified,values,it,may,be,an,expensive,operation,param,field,num,the,position,of,the,field,starting,at,zero,param,value,the,new,value;public,void,set,field,int,field,num,value,value,if,field,num,0,throw,new,index,out,of,bounds,exception,if,field,num,this,num,fields,set,num,fields,field,num,1,internally,set,field,field,num,value
Record -> public void setField(int fieldNum, Value value);1423847366;Sets the field at the given position to the given value. If the field position is larger or equal than_the current number of fields in the record, than the record is expanded to host as many columns._<p>_The value is kept as a reference in the record until the binary representation is synchronized. Until that_point, all modifications to the value's object will change the value inside the record._<p>_The binary representation is synchronized the latest when the record is emitted. It may be triggered_manually at an earlier point, but it is generally not necessary and advisable. Because the synchronization_triggers the serialization on all modified values, it may be an expensive operation.__@param fieldNum The position of the field, starting at zero._@param value The new value.;public void setField(int fieldNum, Value value) {_		_		if (fieldNum < 0) {_			throw new IndexOutOfBoundsException()__		}_		_		_		if (fieldNum >= this.numFields) {_			setNumFields(fieldNum + 1)__		}_		internallySetField(fieldNum, value)__	};sets,the,field,at,the,given,position,to,the,given,value,if,the,field,position,is,larger,or,equal,than,the,current,number,of,fields,in,the,record,than,the,record,is,expanded,to,host,as,many,columns,p,the,value,is,kept,as,a,reference,in,the,record,until,the,binary,representation,is,synchronized,until,that,point,all,modifications,to,the,value,s,object,will,change,the,value,inside,the,record,p,the,binary,representation,is,synchronized,the,latest,when,the,record,is,emitted,it,may,be,triggered,manually,at,an,earlier,point,but,it,is,generally,not,necessary,and,advisable,because,the,synchronization,triggers,the,serialization,on,all,modified,values,it,may,be,an,expensive,operation,param,field,num,the,position,of,the,field,starting,at,zero,param,value,the,new,value;public,void,set,field,int,field,num,value,value,if,field,num,0,throw,new,index,out,of,bounds,exception,if,field,num,this,num,fields,set,num,fields,field,num,1,internally,set,field,field,num,value
Record -> public void setField(int fieldNum, Value value);1443521887;Sets the field at the given position to the given value. If the field position is larger or equal than_the current number of fields in the record, than the record is expanded to host as many columns._<p>_The value is kept as a reference in the record until the binary representation is synchronized. Until that_point, all modifications to the value's object will change the value inside the record._<p>_The binary representation is synchronized the latest when the record is emitted. It may be triggered_manually at an earlier point, but it is generally not necessary and advisable. Because the synchronization_triggers the serialization on all modified values, it may be an expensive operation.__@param fieldNum The position of the field, starting at zero._@param value The new value.;public void setField(int fieldNum, Value value) {_		_		if (fieldNum < 0) {_			throw new IndexOutOfBoundsException()__		}_		_		_		if (fieldNum >= this.numFields) {_			setNumFields(fieldNum + 1)__		}_		internallySetField(fieldNum, value)__	};sets,the,field,at,the,given,position,to,the,given,value,if,the,field,position,is,larger,or,equal,than,the,current,number,of,fields,in,the,record,than,the,record,is,expanded,to,host,as,many,columns,p,the,value,is,kept,as,a,reference,in,the,record,until,the,binary,representation,is,synchronized,until,that,point,all,modifications,to,the,value,s,object,will,change,the,value,inside,the,record,p,the,binary,representation,is,synchronized,the,latest,when,the,record,is,emitted,it,may,be,triggered,manually,at,an,earlier,point,but,it,is,generally,not,necessary,and,advisable,because,the,synchronization,triggers,the,serialization,on,all,modified,values,it,may,be,an,expensive,operation,param,field,num,the,position,of,the,field,starting,at,zero,param,value,the,new,value;public,void,set,field,int,field,num,value,value,if,field,num,0,throw,new,index,out,of,bounds,exception,if,field,num,this,num,fields,set,num,fields,field,num,1,internally,set,field,field,num,value
Record -> public void setField(int fieldNum, Value value);1446112342;Sets the field at the given position to the given value. If the field position is larger or equal than_the current number of fields in the record, than the record is expanded to host as many columns._<p>_The value is kept as a reference in the record until the binary representation is synchronized. Until that_point, all modifications to the value's object will change the value inside the record._<p>_The binary representation is synchronized the latest when the record is emitted. It may be triggered_manually at an earlier point, but it is generally not necessary and advisable. Because the synchronization_triggers the serialization on all modified values, it may be an expensive operation.__@param fieldNum The position of the field, starting at zero._@param value The new value.;public void setField(int fieldNum, Value value) {_		_		if (fieldNum < 0) {_			throw new IndexOutOfBoundsException()__		}_		_		_		if (fieldNum >= this.numFields) {_			setNumFields(fieldNum + 1)__		}_		internallySetField(fieldNum, value)__	};sets,the,field,at,the,given,position,to,the,given,value,if,the,field,position,is,larger,or,equal,than,the,current,number,of,fields,in,the,record,than,the,record,is,expanded,to,host,as,many,columns,p,the,value,is,kept,as,a,reference,in,the,record,until,the,binary,representation,is,synchronized,until,that,point,all,modifications,to,the,value,s,object,will,change,the,value,inside,the,record,p,the,binary,representation,is,synchronized,the,latest,when,the,record,is,emitted,it,may,be,triggered,manually,at,an,earlier,point,but,it,is,generally,not,necessary,and,advisable,because,the,synchronization,triggers,the,serialization,on,all,modified,values,it,may,be,an,expensive,operation,param,field,num,the,position,of,the,field,starting,at,zero,param,value,the,new,value;public,void,set,field,int,field,num,value,value,if,field,num,0,throw,new,index,out,of,bounds,exception,if,field,num,this,num,fields,set,num,fields,field,num,1,internally,set,field,field,num,value
Record -> public void setField(int fieldNum, Value value);1448491524;Sets the field at the given position to the given value. If the field position is larger or equal than_the current number of fields in the record, than the record is expanded to host as many columns._<p>_The value is kept as a reference in the record until the binary representation is synchronized. Until that_point, all modifications to the value's object will change the value inside the record._<p>_The binary representation is synchronized the latest when the record is emitted. It may be triggered_manually at an earlier point, but it is generally not necessary and advisable. Because the synchronization_triggers the serialization on all modified values, it may be an expensive operation.__@param fieldNum The position of the field, starting at zero._@param value The new value.;public void setField(int fieldNum, Value value) {_		_		if (fieldNum < 0) {_			throw new IndexOutOfBoundsException()__		}_		_		_		if (fieldNum >= this.numFields) {_			setNumFields(fieldNum + 1)__		}_		internallySetField(fieldNum, value)__	};sets,the,field,at,the,given,position,to,the,given,value,if,the,field,position,is,larger,or,equal,than,the,current,number,of,fields,in,the,record,than,the,record,is,expanded,to,host,as,many,columns,p,the,value,is,kept,as,a,reference,in,the,record,until,the,binary,representation,is,synchronized,until,that,point,all,modifications,to,the,value,s,object,will,change,the,value,inside,the,record,p,the,binary,representation,is,synchronized,the,latest,when,the,record,is,emitted,it,may,be,triggered,manually,at,an,earlier,point,but,it,is,generally,not,necessary,and,advisable,because,the,synchronization,triggers,the,serialization,on,all,modified,values,it,may,be,an,expensive,operation,param,field,num,the,position,of,the,field,starting,at,zero,param,value,the,new,value;public,void,set,field,int,field,num,value,value,if,field,num,0,throw,new,index,out,of,bounds,exception,if,field,num,this,num,fields,set,num,fields,field,num,1,internally,set,field,field,num,value
Record -> public void setField(int fieldNum, Value value);1452178883;Sets the field at the given position to the given value. If the field position is larger or equal than_the current number of fields in the record, than the record is expanded to host as many columns._<p>_The value is kept as a reference in the record until the binary representation is synchronized. Until that_point, all modifications to the value's object will change the value inside the record._<p>_The binary representation is synchronized the latest when the record is emitted. It may be triggered_manually at an earlier point, but it is generally not necessary and advisable. Because the synchronization_triggers the serialization on all modified values, it may be an expensive operation.__@param fieldNum The position of the field, starting at zero._@param value The new value.;public void setField(int fieldNum, Value value) {_		_		if (fieldNum < 0) {_			throw new IndexOutOfBoundsException()__		}_		_		_		if (fieldNum >= this.numFields) {_			setNumFields(fieldNum + 1)__		}_		internallySetField(fieldNum, value)__	};sets,the,field,at,the,given,position,to,the,given,value,if,the,field,position,is,larger,or,equal,than,the,current,number,of,fields,in,the,record,than,the,record,is,expanded,to,host,as,many,columns,p,the,value,is,kept,as,a,reference,in,the,record,until,the,binary,representation,is,synchronized,until,that,point,all,modifications,to,the,value,s,object,will,change,the,value,inside,the,record,p,the,binary,representation,is,synchronized,the,latest,when,the,record,is,emitted,it,may,be,triggered,manually,at,an,earlier,point,but,it,is,generally,not,necessary,and,advisable,because,the,synchronization,triggers,the,serialization,on,all,modified,values,it,may,be,an,expensive,operation,param,field,num,the,position,of,the,field,starting,at,zero,param,value,the,new,value;public,void,set,field,int,field,num,value,value,if,field,num,0,throw,new,index,out,of,bounds,exception,if,field,num,this,num,fields,set,num,fields,field,num,1,internally,set,field,field,num,value
Record -> public void setField(int fieldNum, Value value);1489589988;Sets the field at the given position to the given value. If the field position is larger or equal than_the current number of fields in the record, than the record is expanded to host as many columns._<p>_The value is kept as a reference in the record until the binary representation is synchronized. Until that_point, all modifications to the value's object will change the value inside the record._<p>_The binary representation is synchronized the latest when the record is emitted. It may be triggered_manually at an earlier point, but it is generally not necessary and advisable. Because the synchronization_triggers the serialization on all modified values, it may be an expensive operation.__@param fieldNum The position of the field, starting at zero._@param value The new value.;public void setField(int fieldNum, Value value) {_		_		if (fieldNum < 0) {_			throw new IndexOutOfBoundsException()__		}_		_		_		if (fieldNum >= this.numFields) {_			setNumFields(fieldNum + 1)__		}_		internallySetField(fieldNum, value)__	};sets,the,field,at,the,given,position,to,the,given,value,if,the,field,position,is,larger,or,equal,than,the,current,number,of,fields,in,the,record,than,the,record,is,expanded,to,host,as,many,columns,p,the,value,is,kept,as,a,reference,in,the,record,until,the,binary,representation,is,synchronized,until,that,point,all,modifications,to,the,value,s,object,will,change,the,value,inside,the,record,p,the,binary,representation,is,synchronized,the,latest,when,the,record,is,emitted,it,may,be,triggered,manually,at,an,earlier,point,but,it,is,generally,not,necessary,and,advisable,because,the,synchronization,triggers,the,serialization,on,all,modified,values,it,may,be,an,expensive,operation,param,field,num,the,position,of,the,field,starting,at,zero,param,value,the,new,value;public,void,set,field,int,field,num,value,value,if,field,num,0,throw,new,index,out,of,bounds,exception,if,field,num,this,num,fields,set,num,fields,field,num,1,internally,set,field,field,num,value
Record -> public void makeSpace(int numFields);1405024514;Reserves space for at least the given number of fields in the internal arrays.__@param numFields The number of fields to reserve space for.;public void makeSpace(int numFields) {_		final int oldNumFields = this.numFields__		_		if (this.offsets == null) {_			this.offsets = new int[numFields]__		}_		else if (this.offsets.length < numFields) {_			int[] newOffs = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.offsets, 0, newOffs, 0, oldNumFields)__			this.offsets = newOffs__		}_		_		if (this.lengths == null) {_			this.lengths = new int[numFields]__		}_		else if (this.lengths.length < numFields) {_			int[] newLens = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.lengths, 0, newLens, 0, oldNumFields)__			this.lengths = newLens__		}_		_		if (this.readFields == null) {_			this.readFields = new Value[numFields]__		}_		else if (this.readFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.readFields, 0, newFields, 0, oldNumFields)__			this.readFields = newFields__		}_		_		if (this.writeFields == null) {_			this.writeFields = new Value[numFields]__		}_		else if (this.writeFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.writeFields, 0, newFields, 0, oldNumFields)__			this.writeFields = newFields__		}_	};reserves,space,for,at,least,the,given,number,of,fields,in,the,internal,arrays,param,num,fields,the,number,of,fields,to,reserve,space,for;public,void,make,space,int,num,fields,final,int,old,num,fields,this,num,fields,if,this,offsets,null,this,offsets,new,int,num,fields,else,if,this,offsets,length,num,fields,int,new,offs,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,offsets,0,new,offs,0,old,num,fields,this,offsets,new,offs,if,this,lengths,null,this,lengths,new,int,num,fields,else,if,this,lengths,length,num,fields,int,new,lens,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,lengths,0,new,lens,0,old,num,fields,this,lengths,new,lens,if,this,read,fields,null,this,read,fields,new,value,num,fields,else,if,this,read,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,read,fields,0,new,fields,0,old,num,fields,this,read,fields,new,fields,if,this,write,fields,null,this,write,fields,new,value,num,fields,else,if,this,write,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,write,fields,0,new,fields,0,old,num,fields,this,write,fields,new,fields
Record -> public void makeSpace(int numFields);1405090423;Reserves space for at least the given number of fields in the internal arrays.__@param numFields The number of fields to reserve space for.;public void makeSpace(int numFields) {_		final int oldNumFields = this.numFields__		_		if (this.offsets == null) {_			this.offsets = new int[numFields]__		}_		else if (this.offsets.length < numFields) {_			int[] newOffs = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.offsets, 0, newOffs, 0, oldNumFields)__			this.offsets = newOffs__		}_		_		if (this.lengths == null) {_			this.lengths = new int[numFields]__		}_		else if (this.lengths.length < numFields) {_			int[] newLens = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.lengths, 0, newLens, 0, oldNumFields)__			this.lengths = newLens__		}_		_		if (this.readFields == null) {_			this.readFields = new Value[numFields]__		}_		else if (this.readFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.readFields, 0, newFields, 0, oldNumFields)__			this.readFields = newFields__		}_		_		if (this.writeFields == null) {_			this.writeFields = new Value[numFields]__		}_		else if (this.writeFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.writeFields, 0, newFields, 0, oldNumFields)__			this.writeFields = newFields__		}_	};reserves,space,for,at,least,the,given,number,of,fields,in,the,internal,arrays,param,num,fields,the,number,of,fields,to,reserve,space,for;public,void,make,space,int,num,fields,final,int,old,num,fields,this,num,fields,if,this,offsets,null,this,offsets,new,int,num,fields,else,if,this,offsets,length,num,fields,int,new,offs,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,offsets,0,new,offs,0,old,num,fields,this,offsets,new,offs,if,this,lengths,null,this,lengths,new,int,num,fields,else,if,this,lengths,length,num,fields,int,new,lens,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,lengths,0,new,lens,0,old,num,fields,this,lengths,new,lens,if,this,read,fields,null,this,read,fields,new,value,num,fields,else,if,this,read,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,read,fields,0,new,fields,0,old,num,fields,this,read,fields,new,fields,if,this,write,fields,null,this,write,fields,new,value,num,fields,else,if,this,write,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,write,fields,0,new,fields,0,old,num,fields,this,write,fields,new,fields
Record -> public void makeSpace(int numFields);1411473593;Reserves space for at least the given number of fields in the internal arrays.__@param numFields The number of fields to reserve space for.;public void makeSpace(int numFields) {_		final int oldNumFields = this.numFields__		_		if (this.offsets == null) {_			this.offsets = new int[numFields]__		}_		else if (this.offsets.length < numFields) {_			int[] newOffs = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.offsets, 0, newOffs, 0, oldNumFields)__			this.offsets = newOffs__		}_		_		if (this.lengths == null) {_			this.lengths = new int[numFields]__		}_		else if (this.lengths.length < numFields) {_			int[] newLens = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.lengths, 0, newLens, 0, oldNumFields)__			this.lengths = newLens__		}_		_		if (this.readFields == null) {_			this.readFields = new Value[numFields]__		}_		else if (this.readFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.readFields, 0, newFields, 0, oldNumFields)__			this.readFields = newFields__		}_		_		if (this.writeFields == null) {_			this.writeFields = new Value[numFields]__		}_		else if (this.writeFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.writeFields, 0, newFields, 0, oldNumFields)__			this.writeFields = newFields__		}_	};reserves,space,for,at,least,the,given,number,of,fields,in,the,internal,arrays,param,num,fields,the,number,of,fields,to,reserve,space,for;public,void,make,space,int,num,fields,final,int,old,num,fields,this,num,fields,if,this,offsets,null,this,offsets,new,int,num,fields,else,if,this,offsets,length,num,fields,int,new,offs,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,offsets,0,new,offs,0,old,num,fields,this,offsets,new,offs,if,this,lengths,null,this,lengths,new,int,num,fields,else,if,this,lengths,length,num,fields,int,new,lens,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,lengths,0,new,lens,0,old,num,fields,this,lengths,new,lens,if,this,read,fields,null,this,read,fields,new,value,num,fields,else,if,this,read,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,read,fields,0,new,fields,0,old,num,fields,this,read,fields,new,fields,if,this,write,fields,null,this,write,fields,new,value,num,fields,else,if,this,write,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,write,fields,0,new,fields,0,old,num,fields,this,write,fields,new,fields
Record -> public void makeSpace(int numFields);1414786554;Reserves space for at least the given number of fields in the internal arrays.__@param numFields The number of fields to reserve space for.;public void makeSpace(int numFields) {_		final int oldNumFields = this.numFields__		_		if (this.offsets == null) {_			this.offsets = new int[numFields]__		}_		else if (this.offsets.length < numFields) {_			int[] newOffs = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.offsets, 0, newOffs, 0, oldNumFields)__			this.offsets = newOffs__		}_		_		if (this.lengths == null) {_			this.lengths = new int[numFields]__		}_		else if (this.lengths.length < numFields) {_			int[] newLens = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.lengths, 0, newLens, 0, oldNumFields)__			this.lengths = newLens__		}_		_		if (this.readFields == null) {_			this.readFields = new Value[numFields]__		}_		else if (this.readFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.readFields, 0, newFields, 0, oldNumFields)__			this.readFields = newFields__		}_		_		if (this.writeFields == null) {_			this.writeFields = new Value[numFields]__		}_		else if (this.writeFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.writeFields, 0, newFields, 0, oldNumFields)__			this.writeFields = newFields__		}_	};reserves,space,for,at,least,the,given,number,of,fields,in,the,internal,arrays,param,num,fields,the,number,of,fields,to,reserve,space,for;public,void,make,space,int,num,fields,final,int,old,num,fields,this,num,fields,if,this,offsets,null,this,offsets,new,int,num,fields,else,if,this,offsets,length,num,fields,int,new,offs,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,offsets,0,new,offs,0,old,num,fields,this,offsets,new,offs,if,this,lengths,null,this,lengths,new,int,num,fields,else,if,this,lengths,length,num,fields,int,new,lens,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,lengths,0,new,lens,0,old,num,fields,this,lengths,new,lens,if,this,read,fields,null,this,read,fields,new,value,num,fields,else,if,this,read,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,read,fields,0,new,fields,0,old,num,fields,this,read,fields,new,fields,if,this,write,fields,null,this,write,fields,new,value,num,fields,else,if,this,write,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,write,fields,0,new,fields,0,old,num,fields,this,write,fields,new,fields
Record -> public void makeSpace(int numFields);1423847366;Reserves space for at least the given number of fields in the internal arrays.__@param numFields The number of fields to reserve space for.;public void makeSpace(int numFields) {_		final int oldNumFields = this.numFields__		_		if (this.offsets == null) {_			this.offsets = new int[numFields]__		}_		else if (this.offsets.length < numFields) {_			int[] newOffs = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.offsets, 0, newOffs, 0, oldNumFields)__			this.offsets = newOffs__		}_		_		if (this.lengths == null) {_			this.lengths = new int[numFields]__		}_		else if (this.lengths.length < numFields) {_			int[] newLens = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.lengths, 0, newLens, 0, oldNumFields)__			this.lengths = newLens__		}_		_		if (this.readFields == null) {_			this.readFields = new Value[numFields]__		}_		else if (this.readFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.readFields, 0, newFields, 0, oldNumFields)__			this.readFields = newFields__		}_		_		if (this.writeFields == null) {_			this.writeFields = new Value[numFields]__		}_		else if (this.writeFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.writeFields, 0, newFields, 0, oldNumFields)__			this.writeFields = newFields__		}_	};reserves,space,for,at,least,the,given,number,of,fields,in,the,internal,arrays,param,num,fields,the,number,of,fields,to,reserve,space,for;public,void,make,space,int,num,fields,final,int,old,num,fields,this,num,fields,if,this,offsets,null,this,offsets,new,int,num,fields,else,if,this,offsets,length,num,fields,int,new,offs,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,offsets,0,new,offs,0,old,num,fields,this,offsets,new,offs,if,this,lengths,null,this,lengths,new,int,num,fields,else,if,this,lengths,length,num,fields,int,new,lens,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,lengths,0,new,lens,0,old,num,fields,this,lengths,new,lens,if,this,read,fields,null,this,read,fields,new,value,num,fields,else,if,this,read,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,read,fields,0,new,fields,0,old,num,fields,this,read,fields,new,fields,if,this,write,fields,null,this,write,fields,new,value,num,fields,else,if,this,write,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,write,fields,0,new,fields,0,old,num,fields,this,write,fields,new,fields
Record -> public void makeSpace(int numFields);1443521887;Reserves space for at least the given number of fields in the internal arrays.__@param numFields The number of fields to reserve space for.;public void makeSpace(int numFields) {_		final int oldNumFields = this.numFields__		_		if (this.offsets == null) {_			this.offsets = new int[numFields]__		}_		else if (this.offsets.length < numFields) {_			int[] newOffs = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.offsets, 0, newOffs, 0, oldNumFields)__			this.offsets = newOffs__		}_		_		if (this.lengths == null) {_			this.lengths = new int[numFields]__		}_		else if (this.lengths.length < numFields) {_			int[] newLens = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.lengths, 0, newLens, 0, oldNumFields)__			this.lengths = newLens__		}_		_		if (this.readFields == null) {_			this.readFields = new Value[numFields]__		}_		else if (this.readFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.readFields, 0, newFields, 0, oldNumFields)__			this.readFields = newFields__		}_		_		if (this.writeFields == null) {_			this.writeFields = new Value[numFields]__		}_		else if (this.writeFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.writeFields, 0, newFields, 0, oldNumFields)__			this.writeFields = newFields__		}_	};reserves,space,for,at,least,the,given,number,of,fields,in,the,internal,arrays,param,num,fields,the,number,of,fields,to,reserve,space,for;public,void,make,space,int,num,fields,final,int,old,num,fields,this,num,fields,if,this,offsets,null,this,offsets,new,int,num,fields,else,if,this,offsets,length,num,fields,int,new,offs,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,offsets,0,new,offs,0,old,num,fields,this,offsets,new,offs,if,this,lengths,null,this,lengths,new,int,num,fields,else,if,this,lengths,length,num,fields,int,new,lens,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,lengths,0,new,lens,0,old,num,fields,this,lengths,new,lens,if,this,read,fields,null,this,read,fields,new,value,num,fields,else,if,this,read,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,read,fields,0,new,fields,0,old,num,fields,this,read,fields,new,fields,if,this,write,fields,null,this,write,fields,new,value,num,fields,else,if,this,write,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,write,fields,0,new,fields,0,old,num,fields,this,write,fields,new,fields
Record -> public void makeSpace(int numFields);1446112342;Reserves space for at least the given number of fields in the internal arrays.__@param numFields The number of fields to reserve space for.;public void makeSpace(int numFields) {_		final int oldNumFields = this.numFields__		_		if (this.offsets == null) {_			this.offsets = new int[numFields]__		}_		else if (this.offsets.length < numFields) {_			int[] newOffs = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.offsets, 0, newOffs, 0, oldNumFields)__			this.offsets = newOffs__		}_		_		if (this.lengths == null) {_			this.lengths = new int[numFields]__		}_		else if (this.lengths.length < numFields) {_			int[] newLens = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.lengths, 0, newLens, 0, oldNumFields)__			this.lengths = newLens__		}_		_		if (this.readFields == null) {_			this.readFields = new Value[numFields]__		}_		else if (this.readFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.readFields, 0, newFields, 0, oldNumFields)__			this.readFields = newFields__		}_		_		if (this.writeFields == null) {_			this.writeFields = new Value[numFields]__		}_		else if (this.writeFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.writeFields, 0, newFields, 0, oldNumFields)__			this.writeFields = newFields__		}_	};reserves,space,for,at,least,the,given,number,of,fields,in,the,internal,arrays,param,num,fields,the,number,of,fields,to,reserve,space,for;public,void,make,space,int,num,fields,final,int,old,num,fields,this,num,fields,if,this,offsets,null,this,offsets,new,int,num,fields,else,if,this,offsets,length,num,fields,int,new,offs,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,offsets,0,new,offs,0,old,num,fields,this,offsets,new,offs,if,this,lengths,null,this,lengths,new,int,num,fields,else,if,this,lengths,length,num,fields,int,new,lens,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,lengths,0,new,lens,0,old,num,fields,this,lengths,new,lens,if,this,read,fields,null,this,read,fields,new,value,num,fields,else,if,this,read,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,read,fields,0,new,fields,0,old,num,fields,this,read,fields,new,fields,if,this,write,fields,null,this,write,fields,new,value,num,fields,else,if,this,write,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,write,fields,0,new,fields,0,old,num,fields,this,write,fields,new,fields
Record -> public void makeSpace(int numFields);1448491524;Reserves space for at least the given number of fields in the internal arrays.__@param numFields The number of fields to reserve space for.;public void makeSpace(int numFields) {_		final int oldNumFields = this.numFields__		_		if (this.offsets == null) {_			this.offsets = new int[numFields]__		}_		else if (this.offsets.length < numFields) {_			int[] newOffs = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.offsets, 0, newOffs, 0, oldNumFields)__			this.offsets = newOffs__		}_		_		if (this.lengths == null) {_			this.lengths = new int[numFields]__		}_		else if (this.lengths.length < numFields) {_			int[] newLens = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.lengths, 0, newLens, 0, oldNumFields)__			this.lengths = newLens__		}_		_		if (this.readFields == null) {_			this.readFields = new Value[numFields]__		}_		else if (this.readFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.readFields, 0, newFields, 0, oldNumFields)__			this.readFields = newFields__		}_		_		if (this.writeFields == null) {_			this.writeFields = new Value[numFields]__		}_		else if (this.writeFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.writeFields, 0, newFields, 0, oldNumFields)__			this.writeFields = newFields__		}_	};reserves,space,for,at,least,the,given,number,of,fields,in,the,internal,arrays,param,num,fields,the,number,of,fields,to,reserve,space,for;public,void,make,space,int,num,fields,final,int,old,num,fields,this,num,fields,if,this,offsets,null,this,offsets,new,int,num,fields,else,if,this,offsets,length,num,fields,int,new,offs,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,offsets,0,new,offs,0,old,num,fields,this,offsets,new,offs,if,this,lengths,null,this,lengths,new,int,num,fields,else,if,this,lengths,length,num,fields,int,new,lens,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,lengths,0,new,lens,0,old,num,fields,this,lengths,new,lens,if,this,read,fields,null,this,read,fields,new,value,num,fields,else,if,this,read,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,read,fields,0,new,fields,0,old,num,fields,this,read,fields,new,fields,if,this,write,fields,null,this,write,fields,new,value,num,fields,else,if,this,write,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,write,fields,0,new,fields,0,old,num,fields,this,write,fields,new,fields
Record -> public void makeSpace(int numFields);1452178883;Reserves space for at least the given number of fields in the internal arrays.__@param numFields The number of fields to reserve space for.;public void makeSpace(int numFields) {_		final int oldNumFields = this.numFields__		_		if (this.offsets == null) {_			this.offsets = new int[numFields]__		}_		else if (this.offsets.length < numFields) {_			int[] newOffs = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.offsets, 0, newOffs, 0, oldNumFields)__			this.offsets = newOffs__		}_		_		if (this.lengths == null) {_			this.lengths = new int[numFields]__		}_		else if (this.lengths.length < numFields) {_			int[] newLens = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.lengths, 0, newLens, 0, oldNumFields)__			this.lengths = newLens__		}_		_		if (this.readFields == null) {_			this.readFields = new Value[numFields]__		}_		else if (this.readFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.readFields, 0, newFields, 0, oldNumFields)__			this.readFields = newFields__		}_		_		if (this.writeFields == null) {_			this.writeFields = new Value[numFields]__		}_		else if (this.writeFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.writeFields, 0, newFields, 0, oldNumFields)__			this.writeFields = newFields__		}_	};reserves,space,for,at,least,the,given,number,of,fields,in,the,internal,arrays,param,num,fields,the,number,of,fields,to,reserve,space,for;public,void,make,space,int,num,fields,final,int,old,num,fields,this,num,fields,if,this,offsets,null,this,offsets,new,int,num,fields,else,if,this,offsets,length,num,fields,int,new,offs,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,offsets,0,new,offs,0,old,num,fields,this,offsets,new,offs,if,this,lengths,null,this,lengths,new,int,num,fields,else,if,this,lengths,length,num,fields,int,new,lens,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,lengths,0,new,lens,0,old,num,fields,this,lengths,new,lens,if,this,read,fields,null,this,read,fields,new,value,num,fields,else,if,this,read,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,read,fields,0,new,fields,0,old,num,fields,this,read,fields,new,fields,if,this,write,fields,null,this,write,fields,new,value,num,fields,else,if,this,write,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,write,fields,0,new,fields,0,old,num,fields,this,write,fields,new,fields
Record -> public void makeSpace(int numFields);1489589988;Reserves space for at least the given number of fields in the internal arrays.__@param numFields The number of fields to reserve space for.;public void makeSpace(int numFields) {_		final int oldNumFields = this.numFields__		_		if (this.offsets == null) {_			this.offsets = new int[numFields]__		}_		else if (this.offsets.length < numFields) {_			int[] newOffs = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.offsets, 0, newOffs, 0, oldNumFields)__			this.offsets = newOffs__		}_		_		if (this.lengths == null) {_			this.lengths = new int[numFields]__		}_		else if (this.lengths.length < numFields) {_			int[] newLens = new int[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.lengths, 0, newLens, 0, oldNumFields)__			this.lengths = newLens__		}_		_		if (this.readFields == null) {_			this.readFields = new Value[numFields]__		}_		else if (this.readFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.readFields, 0, newFields, 0, oldNumFields)__			this.readFields = newFields__		}_		_		if (this.writeFields == null) {_			this.writeFields = new Value[numFields]__		}_		else if (this.writeFields.length < numFields) {_			Value[] newFields = new Value[Math.max(numFields + 1, oldNumFields << 1)]__			System.arraycopy(this.writeFields, 0, newFields, 0, oldNumFields)__			this.writeFields = newFields__		}_	};reserves,space,for,at,least,the,given,number,of,fields,in,the,internal,arrays,param,num,fields,the,number,of,fields,to,reserve,space,for;public,void,make,space,int,num,fields,final,int,old,num,fields,this,num,fields,if,this,offsets,null,this,offsets,new,int,num,fields,else,if,this,offsets,length,num,fields,int,new,offs,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,offsets,0,new,offs,0,old,num,fields,this,offsets,new,offs,if,this,lengths,null,this,lengths,new,int,num,fields,else,if,this,lengths,length,num,fields,int,new,lens,new,int,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,lengths,0,new,lens,0,old,num,fields,this,lengths,new,lens,if,this,read,fields,null,this,read,fields,new,value,num,fields,else,if,this,read,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,read,fields,0,new,fields,0,old,num,fields,this,read,fields,new,fields,if,this,write,fields,null,this,write,fields,new,value,num,fields,else,if,this,write,fields,length,num,fields,value,new,fields,new,value,math,max,num,fields,1,old,num,fields,1,system,arraycopy,this,write,fields,0,new,fields,0,old,num,fields,this,write,fields,new,fields
Record -> public boolean getFieldInto(int fieldNum, Value target);1405024514;Gets the field at the given position. If the field at that position is null, then this method leaves_the target field unchanged and returns false.__@param fieldNum The position of the field._@param target The value to deserialize the field into._@return True, if the field was deserialized properly, false, if the field was null.;public boolean getFieldInto(int fieldNum, Value target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		_		_		int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return false__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			updateBinaryRepresenation()__			offset = this.offsets[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return true__	};gets,the,field,at,the,given,position,if,the,field,at,that,position,is,null,then,this,method,leaves,the,target,field,unchanged,and,returns,false,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,true,if,the,field,was,deserialized,properly,false,if,the,field,was,null;public,boolean,get,field,into,int,field,num,value,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,offset,this,offsets,field,num,if,offset,return,false,else,if,offset,update,binary,represenation,offset,this,offsets,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,true
Record -> public boolean getFieldInto(int fieldNum, Value target);1405090423;Gets the field at the given position. If the field at that position is null, then this method leaves_the target field unchanged and returns false.__@param fieldNum The position of the field._@param target The value to deserialize the field into._@return True, if the field was deserialized properly, false, if the field was null.;public boolean getFieldInto(int fieldNum, Value target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		_		_		int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return false__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			updateBinaryRepresenation()__			offset = this.offsets[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return true__	};gets,the,field,at,the,given,position,if,the,field,at,that,position,is,null,then,this,method,leaves,the,target,field,unchanged,and,returns,false,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,true,if,the,field,was,deserialized,properly,false,if,the,field,was,null;public,boolean,get,field,into,int,field,num,value,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,offset,this,offsets,field,num,if,offset,return,false,else,if,offset,update,binary,represenation,offset,this,offsets,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,true
Record -> public boolean getFieldInto(int fieldNum, Value target);1411473593;Gets the field at the given position. If the field at that position is null, then this method leaves_the target field unchanged and returns false.__@param fieldNum The position of the field._@param target The value to deserialize the field into._@return True, if the field was deserialized properly, false, if the field was null.;public boolean getFieldInto(int fieldNum, Value target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		_		_		int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return false__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			updateBinaryRepresenation()__			offset = this.offsets[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return true__	};gets,the,field,at,the,given,position,if,the,field,at,that,position,is,null,then,this,method,leaves,the,target,field,unchanged,and,returns,false,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,true,if,the,field,was,deserialized,properly,false,if,the,field,was,null;public,boolean,get,field,into,int,field,num,value,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,offset,this,offsets,field,num,if,offset,return,false,else,if,offset,update,binary,represenation,offset,this,offsets,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,true
Record -> public boolean getFieldInto(int fieldNum, Value target);1414786554;Gets the field at the given position. If the field at that position is null, then this method leaves_the target field unchanged and returns false.__@param fieldNum The position of the field._@param target The value to deserialize the field into._@return True, if the field was deserialized properly, false, if the field was null.;public boolean getFieldInto(int fieldNum, Value target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		_		_		int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return false__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			updateBinaryRepresenation()__			offset = this.offsets[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return true__	};gets,the,field,at,the,given,position,if,the,field,at,that,position,is,null,then,this,method,leaves,the,target,field,unchanged,and,returns,false,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,true,if,the,field,was,deserialized,properly,false,if,the,field,was,null;public,boolean,get,field,into,int,field,num,value,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,offset,this,offsets,field,num,if,offset,return,false,else,if,offset,update,binary,represenation,offset,this,offsets,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,true
Record -> public boolean getFieldInto(int fieldNum, Value target);1423847366;Gets the field at the given position. If the field at that position is null, then this method leaves_the target field unchanged and returns false.__@param fieldNum The position of the field._@param target The value to deserialize the field into._@return True, if the field was deserialized properly, false, if the field was null.;public boolean getFieldInto(int fieldNum, Value target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		_		_		int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return false__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			updateBinaryRepresenation()__			offset = this.offsets[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return true__	};gets,the,field,at,the,given,position,if,the,field,at,that,position,is,null,then,this,method,leaves,the,target,field,unchanged,and,returns,false,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,true,if,the,field,was,deserialized,properly,false,if,the,field,was,null;public,boolean,get,field,into,int,field,num,value,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,offset,this,offsets,field,num,if,offset,return,false,else,if,offset,update,binary,represenation,offset,this,offsets,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,true
Record -> public boolean getFieldInto(int fieldNum, Value target);1443521887;Gets the field at the given position. If the field at that position is null, then this method leaves_the target field unchanged and returns false.__@param fieldNum The position of the field._@param target The value to deserialize the field into._@return True, if the field was deserialized properly, false, if the field was null.;public boolean getFieldInto(int fieldNum, Value target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		_		_		int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return false__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			updateBinaryRepresenation()__			offset = this.offsets[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return true__	};gets,the,field,at,the,given,position,if,the,field,at,that,position,is,null,then,this,method,leaves,the,target,field,unchanged,and,returns,false,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,true,if,the,field,was,deserialized,properly,false,if,the,field,was,null;public,boolean,get,field,into,int,field,num,value,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,offset,this,offsets,field,num,if,offset,return,false,else,if,offset,update,binary,represenation,offset,this,offsets,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,true
Record -> public boolean getFieldInto(int fieldNum, Value target);1446112342;Gets the field at the given position. If the field at that position is null, then this method leaves_the target field unchanged and returns false.__@param fieldNum The position of the field._@param target The value to deserialize the field into._@return True, if the field was deserialized properly, false, if the field was null.;public boolean getFieldInto(int fieldNum, Value target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		_		_		int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return false__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			updateBinaryRepresenation()__			offset = this.offsets[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return true__	};gets,the,field,at,the,given,position,if,the,field,at,that,position,is,null,then,this,method,leaves,the,target,field,unchanged,and,returns,false,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,true,if,the,field,was,deserialized,properly,false,if,the,field,was,null;public,boolean,get,field,into,int,field,num,value,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,offset,this,offsets,field,num,if,offset,return,false,else,if,offset,update,binary,represenation,offset,this,offsets,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,true
Record -> public boolean getFieldInto(int fieldNum, Value target);1448491524;Gets the field at the given position. If the field at that position is null, then this method leaves_the target field unchanged and returns false.__@param fieldNum The position of the field._@param target The value to deserialize the field into._@return True, if the field was deserialized properly, false, if the field was null.;public boolean getFieldInto(int fieldNum, Value target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		_		_		int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return false__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			updateBinaryRepresenation()__			offset = this.offsets[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return true__	};gets,the,field,at,the,given,position,if,the,field,at,that,position,is,null,then,this,method,leaves,the,target,field,unchanged,and,returns,false,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,true,if,the,field,was,deserialized,properly,false,if,the,field,was,null;public,boolean,get,field,into,int,field,num,value,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,offset,this,offsets,field,num,if,offset,return,false,else,if,offset,update,binary,represenation,offset,this,offsets,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,true
Record -> public boolean getFieldInto(int fieldNum, Value target);1452178883;Gets the field at the given position. If the field at that position is null, then this method leaves_the target field unchanged and returns false.__@param fieldNum The position of the field._@param target The value to deserialize the field into._@return True, if the field was deserialized properly, false, if the field was null.;public boolean getFieldInto(int fieldNum, Value target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		_		_		int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return false__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			updateBinaryRepresenation()__			offset = this.offsets[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return true__	};gets,the,field,at,the,given,position,if,the,field,at,that,position,is,null,then,this,method,leaves,the,target,field,unchanged,and,returns,false,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,true,if,the,field,was,deserialized,properly,false,if,the,field,was,null;public,boolean,get,field,into,int,field,num,value,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,offset,this,offsets,field,num,if,offset,return,false,else,if,offset,update,binary,represenation,offset,this,offsets,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,true
Record -> public boolean getFieldInto(int fieldNum, Value target);1489589988;Gets the field at the given position. If the field at that position is null, then this method leaves_the target field unchanged and returns false.__@param fieldNum The position of the field._@param target The value to deserialize the field into._@return True, if the field was deserialized properly, false, if the field was null.;public boolean getFieldInto(int fieldNum, Value target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		_		_		int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return false__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			updateBinaryRepresenation()__			offset = this.offsets[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return true__	};gets,the,field,at,the,given,position,if,the,field,at,that,position,is,null,then,this,method,leaves,the,target,field,unchanged,and,returns,false,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,true,if,the,field,was,deserialized,properly,false,if,the,field,was,null;public,boolean,get,field,into,int,field,num,value,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,int,offset,this,offsets,field,num,if,offset,return,false,else,if,offset,update,binary,represenation,offset,this,offsets,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,true
Record -> private final <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber);1405024514;Deserializes the given object from the binary string, starting at the given position._If the deserialization asks for more that <code>limit - offset</code> bytes, than_an exception is thrown.__@param <T> The generic type of the value to be deserialized._@param target The object to deserialize the data into._@param offset The offset in the binary string._@param limit The limit in the binary string.;private final <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber) {_		final InternalDeSerializer serializer = this.serializer__		serializer.memory = this.binaryData__		serializer.position = offset__		serializer.end = limit__		try {_			target.read(serializer)__		}_		catch (Exception e) {_			throw new DeserializationException("Error reading field " + fieldNumber + " as " + target.getClass().getName(), e)__		}_	};deserializes,the,given,object,from,the,binary,string,starting,at,the,given,position,if,the,deserialization,asks,for,more,that,code,limit,offset,code,bytes,than,an,exception,is,thrown,param,t,the,generic,type,of,the,value,to,be,deserialized,param,target,the,object,to,deserialize,the,data,into,param,offset,the,offset,in,the,binary,string,param,limit,the,limit,in,the,binary,string;private,final,t,extends,value,void,deserialize,t,target,int,offset,int,limit,int,field,number,final,internal,de,serializer,serializer,this,serializer,serializer,memory,this,binary,data,serializer,position,offset,serializer,end,limit,try,target,read,serializer,catch,exception,e,throw,new,deserialization,exception,error,reading,field,field,number,as,target,get,class,get,name,e
Record -> private final <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber);1405090423;Deserializes the given object from the binary string, starting at the given position._If the deserialization asks for more that <code>limit - offset</code> bytes, than_an exception is thrown.__@param <T> The generic type of the value to be deserialized._@param target The object to deserialize the data into._@param offset The offset in the binary string._@param limit The limit in the binary string.;private final <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber) {_		final InternalDeSerializer serializer = this.serializer__		serializer.memory = this.binaryData__		serializer.position = offset__		serializer.end = limit__		try {_			target.read(serializer)__		}_		catch (Exception e) {_			throw new DeserializationException("Error reading field " + fieldNumber + " as " + target.getClass().getName(), e)__		}_	};deserializes,the,given,object,from,the,binary,string,starting,at,the,given,position,if,the,deserialization,asks,for,more,that,code,limit,offset,code,bytes,than,an,exception,is,thrown,param,t,the,generic,type,of,the,value,to,be,deserialized,param,target,the,object,to,deserialize,the,data,into,param,offset,the,offset,in,the,binary,string,param,limit,the,limit,in,the,binary,string;private,final,t,extends,value,void,deserialize,t,target,int,offset,int,limit,int,field,number,final,internal,de,serializer,serializer,this,serializer,serializer,memory,this,binary,data,serializer,position,offset,serializer,end,limit,try,target,read,serializer,catch,exception,e,throw,new,deserialization,exception,error,reading,field,field,number,as,target,get,class,get,name,e
Record -> private final <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber);1411473593;Deserializes the given object from the binary string, starting at the given position._If the deserialization asks for more that <code>limit - offset</code> bytes, than_an exception is thrown.__@param <T> The generic type of the value to be deserialized._@param target The object to deserialize the data into._@param offset The offset in the binary string._@param limit The limit in the binary string.;private final <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber) {_		final InternalDeSerializer serializer = this.serializer__		serializer.memory = this.binaryData__		serializer.position = offset__		serializer.end = limit__		try {_			target.read(serializer)__		}_		catch (Exception e) {_			throw new DeserializationException("Error reading field " + fieldNumber + " as " + target.getClass().getName(), e)__		}_	};deserializes,the,given,object,from,the,binary,string,starting,at,the,given,position,if,the,deserialization,asks,for,more,that,code,limit,offset,code,bytes,than,an,exception,is,thrown,param,t,the,generic,type,of,the,value,to,be,deserialized,param,target,the,object,to,deserialize,the,data,into,param,offset,the,offset,in,the,binary,string,param,limit,the,limit,in,the,binary,string;private,final,t,extends,value,void,deserialize,t,target,int,offset,int,limit,int,field,number,final,internal,de,serializer,serializer,this,serializer,serializer,memory,this,binary,data,serializer,position,offset,serializer,end,limit,try,target,read,serializer,catch,exception,e,throw,new,deserialization,exception,error,reading,field,field,number,as,target,get,class,get,name,e
Record -> public void unionFields(Record other);1405024514;Unions the other record's fields with this records fields. After the method invocation with record_<code>B</code> as the parameter, this record <code>A</code> will contain at field <code>i</code>:_<ul>_<li>Field <code>i</code> from record <code>A</code>, if that field is within record <code>A</code>'s number_of fields and is not <i>null</i>.</li>_<li>Field <code>i</code> from record <code>B</code>, if that field is within record <code>B</code>'s number_of fields.</li>_</ul>_It is not necessary that both records have the same number of fields. This record will have the number of_fields of the larger of the two records. Naturally, if both <code>A</code> and <code>B</code> have field_<code>i</code> set to <i>null</i>, this record will have <i>null</i> at that position.__@param other The records whose fields to union with this record's fields.;public void unionFields(Record other) {_		final int minFields = Math.min(this.numFields, other.numFields)__		final int maxFields = Math.max(this.numFields, other.numFields)__		_		final int[] offsets = this.offsets.length >= maxFields ? this.offsets : new int[maxFields]__		final int[] lengths = this.lengths.length >= maxFields ? this.lengths : new int[maxFields]__		_		if (!(this.isModified() || other.isModified())) {_			_			_			final int estimatedLength = this.binaryLen + other.binaryLen__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					int begin = -1__					int end = -1__					int offsetDelta = 0__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else {_							end = sourceForRemainder.offsets[k]+sourceForRemainder.lengths[k]__							if (begin == -1) {_								_								begin = sourceForRemainder.offsets[k]__								offsetDelta = this.serializer.position - begin__							}_							offsets[k] = sourceForRemainder.offsets[k] + offsetDelta__						}_					}_					_					_					if (begin != -1) {_						this.serializer.write(sourceForRemainder.binaryData, begin, _								end - begin)__					}_					_					_					if (lengths != sourceForRemainder.lengths) {_						System.arraycopy(sourceForRemainder.lengths, minFields, lengths, minFields, maxFields - minFields)__					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		else {_			_			final int estimatedLength = (this.binaryLen > 0 ? this.binaryLen : this.numFields * DEFAULT_FIELD_LEN_ESTIMATE) + _										(other.binaryLen > 0 ? other.binaryLen : other.numFields * DEFAULT_FIELD_LEN_ESTIMATE)__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else if (otherOff == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[i] = this.serializer.position__							other.writeFields[i].write(this.serializer)__							lengths[i] = this.serializer.position - offsets[i]__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else if (thisOff == MODIFIED_INDICATOR_OFFSET) {_						_						offsets[i] = this.serializer.position__						this.writeFields[i].write(this.serializer)__						lengths[i] = this.serializer.position - offsets[i]__					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else if (off == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[k] = this.serializer.position__							sourceForRemainder.writeFields[k].write(this.serializer)__							lengths[k] = this.serializer.position - offsets[k]__						} else {_							_							offsets[k] = this.serializer.position__							final int len = sourceForRemainder.lengths[k]__							this.serializer.write(sourceForRemainder.binaryData, off, len)__							lengths[k] = len__						}_					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		_		serializeHeader(this.serializer, offsets, maxFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		_		this.numFields = maxFields__		this.offsets = offsets__		this.lengths = lengths__		_		this.firstModifiedPos = Integer.MAX_VALUE__		_		_		if (this.readFields == null || this.readFields.length < maxFields) {_			final Value[] na = new Value[maxFields]__			System.arraycopy(this.readFields, 0, na, 0, this.readFields.length)__			this.readFields = na__		}_		this.writeFields = (this.writeFields == null || this.writeFields.length < maxFields) ? _																new Value[maxFields] : this.writeFields__	};unions,the,other,record,s,fields,with,this,records,fields,after,the,method,invocation,with,record,code,b,code,as,the,parameter,this,record,code,a,code,will,contain,at,field,code,i,code,ul,li,field,code,i,code,from,record,code,a,code,if,that,field,is,within,record,code,a,code,s,number,of,fields,and,is,not,i,null,i,li,li,field,code,i,code,from,record,code,b,code,if,that,field,is,within,record,code,b,code,s,number,of,fields,li,ul,it,is,not,necessary,that,both,records,have,the,same,number,of,fields,this,record,will,have,the,number,of,fields,of,the,larger,of,the,two,records,naturally,if,both,code,a,code,and,code,b,code,have,field,code,i,code,set,to,i,null,i,this,record,will,have,i,null,i,at,that,position,param,other,the,records,whose,fields,to,union,with,this,record,s,fields;public,void,union,fields,record,other,final,int,min,fields,math,min,this,num,fields,other,num,fields,final,int,max,fields,math,max,this,num,fields,other,num,fields,final,int,offsets,this,offsets,length,max,fields,this,offsets,new,int,max,fields,final,int,lengths,this,lengths,length,max,fields,this,lengths,new,int,max,fields,if,this,is,modified,other,is,modified,final,int,estimated,length,this,binary,len,other,binary,len,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,int,begin,1,int,end,1,int,offset,delta,0,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,end,source,for,remainder,offsets,k,source,for,remainder,lengths,k,if,begin,1,begin,source,for,remainder,offsets,k,offset,delta,this,serializer,position,begin,offsets,k,source,for,remainder,offsets,k,offset,delta,if,begin,1,this,serializer,write,source,for,remainder,binary,data,begin,end,begin,if,lengths,source,for,remainder,lengths,system,arraycopy,source,for,remainder,lengths,min,fields,lengths,min,fields,max,fields,min,fields,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,else,final,int,estimated,length,this,binary,len,0,this,binary,len,this,num,fields,other,binary,len,0,other,binary,len,other,num,fields,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,if,other,off,offsets,i,this,serializer,position,other,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,if,this,off,offsets,i,this,serializer,position,this,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,if,off,offsets,k,this,serializer,position,source,for,remainder,write,fields,k,write,this,serializer,lengths,k,this,serializer,position,offsets,k,else,offsets,k,this,serializer,position,final,int,len,source,for,remainder,lengths,k,this,serializer,write,source,for,remainder,binary,data,off,len,lengths,k,len,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,serialize,header,this,serializer,offsets,max,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,num,fields,max,fields,this,offsets,offsets,this,lengths,lengths,this,first,modified,pos,integer,if,this,read,fields,null,this,read,fields,length,max,fields,final,value,na,new,value,max,fields,system,arraycopy,this,read,fields,0,na,0,this,read,fields,length,this,read,fields,na,this,write,fields,this,write,fields,null,this,write,fields,length,max,fields,new,value,max,fields,this,write,fields
Record -> public void unionFields(Record other);1405090423;Unions the other record's fields with this records fields. After the method invocation with record_<code>B</code> as the parameter, this record <code>A</code> will contain at field <code>i</code>:_<ul>_<li>Field <code>i</code> from record <code>A</code>, if that field is within record <code>A</code>'s number_of fields and is not <i>null</i>.</li>_<li>Field <code>i</code> from record <code>B</code>, if that field is within record <code>B</code>'s number_of fields.</li>_</ul>_It is not necessary that both records have the same number of fields. This record will have the number of_fields of the larger of the two records. Naturally, if both <code>A</code> and <code>B</code> have field_<code>i</code> set to <i>null</i>, this record will have <i>null</i> at that position.__@param other The records whose fields to union with this record's fields.;public void unionFields(Record other) {_		final int minFields = Math.min(this.numFields, other.numFields)__		final int maxFields = Math.max(this.numFields, other.numFields)__		_		final int[] offsets = this.offsets.length >= maxFields ? this.offsets : new int[maxFields]__		final int[] lengths = this.lengths.length >= maxFields ? this.lengths : new int[maxFields]__		_		if (!(this.isModified() || other.isModified())) {_			_			_			final int estimatedLength = this.binaryLen + other.binaryLen__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					int begin = -1__					int end = -1__					int offsetDelta = 0__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else {_							end = sourceForRemainder.offsets[k]+sourceForRemainder.lengths[k]__							if (begin == -1) {_								_								begin = sourceForRemainder.offsets[k]__								offsetDelta = this.serializer.position - begin__							}_							offsets[k] = sourceForRemainder.offsets[k] + offsetDelta__						}_					}_					_					_					if (begin != -1) {_						this.serializer.write(sourceForRemainder.binaryData, begin, _								end - begin)__					}_					_					_					if (lengths != sourceForRemainder.lengths) {_						System.arraycopy(sourceForRemainder.lengths, minFields, lengths, minFields, maxFields - minFields)__					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		else {_			_			final int estimatedLength = (this.binaryLen > 0 ? this.binaryLen : this.numFields * DEFAULT_FIELD_LEN_ESTIMATE) + _										(other.binaryLen > 0 ? other.binaryLen : other.numFields * DEFAULT_FIELD_LEN_ESTIMATE)__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else if (otherOff == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[i] = this.serializer.position__							other.writeFields[i].write(this.serializer)__							lengths[i] = this.serializer.position - offsets[i]__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else if (thisOff == MODIFIED_INDICATOR_OFFSET) {_						_						offsets[i] = this.serializer.position__						this.writeFields[i].write(this.serializer)__						lengths[i] = this.serializer.position - offsets[i]__					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else if (off == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[k] = this.serializer.position__							sourceForRemainder.writeFields[k].write(this.serializer)__							lengths[k] = this.serializer.position - offsets[k]__						} else {_							_							offsets[k] = this.serializer.position__							final int len = sourceForRemainder.lengths[k]__							this.serializer.write(sourceForRemainder.binaryData, off, len)__							lengths[k] = len__						}_					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		_		serializeHeader(this.serializer, offsets, maxFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		_		this.numFields = maxFields__		this.offsets = offsets__		this.lengths = lengths__		_		this.firstModifiedPos = Integer.MAX_VALUE__		_		_		if (this.readFields == null || this.readFields.length < maxFields) {_			final Value[] na = new Value[maxFields]__			System.arraycopy(this.readFields, 0, na, 0, this.readFields.length)__			this.readFields = na__		}_		this.writeFields = (this.writeFields == null || this.writeFields.length < maxFields) ? _																new Value[maxFields] : this.writeFields__	};unions,the,other,record,s,fields,with,this,records,fields,after,the,method,invocation,with,record,code,b,code,as,the,parameter,this,record,code,a,code,will,contain,at,field,code,i,code,ul,li,field,code,i,code,from,record,code,a,code,if,that,field,is,within,record,code,a,code,s,number,of,fields,and,is,not,i,null,i,li,li,field,code,i,code,from,record,code,b,code,if,that,field,is,within,record,code,b,code,s,number,of,fields,li,ul,it,is,not,necessary,that,both,records,have,the,same,number,of,fields,this,record,will,have,the,number,of,fields,of,the,larger,of,the,two,records,naturally,if,both,code,a,code,and,code,b,code,have,field,code,i,code,set,to,i,null,i,this,record,will,have,i,null,i,at,that,position,param,other,the,records,whose,fields,to,union,with,this,record,s,fields;public,void,union,fields,record,other,final,int,min,fields,math,min,this,num,fields,other,num,fields,final,int,max,fields,math,max,this,num,fields,other,num,fields,final,int,offsets,this,offsets,length,max,fields,this,offsets,new,int,max,fields,final,int,lengths,this,lengths,length,max,fields,this,lengths,new,int,max,fields,if,this,is,modified,other,is,modified,final,int,estimated,length,this,binary,len,other,binary,len,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,int,begin,1,int,end,1,int,offset,delta,0,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,end,source,for,remainder,offsets,k,source,for,remainder,lengths,k,if,begin,1,begin,source,for,remainder,offsets,k,offset,delta,this,serializer,position,begin,offsets,k,source,for,remainder,offsets,k,offset,delta,if,begin,1,this,serializer,write,source,for,remainder,binary,data,begin,end,begin,if,lengths,source,for,remainder,lengths,system,arraycopy,source,for,remainder,lengths,min,fields,lengths,min,fields,max,fields,min,fields,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,else,final,int,estimated,length,this,binary,len,0,this,binary,len,this,num,fields,other,binary,len,0,other,binary,len,other,num,fields,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,if,other,off,offsets,i,this,serializer,position,other,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,if,this,off,offsets,i,this,serializer,position,this,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,if,off,offsets,k,this,serializer,position,source,for,remainder,write,fields,k,write,this,serializer,lengths,k,this,serializer,position,offsets,k,else,offsets,k,this,serializer,position,final,int,len,source,for,remainder,lengths,k,this,serializer,write,source,for,remainder,binary,data,off,len,lengths,k,len,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,serialize,header,this,serializer,offsets,max,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,num,fields,max,fields,this,offsets,offsets,this,lengths,lengths,this,first,modified,pos,integer,if,this,read,fields,null,this,read,fields,length,max,fields,final,value,na,new,value,max,fields,system,arraycopy,this,read,fields,0,na,0,this,read,fields,length,this,read,fields,na,this,write,fields,this,write,fields,null,this,write,fields,length,max,fields,new,value,max,fields,this,write,fields
Record -> public void unionFields(Record other);1411473593;Unions the other record's fields with this records fields. After the method invocation with record_<code>B</code> as the parameter, this record <code>A</code> will contain at field <code>i</code>:_<ul>_<li>Field <code>i</code> from record <code>A</code>, if that field is within record <code>A</code>'s number_of fields and is not <i>null</i>.</li>_<li>Field <code>i</code> from record <code>B</code>, if that field is within record <code>B</code>'s number_of fields.</li>_</ul>_It is not necessary that both records have the same number of fields. This record will have the number of_fields of the larger of the two records. Naturally, if both <code>A</code> and <code>B</code> have field_<code>i</code> set to <i>null</i>, this record will have <i>null</i> at that position.__@param other The records whose fields to union with this record's fields.;public void unionFields(Record other) {_		final int minFields = Math.min(this.numFields, other.numFields)__		final int maxFields = Math.max(this.numFields, other.numFields)__		_		final int[] offsets = this.offsets.length >= maxFields ? this.offsets : new int[maxFields]__		final int[] lengths = this.lengths.length >= maxFields ? this.lengths : new int[maxFields]__		_		if (!(this.isModified() || other.isModified())) {_			_			_			final int estimatedLength = this.binaryLen + other.binaryLen__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					int begin = -1__					int end = -1__					int offsetDelta = 0__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else {_							end = sourceForRemainder.offsets[k]+sourceForRemainder.lengths[k]__							if (begin == -1) {_								_								begin = sourceForRemainder.offsets[k]__								offsetDelta = this.serializer.position - begin__							}_							offsets[k] = sourceForRemainder.offsets[k] + offsetDelta__						}_					}_					_					_					if (begin != -1) {_						this.serializer.write(sourceForRemainder.binaryData, begin, _								end - begin)__					}_					_					_					if (lengths != sourceForRemainder.lengths) {_						System.arraycopy(sourceForRemainder.lengths, minFields, lengths, minFields, maxFields - minFields)__					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		else {_			_			final int estimatedLength = (this.binaryLen > 0 ? this.binaryLen : this.numFields * DEFAULT_FIELD_LEN_ESTIMATE) + _										(other.binaryLen > 0 ? other.binaryLen : other.numFields * DEFAULT_FIELD_LEN_ESTIMATE)__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else if (otherOff == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[i] = this.serializer.position__							other.writeFields[i].write(this.serializer)__							lengths[i] = this.serializer.position - offsets[i]__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else if (thisOff == MODIFIED_INDICATOR_OFFSET) {_						_						offsets[i] = this.serializer.position__						this.writeFields[i].write(this.serializer)__						lengths[i] = this.serializer.position - offsets[i]__					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else if (off == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[k] = this.serializer.position__							sourceForRemainder.writeFields[k].write(this.serializer)__							lengths[k] = this.serializer.position - offsets[k]__						} else {_							_							offsets[k] = this.serializer.position__							final int len = sourceForRemainder.lengths[k]__							this.serializer.write(sourceForRemainder.binaryData, off, len)__							lengths[k] = len__						}_					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		_		serializeHeader(this.serializer, offsets, maxFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		_		this.numFields = maxFields__		this.offsets = offsets__		this.lengths = lengths__		_		this.firstModifiedPos = Integer.MAX_VALUE__		_		_		if (this.readFields == null || this.readFields.length < maxFields) {_			final Value[] na = new Value[maxFields]__			System.arraycopy(this.readFields, 0, na, 0, this.readFields.length)__			this.readFields = na__		}_		this.writeFields = (this.writeFields == null || this.writeFields.length < maxFields) ? _																new Value[maxFields] : this.writeFields__	};unions,the,other,record,s,fields,with,this,records,fields,after,the,method,invocation,with,record,code,b,code,as,the,parameter,this,record,code,a,code,will,contain,at,field,code,i,code,ul,li,field,code,i,code,from,record,code,a,code,if,that,field,is,within,record,code,a,code,s,number,of,fields,and,is,not,i,null,i,li,li,field,code,i,code,from,record,code,b,code,if,that,field,is,within,record,code,b,code,s,number,of,fields,li,ul,it,is,not,necessary,that,both,records,have,the,same,number,of,fields,this,record,will,have,the,number,of,fields,of,the,larger,of,the,two,records,naturally,if,both,code,a,code,and,code,b,code,have,field,code,i,code,set,to,i,null,i,this,record,will,have,i,null,i,at,that,position,param,other,the,records,whose,fields,to,union,with,this,record,s,fields;public,void,union,fields,record,other,final,int,min,fields,math,min,this,num,fields,other,num,fields,final,int,max,fields,math,max,this,num,fields,other,num,fields,final,int,offsets,this,offsets,length,max,fields,this,offsets,new,int,max,fields,final,int,lengths,this,lengths,length,max,fields,this,lengths,new,int,max,fields,if,this,is,modified,other,is,modified,final,int,estimated,length,this,binary,len,other,binary,len,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,int,begin,1,int,end,1,int,offset,delta,0,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,end,source,for,remainder,offsets,k,source,for,remainder,lengths,k,if,begin,1,begin,source,for,remainder,offsets,k,offset,delta,this,serializer,position,begin,offsets,k,source,for,remainder,offsets,k,offset,delta,if,begin,1,this,serializer,write,source,for,remainder,binary,data,begin,end,begin,if,lengths,source,for,remainder,lengths,system,arraycopy,source,for,remainder,lengths,min,fields,lengths,min,fields,max,fields,min,fields,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,else,final,int,estimated,length,this,binary,len,0,this,binary,len,this,num,fields,other,binary,len,0,other,binary,len,other,num,fields,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,if,other,off,offsets,i,this,serializer,position,other,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,if,this,off,offsets,i,this,serializer,position,this,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,if,off,offsets,k,this,serializer,position,source,for,remainder,write,fields,k,write,this,serializer,lengths,k,this,serializer,position,offsets,k,else,offsets,k,this,serializer,position,final,int,len,source,for,remainder,lengths,k,this,serializer,write,source,for,remainder,binary,data,off,len,lengths,k,len,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,serialize,header,this,serializer,offsets,max,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,num,fields,max,fields,this,offsets,offsets,this,lengths,lengths,this,first,modified,pos,integer,if,this,read,fields,null,this,read,fields,length,max,fields,final,value,na,new,value,max,fields,system,arraycopy,this,read,fields,0,na,0,this,read,fields,length,this,read,fields,na,this,write,fields,this,write,fields,null,this,write,fields,length,max,fields,new,value,max,fields,this,write,fields
Record -> public void unionFields(Record other);1414786554;Unions the other record's fields with this records fields. After the method invocation with record_<code>B</code> as the parameter, this record <code>A</code> will contain at field <code>i</code>:_<ul>_<li>Field <code>i</code> from record <code>A</code>, if that field is within record <code>A</code>'s number_of fields and is not <i>null</i>.</li>_<li>Field <code>i</code> from record <code>B</code>, if that field is within record <code>B</code>'s number_of fields.</li>_</ul>_It is not necessary that both records have the same number of fields. This record will have the number of_fields of the larger of the two records. Naturally, if both <code>A</code> and <code>B</code> have field_<code>i</code> set to <i>null</i>, this record will have <i>null</i> at that position.__@param other The records whose fields to union with this record's fields.;public void unionFields(Record other) {_		final int minFields = Math.min(this.numFields, other.numFields)__		final int maxFields = Math.max(this.numFields, other.numFields)__		_		final int[] offsets = this.offsets.length >= maxFields ? this.offsets : new int[maxFields]__		final int[] lengths = this.lengths.length >= maxFields ? this.lengths : new int[maxFields]__		_		if (!(this.isModified() || other.isModified())) {_			_			_			final int estimatedLength = this.binaryLen + other.binaryLen__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					int begin = -1__					int end = -1__					int offsetDelta = 0__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else {_							end = sourceForRemainder.offsets[k]+sourceForRemainder.lengths[k]__							if (begin == -1) {_								_								begin = sourceForRemainder.offsets[k]__								offsetDelta = this.serializer.position - begin__							}_							offsets[k] = sourceForRemainder.offsets[k] + offsetDelta__						}_					}_					_					_					if (begin != -1) {_						this.serializer.write(sourceForRemainder.binaryData, begin, _								end - begin)__					}_					_					_					if (lengths != sourceForRemainder.lengths) {_						System.arraycopy(sourceForRemainder.lengths, minFields, lengths, minFields, maxFields - minFields)__					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		else {_			_			final int estimatedLength = (this.binaryLen > 0 ? this.binaryLen : this.numFields * DEFAULT_FIELD_LEN_ESTIMATE) + _										(other.binaryLen > 0 ? other.binaryLen : other.numFields * DEFAULT_FIELD_LEN_ESTIMATE)__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else if (otherOff == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[i] = this.serializer.position__							other.writeFields[i].write(this.serializer)__							lengths[i] = this.serializer.position - offsets[i]__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else if (thisOff == MODIFIED_INDICATOR_OFFSET) {_						_						offsets[i] = this.serializer.position__						this.writeFields[i].write(this.serializer)__						lengths[i] = this.serializer.position - offsets[i]__					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else if (off == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[k] = this.serializer.position__							sourceForRemainder.writeFields[k].write(this.serializer)__							lengths[k] = this.serializer.position - offsets[k]__						} else {_							_							offsets[k] = this.serializer.position__							final int len = sourceForRemainder.lengths[k]__							this.serializer.write(sourceForRemainder.binaryData, off, len)__							lengths[k] = len__						}_					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		_		serializeHeader(this.serializer, offsets, maxFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		_		this.numFields = maxFields__		this.offsets = offsets__		this.lengths = lengths__		_		this.firstModifiedPos = Integer.MAX_VALUE__		_		_		if (this.readFields == null || this.readFields.length < maxFields) {_			final Value[] na = new Value[maxFields]__			System.arraycopy(this.readFields, 0, na, 0, this.readFields.length)__			this.readFields = na__		}_		this.writeFields = (this.writeFields == null || this.writeFields.length < maxFields) ? _																new Value[maxFields] : this.writeFields__	};unions,the,other,record,s,fields,with,this,records,fields,after,the,method,invocation,with,record,code,b,code,as,the,parameter,this,record,code,a,code,will,contain,at,field,code,i,code,ul,li,field,code,i,code,from,record,code,a,code,if,that,field,is,within,record,code,a,code,s,number,of,fields,and,is,not,i,null,i,li,li,field,code,i,code,from,record,code,b,code,if,that,field,is,within,record,code,b,code,s,number,of,fields,li,ul,it,is,not,necessary,that,both,records,have,the,same,number,of,fields,this,record,will,have,the,number,of,fields,of,the,larger,of,the,two,records,naturally,if,both,code,a,code,and,code,b,code,have,field,code,i,code,set,to,i,null,i,this,record,will,have,i,null,i,at,that,position,param,other,the,records,whose,fields,to,union,with,this,record,s,fields;public,void,union,fields,record,other,final,int,min,fields,math,min,this,num,fields,other,num,fields,final,int,max,fields,math,max,this,num,fields,other,num,fields,final,int,offsets,this,offsets,length,max,fields,this,offsets,new,int,max,fields,final,int,lengths,this,lengths,length,max,fields,this,lengths,new,int,max,fields,if,this,is,modified,other,is,modified,final,int,estimated,length,this,binary,len,other,binary,len,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,int,begin,1,int,end,1,int,offset,delta,0,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,end,source,for,remainder,offsets,k,source,for,remainder,lengths,k,if,begin,1,begin,source,for,remainder,offsets,k,offset,delta,this,serializer,position,begin,offsets,k,source,for,remainder,offsets,k,offset,delta,if,begin,1,this,serializer,write,source,for,remainder,binary,data,begin,end,begin,if,lengths,source,for,remainder,lengths,system,arraycopy,source,for,remainder,lengths,min,fields,lengths,min,fields,max,fields,min,fields,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,else,final,int,estimated,length,this,binary,len,0,this,binary,len,this,num,fields,other,binary,len,0,other,binary,len,other,num,fields,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,if,other,off,offsets,i,this,serializer,position,other,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,if,this,off,offsets,i,this,serializer,position,this,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,if,off,offsets,k,this,serializer,position,source,for,remainder,write,fields,k,write,this,serializer,lengths,k,this,serializer,position,offsets,k,else,offsets,k,this,serializer,position,final,int,len,source,for,remainder,lengths,k,this,serializer,write,source,for,remainder,binary,data,off,len,lengths,k,len,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,serialize,header,this,serializer,offsets,max,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,num,fields,max,fields,this,offsets,offsets,this,lengths,lengths,this,first,modified,pos,integer,if,this,read,fields,null,this,read,fields,length,max,fields,final,value,na,new,value,max,fields,system,arraycopy,this,read,fields,0,na,0,this,read,fields,length,this,read,fields,na,this,write,fields,this,write,fields,null,this,write,fields,length,max,fields,new,value,max,fields,this,write,fields
Record -> public void unionFields(Record other);1423847366;Unions the other record's fields with this records fields. After the method invocation with record_<code>B</code> as the parameter, this record <code>A</code> will contain at field <code>i</code>:_<ul>_<li>Field <code>i</code> from record <code>A</code>, if that field is within record <code>A</code>'s number_of fields and is not <i>null</i>.</li>_<li>Field <code>i</code> from record <code>B</code>, if that field is within record <code>B</code>'s number_of fields.</li>_</ul>_It is not necessary that both records have the same number of fields. This record will have the number of_fields of the larger of the two records. Naturally, if both <code>A</code> and <code>B</code> have field_<code>i</code> set to <i>null</i>, this record will have <i>null</i> at that position.__@param other The records whose fields to union with this record's fields.;public void unionFields(Record other) {_		final int minFields = Math.min(this.numFields, other.numFields)__		final int maxFields = Math.max(this.numFields, other.numFields)__		_		final int[] offsets = this.offsets.length >= maxFields ? this.offsets : new int[maxFields]__		final int[] lengths = this.lengths.length >= maxFields ? this.lengths : new int[maxFields]__		_		if (!(this.isModified() || other.isModified())) {_			_			_			final int estimatedLength = this.binaryLen + other.binaryLen__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					int begin = -1__					int end = -1__					int offsetDelta = 0__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else {_							end = sourceForRemainder.offsets[k]+sourceForRemainder.lengths[k]__							if (begin == -1) {_								_								begin = sourceForRemainder.offsets[k]__								offsetDelta = this.serializer.position - begin__							}_							offsets[k] = sourceForRemainder.offsets[k] + offsetDelta__						}_					}_					_					_					if (begin != -1) {_						this.serializer.write(sourceForRemainder.binaryData, begin, _								end - begin)__					}_					_					_					if (lengths != sourceForRemainder.lengths) {_						System.arraycopy(sourceForRemainder.lengths, minFields, lengths, minFields, maxFields - minFields)__					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		else {_			_			final int estimatedLength = (this.binaryLen > 0 ? this.binaryLen : this.numFields * DEFAULT_FIELD_LEN_ESTIMATE) + _										(other.binaryLen > 0 ? other.binaryLen : other.numFields * DEFAULT_FIELD_LEN_ESTIMATE)__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else if (otherOff == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[i] = this.serializer.position__							other.writeFields[i].write(this.serializer)__							lengths[i] = this.serializer.position - offsets[i]__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else if (thisOff == MODIFIED_INDICATOR_OFFSET) {_						_						offsets[i] = this.serializer.position__						this.writeFields[i].write(this.serializer)__						lengths[i] = this.serializer.position - offsets[i]__					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else if (off == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[k] = this.serializer.position__							sourceForRemainder.writeFields[k].write(this.serializer)__							lengths[k] = this.serializer.position - offsets[k]__						} else {_							_							offsets[k] = this.serializer.position__							final int len = sourceForRemainder.lengths[k]__							this.serializer.write(sourceForRemainder.binaryData, off, len)__							lengths[k] = len__						}_					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		_		serializeHeader(this.serializer, offsets, maxFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		_		this.numFields = maxFields__		this.offsets = offsets__		this.lengths = lengths__		_		this.firstModifiedPos = Integer.MAX_VALUE__		_		_		if (this.readFields == null || this.readFields.length < maxFields) {_			final Value[] na = new Value[maxFields]__			System.arraycopy(this.readFields, 0, na, 0, this.readFields.length)__			this.readFields = na__		}_		this.writeFields = (this.writeFields == null || this.writeFields.length < maxFields) ? _																new Value[maxFields] : this.writeFields__	};unions,the,other,record,s,fields,with,this,records,fields,after,the,method,invocation,with,record,code,b,code,as,the,parameter,this,record,code,a,code,will,contain,at,field,code,i,code,ul,li,field,code,i,code,from,record,code,a,code,if,that,field,is,within,record,code,a,code,s,number,of,fields,and,is,not,i,null,i,li,li,field,code,i,code,from,record,code,b,code,if,that,field,is,within,record,code,b,code,s,number,of,fields,li,ul,it,is,not,necessary,that,both,records,have,the,same,number,of,fields,this,record,will,have,the,number,of,fields,of,the,larger,of,the,two,records,naturally,if,both,code,a,code,and,code,b,code,have,field,code,i,code,set,to,i,null,i,this,record,will,have,i,null,i,at,that,position,param,other,the,records,whose,fields,to,union,with,this,record,s,fields;public,void,union,fields,record,other,final,int,min,fields,math,min,this,num,fields,other,num,fields,final,int,max,fields,math,max,this,num,fields,other,num,fields,final,int,offsets,this,offsets,length,max,fields,this,offsets,new,int,max,fields,final,int,lengths,this,lengths,length,max,fields,this,lengths,new,int,max,fields,if,this,is,modified,other,is,modified,final,int,estimated,length,this,binary,len,other,binary,len,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,int,begin,1,int,end,1,int,offset,delta,0,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,end,source,for,remainder,offsets,k,source,for,remainder,lengths,k,if,begin,1,begin,source,for,remainder,offsets,k,offset,delta,this,serializer,position,begin,offsets,k,source,for,remainder,offsets,k,offset,delta,if,begin,1,this,serializer,write,source,for,remainder,binary,data,begin,end,begin,if,lengths,source,for,remainder,lengths,system,arraycopy,source,for,remainder,lengths,min,fields,lengths,min,fields,max,fields,min,fields,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,else,final,int,estimated,length,this,binary,len,0,this,binary,len,this,num,fields,other,binary,len,0,other,binary,len,other,num,fields,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,if,other,off,offsets,i,this,serializer,position,other,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,if,this,off,offsets,i,this,serializer,position,this,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,if,off,offsets,k,this,serializer,position,source,for,remainder,write,fields,k,write,this,serializer,lengths,k,this,serializer,position,offsets,k,else,offsets,k,this,serializer,position,final,int,len,source,for,remainder,lengths,k,this,serializer,write,source,for,remainder,binary,data,off,len,lengths,k,len,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,serialize,header,this,serializer,offsets,max,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,num,fields,max,fields,this,offsets,offsets,this,lengths,lengths,this,first,modified,pos,integer,if,this,read,fields,null,this,read,fields,length,max,fields,final,value,na,new,value,max,fields,system,arraycopy,this,read,fields,0,na,0,this,read,fields,length,this,read,fields,na,this,write,fields,this,write,fields,null,this,write,fields,length,max,fields,new,value,max,fields,this,write,fields
Record -> public void unionFields(Record other);1443521887;Unions the other record's fields with this records fields. After the method invocation with record_<code>B</code> as the parameter, this record <code>A</code> will contain at field <code>i</code>:_<ul>_<li>Field <code>i</code> from record <code>A</code>, if that field is within record <code>A</code>'s number_of fields and is not <i>null</i>.</li>_<li>Field <code>i</code> from record <code>B</code>, if that field is within record <code>B</code>'s number_of fields.</li>_</ul>_It is not necessary that both records have the same number of fields. This record will have the number of_fields of the larger of the two records. Naturally, if both <code>A</code> and <code>B</code> have field_<code>i</code> set to <i>null</i>, this record will have <i>null</i> at that position.__@param other The records whose fields to union with this record's fields.;public void unionFields(Record other) {_		final int minFields = Math.min(this.numFields, other.numFields)__		final int maxFields = Math.max(this.numFields, other.numFields)__		_		final int[] offsets = this.offsets.length >= maxFields ? this.offsets : new int[maxFields]__		final int[] lengths = this.lengths.length >= maxFields ? this.lengths : new int[maxFields]__		_		if (!(this.isModified() || other.isModified())) {_			_			_			final int estimatedLength = this.binaryLen + other.binaryLen__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					int begin = -1__					int end = -1__					int offsetDelta = 0__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else {_							end = sourceForRemainder.offsets[k]+sourceForRemainder.lengths[k]__							if (begin == -1) {_								_								begin = sourceForRemainder.offsets[k]__								offsetDelta = this.serializer.position - begin__							}_							offsets[k] = sourceForRemainder.offsets[k] + offsetDelta__						}_					}_					_					_					if (begin != -1) {_						this.serializer.write(sourceForRemainder.binaryData, begin, _								end - begin)__					}_					_					_					if (lengths != sourceForRemainder.lengths) {_						System.arraycopy(sourceForRemainder.lengths, minFields, lengths, minFields, maxFields - minFields)__					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		else {_			_			final int estimatedLength = (this.binaryLen > 0 ? this.binaryLen : this.numFields * DEFAULT_FIELD_LEN_ESTIMATE) + _										(other.binaryLen > 0 ? other.binaryLen : other.numFields * DEFAULT_FIELD_LEN_ESTIMATE)__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else if (otherOff == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[i] = this.serializer.position__							other.writeFields[i].write(this.serializer)__							lengths[i] = this.serializer.position - offsets[i]__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else if (thisOff == MODIFIED_INDICATOR_OFFSET) {_						_						offsets[i] = this.serializer.position__						this.writeFields[i].write(this.serializer)__						lengths[i] = this.serializer.position - offsets[i]__					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else if (off == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[k] = this.serializer.position__							sourceForRemainder.writeFields[k].write(this.serializer)__							lengths[k] = this.serializer.position - offsets[k]__						} else {_							_							offsets[k] = this.serializer.position__							final int len = sourceForRemainder.lengths[k]__							this.serializer.write(sourceForRemainder.binaryData, off, len)__							lengths[k] = len__						}_					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		_		serializeHeader(this.serializer, offsets, maxFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		_		this.numFields = maxFields__		this.offsets = offsets__		this.lengths = lengths__		_		this.firstModifiedPos = Integer.MAX_VALUE__		_		_		if (this.readFields == null || this.readFields.length < maxFields) {_			final Value[] na = new Value[maxFields]__			System.arraycopy(this.readFields, 0, na, 0, this.readFields.length)__			this.readFields = na__		}_		this.writeFields = (this.writeFields == null || this.writeFields.length < maxFields) ? _																new Value[maxFields] : this.writeFields__	};unions,the,other,record,s,fields,with,this,records,fields,after,the,method,invocation,with,record,code,b,code,as,the,parameter,this,record,code,a,code,will,contain,at,field,code,i,code,ul,li,field,code,i,code,from,record,code,a,code,if,that,field,is,within,record,code,a,code,s,number,of,fields,and,is,not,i,null,i,li,li,field,code,i,code,from,record,code,b,code,if,that,field,is,within,record,code,b,code,s,number,of,fields,li,ul,it,is,not,necessary,that,both,records,have,the,same,number,of,fields,this,record,will,have,the,number,of,fields,of,the,larger,of,the,two,records,naturally,if,both,code,a,code,and,code,b,code,have,field,code,i,code,set,to,i,null,i,this,record,will,have,i,null,i,at,that,position,param,other,the,records,whose,fields,to,union,with,this,record,s,fields;public,void,union,fields,record,other,final,int,min,fields,math,min,this,num,fields,other,num,fields,final,int,max,fields,math,max,this,num,fields,other,num,fields,final,int,offsets,this,offsets,length,max,fields,this,offsets,new,int,max,fields,final,int,lengths,this,lengths,length,max,fields,this,lengths,new,int,max,fields,if,this,is,modified,other,is,modified,final,int,estimated,length,this,binary,len,other,binary,len,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,int,begin,1,int,end,1,int,offset,delta,0,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,end,source,for,remainder,offsets,k,source,for,remainder,lengths,k,if,begin,1,begin,source,for,remainder,offsets,k,offset,delta,this,serializer,position,begin,offsets,k,source,for,remainder,offsets,k,offset,delta,if,begin,1,this,serializer,write,source,for,remainder,binary,data,begin,end,begin,if,lengths,source,for,remainder,lengths,system,arraycopy,source,for,remainder,lengths,min,fields,lengths,min,fields,max,fields,min,fields,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,else,final,int,estimated,length,this,binary,len,0,this,binary,len,this,num,fields,other,binary,len,0,other,binary,len,other,num,fields,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,if,other,off,offsets,i,this,serializer,position,other,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,if,this,off,offsets,i,this,serializer,position,this,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,if,off,offsets,k,this,serializer,position,source,for,remainder,write,fields,k,write,this,serializer,lengths,k,this,serializer,position,offsets,k,else,offsets,k,this,serializer,position,final,int,len,source,for,remainder,lengths,k,this,serializer,write,source,for,remainder,binary,data,off,len,lengths,k,len,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,serialize,header,this,serializer,offsets,max,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,num,fields,max,fields,this,offsets,offsets,this,lengths,lengths,this,first,modified,pos,integer,if,this,read,fields,null,this,read,fields,length,max,fields,final,value,na,new,value,max,fields,system,arraycopy,this,read,fields,0,na,0,this,read,fields,length,this,read,fields,na,this,write,fields,this,write,fields,null,this,write,fields,length,max,fields,new,value,max,fields,this,write,fields
Record -> public void unionFields(Record other);1446112342;Unions the other record's fields with this records fields. After the method invocation with record_<code>B</code> as the parameter, this record <code>A</code> will contain at field <code>i</code>:_<ul>_<li>Field <code>i</code> from record <code>A</code>, if that field is within record <code>A</code>'s number_of fields and is not <i>null</i>.</li>_<li>Field <code>i</code> from record <code>B</code>, if that field is within record <code>B</code>'s number_of fields.</li>_</ul>_It is not necessary that both records have the same number of fields. This record will have the number of_fields of the larger of the two records. Naturally, if both <code>A</code> and <code>B</code> have field_<code>i</code> set to <i>null</i>, this record will have <i>null</i> at that position.__@param other The records whose fields to union with this record's fields.;public void unionFields(Record other) {_		final int minFields = Math.min(this.numFields, other.numFields)__		final int maxFields = Math.max(this.numFields, other.numFields)__		_		final int[] offsets = this.offsets.length >= maxFields ? this.offsets : new int[maxFields]__		final int[] lengths = this.lengths.length >= maxFields ? this.lengths : new int[maxFields]__		_		if (!(this.isModified() || other.isModified())) {_			_			_			final int estimatedLength = this.binaryLen + other.binaryLen__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					int begin = -1__					int end = -1__					int offsetDelta = 0__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else {_							end = sourceForRemainder.offsets[k]+sourceForRemainder.lengths[k]__							if (begin == -1) {_								_								begin = sourceForRemainder.offsets[k]__								offsetDelta = this.serializer.position - begin__							}_							offsets[k] = sourceForRemainder.offsets[k] + offsetDelta__						}_					}_					_					_					if (begin != -1) {_						this.serializer.write(sourceForRemainder.binaryData, begin, _								end - begin)__					}_					_					_					if (lengths != sourceForRemainder.lengths) {_						System.arraycopy(sourceForRemainder.lengths, minFields, lengths, minFields, maxFields - minFields)__					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		else {_			_			final int estimatedLength = (this.binaryLen > 0 ? this.binaryLen : this.numFields * DEFAULT_FIELD_LEN_ESTIMATE) + _										(other.binaryLen > 0 ? other.binaryLen : other.numFields * DEFAULT_FIELD_LEN_ESTIMATE)__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else if (otherOff == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[i] = this.serializer.position__							other.writeFields[i].write(this.serializer)__							lengths[i] = this.serializer.position - offsets[i]__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else if (thisOff == MODIFIED_INDICATOR_OFFSET) {_						_						offsets[i] = this.serializer.position__						this.writeFields[i].write(this.serializer)__						lengths[i] = this.serializer.position - offsets[i]__					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else if (off == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[k] = this.serializer.position__							sourceForRemainder.writeFields[k].write(this.serializer)__							lengths[k] = this.serializer.position - offsets[k]__						} else {_							_							offsets[k] = this.serializer.position__							final int len = sourceForRemainder.lengths[k]__							this.serializer.write(sourceForRemainder.binaryData, off, len)__							lengths[k] = len__						}_					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		_		serializeHeader(this.serializer, offsets, maxFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		_		this.numFields = maxFields__		this.offsets = offsets__		this.lengths = lengths__		_		this.firstModifiedPos = Integer.MAX_VALUE__		_		_		if (this.readFields == null || this.readFields.length < maxFields) {_			final Value[] na = new Value[maxFields]__			System.arraycopy(this.readFields, 0, na, 0, this.readFields.length)__			this.readFields = na__		}_		this.writeFields = (this.writeFields == null || this.writeFields.length < maxFields) ? _																new Value[maxFields] : this.writeFields__	};unions,the,other,record,s,fields,with,this,records,fields,after,the,method,invocation,with,record,code,b,code,as,the,parameter,this,record,code,a,code,will,contain,at,field,code,i,code,ul,li,field,code,i,code,from,record,code,a,code,if,that,field,is,within,record,code,a,code,s,number,of,fields,and,is,not,i,null,i,li,li,field,code,i,code,from,record,code,b,code,if,that,field,is,within,record,code,b,code,s,number,of,fields,li,ul,it,is,not,necessary,that,both,records,have,the,same,number,of,fields,this,record,will,have,the,number,of,fields,of,the,larger,of,the,two,records,naturally,if,both,code,a,code,and,code,b,code,have,field,code,i,code,set,to,i,null,i,this,record,will,have,i,null,i,at,that,position,param,other,the,records,whose,fields,to,union,with,this,record,s,fields;public,void,union,fields,record,other,final,int,min,fields,math,min,this,num,fields,other,num,fields,final,int,max,fields,math,max,this,num,fields,other,num,fields,final,int,offsets,this,offsets,length,max,fields,this,offsets,new,int,max,fields,final,int,lengths,this,lengths,length,max,fields,this,lengths,new,int,max,fields,if,this,is,modified,other,is,modified,final,int,estimated,length,this,binary,len,other,binary,len,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,int,begin,1,int,end,1,int,offset,delta,0,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,end,source,for,remainder,offsets,k,source,for,remainder,lengths,k,if,begin,1,begin,source,for,remainder,offsets,k,offset,delta,this,serializer,position,begin,offsets,k,source,for,remainder,offsets,k,offset,delta,if,begin,1,this,serializer,write,source,for,remainder,binary,data,begin,end,begin,if,lengths,source,for,remainder,lengths,system,arraycopy,source,for,remainder,lengths,min,fields,lengths,min,fields,max,fields,min,fields,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,else,final,int,estimated,length,this,binary,len,0,this,binary,len,this,num,fields,other,binary,len,0,other,binary,len,other,num,fields,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,if,other,off,offsets,i,this,serializer,position,other,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,if,this,off,offsets,i,this,serializer,position,this,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,if,off,offsets,k,this,serializer,position,source,for,remainder,write,fields,k,write,this,serializer,lengths,k,this,serializer,position,offsets,k,else,offsets,k,this,serializer,position,final,int,len,source,for,remainder,lengths,k,this,serializer,write,source,for,remainder,binary,data,off,len,lengths,k,len,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,serialize,header,this,serializer,offsets,max,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,num,fields,max,fields,this,offsets,offsets,this,lengths,lengths,this,first,modified,pos,integer,if,this,read,fields,null,this,read,fields,length,max,fields,final,value,na,new,value,max,fields,system,arraycopy,this,read,fields,0,na,0,this,read,fields,length,this,read,fields,na,this,write,fields,this,write,fields,null,this,write,fields,length,max,fields,new,value,max,fields,this,write,fields
Record -> public void unionFields(Record other);1448491524;Unions the other record's fields with this records fields. After the method invocation with record_<code>B</code> as the parameter, this record <code>A</code> will contain at field <code>i</code>:_<ul>_<li>Field <code>i</code> from record <code>A</code>, if that field is within record <code>A</code>'s number_of fields and is not <i>null</i>.</li>_<li>Field <code>i</code> from record <code>B</code>, if that field is within record <code>B</code>'s number_of fields.</li>_</ul>_It is not necessary that both records have the same number of fields. This record will have the number of_fields of the larger of the two records. Naturally, if both <code>A</code> and <code>B</code> have field_<code>i</code> set to <i>null</i>, this record will have <i>null</i> at that position.__@param other The records whose fields to union with this record's fields.;public void unionFields(Record other) {_		final int minFields = Math.min(this.numFields, other.numFields)__		final int maxFields = Math.max(this.numFields, other.numFields)__		_		final int[] offsets = this.offsets.length >= maxFields ? this.offsets : new int[maxFields]__		final int[] lengths = this.lengths.length >= maxFields ? this.lengths : new int[maxFields]__		_		if (!(this.isModified() || other.isModified())) {_			_			_			final int estimatedLength = this.binaryLen + other.binaryLen__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					int begin = -1__					int end = -1__					int offsetDelta = 0__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else {_							end = sourceForRemainder.offsets[k]+sourceForRemainder.lengths[k]__							if (begin == -1) {_								_								begin = sourceForRemainder.offsets[k]__								offsetDelta = this.serializer.position - begin__							}_							offsets[k] = sourceForRemainder.offsets[k] + offsetDelta__						}_					}_					_					_					if (begin != -1) {_						this.serializer.write(sourceForRemainder.binaryData, begin, _								end - begin)__					}_					_					_					if (lengths != sourceForRemainder.lengths) {_						System.arraycopy(sourceForRemainder.lengths, minFields, lengths, minFields, maxFields - minFields)__					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		else {_			_			final int estimatedLength = (this.binaryLen > 0 ? this.binaryLen : this.numFields * DEFAULT_FIELD_LEN_ESTIMATE) + _										(other.binaryLen > 0 ? other.binaryLen : other.numFields * DEFAULT_FIELD_LEN_ESTIMATE)__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else if (otherOff == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[i] = this.serializer.position__							other.writeFields[i].write(this.serializer)__							lengths[i] = this.serializer.position - offsets[i]__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else if (thisOff == MODIFIED_INDICATOR_OFFSET) {_						_						offsets[i] = this.serializer.position__						this.writeFields[i].write(this.serializer)__						lengths[i] = this.serializer.position - offsets[i]__					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else if (off == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[k] = this.serializer.position__							sourceForRemainder.writeFields[k].write(this.serializer)__							lengths[k] = this.serializer.position - offsets[k]__						} else {_							_							offsets[k] = this.serializer.position__							final int len = sourceForRemainder.lengths[k]__							this.serializer.write(sourceForRemainder.binaryData, off, len)__							lengths[k] = len__						}_					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		_		serializeHeader(this.serializer, offsets, maxFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		_		this.numFields = maxFields__		this.offsets = offsets__		this.lengths = lengths__		_		this.firstModifiedPos = Integer.MAX_VALUE__		_		_		if (this.readFields == null || this.readFields.length < maxFields) {_			final Value[] na = new Value[maxFields]__			System.arraycopy(this.readFields, 0, na, 0, this.readFields.length)__			this.readFields = na__		}_		this.writeFields = (this.writeFields == null || this.writeFields.length < maxFields) ? _																new Value[maxFields] : this.writeFields__	};unions,the,other,record,s,fields,with,this,records,fields,after,the,method,invocation,with,record,code,b,code,as,the,parameter,this,record,code,a,code,will,contain,at,field,code,i,code,ul,li,field,code,i,code,from,record,code,a,code,if,that,field,is,within,record,code,a,code,s,number,of,fields,and,is,not,i,null,i,li,li,field,code,i,code,from,record,code,b,code,if,that,field,is,within,record,code,b,code,s,number,of,fields,li,ul,it,is,not,necessary,that,both,records,have,the,same,number,of,fields,this,record,will,have,the,number,of,fields,of,the,larger,of,the,two,records,naturally,if,both,code,a,code,and,code,b,code,have,field,code,i,code,set,to,i,null,i,this,record,will,have,i,null,i,at,that,position,param,other,the,records,whose,fields,to,union,with,this,record,s,fields;public,void,union,fields,record,other,final,int,min,fields,math,min,this,num,fields,other,num,fields,final,int,max,fields,math,max,this,num,fields,other,num,fields,final,int,offsets,this,offsets,length,max,fields,this,offsets,new,int,max,fields,final,int,lengths,this,lengths,length,max,fields,this,lengths,new,int,max,fields,if,this,is,modified,other,is,modified,final,int,estimated,length,this,binary,len,other,binary,len,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,int,begin,1,int,end,1,int,offset,delta,0,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,end,source,for,remainder,offsets,k,source,for,remainder,lengths,k,if,begin,1,begin,source,for,remainder,offsets,k,offset,delta,this,serializer,position,begin,offsets,k,source,for,remainder,offsets,k,offset,delta,if,begin,1,this,serializer,write,source,for,remainder,binary,data,begin,end,begin,if,lengths,source,for,remainder,lengths,system,arraycopy,source,for,remainder,lengths,min,fields,lengths,min,fields,max,fields,min,fields,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,else,final,int,estimated,length,this,binary,len,0,this,binary,len,this,num,fields,other,binary,len,0,other,binary,len,other,num,fields,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,if,other,off,offsets,i,this,serializer,position,other,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,if,this,off,offsets,i,this,serializer,position,this,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,if,off,offsets,k,this,serializer,position,source,for,remainder,write,fields,k,write,this,serializer,lengths,k,this,serializer,position,offsets,k,else,offsets,k,this,serializer,position,final,int,len,source,for,remainder,lengths,k,this,serializer,write,source,for,remainder,binary,data,off,len,lengths,k,len,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,serialize,header,this,serializer,offsets,max,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,num,fields,max,fields,this,offsets,offsets,this,lengths,lengths,this,first,modified,pos,integer,if,this,read,fields,null,this,read,fields,length,max,fields,final,value,na,new,value,max,fields,system,arraycopy,this,read,fields,0,na,0,this,read,fields,length,this,read,fields,na,this,write,fields,this,write,fields,null,this,write,fields,length,max,fields,new,value,max,fields,this,write,fields
Record -> public void unionFields(Record other);1452178883;Unions the other record's fields with this records fields. After the method invocation with record_<code>B</code> as the parameter, this record <code>A</code> will contain at field <code>i</code>:_<ul>_<li>Field <code>i</code> from record <code>A</code>, if that field is within record <code>A</code>'s number_of fields and is not <i>null</i>.</li>_<li>Field <code>i</code> from record <code>B</code>, if that field is within record <code>B</code>'s number_of fields.</li>_</ul>_It is not necessary that both records have the same number of fields. This record will have the number of_fields of the larger of the two records. Naturally, if both <code>A</code> and <code>B</code> have field_<code>i</code> set to <i>null</i>, this record will have <i>null</i> at that position.__@param other The records whose fields to union with this record's fields.;public void unionFields(Record other) {_		final int minFields = Math.min(this.numFields, other.numFields)__		final int maxFields = Math.max(this.numFields, other.numFields)__		_		final int[] offsets = this.offsets.length >= maxFields ? this.offsets : new int[maxFields]__		final int[] lengths = this.lengths.length >= maxFields ? this.lengths : new int[maxFields]__		_		if (!(this.isModified() || other.isModified())) {_			_			_			final int estimatedLength = this.binaryLen + other.binaryLen__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					int begin = -1__					int end = -1__					int offsetDelta = 0__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else {_							end = sourceForRemainder.offsets[k]+sourceForRemainder.lengths[k]__							if (begin == -1) {_								_								begin = sourceForRemainder.offsets[k]__								offsetDelta = this.serializer.position - begin__							}_							offsets[k] = sourceForRemainder.offsets[k] + offsetDelta__						}_					}_					_					_					if (begin != -1) {_						this.serializer.write(sourceForRemainder.binaryData, begin, _								end - begin)__					}_					_					_					if (lengths != sourceForRemainder.lengths) {_						System.arraycopy(sourceForRemainder.lengths, minFields, lengths, minFields, maxFields - minFields)__					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		else {_			_			final int estimatedLength = (this.binaryLen > 0 ? this.binaryLen : this.numFields * DEFAULT_FIELD_LEN_ESTIMATE) + _										(other.binaryLen > 0 ? other.binaryLen : other.numFields * DEFAULT_FIELD_LEN_ESTIMATE)__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else if (otherOff == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[i] = this.serializer.position__							other.writeFields[i].write(this.serializer)__							lengths[i] = this.serializer.position - offsets[i]__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else if (thisOff == MODIFIED_INDICATOR_OFFSET) {_						_						offsets[i] = this.serializer.position__						this.writeFields[i].write(this.serializer)__						lengths[i] = this.serializer.position - offsets[i]__					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else if (off == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[k] = this.serializer.position__							sourceForRemainder.writeFields[k].write(this.serializer)__							lengths[k] = this.serializer.position - offsets[k]__						} else {_							_							offsets[k] = this.serializer.position__							final int len = sourceForRemainder.lengths[k]__							this.serializer.write(sourceForRemainder.binaryData, off, len)__							lengths[k] = len__						}_					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		_		serializeHeader(this.serializer, offsets, maxFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		_		this.numFields = maxFields__		this.offsets = offsets__		this.lengths = lengths__		_		this.firstModifiedPos = Integer.MAX_VALUE__		_		_		if (this.readFields == null || this.readFields.length < maxFields) {_			final Value[] na = new Value[maxFields]__			System.arraycopy(this.readFields, 0, na, 0, this.readFields.length)__			this.readFields = na__		}_		this.writeFields = (this.writeFields == null || this.writeFields.length < maxFields) ? _																new Value[maxFields] : this.writeFields__	};unions,the,other,record,s,fields,with,this,records,fields,after,the,method,invocation,with,record,code,b,code,as,the,parameter,this,record,code,a,code,will,contain,at,field,code,i,code,ul,li,field,code,i,code,from,record,code,a,code,if,that,field,is,within,record,code,a,code,s,number,of,fields,and,is,not,i,null,i,li,li,field,code,i,code,from,record,code,b,code,if,that,field,is,within,record,code,b,code,s,number,of,fields,li,ul,it,is,not,necessary,that,both,records,have,the,same,number,of,fields,this,record,will,have,the,number,of,fields,of,the,larger,of,the,two,records,naturally,if,both,code,a,code,and,code,b,code,have,field,code,i,code,set,to,i,null,i,this,record,will,have,i,null,i,at,that,position,param,other,the,records,whose,fields,to,union,with,this,record,s,fields;public,void,union,fields,record,other,final,int,min,fields,math,min,this,num,fields,other,num,fields,final,int,max,fields,math,max,this,num,fields,other,num,fields,final,int,offsets,this,offsets,length,max,fields,this,offsets,new,int,max,fields,final,int,lengths,this,lengths,length,max,fields,this,lengths,new,int,max,fields,if,this,is,modified,other,is,modified,final,int,estimated,length,this,binary,len,other,binary,len,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,int,begin,1,int,end,1,int,offset,delta,0,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,end,source,for,remainder,offsets,k,source,for,remainder,lengths,k,if,begin,1,begin,source,for,remainder,offsets,k,offset,delta,this,serializer,position,begin,offsets,k,source,for,remainder,offsets,k,offset,delta,if,begin,1,this,serializer,write,source,for,remainder,binary,data,begin,end,begin,if,lengths,source,for,remainder,lengths,system,arraycopy,source,for,remainder,lengths,min,fields,lengths,min,fields,max,fields,min,fields,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,else,final,int,estimated,length,this,binary,len,0,this,binary,len,this,num,fields,other,binary,len,0,other,binary,len,other,num,fields,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,if,other,off,offsets,i,this,serializer,position,other,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,if,this,off,offsets,i,this,serializer,position,this,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,if,off,offsets,k,this,serializer,position,source,for,remainder,write,fields,k,write,this,serializer,lengths,k,this,serializer,position,offsets,k,else,offsets,k,this,serializer,position,final,int,len,source,for,remainder,lengths,k,this,serializer,write,source,for,remainder,binary,data,off,len,lengths,k,len,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,serialize,header,this,serializer,offsets,max,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,num,fields,max,fields,this,offsets,offsets,this,lengths,lengths,this,first,modified,pos,integer,if,this,read,fields,null,this,read,fields,length,max,fields,final,value,na,new,value,max,fields,system,arraycopy,this,read,fields,0,na,0,this,read,fields,length,this,read,fields,na,this,write,fields,this,write,fields,null,this,write,fields,length,max,fields,new,value,max,fields,this,write,fields
Record -> public void unionFields(Record other);1489589988;Unions the other record's fields with this records fields. After the method invocation with record_<code>B</code> as the parameter, this record <code>A</code> will contain at field <code>i</code>:_<ul>_<li>Field <code>i</code> from record <code>A</code>, if that field is within record <code>A</code>'s number_of fields and is not <i>null</i>.</li>_<li>Field <code>i</code> from record <code>B</code>, if that field is within record <code>B</code>'s number_of fields.</li>_</ul>_It is not necessary that both records have the same number of fields. This record will have the number of_fields of the larger of the two records. Naturally, if both <code>A</code> and <code>B</code> have field_<code>i</code> set to <i>null</i>, this record will have <i>null</i> at that position.__@param other The records whose fields to union with this record's fields.;public void unionFields(Record other) {_		final int minFields = Math.min(this.numFields, other.numFields)__		final int maxFields = Math.max(this.numFields, other.numFields)__		_		final int[] offsets = this.offsets.length >= maxFields ? this.offsets : new int[maxFields]__		final int[] lengths = this.lengths.length >= maxFields ? this.lengths : new int[maxFields]__		_		if (!(this.isModified() || other.isModified())) {_			_			_			final int estimatedLength = this.binaryLen + other.binaryLen__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					int begin = -1__					int end = -1__					int offsetDelta = 0__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else {_							end = sourceForRemainder.offsets[k]+sourceForRemainder.lengths[k]__							if (begin == -1) {_								_								begin = sourceForRemainder.offsets[k]__								offsetDelta = this.serializer.position - begin__							}_							offsets[k] = sourceForRemainder.offsets[k] + offsetDelta__						}_					}_					_					_					if (begin != -1) {_						this.serializer.write(sourceForRemainder.binaryData, begin, _								end - begin)__					}_					_					_					if (lengths != sourceForRemainder.lengths) {_						System.arraycopy(sourceForRemainder.lengths, minFields, lengths, minFields, maxFields - minFields)__					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		else {_			_			final int estimatedLength = (this.binaryLen > 0 ? this.binaryLen : this.numFields * DEFAULT_FIELD_LEN_ESTIMATE) + _										(other.binaryLen > 0 ? other.binaryLen : other.numFields * DEFAULT_FIELD_LEN_ESTIMATE)__			this.serializer.memory = (this.switchBuffer != null && this.switchBuffer.length >= estimatedLength) ? _										this.switchBuffer : new byte[estimatedLength]__			this.serializer.position = 0__			_			try {_				_				for (int i = 0_ i < minFields_ i++) {_					final int thisOff = this.offsets[i]__					if (thisOff == NULL_INDICATOR_OFFSET) {_						final int otherOff = other.offsets[i]__						if (otherOff == NULL_INDICATOR_OFFSET) {_							offsets[i] = NULL_INDICATOR_OFFSET__						} else if (otherOff == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[i] = this.serializer.position__							other.writeFields[i].write(this.serializer)__							lengths[i] = this.serializer.position - offsets[i]__						} else {_							_							offsets[i] = this.serializer.position__							this.serializer.write(other.binaryData, otherOff, other.lengths[i])__							lengths[i] = other.lengths[i]__						}_					} else if (thisOff == MODIFIED_INDICATOR_OFFSET) {_						_						offsets[i] = this.serializer.position__						this.writeFields[i].write(this.serializer)__						lengths[i] = this.serializer.position - offsets[i]__					} else {_						_						offsets[i] = this.serializer.position__						this.serializer.write(this.binaryData, thisOff, this.lengths[i])__						lengths[i] = this.lengths[i]__					}_				}_				_				_				if (minFields != maxFields) {_					final Record sourceForRemainder = this.numFields > minFields ? this : other__					_					_					for (int k = minFields_ k < maxFields_ k++) {_						final int off = sourceForRemainder.offsets[k]__						if (off == NULL_INDICATOR_OFFSET) {_							offsets[k] = NULL_INDICATOR_OFFSET__						} else if (off == MODIFIED_INDICATOR_OFFSET) {_							_							offsets[k] = this.serializer.position__							sourceForRemainder.writeFields[k].write(this.serializer)__							lengths[k] = this.serializer.position - offsets[k]__						} else {_							_							offsets[k] = this.serializer.position__							final int len = sourceForRemainder.lengths[k]__							this.serializer.write(sourceForRemainder.binaryData, off, len)__							lengths[k] = len__						}_					}_				}_			} catch (Exception ioex) {_				throw new RuntimeException("Error creating field union of record data" + _							ioex.getMessage() == null ? "." : ": " + ioex.getMessage(), ioex)__			}_		}_		_		serializeHeader(this.serializer, offsets, maxFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		_		this.numFields = maxFields__		this.offsets = offsets__		this.lengths = lengths__		_		this.firstModifiedPos = Integer.MAX_VALUE__		_		_		if (this.readFields == null || this.readFields.length < maxFields) {_			final Value[] na = new Value[maxFields]__			System.arraycopy(this.readFields, 0, na, 0, this.readFields.length)__			this.readFields = na__		}_		this.writeFields = (this.writeFields == null || this.writeFields.length < maxFields) ? _																new Value[maxFields] : this.writeFields__	};unions,the,other,record,s,fields,with,this,records,fields,after,the,method,invocation,with,record,code,b,code,as,the,parameter,this,record,code,a,code,will,contain,at,field,code,i,code,ul,li,field,code,i,code,from,record,code,a,code,if,that,field,is,within,record,code,a,code,s,number,of,fields,and,is,not,i,null,i,li,li,field,code,i,code,from,record,code,b,code,if,that,field,is,within,record,code,b,code,s,number,of,fields,li,ul,it,is,not,necessary,that,both,records,have,the,same,number,of,fields,this,record,will,have,the,number,of,fields,of,the,larger,of,the,two,records,naturally,if,both,code,a,code,and,code,b,code,have,field,code,i,code,set,to,i,null,i,this,record,will,have,i,null,i,at,that,position,param,other,the,records,whose,fields,to,union,with,this,record,s,fields;public,void,union,fields,record,other,final,int,min,fields,math,min,this,num,fields,other,num,fields,final,int,max,fields,math,max,this,num,fields,other,num,fields,final,int,offsets,this,offsets,length,max,fields,this,offsets,new,int,max,fields,final,int,lengths,this,lengths,length,max,fields,this,lengths,new,int,max,fields,if,this,is,modified,other,is,modified,final,int,estimated,length,this,binary,len,other,binary,len,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,int,begin,1,int,end,1,int,offset,delta,0,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,end,source,for,remainder,offsets,k,source,for,remainder,lengths,k,if,begin,1,begin,source,for,remainder,offsets,k,offset,delta,this,serializer,position,begin,offsets,k,source,for,remainder,offsets,k,offset,delta,if,begin,1,this,serializer,write,source,for,remainder,binary,data,begin,end,begin,if,lengths,source,for,remainder,lengths,system,arraycopy,source,for,remainder,lengths,min,fields,lengths,min,fields,max,fields,min,fields,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,else,final,int,estimated,length,this,binary,len,0,this,binary,len,this,num,fields,other,binary,len,0,other,binary,len,other,num,fields,this,serializer,memory,this,switch,buffer,null,this,switch,buffer,length,estimated,length,this,switch,buffer,new,byte,estimated,length,this,serializer,position,0,try,for,int,i,0,i,min,fields,i,final,int,this,off,this,offsets,i,if,this,off,final,int,other,off,other,offsets,i,if,other,off,offsets,i,else,if,other,off,offsets,i,this,serializer,position,other,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,other,binary,data,other,off,other,lengths,i,lengths,i,other,lengths,i,else,if,this,off,offsets,i,this,serializer,position,this,write,fields,i,write,this,serializer,lengths,i,this,serializer,position,offsets,i,else,offsets,i,this,serializer,position,this,serializer,write,this,binary,data,this,off,this,lengths,i,lengths,i,this,lengths,i,if,min,fields,max,fields,final,record,source,for,remainder,this,num,fields,min,fields,this,other,for,int,k,min,fields,k,max,fields,k,final,int,off,source,for,remainder,offsets,k,if,off,offsets,k,else,if,off,offsets,k,this,serializer,position,source,for,remainder,write,fields,k,write,this,serializer,lengths,k,this,serializer,position,offsets,k,else,offsets,k,this,serializer,position,final,int,len,source,for,remainder,lengths,k,this,serializer,write,source,for,remainder,binary,data,off,len,lengths,k,len,catch,exception,ioex,throw,new,runtime,exception,error,creating,field,union,of,record,data,ioex,get,message,null,ioex,get,message,ioex,serialize,header,this,serializer,offsets,max,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,num,fields,max,fields,this,offsets,offsets,this,lengths,lengths,this,first,modified,pos,integer,if,this,read,fields,null,this,read,fields,length,max,fields,final,value,na,new,value,max,fields,system,arraycopy,this,read,fields,0,na,0,this,read,fields,length,this,read,fields,na,this,write,fields,this,write,fields,null,this,write,fields,length,max,fields,new,value,max,fields,this,write,fields
Record -> public Record(Value val1, Value val2);1405024514;Creates a new record containing exactly two fields, which are the given values.__@param val1 The value for the first field._@param val2 The value for the second field.;public Record(Value val1, Value val2) {_		makeSpace(2)__		setField(0, val1)__		setField(1, val2)__	};creates,a,new,record,containing,exactly,two,fields,which,are,the,given,values,param,val1,the,value,for,the,first,field,param,val2,the,value,for,the,second,field;public,record,value,val1,value,val2,make,space,2,set,field,0,val1,set,field,1,val2
Record -> public Record(Value val1, Value val2);1405090423;Creates a new record containing exactly two fields, which are the given values.__@param val1 The value for the first field._@param val2 The value for the second field.;public Record(Value val1, Value val2) {_		makeSpace(2)__		setField(0, val1)__		setField(1, val2)__	};creates,a,new,record,containing,exactly,two,fields,which,are,the,given,values,param,val1,the,value,for,the,first,field,param,val2,the,value,for,the,second,field;public,record,value,val1,value,val2,make,space,2,set,field,0,val1,set,field,1,val2
Record -> public Record(Value val1, Value val2);1411473593;Creates a new record containing exactly two fields, which are the given values.__@param val1 The value for the first field._@param val2 The value for the second field.;public Record(Value val1, Value val2) {_		makeSpace(2)__		setField(0, val1)__		setField(1, val2)__	};creates,a,new,record,containing,exactly,two,fields,which,are,the,given,values,param,val1,the,value,for,the,first,field,param,val2,the,value,for,the,second,field;public,record,value,val1,value,val2,make,space,2,set,field,0,val1,set,field,1,val2
Record -> public Record(Value val1, Value val2);1414786554;Creates a new record containing exactly two fields, which are the given values.__@param val1 The value for the first field._@param val2 The value for the second field.;public Record(Value val1, Value val2) {_		makeSpace(2)__		setField(0, val1)__		setField(1, val2)__	};creates,a,new,record,containing,exactly,two,fields,which,are,the,given,values,param,val1,the,value,for,the,first,field,param,val2,the,value,for,the,second,field;public,record,value,val1,value,val2,make,space,2,set,field,0,val1,set,field,1,val2
Record -> public Record(Value val1, Value val2);1423847366;Creates a new record containing exactly two fields, which are the given values.__@param val1 The value for the first field._@param val2 The value for the second field.;public Record(Value val1, Value val2) {_		makeSpace(2)__		setField(0, val1)__		setField(1, val2)__	};creates,a,new,record,containing,exactly,two,fields,which,are,the,given,values,param,val1,the,value,for,the,first,field,param,val2,the,value,for,the,second,field;public,record,value,val1,value,val2,make,space,2,set,field,0,val1,set,field,1,val2
Record -> public Record(Value val1, Value val2);1443521887;Creates a new record containing exactly two fields, which are the given values.__@param val1 The value for the first field._@param val2 The value for the second field.;public Record(Value val1, Value val2) {_		makeSpace(2)__		setField(0, val1)__		setField(1, val2)__	};creates,a,new,record,containing,exactly,two,fields,which,are,the,given,values,param,val1,the,value,for,the,first,field,param,val2,the,value,for,the,second,field;public,record,value,val1,value,val2,make,space,2,set,field,0,val1,set,field,1,val2
Record -> public Record(Value val1, Value val2);1446112342;Creates a new record containing exactly two fields, which are the given values.__@param val1 The value for the first field._@param val2 The value for the second field.;public Record(Value val1, Value val2) {_		makeSpace(2)__		setField(0, val1)__		setField(1, val2)__	};creates,a,new,record,containing,exactly,two,fields,which,are,the,given,values,param,val1,the,value,for,the,first,field,param,val2,the,value,for,the,second,field;public,record,value,val1,value,val2,make,space,2,set,field,0,val1,set,field,1,val2
Record -> public Record(Value val1, Value val2);1448491524;Creates a new record containing exactly two fields, which are the given values.__@param val1 The value for the first field._@param val2 The value for the second field.;public Record(Value val1, Value val2) {_		makeSpace(2)__		setField(0, val1)__		setField(1, val2)__	};creates,a,new,record,containing,exactly,two,fields,which,are,the,given,values,param,val1,the,value,for,the,first,field,param,val2,the,value,for,the,second,field;public,record,value,val1,value,val2,make,space,2,set,field,0,val1,set,field,1,val2
Record -> public Record(Value val1, Value val2);1452178883;Creates a new record containing exactly two fields, which are the given values.__@param val1 The value for the first field._@param val2 The value for the second field.;public Record(Value val1, Value val2) {_		makeSpace(2)__		setField(0, val1)__		setField(1, val2)__	};creates,a,new,record,containing,exactly,two,fields,which,are,the,given,values,param,val1,the,value,for,the,first,field,param,val2,the,value,for,the,second,field;public,record,value,val1,value,val2,make,space,2,set,field,0,val1,set,field,1,val2
Record -> public Record(Value val1, Value val2);1489589988;Creates a new record containing exactly two fields, which are the given values.__@param val1 The value for the first field._@param val2 The value for the second field.;public Record(Value val1, Value val2) {_		makeSpace(2)__		setField(0, val1)__		setField(1, val2)__	};creates,a,new,record,containing,exactly,two,fields,which,are,the,given,values,param,val1,the,value,for,the,first,field,param,val2,the,value,for,the,second,field;public,record,value,val1,value,val2,make,space,2,set,field,0,val1,set,field,1,val2
Record -> public void copyTo(Record target);1405024514;@param target;public void copyTo(Record target) {_		updateBinaryRepresenation()__		_		if (target.binaryData == null || target.binaryData.length < this.binaryLen) {_			target.binaryData = new byte[this.binaryLen]__		}_		if (target.offsets == null || target.offsets.length < this.numFields) {_			target.offsets = new int[this.numFields]__		}_		if (target.lengths == null || target.lengths.length < this.numFields) {_			target.lengths = new int[this.numFields]__		}_		if (target.readFields == null || target.readFields.length < this.numFields) {_			target.readFields = new Value[this.numFields]__		}_		if (target.writeFields == null || target.writeFields.length < this.numFields) {_			target.writeFields = new Value[this.numFields]__		}_		_		System.arraycopy(this.binaryData, 0, target.binaryData, 0, this.binaryLen)__		System.arraycopy(this.offsets, 0, target.offsets, 0, this.numFields)__		System.arraycopy(this.lengths, 0, target.lengths, 0, this.numFields)__		_		target.binaryLen = this.binaryLen__		target.numFields = this.numFields__		target.firstModifiedPos = Integer.MAX_VALUE__	};param,target;public,void,copy,to,record,target,update,binary,represenation,if,target,binary,data,null,target,binary,data,length,this,binary,len,target,binary,data,new,byte,this,binary,len,if,target,offsets,null,target,offsets,length,this,num,fields,target,offsets,new,int,this,num,fields,if,target,lengths,null,target,lengths,length,this,num,fields,target,lengths,new,int,this,num,fields,if,target,read,fields,null,target,read,fields,length,this,num,fields,target,read,fields,new,value,this,num,fields,if,target,write,fields,null,target,write,fields,length,this,num,fields,target,write,fields,new,value,this,num,fields,system,arraycopy,this,binary,data,0,target,binary,data,0,this,binary,len,system,arraycopy,this,offsets,0,target,offsets,0,this,num,fields,system,arraycopy,this,lengths,0,target,lengths,0,this,num,fields,target,binary,len,this,binary,len,target,num,fields,this,num,fields,target,first,modified,pos,integer
Record -> public void copyTo(Record target);1405090423;@param target;public void copyTo(Record target) {_		updateBinaryRepresenation()__		_		if (target.binaryData == null || target.binaryData.length < this.binaryLen) {_			target.binaryData = new byte[this.binaryLen]__		}_		if (target.offsets == null || target.offsets.length < this.numFields) {_			target.offsets = new int[this.numFields]__		}_		if (target.lengths == null || target.lengths.length < this.numFields) {_			target.lengths = new int[this.numFields]__		}_		if (target.readFields == null || target.readFields.length < this.numFields) {_			target.readFields = new Value[this.numFields]__		}_		if (target.writeFields == null || target.writeFields.length < this.numFields) {_			target.writeFields = new Value[this.numFields]__		}_		_		System.arraycopy(this.binaryData, 0, target.binaryData, 0, this.binaryLen)__		System.arraycopy(this.offsets, 0, target.offsets, 0, this.numFields)__		System.arraycopy(this.lengths, 0, target.lengths, 0, this.numFields)__		_		target.binaryLen = this.binaryLen__		target.numFields = this.numFields__		target.firstModifiedPos = Integer.MAX_VALUE__	};param,target;public,void,copy,to,record,target,update,binary,represenation,if,target,binary,data,null,target,binary,data,length,this,binary,len,target,binary,data,new,byte,this,binary,len,if,target,offsets,null,target,offsets,length,this,num,fields,target,offsets,new,int,this,num,fields,if,target,lengths,null,target,lengths,length,this,num,fields,target,lengths,new,int,this,num,fields,if,target,read,fields,null,target,read,fields,length,this,num,fields,target,read,fields,new,value,this,num,fields,if,target,write,fields,null,target,write,fields,length,this,num,fields,target,write,fields,new,value,this,num,fields,system,arraycopy,this,binary,data,0,target,binary,data,0,this,binary,len,system,arraycopy,this,offsets,0,target,offsets,0,this,num,fields,system,arraycopy,this,lengths,0,target,lengths,0,this,num,fields,target,binary,len,this,binary,len,target,num,fields,this,num,fields,target,first,modified,pos,integer
Record -> public void copyTo(Record target);1411473593;@param target;public void copyTo(Record target) {_		updateBinaryRepresenation()__		_		if (target.binaryData == null || target.binaryData.length < this.binaryLen) {_			target.binaryData = new byte[this.binaryLen]__		}_		if (target.offsets == null || target.offsets.length < this.numFields) {_			target.offsets = new int[this.numFields]__		}_		if (target.lengths == null || target.lengths.length < this.numFields) {_			target.lengths = new int[this.numFields]__		}_		if (target.readFields == null || target.readFields.length < this.numFields) {_			target.readFields = new Value[this.numFields]__		}_		if (target.writeFields == null || target.writeFields.length < this.numFields) {_			target.writeFields = new Value[this.numFields]__		}_		_		System.arraycopy(this.binaryData, 0, target.binaryData, 0, this.binaryLen)__		System.arraycopy(this.offsets, 0, target.offsets, 0, this.numFields)__		System.arraycopy(this.lengths, 0, target.lengths, 0, this.numFields)__		_		target.binaryLen = this.binaryLen__		target.numFields = this.numFields__		target.firstModifiedPos = Integer.MAX_VALUE__	};param,target;public,void,copy,to,record,target,update,binary,represenation,if,target,binary,data,null,target,binary,data,length,this,binary,len,target,binary,data,new,byte,this,binary,len,if,target,offsets,null,target,offsets,length,this,num,fields,target,offsets,new,int,this,num,fields,if,target,lengths,null,target,lengths,length,this,num,fields,target,lengths,new,int,this,num,fields,if,target,read,fields,null,target,read,fields,length,this,num,fields,target,read,fields,new,value,this,num,fields,if,target,write,fields,null,target,write,fields,length,this,num,fields,target,write,fields,new,value,this,num,fields,system,arraycopy,this,binary,data,0,target,binary,data,0,this,binary,len,system,arraycopy,this,offsets,0,target,offsets,0,this,num,fields,system,arraycopy,this,lengths,0,target,lengths,0,this,num,fields,target,binary,len,this,binary,len,target,num,fields,this,num,fields,target,first,modified,pos,integer
Record -> public void copyTo(Record target);1414786554;@param target;public void copyTo(Record target) {_		updateBinaryRepresenation()__		_		if (target.binaryData == null || target.binaryData.length < this.binaryLen) {_			target.binaryData = new byte[this.binaryLen]__		}_		if (target.offsets == null || target.offsets.length < this.numFields) {_			target.offsets = new int[this.numFields]__		}_		if (target.lengths == null || target.lengths.length < this.numFields) {_			target.lengths = new int[this.numFields]__		}_		if (target.readFields == null || target.readFields.length < this.numFields) {_			target.readFields = new Value[this.numFields]__		}_		if (target.writeFields == null || target.writeFields.length < this.numFields) {_			target.writeFields = new Value[this.numFields]__		}_		_		System.arraycopy(this.binaryData, 0, target.binaryData, 0, this.binaryLen)__		System.arraycopy(this.offsets, 0, target.offsets, 0, this.numFields)__		System.arraycopy(this.lengths, 0, target.lengths, 0, this.numFields)__		_		target.binaryLen = this.binaryLen__		target.numFields = this.numFields__		target.firstModifiedPos = Integer.MAX_VALUE__	};param,target;public,void,copy,to,record,target,update,binary,represenation,if,target,binary,data,null,target,binary,data,length,this,binary,len,target,binary,data,new,byte,this,binary,len,if,target,offsets,null,target,offsets,length,this,num,fields,target,offsets,new,int,this,num,fields,if,target,lengths,null,target,lengths,length,this,num,fields,target,lengths,new,int,this,num,fields,if,target,read,fields,null,target,read,fields,length,this,num,fields,target,read,fields,new,value,this,num,fields,if,target,write,fields,null,target,write,fields,length,this,num,fields,target,write,fields,new,value,this,num,fields,system,arraycopy,this,binary,data,0,target,binary,data,0,this,binary,len,system,arraycopy,this,offsets,0,target,offsets,0,this,num,fields,system,arraycopy,this,lengths,0,target,lengths,0,this,num,fields,target,binary,len,this,binary,len,target,num,fields,this,num,fields,target,first,modified,pos,integer
Record -> public void copyTo(Record target);1423847366;@param target;public void copyTo(Record target) {_		updateBinaryRepresenation()__		_		if (target.binaryData == null || target.binaryData.length < this.binaryLen) {_			target.binaryData = new byte[this.binaryLen]__		}_		if (target.offsets == null || target.offsets.length < this.numFields) {_			target.offsets = new int[this.numFields]__		}_		if (target.lengths == null || target.lengths.length < this.numFields) {_			target.lengths = new int[this.numFields]__		}_		if (target.readFields == null || target.readFields.length < this.numFields) {_			target.readFields = new Value[this.numFields]__		}_		if (target.writeFields == null || target.writeFields.length < this.numFields) {_			target.writeFields = new Value[this.numFields]__		}_		_		System.arraycopy(this.binaryData, 0, target.binaryData, 0, this.binaryLen)__		System.arraycopy(this.offsets, 0, target.offsets, 0, this.numFields)__		System.arraycopy(this.lengths, 0, target.lengths, 0, this.numFields)__		_		target.binaryLen = this.binaryLen__		target.numFields = this.numFields__		target.firstModifiedPos = Integer.MAX_VALUE__	};param,target;public,void,copy,to,record,target,update,binary,represenation,if,target,binary,data,null,target,binary,data,length,this,binary,len,target,binary,data,new,byte,this,binary,len,if,target,offsets,null,target,offsets,length,this,num,fields,target,offsets,new,int,this,num,fields,if,target,lengths,null,target,lengths,length,this,num,fields,target,lengths,new,int,this,num,fields,if,target,read,fields,null,target,read,fields,length,this,num,fields,target,read,fields,new,value,this,num,fields,if,target,write,fields,null,target,write,fields,length,this,num,fields,target,write,fields,new,value,this,num,fields,system,arraycopy,this,binary,data,0,target,binary,data,0,this,binary,len,system,arraycopy,this,offsets,0,target,offsets,0,this,num,fields,system,arraycopy,this,lengths,0,target,lengths,0,this,num,fields,target,binary,len,this,binary,len,target,num,fields,this,num,fields,target,first,modified,pos,integer
Record -> public void copyTo(Record target);1443521887;@param target;public void copyTo(Record target) {_		updateBinaryRepresenation()__		_		if (target.binaryData == null || target.binaryData.length < this.binaryLen) {_			target.binaryData = new byte[this.binaryLen]__		}_		if (target.offsets == null || target.offsets.length < this.numFields) {_			target.offsets = new int[this.numFields]__		}_		if (target.lengths == null || target.lengths.length < this.numFields) {_			target.lengths = new int[this.numFields]__		}_		if (target.readFields == null || target.readFields.length < this.numFields) {_			target.readFields = new Value[this.numFields]__		}_		if (target.writeFields == null || target.writeFields.length < this.numFields) {_			target.writeFields = new Value[this.numFields]__		}_		_		System.arraycopy(this.binaryData, 0, target.binaryData, 0, this.binaryLen)__		System.arraycopy(this.offsets, 0, target.offsets, 0, this.numFields)__		System.arraycopy(this.lengths, 0, target.lengths, 0, this.numFields)__		_		target.binaryLen = this.binaryLen__		target.numFields = this.numFields__		target.firstModifiedPos = Integer.MAX_VALUE__	};param,target;public,void,copy,to,record,target,update,binary,represenation,if,target,binary,data,null,target,binary,data,length,this,binary,len,target,binary,data,new,byte,this,binary,len,if,target,offsets,null,target,offsets,length,this,num,fields,target,offsets,new,int,this,num,fields,if,target,lengths,null,target,lengths,length,this,num,fields,target,lengths,new,int,this,num,fields,if,target,read,fields,null,target,read,fields,length,this,num,fields,target,read,fields,new,value,this,num,fields,if,target,write,fields,null,target,write,fields,length,this,num,fields,target,write,fields,new,value,this,num,fields,system,arraycopy,this,binary,data,0,target,binary,data,0,this,binary,len,system,arraycopy,this,offsets,0,target,offsets,0,this,num,fields,system,arraycopy,this,lengths,0,target,lengths,0,this,num,fields,target,binary,len,this,binary,len,target,num,fields,this,num,fields,target,first,modified,pos,integer
Record -> public void copyTo(Record target);1446112342;@param target;public void copyTo(Record target) {_		updateBinaryRepresenation()__		_		if (target.binaryData == null || target.binaryData.length < this.binaryLen) {_			target.binaryData = new byte[this.binaryLen]__		}_		if (target.offsets == null || target.offsets.length < this.numFields) {_			target.offsets = new int[this.numFields]__		}_		if (target.lengths == null || target.lengths.length < this.numFields) {_			target.lengths = new int[this.numFields]__		}_		if (target.readFields == null || target.readFields.length < this.numFields) {_			target.readFields = new Value[this.numFields]__		}_		if (target.writeFields == null || target.writeFields.length < this.numFields) {_			target.writeFields = new Value[this.numFields]__		}_		_		System.arraycopy(this.binaryData, 0, target.binaryData, 0, this.binaryLen)__		System.arraycopy(this.offsets, 0, target.offsets, 0, this.numFields)__		System.arraycopy(this.lengths, 0, target.lengths, 0, this.numFields)__		_		target.binaryLen = this.binaryLen__		target.numFields = this.numFields__		target.firstModifiedPos = Integer.MAX_VALUE__	};param,target;public,void,copy,to,record,target,update,binary,represenation,if,target,binary,data,null,target,binary,data,length,this,binary,len,target,binary,data,new,byte,this,binary,len,if,target,offsets,null,target,offsets,length,this,num,fields,target,offsets,new,int,this,num,fields,if,target,lengths,null,target,lengths,length,this,num,fields,target,lengths,new,int,this,num,fields,if,target,read,fields,null,target,read,fields,length,this,num,fields,target,read,fields,new,value,this,num,fields,if,target,write,fields,null,target,write,fields,length,this,num,fields,target,write,fields,new,value,this,num,fields,system,arraycopy,this,binary,data,0,target,binary,data,0,this,binary,len,system,arraycopy,this,offsets,0,target,offsets,0,this,num,fields,system,arraycopy,this,lengths,0,target,lengths,0,this,num,fields,target,binary,len,this,binary,len,target,num,fields,this,num,fields,target,first,modified,pos,integer
Record -> public void copyTo(Record target);1448491524;@param target;public void copyTo(Record target) {_		updateBinaryRepresenation()__		_		if (target.binaryData == null || target.binaryData.length < this.binaryLen) {_			target.binaryData = new byte[this.binaryLen]__		}_		if (target.offsets == null || target.offsets.length < this.numFields) {_			target.offsets = new int[this.numFields]__		}_		if (target.lengths == null || target.lengths.length < this.numFields) {_			target.lengths = new int[this.numFields]__		}_		if (target.readFields == null || target.readFields.length < this.numFields) {_			target.readFields = new Value[this.numFields]__		}_		if (target.writeFields == null || target.writeFields.length < this.numFields) {_			target.writeFields = new Value[this.numFields]__		}_		_		System.arraycopy(this.binaryData, 0, target.binaryData, 0, this.binaryLen)__		System.arraycopy(this.offsets, 0, target.offsets, 0, this.numFields)__		System.arraycopy(this.lengths, 0, target.lengths, 0, this.numFields)__		_		target.binaryLen = this.binaryLen__		target.numFields = this.numFields__		target.firstModifiedPos = Integer.MAX_VALUE__	};param,target;public,void,copy,to,record,target,update,binary,represenation,if,target,binary,data,null,target,binary,data,length,this,binary,len,target,binary,data,new,byte,this,binary,len,if,target,offsets,null,target,offsets,length,this,num,fields,target,offsets,new,int,this,num,fields,if,target,lengths,null,target,lengths,length,this,num,fields,target,lengths,new,int,this,num,fields,if,target,read,fields,null,target,read,fields,length,this,num,fields,target,read,fields,new,value,this,num,fields,if,target,write,fields,null,target,write,fields,length,this,num,fields,target,write,fields,new,value,this,num,fields,system,arraycopy,this,binary,data,0,target,binary,data,0,this,binary,len,system,arraycopy,this,offsets,0,target,offsets,0,this,num,fields,system,arraycopy,this,lengths,0,target,lengths,0,this,num,fields,target,binary,len,this,binary,len,target,num,fields,this,num,fields,target,first,modified,pos,integer
Record -> public void copyTo(Record target);1452178883;@param target;public void copyTo(Record target) {_		updateBinaryRepresenation()__		_		if (target.binaryData == null || target.binaryData.length < this.binaryLen) {_			target.binaryData = new byte[this.binaryLen]__		}_		if (target.offsets == null || target.offsets.length < this.numFields) {_			target.offsets = new int[this.numFields]__		}_		if (target.lengths == null || target.lengths.length < this.numFields) {_			target.lengths = new int[this.numFields]__		}_		if (target.readFields == null || target.readFields.length < this.numFields) {_			target.readFields = new Value[this.numFields]__		}_		if (target.writeFields == null || target.writeFields.length < this.numFields) {_			target.writeFields = new Value[this.numFields]__		}_		_		System.arraycopy(this.binaryData, 0, target.binaryData, 0, this.binaryLen)__		System.arraycopy(this.offsets, 0, target.offsets, 0, this.numFields)__		System.arraycopy(this.lengths, 0, target.lengths, 0, this.numFields)__		_		target.binaryLen = this.binaryLen__		target.numFields = this.numFields__		target.firstModifiedPos = Integer.MAX_VALUE__	};param,target;public,void,copy,to,record,target,update,binary,represenation,if,target,binary,data,null,target,binary,data,length,this,binary,len,target,binary,data,new,byte,this,binary,len,if,target,offsets,null,target,offsets,length,this,num,fields,target,offsets,new,int,this,num,fields,if,target,lengths,null,target,lengths,length,this,num,fields,target,lengths,new,int,this,num,fields,if,target,read,fields,null,target,read,fields,length,this,num,fields,target,read,fields,new,value,this,num,fields,if,target,write,fields,null,target,write,fields,length,this,num,fields,target,write,fields,new,value,this,num,fields,system,arraycopy,this,binary,data,0,target,binary,data,0,this,binary,len,system,arraycopy,this,offsets,0,target,offsets,0,this,num,fields,system,arraycopy,this,lengths,0,target,lengths,0,this,num,fields,target,binary,len,this,binary,len,target,num,fields,this,num,fields,target,first,modified,pos,integer
Record -> public void copyTo(Record target);1489589988;@param target;public void copyTo(Record target) {_		updateBinaryRepresenation()__		_		if (target.binaryData == null || target.binaryData.length < this.binaryLen) {_			target.binaryData = new byte[this.binaryLen]__		}_		if (target.offsets == null || target.offsets.length < this.numFields) {_			target.offsets = new int[this.numFields]__		}_		if (target.lengths == null || target.lengths.length < this.numFields) {_			target.lengths = new int[this.numFields]__		}_		if (target.readFields == null || target.readFields.length < this.numFields) {_			target.readFields = new Value[this.numFields]__		}_		if (target.writeFields == null || target.writeFields.length < this.numFields) {_			target.writeFields = new Value[this.numFields]__		}_		_		System.arraycopy(this.binaryData, 0, target.binaryData, 0, this.binaryLen)__		System.arraycopy(this.offsets, 0, target.offsets, 0, this.numFields)__		System.arraycopy(this.lengths, 0, target.lengths, 0, this.numFields)__		_		target.binaryLen = this.binaryLen__		target.numFields = this.numFields__		target.firstModifiedPos = Integer.MAX_VALUE__	};param,target;public,void,copy,to,record,target,update,binary,represenation,if,target,binary,data,null,target,binary,data,length,this,binary,len,target,binary,data,new,byte,this,binary,len,if,target,offsets,null,target,offsets,length,this,num,fields,target,offsets,new,int,this,num,fields,if,target,lengths,null,target,lengths,length,this,num,fields,target,lengths,new,int,this,num,fields,if,target,read,fields,null,target,read,fields,length,this,num,fields,target,read,fields,new,value,this,num,fields,if,target,write,fields,null,target,write,fields,length,this,num,fields,target,write,fields,new,value,this,num,fields,system,arraycopy,this,binary,data,0,target,binary,data,0,this,binary,len,system,arraycopy,this,offsets,0,target,offsets,0,this,num,fields,system,arraycopy,this,lengths,0,target,lengths,0,this,num,fields,target,binary,len,this,binary,len,target,num,fields,this,num,fields,target,first,modified,pos,integer
Record -> public void getFieldsIntoCheckingNull(int[] positions, Value[] targets);1405024514;Gets the fields at the given positions into an array._If at any position a field is null, then this method throws a @link NullKeyFieldException._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@throws NullKeyFieldException in case of a failing field read.;public void getFieldsIntoCheckingNull(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				throw new NullKeyFieldException(i)__			}_		}_	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,throws,a,link,null,key,field,exception,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,throws,null,key,field,exception,in,case,of,a,failing,field,read;public,void,get,fields,into,checking,null,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,throw,new,null,key,field,exception,i
Record -> public void getFieldsIntoCheckingNull(int[] positions, Value[] targets);1405090423;Gets the fields at the given positions into an array._If at any position a field is null, then this method throws a @link NullKeyFieldException._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@throws NullKeyFieldException in case of a failing field read.;public void getFieldsIntoCheckingNull(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				throw new NullKeyFieldException(i)__			}_		}_	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,throws,a,link,null,key,field,exception,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,throws,null,key,field,exception,in,case,of,a,failing,field,read;public,void,get,fields,into,checking,null,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,throw,new,null,key,field,exception,i
Record -> public void getFieldsIntoCheckingNull(int[] positions, Value[] targets);1411473593;Gets the fields at the given positions into an array._If at any position a field is null, then this method throws a @link NullKeyFieldException._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@throws NullKeyFieldException in case of a failing field read.;public void getFieldsIntoCheckingNull(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				throw new NullKeyFieldException(i)__			}_		}_	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,throws,a,link,null,key,field,exception,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,throws,null,key,field,exception,in,case,of,a,failing,field,read;public,void,get,fields,into,checking,null,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,throw,new,null,key,field,exception,i
Record -> public void getFieldsIntoCheckingNull(int[] positions, Value[] targets);1414786554;Gets the fields at the given positions into an array._If at any position a field is null, then this method throws a @link NullKeyFieldException._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@throws NullKeyFieldException in case of a failing field read.;public void getFieldsIntoCheckingNull(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				throw new NullKeyFieldException(i)__			}_		}_	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,throws,a,link,null,key,field,exception,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,throws,null,key,field,exception,in,case,of,a,failing,field,read;public,void,get,fields,into,checking,null,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,throw,new,null,key,field,exception,i
Record -> public void getFieldsIntoCheckingNull(int[] positions, Value[] targets);1423847366;Gets the fields at the given positions into an array._If at any position a field is null, then this method throws a @link NullKeyFieldException._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@throws NullKeyFieldException in case of a failing field read.;public void getFieldsIntoCheckingNull(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				throw new NullKeyFieldException(i)__			}_		}_	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,throws,a,link,null,key,field,exception,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,throws,null,key,field,exception,in,case,of,a,failing,field,read;public,void,get,fields,into,checking,null,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,throw,new,null,key,field,exception,i
Record -> public void getFieldsIntoCheckingNull(int[] positions, Value[] targets);1443521887;Gets the fields at the given positions into an array._If at any position a field is null, then this method throws a @link NullKeyFieldException._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@throws NullKeyFieldException in case of a failing field read.;public void getFieldsIntoCheckingNull(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				throw new NullKeyFieldException(i)__			}_		}_	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,throws,a,link,null,key,field,exception,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,throws,null,key,field,exception,in,case,of,a,failing,field,read;public,void,get,fields,into,checking,null,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,throw,new,null,key,field,exception,i
Record -> public void getFieldsIntoCheckingNull(int[] positions, Value[] targets);1446112342;Gets the fields at the given positions into an array._If at any position a field is null, then this method throws a @link NullKeyFieldException._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@throws NullKeyFieldException in case of a failing field read.;public void getFieldsIntoCheckingNull(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				throw new NullKeyFieldException(i)__			}_		}_	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,throws,a,link,null,key,field,exception,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,throws,null,key,field,exception,in,case,of,a,failing,field,read;public,void,get,fields,into,checking,null,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,throw,new,null,key,field,exception,i
Record -> public void getFieldsIntoCheckingNull(int[] positions, Value[] targets);1448491524;Gets the fields at the given positions into an array._If at any position a field is null, then this method throws a @link NullKeyFieldException._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@throws NullKeyFieldException in case of a failing field read.;public void getFieldsIntoCheckingNull(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				throw new NullKeyFieldException(i)__			}_		}_	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,throws,a,link,null,key,field,exception,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,throws,null,key,field,exception,in,case,of,a,failing,field,read;public,void,get,fields,into,checking,null,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,throw,new,null,key,field,exception,i
Record -> public void getFieldsIntoCheckingNull(int[] positions, Value[] targets);1452178883;Gets the fields at the given positions into an array._If at any position a field is null, then this method throws a @link NullKeyFieldException._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@throws NullKeyFieldException in case of a failing field read.;public void getFieldsIntoCheckingNull(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				throw new NullKeyFieldException(i)__			}_		}_	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,throws,a,link,null,key,field,exception,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,throws,null,key,field,exception,in,case,of,a,failing,field,read;public,void,get,fields,into,checking,null,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,throw,new,null,key,field,exception,i
Record -> public void getFieldsIntoCheckingNull(int[] positions, Value[] targets);1489589988;Gets the fields at the given positions into an array._If at any position a field is null, then this method throws a @link NullKeyFieldException._All fields that have been successfully read until the failing read are correctly contained in the record._All other fields are not set.__@param positions The positions of the fields to get._@param targets The values into which the content of the fields is put.__@throws NullKeyFieldException in case of a failing field read.;public void getFieldsIntoCheckingNull(int[] positions, Value[] targets) {_		for (int i = 0_ i < positions.length_ i++) {_			if (!getFieldInto(positions[i], targets[i])) {_				throw new NullKeyFieldException(i)__			}_		}_	};gets,the,fields,at,the,given,positions,into,an,array,if,at,any,position,a,field,is,null,then,this,method,throws,a,link,null,key,field,exception,all,fields,that,have,been,successfully,read,until,the,failing,read,are,correctly,contained,in,the,record,all,other,fields,are,not,set,param,positions,the,positions,of,the,fields,to,get,param,targets,the,values,into,which,the,content,of,the,fields,is,put,throws,null,key,field,exception,in,case,of,a,failing,field,read;public,void,get,fields,into,checking,null,int,positions,value,targets,for,int,i,0,i,positions,length,i,if,get,field,into,positions,i,targets,i,throw,new,null,key,field,exception,i
Record -> public void deserialize(DataInputView source) throws IOException;1405024514;@param source_@throws IOException;public void deserialize(DataInputView source) throws IOException {_		read(source)__	};param,source,throws,ioexception;public,void,deserialize,data,input,view,source,throws,ioexception,read,source
Record -> public void deserialize(DataInputView source) throws IOException;1405090423;@param source_@throws IOException;public void deserialize(DataInputView source) throws IOException {_		read(source)__	};param,source,throws,ioexception;public,void,deserialize,data,input,view,source,throws,ioexception,read,source
Record -> public void deserialize(DataInputView source) throws IOException;1411473593;@param source_@throws IOException;public void deserialize(DataInputView source) throws IOException {_		read(source)__	};param,source,throws,ioexception;public,void,deserialize,data,input,view,source,throws,ioexception,read,source
Record -> public void deserialize(DataInputView source) throws IOException;1414786554;@param source_@throws IOException;public void deserialize(DataInputView source) throws IOException {_		read(source)__	};param,source,throws,ioexception;public,void,deserialize,data,input,view,source,throws,ioexception,read,source
Record -> public void deserialize(DataInputView source) throws IOException;1423847366;@param source_@throws IOException;public void deserialize(DataInputView source) throws IOException {_		read(source)__	};param,source,throws,ioexception;public,void,deserialize,data,input,view,source,throws,ioexception,read,source
Record -> public void deserialize(DataInputView source) throws IOException;1443521887;@param source_@throws IOException;public void deserialize(DataInputView source) throws IOException {_		read(source)__	};param,source,throws,ioexception;public,void,deserialize,data,input,view,source,throws,ioexception,read,source
Record -> public void deserialize(DataInputView source) throws IOException;1446112342;@param source_@throws IOException;public void deserialize(DataInputView source) throws IOException {_		read(source)__	};param,source,throws,ioexception;public,void,deserialize,data,input,view,source,throws,ioexception,read,source
Record -> public void deserialize(DataInputView source) throws IOException;1448491524;@param source_@throws IOException;public void deserialize(DataInputView source) throws IOException {_		read(source)__	};param,source,throws,ioexception;public,void,deserialize,data,input,view,source,throws,ioexception,read,source
Record -> public void deserialize(DataInputView source) throws IOException;1452178883;@param source_@throws IOException;public void deserialize(DataInputView source) throws IOException {_		read(source)__	};param,source,throws,ioexception;public,void,deserialize,data,input,view,source,throws,ioexception,read,source
Record -> public void deserialize(DataInputView source) throws IOException;1489589988;@param source_@throws IOException;public void deserialize(DataInputView source) throws IOException {_		read(source)__	};param,source,throws,ioexception;public,void,deserialize,data,input,view,source,throws,ioexception,read,source
Record -> public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders);1405024514;Checks the values of this record and a given list of values at specified positions for equality._The values of this record are deserialized and compared against the corresponding search value._The position specify which values are compared._The method returns true if the values on all positions are equal and false otherwise.__@param positions The positions of the values to check for equality._@param searchValues The values against which the values of this record are compared._@param deserializationHolders An array to hold the deserialized values of this record.__@return True if all the values on all positions are equal, false otherwise.;public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders) {_		for (int i = 0_ i < positions.length_ i++) {_			final Value v = getField(positions[i], deserializationHolders[i])__			if (v == null || (!v.equals(searchValues[i]))) {_				return false__			}_		}_		return true__	};checks,the,values,of,this,record,and,a,given,list,of,values,at,specified,positions,for,equality,the,values,of,this,record,are,deserialized,and,compared,against,the,corresponding,search,value,the,position,specify,which,values,are,compared,the,method,returns,true,if,the,values,on,all,positions,are,equal,and,false,otherwise,param,positions,the,positions,of,the,values,to,check,for,equality,param,search,values,the,values,against,which,the,values,of,this,record,are,compared,param,deserialization,holders,an,array,to,hold,the,deserialized,values,of,this,record,return,true,if,all,the,values,on,all,positions,are,equal,false,otherwise;public,final,boolean,equals,fields,int,positions,value,search,values,value,deserialization,holders,for,int,i,0,i,positions,length,i,final,value,v,get,field,positions,i,deserialization,holders,i,if,v,null,v,equals,search,values,i,return,false,return,true
Record -> public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders);1405090423;Checks the values of this record and a given list of values at specified positions for equality._The values of this record are deserialized and compared against the corresponding search value._The position specify which values are compared._The method returns true if the values on all positions are equal and false otherwise.__@param positions The positions of the values to check for equality._@param searchValues The values against which the values of this record are compared._@param deserializationHolders An array to hold the deserialized values of this record.__@return True if all the values on all positions are equal, false otherwise.;public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders) {_		for (int i = 0_ i < positions.length_ i++) {_			final Value v = getField(positions[i], deserializationHolders[i])__			if (v == null || (!v.equals(searchValues[i]))) {_				return false__			}_		}_		return true__	};checks,the,values,of,this,record,and,a,given,list,of,values,at,specified,positions,for,equality,the,values,of,this,record,are,deserialized,and,compared,against,the,corresponding,search,value,the,position,specify,which,values,are,compared,the,method,returns,true,if,the,values,on,all,positions,are,equal,and,false,otherwise,param,positions,the,positions,of,the,values,to,check,for,equality,param,search,values,the,values,against,which,the,values,of,this,record,are,compared,param,deserialization,holders,an,array,to,hold,the,deserialized,values,of,this,record,return,true,if,all,the,values,on,all,positions,are,equal,false,otherwise;public,final,boolean,equals,fields,int,positions,value,search,values,value,deserialization,holders,for,int,i,0,i,positions,length,i,final,value,v,get,field,positions,i,deserialization,holders,i,if,v,null,v,equals,search,values,i,return,false,return,true
Record -> public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders);1411473593;Checks the values of this record and a given list of values at specified positions for equality._The values of this record are deserialized and compared against the corresponding search value._The position specify which values are compared._The method returns true if the values on all positions are equal and false otherwise.__@param positions The positions of the values to check for equality._@param searchValues The values against which the values of this record are compared._@param deserializationHolders An array to hold the deserialized values of this record.__@return True if all the values on all positions are equal, false otherwise.;public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders) {_		for (int i = 0_ i < positions.length_ i++) {_			final Value v = getField(positions[i], deserializationHolders[i])__			if (v == null || (!v.equals(searchValues[i]))) {_				return false__			}_		}_		return true__	};checks,the,values,of,this,record,and,a,given,list,of,values,at,specified,positions,for,equality,the,values,of,this,record,are,deserialized,and,compared,against,the,corresponding,search,value,the,position,specify,which,values,are,compared,the,method,returns,true,if,the,values,on,all,positions,are,equal,and,false,otherwise,param,positions,the,positions,of,the,values,to,check,for,equality,param,search,values,the,values,against,which,the,values,of,this,record,are,compared,param,deserialization,holders,an,array,to,hold,the,deserialized,values,of,this,record,return,true,if,all,the,values,on,all,positions,are,equal,false,otherwise;public,final,boolean,equals,fields,int,positions,value,search,values,value,deserialization,holders,for,int,i,0,i,positions,length,i,final,value,v,get,field,positions,i,deserialization,holders,i,if,v,null,v,equals,search,values,i,return,false,return,true
Record -> public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders);1414786554;Checks the values of this record and a given list of values at specified positions for equality._The values of this record are deserialized and compared against the corresponding search value._The position specify which values are compared._The method returns true if the values on all positions are equal and false otherwise.__@param positions The positions of the values to check for equality._@param searchValues The values against which the values of this record are compared._@param deserializationHolders An array to hold the deserialized values of this record.__@return True if all the values on all positions are equal, false otherwise.;public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders) {_		for (int i = 0_ i < positions.length_ i++) {_			final Value v = getField(positions[i], deserializationHolders[i])__			if (v == null || (!v.equals(searchValues[i]))) {_				return false__			}_		}_		return true__	};checks,the,values,of,this,record,and,a,given,list,of,values,at,specified,positions,for,equality,the,values,of,this,record,are,deserialized,and,compared,against,the,corresponding,search,value,the,position,specify,which,values,are,compared,the,method,returns,true,if,the,values,on,all,positions,are,equal,and,false,otherwise,param,positions,the,positions,of,the,values,to,check,for,equality,param,search,values,the,values,against,which,the,values,of,this,record,are,compared,param,deserialization,holders,an,array,to,hold,the,deserialized,values,of,this,record,return,true,if,all,the,values,on,all,positions,are,equal,false,otherwise;public,final,boolean,equals,fields,int,positions,value,search,values,value,deserialization,holders,for,int,i,0,i,positions,length,i,final,value,v,get,field,positions,i,deserialization,holders,i,if,v,null,v,equals,search,values,i,return,false,return,true
Record -> public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders);1423847366;Checks the values of this record and a given list of values at specified positions for equality._The values of this record are deserialized and compared against the corresponding search value._The position specify which values are compared._The method returns true if the values on all positions are equal and false otherwise.__@param positions The positions of the values to check for equality._@param searchValues The values against which the values of this record are compared._@param deserializationHolders An array to hold the deserialized values of this record.__@return True if all the values on all positions are equal, false otherwise.;public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders) {_		for (int i = 0_ i < positions.length_ i++) {_			final Value v = getField(positions[i], deserializationHolders[i])__			if (v == null || (!v.equals(searchValues[i]))) {_				return false__			}_		}_		return true__	};checks,the,values,of,this,record,and,a,given,list,of,values,at,specified,positions,for,equality,the,values,of,this,record,are,deserialized,and,compared,against,the,corresponding,search,value,the,position,specify,which,values,are,compared,the,method,returns,true,if,the,values,on,all,positions,are,equal,and,false,otherwise,param,positions,the,positions,of,the,values,to,check,for,equality,param,search,values,the,values,against,which,the,values,of,this,record,are,compared,param,deserialization,holders,an,array,to,hold,the,deserialized,values,of,this,record,return,true,if,all,the,values,on,all,positions,are,equal,false,otherwise;public,final,boolean,equals,fields,int,positions,value,search,values,value,deserialization,holders,for,int,i,0,i,positions,length,i,final,value,v,get,field,positions,i,deserialization,holders,i,if,v,null,v,equals,search,values,i,return,false,return,true
Record -> public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders);1443521887;Checks the values of this record and a given list of values at specified positions for equality._The values of this record are deserialized and compared against the corresponding search value._The position specify which values are compared._The method returns true if the values on all positions are equal and false otherwise.__@param positions The positions of the values to check for equality._@param searchValues The values against which the values of this record are compared._@param deserializationHolders An array to hold the deserialized values of this record.__@return True if all the values on all positions are equal, false otherwise.;public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders) {_		for (int i = 0_ i < positions.length_ i++) {_			final Value v = getField(positions[i], deserializationHolders[i])__			if (v == null || (!v.equals(searchValues[i]))) {_				return false__			}_		}_		return true__	};checks,the,values,of,this,record,and,a,given,list,of,values,at,specified,positions,for,equality,the,values,of,this,record,are,deserialized,and,compared,against,the,corresponding,search,value,the,position,specify,which,values,are,compared,the,method,returns,true,if,the,values,on,all,positions,are,equal,and,false,otherwise,param,positions,the,positions,of,the,values,to,check,for,equality,param,search,values,the,values,against,which,the,values,of,this,record,are,compared,param,deserialization,holders,an,array,to,hold,the,deserialized,values,of,this,record,return,true,if,all,the,values,on,all,positions,are,equal,false,otherwise;public,final,boolean,equals,fields,int,positions,value,search,values,value,deserialization,holders,for,int,i,0,i,positions,length,i,final,value,v,get,field,positions,i,deserialization,holders,i,if,v,null,v,equals,search,values,i,return,false,return,true
Record -> public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders);1446112342;Checks the values of this record and a given list of values at specified positions for equality._The values of this record are deserialized and compared against the corresponding search value._The position specify which values are compared._The method returns true if the values on all positions are equal and false otherwise.__@param positions The positions of the values to check for equality._@param searchValues The values against which the values of this record are compared._@param deserializationHolders An array to hold the deserialized values of this record.__@return True if all the values on all positions are equal, false otherwise.;public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders) {_		for (int i = 0_ i < positions.length_ i++) {_			final Value v = getField(positions[i], deserializationHolders[i])__			if (v == null || (!v.equals(searchValues[i]))) {_				return false__			}_		}_		return true__	};checks,the,values,of,this,record,and,a,given,list,of,values,at,specified,positions,for,equality,the,values,of,this,record,are,deserialized,and,compared,against,the,corresponding,search,value,the,position,specify,which,values,are,compared,the,method,returns,true,if,the,values,on,all,positions,are,equal,and,false,otherwise,param,positions,the,positions,of,the,values,to,check,for,equality,param,search,values,the,values,against,which,the,values,of,this,record,are,compared,param,deserialization,holders,an,array,to,hold,the,deserialized,values,of,this,record,return,true,if,all,the,values,on,all,positions,are,equal,false,otherwise;public,final,boolean,equals,fields,int,positions,value,search,values,value,deserialization,holders,for,int,i,0,i,positions,length,i,final,value,v,get,field,positions,i,deserialization,holders,i,if,v,null,v,equals,search,values,i,return,false,return,true
Record -> public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders);1448491524;Checks the values of this record and a given list of values at specified positions for equality._The values of this record are deserialized and compared against the corresponding search value._The position specify which values are compared._The method returns true if the values on all positions are equal and false otherwise.__@param positions The positions of the values to check for equality._@param searchValues The values against which the values of this record are compared._@param deserializationHolders An array to hold the deserialized values of this record.__@return True if all the values on all positions are equal, false otherwise.;public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders) {_		for (int i = 0_ i < positions.length_ i++) {_			final Value v = getField(positions[i], deserializationHolders[i])__			if (v == null || (!v.equals(searchValues[i]))) {_				return false__			}_		}_		return true__	};checks,the,values,of,this,record,and,a,given,list,of,values,at,specified,positions,for,equality,the,values,of,this,record,are,deserialized,and,compared,against,the,corresponding,search,value,the,position,specify,which,values,are,compared,the,method,returns,true,if,the,values,on,all,positions,are,equal,and,false,otherwise,param,positions,the,positions,of,the,values,to,check,for,equality,param,search,values,the,values,against,which,the,values,of,this,record,are,compared,param,deserialization,holders,an,array,to,hold,the,deserialized,values,of,this,record,return,true,if,all,the,values,on,all,positions,are,equal,false,otherwise;public,final,boolean,equals,fields,int,positions,value,search,values,value,deserialization,holders,for,int,i,0,i,positions,length,i,final,value,v,get,field,positions,i,deserialization,holders,i,if,v,null,v,equals,search,values,i,return,false,return,true
Record -> public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders);1452178883;Checks the values of this record and a given list of values at specified positions for equality._The values of this record are deserialized and compared against the corresponding search value._The position specify which values are compared._The method returns true if the values on all positions are equal and false otherwise.__@param positions The positions of the values to check for equality._@param searchValues The values against which the values of this record are compared._@param deserializationHolders An array to hold the deserialized values of this record.__@return True if all the values on all positions are equal, false otherwise.;public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders) {_		for (int i = 0_ i < positions.length_ i++) {_			final Value v = getField(positions[i], deserializationHolders[i])__			if (v == null || (!v.equals(searchValues[i]))) {_				return false__			}_		}_		return true__	};checks,the,values,of,this,record,and,a,given,list,of,values,at,specified,positions,for,equality,the,values,of,this,record,are,deserialized,and,compared,against,the,corresponding,search,value,the,position,specify,which,values,are,compared,the,method,returns,true,if,the,values,on,all,positions,are,equal,and,false,otherwise,param,positions,the,positions,of,the,values,to,check,for,equality,param,search,values,the,values,against,which,the,values,of,this,record,are,compared,param,deserialization,holders,an,array,to,hold,the,deserialized,values,of,this,record,return,true,if,all,the,values,on,all,positions,are,equal,false,otherwise;public,final,boolean,equals,fields,int,positions,value,search,values,value,deserialization,holders,for,int,i,0,i,positions,length,i,final,value,v,get,field,positions,i,deserialization,holders,i,if,v,null,v,equals,search,values,i,return,false,return,true
Record -> public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders);1489589988;Checks the values of this record and a given list of values at specified positions for equality._The values of this record are deserialized and compared against the corresponding search value._The position specify which values are compared._The method returns true if the values on all positions are equal and false otherwise.__@param positions The positions of the values to check for equality._@param searchValues The values against which the values of this record are compared._@param deserializationHolders An array to hold the deserialized values of this record.__@return True if all the values on all positions are equal, false otherwise.;public final boolean equalsFields(int[] positions, Value[] searchValues, Value[] deserializationHolders) {_		for (int i = 0_ i < positions.length_ i++) {_			final Value v = getField(positions[i], deserializationHolders[i])__			if (v == null || (!v.equals(searchValues[i]))) {_				return false__			}_		}_		return true__	};checks,the,values,of,this,record,and,a,given,list,of,values,at,specified,positions,for,equality,the,values,of,this,record,are,deserialized,and,compared,against,the,corresponding,search,value,the,position,specify,which,values,are,compared,the,method,returns,true,if,the,values,on,all,positions,are,equal,and,false,otherwise,param,positions,the,positions,of,the,values,to,check,for,equality,param,search,values,the,values,against,which,the,values,of,this,record,are,compared,param,deserialization,holders,an,array,to,hold,the,deserialized,values,of,this,record,return,true,if,all,the,values,on,all,positions,are,equal,false,otherwise;public,final,boolean,equals,fields,int,positions,value,search,values,value,deserialization,holders,for,int,i,0,i,positions,length,i,final,value,v,get,field,positions,i,deserialization,holders,i,if,v,null,v,equals,search,values,i,return,false,return,true
Record -> public void updateBinaryRepresenation();1405024514;Updates the binary representation of the data, such that it reflects the state of the currently_stored fields. If the binary representation is already up to date, nothing happens. Otherwise,_this function triggers the modified fields to serialize themselves into the records buffer and_afterwards updates the offset table.;public void updateBinaryRepresenation() {_		_		final int firstModified = this.firstModifiedPos__		if (firstModified == Integer.MAX_VALUE) {_			return__		}_		_		final InternalDeSerializer serializer = this.serializer__		final int[] offsets = this.offsets__		final int numFields = this.numFields__		_		serializer.memory = this.switchBuffer != null ? this.switchBuffer : _				(this.binaryLen > 0 ? new byte[this.binaryLen] : new byte[numFields * DEFAULT_FIELD_LEN_ESTIMATE + 1])__		serializer.position = 0__		_		if (numFields > 0) {_			int offset = 0__			_			_			if (firstModified > 0) {_				for (int i = firstModified - 1_ i >= 0_ i--) {_					if (this.offsets[i] != NULL_INDICATOR_OFFSET) {_						offset = this.offsets[i] + this.lengths[i]__						break__					}_				}_			}_			_			_			try {_				if (offset > 0) {_					_					serializer.write(this.binaryData, 0, offset)__				}_				_				for (int i = firstModified_ i < numFields_ i++) {_					final int co = offsets[i]__					_					if (co == NULL_INDICATOR_OFFSET) {_						continue__					}_					_					offsets[i] = offset__					if (co == MODIFIED_INDICATOR_OFFSET) {_						_						final Value writeField = this.writeFields[i]__						_						if (writeField == RESERVE_SPACE) {_							_							final int length = this.lengths[i]__							_							if (serializer.position >= serializer.memory.length - length - 1) {_								serializer.resize(length)__							}_							serializer.position += length__							_						} else {_							_							this.writeFields[i].write(serializer)__						}_					} else {_						_						serializer.write(this.binaryData, co, this.lengths[i])__					}_					_					this.lengths[i] = serializer.position - offset__					offset = serializer.position__				}_			}_			catch (Exception e) {_				throw new RuntimeException("Error in data type serialization: " + e.getMessage(), e)_ _			}_		}_		_		serializeHeader(serializer, offsets, numFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		this.firstModifiedPos = Integer.MAX_VALUE__	};updates,the,binary,representation,of,the,data,such,that,it,reflects,the,state,of,the,currently,stored,fields,if,the,binary,representation,is,already,up,to,date,nothing,happens,otherwise,this,function,triggers,the,modified,fields,to,serialize,themselves,into,the,records,buffer,and,afterwards,updates,the,offset,table;public,void,update,binary,represenation,final,int,first,modified,this,first,modified,pos,if,first,modified,integer,return,final,internal,de,serializer,serializer,this,serializer,final,int,offsets,this,offsets,final,int,num,fields,this,num,fields,serializer,memory,this,switch,buffer,null,this,switch,buffer,this,binary,len,0,new,byte,this,binary,len,new,byte,num,fields,1,serializer,position,0,if,num,fields,0,int,offset,0,if,first,modified,0,for,int,i,first,modified,1,i,0,i,if,this,offsets,i,offset,this,offsets,i,this,lengths,i,break,try,if,offset,0,serializer,write,this,binary,data,0,offset,for,int,i,first,modified,i,num,fields,i,final,int,co,offsets,i,if,co,continue,offsets,i,offset,if,co,final,value,write,field,this,write,fields,i,if,write,field,final,int,length,this,lengths,i,if,serializer,position,serializer,memory,length,length,1,serializer,resize,length,serializer,position,length,else,this,write,fields,i,write,serializer,else,serializer,write,this,binary,data,co,this,lengths,i,this,lengths,i,serializer,position,offset,offset,serializer,position,catch,exception,e,throw,new,runtime,exception,error,in,data,type,serialization,e,get,message,e,serialize,header,serializer,offsets,num,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,first,modified,pos,integer
Record -> public void updateBinaryRepresenation();1405090423;Updates the binary representation of the data, such that it reflects the state of the currently_stored fields. If the binary representation is already up to date, nothing happens. Otherwise,_this function triggers the modified fields to serialize themselves into the records buffer and_afterwards updates the offset table.;public void updateBinaryRepresenation() {_		_		final int firstModified = this.firstModifiedPos__		if (firstModified == Integer.MAX_VALUE) {_			return__		}_		_		final InternalDeSerializer serializer = this.serializer__		final int[] offsets = this.offsets__		final int numFields = this.numFields__		_		serializer.memory = this.switchBuffer != null ? this.switchBuffer : _				(this.binaryLen > 0 ? new byte[this.binaryLen] : new byte[numFields * DEFAULT_FIELD_LEN_ESTIMATE + 1])__		serializer.position = 0__		_		if (numFields > 0) {_			int offset = 0__			_			_			if (firstModified > 0) {_				for (int i = firstModified - 1_ i >= 0_ i--) {_					if (this.offsets[i] != NULL_INDICATOR_OFFSET) {_						offset = this.offsets[i] + this.lengths[i]__						break__					}_				}_			}_			_			_			try {_				if (offset > 0) {_					_					serializer.write(this.binaryData, 0, offset)__				}_				_				for (int i = firstModified_ i < numFields_ i++) {_					final int co = offsets[i]__					_					if (co == NULL_INDICATOR_OFFSET) {_						continue__					}_					_					offsets[i] = offset__					if (co == MODIFIED_INDICATOR_OFFSET) {_						_						final Value writeField = this.writeFields[i]__						_						if (writeField == RESERVE_SPACE) {_							_							final int length = this.lengths[i]__							_							if (serializer.position >= serializer.memory.length - length - 1) {_								serializer.resize(length)__							}_							serializer.position += length__							_						} else {_							_							this.writeFields[i].write(serializer)__						}_					} else {_						_						serializer.write(this.binaryData, co, this.lengths[i])__					}_					_					this.lengths[i] = serializer.position - offset__					offset = serializer.position__				}_			}_			catch (Exception e) {_				throw new RuntimeException("Error in data type serialization: " + e.getMessage(), e)_ _			}_		}_		_		serializeHeader(serializer, offsets, numFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		this.firstModifiedPos = Integer.MAX_VALUE__	};updates,the,binary,representation,of,the,data,such,that,it,reflects,the,state,of,the,currently,stored,fields,if,the,binary,representation,is,already,up,to,date,nothing,happens,otherwise,this,function,triggers,the,modified,fields,to,serialize,themselves,into,the,records,buffer,and,afterwards,updates,the,offset,table;public,void,update,binary,represenation,final,int,first,modified,this,first,modified,pos,if,first,modified,integer,return,final,internal,de,serializer,serializer,this,serializer,final,int,offsets,this,offsets,final,int,num,fields,this,num,fields,serializer,memory,this,switch,buffer,null,this,switch,buffer,this,binary,len,0,new,byte,this,binary,len,new,byte,num,fields,1,serializer,position,0,if,num,fields,0,int,offset,0,if,first,modified,0,for,int,i,first,modified,1,i,0,i,if,this,offsets,i,offset,this,offsets,i,this,lengths,i,break,try,if,offset,0,serializer,write,this,binary,data,0,offset,for,int,i,first,modified,i,num,fields,i,final,int,co,offsets,i,if,co,continue,offsets,i,offset,if,co,final,value,write,field,this,write,fields,i,if,write,field,final,int,length,this,lengths,i,if,serializer,position,serializer,memory,length,length,1,serializer,resize,length,serializer,position,length,else,this,write,fields,i,write,serializer,else,serializer,write,this,binary,data,co,this,lengths,i,this,lengths,i,serializer,position,offset,offset,serializer,position,catch,exception,e,throw,new,runtime,exception,error,in,data,type,serialization,e,get,message,e,serialize,header,serializer,offsets,num,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,first,modified,pos,integer
Record -> public void updateBinaryRepresenation();1411473593;Updates the binary representation of the data, such that it reflects the state of the currently_stored fields. If the binary representation is already up to date, nothing happens. Otherwise,_this function triggers the modified fields to serialize themselves into the records buffer and_afterwards updates the offset table.;public void updateBinaryRepresenation() {_		_		final int firstModified = this.firstModifiedPos__		if (firstModified == Integer.MAX_VALUE) {_			return__		}_		_		final InternalDeSerializer serializer = this.serializer__		final int[] offsets = this.offsets__		final int numFields = this.numFields__		_		serializer.memory = this.switchBuffer != null ? this.switchBuffer : _				(this.binaryLen > 0 ? new byte[this.binaryLen] : new byte[numFields * DEFAULT_FIELD_LEN_ESTIMATE + 1])__		serializer.position = 0__		_		if (numFields > 0) {_			int offset = 0__			_			_			if (firstModified > 0) {_				for (int i = firstModified - 1_ i >= 0_ i--) {_					if (this.offsets[i] != NULL_INDICATOR_OFFSET) {_						offset = this.offsets[i] + this.lengths[i]__						break__					}_				}_			}_			_			_			try {_				if (offset > 0) {_					_					serializer.write(this.binaryData, 0, offset)__				}_				_				for (int i = firstModified_ i < numFields_ i++) {_					final int co = offsets[i]__					_					if (co == NULL_INDICATOR_OFFSET) {_						continue__					}_					_					offsets[i] = offset__					if (co == MODIFIED_INDICATOR_OFFSET) {_						_						final Value writeField = this.writeFields[i]__						_						if (writeField == RESERVE_SPACE) {_							_							final int length = this.lengths[i]__							_							if (serializer.position >= serializer.memory.length - length - 1) {_								serializer.resize(length)__							}_							serializer.position += length__							_						} else {_							_							this.writeFields[i].write(serializer)__						}_					} else {_						_						serializer.write(this.binaryData, co, this.lengths[i])__					}_					_					this.lengths[i] = serializer.position - offset__					offset = serializer.position__				}_			}_			catch (Exception e) {_				throw new RuntimeException("Error in data type serialization: " + e.getMessage(), e)_ _			}_		}_		_		serializeHeader(serializer, offsets, numFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		this.firstModifiedPos = Integer.MAX_VALUE__	};updates,the,binary,representation,of,the,data,such,that,it,reflects,the,state,of,the,currently,stored,fields,if,the,binary,representation,is,already,up,to,date,nothing,happens,otherwise,this,function,triggers,the,modified,fields,to,serialize,themselves,into,the,records,buffer,and,afterwards,updates,the,offset,table;public,void,update,binary,represenation,final,int,first,modified,this,first,modified,pos,if,first,modified,integer,return,final,internal,de,serializer,serializer,this,serializer,final,int,offsets,this,offsets,final,int,num,fields,this,num,fields,serializer,memory,this,switch,buffer,null,this,switch,buffer,this,binary,len,0,new,byte,this,binary,len,new,byte,num,fields,1,serializer,position,0,if,num,fields,0,int,offset,0,if,first,modified,0,for,int,i,first,modified,1,i,0,i,if,this,offsets,i,offset,this,offsets,i,this,lengths,i,break,try,if,offset,0,serializer,write,this,binary,data,0,offset,for,int,i,first,modified,i,num,fields,i,final,int,co,offsets,i,if,co,continue,offsets,i,offset,if,co,final,value,write,field,this,write,fields,i,if,write,field,final,int,length,this,lengths,i,if,serializer,position,serializer,memory,length,length,1,serializer,resize,length,serializer,position,length,else,this,write,fields,i,write,serializer,else,serializer,write,this,binary,data,co,this,lengths,i,this,lengths,i,serializer,position,offset,offset,serializer,position,catch,exception,e,throw,new,runtime,exception,error,in,data,type,serialization,e,get,message,e,serialize,header,serializer,offsets,num,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,first,modified,pos,integer
Record -> public void updateBinaryRepresenation();1414786554;Updates the binary representation of the data, such that it reflects the state of the currently_stored fields. If the binary representation is already up to date, nothing happens. Otherwise,_this function triggers the modified fields to serialize themselves into the records buffer and_afterwards updates the offset table.;public void updateBinaryRepresenation() {_		_		final int firstModified = this.firstModifiedPos__		if (firstModified == Integer.MAX_VALUE) {_			return__		}_		_		final InternalDeSerializer serializer = this.serializer__		final int[] offsets = this.offsets__		final int numFields = this.numFields__		_		serializer.memory = this.switchBuffer != null ? this.switchBuffer : _				(this.binaryLen > 0 ? new byte[this.binaryLen] : new byte[numFields * DEFAULT_FIELD_LEN_ESTIMATE + 1])__		serializer.position = 0__		_		if (numFields > 0) {_			int offset = 0__			_			_			if (firstModified > 0) {_				for (int i = firstModified - 1_ i >= 0_ i--) {_					if (this.offsets[i] != NULL_INDICATOR_OFFSET) {_						offset = this.offsets[i] + this.lengths[i]__						break__					}_				}_			}_			_			_			try {_				if (offset > 0) {_					_					serializer.write(this.binaryData, 0, offset)__				}_				_				for (int i = firstModified_ i < numFields_ i++) {_					final int co = offsets[i]__					_					if (co == NULL_INDICATOR_OFFSET) {_						continue__					}_					_					offsets[i] = offset__					if (co == MODIFIED_INDICATOR_OFFSET) {_						_						final Value writeField = this.writeFields[i]__						_						if (writeField == RESERVE_SPACE) {_							_							final int length = this.lengths[i]__							_							if (serializer.position >= serializer.memory.length - length - 1) {_								serializer.resize(length)__							}_							serializer.position += length__							_						} else {_							_							this.writeFields[i].write(serializer)__						}_					} else {_						_						serializer.write(this.binaryData, co, this.lengths[i])__					}_					_					this.lengths[i] = serializer.position - offset__					offset = serializer.position__				}_			}_			catch (Exception e) {_				throw new RuntimeException("Error in data type serialization: " + e.getMessage(), e)_ _			}_		}_		_		serializeHeader(serializer, offsets, numFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		this.firstModifiedPos = Integer.MAX_VALUE__	};updates,the,binary,representation,of,the,data,such,that,it,reflects,the,state,of,the,currently,stored,fields,if,the,binary,representation,is,already,up,to,date,nothing,happens,otherwise,this,function,triggers,the,modified,fields,to,serialize,themselves,into,the,records,buffer,and,afterwards,updates,the,offset,table;public,void,update,binary,represenation,final,int,first,modified,this,first,modified,pos,if,first,modified,integer,return,final,internal,de,serializer,serializer,this,serializer,final,int,offsets,this,offsets,final,int,num,fields,this,num,fields,serializer,memory,this,switch,buffer,null,this,switch,buffer,this,binary,len,0,new,byte,this,binary,len,new,byte,num,fields,1,serializer,position,0,if,num,fields,0,int,offset,0,if,first,modified,0,for,int,i,first,modified,1,i,0,i,if,this,offsets,i,offset,this,offsets,i,this,lengths,i,break,try,if,offset,0,serializer,write,this,binary,data,0,offset,for,int,i,first,modified,i,num,fields,i,final,int,co,offsets,i,if,co,continue,offsets,i,offset,if,co,final,value,write,field,this,write,fields,i,if,write,field,final,int,length,this,lengths,i,if,serializer,position,serializer,memory,length,length,1,serializer,resize,length,serializer,position,length,else,this,write,fields,i,write,serializer,else,serializer,write,this,binary,data,co,this,lengths,i,this,lengths,i,serializer,position,offset,offset,serializer,position,catch,exception,e,throw,new,runtime,exception,error,in,data,type,serialization,e,get,message,e,serialize,header,serializer,offsets,num,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,first,modified,pos,integer
Record -> public void updateBinaryRepresenation();1423847366;Updates the binary representation of the data, such that it reflects the state of the currently_stored fields. If the binary representation is already up to date, nothing happens. Otherwise,_this function triggers the modified fields to serialize themselves into the records buffer and_afterwards updates the offset table.;public void updateBinaryRepresenation() {_		_		final int firstModified = this.firstModifiedPos__		if (firstModified == Integer.MAX_VALUE) {_			return__		}_		_		final InternalDeSerializer serializer = this.serializer__		final int[] offsets = this.offsets__		final int numFields = this.numFields__		_		serializer.memory = this.switchBuffer != null ? this.switchBuffer : _				(this.binaryLen > 0 ? new byte[this.binaryLen] : new byte[numFields * DEFAULT_FIELD_LEN_ESTIMATE + 1])__		serializer.position = 0__		_		if (numFields > 0) {_			int offset = 0__			_			_			if (firstModified > 0) {_				for (int i = firstModified - 1_ i >= 0_ i--) {_					if (this.offsets[i] != NULL_INDICATOR_OFFSET) {_						offset = this.offsets[i] + this.lengths[i]__						break__					}_				}_			}_			_			_			try {_				if (offset > 0) {_					_					serializer.write(this.binaryData, 0, offset)__				}_				_				for (int i = firstModified_ i < numFields_ i++) {_					final int co = offsets[i]__					_					if (co == NULL_INDICATOR_OFFSET) {_						continue__					}_					_					offsets[i] = offset__					if (co == MODIFIED_INDICATOR_OFFSET) {_						_						final Value writeField = this.writeFields[i]__						_						if (writeField == RESERVE_SPACE) {_							_							final int length = this.lengths[i]__							_							if (serializer.position >= serializer.memory.length - length - 1) {_								serializer.resize(length)__							}_							serializer.position += length__							_						} else {_							_							this.writeFields[i].write(serializer)__						}_					} else {_						_						serializer.write(this.binaryData, co, this.lengths[i])__					}_					_					this.lengths[i] = serializer.position - offset__					offset = serializer.position__				}_			}_			catch (Exception e) {_				throw new RuntimeException("Error in data type serialization: " + e.getMessage(), e)_ _			}_		}_		_		serializeHeader(serializer, offsets, numFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		this.firstModifiedPos = Integer.MAX_VALUE__	};updates,the,binary,representation,of,the,data,such,that,it,reflects,the,state,of,the,currently,stored,fields,if,the,binary,representation,is,already,up,to,date,nothing,happens,otherwise,this,function,triggers,the,modified,fields,to,serialize,themselves,into,the,records,buffer,and,afterwards,updates,the,offset,table;public,void,update,binary,represenation,final,int,first,modified,this,first,modified,pos,if,first,modified,integer,return,final,internal,de,serializer,serializer,this,serializer,final,int,offsets,this,offsets,final,int,num,fields,this,num,fields,serializer,memory,this,switch,buffer,null,this,switch,buffer,this,binary,len,0,new,byte,this,binary,len,new,byte,num,fields,1,serializer,position,0,if,num,fields,0,int,offset,0,if,first,modified,0,for,int,i,first,modified,1,i,0,i,if,this,offsets,i,offset,this,offsets,i,this,lengths,i,break,try,if,offset,0,serializer,write,this,binary,data,0,offset,for,int,i,first,modified,i,num,fields,i,final,int,co,offsets,i,if,co,continue,offsets,i,offset,if,co,final,value,write,field,this,write,fields,i,if,write,field,final,int,length,this,lengths,i,if,serializer,position,serializer,memory,length,length,1,serializer,resize,length,serializer,position,length,else,this,write,fields,i,write,serializer,else,serializer,write,this,binary,data,co,this,lengths,i,this,lengths,i,serializer,position,offset,offset,serializer,position,catch,exception,e,throw,new,runtime,exception,error,in,data,type,serialization,e,get,message,e,serialize,header,serializer,offsets,num,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,first,modified,pos,integer
Record -> public void updateBinaryRepresenation();1443521887;Updates the binary representation of the data, such that it reflects the state of the currently_stored fields. If the binary representation is already up to date, nothing happens. Otherwise,_this function triggers the modified fields to serialize themselves into the records buffer and_afterwards updates the offset table.;public void updateBinaryRepresenation() {_		_		final int firstModified = this.firstModifiedPos__		if (firstModified == Integer.MAX_VALUE) {_			return__		}_		_		final InternalDeSerializer serializer = this.serializer__		final int[] offsets = this.offsets__		final int numFields = this.numFields__		_		serializer.memory = this.switchBuffer != null ? this.switchBuffer : _				(this.binaryLen > 0 ? new byte[this.binaryLen] : new byte[numFields * DEFAULT_FIELD_LEN_ESTIMATE + 1])__		serializer.position = 0__		_		if (numFields > 0) {_			int offset = 0__			_			_			if (firstModified > 0) {_				for (int i = firstModified - 1_ i >= 0_ i--) {_					if (this.offsets[i] != NULL_INDICATOR_OFFSET) {_						offset = this.offsets[i] + this.lengths[i]__						break__					}_				}_			}_			_			_			try {_				if (offset > 0) {_					_					serializer.write(this.binaryData, 0, offset)__				}_				_				for (int i = firstModified_ i < numFields_ i++) {_					final int co = offsets[i]__					_					if (co == NULL_INDICATOR_OFFSET) {_						continue__					}_					_					offsets[i] = offset__					if (co == MODIFIED_INDICATOR_OFFSET) {_						_						final Value writeField = this.writeFields[i]__						_						if (writeField == RESERVE_SPACE) {_							_							final int length = this.lengths[i]__							_							if (serializer.position >= serializer.memory.length - length - 1) {_								serializer.resize(length)__							}_							serializer.position += length__							_						} else {_							_							this.writeFields[i].write(serializer)__						}_					} else {_						_						serializer.write(this.binaryData, co, this.lengths[i])__					}_					_					this.lengths[i] = serializer.position - offset__					offset = serializer.position__				}_			}_			catch (Exception e) {_				throw new RuntimeException("Error in data type serialization: " + e.getMessage(), e)_ _			}_		}_		_		serializeHeader(serializer, offsets, numFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		this.firstModifiedPos = Integer.MAX_VALUE__	};updates,the,binary,representation,of,the,data,such,that,it,reflects,the,state,of,the,currently,stored,fields,if,the,binary,representation,is,already,up,to,date,nothing,happens,otherwise,this,function,triggers,the,modified,fields,to,serialize,themselves,into,the,records,buffer,and,afterwards,updates,the,offset,table;public,void,update,binary,represenation,final,int,first,modified,this,first,modified,pos,if,first,modified,integer,return,final,internal,de,serializer,serializer,this,serializer,final,int,offsets,this,offsets,final,int,num,fields,this,num,fields,serializer,memory,this,switch,buffer,null,this,switch,buffer,this,binary,len,0,new,byte,this,binary,len,new,byte,num,fields,1,serializer,position,0,if,num,fields,0,int,offset,0,if,first,modified,0,for,int,i,first,modified,1,i,0,i,if,this,offsets,i,offset,this,offsets,i,this,lengths,i,break,try,if,offset,0,serializer,write,this,binary,data,0,offset,for,int,i,first,modified,i,num,fields,i,final,int,co,offsets,i,if,co,continue,offsets,i,offset,if,co,final,value,write,field,this,write,fields,i,if,write,field,final,int,length,this,lengths,i,if,serializer,position,serializer,memory,length,length,1,serializer,resize,length,serializer,position,length,else,this,write,fields,i,write,serializer,else,serializer,write,this,binary,data,co,this,lengths,i,this,lengths,i,serializer,position,offset,offset,serializer,position,catch,exception,e,throw,new,runtime,exception,error,in,data,type,serialization,e,get,message,e,serialize,header,serializer,offsets,num,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,first,modified,pos,integer
Record -> public void updateBinaryRepresenation();1446112342;Updates the binary representation of the data, such that it reflects the state of the currently_stored fields. If the binary representation is already up to date, nothing happens. Otherwise,_this function triggers the modified fields to serialize themselves into the records buffer and_afterwards updates the offset table.;public void updateBinaryRepresenation() {_		_		final int firstModified = this.firstModifiedPos__		if (firstModified == Integer.MAX_VALUE) {_			return__		}_		_		final InternalDeSerializer serializer = this.serializer__		final int[] offsets = this.offsets__		final int numFields = this.numFields__		_		serializer.memory = this.switchBuffer != null ? this.switchBuffer : _				(this.binaryLen > 0 ? new byte[this.binaryLen] : new byte[numFields * DEFAULT_FIELD_LEN_ESTIMATE + 1])__		serializer.position = 0__		_		if (numFields > 0) {_			int offset = 0__			_			_			if (firstModified > 0) {_				for (int i = firstModified - 1_ i >= 0_ i--) {_					if (this.offsets[i] != NULL_INDICATOR_OFFSET) {_						offset = this.offsets[i] + this.lengths[i]__						break__					}_				}_			}_			_			_			try {_				if (offset > 0) {_					_					serializer.write(this.binaryData, 0, offset)__				}_				_				for (int i = firstModified_ i < numFields_ i++) {_					final int co = offsets[i]__					_					if (co == NULL_INDICATOR_OFFSET) {_						continue__					}_					_					offsets[i] = offset__					if (co == MODIFIED_INDICATOR_OFFSET) {_						_						final Value writeField = this.writeFields[i]__						_						if (writeField == RESERVE_SPACE) {_							_							final int length = this.lengths[i]__							_							if (serializer.position >= serializer.memory.length - length - 1) {_								serializer.resize(length)__							}_							serializer.position += length__							_						} else {_							_							this.writeFields[i].write(serializer)__						}_					} else {_						_						serializer.write(this.binaryData, co, this.lengths[i])__					}_					_					this.lengths[i] = serializer.position - offset__					offset = serializer.position__				}_			}_			catch (Exception e) {_				throw new RuntimeException("Error in data type serialization: " + e.getMessage(), e)_ _			}_		}_		_		serializeHeader(serializer, offsets, numFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		this.firstModifiedPos = Integer.MAX_VALUE__	};updates,the,binary,representation,of,the,data,such,that,it,reflects,the,state,of,the,currently,stored,fields,if,the,binary,representation,is,already,up,to,date,nothing,happens,otherwise,this,function,triggers,the,modified,fields,to,serialize,themselves,into,the,records,buffer,and,afterwards,updates,the,offset,table;public,void,update,binary,represenation,final,int,first,modified,this,first,modified,pos,if,first,modified,integer,return,final,internal,de,serializer,serializer,this,serializer,final,int,offsets,this,offsets,final,int,num,fields,this,num,fields,serializer,memory,this,switch,buffer,null,this,switch,buffer,this,binary,len,0,new,byte,this,binary,len,new,byte,num,fields,1,serializer,position,0,if,num,fields,0,int,offset,0,if,first,modified,0,for,int,i,first,modified,1,i,0,i,if,this,offsets,i,offset,this,offsets,i,this,lengths,i,break,try,if,offset,0,serializer,write,this,binary,data,0,offset,for,int,i,first,modified,i,num,fields,i,final,int,co,offsets,i,if,co,continue,offsets,i,offset,if,co,final,value,write,field,this,write,fields,i,if,write,field,final,int,length,this,lengths,i,if,serializer,position,serializer,memory,length,length,1,serializer,resize,length,serializer,position,length,else,this,write,fields,i,write,serializer,else,serializer,write,this,binary,data,co,this,lengths,i,this,lengths,i,serializer,position,offset,offset,serializer,position,catch,exception,e,throw,new,runtime,exception,error,in,data,type,serialization,e,get,message,e,serialize,header,serializer,offsets,num,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,first,modified,pos,integer
Record -> public void updateBinaryRepresenation();1448491524;Updates the binary representation of the data, such that it reflects the state of the currently_stored fields. If the binary representation is already up to date, nothing happens. Otherwise,_this function triggers the modified fields to serialize themselves into the records buffer and_afterwards updates the offset table.;public void updateBinaryRepresenation() {_		_		final int firstModified = this.firstModifiedPos__		if (firstModified == Integer.MAX_VALUE) {_			return__		}_		_		final InternalDeSerializer serializer = this.serializer__		final int[] offsets = this.offsets__		final int numFields = this.numFields__		_		serializer.memory = this.switchBuffer != null ? this.switchBuffer : _				(this.binaryLen > 0 ? new byte[this.binaryLen] : new byte[numFields * DEFAULT_FIELD_LEN_ESTIMATE + 1])__		serializer.position = 0__		_		if (numFields > 0) {_			int offset = 0__			_			_			if (firstModified > 0) {_				for (int i = firstModified - 1_ i >= 0_ i--) {_					if (this.offsets[i] != NULL_INDICATOR_OFFSET) {_						offset = this.offsets[i] + this.lengths[i]__						break__					}_				}_			}_			_			_			try {_				if (offset > 0) {_					_					serializer.write(this.binaryData, 0, offset)__				}_				_				for (int i = firstModified_ i < numFields_ i++) {_					final int co = offsets[i]__					_					if (co == NULL_INDICATOR_OFFSET) {_						continue__					}_					_					offsets[i] = offset__					if (co == MODIFIED_INDICATOR_OFFSET) {_						_						final Value writeField = this.writeFields[i]__						_						if (writeField == RESERVE_SPACE) {_							_							final int length = this.lengths[i]__							_							if (serializer.position >= serializer.memory.length - length - 1) {_								serializer.resize(length)__							}_							serializer.position += length__							_						} else {_							_							this.writeFields[i].write(serializer)__						}_					} else {_						_						serializer.write(this.binaryData, co, this.lengths[i])__					}_					_					this.lengths[i] = serializer.position - offset__					offset = serializer.position__				}_			}_			catch (Exception e) {_				throw new RuntimeException("Error in data type serialization: " + e.getMessage(), e)_ _			}_		}_		_		serializeHeader(serializer, offsets, numFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		this.firstModifiedPos = Integer.MAX_VALUE__	};updates,the,binary,representation,of,the,data,such,that,it,reflects,the,state,of,the,currently,stored,fields,if,the,binary,representation,is,already,up,to,date,nothing,happens,otherwise,this,function,triggers,the,modified,fields,to,serialize,themselves,into,the,records,buffer,and,afterwards,updates,the,offset,table;public,void,update,binary,represenation,final,int,first,modified,this,first,modified,pos,if,first,modified,integer,return,final,internal,de,serializer,serializer,this,serializer,final,int,offsets,this,offsets,final,int,num,fields,this,num,fields,serializer,memory,this,switch,buffer,null,this,switch,buffer,this,binary,len,0,new,byte,this,binary,len,new,byte,num,fields,1,serializer,position,0,if,num,fields,0,int,offset,0,if,first,modified,0,for,int,i,first,modified,1,i,0,i,if,this,offsets,i,offset,this,offsets,i,this,lengths,i,break,try,if,offset,0,serializer,write,this,binary,data,0,offset,for,int,i,first,modified,i,num,fields,i,final,int,co,offsets,i,if,co,continue,offsets,i,offset,if,co,final,value,write,field,this,write,fields,i,if,write,field,final,int,length,this,lengths,i,if,serializer,position,serializer,memory,length,length,1,serializer,resize,length,serializer,position,length,else,this,write,fields,i,write,serializer,else,serializer,write,this,binary,data,co,this,lengths,i,this,lengths,i,serializer,position,offset,offset,serializer,position,catch,exception,e,throw,new,runtime,exception,error,in,data,type,serialization,e,get,message,e,serialize,header,serializer,offsets,num,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,first,modified,pos,integer
Record -> public void updateBinaryRepresenation();1452178883;Updates the binary representation of the data, such that it reflects the state of the currently_stored fields. If the binary representation is already up to date, nothing happens. Otherwise,_this function triggers the modified fields to serialize themselves into the records buffer and_afterwards updates the offset table.;public void updateBinaryRepresenation() {_		_		final int firstModified = this.firstModifiedPos__		if (firstModified == Integer.MAX_VALUE) {_			return__		}_		_		final InternalDeSerializer serializer = this.serializer__		final int[] offsets = this.offsets__		final int numFields = this.numFields__		_		serializer.memory = this.switchBuffer != null ? this.switchBuffer : _				(this.binaryLen > 0 ? new byte[this.binaryLen] : new byte[numFields * DEFAULT_FIELD_LEN_ESTIMATE + 1])__		serializer.position = 0__		_		if (numFields > 0) {_			int offset = 0__			_			_			if (firstModified > 0) {_				for (int i = firstModified - 1_ i >= 0_ i--) {_					if (this.offsets[i] != NULL_INDICATOR_OFFSET) {_						offset = this.offsets[i] + this.lengths[i]__						break__					}_				}_			}_			_			_			try {_				if (offset > 0) {_					_					serializer.write(this.binaryData, 0, offset)__				}_				_				for (int i = firstModified_ i < numFields_ i++) {_					final int co = offsets[i]__					_					if (co == NULL_INDICATOR_OFFSET) {_						continue__					}_					_					offsets[i] = offset__					if (co == MODIFIED_INDICATOR_OFFSET) {_						_						final Value writeField = this.writeFields[i]__						_						if (writeField == RESERVE_SPACE) {_							_							final int length = this.lengths[i]__							_							if (serializer.position >= serializer.memory.length - length - 1) {_								serializer.resize(length)__							}_							serializer.position += length__							_						} else {_							_							this.writeFields[i].write(serializer)__						}_					} else {_						_						serializer.write(this.binaryData, co, this.lengths[i])__					}_					_					this.lengths[i] = serializer.position - offset__					offset = serializer.position__				}_			}_			catch (Exception e) {_				throw new RuntimeException("Error in data type serialization: " + e.getMessage(), e)_ _			}_		}_		_		serializeHeader(serializer, offsets, numFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		this.firstModifiedPos = Integer.MAX_VALUE__	};updates,the,binary,representation,of,the,data,such,that,it,reflects,the,state,of,the,currently,stored,fields,if,the,binary,representation,is,already,up,to,date,nothing,happens,otherwise,this,function,triggers,the,modified,fields,to,serialize,themselves,into,the,records,buffer,and,afterwards,updates,the,offset,table;public,void,update,binary,represenation,final,int,first,modified,this,first,modified,pos,if,first,modified,integer,return,final,internal,de,serializer,serializer,this,serializer,final,int,offsets,this,offsets,final,int,num,fields,this,num,fields,serializer,memory,this,switch,buffer,null,this,switch,buffer,this,binary,len,0,new,byte,this,binary,len,new,byte,num,fields,1,serializer,position,0,if,num,fields,0,int,offset,0,if,first,modified,0,for,int,i,first,modified,1,i,0,i,if,this,offsets,i,offset,this,offsets,i,this,lengths,i,break,try,if,offset,0,serializer,write,this,binary,data,0,offset,for,int,i,first,modified,i,num,fields,i,final,int,co,offsets,i,if,co,continue,offsets,i,offset,if,co,final,value,write,field,this,write,fields,i,if,write,field,final,int,length,this,lengths,i,if,serializer,position,serializer,memory,length,length,1,serializer,resize,length,serializer,position,length,else,this,write,fields,i,write,serializer,else,serializer,write,this,binary,data,co,this,lengths,i,this,lengths,i,serializer,position,offset,offset,serializer,position,catch,exception,e,throw,new,runtime,exception,error,in,data,type,serialization,e,get,message,e,serialize,header,serializer,offsets,num,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,first,modified,pos,integer
Record -> public void updateBinaryRepresenation();1489589988;Updates the binary representation of the data, such that it reflects the state of the currently_stored fields. If the binary representation is already up to date, nothing happens. Otherwise,_this function triggers the modified fields to serialize themselves into the records buffer and_afterwards updates the offset table.;public void updateBinaryRepresenation() {_		_		final int firstModified = this.firstModifiedPos__		if (firstModified == Integer.MAX_VALUE) {_			return__		}_		_		final InternalDeSerializer serializer = this.serializer__		final int[] offsets = this.offsets__		final int numFields = this.numFields__		_		serializer.memory = this.switchBuffer != null ? this.switchBuffer : _				(this.binaryLen > 0 ? new byte[this.binaryLen] : new byte[numFields * DEFAULT_FIELD_LEN_ESTIMATE + 1])__		serializer.position = 0__		_		if (numFields > 0) {_			int offset = 0__			_			_			if (firstModified > 0) {_				for (int i = firstModified - 1_ i >= 0_ i--) {_					if (this.offsets[i] != NULL_INDICATOR_OFFSET) {_						offset = this.offsets[i] + this.lengths[i]__						break__					}_				}_			}_			_			_			try {_				if (offset > 0) {_					_					serializer.write(this.binaryData, 0, offset)__				}_				_				for (int i = firstModified_ i < numFields_ i++) {_					final int co = offsets[i]__					_					if (co == NULL_INDICATOR_OFFSET) {_						continue__					}_					_					offsets[i] = offset__					if (co == MODIFIED_INDICATOR_OFFSET) {_						_						final Value writeField = this.writeFields[i]__						_						if (writeField == RESERVE_SPACE) {_							_							final int length = this.lengths[i]__							_							if (serializer.position >= serializer.memory.length - length - 1) {_								serializer.resize(length)__							}_							serializer.position += length__							_						} else {_							_							this.writeFields[i].write(serializer)__						}_					} else {_						_						serializer.write(this.binaryData, co, this.lengths[i])__					}_					_					this.lengths[i] = serializer.position - offset__					offset = serializer.position__				}_			}_			catch (Exception e) {_				throw new RuntimeException("Error in data type serialization: " + e.getMessage(), e)_ _			}_		}_		_		serializeHeader(serializer, offsets, numFields)__		_		_		this.switchBuffer = this.binaryData__		this.binaryData = serializer.memory__		this.binaryLen = serializer.position__		this.firstModifiedPos = Integer.MAX_VALUE__	};updates,the,binary,representation,of,the,data,such,that,it,reflects,the,state,of,the,currently,stored,fields,if,the,binary,representation,is,already,up,to,date,nothing,happens,otherwise,this,function,triggers,the,modified,fields,to,serialize,themselves,into,the,records,buffer,and,afterwards,updates,the,offset,table;public,void,update,binary,represenation,final,int,first,modified,this,first,modified,pos,if,first,modified,integer,return,final,internal,de,serializer,serializer,this,serializer,final,int,offsets,this,offsets,final,int,num,fields,this,num,fields,serializer,memory,this,switch,buffer,null,this,switch,buffer,this,binary,len,0,new,byte,this,binary,len,new,byte,num,fields,1,serializer,position,0,if,num,fields,0,int,offset,0,if,first,modified,0,for,int,i,first,modified,1,i,0,i,if,this,offsets,i,offset,this,offsets,i,this,lengths,i,break,try,if,offset,0,serializer,write,this,binary,data,0,offset,for,int,i,first,modified,i,num,fields,i,final,int,co,offsets,i,if,co,continue,offsets,i,offset,if,co,final,value,write,field,this,write,fields,i,if,write,field,final,int,length,this,lengths,i,if,serializer,position,serializer,memory,length,length,1,serializer,resize,length,serializer,position,length,else,this,write,fields,i,write,serializer,else,serializer,write,this,binary,data,co,this,lengths,i,this,lengths,i,serializer,position,offset,offset,serializer,position,catch,exception,e,throw,new,runtime,exception,error,in,data,type,serialization,e,get,message,e,serialize,header,serializer,offsets,num,fields,this,switch,buffer,this,binary,data,this,binary,data,serializer,memory,this,binary,len,serializer,position,this,first,modified,pos,integer
Record -> public void setNull(long[] mask);1405024514;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit in the n-th bit mask represents the_<code>(n*64) + i</code>-th field in the record.;public void setNull(long[] mask) {_		for (int maskPos = 0, i = 0_ i < this.numFields_) {_			long currMask = mask[maskPos]__			for (int k = 64_ i < this.numFields && k > 0_ --k, i++, currMask >>>= 1) {_				if ((currMask & 0x1) != 0) {_					internallySetField(i, null)__				}_			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,in,the,n,th,bit,mask,represents,the,code,n,64,i,code,th,field,in,the,record;public,void,set,null,long,mask,for,int,mask,pos,0,i,0,i,this,num,fields,long,curr,mask,mask,mask,pos,for,int,k,64,i,this,num,fields,k,0,k,i,curr,mask,1,if,curr,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long[] mask);1405090423;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit in the n-th bit mask represents the_<code>(n*64) + i</code>-th field in the record.;public void setNull(long[] mask) {_		for (int maskPos = 0, i = 0_ i < this.numFields_) {_			long currMask = mask[maskPos]__			for (int k = 64_ i < this.numFields && k > 0_ --k, i++, currMask >>>= 1) {_				if ((currMask & 0x1) != 0) {_					internallySetField(i, null)__				}_			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,in,the,n,th,bit,mask,represents,the,code,n,64,i,code,th,field,in,the,record;public,void,set,null,long,mask,for,int,mask,pos,0,i,0,i,this,num,fields,long,curr,mask,mask,mask,pos,for,int,k,64,i,this,num,fields,k,0,k,i,curr,mask,1,if,curr,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long[] mask);1411473593;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit in the n-th bit mask represents the_<code>(n*64) + i</code>-th field in the record.;public void setNull(long[] mask) {_		for (int maskPos = 0, i = 0_ i < this.numFields_) {_			long currMask = mask[maskPos]__			for (int k = 64_ i < this.numFields && k > 0_ --k, i++, currMask >>>= 1) {_				if ((currMask & 0x1) != 0) {_					internallySetField(i, null)__				}_			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,in,the,n,th,bit,mask,represents,the,code,n,64,i,code,th,field,in,the,record;public,void,set,null,long,mask,for,int,mask,pos,0,i,0,i,this,num,fields,long,curr,mask,mask,mask,pos,for,int,k,64,i,this,num,fields,k,0,k,i,curr,mask,1,if,curr,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long[] mask);1414786554;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit in the n-th bit mask represents the_<code>(n*64) + i</code>-th field in the record.;public void setNull(long[] mask) {_		for (int maskPos = 0, i = 0_ i < this.numFields_) {_			long currMask = mask[maskPos]__			for (int k = 64_ i < this.numFields && k > 0_ --k, i++, currMask >>>= 1) {_				if ((currMask & 0x1) != 0) {_					internallySetField(i, null)__				}_			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,in,the,n,th,bit,mask,represents,the,code,n,64,i,code,th,field,in,the,record;public,void,set,null,long,mask,for,int,mask,pos,0,i,0,i,this,num,fields,long,curr,mask,mask,mask,pos,for,int,k,64,i,this,num,fields,k,0,k,i,curr,mask,1,if,curr,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long[] mask);1423847366;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit in the n-th bit mask represents the_<code>(n*64) + i</code>-th field in the record.;public void setNull(long[] mask) {_		for (int maskPos = 0, i = 0_ i < this.numFields_) {_			long currMask = mask[maskPos]__			for (int k = 64_ i < this.numFields && k > 0_ --k, i++, currMask >>>= 1) {_				if ((currMask & 0x1) != 0) {_					internallySetField(i, null)__				}_			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,in,the,n,th,bit,mask,represents,the,code,n,64,i,code,th,field,in,the,record;public,void,set,null,long,mask,for,int,mask,pos,0,i,0,i,this,num,fields,long,curr,mask,mask,mask,pos,for,int,k,64,i,this,num,fields,k,0,k,i,curr,mask,1,if,curr,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long[] mask);1443521887;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit in the n-th bit mask represents the_<code>(n*64) + i</code>-th field in the record.;public void setNull(long[] mask) {_		for (int maskPos = 0, i = 0_ i < this.numFields_) {_			long currMask = mask[maskPos]__			for (int k = 64_ i < this.numFields && k > 0_ --k, i++, currMask >>>= 1) {_				if ((currMask & 0x1) != 0) {_					internallySetField(i, null)__				}_			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,in,the,n,th,bit,mask,represents,the,code,n,64,i,code,th,field,in,the,record;public,void,set,null,long,mask,for,int,mask,pos,0,i,0,i,this,num,fields,long,curr,mask,mask,mask,pos,for,int,k,64,i,this,num,fields,k,0,k,i,curr,mask,1,if,curr,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long[] mask);1446112342;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit in the n-th bit mask represents the_<code>(n*64) + i</code>-th field in the record.;public void setNull(long[] mask) {_		for (int maskPos = 0, i = 0_ i < this.numFields_) {_			long currMask = mask[maskPos]__			for (int k = 64_ i < this.numFields && k > 0_ --k, i++, currMask >>>= 1) {_				if ((currMask & 0x1) != 0) {_					internallySetField(i, null)__				}_			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,in,the,n,th,bit,mask,represents,the,code,n,64,i,code,th,field,in,the,record;public,void,set,null,long,mask,for,int,mask,pos,0,i,0,i,this,num,fields,long,curr,mask,mask,mask,pos,for,int,k,64,i,this,num,fields,k,0,k,i,curr,mask,1,if,curr,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long[] mask);1448491524;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit in the n-th bit mask represents the_<code>(n*64) + i</code>-th field in the record.;public void setNull(long[] mask) {_		for (int maskPos = 0, i = 0_ i < this.numFields_) {_			long currMask = mask[maskPos]__			for (int k = 64_ i < this.numFields && k > 0_ --k, i++, currMask >>>= 1) {_				if ((currMask & 0x1) != 0) {_					internallySetField(i, null)__				}_			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,in,the,n,th,bit,mask,represents,the,code,n,64,i,code,th,field,in,the,record;public,void,set,null,long,mask,for,int,mask,pos,0,i,0,i,this,num,fields,long,curr,mask,mask,mask,pos,for,int,k,64,i,this,num,fields,k,0,k,i,curr,mask,1,if,curr,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long[] mask);1452178883;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit in the n-th bit mask represents the_<code>(n*64) + i</code>-th field in the record.;public void setNull(long[] mask) {_		for (int maskPos = 0, i = 0_ i < this.numFields_) {_			long currMask = mask[maskPos]__			for (int k = 64_ i < this.numFields && k > 0_ --k, i++, currMask >>>= 1) {_				if ((currMask & 0x1) != 0) {_					internallySetField(i, null)__				}_			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,in,the,n,th,bit,mask,represents,the,code,n,64,i,code,th,field,in,the,record;public,void,set,null,long,mask,for,int,mask,pos,0,i,0,i,this,num,fields,long,curr,mask,mask,mask,pos,for,int,k,64,i,this,num,fields,k,0,k,i,curr,mask,1,if,curr,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long[] mask);1489589988;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit in the n-th bit mask represents the_<code>(n*64) + i</code>-th field in the record.;public void setNull(long[] mask) {_		for (int maskPos = 0, i = 0_ i < this.numFields_) {_			long currMask = mask[maskPos]__			for (int k = 64_ i < this.numFields && k > 0_ --k, i++, currMask >>>= 1) {_				if ((currMask & 0x1) != 0) {_					internallySetField(i, null)__				}_			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,in,the,n,th,bit,mask,represents,the,code,n,64,i,code,th,field,in,the,record;public,void,set,null,long,mask,for,int,mask,pos,0,i,0,i,this,num,fields,long,curr,mask,mask,mask,pos,for,int,k,64,i,this,num,fields,k,0,k,i,curr,mask,1,if,curr,mask,0x1,0,internally,set,field,i,null
Record -> public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions);1405024514;Bin-copies fields from a source record to this record. The following caveats apply:__If the source field is in a modified state, no binary representation will exist yet._In that case, this method is equivalent to setField(..., source.getField(..., <class>))._In particular, if setValue is called on the source field Value instance, that change_will propagate to this record.__If the source field has already been serialized, then the binary representation_will be copied. Further modifications to the source field will not be observable_via this record, but attempting to read the field from this record will cause it_to be deserialized.__Finally, bin-copying a source field requires calling updateBinaryRepresentation_on this instance in order to reserve space in the binaryData array. If none_of the source fields are actually bin-copied, then updateBinaryRepresentation_won't be called.__@param source_@param sourcePositions_@param targetPositions;public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions) {_		_		final int[] sourceOffsets = source.offsets__		final int[] sourceLengths = source.lengths__		final byte[] sourceBuffer = source.binaryData__		final Value[] sourceFields = source.writeFields___		boolean anyFieldIsBinary = false__		int maxFieldNum = 0__		_		for (int i = 0_ i < sourcePositions.length_ i++) {_		_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			maxFieldNum = Math.max(targetFieldNum, maxFieldNum)___			if (sourceOffset == NULL_INDICATOR_OFFSET) {_				_				if (targetFieldNum < numFields) {_					internallySetField(targetFieldNum, null)__				}_			} else if (sourceOffset != MODIFIED_INDICATOR_OFFSET) {_				anyFieldIsBinary = true__			}_		}_		_		if (numFields < maxFieldNum + 1) {_			setNumFields(maxFieldNum + 1)__		}_		_		final int[] targetLengths = this.lengths__		final int[] targetOffsets = this.offsets__		_		_		if (anyFieldIsBinary) {_			_			for (int i = 0_ i < sourcePositions.length_ i++) {_				final int sourceFieldNum = sourcePositions[i]__				final int sourceOffset = sourceOffsets[sourceFieldNum]__				_				if (sourceOffset != MODIFIED_INDICATOR_OFFSET && sourceOffset != NULL_INDICATOR_OFFSET) {_					final int targetFieldNum = targetPositions[i]__					targetLengths[targetFieldNum] = sourceLengths[sourceFieldNum]__					internallySetField(targetFieldNum, RESERVE_SPACE)__				}_			}_			_			updateBinaryRepresenation()__		}_			_		final byte[] targetBuffer = this.binaryData___		for (int i = 0_ i < sourcePositions.length_ i++) {_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			if (sourceOffset == MODIFIED_INDICATOR_OFFSET) {_				internallySetField(targetFieldNum, sourceFields[sourceFieldNum])__			} else if (sourceOffset != NULL_INDICATOR_OFFSET) {_				_				final int targetOffset = targetOffsets[targetFieldNum]__				final int length = targetLengths[targetFieldNum]__				System.arraycopy(sourceBuffer, sourceOffset, targetBuffer, targetOffset, length)__			}_		}_	};bin,copies,fields,from,a,source,record,to,this,record,the,following,caveats,apply,if,the,source,field,is,in,a,modified,state,no,binary,representation,will,exist,yet,in,that,case,this,method,is,equivalent,to,set,field,source,get,field,class,in,particular,if,set,value,is,called,on,the,source,field,value,instance,that,change,will,propagate,to,this,record,if,the,source,field,has,already,been,serialized,then,the,binary,representation,will,be,copied,further,modifications,to,the,source,field,will,not,be,observable,via,this,record,but,attempting,to,read,the,field,from,this,record,will,cause,it,to,be,deserialized,finally,bin,copying,a,source,field,requires,calling,update,binary,representation,on,this,instance,in,order,to,reserve,space,in,the,binary,data,array,if,none,of,the,source,fields,are,actually,bin,copied,then,update,binary,representation,won,t,be,called,param,source,param,source,positions,param,target,positions;public,void,copy,from,final,record,source,final,int,source,positions,final,int,target,positions,final,int,source,offsets,source,offsets,final,int,source,lengths,source,lengths,final,byte,source,buffer,source,binary,data,final,value,source,fields,source,write,fields,boolean,any,field,is,binary,false,int,max,field,num,0,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,max,field,num,math,max,target,field,num,max,field,num,if,source,offset,if,target,field,num,num,fields,internally,set,field,target,field,num,null,else,if,source,offset,any,field,is,binary,true,if,num,fields,max,field,num,1,set,num,fields,max,field,num,1,final,int,target,lengths,this,lengths,final,int,target,offsets,this,offsets,if,any,field,is,binary,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,if,source,offset,source,offset,final,int,target,field,num,target,positions,i,target,lengths,target,field,num,source,lengths,source,field,num,internally,set,field,target,field,num,update,binary,represenation,final,byte,target,buffer,this,binary,data,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,if,source,offset,internally,set,field,target,field,num,source,fields,source,field,num,else,if,source,offset,final,int,target,offset,target,offsets,target,field,num,final,int,length,target,lengths,target,field,num,system,arraycopy,source,buffer,source,offset,target,buffer,target,offset,length
Record -> public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions);1405090423;Bin-copies fields from a source record to this record. The following caveats apply:__If the source field is in a modified state, no binary representation will exist yet._In that case, this method is equivalent to setField(..., source.getField(..., <class>))._In particular, if setValue is called on the source field Value instance, that change_will propagate to this record.__If the source field has already been serialized, then the binary representation_will be copied. Further modifications to the source field will not be observable_via this record, but attempting to read the field from this record will cause it_to be deserialized.__Finally, bin-copying a source field requires calling updateBinaryRepresentation_on this instance in order to reserve space in the binaryData array. If none_of the source fields are actually bin-copied, then updateBinaryRepresentation_won't be called.__@param source_@param sourcePositions_@param targetPositions;public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions) {_		_		final int[] sourceOffsets = source.offsets__		final int[] sourceLengths = source.lengths__		final byte[] sourceBuffer = source.binaryData__		final Value[] sourceFields = source.writeFields___		boolean anyFieldIsBinary = false__		int maxFieldNum = 0__		_		for (int i = 0_ i < sourcePositions.length_ i++) {_		_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			maxFieldNum = Math.max(targetFieldNum, maxFieldNum)___			if (sourceOffset == NULL_INDICATOR_OFFSET) {_				_				if (targetFieldNum < numFields) {_					internallySetField(targetFieldNum, null)__				}_			} else if (sourceOffset != MODIFIED_INDICATOR_OFFSET) {_				anyFieldIsBinary = true__			}_		}_		_		if (numFields < maxFieldNum + 1) {_			setNumFields(maxFieldNum + 1)__		}_		_		final int[] targetLengths = this.lengths__		final int[] targetOffsets = this.offsets__		_		_		if (anyFieldIsBinary) {_			_			for (int i = 0_ i < sourcePositions.length_ i++) {_				final int sourceFieldNum = sourcePositions[i]__				final int sourceOffset = sourceOffsets[sourceFieldNum]__				_				if (sourceOffset != MODIFIED_INDICATOR_OFFSET && sourceOffset != NULL_INDICATOR_OFFSET) {_					final int targetFieldNum = targetPositions[i]__					targetLengths[targetFieldNum] = sourceLengths[sourceFieldNum]__					internallySetField(targetFieldNum, RESERVE_SPACE)__				}_			}_			_			updateBinaryRepresenation()__		}_			_		final byte[] targetBuffer = this.binaryData___		for (int i = 0_ i < sourcePositions.length_ i++) {_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			if (sourceOffset == MODIFIED_INDICATOR_OFFSET) {_				internallySetField(targetFieldNum, sourceFields[sourceFieldNum])__			} else if (sourceOffset != NULL_INDICATOR_OFFSET) {_				_				final int targetOffset = targetOffsets[targetFieldNum]__				final int length = targetLengths[targetFieldNum]__				System.arraycopy(sourceBuffer, sourceOffset, targetBuffer, targetOffset, length)__			}_		}_	};bin,copies,fields,from,a,source,record,to,this,record,the,following,caveats,apply,if,the,source,field,is,in,a,modified,state,no,binary,representation,will,exist,yet,in,that,case,this,method,is,equivalent,to,set,field,source,get,field,class,in,particular,if,set,value,is,called,on,the,source,field,value,instance,that,change,will,propagate,to,this,record,if,the,source,field,has,already,been,serialized,then,the,binary,representation,will,be,copied,further,modifications,to,the,source,field,will,not,be,observable,via,this,record,but,attempting,to,read,the,field,from,this,record,will,cause,it,to,be,deserialized,finally,bin,copying,a,source,field,requires,calling,update,binary,representation,on,this,instance,in,order,to,reserve,space,in,the,binary,data,array,if,none,of,the,source,fields,are,actually,bin,copied,then,update,binary,representation,won,t,be,called,param,source,param,source,positions,param,target,positions;public,void,copy,from,final,record,source,final,int,source,positions,final,int,target,positions,final,int,source,offsets,source,offsets,final,int,source,lengths,source,lengths,final,byte,source,buffer,source,binary,data,final,value,source,fields,source,write,fields,boolean,any,field,is,binary,false,int,max,field,num,0,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,max,field,num,math,max,target,field,num,max,field,num,if,source,offset,if,target,field,num,num,fields,internally,set,field,target,field,num,null,else,if,source,offset,any,field,is,binary,true,if,num,fields,max,field,num,1,set,num,fields,max,field,num,1,final,int,target,lengths,this,lengths,final,int,target,offsets,this,offsets,if,any,field,is,binary,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,if,source,offset,source,offset,final,int,target,field,num,target,positions,i,target,lengths,target,field,num,source,lengths,source,field,num,internally,set,field,target,field,num,update,binary,represenation,final,byte,target,buffer,this,binary,data,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,if,source,offset,internally,set,field,target,field,num,source,fields,source,field,num,else,if,source,offset,final,int,target,offset,target,offsets,target,field,num,final,int,length,target,lengths,target,field,num,system,arraycopy,source,buffer,source,offset,target,buffer,target,offset,length
Record -> public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions);1411473593;Bin-copies fields from a source record to this record. The following caveats apply:__If the source field is in a modified state, no binary representation will exist yet._In that case, this method is equivalent to setField(..., source.getField(..., <class>))._In particular, if setValue is called on the source field Value instance, that change_will propagate to this record.__If the source field has already been serialized, then the binary representation_will be copied. Further modifications to the source field will not be observable_via this record, but attempting to read the field from this record will cause it_to be deserialized.__Finally, bin-copying a source field requires calling updateBinaryRepresentation_on this instance in order to reserve space in the binaryData array. If none_of the source fields are actually bin-copied, then updateBinaryRepresentation_won't be called.__@param source_@param sourcePositions_@param targetPositions;public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions) {_		_		final int[] sourceOffsets = source.offsets__		final int[] sourceLengths = source.lengths__		final byte[] sourceBuffer = source.binaryData__		final Value[] sourceFields = source.writeFields___		boolean anyFieldIsBinary = false__		int maxFieldNum = 0__		_		for (int i = 0_ i < sourcePositions.length_ i++) {_		_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			maxFieldNum = Math.max(targetFieldNum, maxFieldNum)___			if (sourceOffset == NULL_INDICATOR_OFFSET) {_				_				if (targetFieldNum < numFields) {_					internallySetField(targetFieldNum, null)__				}_			} else if (sourceOffset != MODIFIED_INDICATOR_OFFSET) {_				anyFieldIsBinary = true__			}_		}_		_		if (numFields < maxFieldNum + 1) {_			setNumFields(maxFieldNum + 1)__		}_		_		final int[] targetLengths = this.lengths__		final int[] targetOffsets = this.offsets__		_		_		if (anyFieldIsBinary) {_			_			for (int i = 0_ i < sourcePositions.length_ i++) {_				final int sourceFieldNum = sourcePositions[i]__				final int sourceOffset = sourceOffsets[sourceFieldNum]__				_				if (sourceOffset != MODIFIED_INDICATOR_OFFSET && sourceOffset != NULL_INDICATOR_OFFSET) {_					final int targetFieldNum = targetPositions[i]__					targetLengths[targetFieldNum] = sourceLengths[sourceFieldNum]__					internallySetField(targetFieldNum, RESERVE_SPACE)__				}_			}_			_			updateBinaryRepresenation()__		}_			_		final byte[] targetBuffer = this.binaryData___		for (int i = 0_ i < sourcePositions.length_ i++) {_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			if (sourceOffset == MODIFIED_INDICATOR_OFFSET) {_				internallySetField(targetFieldNum, sourceFields[sourceFieldNum])__			} else if (sourceOffset != NULL_INDICATOR_OFFSET) {_				_				final int targetOffset = targetOffsets[targetFieldNum]__				final int length = targetLengths[targetFieldNum]__				System.arraycopy(sourceBuffer, sourceOffset, targetBuffer, targetOffset, length)__			}_		}_	};bin,copies,fields,from,a,source,record,to,this,record,the,following,caveats,apply,if,the,source,field,is,in,a,modified,state,no,binary,representation,will,exist,yet,in,that,case,this,method,is,equivalent,to,set,field,source,get,field,class,in,particular,if,set,value,is,called,on,the,source,field,value,instance,that,change,will,propagate,to,this,record,if,the,source,field,has,already,been,serialized,then,the,binary,representation,will,be,copied,further,modifications,to,the,source,field,will,not,be,observable,via,this,record,but,attempting,to,read,the,field,from,this,record,will,cause,it,to,be,deserialized,finally,bin,copying,a,source,field,requires,calling,update,binary,representation,on,this,instance,in,order,to,reserve,space,in,the,binary,data,array,if,none,of,the,source,fields,are,actually,bin,copied,then,update,binary,representation,won,t,be,called,param,source,param,source,positions,param,target,positions;public,void,copy,from,final,record,source,final,int,source,positions,final,int,target,positions,final,int,source,offsets,source,offsets,final,int,source,lengths,source,lengths,final,byte,source,buffer,source,binary,data,final,value,source,fields,source,write,fields,boolean,any,field,is,binary,false,int,max,field,num,0,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,max,field,num,math,max,target,field,num,max,field,num,if,source,offset,if,target,field,num,num,fields,internally,set,field,target,field,num,null,else,if,source,offset,any,field,is,binary,true,if,num,fields,max,field,num,1,set,num,fields,max,field,num,1,final,int,target,lengths,this,lengths,final,int,target,offsets,this,offsets,if,any,field,is,binary,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,if,source,offset,source,offset,final,int,target,field,num,target,positions,i,target,lengths,target,field,num,source,lengths,source,field,num,internally,set,field,target,field,num,update,binary,represenation,final,byte,target,buffer,this,binary,data,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,if,source,offset,internally,set,field,target,field,num,source,fields,source,field,num,else,if,source,offset,final,int,target,offset,target,offsets,target,field,num,final,int,length,target,lengths,target,field,num,system,arraycopy,source,buffer,source,offset,target,buffer,target,offset,length
Record -> public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions);1414786554;Bin-copies fields from a source record to this record. The following caveats apply:__If the source field is in a modified state, no binary representation will exist yet._In that case, this method is equivalent to setField(..., source.getField(..., <class>))._In particular, if setValue is called on the source field Value instance, that change_will propagate to this record.__If the source field has already been serialized, then the binary representation_will be copied. Further modifications to the source field will not be observable_via this record, but attempting to read the field from this record will cause it_to be deserialized.__Finally, bin-copying a source field requires calling updateBinaryRepresentation_on this instance in order to reserve space in the binaryData array. If none_of the source fields are actually bin-copied, then updateBinaryRepresentation_won't be called.__@param source_@param sourcePositions_@param targetPositions;public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions) {_		_		final int[] sourceOffsets = source.offsets__		final int[] sourceLengths = source.lengths__		final byte[] sourceBuffer = source.binaryData__		final Value[] sourceFields = source.writeFields___		boolean anyFieldIsBinary = false__		int maxFieldNum = 0__		_		for (int i = 0_ i < sourcePositions.length_ i++) {_		_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			maxFieldNum = Math.max(targetFieldNum, maxFieldNum)___			if (sourceOffset == NULL_INDICATOR_OFFSET) {_				_				if (targetFieldNum < numFields) {_					internallySetField(targetFieldNum, null)__				}_			} else if (sourceOffset != MODIFIED_INDICATOR_OFFSET) {_				anyFieldIsBinary = true__			}_		}_		_		if (numFields < maxFieldNum + 1) {_			setNumFields(maxFieldNum + 1)__		}_		_		final int[] targetLengths = this.lengths__		final int[] targetOffsets = this.offsets__		_		_		if (anyFieldIsBinary) {_			_			for (int i = 0_ i < sourcePositions.length_ i++) {_				final int sourceFieldNum = sourcePositions[i]__				final int sourceOffset = sourceOffsets[sourceFieldNum]__				_				if (sourceOffset != MODIFIED_INDICATOR_OFFSET && sourceOffset != NULL_INDICATOR_OFFSET) {_					final int targetFieldNum = targetPositions[i]__					targetLengths[targetFieldNum] = sourceLengths[sourceFieldNum]__					internallySetField(targetFieldNum, RESERVE_SPACE)__				}_			}_			_			updateBinaryRepresenation()__		}_			_		final byte[] targetBuffer = this.binaryData___		for (int i = 0_ i < sourcePositions.length_ i++) {_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			if (sourceOffset == MODIFIED_INDICATOR_OFFSET) {_				internallySetField(targetFieldNum, sourceFields[sourceFieldNum])__			} else if (sourceOffset != NULL_INDICATOR_OFFSET) {_				_				final int targetOffset = targetOffsets[targetFieldNum]__				final int length = targetLengths[targetFieldNum]__				System.arraycopy(sourceBuffer, sourceOffset, targetBuffer, targetOffset, length)__			}_		}_	};bin,copies,fields,from,a,source,record,to,this,record,the,following,caveats,apply,if,the,source,field,is,in,a,modified,state,no,binary,representation,will,exist,yet,in,that,case,this,method,is,equivalent,to,set,field,source,get,field,class,in,particular,if,set,value,is,called,on,the,source,field,value,instance,that,change,will,propagate,to,this,record,if,the,source,field,has,already,been,serialized,then,the,binary,representation,will,be,copied,further,modifications,to,the,source,field,will,not,be,observable,via,this,record,but,attempting,to,read,the,field,from,this,record,will,cause,it,to,be,deserialized,finally,bin,copying,a,source,field,requires,calling,update,binary,representation,on,this,instance,in,order,to,reserve,space,in,the,binary,data,array,if,none,of,the,source,fields,are,actually,bin,copied,then,update,binary,representation,won,t,be,called,param,source,param,source,positions,param,target,positions;public,void,copy,from,final,record,source,final,int,source,positions,final,int,target,positions,final,int,source,offsets,source,offsets,final,int,source,lengths,source,lengths,final,byte,source,buffer,source,binary,data,final,value,source,fields,source,write,fields,boolean,any,field,is,binary,false,int,max,field,num,0,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,max,field,num,math,max,target,field,num,max,field,num,if,source,offset,if,target,field,num,num,fields,internally,set,field,target,field,num,null,else,if,source,offset,any,field,is,binary,true,if,num,fields,max,field,num,1,set,num,fields,max,field,num,1,final,int,target,lengths,this,lengths,final,int,target,offsets,this,offsets,if,any,field,is,binary,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,if,source,offset,source,offset,final,int,target,field,num,target,positions,i,target,lengths,target,field,num,source,lengths,source,field,num,internally,set,field,target,field,num,update,binary,represenation,final,byte,target,buffer,this,binary,data,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,if,source,offset,internally,set,field,target,field,num,source,fields,source,field,num,else,if,source,offset,final,int,target,offset,target,offsets,target,field,num,final,int,length,target,lengths,target,field,num,system,arraycopy,source,buffer,source,offset,target,buffer,target,offset,length
Record -> public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions);1423847366;Bin-copies fields from a source record to this record. The following caveats apply:__If the source field is in a modified state, no binary representation will exist yet._In that case, this method is equivalent to setField(..., source.getField(..., <class>))._In particular, if setValue is called on the source field Value instance, that change_will propagate to this record.__If the source field has already been serialized, then the binary representation_will be copied. Further modifications to the source field will not be observable_via this record, but attempting to read the field from this record will cause it_to be deserialized.__Finally, bin-copying a source field requires calling updateBinaryRepresentation_on this instance in order to reserve space in the binaryData array. If none_of the source fields are actually bin-copied, then updateBinaryRepresentation_won't be called.__@param source_@param sourcePositions_@param targetPositions;public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions) {_		_		final int[] sourceOffsets = source.offsets__		final int[] sourceLengths = source.lengths__		final byte[] sourceBuffer = source.binaryData__		final Value[] sourceFields = source.writeFields___		boolean anyFieldIsBinary = false__		int maxFieldNum = 0__		_		for (int i = 0_ i < sourcePositions.length_ i++) {_		_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			maxFieldNum = Math.max(targetFieldNum, maxFieldNum)___			if (sourceOffset == NULL_INDICATOR_OFFSET) {_				_				if (targetFieldNum < numFields) {_					internallySetField(targetFieldNum, null)__				}_			} else if (sourceOffset != MODIFIED_INDICATOR_OFFSET) {_				anyFieldIsBinary = true__			}_		}_		_		if (numFields < maxFieldNum + 1) {_			setNumFields(maxFieldNum + 1)__		}_		_		final int[] targetLengths = this.lengths__		final int[] targetOffsets = this.offsets__		_		_		if (anyFieldIsBinary) {_			_			for (int i = 0_ i < sourcePositions.length_ i++) {_				final int sourceFieldNum = sourcePositions[i]__				final int sourceOffset = sourceOffsets[sourceFieldNum]__				_				if (sourceOffset != MODIFIED_INDICATOR_OFFSET && sourceOffset != NULL_INDICATOR_OFFSET) {_					final int targetFieldNum = targetPositions[i]__					targetLengths[targetFieldNum] = sourceLengths[sourceFieldNum]__					internallySetField(targetFieldNum, RESERVE_SPACE)__				}_			}_			_			updateBinaryRepresenation()__		}_			_		final byte[] targetBuffer = this.binaryData___		for (int i = 0_ i < sourcePositions.length_ i++) {_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			if (sourceOffset == MODIFIED_INDICATOR_OFFSET) {_				internallySetField(targetFieldNum, sourceFields[sourceFieldNum])__			} else if (sourceOffset != NULL_INDICATOR_OFFSET) {_				_				final int targetOffset = targetOffsets[targetFieldNum]__				final int length = targetLengths[targetFieldNum]__				System.arraycopy(sourceBuffer, sourceOffset, targetBuffer, targetOffset, length)__			}_		}_	};bin,copies,fields,from,a,source,record,to,this,record,the,following,caveats,apply,if,the,source,field,is,in,a,modified,state,no,binary,representation,will,exist,yet,in,that,case,this,method,is,equivalent,to,set,field,source,get,field,class,in,particular,if,set,value,is,called,on,the,source,field,value,instance,that,change,will,propagate,to,this,record,if,the,source,field,has,already,been,serialized,then,the,binary,representation,will,be,copied,further,modifications,to,the,source,field,will,not,be,observable,via,this,record,but,attempting,to,read,the,field,from,this,record,will,cause,it,to,be,deserialized,finally,bin,copying,a,source,field,requires,calling,update,binary,representation,on,this,instance,in,order,to,reserve,space,in,the,binary,data,array,if,none,of,the,source,fields,are,actually,bin,copied,then,update,binary,representation,won,t,be,called,param,source,param,source,positions,param,target,positions;public,void,copy,from,final,record,source,final,int,source,positions,final,int,target,positions,final,int,source,offsets,source,offsets,final,int,source,lengths,source,lengths,final,byte,source,buffer,source,binary,data,final,value,source,fields,source,write,fields,boolean,any,field,is,binary,false,int,max,field,num,0,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,max,field,num,math,max,target,field,num,max,field,num,if,source,offset,if,target,field,num,num,fields,internally,set,field,target,field,num,null,else,if,source,offset,any,field,is,binary,true,if,num,fields,max,field,num,1,set,num,fields,max,field,num,1,final,int,target,lengths,this,lengths,final,int,target,offsets,this,offsets,if,any,field,is,binary,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,if,source,offset,source,offset,final,int,target,field,num,target,positions,i,target,lengths,target,field,num,source,lengths,source,field,num,internally,set,field,target,field,num,update,binary,represenation,final,byte,target,buffer,this,binary,data,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,if,source,offset,internally,set,field,target,field,num,source,fields,source,field,num,else,if,source,offset,final,int,target,offset,target,offsets,target,field,num,final,int,length,target,lengths,target,field,num,system,arraycopy,source,buffer,source,offset,target,buffer,target,offset,length
Record -> public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions);1443521887;Bin-copies fields from a source record to this record. The following caveats apply:__If the source field is in a modified state, no binary representation will exist yet._In that case, this method is equivalent to setField(..., source.getField(..., <class>))._In particular, if setValue is called on the source field Value instance, that change_will propagate to this record.__If the source field has already been serialized, then the binary representation_will be copied. Further modifications to the source field will not be observable_via this record, but attempting to read the field from this record will cause it_to be deserialized.__Finally, bin-copying a source field requires calling updateBinaryRepresentation_on this instance in order to reserve space in the binaryData array. If none_of the source fields are actually bin-copied, then updateBinaryRepresentation_won't be called.__@param source_@param sourcePositions_@param targetPositions;public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions) {_		_		final int[] sourceOffsets = source.offsets__		final int[] sourceLengths = source.lengths__		final byte[] sourceBuffer = source.binaryData__		final Value[] sourceFields = source.writeFields___		boolean anyFieldIsBinary = false__		int maxFieldNum = 0__		_		for (int i = 0_ i < sourcePositions.length_ i++) {_		_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			maxFieldNum = Math.max(targetFieldNum, maxFieldNum)___			if (sourceOffset == NULL_INDICATOR_OFFSET) {_				_				if (targetFieldNum < numFields) {_					internallySetField(targetFieldNum, null)__				}_			} else if (sourceOffset != MODIFIED_INDICATOR_OFFSET) {_				anyFieldIsBinary = true__			}_		}_		_		if (numFields < maxFieldNum + 1) {_			setNumFields(maxFieldNum + 1)__		}_		_		final int[] targetLengths = this.lengths__		final int[] targetOffsets = this.offsets__		_		_		if (anyFieldIsBinary) {_			_			for (int i = 0_ i < sourcePositions.length_ i++) {_				final int sourceFieldNum = sourcePositions[i]__				final int sourceOffset = sourceOffsets[sourceFieldNum]__				_				if (sourceOffset != MODIFIED_INDICATOR_OFFSET && sourceOffset != NULL_INDICATOR_OFFSET) {_					final int targetFieldNum = targetPositions[i]__					targetLengths[targetFieldNum] = sourceLengths[sourceFieldNum]__					internallySetField(targetFieldNum, RESERVE_SPACE)__				}_			}_			_			updateBinaryRepresenation()__		}_			_		final byte[] targetBuffer = this.binaryData___		for (int i = 0_ i < sourcePositions.length_ i++) {_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			if (sourceOffset == MODIFIED_INDICATOR_OFFSET) {_				internallySetField(targetFieldNum, sourceFields[sourceFieldNum])__			} else if (sourceOffset != NULL_INDICATOR_OFFSET) {_				_				final int targetOffset = targetOffsets[targetFieldNum]__				final int length = targetLengths[targetFieldNum]__				System.arraycopy(sourceBuffer, sourceOffset, targetBuffer, targetOffset, length)__			}_		}_	};bin,copies,fields,from,a,source,record,to,this,record,the,following,caveats,apply,if,the,source,field,is,in,a,modified,state,no,binary,representation,will,exist,yet,in,that,case,this,method,is,equivalent,to,set,field,source,get,field,class,in,particular,if,set,value,is,called,on,the,source,field,value,instance,that,change,will,propagate,to,this,record,if,the,source,field,has,already,been,serialized,then,the,binary,representation,will,be,copied,further,modifications,to,the,source,field,will,not,be,observable,via,this,record,but,attempting,to,read,the,field,from,this,record,will,cause,it,to,be,deserialized,finally,bin,copying,a,source,field,requires,calling,update,binary,representation,on,this,instance,in,order,to,reserve,space,in,the,binary,data,array,if,none,of,the,source,fields,are,actually,bin,copied,then,update,binary,representation,won,t,be,called,param,source,param,source,positions,param,target,positions;public,void,copy,from,final,record,source,final,int,source,positions,final,int,target,positions,final,int,source,offsets,source,offsets,final,int,source,lengths,source,lengths,final,byte,source,buffer,source,binary,data,final,value,source,fields,source,write,fields,boolean,any,field,is,binary,false,int,max,field,num,0,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,max,field,num,math,max,target,field,num,max,field,num,if,source,offset,if,target,field,num,num,fields,internally,set,field,target,field,num,null,else,if,source,offset,any,field,is,binary,true,if,num,fields,max,field,num,1,set,num,fields,max,field,num,1,final,int,target,lengths,this,lengths,final,int,target,offsets,this,offsets,if,any,field,is,binary,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,if,source,offset,source,offset,final,int,target,field,num,target,positions,i,target,lengths,target,field,num,source,lengths,source,field,num,internally,set,field,target,field,num,update,binary,represenation,final,byte,target,buffer,this,binary,data,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,if,source,offset,internally,set,field,target,field,num,source,fields,source,field,num,else,if,source,offset,final,int,target,offset,target,offsets,target,field,num,final,int,length,target,lengths,target,field,num,system,arraycopy,source,buffer,source,offset,target,buffer,target,offset,length
Record -> public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions);1446112342;Bin-copies fields from a source record to this record. The following caveats apply:__If the source field is in a modified state, no binary representation will exist yet._In that case, this method is equivalent to {@code setField(..., source.getField(..., <class>))}._In particular, if setValue is called on the source field Value instance, that change_will propagate to this record.__If the source field has already been serialized, then the binary representation_will be copied. Further modifications to the source field will not be observable_via this record, but attempting to read the field from this record will cause it_to be deserialized.__Finally, bin-copying a source field requires calling updateBinaryRepresentation_on this instance in order to reserve space in the binaryData array. If none_of the source fields are actually bin-copied, then updateBinaryRepresentation_won't be called.__@param source_@param sourcePositions_@param targetPositions;public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions) {_		_		final int[] sourceOffsets = source.offsets__		final int[] sourceLengths = source.lengths__		final byte[] sourceBuffer = source.binaryData__		final Value[] sourceFields = source.writeFields___		boolean anyFieldIsBinary = false__		int maxFieldNum = 0__		_		for (int i = 0_ i < sourcePositions.length_ i++) {_		_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			maxFieldNum = Math.max(targetFieldNum, maxFieldNum)___			if (sourceOffset == NULL_INDICATOR_OFFSET) {_				_				if (targetFieldNum < numFields) {_					internallySetField(targetFieldNum, null)__				}_			} else if (sourceOffset != MODIFIED_INDICATOR_OFFSET) {_				anyFieldIsBinary = true__			}_		}_		_		if (numFields < maxFieldNum + 1) {_			setNumFields(maxFieldNum + 1)__		}_		_		final int[] targetLengths = this.lengths__		final int[] targetOffsets = this.offsets__		_		_		if (anyFieldIsBinary) {_			_			for (int i = 0_ i < sourcePositions.length_ i++) {_				final int sourceFieldNum = sourcePositions[i]__				final int sourceOffset = sourceOffsets[sourceFieldNum]__				_				if (sourceOffset != MODIFIED_INDICATOR_OFFSET && sourceOffset != NULL_INDICATOR_OFFSET) {_					final int targetFieldNum = targetPositions[i]__					targetLengths[targetFieldNum] = sourceLengths[sourceFieldNum]__					internallySetField(targetFieldNum, RESERVE_SPACE)__				}_			}_			_			updateBinaryRepresenation()__		}_			_		final byte[] targetBuffer = this.binaryData___		for (int i = 0_ i < sourcePositions.length_ i++) {_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			if (sourceOffset == MODIFIED_INDICATOR_OFFSET) {_				internallySetField(targetFieldNum, sourceFields[sourceFieldNum])__			} else if (sourceOffset != NULL_INDICATOR_OFFSET) {_				_				final int targetOffset = targetOffsets[targetFieldNum]__				final int length = targetLengths[targetFieldNum]__				System.arraycopy(sourceBuffer, sourceOffset, targetBuffer, targetOffset, length)__			}_		}_	};bin,copies,fields,from,a,source,record,to,this,record,the,following,caveats,apply,if,the,source,field,is,in,a,modified,state,no,binary,representation,will,exist,yet,in,that,case,this,method,is,equivalent,to,code,set,field,source,get,field,class,in,particular,if,set,value,is,called,on,the,source,field,value,instance,that,change,will,propagate,to,this,record,if,the,source,field,has,already,been,serialized,then,the,binary,representation,will,be,copied,further,modifications,to,the,source,field,will,not,be,observable,via,this,record,but,attempting,to,read,the,field,from,this,record,will,cause,it,to,be,deserialized,finally,bin,copying,a,source,field,requires,calling,update,binary,representation,on,this,instance,in,order,to,reserve,space,in,the,binary,data,array,if,none,of,the,source,fields,are,actually,bin,copied,then,update,binary,representation,won,t,be,called,param,source,param,source,positions,param,target,positions;public,void,copy,from,final,record,source,final,int,source,positions,final,int,target,positions,final,int,source,offsets,source,offsets,final,int,source,lengths,source,lengths,final,byte,source,buffer,source,binary,data,final,value,source,fields,source,write,fields,boolean,any,field,is,binary,false,int,max,field,num,0,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,max,field,num,math,max,target,field,num,max,field,num,if,source,offset,if,target,field,num,num,fields,internally,set,field,target,field,num,null,else,if,source,offset,any,field,is,binary,true,if,num,fields,max,field,num,1,set,num,fields,max,field,num,1,final,int,target,lengths,this,lengths,final,int,target,offsets,this,offsets,if,any,field,is,binary,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,if,source,offset,source,offset,final,int,target,field,num,target,positions,i,target,lengths,target,field,num,source,lengths,source,field,num,internally,set,field,target,field,num,update,binary,represenation,final,byte,target,buffer,this,binary,data,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,if,source,offset,internally,set,field,target,field,num,source,fields,source,field,num,else,if,source,offset,final,int,target,offset,target,offsets,target,field,num,final,int,length,target,lengths,target,field,num,system,arraycopy,source,buffer,source,offset,target,buffer,target,offset,length
Record -> public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions);1448491524;Bin-copies fields from a source record to this record. The following caveats apply:__If the source field is in a modified state, no binary representation will exist yet._In that case, this method is equivalent to {@code setField(..., source.getField(..., <class>))}._In particular, if setValue is called on the source field Value instance, that change_will propagate to this record.__If the source field has already been serialized, then the binary representation_will be copied. Further modifications to the source field will not be observable_via this record, but attempting to read the field from this record will cause it_to be deserialized.__Finally, bin-copying a source field requires calling updateBinaryRepresentation_on this instance in order to reserve space in the binaryData array. If none_of the source fields are actually bin-copied, then updateBinaryRepresentation_won't be called.__@param source_@param sourcePositions_@param targetPositions;public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions) {_		_		final int[] sourceOffsets = source.offsets__		final int[] sourceLengths = source.lengths__		final byte[] sourceBuffer = source.binaryData__		final Value[] sourceFields = source.writeFields___		boolean anyFieldIsBinary = false__		int maxFieldNum = 0__		_		for (int i = 0_ i < sourcePositions.length_ i++) {_		_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			maxFieldNum = Math.max(targetFieldNum, maxFieldNum)___			if (sourceOffset == NULL_INDICATOR_OFFSET) {_				_				if (targetFieldNum < numFields) {_					internallySetField(targetFieldNum, null)__				}_			} else if (sourceOffset != MODIFIED_INDICATOR_OFFSET) {_				anyFieldIsBinary = true__			}_		}_		_		if (numFields < maxFieldNum + 1) {_			setNumFields(maxFieldNum + 1)__		}_		_		final int[] targetLengths = this.lengths__		final int[] targetOffsets = this.offsets__		_		_		if (anyFieldIsBinary) {_			_			for (int i = 0_ i < sourcePositions.length_ i++) {_				final int sourceFieldNum = sourcePositions[i]__				final int sourceOffset = sourceOffsets[sourceFieldNum]__				_				if (sourceOffset != MODIFIED_INDICATOR_OFFSET && sourceOffset != NULL_INDICATOR_OFFSET) {_					final int targetFieldNum = targetPositions[i]__					targetLengths[targetFieldNum] = sourceLengths[sourceFieldNum]__					internallySetField(targetFieldNum, RESERVE_SPACE)__				}_			}_			_			updateBinaryRepresenation()__		}_			_		final byte[] targetBuffer = this.binaryData___		for (int i = 0_ i < sourcePositions.length_ i++) {_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			if (sourceOffset == MODIFIED_INDICATOR_OFFSET) {_				internallySetField(targetFieldNum, sourceFields[sourceFieldNum])__			} else if (sourceOffset != NULL_INDICATOR_OFFSET) {_				_				final int targetOffset = targetOffsets[targetFieldNum]__				final int length = targetLengths[targetFieldNum]__				System.arraycopy(sourceBuffer, sourceOffset, targetBuffer, targetOffset, length)__			}_		}_	};bin,copies,fields,from,a,source,record,to,this,record,the,following,caveats,apply,if,the,source,field,is,in,a,modified,state,no,binary,representation,will,exist,yet,in,that,case,this,method,is,equivalent,to,code,set,field,source,get,field,class,in,particular,if,set,value,is,called,on,the,source,field,value,instance,that,change,will,propagate,to,this,record,if,the,source,field,has,already,been,serialized,then,the,binary,representation,will,be,copied,further,modifications,to,the,source,field,will,not,be,observable,via,this,record,but,attempting,to,read,the,field,from,this,record,will,cause,it,to,be,deserialized,finally,bin,copying,a,source,field,requires,calling,update,binary,representation,on,this,instance,in,order,to,reserve,space,in,the,binary,data,array,if,none,of,the,source,fields,are,actually,bin,copied,then,update,binary,representation,won,t,be,called,param,source,param,source,positions,param,target,positions;public,void,copy,from,final,record,source,final,int,source,positions,final,int,target,positions,final,int,source,offsets,source,offsets,final,int,source,lengths,source,lengths,final,byte,source,buffer,source,binary,data,final,value,source,fields,source,write,fields,boolean,any,field,is,binary,false,int,max,field,num,0,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,max,field,num,math,max,target,field,num,max,field,num,if,source,offset,if,target,field,num,num,fields,internally,set,field,target,field,num,null,else,if,source,offset,any,field,is,binary,true,if,num,fields,max,field,num,1,set,num,fields,max,field,num,1,final,int,target,lengths,this,lengths,final,int,target,offsets,this,offsets,if,any,field,is,binary,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,if,source,offset,source,offset,final,int,target,field,num,target,positions,i,target,lengths,target,field,num,source,lengths,source,field,num,internally,set,field,target,field,num,update,binary,represenation,final,byte,target,buffer,this,binary,data,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,if,source,offset,internally,set,field,target,field,num,source,fields,source,field,num,else,if,source,offset,final,int,target,offset,target,offsets,target,field,num,final,int,length,target,lengths,target,field,num,system,arraycopy,source,buffer,source,offset,target,buffer,target,offset,length
Record -> public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions);1452178883;Bin-copies fields from a source record to this record. The following caveats apply:__If the source field is in a modified state, no binary representation will exist yet._In that case, this method is equivalent to {@code setField(..., source.getField(..., <class>))}._In particular, if setValue is called on the source field Value instance, that change_will propagate to this record.__If the source field has already been serialized, then the binary representation_will be copied. Further modifications to the source field will not be observable_via this record, but attempting to read the field from this record will cause it_to be deserialized.__Finally, bin-copying a source field requires calling updateBinaryRepresentation_on this instance in order to reserve space in the binaryData array. If none_of the source fields are actually bin-copied, then updateBinaryRepresentation_won't be called.__@param source_@param sourcePositions_@param targetPositions;public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions) {_		_		final int[] sourceOffsets = source.offsets__		final int[] sourceLengths = source.lengths__		final byte[] sourceBuffer = source.binaryData__		final Value[] sourceFields = source.writeFields___		boolean anyFieldIsBinary = false__		int maxFieldNum = 0__		_		for (int i = 0_ i < sourcePositions.length_ i++) {_		_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			maxFieldNum = Math.max(targetFieldNum, maxFieldNum)___			if (sourceOffset == NULL_INDICATOR_OFFSET) {_				_				if (targetFieldNum < numFields) {_					internallySetField(targetFieldNum, null)__				}_			} else if (sourceOffset != MODIFIED_INDICATOR_OFFSET) {_				anyFieldIsBinary = true__			}_		}_		_		if (numFields < maxFieldNum + 1) {_			setNumFields(maxFieldNum + 1)__		}_		_		final int[] targetLengths = this.lengths__		final int[] targetOffsets = this.offsets__		_		_		if (anyFieldIsBinary) {_			_			for (int i = 0_ i < sourcePositions.length_ i++) {_				final int sourceFieldNum = sourcePositions[i]__				final int sourceOffset = sourceOffsets[sourceFieldNum]__				_				if (sourceOffset != MODIFIED_INDICATOR_OFFSET && sourceOffset != NULL_INDICATOR_OFFSET) {_					final int targetFieldNum = targetPositions[i]__					targetLengths[targetFieldNum] = sourceLengths[sourceFieldNum]__					internallySetField(targetFieldNum, RESERVE_SPACE)__				}_			}_			_			updateBinaryRepresenation()__		}_			_		final byte[] targetBuffer = this.binaryData___		for (int i = 0_ i < sourcePositions.length_ i++) {_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			if (sourceOffset == MODIFIED_INDICATOR_OFFSET) {_				internallySetField(targetFieldNum, sourceFields[sourceFieldNum])__			} else if (sourceOffset != NULL_INDICATOR_OFFSET) {_				_				final int targetOffset = targetOffsets[targetFieldNum]__				final int length = targetLengths[targetFieldNum]__				System.arraycopy(sourceBuffer, sourceOffset, targetBuffer, targetOffset, length)__			}_		}_	};bin,copies,fields,from,a,source,record,to,this,record,the,following,caveats,apply,if,the,source,field,is,in,a,modified,state,no,binary,representation,will,exist,yet,in,that,case,this,method,is,equivalent,to,code,set,field,source,get,field,class,in,particular,if,set,value,is,called,on,the,source,field,value,instance,that,change,will,propagate,to,this,record,if,the,source,field,has,already,been,serialized,then,the,binary,representation,will,be,copied,further,modifications,to,the,source,field,will,not,be,observable,via,this,record,but,attempting,to,read,the,field,from,this,record,will,cause,it,to,be,deserialized,finally,bin,copying,a,source,field,requires,calling,update,binary,representation,on,this,instance,in,order,to,reserve,space,in,the,binary,data,array,if,none,of,the,source,fields,are,actually,bin,copied,then,update,binary,representation,won,t,be,called,param,source,param,source,positions,param,target,positions;public,void,copy,from,final,record,source,final,int,source,positions,final,int,target,positions,final,int,source,offsets,source,offsets,final,int,source,lengths,source,lengths,final,byte,source,buffer,source,binary,data,final,value,source,fields,source,write,fields,boolean,any,field,is,binary,false,int,max,field,num,0,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,max,field,num,math,max,target,field,num,max,field,num,if,source,offset,if,target,field,num,num,fields,internally,set,field,target,field,num,null,else,if,source,offset,any,field,is,binary,true,if,num,fields,max,field,num,1,set,num,fields,max,field,num,1,final,int,target,lengths,this,lengths,final,int,target,offsets,this,offsets,if,any,field,is,binary,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,if,source,offset,source,offset,final,int,target,field,num,target,positions,i,target,lengths,target,field,num,source,lengths,source,field,num,internally,set,field,target,field,num,update,binary,represenation,final,byte,target,buffer,this,binary,data,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,if,source,offset,internally,set,field,target,field,num,source,fields,source,field,num,else,if,source,offset,final,int,target,offset,target,offsets,target,field,num,final,int,length,target,lengths,target,field,num,system,arraycopy,source,buffer,source,offset,target,buffer,target,offset,length
Record -> public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions);1489589988;Bin-copies fields from a source record to this record. The following caveats apply:__If the source field is in a modified state, no binary representation will exist yet._In that case, this method is equivalent to {@code setField(..., source.getField(..., <class>))}._In particular, if setValue is called on the source field Value instance, that change_will propagate to this record.__If the source field has already been serialized, then the binary representation_will be copied. Further modifications to the source field will not be observable_via this record, but attempting to read the field from this record will cause it_to be deserialized.__Finally, bin-copying a source field requires calling updateBinaryRepresentation_on this instance in order to reserve space in the binaryData array. If none_of the source fields are actually bin-copied, then updateBinaryRepresentation_won't be called.__@param source_@param sourcePositions_@param targetPositions;public void copyFrom(final Record source, final int[] sourcePositions, final int[] targetPositions) {_		_		final int[] sourceOffsets = source.offsets__		final int[] sourceLengths = source.lengths__		final byte[] sourceBuffer = source.binaryData__		final Value[] sourceFields = source.writeFields___		boolean anyFieldIsBinary = false__		int maxFieldNum = 0__		_		for (int i = 0_ i < sourcePositions.length_ i++) {_		_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			maxFieldNum = Math.max(targetFieldNum, maxFieldNum)___			if (sourceOffset == NULL_INDICATOR_OFFSET) {_				_				if (targetFieldNum < numFields) {_					internallySetField(targetFieldNum, null)__				}_			} else if (sourceOffset != MODIFIED_INDICATOR_OFFSET) {_				anyFieldIsBinary = true__			}_		}_		_		if (numFields < maxFieldNum + 1) {_			setNumFields(maxFieldNum + 1)__		}_		_		final int[] targetLengths = this.lengths__		final int[] targetOffsets = this.offsets__		_		_		if (anyFieldIsBinary) {_			_			for (int i = 0_ i < sourcePositions.length_ i++) {_				final int sourceFieldNum = sourcePositions[i]__				final int sourceOffset = sourceOffsets[sourceFieldNum]__				_				if (sourceOffset != MODIFIED_INDICATOR_OFFSET && sourceOffset != NULL_INDICATOR_OFFSET) {_					final int targetFieldNum = targetPositions[i]__					targetLengths[targetFieldNum] = sourceLengths[sourceFieldNum]__					internallySetField(targetFieldNum, RESERVE_SPACE)__				}_			}_			_			updateBinaryRepresenation()__		}_			_		final byte[] targetBuffer = this.binaryData___		for (int i = 0_ i < sourcePositions.length_ i++) {_			final int sourceFieldNum = sourcePositions[i]__			final int sourceOffset = sourceOffsets[sourceFieldNum]__			final int targetFieldNum = targetPositions[i]___			if (sourceOffset == MODIFIED_INDICATOR_OFFSET) {_				internallySetField(targetFieldNum, sourceFields[sourceFieldNum])__			} else if (sourceOffset != NULL_INDICATOR_OFFSET) {_				_				final int targetOffset = targetOffsets[targetFieldNum]__				final int length = targetLengths[targetFieldNum]__				System.arraycopy(sourceBuffer, sourceOffset, targetBuffer, targetOffset, length)__			}_		}_	};bin,copies,fields,from,a,source,record,to,this,record,the,following,caveats,apply,if,the,source,field,is,in,a,modified,state,no,binary,representation,will,exist,yet,in,that,case,this,method,is,equivalent,to,code,set,field,source,get,field,class,in,particular,if,set,value,is,called,on,the,source,field,value,instance,that,change,will,propagate,to,this,record,if,the,source,field,has,already,been,serialized,then,the,binary,representation,will,be,copied,further,modifications,to,the,source,field,will,not,be,observable,via,this,record,but,attempting,to,read,the,field,from,this,record,will,cause,it,to,be,deserialized,finally,bin,copying,a,source,field,requires,calling,update,binary,representation,on,this,instance,in,order,to,reserve,space,in,the,binary,data,array,if,none,of,the,source,fields,are,actually,bin,copied,then,update,binary,representation,won,t,be,called,param,source,param,source,positions,param,target,positions;public,void,copy,from,final,record,source,final,int,source,positions,final,int,target,positions,final,int,source,offsets,source,offsets,final,int,source,lengths,source,lengths,final,byte,source,buffer,source,binary,data,final,value,source,fields,source,write,fields,boolean,any,field,is,binary,false,int,max,field,num,0,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,max,field,num,math,max,target,field,num,max,field,num,if,source,offset,if,target,field,num,num,fields,internally,set,field,target,field,num,null,else,if,source,offset,any,field,is,binary,true,if,num,fields,max,field,num,1,set,num,fields,max,field,num,1,final,int,target,lengths,this,lengths,final,int,target,offsets,this,offsets,if,any,field,is,binary,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,if,source,offset,source,offset,final,int,target,field,num,target,positions,i,target,lengths,target,field,num,source,lengths,source,field,num,internally,set,field,target,field,num,update,binary,represenation,final,byte,target,buffer,this,binary,data,for,int,i,0,i,source,positions,length,i,final,int,source,field,num,source,positions,i,final,int,source,offset,source,offsets,source,field,num,final,int,target,field,num,target,positions,i,if,source,offset,internally,set,field,target,field,num,source,fields,source,field,num,else,if,source,offset,final,int,target,offset,target,offsets,target,field,num,final,int,length,target,lengths,target,field,num,system,arraycopy,source,buffer,source,offset,target,buffer,target,offset,length
Record -> public long serialize(DataOutputView target) throws IOException;1405024514;Writes this record to the given output view. This method is similar to {@link org.apache.flink.core.io.IOReadableWritable#write(org.apache.flink.core.memory.DataOutputView)}, but_it returns the number of bytes written.__@param target The view to write the record to._@return The number of bytes written.__@throws IOException Thrown, if an error occurred in the view during writing.;public long serialize(DataOutputView target) throws IOException {_		updateBinaryRepresenation()__		_		long bytesForLen = 1__		int len = this.binaryLen__		while (len >= MAX_BIT) {_			target.write(len | MAX_BIT)__			len >>= 7__			bytesForLen++__		}_		target.write(len)__		target.write(this.binaryData, 0, this.binaryLen)___		return bytesForLen + this.binaryLen__	};writes,this,record,to,the,given,output,view,this,method,is,similar,to,link,org,apache,flink,core,io,ioreadable,writable,write,org,apache,flink,core,memory,data,output,view,but,it,returns,the,number,of,bytes,written,param,target,the,view,to,write,the,record,to,return,the,number,of,bytes,written,throws,ioexception,thrown,if,an,error,occurred,in,the,view,during,writing;public,long,serialize,data,output,view,target,throws,ioexception,update,binary,represenation,long,bytes,for,len,1,int,len,this,binary,len,while,len,target,write,len,len,7,bytes,for,len,target,write,len,target,write,this,binary,data,0,this,binary,len,return,bytes,for,len,this,binary,len
Record -> public long serialize(DataOutputView target) throws IOException;1405090423;Writes this record to the given output view. This method is similar to {@link org.apache.flink.core.io.IOReadableWritable#write(org.apache.flink.core.memory.DataOutputView)}, but_it returns the number of bytes written.__@param target The view to write the record to._@return The number of bytes written.__@throws IOException Thrown, if an error occurred in the view during writing.;public long serialize(DataOutputView target) throws IOException {_		updateBinaryRepresenation()__		_		long bytesForLen = 1__		int len = this.binaryLen__		while (len >= MAX_BIT) {_			target.write(len | MAX_BIT)__			len >>= 7__			bytesForLen++__		}_		target.write(len)__		target.write(this.binaryData, 0, this.binaryLen)___		return bytesForLen + this.binaryLen__	};writes,this,record,to,the,given,output,view,this,method,is,similar,to,link,org,apache,flink,core,io,ioreadable,writable,write,org,apache,flink,core,memory,data,output,view,but,it,returns,the,number,of,bytes,written,param,target,the,view,to,write,the,record,to,return,the,number,of,bytes,written,throws,ioexception,thrown,if,an,error,occurred,in,the,view,during,writing;public,long,serialize,data,output,view,target,throws,ioexception,update,binary,represenation,long,bytes,for,len,1,int,len,this,binary,len,while,len,target,write,len,len,7,bytes,for,len,target,write,len,target,write,this,binary,data,0,this,binary,len,return,bytes,for,len,this,binary,len
Record -> public long serialize(DataOutputView target) throws IOException;1411473593;Writes this record to the given output view. This method is similar to {@link org.apache.flink.core.io.IOReadableWritable#write(org.apache.flink.core.memory.DataOutputView)}, but_it returns the number of bytes written.__@param target The view to write the record to._@return The number of bytes written.__@throws IOException Thrown, if an error occurred in the view during writing.;public long serialize(DataOutputView target) throws IOException {_		updateBinaryRepresenation()__		_		long bytesForLen = 1__		int len = this.binaryLen__		while (len >= MAX_BIT) {_			target.write(len | MAX_BIT)__			len >>= 7__			bytesForLen++__		}_		target.write(len)__		target.write(this.binaryData, 0, this.binaryLen)___		return bytesForLen + this.binaryLen__	};writes,this,record,to,the,given,output,view,this,method,is,similar,to,link,org,apache,flink,core,io,ioreadable,writable,write,org,apache,flink,core,memory,data,output,view,but,it,returns,the,number,of,bytes,written,param,target,the,view,to,write,the,record,to,return,the,number,of,bytes,written,throws,ioexception,thrown,if,an,error,occurred,in,the,view,during,writing;public,long,serialize,data,output,view,target,throws,ioexception,update,binary,represenation,long,bytes,for,len,1,int,len,this,binary,len,while,len,target,write,len,len,7,bytes,for,len,target,write,len,target,write,this,binary,data,0,this,binary,len,return,bytes,for,len,this,binary,len
Record -> public long serialize(DataOutputView target) throws IOException;1414786554;Writes this record to the given output view. This method is similar to {@link org.apache.flink.core.io.IOReadableWritable#write(org.apache.flink.core.memory.DataOutputView)}, but_it returns the number of bytes written.__@param target The view to write the record to._@return The number of bytes written.__@throws IOException Thrown, if an error occurred in the view during writing.;public long serialize(DataOutputView target) throws IOException {_		updateBinaryRepresenation()__		_		long bytesForLen = 1__		int len = this.binaryLen__		while (len >= MAX_BIT) {_			target.write(len | MAX_BIT)__			len >>= 7__			bytesForLen++__		}_		target.write(len)__		target.write(this.binaryData, 0, this.binaryLen)___		return bytesForLen + this.binaryLen__	};writes,this,record,to,the,given,output,view,this,method,is,similar,to,link,org,apache,flink,core,io,ioreadable,writable,write,org,apache,flink,core,memory,data,output,view,but,it,returns,the,number,of,bytes,written,param,target,the,view,to,write,the,record,to,return,the,number,of,bytes,written,throws,ioexception,thrown,if,an,error,occurred,in,the,view,during,writing;public,long,serialize,data,output,view,target,throws,ioexception,update,binary,represenation,long,bytes,for,len,1,int,len,this,binary,len,while,len,target,write,len,len,7,bytes,for,len,target,write,len,target,write,this,binary,data,0,this,binary,len,return,bytes,for,len,this,binary,len
Record -> public long serialize(DataOutputView target) throws IOException;1423847366;Writes this record to the given output view. This method is similar to {@link org.apache.flink.core.io.IOReadableWritable#write(org.apache.flink.core.memory.DataOutputView)}, but_it returns the number of bytes written.__@param target The view to write the record to._@return The number of bytes written.__@throws IOException Thrown, if an error occurred in the view during writing.;public long serialize(DataOutputView target) throws IOException {_		updateBinaryRepresenation()__		_		long bytesForLen = 1__		int len = this.binaryLen__		while (len >= MAX_BIT) {_			target.write(len | MAX_BIT)__			len >>= 7__			bytesForLen++__		}_		target.write(len)__		target.write(this.binaryData, 0, this.binaryLen)___		return bytesForLen + this.binaryLen__	};writes,this,record,to,the,given,output,view,this,method,is,similar,to,link,org,apache,flink,core,io,ioreadable,writable,write,org,apache,flink,core,memory,data,output,view,but,it,returns,the,number,of,bytes,written,param,target,the,view,to,write,the,record,to,return,the,number,of,bytes,written,throws,ioexception,thrown,if,an,error,occurred,in,the,view,during,writing;public,long,serialize,data,output,view,target,throws,ioexception,update,binary,represenation,long,bytes,for,len,1,int,len,this,binary,len,while,len,target,write,len,len,7,bytes,for,len,target,write,len,target,write,this,binary,data,0,this,binary,len,return,bytes,for,len,this,binary,len
Record -> public long serialize(DataOutputView target) throws IOException;1443521887;Writes this record to the given output view. This method is similar to {@link org.apache.flink.core.io.IOReadableWritable#write(org.apache.flink.core.memory.DataOutputView)}, but_it returns the number of bytes written.__@param target The view to write the record to._@return The number of bytes written.__@throws IOException Thrown, if an error occurred in the view during writing.;public long serialize(DataOutputView target) throws IOException {_		updateBinaryRepresenation()__		_		long bytesForLen = 1__		int len = this.binaryLen__		while (len >= MAX_BIT) {_			target.write(len | MAX_BIT)__			len >>= 7__			bytesForLen++__		}_		target.write(len)__		target.write(this.binaryData, 0, this.binaryLen)___		return bytesForLen + this.binaryLen__	};writes,this,record,to,the,given,output,view,this,method,is,similar,to,link,org,apache,flink,core,io,ioreadable,writable,write,org,apache,flink,core,memory,data,output,view,but,it,returns,the,number,of,bytes,written,param,target,the,view,to,write,the,record,to,return,the,number,of,bytes,written,throws,ioexception,thrown,if,an,error,occurred,in,the,view,during,writing;public,long,serialize,data,output,view,target,throws,ioexception,update,binary,represenation,long,bytes,for,len,1,int,len,this,binary,len,while,len,target,write,len,len,7,bytes,for,len,target,write,len,target,write,this,binary,data,0,this,binary,len,return,bytes,for,len,this,binary,len
Record -> public long serialize(DataOutputView target) throws IOException;1446112342;Writes this record to the given output view. This method is similar to {@link org.apache.flink.core.io.IOReadableWritable#write(org.apache.flink.core.memory.DataOutputView)}, but_it returns the number of bytes written.__@param target The view to write the record to._@return The number of bytes written.__@throws IOException Thrown, if an error occurred in the view during writing.;public long serialize(DataOutputView target) throws IOException {_		updateBinaryRepresenation()__		_		long bytesForLen = 1__		int len = this.binaryLen__		while (len >= MAX_BIT) {_			target.write(len | MAX_BIT)__			len >>= 7__			bytesForLen++__		}_		target.write(len)__		target.write(this.binaryData, 0, this.binaryLen)___		return bytesForLen + this.binaryLen__	};writes,this,record,to,the,given,output,view,this,method,is,similar,to,link,org,apache,flink,core,io,ioreadable,writable,write,org,apache,flink,core,memory,data,output,view,but,it,returns,the,number,of,bytes,written,param,target,the,view,to,write,the,record,to,return,the,number,of,bytes,written,throws,ioexception,thrown,if,an,error,occurred,in,the,view,during,writing;public,long,serialize,data,output,view,target,throws,ioexception,update,binary,represenation,long,bytes,for,len,1,int,len,this,binary,len,while,len,target,write,len,len,7,bytes,for,len,target,write,len,target,write,this,binary,data,0,this,binary,len,return,bytes,for,len,this,binary,len
Record -> public long serialize(DataOutputView target) throws IOException;1448491524;Writes this record to the given output view. This method is similar to {@link org.apache.flink.core.io.IOReadableWritable#write(org.apache.flink.core.memory.DataOutputView)}, but_it returns the number of bytes written.__@param target The view to write the record to._@return The number of bytes written.__@throws IOException Thrown, if an error occurred in the view during writing.;public long serialize(DataOutputView target) throws IOException {_		updateBinaryRepresenation()__		_		long bytesForLen = 1__		int len = this.binaryLen__		while (len >= MAX_BIT) {_			target.write(len | MAX_BIT)__			len >>= 7__			bytesForLen++__		}_		target.write(len)__		target.write(this.binaryData, 0, this.binaryLen)___		return bytesForLen + this.binaryLen__	};writes,this,record,to,the,given,output,view,this,method,is,similar,to,link,org,apache,flink,core,io,ioreadable,writable,write,org,apache,flink,core,memory,data,output,view,but,it,returns,the,number,of,bytes,written,param,target,the,view,to,write,the,record,to,return,the,number,of,bytes,written,throws,ioexception,thrown,if,an,error,occurred,in,the,view,during,writing;public,long,serialize,data,output,view,target,throws,ioexception,update,binary,represenation,long,bytes,for,len,1,int,len,this,binary,len,while,len,target,write,len,len,7,bytes,for,len,target,write,len,target,write,this,binary,data,0,this,binary,len,return,bytes,for,len,this,binary,len
Record -> public long serialize(DataOutputView target) throws IOException;1452178883;Writes this record to the given output view. This method is similar to {@link org.apache.flink.core.io.IOReadableWritable#write(org.apache.flink.core.memory.DataOutputView)}, but_it returns the number of bytes written.__@param target The view to write the record to._@return The number of bytes written.__@throws IOException Thrown, if an error occurred in the view during writing.;public long serialize(DataOutputView target) throws IOException {_		updateBinaryRepresenation()__		_		long bytesForLen = 1__		int len = this.binaryLen__		while (len >= MAX_BIT) {_			target.write(len | MAX_BIT)__			len >>= 7__			bytesForLen++__		}_		target.write(len)__		target.write(this.binaryData, 0, this.binaryLen)___		return bytesForLen + this.binaryLen__	};writes,this,record,to,the,given,output,view,this,method,is,similar,to,link,org,apache,flink,core,io,ioreadable,writable,write,org,apache,flink,core,memory,data,output,view,but,it,returns,the,number,of,bytes,written,param,target,the,view,to,write,the,record,to,return,the,number,of,bytes,written,throws,ioexception,thrown,if,an,error,occurred,in,the,view,during,writing;public,long,serialize,data,output,view,target,throws,ioexception,update,binary,represenation,long,bytes,for,len,1,int,len,this,binary,len,while,len,target,write,len,len,7,bytes,for,len,target,write,len,target,write,this,binary,data,0,this,binary,len,return,bytes,for,len,this,binary,len
Record -> public long serialize(DataOutputView target) throws IOException;1489589988;Writes this record to the given output view. This method is similar to {@link org.apache.flink.core.io.IOReadableWritable#write(org.apache.flink.core.memory.DataOutputView)}, but_it returns the number of bytes written.__@param target The view to write the record to._@return The number of bytes written.__@throws IOException Thrown, if an error occurred in the view during writing.;public long serialize(DataOutputView target) throws IOException {_		updateBinaryRepresenation()__		_		long bytesForLen = 1__		int len = this.binaryLen__		while (len >= MAX_BIT) {_			target.write(len | MAX_BIT)__			len >>= 7__			bytesForLen++__		}_		target.write(len)__		target.write(this.binaryData, 0, this.binaryLen)___		return bytesForLen + this.binaryLen__	};writes,this,record,to,the,given,output,view,this,method,is,similar,to,link,org,apache,flink,core,io,ioreadable,writable,write,org,apache,flink,core,memory,data,output,view,but,it,returns,the,number,of,bytes,written,param,target,the,view,to,write,the,record,to,return,the,number,of,bytes,written,throws,ioexception,thrown,if,an,error,occurred,in,the,view,during,writing;public,long,serialize,data,output,view,target,throws,ioexception,update,binary,represenation,long,bytes,for,len,1,int,len,this,binary,len,while,len,target,write,len,len,7,bytes,for,len,target,write,len,target,write,this,binary,data,0,this,binary,len,return,bytes,for,len,this,binary,len
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(final int fieldNum, final Class<T> type);1405024514;Gets the field at the given position from the record. This method checks internally, if this instance of_the record has previously returned a value for this field. If so, it reuses the object, if not, it_creates one from the supplied class.__@param <T> The type of the field.__@param fieldNum The logical position of the field._@param type The type of the field as a class. This class is used to instantiate a value object, if none had_previously been instantiated._@return The field at the given position, or null, if the field was null._@throws IndexOutOfBoundsException Thrown, if the field number is negative or larger or equal to the number of_fields in this record.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(final int fieldNum, final Class<T> type) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1) + "]")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}		_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		_		_		final Value oldField = this.readFields[fieldNum]_ _		final T field__		if (oldField != null && oldField.getClass() == type) {_			field = (T) oldField__		}_		else {_			field = InstantiationUtil.instantiate(type, Value.class)__			this.readFields[fieldNum] = field__		}_		_		_		deserialize(field, offset, limit, fieldNum)__		return field__	};gets,the,field,at,the,given,position,from,the,record,this,method,checks,internally,if,this,instance,of,the,record,has,previously,returned,a,value,for,this,field,if,so,it,reuses,the,object,if,not,it,creates,one,from,the,supplied,class,param,t,the,type,of,the,field,param,field,num,the,logical,position,of,the,field,param,type,the,type,of,the,field,as,a,class,this,class,is,used,to,instantiate,a,value,object,if,none,had,previously,been,instantiated,return,the,field,at,the,given,position,or,null,if,the,field,was,null,throws,index,out,of,bounds,exception,thrown,if,the,field,number,is,negative,or,larger,or,equal,to,the,number,of,fields,in,this,record;suppress,warnings,unchecked,public,t,extends,value,t,get,field,final,int,field,num,final,class,t,type,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,field,num,for,range,0,this,num,fields,1,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,final,value,old,field,this,read,fields,field,num,final,t,field,if,old,field,null,old,field,get,class,type,field,t,old,field,else,field,instantiation,util,instantiate,type,value,class,this,read,fields,field,num,field,deserialize,field,offset,limit,field,num,return,field
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(final int fieldNum, final Class<T> type);1405090423;Gets the field at the given position from the record. This method checks internally, if this instance of_the record has previously returned a value for this field. If so, it reuses the object, if not, it_creates one from the supplied class.__@param <T> The type of the field.__@param fieldNum The logical position of the field._@param type The type of the field as a class. This class is used to instantiate a value object, if none had_previously been instantiated._@return The field at the given position, or null, if the field was null._@throws IndexOutOfBoundsException Thrown, if the field number is negative or larger or equal to the number of_fields in this record.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(final int fieldNum, final Class<T> type) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1) + "]")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}		_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		_		_		final Value oldField = this.readFields[fieldNum]_ _		final T field__		if (oldField != null && oldField.getClass() == type) {_			field = (T) oldField__		}_		else {_			field = InstantiationUtil.instantiate(type, Value.class)__			this.readFields[fieldNum] = field__		}_		_		_		deserialize(field, offset, limit, fieldNum)__		return field__	};gets,the,field,at,the,given,position,from,the,record,this,method,checks,internally,if,this,instance,of,the,record,has,previously,returned,a,value,for,this,field,if,so,it,reuses,the,object,if,not,it,creates,one,from,the,supplied,class,param,t,the,type,of,the,field,param,field,num,the,logical,position,of,the,field,param,type,the,type,of,the,field,as,a,class,this,class,is,used,to,instantiate,a,value,object,if,none,had,previously,been,instantiated,return,the,field,at,the,given,position,or,null,if,the,field,was,null,throws,index,out,of,bounds,exception,thrown,if,the,field,number,is,negative,or,larger,or,equal,to,the,number,of,fields,in,this,record;suppress,warnings,unchecked,public,t,extends,value,t,get,field,final,int,field,num,final,class,t,type,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,field,num,for,range,0,this,num,fields,1,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,final,value,old,field,this,read,fields,field,num,final,t,field,if,old,field,null,old,field,get,class,type,field,t,old,field,else,field,instantiation,util,instantiate,type,value,class,this,read,fields,field,num,field,deserialize,field,offset,limit,field,num,return,field
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(final int fieldNum, final Class<T> type);1411473593;Gets the field at the given position from the record. This method checks internally, if this instance of_the record has previously returned a value for this field. If so, it reuses the object, if not, it_creates one from the supplied class.__@param <T> The type of the field.__@param fieldNum The logical position of the field._@param type The type of the field as a class. This class is used to instantiate a value object, if none had_previously been instantiated._@return The field at the given position, or null, if the field was null._@throws IndexOutOfBoundsException Thrown, if the field number is negative or larger or equal to the number of_fields in this record.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(final int fieldNum, final Class<T> type) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1) + "]")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}		_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		_		_		final Value oldField = this.readFields[fieldNum]_ _		final T field__		if (oldField != null && oldField.getClass() == type) {_			field = (T) oldField__		}_		else {_			field = InstantiationUtil.instantiate(type, Value.class)__			this.readFields[fieldNum] = field__		}_		_		_		deserialize(field, offset, limit, fieldNum)__		return field__	};gets,the,field,at,the,given,position,from,the,record,this,method,checks,internally,if,this,instance,of,the,record,has,previously,returned,a,value,for,this,field,if,so,it,reuses,the,object,if,not,it,creates,one,from,the,supplied,class,param,t,the,type,of,the,field,param,field,num,the,logical,position,of,the,field,param,type,the,type,of,the,field,as,a,class,this,class,is,used,to,instantiate,a,value,object,if,none,had,previously,been,instantiated,return,the,field,at,the,given,position,or,null,if,the,field,was,null,throws,index,out,of,bounds,exception,thrown,if,the,field,number,is,negative,or,larger,or,equal,to,the,number,of,fields,in,this,record;suppress,warnings,unchecked,public,t,extends,value,t,get,field,final,int,field,num,final,class,t,type,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,field,num,for,range,0,this,num,fields,1,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,final,value,old,field,this,read,fields,field,num,final,t,field,if,old,field,null,old,field,get,class,type,field,t,old,field,else,field,instantiation,util,instantiate,type,value,class,this,read,fields,field,num,field,deserialize,field,offset,limit,field,num,return,field
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(final int fieldNum, final Class<T> type);1414786554;Gets the field at the given position from the record. This method checks internally, if this instance of_the record has previously returned a value for this field. If so, it reuses the object, if not, it_creates one from the supplied class.__@param <T> The type of the field.__@param fieldNum The logical position of the field._@param type The type of the field as a class. This class is used to instantiate a value object, if none had_previously been instantiated._@return The field at the given position, or null, if the field was null._@throws IndexOutOfBoundsException Thrown, if the field number is negative or larger or equal to the number of_fields in this record.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(final int fieldNum, final Class<T> type) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1) + "]")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}		_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		_		_		final Value oldField = this.readFields[fieldNum]_ _		final T field__		if (oldField != null && oldField.getClass() == type) {_			field = (T) oldField__		}_		else {_			field = InstantiationUtil.instantiate(type, Value.class)__			this.readFields[fieldNum] = field__		}_		_		_		deserialize(field, offset, limit, fieldNum)__		return field__	};gets,the,field,at,the,given,position,from,the,record,this,method,checks,internally,if,this,instance,of,the,record,has,previously,returned,a,value,for,this,field,if,so,it,reuses,the,object,if,not,it,creates,one,from,the,supplied,class,param,t,the,type,of,the,field,param,field,num,the,logical,position,of,the,field,param,type,the,type,of,the,field,as,a,class,this,class,is,used,to,instantiate,a,value,object,if,none,had,previously,been,instantiated,return,the,field,at,the,given,position,or,null,if,the,field,was,null,throws,index,out,of,bounds,exception,thrown,if,the,field,number,is,negative,or,larger,or,equal,to,the,number,of,fields,in,this,record;suppress,warnings,unchecked,public,t,extends,value,t,get,field,final,int,field,num,final,class,t,type,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,field,num,for,range,0,this,num,fields,1,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,final,value,old,field,this,read,fields,field,num,final,t,field,if,old,field,null,old,field,get,class,type,field,t,old,field,else,field,instantiation,util,instantiate,type,value,class,this,read,fields,field,num,field,deserialize,field,offset,limit,field,num,return,field
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(final int fieldNum, final Class<T> type);1423847366;Gets the field at the given position from the record. This method checks internally, if this instance of_the record has previously returned a value for this field. If so, it reuses the object, if not, it_creates one from the supplied class.__@param <T> The type of the field.__@param fieldNum The logical position of the field._@param type The type of the field as a class. This class is used to instantiate a value object, if none had_previously been instantiated._@return The field at the given position, or null, if the field was null._@throws IndexOutOfBoundsException Thrown, if the field number is negative or larger or equal to the number of_fields in this record.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(final int fieldNum, final Class<T> type) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1) + "]")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}		_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		_		_		final Value oldField = this.readFields[fieldNum]_ _		final T field__		if (oldField != null && oldField.getClass() == type) {_			field = (T) oldField__		}_		else {_			field = InstantiationUtil.instantiate(type, Value.class)__			this.readFields[fieldNum] = field__		}_		_		_		deserialize(field, offset, limit, fieldNum)__		return field__	};gets,the,field,at,the,given,position,from,the,record,this,method,checks,internally,if,this,instance,of,the,record,has,previously,returned,a,value,for,this,field,if,so,it,reuses,the,object,if,not,it,creates,one,from,the,supplied,class,param,t,the,type,of,the,field,param,field,num,the,logical,position,of,the,field,param,type,the,type,of,the,field,as,a,class,this,class,is,used,to,instantiate,a,value,object,if,none,had,previously,been,instantiated,return,the,field,at,the,given,position,or,null,if,the,field,was,null,throws,index,out,of,bounds,exception,thrown,if,the,field,number,is,negative,or,larger,or,equal,to,the,number,of,fields,in,this,record;suppress,warnings,unchecked,public,t,extends,value,t,get,field,final,int,field,num,final,class,t,type,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,field,num,for,range,0,this,num,fields,1,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,final,value,old,field,this,read,fields,field,num,final,t,field,if,old,field,null,old,field,get,class,type,field,t,old,field,else,field,instantiation,util,instantiate,type,value,class,this,read,fields,field,num,field,deserialize,field,offset,limit,field,num,return,field
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(final int fieldNum, final Class<T> type);1443521887;Gets the field at the given position from the record. This method checks internally, if this instance of_the record has previously returned a value for this field. If so, it reuses the object, if not, it_creates one from the supplied class.__@param <T> The type of the field.__@param fieldNum The logical position of the field._@param type The type of the field as a class. This class is used to instantiate a value object, if none had_previously been instantiated._@return The field at the given position, or null, if the field was null._@throws IndexOutOfBoundsException Thrown, if the field number is negative or larger or equal to the number of_fields in this record.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(final int fieldNum, final Class<T> type) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1) + "]")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}		_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		_		_		final Value oldField = this.readFields[fieldNum]_ _		final T field__		if (oldField != null && oldField.getClass() == type) {_			field = (T) oldField__		}_		else {_			field = InstantiationUtil.instantiate(type, Value.class)__			this.readFields[fieldNum] = field__		}_		_		_		deserialize(field, offset, limit, fieldNum)__		return field__	};gets,the,field,at,the,given,position,from,the,record,this,method,checks,internally,if,this,instance,of,the,record,has,previously,returned,a,value,for,this,field,if,so,it,reuses,the,object,if,not,it,creates,one,from,the,supplied,class,param,t,the,type,of,the,field,param,field,num,the,logical,position,of,the,field,param,type,the,type,of,the,field,as,a,class,this,class,is,used,to,instantiate,a,value,object,if,none,had,previously,been,instantiated,return,the,field,at,the,given,position,or,null,if,the,field,was,null,throws,index,out,of,bounds,exception,thrown,if,the,field,number,is,negative,or,larger,or,equal,to,the,number,of,fields,in,this,record;suppress,warnings,unchecked,public,t,extends,value,t,get,field,final,int,field,num,final,class,t,type,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,field,num,for,range,0,this,num,fields,1,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,final,value,old,field,this,read,fields,field,num,final,t,field,if,old,field,null,old,field,get,class,type,field,t,old,field,else,field,instantiation,util,instantiate,type,value,class,this,read,fields,field,num,field,deserialize,field,offset,limit,field,num,return,field
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(final int fieldNum, final Class<T> type);1446112342;Gets the field at the given position from the record. This method checks internally, if this instance of_the record has previously returned a value for this field. If so, it reuses the object, if not, it_creates one from the supplied class.__@param <T> The type of the field.__@param fieldNum The logical position of the field._@param type The type of the field as a class. This class is used to instantiate a value object, if none had_previously been instantiated._@return The field at the given position, or null, if the field was null._@throws IndexOutOfBoundsException Thrown, if the field number is negative or larger or equal to the number of_fields in this record.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(final int fieldNum, final Class<T> type) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1) + "]")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}		_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		_		_		final Value oldField = this.readFields[fieldNum]_ _		final T field__		if (oldField != null && oldField.getClass() == type) {_			field = (T) oldField__		}_		else {_			field = InstantiationUtil.instantiate(type, Value.class)__			this.readFields[fieldNum] = field__		}_		_		_		deserialize(field, offset, limit, fieldNum)__		return field__	};gets,the,field,at,the,given,position,from,the,record,this,method,checks,internally,if,this,instance,of,the,record,has,previously,returned,a,value,for,this,field,if,so,it,reuses,the,object,if,not,it,creates,one,from,the,supplied,class,param,t,the,type,of,the,field,param,field,num,the,logical,position,of,the,field,param,type,the,type,of,the,field,as,a,class,this,class,is,used,to,instantiate,a,value,object,if,none,had,previously,been,instantiated,return,the,field,at,the,given,position,or,null,if,the,field,was,null,throws,index,out,of,bounds,exception,thrown,if,the,field,number,is,negative,or,larger,or,equal,to,the,number,of,fields,in,this,record;suppress,warnings,unchecked,public,t,extends,value,t,get,field,final,int,field,num,final,class,t,type,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,field,num,for,range,0,this,num,fields,1,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,final,value,old,field,this,read,fields,field,num,final,t,field,if,old,field,null,old,field,get,class,type,field,t,old,field,else,field,instantiation,util,instantiate,type,value,class,this,read,fields,field,num,field,deserialize,field,offset,limit,field,num,return,field
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(final int fieldNum, final Class<T> type);1448491524;Gets the field at the given position from the record. This method checks internally, if this instance of_the record has previously returned a value for this field. If so, it reuses the object, if not, it_creates one from the supplied class.__@param <T> The type of the field.__@param fieldNum The logical position of the field._@param type The type of the field as a class. This class is used to instantiate a value object, if none had_previously been instantiated._@return The field at the given position, or null, if the field was null._@throws IndexOutOfBoundsException Thrown, if the field number is negative or larger or equal to the number of_fields in this record.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(final int fieldNum, final Class<T> type) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1) + "]")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}		_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		_		_		final Value oldField = this.readFields[fieldNum]_ _		final T field__		if (oldField != null && oldField.getClass() == type) {_			field = (T) oldField__		}_		else {_			field = InstantiationUtil.instantiate(type, Value.class)__			this.readFields[fieldNum] = field__		}_		_		_		deserialize(field, offset, limit, fieldNum)__		return field__	};gets,the,field,at,the,given,position,from,the,record,this,method,checks,internally,if,this,instance,of,the,record,has,previously,returned,a,value,for,this,field,if,so,it,reuses,the,object,if,not,it,creates,one,from,the,supplied,class,param,t,the,type,of,the,field,param,field,num,the,logical,position,of,the,field,param,type,the,type,of,the,field,as,a,class,this,class,is,used,to,instantiate,a,value,object,if,none,had,previously,been,instantiated,return,the,field,at,the,given,position,or,null,if,the,field,was,null,throws,index,out,of,bounds,exception,thrown,if,the,field,number,is,negative,or,larger,or,equal,to,the,number,of,fields,in,this,record;suppress,warnings,unchecked,public,t,extends,value,t,get,field,final,int,field,num,final,class,t,type,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,field,num,for,range,0,this,num,fields,1,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,final,value,old,field,this,read,fields,field,num,final,t,field,if,old,field,null,old,field,get,class,type,field,t,old,field,else,field,instantiation,util,instantiate,type,value,class,this,read,fields,field,num,field,deserialize,field,offset,limit,field,num,return,field
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(final int fieldNum, final Class<T> type);1452178883;Gets the field at the given position from the record. This method checks internally, if this instance of_the record has previously returned a value for this field. If so, it reuses the object, if not, it_creates one from the supplied class.__@param <T> The type of the field.__@param fieldNum The logical position of the field._@param type The type of the field as a class. This class is used to instantiate a value object, if none had_previously been instantiated._@return The field at the given position, or null, if the field was null._@throws IndexOutOfBoundsException Thrown, if the field number is negative or larger or equal to the number of_fields in this record.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(final int fieldNum, final Class<T> type) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1) + "]")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}		_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		_		_		final Value oldField = this.readFields[fieldNum]_ _		final T field__		if (oldField != null && oldField.getClass() == type) {_			field = (T) oldField__		}_		else {_			field = InstantiationUtil.instantiate(type, Value.class)__			this.readFields[fieldNum] = field__		}_		_		_		deserialize(field, offset, limit, fieldNum)__		return field__	};gets,the,field,at,the,given,position,from,the,record,this,method,checks,internally,if,this,instance,of,the,record,has,previously,returned,a,value,for,this,field,if,so,it,reuses,the,object,if,not,it,creates,one,from,the,supplied,class,param,t,the,type,of,the,field,param,field,num,the,logical,position,of,the,field,param,type,the,type,of,the,field,as,a,class,this,class,is,used,to,instantiate,a,value,object,if,none,had,previously,been,instantiated,return,the,field,at,the,given,position,or,null,if,the,field,was,null,throws,index,out,of,bounds,exception,thrown,if,the,field,number,is,negative,or,larger,or,equal,to,the,number,of,fields,in,this,record;suppress,warnings,unchecked,public,t,extends,value,t,get,field,final,int,field,num,final,class,t,type,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,field,num,for,range,0,this,num,fields,1,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,final,value,old,field,this,read,fields,field,num,final,t,field,if,old,field,null,old,field,get,class,type,field,t,old,field,else,field,instantiation,util,instantiate,type,value,class,this,read,fields,field,num,field,deserialize,field,offset,limit,field,num,return,field
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(final int fieldNum, final Class<T> type);1489589988;Gets the field at the given position from the record. This method checks internally, if this instance of_the record has previously returned a value for this field. If so, it reuses the object, if not, it_creates one from the supplied class.__@param <T> The type of the field.__@param fieldNum The logical position of the field._@param type The type of the field as a class. This class is used to instantiate a value object, if none had_previously been instantiated._@return The field at the given position, or null, if the field was null._@throws IndexOutOfBoundsException Thrown, if the field number is negative or larger or equal to the number of_fields in this record.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(final int fieldNum, final Class<T> type) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException(fieldNum + " for range [0.." + (this.numFields - 1) + "]")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}		_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		_		_		final Value oldField = this.readFields[fieldNum]_ _		final T field__		if (oldField != null && oldField.getClass() == type) {_			field = (T) oldField__		}_		else {_			field = InstantiationUtil.instantiate(type, Value.class)__			this.readFields[fieldNum] = field__		}_		_		_		deserialize(field, offset, limit, fieldNum)__		return field__	};gets,the,field,at,the,given,position,from,the,record,this,method,checks,internally,if,this,instance,of,the,record,has,previously,returned,a,value,for,this,field,if,so,it,reuses,the,object,if,not,it,creates,one,from,the,supplied,class,param,t,the,type,of,the,field,param,field,num,the,logical,position,of,the,field,param,type,the,type,of,the,field,as,a,class,this,class,is,used,to,instantiate,a,value,object,if,none,had,previously,been,instantiated,return,the,field,at,the,given,position,or,null,if,the,field,was,null,throws,index,out,of,bounds,exception,thrown,if,the,field,number,is,negative,or,larger,or,equal,to,the,number,of,fields,in,this,record;suppress,warnings,unchecked,public,t,extends,value,t,get,field,final,int,field,num,final,class,t,type,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,field,num,for,range,0,this,num,fields,1,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,final,value,old,field,this,read,fields,field,num,final,t,field,if,old,field,null,old,field,get,class,type,field,t,old,field,else,field,instantiation,util,instantiate,type,value,class,this,read,fields,field,num,field,deserialize,field,offset,limit,field,num,return,field
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(int fieldNum, T target);1405024514;Gets the field at the given position. The method tries to deserialize the fields into the given target value._If the fields has been changed since the last (de)serialization, or is null, them the target value is left_unchanged and the changed value (or null) is returned._<p>_In all cases, the returned value contains the correct data (or is correctly null).__@param fieldNum The position of the field._@param target The value to deserialize the field into.__@return The value with the contents of the requested field, or null, if the field is null.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(int fieldNum, T target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		if (target == null) {_			throw new NullPointerException("The target object may not be null")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return target__	};gets,the,field,at,the,given,position,the,method,tries,to,deserialize,the,fields,into,the,given,target,value,if,the,fields,has,been,changed,since,the,last,de,serialization,or,is,null,them,the,target,value,is,left,unchanged,and,the,changed,value,or,null,is,returned,p,in,all,cases,the,returned,value,contains,the,correct,data,or,is,correctly,null,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,the,value,with,the,contents,of,the,requested,field,or,null,if,the,field,is,null;suppress,warnings,unchecked,public,t,extends,value,t,get,field,int,field,num,t,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,if,target,null,throw,new,null,pointer,exception,the,target,object,may,not,be,null,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,target
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(int fieldNum, T target);1405090423;Gets the field at the given position. The method tries to deserialize the fields into the given target value._If the fields has been changed since the last (de)serialization, or is null, them the target value is left_unchanged and the changed value (or null) is returned._<p>_In all cases, the returned value contains the correct data (or is correctly null).__@param fieldNum The position of the field._@param target The value to deserialize the field into.__@return The value with the contents of the requested field, or null, if the field is null.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(int fieldNum, T target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		if (target == null) {_			throw new NullPointerException("The target object may not be null")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return target__	};gets,the,field,at,the,given,position,the,method,tries,to,deserialize,the,fields,into,the,given,target,value,if,the,fields,has,been,changed,since,the,last,de,serialization,or,is,null,them,the,target,value,is,left,unchanged,and,the,changed,value,or,null,is,returned,p,in,all,cases,the,returned,value,contains,the,correct,data,or,is,correctly,null,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,the,value,with,the,contents,of,the,requested,field,or,null,if,the,field,is,null;suppress,warnings,unchecked,public,t,extends,value,t,get,field,int,field,num,t,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,if,target,null,throw,new,null,pointer,exception,the,target,object,may,not,be,null,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,target
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(int fieldNum, T target);1411473593;Gets the field at the given position. The method tries to deserialize the fields into the given target value._If the fields has been changed since the last (de)serialization, or is null, them the target value is left_unchanged and the changed value (or null) is returned._<p>_In all cases, the returned value contains the correct data (or is correctly null).__@param fieldNum The position of the field._@param target The value to deserialize the field into.__@return The value with the contents of the requested field, or null, if the field is null.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(int fieldNum, T target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		if (target == null) {_			throw new NullPointerException("The target object may not be null")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return target__	};gets,the,field,at,the,given,position,the,method,tries,to,deserialize,the,fields,into,the,given,target,value,if,the,fields,has,been,changed,since,the,last,de,serialization,or,is,null,them,the,target,value,is,left,unchanged,and,the,changed,value,or,null,is,returned,p,in,all,cases,the,returned,value,contains,the,correct,data,or,is,correctly,null,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,the,value,with,the,contents,of,the,requested,field,or,null,if,the,field,is,null;suppress,warnings,unchecked,public,t,extends,value,t,get,field,int,field,num,t,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,if,target,null,throw,new,null,pointer,exception,the,target,object,may,not,be,null,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,target
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(int fieldNum, T target);1414786554;Gets the field at the given position. The method tries to deserialize the fields into the given target value._If the fields has been changed since the last (de)serialization, or is null, them the target value is left_unchanged and the changed value (or null) is returned._<p>_In all cases, the returned value contains the correct data (or is correctly null).__@param fieldNum The position of the field._@param target The value to deserialize the field into.__@return The value with the contents of the requested field, or null, if the field is null.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(int fieldNum, T target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		if (target == null) {_			throw new NullPointerException("The target object may not be null")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return target__	};gets,the,field,at,the,given,position,the,method,tries,to,deserialize,the,fields,into,the,given,target,value,if,the,fields,has,been,changed,since,the,last,de,serialization,or,is,null,them,the,target,value,is,left,unchanged,and,the,changed,value,or,null,is,returned,p,in,all,cases,the,returned,value,contains,the,correct,data,or,is,correctly,null,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,the,value,with,the,contents,of,the,requested,field,or,null,if,the,field,is,null;suppress,warnings,unchecked,public,t,extends,value,t,get,field,int,field,num,t,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,if,target,null,throw,new,null,pointer,exception,the,target,object,may,not,be,null,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,target
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(int fieldNum, T target);1423847366;Gets the field at the given position. The method tries to deserialize the fields into the given target value._If the fields has been changed since the last (de)serialization, or is null, them the target value is left_unchanged and the changed value (or null) is returned._<p>_In all cases, the returned value contains the correct data (or is correctly null).__@param fieldNum The position of the field._@param target The value to deserialize the field into.__@return The value with the contents of the requested field, or null, if the field is null.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(int fieldNum, T target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		if (target == null) {_			throw new NullPointerException("The target object may not be null")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return target__	};gets,the,field,at,the,given,position,the,method,tries,to,deserialize,the,fields,into,the,given,target,value,if,the,fields,has,been,changed,since,the,last,de,serialization,or,is,null,them,the,target,value,is,left,unchanged,and,the,changed,value,or,null,is,returned,p,in,all,cases,the,returned,value,contains,the,correct,data,or,is,correctly,null,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,the,value,with,the,contents,of,the,requested,field,or,null,if,the,field,is,null;suppress,warnings,unchecked,public,t,extends,value,t,get,field,int,field,num,t,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,if,target,null,throw,new,null,pointer,exception,the,target,object,may,not,be,null,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,target
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(int fieldNum, T target);1443521887;Gets the field at the given position. The method tries to deserialize the fields into the given target value._If the fields has been changed since the last (de)serialization, or is null, them the target value is left_unchanged and the changed value (or null) is returned._<p>_In all cases, the returned value contains the correct data (or is correctly null).__@param fieldNum The position of the field._@param target The value to deserialize the field into.__@return The value with the contents of the requested field, or null, if the field is null.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(int fieldNum, T target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		if (target == null) {_			throw new NullPointerException("The target object may not be null")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return target__	};gets,the,field,at,the,given,position,the,method,tries,to,deserialize,the,fields,into,the,given,target,value,if,the,fields,has,been,changed,since,the,last,de,serialization,or,is,null,them,the,target,value,is,left,unchanged,and,the,changed,value,or,null,is,returned,p,in,all,cases,the,returned,value,contains,the,correct,data,or,is,correctly,null,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,the,value,with,the,contents,of,the,requested,field,or,null,if,the,field,is,null;suppress,warnings,unchecked,public,t,extends,value,t,get,field,int,field,num,t,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,if,target,null,throw,new,null,pointer,exception,the,target,object,may,not,be,null,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,target
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(int fieldNum, T target);1446112342;Gets the field at the given position. The method tries to deserialize the fields into the given target value._If the fields has been changed since the last (de)serialization, or is null, them the target value is left_unchanged and the changed value (or null) is returned._<p>_In all cases, the returned value contains the correct data (or is correctly null).__@param fieldNum The position of the field._@param target The value to deserialize the field into.__@return The value with the contents of the requested field, or null, if the field is null.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(int fieldNum, T target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		if (target == null) {_			throw new NullPointerException("The target object may not be null")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return target__	};gets,the,field,at,the,given,position,the,method,tries,to,deserialize,the,fields,into,the,given,target,value,if,the,fields,has,been,changed,since,the,last,de,serialization,or,is,null,them,the,target,value,is,left,unchanged,and,the,changed,value,or,null,is,returned,p,in,all,cases,the,returned,value,contains,the,correct,data,or,is,correctly,null,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,the,value,with,the,contents,of,the,requested,field,or,null,if,the,field,is,null;suppress,warnings,unchecked,public,t,extends,value,t,get,field,int,field,num,t,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,if,target,null,throw,new,null,pointer,exception,the,target,object,may,not,be,null,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,target
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(int fieldNum, T target);1448491524;Gets the field at the given position. The method tries to deserialize the fields into the given target value._If the fields has been changed since the last (de)serialization, or is null, them the target value is left_unchanged and the changed value (or null) is returned._<p>_In all cases, the returned value contains the correct data (or is correctly null).__@param fieldNum The position of the field._@param target The value to deserialize the field into.__@return The value with the contents of the requested field, or null, if the field is null.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(int fieldNum, T target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		if (target == null) {_			throw new NullPointerException("The target object may not be null")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return target__	};gets,the,field,at,the,given,position,the,method,tries,to,deserialize,the,fields,into,the,given,target,value,if,the,fields,has,been,changed,since,the,last,de,serialization,or,is,null,them,the,target,value,is,left,unchanged,and,the,changed,value,or,null,is,returned,p,in,all,cases,the,returned,value,contains,the,correct,data,or,is,correctly,null,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,the,value,with,the,contents,of,the,requested,field,or,null,if,the,field,is,null;suppress,warnings,unchecked,public,t,extends,value,t,get,field,int,field,num,t,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,if,target,null,throw,new,null,pointer,exception,the,target,object,may,not,be,null,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,target
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(int fieldNum, T target);1452178883;Gets the field at the given position. The method tries to deserialize the fields into the given target value._If the fields has been changed since the last (de)serialization, or is null, them the target value is left_unchanged and the changed value (or null) is returned._<p>_In all cases, the returned value contains the correct data (or is correctly null).__@param fieldNum The position of the field._@param target The value to deserialize the field into.__@return The value with the contents of the requested field, or null, if the field is null.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(int fieldNum, T target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		if (target == null) {_			throw new NullPointerException("The target object may not be null")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return target__	};gets,the,field,at,the,given,position,the,method,tries,to,deserialize,the,fields,into,the,given,target,value,if,the,fields,has,been,changed,since,the,last,de,serialization,or,is,null,them,the,target,value,is,left,unchanged,and,the,changed,value,or,null,is,returned,p,in,all,cases,the,returned,value,contains,the,correct,data,or,is,correctly,null,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,the,value,with,the,contents,of,the,requested,field,or,null,if,the,field,is,null;suppress,warnings,unchecked,public,t,extends,value,t,get,field,int,field,num,t,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,if,target,null,throw,new,null,pointer,exception,the,target,object,may,not,be,null,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,target
Record -> @SuppressWarnings("unchecked") 	public <T extends Value> T getField(int fieldNum, T target);1489589988;Gets the field at the given position. The method tries to deserialize the fields into the given target value._If the fields has been changed since the last (de)serialization, or is null, them the target value is left_unchanged and the changed value (or null) is returned._<p>_In all cases, the returned value contains the correct data (or is correctly null).__@param fieldNum The position of the field._@param target The value to deserialize the field into.__@return The value with the contents of the requested field, or null, if the field is null.;@SuppressWarnings("unchecked")_	public <T extends Value> T getField(int fieldNum, T target) {_		_		if (fieldNum < 0 || fieldNum >= this.numFields) {_			throw new IndexOutOfBoundsException()__		}_		if (target == null) {_			throw new NullPointerException("The target object may not be null")__		}_		_		_		final int offset = this.offsets[fieldNum]__		if (offset == NULL_INDICATOR_OFFSET) {_			return null__		}_		else if (offset == MODIFIED_INDICATOR_OFFSET) {_			_			_			return (T) this.writeFields[fieldNum]__		}_		_		final int limit = offset + this.lengths[fieldNum]__		deserialize(target, offset, limit, fieldNum)__		return target__	};gets,the,field,at,the,given,position,the,method,tries,to,deserialize,the,fields,into,the,given,target,value,if,the,fields,has,been,changed,since,the,last,de,serialization,or,is,null,them,the,target,value,is,left,unchanged,and,the,changed,value,or,null,is,returned,p,in,all,cases,the,returned,value,contains,the,correct,data,or,is,correctly,null,param,field,num,the,position,of,the,field,param,target,the,value,to,deserialize,the,field,into,return,the,value,with,the,contents,of,the,requested,field,or,null,if,the,field,is,null;suppress,warnings,unchecked,public,t,extends,value,t,get,field,int,field,num,t,target,if,field,num,0,field,num,this,num,fields,throw,new,index,out,of,bounds,exception,if,target,null,throw,new,null,pointer,exception,the,target,object,may,not,be,null,final,int,offset,this,offsets,field,num,if,offset,return,null,else,if,offset,return,t,this,write,fields,field,num,final,int,limit,offset,this,lengths,field,num,deserialize,target,offset,limit,field,num,return,target
Record -> private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber);1414786554;Deserializes the given object from the binary string, starting at the given position._If the deserialization asks for more that <code>limit - offset</code> bytes, than_an exception is thrown.__@param <T> The generic type of the value to be deserialized._@param target The object to deserialize the data into._@param offset The offset in the binary string._@param limit The limit in the binary string.;private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber) {_		final InternalDeSerializer serializer = this.serializer__		serializer.memory = this.binaryData__		serializer.position = offset__		serializer.end = limit__		try {_			target.read(serializer)__		}_		catch (Exception e) {_			throw new DeserializationException("Error reading field " + fieldNumber + " as " + target.getClass().getName(), e)__		}_	};deserializes,the,given,object,from,the,binary,string,starting,at,the,given,position,if,the,deserialization,asks,for,more,that,code,limit,offset,code,bytes,than,an,exception,is,thrown,param,t,the,generic,type,of,the,value,to,be,deserialized,param,target,the,object,to,deserialize,the,data,into,param,offset,the,offset,in,the,binary,string,param,limit,the,limit,in,the,binary,string;private,t,extends,value,void,deserialize,t,target,int,offset,int,limit,int,field,number,final,internal,de,serializer,serializer,this,serializer,serializer,memory,this,binary,data,serializer,position,offset,serializer,end,limit,try,target,read,serializer,catch,exception,e,throw,new,deserialization,exception,error,reading,field,field,number,as,target,get,class,get,name,e
Record -> private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber);1423847366;Deserializes the given object from the binary string, starting at the given position._If the deserialization asks for more that <code>limit - offset</code> bytes, than_an exception is thrown.__@param <T> The generic type of the value to be deserialized._@param target The object to deserialize the data into._@param offset The offset in the binary string._@param limit The limit in the binary string.;private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber) {_		final InternalDeSerializer serializer = this.serializer__		serializer.memory = this.binaryData__		serializer.position = offset__		serializer.end = limit__		try {_			target.read(serializer)__		}_		catch (Exception e) {_			throw new DeserializationException("Error reading field " + fieldNumber + " as " + target.getClass().getName(), e)__		}_	};deserializes,the,given,object,from,the,binary,string,starting,at,the,given,position,if,the,deserialization,asks,for,more,that,code,limit,offset,code,bytes,than,an,exception,is,thrown,param,t,the,generic,type,of,the,value,to,be,deserialized,param,target,the,object,to,deserialize,the,data,into,param,offset,the,offset,in,the,binary,string,param,limit,the,limit,in,the,binary,string;private,t,extends,value,void,deserialize,t,target,int,offset,int,limit,int,field,number,final,internal,de,serializer,serializer,this,serializer,serializer,memory,this,binary,data,serializer,position,offset,serializer,end,limit,try,target,read,serializer,catch,exception,e,throw,new,deserialization,exception,error,reading,field,field,number,as,target,get,class,get,name,e
Record -> private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber);1443521887;Deserializes the given object from the binary string, starting at the given position._If the deserialization asks for more that <code>limit - offset</code> bytes, than_an exception is thrown.__@param <T> The generic type of the value to be deserialized._@param target The object to deserialize the data into._@param offset The offset in the binary string._@param limit The limit in the binary string.;private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber) {_		final InternalDeSerializer serializer = this.serializer__		serializer.memory = this.binaryData__		serializer.position = offset__		serializer.end = limit__		try {_			target.read(serializer)__		}_		catch (Exception e) {_			throw new DeserializationException("Error reading field " + fieldNumber + " as " + target.getClass().getName(), e)__		}_	};deserializes,the,given,object,from,the,binary,string,starting,at,the,given,position,if,the,deserialization,asks,for,more,that,code,limit,offset,code,bytes,than,an,exception,is,thrown,param,t,the,generic,type,of,the,value,to,be,deserialized,param,target,the,object,to,deserialize,the,data,into,param,offset,the,offset,in,the,binary,string,param,limit,the,limit,in,the,binary,string;private,t,extends,value,void,deserialize,t,target,int,offset,int,limit,int,field,number,final,internal,de,serializer,serializer,this,serializer,serializer,memory,this,binary,data,serializer,position,offset,serializer,end,limit,try,target,read,serializer,catch,exception,e,throw,new,deserialization,exception,error,reading,field,field,number,as,target,get,class,get,name,e
Record -> private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber);1446112342;Deserializes the given object from the binary string, starting at the given position._If the deserialization asks for more that <code>limit - offset</code> bytes, than_an exception is thrown.__@param <T> The generic type of the value to be deserialized._@param target The object to deserialize the data into._@param offset The offset in the binary string._@param limit The limit in the binary string.;private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber) {_		final InternalDeSerializer serializer = this.serializer__		serializer.memory = this.binaryData__		serializer.position = offset__		serializer.end = limit__		try {_			target.read(serializer)__		}_		catch (Exception e) {_			throw new DeserializationException("Error reading field " + fieldNumber + " as " + target.getClass().getName(), e)__		}_	};deserializes,the,given,object,from,the,binary,string,starting,at,the,given,position,if,the,deserialization,asks,for,more,that,code,limit,offset,code,bytes,than,an,exception,is,thrown,param,t,the,generic,type,of,the,value,to,be,deserialized,param,target,the,object,to,deserialize,the,data,into,param,offset,the,offset,in,the,binary,string,param,limit,the,limit,in,the,binary,string;private,t,extends,value,void,deserialize,t,target,int,offset,int,limit,int,field,number,final,internal,de,serializer,serializer,this,serializer,serializer,memory,this,binary,data,serializer,position,offset,serializer,end,limit,try,target,read,serializer,catch,exception,e,throw,new,deserialization,exception,error,reading,field,field,number,as,target,get,class,get,name,e
Record -> private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber);1448491524;Deserializes the given object from the binary string, starting at the given position._If the deserialization asks for more that <code>limit - offset</code> bytes, than_an exception is thrown.__@param <T> The generic type of the value to be deserialized._@param target The object to deserialize the data into._@param offset The offset in the binary string._@param limit The limit in the binary string.;private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber) {_		final InternalDeSerializer serializer = this.serializer__		serializer.memory = this.binaryData__		serializer.position = offset__		serializer.end = limit__		try {_			target.read(serializer)__		}_		catch (Exception e) {_			throw new DeserializationException("Error reading field " + fieldNumber + " as " + target.getClass().getName(), e)__		}_	};deserializes,the,given,object,from,the,binary,string,starting,at,the,given,position,if,the,deserialization,asks,for,more,that,code,limit,offset,code,bytes,than,an,exception,is,thrown,param,t,the,generic,type,of,the,value,to,be,deserialized,param,target,the,object,to,deserialize,the,data,into,param,offset,the,offset,in,the,binary,string,param,limit,the,limit,in,the,binary,string;private,t,extends,value,void,deserialize,t,target,int,offset,int,limit,int,field,number,final,internal,de,serializer,serializer,this,serializer,serializer,memory,this,binary,data,serializer,position,offset,serializer,end,limit,try,target,read,serializer,catch,exception,e,throw,new,deserialization,exception,error,reading,field,field,number,as,target,get,class,get,name,e
Record -> private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber);1452178883;Deserializes the given object from the binary string, starting at the given position._If the deserialization asks for more that <code>limit - offset</code> bytes, than_an exception is thrown.__@param <T> The generic type of the value to be deserialized._@param target The object to deserialize the data into._@param offset The offset in the binary string._@param limit The limit in the binary string.;private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber) {_		final InternalDeSerializer serializer = this.serializer__		serializer.memory = this.binaryData__		serializer.position = offset__		serializer.end = limit__		try {_			target.read(serializer)__		}_		catch (Exception e) {_			throw new DeserializationException("Error reading field " + fieldNumber + " as " + target.getClass().getName(), e)__		}_	};deserializes,the,given,object,from,the,binary,string,starting,at,the,given,position,if,the,deserialization,asks,for,more,that,code,limit,offset,code,bytes,than,an,exception,is,thrown,param,t,the,generic,type,of,the,value,to,be,deserialized,param,target,the,object,to,deserialize,the,data,into,param,offset,the,offset,in,the,binary,string,param,limit,the,limit,in,the,binary,string;private,t,extends,value,void,deserialize,t,target,int,offset,int,limit,int,field,number,final,internal,de,serializer,serializer,this,serializer,serializer,memory,this,binary,data,serializer,position,offset,serializer,end,limit,try,target,read,serializer,catch,exception,e,throw,new,deserialization,exception,error,reading,field,field,number,as,target,get,class,get,name,e
Record -> private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber);1489589988;Deserializes the given object from the binary string, starting at the given position._If the deserialization asks for more that <code>limit - offset</code> bytes, than_an exception is thrown.__@param <T> The generic type of the value to be deserialized._@param target The object to deserialize the data into._@param offset The offset in the binary string._@param limit The limit in the binary string.;private <T extends Value> void deserialize(T target, int offset, int limit, int fieldNumber) {_		final InternalDeSerializer serializer = this.serializer__		serializer.memory = this.binaryData__		serializer.position = offset__		serializer.end = limit__		try {_			target.read(serializer)__		}_		catch (Exception e) {_			throw new DeserializationException("Error reading field " + fieldNumber + " as " + target.getClass().getName(), e)__		}_	};deserializes,the,given,object,from,the,binary,string,starting,at,the,given,position,if,the,deserialization,asks,for,more,that,code,limit,offset,code,bytes,than,an,exception,is,thrown,param,t,the,generic,type,of,the,value,to,be,deserialized,param,target,the,object,to,deserialize,the,data,into,param,offset,the,offset,in,the,binary,string,param,limit,the,limit,in,the,binary,string;private,t,extends,value,void,deserialize,t,target,int,offset,int,limit,int,field,number,final,internal,de,serializer,serializer,this,serializer,serializer,memory,this,binary,data,serializer,position,offset,serializer,end,limit,try,target,read,serializer,catch,exception,e,throw,new,deserialization,exception,error,reading,field,field,number,as,target,get,class,get,name,e
Record -> public void setNull(long mask);1405024514;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit represents the i-th field in the record.;public void setNull(long mask) {_		for (int i = 0_ i < this.numFields_ i++, mask >>>= 1) {_			if ((mask & 0x1) != 0) {_				internallySetField(i, null)__			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,represents,the,i,th,field,in,the,record;public,void,set,null,long,mask,for,int,i,0,i,this,num,fields,i,mask,1,if,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long mask);1405090423;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit represents the i-th field in the record.;public void setNull(long mask) {_		for (int i = 0_ i < this.numFields_ i++, mask >>>= 1) {_			if ((mask & 0x1) != 0) {_				internallySetField(i, null)__			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,represents,the,i,th,field,in,the,record;public,void,set,null,long,mask,for,int,i,0,i,this,num,fields,i,mask,1,if,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long mask);1411473593;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit represents the i-th field in the record.;public void setNull(long mask) {_		for (int i = 0_ i < this.numFields_ i++, mask >>>= 1) {_			if ((mask & 0x1) != 0) {_				internallySetField(i, null)__			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,represents,the,i,th,field,in,the,record;public,void,set,null,long,mask,for,int,i,0,i,this,num,fields,i,mask,1,if,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long mask);1414786554;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit represents the i-th field in the record.;public void setNull(long mask) {_		for (int i = 0_ i < this.numFields_ i++, mask >>>= 1) {_			if ((mask & 0x1) != 0) {_				internallySetField(i, null)__			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,represents,the,i,th,field,in,the,record;public,void,set,null,long,mask,for,int,i,0,i,this,num,fields,i,mask,1,if,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long mask);1423847366;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit represents the i-th field in the record.;public void setNull(long mask) {_		for (int i = 0_ i < this.numFields_ i++, mask >>>= 1) {_			if ((mask & 0x1) != 0) {_				internallySetField(i, null)__			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,represents,the,i,th,field,in,the,record;public,void,set,null,long,mask,for,int,i,0,i,this,num,fields,i,mask,1,if,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long mask);1443521887;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit represents the i-th field in the record.;public void setNull(long mask) {_		for (int i = 0_ i < this.numFields_ i++, mask >>>= 1) {_			if ((mask & 0x1) != 0) {_				internallySetField(i, null)__			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,represents,the,i,th,field,in,the,record;public,void,set,null,long,mask,for,int,i,0,i,this,num,fields,i,mask,1,if,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long mask);1446112342;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit represents the i-th field in the record.;public void setNull(long mask) {_		for (int i = 0_ i < this.numFields_ i++, mask >>>= 1) {_			if ((mask & 0x1) != 0) {_				internallySetField(i, null)__			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,represents,the,i,th,field,in,the,record;public,void,set,null,long,mask,for,int,i,0,i,this,num,fields,i,mask,1,if,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long mask);1448491524;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit represents the i-th field in the record.;public void setNull(long mask) {_		for (int i = 0_ i < this.numFields_ i++, mask >>>= 1) {_			if ((mask & 0x1) != 0) {_				internallySetField(i, null)__			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,represents,the,i,th,field,in,the,record;public,void,set,null,long,mask,for,int,i,0,i,this,num,fields,i,mask,1,if,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long mask);1452178883;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit represents the i-th field in the record.;public void setNull(long mask) {_		for (int i = 0_ i < this.numFields_ i++, mask >>>= 1) {_			if ((mask & 0x1) != 0) {_				internallySetField(i, null)__			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,represents,the,i,th,field,in,the,record;public,void,set,null,long,mask,for,int,i,0,i,this,num,fields,i,mask,1,if,mask,0x1,0,internally,set,field,i,null
Record -> public void setNull(long mask);1489589988;Sets the fields to <code>null</code> using the given bit mask._The bits correspond to the individual columns: <code>(1 == nullify, 0 == keep)</code>.__@param mask Bit mask, where the i-th least significant bit represents the i-th field in the record.;public void setNull(long mask) {_		for (int i = 0_ i < this.numFields_ i++, mask >>>= 1) {_			if ((mask & 0x1) != 0) {_				internallySetField(i, null)__			}_		}_	};sets,the,fields,to,code,null,code,using,the,given,bit,mask,the,bits,correspond,to,the,individual,columns,code,1,nullify,0,keep,code,param,mask,bit,mask,where,the,i,th,least,significant,bit,represents,the,i,th,field,in,the,record;public,void,set,null,long,mask,for,int,i,0,i,this,num,fields,i,mask,1,if,mask,0x1,0,internally,set,field,i,null
Record -> public Record();1405024514;Required nullary constructor for instantiation by serialization logic.;public Record() {};required,nullary,constructor,for,instantiation,by,serialization,logic;public,record
Record -> public Record();1405090423;Required nullary constructor for instantiation by serialization logic.;public Record() {};required,nullary,constructor,for,instantiation,by,serialization,logic;public,record
Record -> public Record();1411473593;Required nullary constructor for instantiation by serialization logic.;public Record() {};required,nullary,constructor,for,instantiation,by,serialization,logic;public,record
Record -> public Record();1414786554;Required nullary constructor for instantiation by serialization logic.;public Record() {};required,nullary,constructor,for,instantiation,by,serialization,logic;public,record
Record -> public Record();1423847366;Required nullary constructor for instantiation by serialization logic.;public Record() {};required,nullary,constructor,for,instantiation,by,serialization,logic;public,record
Record -> public Record();1443521887;Required nullary constructor for instantiation by serialization logic.;public Record() {};required,nullary,constructor,for,instantiation,by,serialization,logic;public,record
Record -> public Record();1446112342;Required nullary constructor for instantiation by serialization logic.;public Record() {};required,nullary,constructor,for,instantiation,by,serialization,logic;public,record
Record -> public Record();1448491524;Required nullary constructor for instantiation by serialization logic.;public Record() {};required,nullary,constructor,for,instantiation,by,serialization,logic;public,record
Record -> public Record();1452178883;Required nullary constructor for instantiation by serialization logic.;public Record() {};required,nullary,constructor,for,instantiation,by,serialization,logic;public,record
Record -> public Record();1489589988;Required nullary constructor for instantiation by serialization logic.;public Record() {};required,nullary,constructor,for,instantiation,by,serialization,logic;public,record
Record -> public void clear();1405024514;Clears the record. After this operation, the record will have zero fields.;public void clear() {_		if (this.numFields > 0) {_			this.numFields = 0__			this.firstModifiedPos = 0__		}_	};clears,the,record,after,this,operation,the,record,will,have,zero,fields;public,void,clear,if,this,num,fields,0,this,num,fields,0,this,first,modified,pos,0
Record -> public void clear();1405090423;Clears the record. After this operation, the record will have zero fields.;public void clear() {_		if (this.numFields > 0) {_			this.numFields = 0__			this.firstModifiedPos = 0__		}_	};clears,the,record,after,this,operation,the,record,will,have,zero,fields;public,void,clear,if,this,num,fields,0,this,num,fields,0,this,first,modified,pos,0
Record -> public void clear();1411473593;Clears the record. After this operation, the record will have zero fields.;public void clear() {_		if (this.numFields > 0) {_			this.numFields = 0__			this.firstModifiedPos = 0__		}_	};clears,the,record,after,this,operation,the,record,will,have,zero,fields;public,void,clear,if,this,num,fields,0,this,num,fields,0,this,first,modified,pos,0
Record -> public void clear();1414786554;Clears the record. After this operation, the record will have zero fields.;public void clear() {_		if (this.numFields > 0) {_			this.numFields = 0__			this.firstModifiedPos = 0__		}_	};clears,the,record,after,this,operation,the,record,will,have,zero,fields;public,void,clear,if,this,num,fields,0,this,num,fields,0,this,first,modified,pos,0
Record -> public void clear();1423847366;Clears the record. After this operation, the record will have zero fields.;public void clear() {_		if (this.numFields > 0) {_			this.numFields = 0__			this.firstModifiedPos = 0__		}_	};clears,the,record,after,this,operation,the,record,will,have,zero,fields;public,void,clear,if,this,num,fields,0,this,num,fields,0,this,first,modified,pos,0
Record -> public void clear();1443521887;Clears the record. After this operation, the record will have zero fields.;public void clear() {_		if (this.numFields > 0) {_			this.numFields = 0__			this.firstModifiedPos = 0__		}_	};clears,the,record,after,this,operation,the,record,will,have,zero,fields;public,void,clear,if,this,num,fields,0,this,num,fields,0,this,first,modified,pos,0
Record -> public void clear();1446112342;Clears the record. After this operation, the record will have zero fields.;public void clear() {_		if (this.numFields > 0) {_			this.numFields = 0__			this.firstModifiedPos = 0__		}_	};clears,the,record,after,this,operation,the,record,will,have,zero,fields;public,void,clear,if,this,num,fields,0,this,num,fields,0,this,first,modified,pos,0
Record -> public void clear();1448491524;Clears the record. After this operation, the record will have zero fields.;public void clear() {_		if (this.numFields > 0) {_			this.numFields = 0__			this.firstModifiedPos = 0__		}_	};clears,the,record,after,this,operation,the,record,will,have,zero,fields;public,void,clear,if,this,num,fields,0,this,num,fields,0,this,first,modified,pos,0
Record -> public void clear();1452178883;Clears the record. After this operation, the record will have zero fields.;public void clear() {_		if (this.numFields > 0) {_			this.numFields = 0__			this.firstModifiedPos = 0__		}_	};clears,the,record,after,this,operation,the,record,will,have,zero,fields;public,void,clear,if,this,num,fields,0,this,num,fields,0,this,first,modified,pos,0
Record -> public void clear();1489589988;Clears the record. After this operation, the record will have zero fields.;public void clear() {_		if (this.numFields > 0) {_			this.numFields = 0__			this.firstModifiedPos = 0__		}_	};clears,the,record,after,this,operation,the,record,will,have,zero,fields;public,void,clear,if,this,num,fields,0,this,num,fields,0,this,first,modified,pos,0
