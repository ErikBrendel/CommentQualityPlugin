# id;timestamp;commentText;codeText;commentWords;codeWords
PlanExecutor -> public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;1405024514;Execute the given plan and return the runtime in milliseconds.__@param plan The plan of the program to execute._@return The execution result, containing for example the net runtime of the program, and the accumulators.__@throws Exception Thrown, if job submission caused an exception.;public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;execute,the,given,plan,and,return,the,runtime,in,milliseconds,param,plan,the,plan,of,the,program,to,execute,return,the,execution,result,containing,for,example,the,net,runtime,of,the,program,and,the,accumulators,throws,exception,thrown,if,job,submission,caused,an,exception;public,abstract,job,execution,result,execute,plan,plan,plan,throws,exception
PlanExecutor -> public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;1405090423;Execute the given plan and return the runtime in milliseconds.__@param plan The plan of the program to execute._@return The execution result, containing for example the net runtime of the program, and the accumulators.__@throws Exception Thrown, if job submission caused an exception.;public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;execute,the,given,plan,and,return,the,runtime,in,milliseconds,param,plan,the,plan,of,the,program,to,execute,return,the,execution,result,containing,for,example,the,net,runtime,of,the,program,and,the,accumulators,throws,exception,thrown,if,job,submission,caused,an,exception;public,abstract,job,execution,result,execute,plan,plan,plan,throws,exception
PlanExecutor -> public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;1411473593;Execute the given plan and return the runtime in milliseconds.__@param plan The plan of the program to execute._@return The execution result, containing for example the net runtime of the program, and the accumulators.__@throws Exception Thrown, if job submission caused an exception.;public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;execute,the,given,plan,and,return,the,runtime,in,milliseconds,param,plan,the,plan,of,the,program,to,execute,return,the,execution,result,containing,for,example,the,net,runtime,of,the,program,and,the,accumulators,throws,exception,thrown,if,job,submission,caused,an,exception;public,abstract,job,execution,result,execute,plan,plan,plan,throws,exception
PlanExecutor -> public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;1414429739;Execute the given plan and return the runtime in milliseconds.__@param plan The plan of the program to execute._@return The execution result, containing for example the net runtime of the program, and the accumulators.__@throws Exception Thrown, if job submission caused an exception.;public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;execute,the,given,plan,and,return,the,runtime,in,milliseconds,param,plan,the,plan,of,the,program,to,execute,return,the,execution,result,containing,for,example,the,net,runtime,of,the,program,and,the,accumulators,throws,exception,thrown,if,job,submission,caused,an,exception;public,abstract,job,execution,result,execute,plan,plan,plan,throws,exception
PlanExecutor -> public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;1427958028;Execute the given plan and return the runtime in milliseconds.__@param plan The plan of the program to execute._@return The execution result, containing for example the net runtime of the program, and the accumulators.__@throws Exception Thrown, if job submission caused an exception.;public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;execute,the,given,plan,and,return,the,runtime,in,milliseconds,param,plan,the,plan,of,the,program,to,execute,return,the,execution,result,containing,for,example,the,net,runtime,of,the,program,and,the,accumulators,throws,exception,thrown,if,job,submission,caused,an,exception;public,abstract,job,execution,result,execute,plan,plan,plan,throws,exception
PlanExecutor -> public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;1428935901;Execute the given plan and return the runtime in milliseconds.__@param plan The plan of the program to execute._@return The execution result, containing for example the net runtime of the program, and the accumulators.__@throws Exception Thrown, if job submission caused an exception.;public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;execute,the,given,plan,and,return,the,runtime,in,milliseconds,param,plan,the,plan,of,the,program,to,execute,return,the,execution,result,containing,for,example,the,net,runtime,of,the,program,and,the,accumulators,throws,exception,thrown,if,job,submission,caused,an,exception;public,abstract,job,execution,result,execute,plan,plan,plan,throws,exception
PlanExecutor -> public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;1442312344;Execute the given plan and return the runtime in milliseconds.__@param plan The plan of the program to execute._@return The execution result, containing for example the net runtime of the program, and the accumulators.__@throws Exception Thrown, if job submission caused an exception.;public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;execute,the,given,plan,and,return,the,runtime,in,milliseconds,param,plan,the,plan,of,the,program,to,execute,return,the,execution,result,containing,for,example,the,net,runtime,of,the,program,and,the,accumulators,throws,exception,thrown,if,job,submission,caused,an,exception;public,abstract,job,execution,result,execute,plan,plan,plan,throws,exception
PlanExecutor -> public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;1442944546;Execute the given program.__<p>If the executor has not been started before, then this method will start the_executor and stop it after the execution has completed. This implies that one needs_to explicitly start the executor for all programs where multiple dataflow parts_depend on each other. Otherwise, the previous parts will no longer_be available, because the executor immediately shut down after the execution.</p>__@param plan The plan of the program to execute._@return The execution result, containing for example the net runtime of the program, and the accumulators.__@throws Exception Thrown, if job submission caused an exception.;public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;execute,the,given,program,p,if,the,executor,has,not,been,started,before,then,this,method,will,start,the,executor,and,stop,it,after,the,execution,has,completed,this,implies,that,one,needs,to,explicitly,start,the,executor,for,all,programs,where,multiple,dataflow,parts,depend,on,each,other,otherwise,the,previous,parts,will,no,longer,be,available,because,the,executor,immediately,shut,down,after,the,execution,p,param,plan,the,plan,of,the,program,to,execute,return,the,execution,result,containing,for,example,the,net,runtime,of,the,program,and,the,accumulators,throws,exception,thrown,if,job,submission,caused,an,exception;public,abstract,job,execution,result,execute,plan,plan,plan,throws,exception
PlanExecutor -> public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;1444312509;Execute the given program.__<p>If the executor has not been started before, then this method will start the_executor and stop it after the execution has completed. This implies that one needs_to explicitly start the executor for all programs where multiple dataflow parts_depend on each other. Otherwise, the previous parts will no longer_be available, because the executor immediately shut down after the execution.</p>__@param plan The plan of the program to execute._@return The execution result, containing for example the net runtime of the program, and the accumulators.__@throws Exception Thrown, if job submission caused an exception.;public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;execute,the,given,program,p,if,the,executor,has,not,been,started,before,then,this,method,will,start,the,executor,and,stop,it,after,the,execution,has,completed,this,implies,that,one,needs,to,explicitly,start,the,executor,for,all,programs,where,multiple,dataflow,parts,depend,on,each,other,otherwise,the,previous,parts,will,no,longer,be,available,because,the,executor,immediately,shut,down,after,the,execution,p,param,plan,the,plan,of,the,program,to,execute,return,the,execution,result,containing,for,example,the,net,runtime,of,the,program,and,the,accumulators,throws,exception,thrown,if,job,submission,caused,an,exception;public,abstract,job,execution,result,execute,plan,plan,plan,throws,exception
PlanExecutor -> public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;1455479358;Execute the given program.__<p>If the executor has not been started before, then this method will start the_executor and stop it after the execution has completed. This implies that one needs_to explicitly start the executor for all programs where multiple dataflow parts_depend on each other. Otherwise, the previous parts will no longer_be available, because the executor immediately shut down after the execution.</p>__@param plan The plan of the program to execute._@return The execution result, containing for example the net runtime of the program, and the accumulators.__@throws Exception Thrown, if job submission caused an exception.;public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;execute,the,given,program,p,if,the,executor,has,not,been,started,before,then,this,method,will,start,the,executor,and,stop,it,after,the,execution,has,completed,this,implies,that,one,needs,to,explicitly,start,the,executor,for,all,programs,where,multiple,dataflow,parts,depend,on,each,other,otherwise,the,previous,parts,will,no,longer,be,available,because,the,executor,immediately,shut,down,after,the,execution,p,param,plan,the,plan,of,the,program,to,execute,return,the,execution,result,containing,for,example,the,net,runtime,of,the,program,and,the,accumulators,throws,exception,thrown,if,job,submission,caused,an,exception;public,abstract,job,execution,result,execute,plan,plan,plan,throws,exception
PlanExecutor -> public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;1461591030;Execute the given program.__<p>If the executor has not been started before, then this method will start the_executor and stop it after the execution has completed. This implies that one needs_to explicitly start the executor for all programs where multiple dataflow parts_depend on each other. Otherwise, the previous parts will no longer_be available, because the executor immediately shut down after the execution.</p>__@param plan The plan of the program to execute._@return The execution result, containing for example the net runtime of the program, and the accumulators.__@throws Exception Thrown, if job submission caused an exception.;public abstract JobExecutionResult executePlan(Plan plan) throws Exception_;execute,the,given,program,p,if,the,executor,has,not,been,started,before,then,this,method,will,start,the,executor,and,stop,it,after,the,execution,has,completed,this,implies,that,one,needs,to,explicitly,start,the,executor,for,all,programs,where,multiple,dataflow,parts,depend,on,each,other,otherwise,the,previous,parts,will,no,longer,be,available,because,the,executor,immediately,shut,down,after,the,execution,p,param,plan,the,plan,of,the,program,to,execute,return,the,execution,result,containing,for,example,the,net,runtime,of,the,program,and,the,accumulators,throws,exception,thrown,if,job,submission,caused,an,exception;public,abstract,job,execution,result,execute,plan,plan,plan,throws,exception
PlanExecutor -> public abstract void endSession(JobID jobID) throws Exception_;1442944546;Ends the job session, identified by the given JobID. Jobs can be kept around as sessions,_if a session timeout is specified. Keeping Jobs as sessions allows users to incrementally_add new operations to their dataflow, that refer to previous intermediate results of the_dataflow.__@param jobID The JobID identifying the job session._@throws Exception Thrown, if the message to finish the session cannot be delivered.;public abstract void endSession(JobID jobID) throws Exception_;ends,the,job,session,identified,by,the,given,job,id,jobs,can,be,kept,around,as,sessions,if,a,session,timeout,is,specified,keeping,jobs,as,sessions,allows,users,to,incrementally,add,new,operations,to,their,dataflow,that,refer,to,previous,intermediate,results,of,the,dataflow,param,job,id,the,job,id,identifying,the,job,session,throws,exception,thrown,if,the,message,to,finish,the,session,cannot,be,delivered;public,abstract,void,end,session,job,id,job,id,throws,exception
PlanExecutor -> public abstract void endSession(JobID jobID) throws Exception_;1444312509;Ends the job session, identified by the given JobID. Jobs can be kept around as sessions,_if a session timeout is specified. Keeping Jobs as sessions allows users to incrementally_add new operations to their dataflow, that refer to previous intermediate results of the_dataflow.__@param jobID The JobID identifying the job session._@throws Exception Thrown, if the message to finish the session cannot be delivered.;public abstract void endSession(JobID jobID) throws Exception_;ends,the,job,session,identified,by,the,given,job,id,jobs,can,be,kept,around,as,sessions,if,a,session,timeout,is,specified,keeping,jobs,as,sessions,allows,users,to,incrementally,add,new,operations,to,their,dataflow,that,refer,to,previous,intermediate,results,of,the,dataflow,param,job,id,the,job,id,identifying,the,job,session,throws,exception,thrown,if,the,message,to,finish,the,session,cannot,be,delivered;public,abstract,void,end,session,job,id,job,id,throws,exception
PlanExecutor -> public abstract void endSession(JobID jobID) throws Exception_;1455479358;Ends the job session, identified by the given JobID. Jobs can be kept around as sessions,_if a session timeout is specified. Keeping Jobs as sessions allows users to incrementally_add new operations to their dataflow, that refer to previous intermediate results of the_dataflow.__@param jobID The JobID identifying the job session._@throws Exception Thrown, if the message to finish the session cannot be delivered.;public abstract void endSession(JobID jobID) throws Exception_;ends,the,job,session,identified,by,the,given,job,id,jobs,can,be,kept,around,as,sessions,if,a,session,timeout,is,specified,keeping,jobs,as,sessions,allows,users,to,incrementally,add,new,operations,to,their,dataflow,that,refer,to,previous,intermediate,results,of,the,dataflow,param,job,id,the,job,id,identifying,the,job,session,throws,exception,thrown,if,the,message,to,finish,the,session,cannot,be,delivered;public,abstract,void,end,session,job,id,job,id,throws,exception
PlanExecutor -> public abstract void endSession(JobID jobID) throws Exception_;1461591030;Ends the job session, identified by the given JobID. Jobs can be kept around as sessions,_if a session timeout is specified. Keeping Jobs as sessions allows users to incrementally_add new operations to their dataflow, that refer to previous intermediate results of the_dataflow.__@param jobID The JobID identifying the job session._@throws Exception Thrown, if the message to finish the session cannot be delivered.;public abstract void endSession(JobID jobID) throws Exception_;ends,the,job,session,identified,by,the,given,job,id,jobs,can,be,kept,around,as,sessions,if,a,session,timeout,is,specified,keeping,jobs,as,sessions,allows,users,to,incrementally,add,new,operations,to,their,dataflow,that,refer,to,previous,intermediate,results,of,the,dataflow,param,job,id,the,job,id,identifying,the,job,session,throws,exception,thrown,if,the,message,to,finish,the,session,cannot,be,delivered;public,abstract,void,end,session,job,id,job,id,throws,exception
PlanExecutor -> public static PlanExecutor createLocalExecutor();1405024514;Creates an executor that runs the plan locally in a multi-threaded environment.__@return A local executor.;public static PlanExecutor createLocalExecutor() {_		Class<? extends PlanExecutor> leClass = loadExecutorClass(LOCAL_EXECUTOR_CLASS)__		_		try {_			return leClass.newInstance()__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the local executor (" + LOCAL_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,locally,in,a,multi,threaded,environment,return,a,local,executor;public,static,plan,executor,create,local,executor,class,extends,plan,executor,le,class,load,executor,class,try,return,le,class,new,instance,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,local,executor,t
PlanExecutor -> public static PlanExecutor createLocalExecutor();1405090423;Creates an executor that runs the plan locally in a multi-threaded environment.__@return A local executor.;public static PlanExecutor createLocalExecutor() {_		Class<? extends PlanExecutor> leClass = loadExecutorClass(LOCAL_EXECUTOR_CLASS)__		_		try {_			return leClass.newInstance()__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the local executor (" + LOCAL_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,locally,in,a,multi,threaded,environment,return,a,local,executor;public,static,plan,executor,create,local,executor,class,extends,plan,executor,le,class,load,executor,class,try,return,le,class,new,instance,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,local,executor,t
PlanExecutor -> public static PlanExecutor createLocalExecutor();1411473593;Creates an executor that runs the plan locally in a multi-threaded environment.__@return A local executor.;public static PlanExecutor createLocalExecutor() {_		Class<? extends PlanExecutor> leClass = loadExecutorClass(LOCAL_EXECUTOR_CLASS)__		_		try {_			return leClass.newInstance()__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the local executor (" + LOCAL_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,locally,in,a,multi,threaded,environment,return,a,local,executor;public,static,plan,executor,create,local,executor,class,extends,plan,executor,le,class,load,executor,class,try,return,le,class,new,instance,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,local,executor,t
PlanExecutor -> public static PlanExecutor createLocalExecutor();1414429739;Creates an executor that runs the plan locally in a multi-threaded environment.__@return A local executor.;public static PlanExecutor createLocalExecutor() {_		Class<? extends PlanExecutor> leClass = loadExecutorClass(LOCAL_EXECUTOR_CLASS)__		_		try {_			return leClass.newInstance()__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the local executor (" + LOCAL_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,locally,in,a,multi,threaded,environment,return,a,local,executor;public,static,plan,executor,create,local,executor,class,extends,plan,executor,le,class,load,executor,class,try,return,le,class,new,instance,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,local,executor,t
PlanExecutor -> public static PlanExecutor createRemoteExecutor(String hostname, int port, Configuration clientConfiguration, String... jarFiles);1442312344;Creates an executor that runs the plan on a remote environment. The remote executor is typically used_to send the program to a cluster for execution.__@param hostname The address of the JobManager to send the program to._@param port The port of the JobManager to send the program to._@param clientConfiguration The configuration for the client (Akka, default.parallelism)._@param jarFiles A list of jar files that contain the user-defined function (UDF) classes and all classes used_from within the UDFs._@return A remote executor.;public static PlanExecutor createRemoteExecutor(String hostname, int port, Configuration clientConfiguration, String... jarFiles) {_		if (hostname == null) {_			throw new IllegalArgumentException("The hostname must not be null.")__		}_		if (port <= 0 || port > 0xffff) {_			throw new IllegalArgumentException("The port value is out of range.")__		}_		_		Class<? extends PlanExecutor> reClass = loadExecutorClass(REMOTE_EXECUTOR_CLASS)__		_		List<String> files = (jarFiles == null || jarFiles.length == 0) ? Collections.<String>emptyList()_																		: Arrays.asList(jarFiles)_ _		_		try {_			PlanExecutor executor = (clientConfiguration == null) ?_					reClass.getConstructor(String.class, int.class, List.class).newInstance(hostname, port, files) :_					reClass.getConstructor(String.class, int.class, List.class, Configuration.class).newInstance(hostname, port, files, clientConfiguration)__			return executor__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the remote executor ("_					+ REMOTE_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,on,a,remote,environment,the,remote,executor,is,typically,used,to,send,the,program,to,a,cluster,for,execution,param,hostname,the,address,of,the,job,manager,to,send,the,program,to,param,port,the,port,of,the,job,manager,to,send,the,program,to,param,client,configuration,the,configuration,for,the,client,akka,default,parallelism,param,jar,files,a,list,of,jar,files,that,contain,the,user,defined,function,udf,classes,and,all,classes,used,from,within,the,udfs,return,a,remote,executor;public,static,plan,executor,create,remote,executor,string,hostname,int,port,configuration,client,configuration,string,jar,files,if,hostname,null,throw,new,illegal,argument,exception,the,hostname,must,not,be,null,if,port,0,port,0xffff,throw,new,illegal,argument,exception,the,port,value,is,out,of,range,class,extends,plan,executor,re,class,load,executor,class,list,string,files,jar,files,null,jar,files,length,0,collections,string,empty,list,arrays,as,list,jar,files,try,plan,executor,executor,client,configuration,null,re,class,get,constructor,string,class,int,class,list,class,new,instance,hostname,port,files,re,class,get,constructor,string,class,int,class,list,class,configuration,class,new,instance,hostname,port,files,client,configuration,return,executor,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,remote,executor,t
PlanExecutor -> public static PlanExecutor createRemoteExecutor(String hostname, int port, Configuration clientConfiguration, String... jarFiles);1442944546;Creates an executor that runs the plan on a remote environment. The remote executor is typically used_to send the program to a cluster for execution.__@param hostname The address of the JobManager to send the program to._@param port The port of the JobManager to send the program to._@param clientConfiguration The configuration for the client (Akka, default.parallelism)._@param jarFiles A list of jar files that contain the user-defined function (UDF) classes and all classes used_from within the UDFs._@return A remote executor.;public static PlanExecutor createRemoteExecutor(String hostname, int port, Configuration clientConfiguration, String... jarFiles) {_		if (hostname == null) {_			throw new IllegalArgumentException("The hostname must not be null.")__		}_		if (port <= 0 || port > 0xffff) {_			throw new IllegalArgumentException("The port value is out of range.")__		}_		_		Class<? extends PlanExecutor> reClass = loadExecutorClass(REMOTE_EXECUTOR_CLASS)__		_		List<String> files = (jarFiles == null || jarFiles.length == 0) ? Collections.<String>emptyList()_																		: Arrays.asList(jarFiles)_ _		_		try {_			PlanExecutor executor = (clientConfiguration == null) ?_					reClass.getConstructor(String.class, int.class, List.class).newInstance(hostname, port, files) :_					reClass.getConstructor(String.class, int.class, List.class, Configuration.class).newInstance(hostname, port, files, clientConfiguration)__			return executor__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the remote executor ("_					+ REMOTE_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,on,a,remote,environment,the,remote,executor,is,typically,used,to,send,the,program,to,a,cluster,for,execution,param,hostname,the,address,of,the,job,manager,to,send,the,program,to,param,port,the,port,of,the,job,manager,to,send,the,program,to,param,client,configuration,the,configuration,for,the,client,akka,default,parallelism,param,jar,files,a,list,of,jar,files,that,contain,the,user,defined,function,udf,classes,and,all,classes,used,from,within,the,udfs,return,a,remote,executor;public,static,plan,executor,create,remote,executor,string,hostname,int,port,configuration,client,configuration,string,jar,files,if,hostname,null,throw,new,illegal,argument,exception,the,hostname,must,not,be,null,if,port,0,port,0xffff,throw,new,illegal,argument,exception,the,port,value,is,out,of,range,class,extends,plan,executor,re,class,load,executor,class,list,string,files,jar,files,null,jar,files,length,0,collections,string,empty,list,arrays,as,list,jar,files,try,plan,executor,executor,client,configuration,null,re,class,get,constructor,string,class,int,class,list,class,new,instance,hostname,port,files,re,class,get,constructor,string,class,int,class,list,class,configuration,class,new,instance,hostname,port,files,client,configuration,return,executor,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,remote,executor,t
PlanExecutor -> public abstract void start() throws Exception_;1442944546;Starts the program executor. After the executor has been started, it will keep_running until {@link #stop()} is called.__@throws Exception Thrown, if the executor startup failed.;public abstract void start() throws Exception_;starts,the,program,executor,after,the,executor,has,been,started,it,will,keep,running,until,link,stop,is,called,throws,exception,thrown,if,the,executor,startup,failed;public,abstract,void,start,throws,exception
PlanExecutor -> public abstract void start() throws Exception_;1444312509;Starts the program executor. After the executor has been started, it will keep_running until {@link #stop()} is called.__@throws Exception Thrown, if the executor startup failed.;public abstract void start() throws Exception_;starts,the,program,executor,after,the,executor,has,been,started,it,will,keep,running,until,link,stop,is,called,throws,exception,thrown,if,the,executor,startup,failed;public,abstract,void,start,throws,exception
PlanExecutor -> public abstract void start() throws Exception_;1455479358;Starts the program executor. After the executor has been started, it will keep_running until {@link #stop()} is called.__@throws Exception Thrown, if the executor startup failed.;public abstract void start() throws Exception_;starts,the,program,executor,after,the,executor,has,been,started,it,will,keep,running,until,link,stop,is,called,throws,exception,thrown,if,the,executor,startup,failed;public,abstract,void,start,throws,exception
PlanExecutor -> public abstract void start() throws Exception_;1461591030;Starts the program executor. After the executor has been started, it will keep_running until {@link #stop()} is called.__@throws Exception Thrown, if the executor startup failed.;public abstract void start() throws Exception_;starts,the,program,executor,after,the,executor,has,been,started,it,will,keep,running,until,link,stop,is,called,throws,exception,thrown,if,the,executor,startup,failed;public,abstract,void,start,throws,exception
PlanExecutor -> public abstract boolean isRunning()_;1442944546;Checks if this executor is currently running.__@return True is the executor is running, false otherwise.;public abstract boolean isRunning()_;checks,if,this,executor,is,currently,running,return,true,is,the,executor,is,running,false,otherwise;public,abstract,boolean,is,running
PlanExecutor -> public abstract boolean isRunning()_;1444312509;Checks if this executor is currently running.__@return True is the executor is running, false otherwise.;public abstract boolean isRunning()_;checks,if,this,executor,is,currently,running,return,true,is,the,executor,is,running,false,otherwise;public,abstract,boolean,is,running
PlanExecutor -> public abstract boolean isRunning()_;1455479358;Checks if this executor is currently running.__@return True is the executor is running, false otherwise.;public abstract boolean isRunning()_;checks,if,this,executor,is,currently,running,return,true,is,the,executor,is,running,false,otherwise;public,abstract,boolean,is,running
PlanExecutor -> public abstract boolean isRunning()_;1461591030;Checks if this executor is currently running.__@return True is the executor is running, false otherwise.;public abstract boolean isRunning()_;checks,if,this,executor,is,currently,running,return,true,is,the,executor,is,running,false,otherwise;public,abstract,boolean,is,running
PlanExecutor -> public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles);1405024514;Creates an executor that runs the plan on a remote environment. The remote executor is typically used_to send the program to a cluster for execution.__@param hostname The address of the JobManager to send the program to._@param port The port of the JobManager to send the program to._@param jarFiles A list of jar files that contain the user-defined function (UDF) classes and all classes used_from within the UDFs._@return A remote executor.;public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles) {_		if (hostname == null) {_			throw new IllegalArgumentException("The hostname must not be null.")__		}_		if (port <= 0 || port > 0xffff) {_			throw new IllegalArgumentException("The port value is out of range.")__		}_		_		Class<? extends PlanExecutor> reClass = loadExecutorClass(REMOTE_EXECUTOR_CLASS)__		_		List<String> files = (jarFiles == null || jarFiles.length == 0) ? Collections.<String>emptyList() : Arrays.asList(jarFiles)_ _		_		try {_			return reClass.getConstructor(String.class, int.class, List.class).newInstance(hostname, port, files)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the remote executor (" + REMOTE_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,on,a,remote,environment,the,remote,executor,is,typically,used,to,send,the,program,to,a,cluster,for,execution,param,hostname,the,address,of,the,job,manager,to,send,the,program,to,param,port,the,port,of,the,job,manager,to,send,the,program,to,param,jar,files,a,list,of,jar,files,that,contain,the,user,defined,function,udf,classes,and,all,classes,used,from,within,the,udfs,return,a,remote,executor;public,static,plan,executor,create,remote,executor,string,hostname,int,port,string,jar,files,if,hostname,null,throw,new,illegal,argument,exception,the,hostname,must,not,be,null,if,port,0,port,0xffff,throw,new,illegal,argument,exception,the,port,value,is,out,of,range,class,extends,plan,executor,re,class,load,executor,class,list,string,files,jar,files,null,jar,files,length,0,collections,string,empty,list,arrays,as,list,jar,files,try,return,re,class,get,constructor,string,class,int,class,list,class,new,instance,hostname,port,files,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,remote,executor,t
PlanExecutor -> public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles);1405090423;Creates an executor that runs the plan on a remote environment. The remote executor is typically used_to send the program to a cluster for execution.__@param hostname The address of the JobManager to send the program to._@param port The port of the JobManager to send the program to._@param jarFiles A list of jar files that contain the user-defined function (UDF) classes and all classes used_from within the UDFs._@return A remote executor.;public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles) {_		if (hostname == null) {_			throw new IllegalArgumentException("The hostname must not be null.")__		}_		if (port <= 0 || port > 0xffff) {_			throw new IllegalArgumentException("The port value is out of range.")__		}_		_		Class<? extends PlanExecutor> reClass = loadExecutorClass(REMOTE_EXECUTOR_CLASS)__		_		List<String> files = (jarFiles == null || jarFiles.length == 0) ? Collections.<String>emptyList() : Arrays.asList(jarFiles)_ _		_		try {_			return reClass.getConstructor(String.class, int.class, List.class).newInstance(hostname, port, files)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the remote executor (" + REMOTE_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,on,a,remote,environment,the,remote,executor,is,typically,used,to,send,the,program,to,a,cluster,for,execution,param,hostname,the,address,of,the,job,manager,to,send,the,program,to,param,port,the,port,of,the,job,manager,to,send,the,program,to,param,jar,files,a,list,of,jar,files,that,contain,the,user,defined,function,udf,classes,and,all,classes,used,from,within,the,udfs,return,a,remote,executor;public,static,plan,executor,create,remote,executor,string,hostname,int,port,string,jar,files,if,hostname,null,throw,new,illegal,argument,exception,the,hostname,must,not,be,null,if,port,0,port,0xffff,throw,new,illegal,argument,exception,the,port,value,is,out,of,range,class,extends,plan,executor,re,class,load,executor,class,list,string,files,jar,files,null,jar,files,length,0,collections,string,empty,list,arrays,as,list,jar,files,try,return,re,class,get,constructor,string,class,int,class,list,class,new,instance,hostname,port,files,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,remote,executor,t
PlanExecutor -> public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles);1411473593;Creates an executor that runs the plan on a remote environment. The remote executor is typically used_to send the program to a cluster for execution.__@param hostname The address of the JobManager to send the program to._@param port The port of the JobManager to send the program to._@param jarFiles A list of jar files that contain the user-defined function (UDF) classes and all classes used_from within the UDFs._@return A remote executor.;public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles) {_		if (hostname == null) {_			throw new IllegalArgumentException("The hostname must not be null.")__		}_		if (port <= 0 || port > 0xffff) {_			throw new IllegalArgumentException("The port value is out of range.")__		}_		_		Class<? extends PlanExecutor> reClass = loadExecutorClass(REMOTE_EXECUTOR_CLASS)__		_		List<String> files = (jarFiles == null || jarFiles.length == 0) ? Collections.<String>emptyList() : Arrays.asList(jarFiles)_ _		_		try {_			return reClass.getConstructor(String.class, int.class, List.class).newInstance(hostname, port, files)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the remote executor (" + REMOTE_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,on,a,remote,environment,the,remote,executor,is,typically,used,to,send,the,program,to,a,cluster,for,execution,param,hostname,the,address,of,the,job,manager,to,send,the,program,to,param,port,the,port,of,the,job,manager,to,send,the,program,to,param,jar,files,a,list,of,jar,files,that,contain,the,user,defined,function,udf,classes,and,all,classes,used,from,within,the,udfs,return,a,remote,executor;public,static,plan,executor,create,remote,executor,string,hostname,int,port,string,jar,files,if,hostname,null,throw,new,illegal,argument,exception,the,hostname,must,not,be,null,if,port,0,port,0xffff,throw,new,illegal,argument,exception,the,port,value,is,out,of,range,class,extends,plan,executor,re,class,load,executor,class,list,string,files,jar,files,null,jar,files,length,0,collections,string,empty,list,arrays,as,list,jar,files,try,return,re,class,get,constructor,string,class,int,class,list,class,new,instance,hostname,port,files,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,remote,executor,t
PlanExecutor -> public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles);1414429739;Creates an executor that runs the plan on a remote environment. The remote executor is typically used_to send the program to a cluster for execution.__@param hostname The address of the JobManager to send the program to._@param port The port of the JobManager to send the program to._@param jarFiles A list of jar files that contain the user-defined function (UDF) classes and all classes used_from within the UDFs._@return A remote executor.;public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles) {_		if (hostname == null) {_			throw new IllegalArgumentException("The hostname must not be null.")__		}_		if (port <= 0 || port > 0xffff) {_			throw new IllegalArgumentException("The port value is out of range.")__		}_		_		Class<? extends PlanExecutor> reClass = loadExecutorClass(REMOTE_EXECUTOR_CLASS)__		_		List<String> files = (jarFiles == null || jarFiles.length == 0) ? Collections.<String>emptyList() : Arrays.asList(jarFiles)_ _		_		try {_			return reClass.getConstructor(String.class, int.class, List.class).newInstance(hostname, port, files)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the remote executor (" + REMOTE_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,on,a,remote,environment,the,remote,executor,is,typically,used,to,send,the,program,to,a,cluster,for,execution,param,hostname,the,address,of,the,job,manager,to,send,the,program,to,param,port,the,port,of,the,job,manager,to,send,the,program,to,param,jar,files,a,list,of,jar,files,that,contain,the,user,defined,function,udf,classes,and,all,classes,used,from,within,the,udfs,return,a,remote,executor;public,static,plan,executor,create,remote,executor,string,hostname,int,port,string,jar,files,if,hostname,null,throw,new,illegal,argument,exception,the,hostname,must,not,be,null,if,port,0,port,0xffff,throw,new,illegal,argument,exception,the,port,value,is,out,of,range,class,extends,plan,executor,re,class,load,executor,class,list,string,files,jar,files,null,jar,files,length,0,collections,string,empty,list,arrays,as,list,jar,files,try,return,re,class,get,constructor,string,class,int,class,list,class,new,instance,hostname,port,files,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,remote,executor,t
PlanExecutor -> public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles);1427958028;Creates an executor that runs the plan on a remote environment. The remote executor is typically used_to send the program to a cluster for execution.__@param hostname The address of the JobManager to send the program to._@param port The port of the JobManager to send the program to._@param jarFiles A list of jar files that contain the user-defined function (UDF) classes and all classes used_from within the UDFs._@return A remote executor.;public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles) {_		if (hostname == null) {_			throw new IllegalArgumentException("The hostname must not be null.")__		}_		if (port <= 0 || port > 0xffff) {_			throw new IllegalArgumentException("The port value is out of range.")__		}_		_		Class<? extends PlanExecutor> reClass = loadExecutorClass(REMOTE_EXECUTOR_CLASS)__		_		List<String> files = (jarFiles == null || jarFiles.length == 0) ? Collections.<String>emptyList() : Arrays.asList(jarFiles)_ _		_		try {_			return reClass.getConstructor(String.class, int.class, List.class).newInstance(hostname, port, files)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the remote executor (" + REMOTE_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,on,a,remote,environment,the,remote,executor,is,typically,used,to,send,the,program,to,a,cluster,for,execution,param,hostname,the,address,of,the,job,manager,to,send,the,program,to,param,port,the,port,of,the,job,manager,to,send,the,program,to,param,jar,files,a,list,of,jar,files,that,contain,the,user,defined,function,udf,classes,and,all,classes,used,from,within,the,udfs,return,a,remote,executor;public,static,plan,executor,create,remote,executor,string,hostname,int,port,string,jar,files,if,hostname,null,throw,new,illegal,argument,exception,the,hostname,must,not,be,null,if,port,0,port,0xffff,throw,new,illegal,argument,exception,the,port,value,is,out,of,range,class,extends,plan,executor,re,class,load,executor,class,list,string,files,jar,files,null,jar,files,length,0,collections,string,empty,list,arrays,as,list,jar,files,try,return,re,class,get,constructor,string,class,int,class,list,class,new,instance,hostname,port,files,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,remote,executor,t
PlanExecutor -> public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles);1428935901;Creates an executor that runs the plan on a remote environment. The remote executor is typically used_to send the program to a cluster for execution.__@param hostname The address of the JobManager to send the program to._@param port The port of the JobManager to send the program to._@param jarFiles A list of jar files that contain the user-defined function (UDF) classes and all classes used_from within the UDFs._@return A remote executor.;public static PlanExecutor createRemoteExecutor(String hostname, int port, String... jarFiles) {_		if (hostname == null) {_			throw new IllegalArgumentException("The hostname must not be null.")__		}_		if (port <= 0 || port > 0xffff) {_			throw new IllegalArgumentException("The port value is out of range.")__		}_		_		Class<? extends PlanExecutor> reClass = loadExecutorClass(REMOTE_EXECUTOR_CLASS)__		_		List<String> files = (jarFiles == null || jarFiles.length == 0) ? Collections.<String>emptyList()_																		: Arrays.asList(jarFiles)_ _		_		try {_			return reClass.getConstructor(String.class, int.class, List.class).newInstance(hostname, port, files)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the remote executor ("_					+ REMOTE_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,on,a,remote,environment,the,remote,executor,is,typically,used,to,send,the,program,to,a,cluster,for,execution,param,hostname,the,address,of,the,job,manager,to,send,the,program,to,param,port,the,port,of,the,job,manager,to,send,the,program,to,param,jar,files,a,list,of,jar,files,that,contain,the,user,defined,function,udf,classes,and,all,classes,used,from,within,the,udfs,return,a,remote,executor;public,static,plan,executor,create,remote,executor,string,hostname,int,port,string,jar,files,if,hostname,null,throw,new,illegal,argument,exception,the,hostname,must,not,be,null,if,port,0,port,0xffff,throw,new,illegal,argument,exception,the,port,value,is,out,of,range,class,extends,plan,executor,re,class,load,executor,class,list,string,files,jar,files,null,jar,files,length,0,collections,string,empty,list,arrays,as,list,jar,files,try,return,re,class,get,constructor,string,class,int,class,list,class,new,instance,hostname,port,files,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,remote,executor,t
PlanExecutor -> public static PlanExecutor createLocalExecutor(Configuration configuration);1427958028;Creates an executor that runs the plan locally in a multi-threaded environment.__@return A local executor.;public static PlanExecutor createLocalExecutor(Configuration configuration) {_		Class<? extends PlanExecutor> leClass = loadExecutorClass(LOCAL_EXECUTOR_CLASS)__		_		try {_			return leClass.getConstructor(Configuration.class).newInstance(configuration)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the local executor (" + LOCAL_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,locally,in,a,multi,threaded,environment,return,a,local,executor;public,static,plan,executor,create,local,executor,configuration,configuration,class,extends,plan,executor,le,class,load,executor,class,try,return,le,class,get,constructor,configuration,class,new,instance,configuration,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,local,executor,t
PlanExecutor -> public static PlanExecutor createLocalExecutor(Configuration configuration);1428935901;Creates an executor that runs the plan locally in a multi-threaded environment.__@return A local executor.;public static PlanExecutor createLocalExecutor(Configuration configuration) {_		Class<? extends PlanExecutor> leClass = loadExecutorClass(LOCAL_EXECUTOR_CLASS)__		_		try {_			return leClass.getConstructor(Configuration.class).newInstance(configuration)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the local executor ("_					+ LOCAL_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,locally,in,a,multi,threaded,environment,return,a,local,executor;public,static,plan,executor,create,local,executor,configuration,configuration,class,extends,plan,executor,le,class,load,executor,class,try,return,le,class,get,constructor,configuration,class,new,instance,configuration,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,local,executor,t
PlanExecutor -> public static PlanExecutor createLocalExecutor(Configuration configuration);1442312344;Creates an executor that runs the plan locally in a multi-threaded environment.__@return A local executor.;public static PlanExecutor createLocalExecutor(Configuration configuration) {_		Class<? extends PlanExecutor> leClass = loadExecutorClass(LOCAL_EXECUTOR_CLASS)__		_		try {_			return leClass.getConstructor(Configuration.class).newInstance(configuration)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the local executor ("_					+ LOCAL_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,locally,in,a,multi,threaded,environment,return,a,local,executor;public,static,plan,executor,create,local,executor,configuration,configuration,class,extends,plan,executor,le,class,load,executor,class,try,return,le,class,get,constructor,configuration,class,new,instance,configuration,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,local,executor,t
PlanExecutor -> public static PlanExecutor createLocalExecutor(Configuration configuration);1442944546;Creates an executor that runs the plan locally in a multi-threaded environment.__@return A local executor.;public static PlanExecutor createLocalExecutor(Configuration configuration) {_		Class<? extends PlanExecutor> leClass = loadExecutorClass(LOCAL_EXECUTOR_CLASS)__		_		try {_			return leClass.getConstructor(Configuration.class).newInstance(configuration)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the local executor ("_					+ LOCAL_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,locally,in,a,multi,threaded,environment,return,a,local,executor;public,static,plan,executor,create,local,executor,configuration,configuration,class,extends,plan,executor,le,class,load,executor,class,try,return,le,class,get,constructor,configuration,class,new,instance,configuration,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,local,executor,t
PlanExecutor -> public static PlanExecutor createLocalExecutor(Configuration configuration);1444312509;Creates an executor that runs the plan locally in a multi-threaded environment.__@return A local executor.;public static PlanExecutor createLocalExecutor(Configuration configuration) {_		Class<? extends PlanExecutor> leClass = loadExecutorClass(LOCAL_EXECUTOR_CLASS)__		_		try {_			return leClass.getConstructor(Configuration.class).newInstance(configuration)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the local executor ("_					+ LOCAL_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,locally,in,a,multi,threaded,environment,return,a,local,executor;public,static,plan,executor,create,local,executor,configuration,configuration,class,extends,plan,executor,le,class,load,executor,class,try,return,le,class,get,constructor,configuration,class,new,instance,configuration,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,local,executor,t
PlanExecutor -> public static PlanExecutor createLocalExecutor(Configuration configuration);1455479358;Creates an executor that runs the plan locally in a multi-threaded environment.__@return A local executor.;public static PlanExecutor createLocalExecutor(Configuration configuration) {_		Class<? extends PlanExecutor> leClass = loadExecutorClass(LOCAL_EXECUTOR_CLASS)__		_		try {_			return leClass.getConstructor(Configuration.class).newInstance(configuration)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the local executor ("_					+ LOCAL_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,locally,in,a,multi,threaded,environment,return,a,local,executor;public,static,plan,executor,create,local,executor,configuration,configuration,class,extends,plan,executor,le,class,load,executor,class,try,return,le,class,get,constructor,configuration,class,new,instance,configuration,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,local,executor,t
PlanExecutor -> public static PlanExecutor createLocalExecutor(Configuration configuration);1461591030;Creates an executor that runs the plan locally in a multi-threaded environment.__@return A local executor.;public static PlanExecutor createLocalExecutor(Configuration configuration) {_		Class<? extends PlanExecutor> leClass = loadExecutorClass(LOCAL_EXECUTOR_CLASS)__		_		try {_			return leClass.getConstructor(Configuration.class).newInstance(configuration)__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the local executor ("_					+ LOCAL_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,locally,in,a,multi,threaded,environment,return,a,local,executor;public,static,plan,executor,create,local,executor,configuration,configuration,class,extends,plan,executor,le,class,load,executor,class,try,return,le,class,get,constructor,configuration,class,new,instance,configuration,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,local,executor,t
PlanExecutor -> public static PlanExecutor createRemoteExecutor(String hostname, int port, Configuration clientConfiguration, 			URL[] jarFiles, URL[] globalClasspaths);1444312509;Creates an executor that runs the plan on a remote environment. The remote executor is typically used_to send the program to a cluster for execution.__@param hostname The address of the JobManager to send the program to._@param port The port of the JobManager to send the program to._@param clientConfiguration The configuration for the client (Akka, default.parallelism)._@param jarFiles A list of jar files that contain the user-defined function (UDF) classes and all classes used_from within the UDFs._@param globalClasspaths A list of URLs that are added to the classpath of each user code classloader of the_program. Paths must specify a protocol (e.g. file://) and be accessible on all nodes._@return A remote executor.;public static PlanExecutor createRemoteExecutor(String hostname, int port, Configuration clientConfiguration,_			URL[] jarFiles, URL[] globalClasspaths) {_		if (hostname == null) {_			throw new IllegalArgumentException("The hostname must not be null.")__		}_		if (port <= 0 || port > 0xffff) {_			throw new IllegalArgumentException("The port value is out of range.")__		}_		_		Class<? extends PlanExecutor> reClass = loadExecutorClass(REMOTE_EXECUTOR_CLASS)__		_		List<URL> files = (jarFiles == null || jarFiles.length == 0) ?_				Collections.<URL>emptyList() : Arrays.asList(jarFiles)__		List<URL> paths = (globalClasspaths == null || globalClasspaths.length == 0) ?_				Collections.<URL>emptyList() : Arrays.asList(globalClasspaths)___		try {_			PlanExecutor executor = (clientConfiguration == null) ?_					reClass.getConstructor(String.class, int.class, List.class)_						.newInstance(hostname, port, files) :_					reClass.getConstructor(String.class, int.class, Configuration.class, List.class, List.class)_						.newInstance(hostname, port, clientConfiguration, files, paths)__			return executor__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the remote executor ("_					+ REMOTE_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,on,a,remote,environment,the,remote,executor,is,typically,used,to,send,the,program,to,a,cluster,for,execution,param,hostname,the,address,of,the,job,manager,to,send,the,program,to,param,port,the,port,of,the,job,manager,to,send,the,program,to,param,client,configuration,the,configuration,for,the,client,akka,default,parallelism,param,jar,files,a,list,of,jar,files,that,contain,the,user,defined,function,udf,classes,and,all,classes,used,from,within,the,udfs,param,global,classpaths,a,list,of,urls,that,are,added,to,the,classpath,of,each,user,code,classloader,of,the,program,paths,must,specify,a,protocol,e,g,file,and,be,accessible,on,all,nodes,return,a,remote,executor;public,static,plan,executor,create,remote,executor,string,hostname,int,port,configuration,client,configuration,url,jar,files,url,global,classpaths,if,hostname,null,throw,new,illegal,argument,exception,the,hostname,must,not,be,null,if,port,0,port,0xffff,throw,new,illegal,argument,exception,the,port,value,is,out,of,range,class,extends,plan,executor,re,class,load,executor,class,list,url,files,jar,files,null,jar,files,length,0,collections,url,empty,list,arrays,as,list,jar,files,list,url,paths,global,classpaths,null,global,classpaths,length,0,collections,url,empty,list,arrays,as,list,global,classpaths,try,plan,executor,executor,client,configuration,null,re,class,get,constructor,string,class,int,class,list,class,new,instance,hostname,port,files,re,class,get,constructor,string,class,int,class,configuration,class,list,class,list,class,new,instance,hostname,port,client,configuration,files,paths,return,executor,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,remote,executor,t
PlanExecutor -> public static PlanExecutor createRemoteExecutor(String hostname, int port, Configuration clientConfiguration, 			URL[] jarFiles, URL[] globalClasspaths);1455479358;Creates an executor that runs the plan on a remote environment. The remote executor is typically used_to send the program to a cluster for execution.__@param hostname The address of the JobManager to send the program to._@param port The port of the JobManager to send the program to._@param clientConfiguration The configuration for the client (Akka, default.parallelism)._@param jarFiles A list of jar files that contain the user-defined function (UDF) classes and all classes used_from within the UDFs._@param globalClasspaths A list of URLs that are added to the classpath of each user code classloader of the_program. Paths must specify a protocol (e.g. file://) and be accessible on all nodes._@return A remote executor.;public static PlanExecutor createRemoteExecutor(String hostname, int port, Configuration clientConfiguration,_			URL[] jarFiles, URL[] globalClasspaths) {_		if (hostname == null) {_			throw new IllegalArgumentException("The hostname must not be null.")__		}_		if (port <= 0 || port > 0xffff) {_			throw new IllegalArgumentException("The port value is out of range.")__		}_		_		Class<? extends PlanExecutor> reClass = loadExecutorClass(REMOTE_EXECUTOR_CLASS)__		_		List<URL> files = (jarFiles == null || jarFiles.length == 0) ?_				Collections.<URL>emptyList() : Arrays.asList(jarFiles)__		List<URL> paths = (globalClasspaths == null || globalClasspaths.length == 0) ?_				Collections.<URL>emptyList() : Arrays.asList(globalClasspaths)___		try {_			PlanExecutor executor = (clientConfiguration == null) ?_					reClass.getConstructor(String.class, int.class, List.class)_						.newInstance(hostname, port, files) :_					reClass.getConstructor(String.class, int.class, Configuration.class, List.class, List.class)_						.newInstance(hostname, port, clientConfiguration, files, paths)__			return executor__		}_		catch (Throwable t) {_			throw new RuntimeException("An error occurred while loading the remote executor ("_					+ REMOTE_EXECUTOR_CLASS + ").", t)__		}_	};creates,an,executor,that,runs,the,plan,on,a,remote,environment,the,remote,executor,is,typically,used,to,send,the,program,to,a,cluster,for,execution,param,hostname,the,address,of,the,job,manager,to,send,the,program,to,param,port,the,port,of,the,job,manager,to,send,the,program,to,param,client,configuration,the,configuration,for,the,client,akka,default,parallelism,param,jar,files,a,list,of,jar,files,that,contain,the,user,defined,function,udf,classes,and,all,classes,used,from,within,the,udfs,param,global,classpaths,a,list,of,urls,that,are,added,to,the,classpath,of,each,user,code,classloader,of,the,program,paths,must,specify,a,protocol,e,g,file,and,be,accessible,on,all,nodes,return,a,remote,executor;public,static,plan,executor,create,remote,executor,string,hostname,int,port,configuration,client,configuration,url,jar,files,url,global,classpaths,if,hostname,null,throw,new,illegal,argument,exception,the,hostname,must,not,be,null,if,port,0,port,0xffff,throw,new,illegal,argument,exception,the,port,value,is,out,of,range,class,extends,plan,executor,re,class,load,executor,class,list,url,files,jar,files,null,jar,files,length,0,collections,url,empty,list,arrays,as,list,jar,files,list,url,paths,global,classpaths,null,global,classpaths,length,0,collections,url,empty,list,arrays,as,list,global,classpaths,try,plan,executor,executor,client,configuration,null,re,class,get,constructor,string,class,int,class,list,class,new,instance,hostname,port,files,re,class,get,constructor,string,class,int,class,configuration,class,list,class,list,class,new,instance,hostname,port,client,configuration,files,paths,return,executor,catch,throwable,t,throw,new,runtime,exception,an,error,occurred,while,loading,the,remote,executor,t
PlanExecutor -> public abstract void stop() throws Exception_;1442944546;Shuts down the plan executor and releases all local resources.__<p>This method also ends all sessions created by this executor. Remote job executions_may complete, but the session is not kept alive after that.</p>__@throws Exception Thrown, if the proper shutdown failed.;public abstract void stop() throws Exception_;shuts,down,the,plan,executor,and,releases,all,local,resources,p,this,method,also,ends,all,sessions,created,by,this,executor,remote,job,executions,may,complete,but,the,session,is,not,kept,alive,after,that,p,throws,exception,thrown,if,the,proper,shutdown,failed;public,abstract,void,stop,throws,exception
PlanExecutor -> public abstract void stop() throws Exception_;1444312509;Shuts down the plan executor and releases all local resources.__<p>This method also ends all sessions created by this executor. Remote job executions_may complete, but the session is not kept alive after that.</p>__@throws Exception Thrown, if the proper shutdown failed.;public abstract void stop() throws Exception_;shuts,down,the,plan,executor,and,releases,all,local,resources,p,this,method,also,ends,all,sessions,created,by,this,executor,remote,job,executions,may,complete,but,the,session,is,not,kept,alive,after,that,p,throws,exception,thrown,if,the,proper,shutdown,failed;public,abstract,void,stop,throws,exception
PlanExecutor -> public abstract void stop() throws Exception_;1455479358;Shuts down the plan executor and releases all local resources.__<p>This method also ends all sessions created by this executor. Remote job executions_may complete, but the session is not kept alive after that.</p>__@throws Exception Thrown, if the proper shutdown failed.;public abstract void stop() throws Exception_;shuts,down,the,plan,executor,and,releases,all,local,resources,p,this,method,also,ends,all,sessions,created,by,this,executor,remote,job,executions,may,complete,but,the,session,is,not,kept,alive,after,that,p,throws,exception,thrown,if,the,proper,shutdown,failed;public,abstract,void,stop,throws,exception
PlanExecutor -> public abstract void stop() throws Exception_;1461591030;Shuts down the plan executor and releases all local resources.__<p>This method also ends all sessions created by this executor. Remote job executions_may complete, but the session is not kept alive after that.</p>__@throws Exception Thrown, if the proper shutdown failed.;public abstract void stop() throws Exception_;shuts,down,the,plan,executor,and,releases,all,local,resources,p,this,method,also,ends,all,sessions,created,by,this,executor,remote,job,executions,may,complete,but,the,session,is,not,kept,alive,after,that,p,throws,exception,thrown,if,the,proper,shutdown,failed;public,abstract,void,stop,throws,exception
PlanExecutor -> public void setPrintStatusDuringExecution(boolean printStatus);1442944546;Sets whether the executor should print progress results to "standard out" ({@link System#out})._All progress messages are logged using the configured logging framework independent of the value_set here.__@param printStatus True, to print progress updates to standard out, false to not do that.;public void setPrintStatusDuringExecution(boolean printStatus) {_		this.printUpdatesToSysout = printStatus__	};sets,whether,the,executor,should,print,progress,results,to,standard,out,link,system,out,all,progress,messages,are,logged,using,the,configured,logging,framework,independent,of,the,value,set,here,param,print,status,true,to,print,progress,updates,to,standard,out,false,to,not,do,that;public,void,set,print,status,during,execution,boolean,print,status,this,print,updates,to,sysout,print,status
PlanExecutor -> public void setPrintStatusDuringExecution(boolean printStatus);1444312509;Sets whether the executor should print progress results to "standard out" ({@link System#out})._All progress messages are logged using the configured logging framework independent of the value_set here.__@param printStatus True, to print progress updates to standard out, false to not do that.;public void setPrintStatusDuringExecution(boolean printStatus) {_		this.printUpdatesToSysout = printStatus__	};sets,whether,the,executor,should,print,progress,results,to,standard,out,link,system,out,all,progress,messages,are,logged,using,the,configured,logging,framework,independent,of,the,value,set,here,param,print,status,true,to,print,progress,updates,to,standard,out,false,to,not,do,that;public,void,set,print,status,during,execution,boolean,print,status,this,print,updates,to,sysout,print,status
PlanExecutor -> public void setPrintStatusDuringExecution(boolean printStatus);1455479358;Sets whether the executor should print progress results to "standard out" ({@link System#out})._All progress messages are logged using the configured logging framework independent of the value_set here.__@param printStatus True, to print progress updates to standard out, false to not do that.;public void setPrintStatusDuringExecution(boolean printStatus) {_		this.printUpdatesToSysout = printStatus__	};sets,whether,the,executor,should,print,progress,results,to,standard,out,link,system,out,all,progress,messages,are,logged,using,the,configured,logging,framework,independent,of,the,value,set,here,param,print,status,true,to,print,progress,updates,to,standard,out,false,to,not,do,that;public,void,set,print,status,during,execution,boolean,print,status,this,print,updates,to,sysout,print,status
PlanExecutor -> public void setPrintStatusDuringExecution(boolean printStatus);1461591030;Sets whether the executor should print progress results to "standard out" ({@link System#out})._All progress messages are logged using the configured logging framework independent of the value_set here.__@param printStatus True, to print progress updates to standard out, false to not do that.;public void setPrintStatusDuringExecution(boolean printStatus) {_		this.printUpdatesToSysout = printStatus__	};sets,whether,the,executor,should,print,progress,results,to,standard,out,link,system,out,all,progress,messages,are,logged,using,the,configured,logging,framework,independent,of,the,value,set,here,param,print,status,true,to,print,progress,updates,to,standard,out,false,to,not,do,that;public,void,set,print,status,during,execution,boolean,print,status,this,print,updates,to,sysout,print,status
PlanExecutor -> public boolean isPrintingStatusDuringExecution();1442944546;Gets whether the executor prints progress results to "standard out" ({@link System#out}).__@return True, if the executor prints progress messages to standard out, false if not.;public boolean isPrintingStatusDuringExecution() {_		return this.printUpdatesToSysout__	};gets,whether,the,executor,prints,progress,results,to,standard,out,link,system,out,return,true,if,the,executor,prints,progress,messages,to,standard,out,false,if,not;public,boolean,is,printing,status,during,execution,return,this,print,updates,to,sysout
PlanExecutor -> public boolean isPrintingStatusDuringExecution();1444312509;Gets whether the executor prints progress results to "standard out" ({@link System#out}).__@return True, if the executor prints progress messages to standard out, false if not.;public boolean isPrintingStatusDuringExecution() {_		return this.printUpdatesToSysout__	};gets,whether,the,executor,prints,progress,results,to,standard,out,link,system,out,return,true,if,the,executor,prints,progress,messages,to,standard,out,false,if,not;public,boolean,is,printing,status,during,execution,return,this,print,updates,to,sysout
PlanExecutor -> public boolean isPrintingStatusDuringExecution();1455479358;Gets whether the executor prints progress results to "standard out" ({@link System#out}).__@return True, if the executor prints progress messages to standard out, false if not.;public boolean isPrintingStatusDuringExecution() {_		return this.printUpdatesToSysout__	};gets,whether,the,executor,prints,progress,results,to,standard,out,link,system,out,return,true,if,the,executor,prints,progress,messages,to,standard,out,false,if,not;public,boolean,is,printing,status,during,execution,return,this,print,updates,to,sysout
PlanExecutor -> public boolean isPrintingStatusDuringExecution();1461591030;Gets whether the executor prints progress results to "standard out" ({@link System#out}).__@return True, if the executor prints progress messages to standard out, false if not.;public boolean isPrintingStatusDuringExecution() {_		return this.printUpdatesToSysout__	};gets,whether,the,executor,prints,progress,results,to,standard,out,link,system,out,return,true,if,the,executor,prints,progress,messages,to,standard,out,false,if,not;public,boolean,is,printing,status,during,execution,return,this,print,updates,to,sysout
PlanExecutor -> public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;1405024514;Gets the programs execution plan in a JSON format.__@param plan The program to get the execution plan for._@return The execution plan, as a JSON string.__@throws Exception Thrown, if the executor could not connect to the compiler.;public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;gets,the,programs,execution,plan,in,a,json,format,param,plan,the,program,to,get,the,execution,plan,for,return,the,execution,plan,as,a,json,string,throws,exception,thrown,if,the,executor,could,not,connect,to,the,compiler;public,abstract,string,get,optimizer,plan,as,json,plan,plan,throws,exception
PlanExecutor -> public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;1405090423;Gets the programs execution plan in a JSON format.__@param plan The program to get the execution plan for._@return The execution plan, as a JSON string.__@throws Exception Thrown, if the executor could not connect to the compiler.;public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;gets,the,programs,execution,plan,in,a,json,format,param,plan,the,program,to,get,the,execution,plan,for,return,the,execution,plan,as,a,json,string,throws,exception,thrown,if,the,executor,could,not,connect,to,the,compiler;public,abstract,string,get,optimizer,plan,as,json,plan,plan,throws,exception
PlanExecutor -> public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;1411473593;Gets the programs execution plan in a JSON format.__@param plan The program to get the execution plan for._@return The execution plan, as a JSON string.__@throws Exception Thrown, if the executor could not connect to the compiler.;public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;gets,the,programs,execution,plan,in,a,json,format,param,plan,the,program,to,get,the,execution,plan,for,return,the,execution,plan,as,a,json,string,throws,exception,thrown,if,the,executor,could,not,connect,to,the,compiler;public,abstract,string,get,optimizer,plan,as,json,plan,plan,throws,exception
PlanExecutor -> public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;1414429739;Gets the programs execution plan in a JSON format.__@param plan The program to get the execution plan for._@return The execution plan, as a JSON string.__@throws Exception Thrown, if the executor could not connect to the compiler.;public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;gets,the,programs,execution,plan,in,a,json,format,param,plan,the,program,to,get,the,execution,plan,for,return,the,execution,plan,as,a,json,string,throws,exception,thrown,if,the,executor,could,not,connect,to,the,compiler;public,abstract,string,get,optimizer,plan,as,json,plan,plan,throws,exception
PlanExecutor -> public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;1427958028;Gets the programs execution plan in a JSON format.__@param plan The program to get the execution plan for._@return The execution plan, as a JSON string.__@throws Exception Thrown, if the executor could not connect to the compiler.;public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;gets,the,programs,execution,plan,in,a,json,format,param,plan,the,program,to,get,the,execution,plan,for,return,the,execution,plan,as,a,json,string,throws,exception,thrown,if,the,executor,could,not,connect,to,the,compiler;public,abstract,string,get,optimizer,plan,as,json,plan,plan,throws,exception
PlanExecutor -> public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;1428935901;Gets the programs execution plan in a JSON format.__@param plan The program to get the execution plan for._@return The execution plan, as a JSON string.__@throws Exception Thrown, if the executor could not connect to the compiler.;public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;gets,the,programs,execution,plan,in,a,json,format,param,plan,the,program,to,get,the,execution,plan,for,return,the,execution,plan,as,a,json,string,throws,exception,thrown,if,the,executor,could,not,connect,to,the,compiler;public,abstract,string,get,optimizer,plan,as,json,plan,plan,throws,exception
PlanExecutor -> public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;1442312344;Gets the programs execution plan in a JSON format.__@param plan The program to get the execution plan for._@return The execution plan, as a JSON string.__@throws Exception Thrown, if the executor could not connect to the compiler.;public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;gets,the,programs,execution,plan,in,a,json,format,param,plan,the,program,to,get,the,execution,plan,for,return,the,execution,plan,as,a,json,string,throws,exception,thrown,if,the,executor,could,not,connect,to,the,compiler;public,abstract,string,get,optimizer,plan,as,json,plan,plan,throws,exception
PlanExecutor -> public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;1442944546;Gets the programs execution plan in a JSON format.__@param plan The program to get the execution plan for._@return The execution plan, as a JSON string.__@throws Exception Thrown, if the executor could not connect to the compiler.;public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;gets,the,programs,execution,plan,in,a,json,format,param,plan,the,program,to,get,the,execution,plan,for,return,the,execution,plan,as,a,json,string,throws,exception,thrown,if,the,executor,could,not,connect,to,the,compiler;public,abstract,string,get,optimizer,plan,as,json,plan,plan,throws,exception
PlanExecutor -> public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;1444312509;Gets the programs execution plan in a JSON format.__@param plan The program to get the execution plan for._@return The execution plan, as a JSON string.__@throws Exception Thrown, if the executor could not connect to the compiler.;public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;gets,the,programs,execution,plan,in,a,json,format,param,plan,the,program,to,get,the,execution,plan,for,return,the,execution,plan,as,a,json,string,throws,exception,thrown,if,the,executor,could,not,connect,to,the,compiler;public,abstract,string,get,optimizer,plan,as,json,plan,plan,throws,exception
PlanExecutor -> public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;1455479358;Gets the programs execution plan in a JSON format.__@param plan The program to get the execution plan for._@return The execution plan, as a JSON string.__@throws Exception Thrown, if the executor could not connect to the compiler.;public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;gets,the,programs,execution,plan,in,a,json,format,param,plan,the,program,to,get,the,execution,plan,for,return,the,execution,plan,as,a,json,string,throws,exception,thrown,if,the,executor,could,not,connect,to,the,compiler;public,abstract,string,get,optimizer,plan,as,json,plan,plan,throws,exception
PlanExecutor -> public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;1461591030;Gets the programs execution plan in a JSON format.__@param plan The program to get the execution plan for._@return The execution plan, as a JSON string.__@throws Exception Thrown, if the executor could not connect to the compiler.;public abstract String getOptimizerPlanAsJSON(Plan plan) throws Exception_;gets,the,programs,execution,plan,in,a,json,format,param,plan,the,program,to,get,the,execution,plan,for,return,the,execution,plan,as,a,json,string,throws,exception,thrown,if,the,executor,could,not,connect,to,the,compiler;public,abstract,string,get,optimizer,plan,as,json,plan,plan,throws,exception
