# id;timestamp;commentText;codeText;commentWords;codeWords
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1508928742;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1515408361;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1516295284;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1516295284;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1516971025;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1517489696;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1520032169;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1520522528;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1521828709;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1528876304;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage() != null && t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,null,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1537436047;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage() != null && t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,null,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage);1549545568;Checks whether a throwable chain contains a specific error message and returns the corresponding throwable.__@param throwable the throwable chain to check._@param searchMessage the error message to search for in the chain._@return Optional throwable containing the search message if available, otherwise empty;public static Optional<Throwable> findThrowableWithMessage(Throwable throwable, String searchMessage) {_		if (throwable == null || searchMessage == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (t.getMessage() != null && t.getMessage().contains(searchMessage)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,error,message,and,returns,the,corresponding,throwable,param,throwable,the,throwable,chain,to,check,param,search,message,the,error,message,to,search,for,in,the,chain,return,optional,throwable,containing,the,search,message,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,with,message,throwable,throwable,string,search,message,if,throwable,null,search,message,null,return,optional,empty,throwable,t,throwable,while,t,null,if,t,get,message,null,t,get,message,contains,search,message,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1482206691;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1482522863;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1486740511;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1487548884;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1487948320;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1488304750;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1489060856;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1502355550;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1504475038;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1506553599;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1508928742;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1515408361;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1516295284;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1516295284;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1516971025;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1517489696;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1520032169;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1520522528;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1521828709;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1528876304;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1537436047;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous);1549545568;Adds a new exception as a {@link Throwable#addSuppressed(Throwable) suppressed exception}_to a prior exception, or returns the new exception, if no prior exception exists.__<pre>{@code__public void closeAllThings() throws Exception {_Exception ex = null__try {_component.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_anotherComponent.stop()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)___try {_lastComponent.shutdown()__} catch (Exception e) {_ex = firstOrSuppressed(e, ex)____if (ex != null) {_throw ex____}</pre>__@param newException The newly occurred exception_@param previous     The previously occurred exception, possibly null.__@return The new exception, if no previous exception exists, or the previous exception with the_new exception in the list of suppressed exceptions.;public static <T extends Throwable> T firstOrSuppressed(T newException, @Nullable T previous) {_		checkNotNull(newException, "newException")___		if (previous == null) {_			return newException__		} else {_			previous.addSuppressed(newException)__			return previous__		}_	};adds,a,new,exception,as,a,link,throwable,add,suppressed,throwable,suppressed,exception,to,a,prior,exception,or,returns,the,new,exception,if,no,prior,exception,exists,pre,code,public,void,close,all,things,throws,exception,exception,ex,null,try,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,try,another,component,stop,catch,exception,e,ex,first,or,suppressed,e,ex,try,last,component,shutdown,catch,exception,e,ex,first,or,suppressed,e,ex,if,ex,null,throw,ex,pre,param,new,exception,the,newly,occurred,exception,param,previous,the,previously,occurred,exception,possibly,null,return,the,new,exception,if,no,previous,exception,exists,or,the,previous,exception,with,the,new,exception,in,the,list,of,suppressed,exceptions;public,static,t,extends,throwable,t,first,or,suppressed,t,new,exception,nullable,t,previous,check,not,null,new,exception,new,exception,if,previous,null,return,new,exception,else,previous,add,suppressed,new,exception,return,previous
ExceptionUtils -> public static boolean containsThrowable(Throwable throwable, Class<?> searchType);1488304750;Checks whether a throwable chain contains a specific type of exception.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return True, if the searched type is nested in the throwable, false otherwise.;public static boolean containsThrowable(Throwable throwable, Class<?> searchType) {_		if (throwable == null || searchType == null) {_			return false__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return true__			} else {_				t = t.getCause()__			}_		}__		return false__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,true,if,the,searched,type,is,nested,in,the,throwable,false,otherwise;public,static,boolean,contains,throwable,throwable,throwable,class,search,type,if,throwable,null,search,type,null,return,false,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,true,else,t,t,get,cause,return,false
ExceptionUtils -> public static boolean containsThrowable(Throwable throwable, Class<?> searchType);1489060856;Checks whether a throwable chain contains a specific type of exception.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return True, if the searched type is nested in the throwable, false otherwise.;public static boolean containsThrowable(Throwable throwable, Class<?> searchType) {_		if (throwable == null || searchType == null) {_			return false__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return true__			} else {_				t = t.getCause()__			}_		}__		return false__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,true,if,the,searched,type,is,nested,in,the,throwable,false,otherwise;public,static,boolean,contains,throwable,throwable,throwable,class,search,type,if,throwable,null,search,type,null,return,false,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,true,else,t,t,get,cause,return,false
ExceptionUtils -> public static boolean containsThrowable(Throwable throwable, Class<?> searchType);1502355550;Checks whether a throwable chain contains a specific type of exception.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return True, if the searched type is nested in the throwable, false otherwise.;public static boolean containsThrowable(Throwable throwable, Class<?> searchType) {_		if (throwable == null || searchType == null) {_			return false__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return true__			} else {_				t = t.getCause()__			}_		}__		return false__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,true,if,the,searched,type,is,nested,in,the,throwable,false,otherwise;public,static,boolean,contains,throwable,throwable,throwable,class,search,type,if,throwable,null,search,type,null,return,false,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,true,else,t,t,get,cause,return,false
ExceptionUtils -> public static void rethrowException(Throwable t) throws Exception;1517489696;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown.;public static void rethrowException(Throwable t) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(t.getMessage(), t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,exception,throwable,t,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,t,get,message,t
ExceptionUtils -> public static void rethrowException(Throwable t) throws Exception;1520032169;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown.;public static void rethrowException(Throwable t) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(t.getMessage(), t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,exception,throwable,t,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,t,get,message,t
ExceptionUtils -> public static void rethrowException(Throwable t) throws Exception;1520522528;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown.;public static void rethrowException(Throwable t) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(t.getMessage(), t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,exception,throwable,t,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,t,get,message,t
ExceptionUtils -> public static void rethrowException(Throwable t) throws Exception;1521828709;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown.;public static void rethrowException(Throwable t) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(t.getMessage(), t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,exception,throwable,t,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,t,get,message,t
ExceptionUtils -> public static void rethrowException(Throwable t) throws Exception;1528876304;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown.;public static void rethrowException(Throwable t) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(t.getMessage(), t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,exception,throwable,t,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,t,get,message,t
ExceptionUtils -> public static void rethrowException(Throwable t) throws Exception;1537436047;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown.;public static void rethrowException(Throwable t) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(t.getMessage(), t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,exception,throwable,t,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,t,get,message,t
ExceptionUtils -> public static void rethrowException(Throwable t) throws Exception;1549545568;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown.;public static void rethrowException(Throwable t) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(t.getMessage(), t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,exception,throwable,t,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1468595884;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1478079987;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1479319687;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1482206691;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1482522863;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1486740511;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1487548884;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1487948320;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1488304750;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1489060856;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1502355550;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1504475038;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1506553599;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1508928742;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1515408361;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1516295284;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1516295284;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__<p>Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,p,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1516971025;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__<p>Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,p,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1517489696;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__<p>Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,p,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1520032169;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__<p>Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,p,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1520522528;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__<p>Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,p,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1521828709;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__<p>Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,p,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1528876304;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__<p>Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,p,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1537436047;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__<p>Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,p,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> public static void rethrowIOException(Throwable t) throws IOException;1549545568;Re-throws the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error).__<p>Throws this exception directly, if it is an IOException, a RuntimeException, or an Error. Otherwise it_wraps it in an IOException and throws it.__@param t The Throwable to be thrown.;public static void rethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_		else {_			throw new IOException(t.getMessage(), t)__		}_	};re,throws,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,p,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,it,wraps,it,in,an,ioexception,and,throws,it,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t,else,throw,new,ioexception,t,get,message,t
ExceptionUtils -> private ExceptionUtils();1443564120;Private constructor to prevent instantiation.;private ExceptionUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,exception,utils,throw,new,runtime,exception
ExceptionUtils -> private ExceptionUtils();1455479358;Private constructor to prevent instantiation.;private ExceptionUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,exception,utils,throw,new,runtime,exception
ExceptionUtils -> private ExceptionUtils();1468595884;Private constructor to prevent instantiation.;private ExceptionUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,exception,utils,throw,new,runtime,exception
ExceptionUtils -> private ExceptionUtils();1478079987;Private constructor to prevent instantiation.;private ExceptionUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,exception,utils,throw,new,runtime,exception
ExceptionUtils -> private ExceptionUtils();1479319687;Private constructor to prevent instantiation.;private ExceptionUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,exception,utils,throw,new,runtime,exception
ExceptionUtils -> private ExceptionUtils();1482206691;Private constructor to prevent instantiation.;private ExceptionUtils() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,exception,utils,throw,new,runtime,exception
ExceptionUtils -> private ExceptionUtils();1482522863;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1486740511;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1487548884;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1487948320;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1488304750;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1489060856;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1502355550;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1504475038;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1506553599;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1508928742;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1515408361;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1516295284;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1516295284;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1516971025;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1517489696;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1520032169;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1520522528;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1521828709;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1528876304;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1537436047;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> private ExceptionUtils();1549545568;Private constructor to prevent instantiation.;private ExceptionUtils() {};private,constructor,to,prevent,instantiation;private,exception,utils
ExceptionUtils -> public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType);1504475038;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,throwable,throwable,class,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType);1506553599;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,throwable,throwable,class,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType);1508928742;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,throwable,throwable,class,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType);1515408361;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,throwable,throwable,class,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType);1516295284;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,throwable,throwable,class,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType);1516295284;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static Optional<Throwable> findThrowable(Throwable throwable, Class<?> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,throwable,throwable,class,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1424732907;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1443564120;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1455479358;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1468595884;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1478079987;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1479319687;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1482206691;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1482522863;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1486740511;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1487548884;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1487948320;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1488304750;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1489060856;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1502355550;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1504475038;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1506553599;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1508928742;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1515408361;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1516295284;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1516295284;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1516971025;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1517489696;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1520032169;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1520522528;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1521828709;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1528876304;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1537436047;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static void tryRethrowIOException(Throwable t) throws IOException;1549545568;Tries to throw the given {@code Throwable} in scenarios where the signatures allows only IOExceptions_(and RuntimeException and Error). Throws this exception directly, if it is an IOException,_a RuntimeException, or an Error. Otherwise does nothing.__@param t The Throwable to be thrown.;public static void tryRethrowIOException(Throwable t) throws IOException {_		if (t instanceof IOException) {_			throw (IOException) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else if (t instanceof Error) {_			throw (Error) t__		}_	};tries,to,throw,the,given,code,throwable,in,scenarios,where,the,signatures,allows,only,ioexceptions,and,runtime,exception,and,error,throws,this,exception,directly,if,it,is,an,ioexception,a,runtime,exception,or,an,error,otherwise,does,nothing,param,t,the,throwable,to,be,thrown;public,static,void,try,rethrow,ioexception,throwable,t,throws,ioexception,if,t,instanceof,ioexception,throw,ioexception,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,if,t,instanceof,error,throw,error,t
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1486740511;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1487548884;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1487948320;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1488304750;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1489060856;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1502355550;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1504475038;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1506553599;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1508928742;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1515408361;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1516295284;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1516295284;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1516971025;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1517489696;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1520032169;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1520522528;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1521828709;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1528876304;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1537436047;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static boolean isJvmFatalOrOutOfMemoryError(Throwable t);1549545568;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, or an out-of-memory error.__<p>See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a list of fatal JVM errors._This method additionally classifies the {@link OutOfMemoryError} as fatal, because it_may occur in any thread (not the one that allocated the majority of the memory) and thus_is often not recoverable by destroying the particular thread that threw the exception.__@param t The exception to check._@return True, if the exception is fatal to the JVM or and OutOfMemoryError, false otherwise.;public static boolean isJvmFatalOrOutOfMemoryError(Throwable t) {_		return isJvmFatalError(t) || t instanceof OutOfMemoryError__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,or,an,out,of,memory,error,p,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,list,of,fatal,jvm,errors,this,method,additionally,classifies,the,link,out,of,memory,error,as,fatal,because,it,may,occur,in,any,thread,not,the,one,that,allocated,the,majority,of,the,memory,and,thus,is,often,not,recoverable,by,destroying,the,particular,thread,that,threw,the,exception,param,t,the,exception,to,check,return,true,if,the,exception,is,fatal,to,the,jvm,or,and,out,of,memory,error,false,otherwise;public,static,boolean,is,jvm,fatal,or,out,of,memory,error,throwable,t,return,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1479319687;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1482206691;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1482522863;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1486740511;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1487548884;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1487948320;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1488304750;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1489060856;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1502355550;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1504475038;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1506553599;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1508928742;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1515408361;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1516295284;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1516295284;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1516971025;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1517489696;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1520032169;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1520522528;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1521828709;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1528876304;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1537436047;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static void rethrowException(Throwable t, String parentMessage) throws Exception;1549545568;Throws the given {@code Throwable} in scenarios where the signatures do allow to_throw a Exception. Errors and Exceptions are thrown directly, other "exotic"_subclasses of Throwable are wrapped in an Exception.__@param t The throwable to be thrown._@param parentMessage The message for the parent Exception, if one is needed.;public static void rethrowException(Throwable t, String parentMessage) throws Exception {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof Exception) {_			throw (Exception) t__		}_		else {_			throw new Exception(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,allow,to,throw,a,exception,errors,and,exceptions,are,thrown,directly,other,exotic,subclasses,of,throwable,are,wrapped,in,an,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,exception,if,one,is,needed;public,static,void,rethrow,exception,throwable,t,string,parent,message,throws,exception,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,exception,throw,exception,t,else,throw,new,exception,parent,message,t
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1506553599;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		while (throwable instanceof CompletionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,while,throwable,instanceof,completion,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1508928742;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		while (throwable instanceof CompletionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,while,throwable,instanceof,completion,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1515408361;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		while (throwable instanceof CompletionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,while,throwable,instanceof,completion,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1516295284;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		while (throwable instanceof CompletionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,while,throwable,instanceof,completion,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1516295284;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		while (throwable instanceof CompletionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,while,throwable,instanceof,completion,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1516971025;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		while (throwable instanceof CompletionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,while,throwable,instanceof,completion,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1517489696;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		while (throwable instanceof CompletionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,while,throwable,instanceof,completion,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1520032169;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		while (throwable instanceof CompletionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,while,throwable,instanceof,completion,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1520522528;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		while (throwable instanceof CompletionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,while,throwable,instanceof,completion,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1521828709;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		while (throwable instanceof CompletionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,while,throwable,instanceof,completion,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1528876304;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		while (throwable instanceof CompletionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,while,throwable,instanceof,completion,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1537436047;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		return stripException(throwable, CompletionException.class)__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,return,strip,exception,throwable,completion,exception,class
ExceptionUtils -> public static Throwable stripCompletionException(Throwable throwable);1549545568;Unpacks an {@link CompletionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an CompletionException_@return Cause of CompletionException or given Throwable;public static Throwable stripCompletionException(Throwable throwable) {_		return stripException(throwable, CompletionException.class)__	};unpacks,an,link,completion,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,completion,exception,return,cause,of,completion,exception,or,given,throwable;public,static,throwable,strip,completion,exception,throwable,throwable,return,strip,exception,throwable,completion,exception,class
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1486740511;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1487548884;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1487948320;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1488304750;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1489060856;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1502355550;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1504475038;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1506553599;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1508928742;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1515408361;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1516295284;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1516295284;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1516971025;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1517489696;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1520032169;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError).__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1520522528;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError)._The {@link ThreadDeath} exception is also treated as a fatal error, because when_a thread is forcefully stopped, there is a high chance that parts of the system_are in an inconsistent state.__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError) || (t instanceof ThreadDeath)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,the,link,thread,death,exception,is,also,treated,as,a,fatal,error,because,when,a,thread,is,forcefully,stopped,there,is,a,high,chance,that,parts,of,the,system,are,in,an,inconsistent,state,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error,t,instanceof,thread,death
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1521828709;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError)._The {@link ThreadDeath} exception is also treated as a fatal error, because when_a thread is forcefully stopped, there is a high chance that parts of the system_are in an inconsistent state.__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError) || (t instanceof ThreadDeath)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,the,link,thread,death,exception,is,also,treated,as,a,fatal,error,because,when,a,thread,is,forcefully,stopped,there,is,a,high,chance,that,parts,of,the,system,are,in,an,inconsistent,state,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error,t,instanceof,thread,death
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1528876304;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError)._The {@link ThreadDeath} exception is also treated as a fatal error, because when_a thread is forcefully stopped, there is a high chance that parts of the system_are in an inconsistent state.__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError) || (t instanceof ThreadDeath)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,the,link,thread,death,exception,is,also,treated,as,a,fatal,error,because,when,a,thread,is,forcefully,stopped,there,is,a,high,chance,that,parts,of,the,system,are,in,an,inconsistent,state,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error,t,instanceof,thread,death
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1537436047;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError)._The {@link ThreadDeath} exception is also treated as a fatal error, because when_a thread is forcefully stopped, there is a high chance that parts of the system_are in an inconsistent state.__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError) || (t instanceof ThreadDeath)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,the,link,thread,death,exception,is,also,treated,as,a,fatal,error,because,when,a,thread,is,forcefully,stopped,there,is,a,high,chance,that,parts,of,the,system,are,in,an,inconsistent,state,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error,t,instanceof,thread,death
ExceptionUtils -> public static boolean isJvmFatalError(Throwable t);1549545568;Checks whether the given exception indicates a situation that may leave the_JVM in a corrupted state, meaning a state where continued normal operation can only be_guaranteed via clean process restart.__<p>Currently considered fatal exceptions are Virtual Machine errors indicating_that the JVM is corrupted, like {@link InternalError}, {@link UnknownError},_and {@link java.util.zip.ZipError} (a special case of InternalError)._The {@link ThreadDeath} exception is also treated as a fatal error, because when_a thread is forcefully stopped, there is a high chance that parts of the system_are in an inconsistent state.__@param t The exception to check._@return True, if the exception is considered fatal to the JVM, false otherwise.;public static boolean isJvmFatalError(Throwable t) {_		return (t instanceof InternalError) || (t instanceof UnknownError) || (t instanceof ThreadDeath)__	};checks,whether,the,given,exception,indicates,a,situation,that,may,leave,the,jvm,in,a,corrupted,state,meaning,a,state,where,continued,normal,operation,can,only,be,guaranteed,via,clean,process,restart,p,currently,considered,fatal,exceptions,are,virtual,machine,errors,indicating,that,the,jvm,is,corrupted,like,link,internal,error,link,unknown,error,and,link,java,util,zip,zip,error,a,special,case,of,internal,error,the,link,thread,death,exception,is,also,treated,as,a,fatal,error,because,when,a,thread,is,forcefully,stopped,there,is,a,high,chance,that,parts,of,the,system,are,in,an,inconsistent,state,param,t,the,exception,to,check,return,true,if,the,exception,is,considered,fatal,to,the,jvm,false,otherwise;public,static,boolean,is,jvm,fatal,error,throwable,t,return,t,instanceof,internal,error,t,instanceof,unknown,error,t,instanceof,thread,death
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1489060856;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1502355550;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1504475038;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1506553599;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1508928742;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1515408361;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1516295284;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1516295284;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1516971025;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1517489696;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1520032169;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1520522528;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1521828709;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1528876304;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1537436047;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalErrorOrOOM(Throwable t);1549545568;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM_or an out-of-memory error. See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a_definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalErrorOrOOM(Throwable t) {_		if (isJvmFatalError(t) || t instanceof OutOfMemoryError) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,or,an,out,of,memory,error,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,or,oom,throwable,t,if,is,jvm,fatal,error,t,t,instanceof,out,of,memory,error,throw,error,t
ExceptionUtils -> public static void rethrow(Throwable t);1411236168;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw arbitrary Throwables. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,arbitrary,throwables,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1411236168;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw arbitrary Throwables. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,arbitrary,throwables,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1411236169;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw arbitrary Throwables. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,arbitrary,throwables,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1411473593;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw arbitrary Throwables. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,arbitrary,throwables,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1424732907;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1443564120;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1455479358;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1468595884;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1478079987;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1479319687;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1482206691;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1482522863;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1486740511;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1487548884;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1487948320;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1488304750;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1489060856;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1502355550;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1504475038;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1506553599;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1508928742;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1515408361;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1516295284;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1516295284;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1516971025;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1517489696;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1520032169;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1520522528;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1521828709;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1528876304;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1537436047;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t);1549545568;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into runtime exceptions__@param t The throwable to be thrown.;public static void rethrow(Throwable t) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,runtime,exceptions,param,t,the,throwable,to,be,thrown;public,static,void,rethrow,throwable,t,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1411236168;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw arbitrary Throwables. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeEception.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,arbitrary,throwables,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,eception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1411236168;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw arbitrary Throwables. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeEception.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,arbitrary,throwables,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,eception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1411236169;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw arbitrary Throwables. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeEception.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,arbitrary,throwables,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,eception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1411473593;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw arbitrary Throwables. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeEception.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,arbitrary,throwables,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,eception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1424732907;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1443564120;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1455479358;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1468595884;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1478079987;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1479319687;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1482206691;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1482522863;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1486740511;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1487548884;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1487948320;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1488304750;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1489060856;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1502355550;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1504475038;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1506553599;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1508928742;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1515408361;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1516295284;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1516295284;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1516971025;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1517489696;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1520032169;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1520522528;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1521828709;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1528876304;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1537436047;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static void rethrow(Throwable t, String parentMessage);1549545568;Throws the given {@code Throwable} in scenarios where the signatures do not allow you to_throw an arbitrary Throwable. Errors and RuntimeExceptions are thrown directly, other exceptions_are packed into a parent RuntimeException.__@param t The throwable to be thrown._@param parentMessage The message for the parent RuntimeException, if one is needed.;public static void rethrow(Throwable t, String parentMessage) {_		if (t instanceof Error) {_			throw (Error) t__		}_		else if (t instanceof RuntimeException) {_			throw (RuntimeException) t__		}_		else {_			throw new RuntimeException(parentMessage, t)__		}_	};throws,the,given,code,throwable,in,scenarios,where,the,signatures,do,not,allow,you,to,throw,an,arbitrary,throwable,errors,and,runtime,exceptions,are,thrown,directly,other,exceptions,are,packed,into,a,parent,runtime,exception,param,t,the,throwable,to,be,thrown,param,parent,message,the,message,for,the,parent,runtime,exception,if,one,is,needed;public,static,void,rethrow,throwable,t,string,parent,message,if,t,instanceof,error,throw,error,t,else,if,t,instanceof,runtime,exception,throw,runtime,exception,t,else,throw,new,runtime,exception,parent,message,t
ExceptionUtils -> public static Throwable stripException(Throwable throwableToStrip, Class<? extends Throwable> typeToStrip);1537436047;Unpacks an specified exception and returns its cause. Otherwise the given_{@link Throwable} is returned.__@param throwableToStrip to strip_@param typeToStrip type to strip_@return Unpacked cause or given Throwable if not packed;public static Throwable stripException(Throwable throwableToStrip, Class<? extends Throwable> typeToStrip) {_		while (typeToStrip.isAssignableFrom(throwableToStrip.getClass()) && throwableToStrip.getCause() != null) {_			throwableToStrip = throwableToStrip.getCause()__		}__		return throwableToStrip__	};unpacks,an,specified,exception,and,returns,its,cause,otherwise,the,given,link,throwable,is,returned,param,throwable,to,strip,to,strip,param,type,to,strip,type,to,strip,return,unpacked,cause,or,given,throwable,if,not,packed;public,static,throwable,strip,exception,throwable,throwable,to,strip,class,extends,throwable,type,to,strip,while,type,to,strip,is,assignable,from,throwable,to,strip,get,class,throwable,to,strip,get,cause,null,throwable,to,strip,throwable,to,strip,get,cause,return,throwable,to,strip
ExceptionUtils -> public static Throwable stripException(Throwable throwableToStrip, Class<? extends Throwable> typeToStrip);1549545568;Unpacks an specified exception and returns its cause. Otherwise the given_{@link Throwable} is returned.__@param throwableToStrip to strip_@param typeToStrip type to strip_@return Unpacked cause or given Throwable if not packed;public static Throwable stripException(Throwable throwableToStrip, Class<? extends Throwable> typeToStrip) {_		while (typeToStrip.isAssignableFrom(throwableToStrip.getClass()) && throwableToStrip.getCause() != null) {_			throwableToStrip = throwableToStrip.getCause()__		}__		return throwableToStrip__	};unpacks,an,specified,exception,and,returns,its,cause,otherwise,the,given,link,throwable,is,returned,param,throwable,to,strip,to,strip,param,type,to,strip,type,to,strip,return,unpacked,cause,or,given,throwable,if,not,packed;public,static,throwable,strip,exception,throwable,throwable,to,strip,class,extends,throwable,type,to,strip,while,type,to,strip,is,assignable,from,throwable,to,strip,get,class,throwable,to,strip,get,cause,null,throwable,to,strip,throwable,to,strip,get,cause,return,throwable,to,strip
ExceptionUtils -> public static String stringifyException(final Throwable e);1411236168;Makes a string representation of the exception's stack trace.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		final StringWriter stm = new StringWriter()__		final PrintWriter wrt = new PrintWriter(stm)__		e.printStackTrace(wrt)__		wrt.close()__		return stm.toString()__	};makes,a,string,representation,of,the,exception,s,stack,trace,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,final,string,writer,stm,new,string,writer,final,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string
ExceptionUtils -> public static String stringifyException(final Throwable e);1411236168;Makes a string representation of the exception's stack trace.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		final StringWriter stm = new StringWriter()__		final PrintWriter wrt = new PrintWriter(stm)__		e.printStackTrace(wrt)__		wrt.close()__		return stm.toString()__	};makes,a,string,representation,of,the,exception,s,stack,trace,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,final,string,writer,stm,new,string,writer,final,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string
ExceptionUtils -> public static String stringifyException(final Throwable e);1411236169;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return "(null)"__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,null,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1411473593;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return "(null)"__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,null,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1424732907;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return "(null)"__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,null,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1443564120;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return "(null)"__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,null,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1455479358;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return "(null)"__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,null,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1468595884;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return "(null)"__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,null,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1478079987;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1479319687;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1482206691;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1482522863;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1486740511;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1487548884;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1487948320;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1488304750;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1489060856;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1502355550;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1504475038;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1506553599;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1508928742;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1515408361;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1516295284;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}_		_		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1516295284;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__<p>This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}__		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,p,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1516971025;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__<p>This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}__		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,p,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1517489696;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__<p>This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}__		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,p,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1520032169;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__<p>This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}__		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,p,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1520522528;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__<p>This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}__		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,p,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1521828709;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__<p>This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}__		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,p,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1528876304;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__<p>This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}__		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,p,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1537436047;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__<p>This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}__		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,p,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static String stringifyException(final Throwable e);1549545568;Makes a string representation of the exception's stack trace, or "(null)", if the_exception is null.__<p>This method makes a best effort and never fails.__@param e The exception to stringify._@return A string with exception name and call stack.;public static String stringifyException(final Throwable e) {_		if (e == null) {_			return STRINGIFIED_NULL_EXCEPTION__		}__		try {_			StringWriter stm = new StringWriter()__			PrintWriter wrt = new PrintWriter(stm)__			e.printStackTrace(wrt)__			wrt.close()__			return stm.toString()__		}_		catch (Throwable t) {_			return e.getClass().getName() + " (error while printing stack trace)"__		}_	};makes,a,string,representation,of,the,exception,s,stack,trace,or,null,if,the,exception,is,null,p,this,method,makes,a,best,effort,and,never,fails,param,e,the,exception,to,stringify,return,a,string,with,exception,name,and,call,stack;public,static,string,stringify,exception,final,throwable,e,if,e,null,return,try,string,writer,stm,new,string,writer,print,writer,wrt,new,print,writer,stm,e,print,stack,trace,wrt,wrt,close,return,stm,to,string,catch,throwable,t,return,e,get,class,get,name,error,while,printing,stack,trace
ExceptionUtils -> public static void checkInterrupted(Throwable e);1520032169;Checks whether the given exception is a {@link InterruptedException} and sets_the interrupted flag accordingly.__@param e to check whether it is an {@link InterruptedException};public static void checkInterrupted(Throwable e) {_		if (e instanceof InterruptedException) {_			Thread.currentThread().interrupt()__		}_	};checks,whether,the,given,exception,is,a,link,interrupted,exception,and,sets,the,interrupted,flag,accordingly,param,e,to,check,whether,it,is,an,link,interrupted,exception;public,static,void,check,interrupted,throwable,e,if,e,instanceof,interrupted,exception,thread,current,thread,interrupt
ExceptionUtils -> public static void checkInterrupted(Throwable e);1520522528;Checks whether the given exception is a {@link InterruptedException} and sets_the interrupted flag accordingly.__@param e to check whether it is an {@link InterruptedException};public static void checkInterrupted(Throwable e) {_		if (e instanceof InterruptedException) {_			Thread.currentThread().interrupt()__		}_	};checks,whether,the,given,exception,is,a,link,interrupted,exception,and,sets,the,interrupted,flag,accordingly,param,e,to,check,whether,it,is,an,link,interrupted,exception;public,static,void,check,interrupted,throwable,e,if,e,instanceof,interrupted,exception,thread,current,thread,interrupt
ExceptionUtils -> public static void checkInterrupted(Throwable e);1521828709;Checks whether the given exception is a {@link InterruptedException} and sets_the interrupted flag accordingly.__@param e to check whether it is an {@link InterruptedException};public static void checkInterrupted(Throwable e) {_		if (e instanceof InterruptedException) {_			Thread.currentThread().interrupt()__		}_	};checks,whether,the,given,exception,is,a,link,interrupted,exception,and,sets,the,interrupted,flag,accordingly,param,e,to,check,whether,it,is,an,link,interrupted,exception;public,static,void,check,interrupted,throwable,e,if,e,instanceof,interrupted,exception,thread,current,thread,interrupt
ExceptionUtils -> public static void checkInterrupted(Throwable e);1528876304;Checks whether the given exception is a {@link InterruptedException} and sets_the interrupted flag accordingly.__@param e to check whether it is an {@link InterruptedException};public static void checkInterrupted(Throwable e) {_		if (e instanceof InterruptedException) {_			Thread.currentThread().interrupt()__		}_	};checks,whether,the,given,exception,is,a,link,interrupted,exception,and,sets,the,interrupted,flag,accordingly,param,e,to,check,whether,it,is,an,link,interrupted,exception;public,static,void,check,interrupted,throwable,e,if,e,instanceof,interrupted,exception,thread,current,thread,interrupt
ExceptionUtils -> public static void checkInterrupted(Throwable e);1537436047;Checks whether the given exception is a {@link InterruptedException} and sets_the interrupted flag accordingly.__@param e to check whether it is an {@link InterruptedException};public static void checkInterrupted(Throwable e) {_		if (e instanceof InterruptedException) {_			Thread.currentThread().interrupt()__		}_	};checks,whether,the,given,exception,is,a,link,interrupted,exception,and,sets,the,interrupted,flag,accordingly,param,e,to,check,whether,it,is,an,link,interrupted,exception;public,static,void,check,interrupted,throwable,e,if,e,instanceof,interrupted,exception,thread,current,thread,interrupt
ExceptionUtils -> public static void checkInterrupted(Throwable e);1549545568;Checks whether the given exception is a {@link InterruptedException} and sets_the interrupted flag accordingly.__@param e to check whether it is an {@link InterruptedException};public static void checkInterrupted(Throwable e) {_		if (e instanceof InterruptedException) {_			Thread.currentThread().interrupt()__		}_	};checks,whether,the,given,exception,is,a,link,interrupted,exception,and,sets,the,interrupted,flag,accordingly,param,e,to,check,whether,it,is,an,link,interrupted,exception;public,static,void,check,interrupted,throwable,e,if,e,instanceof,interrupted,exception,thread,current,thread,interrupt
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1502355550;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1504475038;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1506553599;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1508928742;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1515408361;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1516295284;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1516295284;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1516971025;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1517489696;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1520032169;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1520522528;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1521828709;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1528876304;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		while (throwable instanceof ExecutionException && throwable.getCause() != null) {_			throwable = throwable.getCause()__		}__		return throwable__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,while,throwable,instanceof,execution,exception,throwable,get,cause,null,throwable,throwable,get,cause,return,throwable
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1537436047;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		return stripException(throwable, ExecutionException.class)__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,return,strip,exception,throwable,execution,exception,class
ExceptionUtils -> public static Throwable stripExecutionException(Throwable throwable);1549545568;Unpacks an {@link ExecutionException} and returns its cause. Otherwise the given_Throwable is returned.__@param throwable to unpack if it is an ExecutionException_@return Cause of ExecutionException or given Throwable;public static Throwable stripExecutionException(Throwable throwable) {_		return stripException(throwable, ExecutionException.class)__	};unpacks,an,link,execution,exception,and,returns,its,cause,otherwise,the,given,throwable,is,returned,param,throwable,to,unpack,if,it,is,an,execution,exception,return,cause,of,execution,exception,or,given,throwable;public,static,throwable,strip,execution,exception,throwable,throwable,return,strip,exception,throwable,execution,exception,class
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1502355550;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1504475038;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1506553599;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1508928742;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1515408361;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1516295284;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1516295284;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1516971025;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1517489696;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1520032169;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1520522528;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1521828709;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1528876304;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1537436047;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable;1549545568;Tries to find a {@link SerializedThrowable} as the cause of the given throwable and throws its_deserialized value. If there is no such throwable, then the original throwable is thrown.__@param throwable to check for a SerializedThrowable_@param classLoader to be used for the deserialization of the SerializedThrowable_@throws Throwable either the deserialized throwable or the given throwable;public static void tryDeserializeAndThrow(Throwable throwable, ClassLoader classLoader) throws Throwable {_		Throwable current = throwable___		while (!(current instanceof SerializedThrowable) && current.getCause() != null) {_			current = current.getCause()__		}__		if (current instanceof SerializedThrowable) {_			throw ((SerializedThrowable) current).deserializeError(classLoader)__		} else {_			throw throwable__		}_	};tries,to,find,a,link,serialized,throwable,as,the,cause,of,the,given,throwable,and,throws,its,deserialized,value,if,there,is,no,such,throwable,then,the,original,throwable,is,thrown,param,throwable,to,check,for,a,serialized,throwable,param,class,loader,to,be,used,for,the,deserialization,of,the,serialized,throwable,throws,throwable,either,the,deserialized,throwable,or,the,given,throwable;public,static,void,try,deserialize,and,throw,throwable,throwable,class,loader,class,loader,throws,throwable,throwable,current,throwable,while,current,instanceof,serialized,throwable,current,get,cause,null,current,current,get,cause,if,current,instanceof,serialized,throwable,throw,serialized,throwable,current,deserialize,error,class,loader,else,throw,throwable
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1487548884;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1487948320;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1488304750;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1489060856;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1502355550;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1504475038;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1506553599;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1508928742;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1515408361;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1516295284;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1516295284;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1516971025;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1517489696;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1520032169;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1520522528;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1521828709;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1528876304;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1537436047;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static void rethrowIfFatalError(Throwable t);1549545568;Rethrows the given {@code Throwable}, if it represents an error that is fatal to the JVM._See {@link ExceptionUtils#isJvmFatalError(Throwable)} for a definition of fatal errors.__@param t The Throwable to check and rethrow.;public static void rethrowIfFatalError(Throwable t) {_		if (isJvmFatalError(t)) {_			throw (Error) t__		}_	};rethrows,the,given,code,throwable,if,it,represents,an,error,that,is,fatal,to,the,jvm,see,link,exception,utils,is,jvm,fatal,error,throwable,for,a,definition,of,fatal,errors,param,t,the,throwable,to,check,and,rethrow;public,static,void,rethrow,if,fatal,error,throwable,t,if,is,jvm,fatal,error,t,throw,error,t
ExceptionUtils -> public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType);1516971025;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(searchType.cast(t))__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,t,extends,throwable,optional,t,find,throwable,throwable,throwable,class,t,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,search,type,cast,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType);1517489696;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(searchType.cast(t))__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,t,extends,throwable,optional,t,find,throwable,throwable,throwable,class,t,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,search,type,cast,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType);1520032169;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(searchType.cast(t))__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,t,extends,throwable,optional,t,find,throwable,throwable,throwable,class,t,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,search,type,cast,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType);1520522528;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(searchType.cast(t))__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,t,extends,throwable,optional,t,find,throwable,throwable,throwable,class,t,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,search,type,cast,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType);1521828709;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(searchType.cast(t))__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,t,extends,throwable,optional,t,find,throwable,throwable,throwable,class,t,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,search,type,cast,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType);1528876304;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(searchType.cast(t))__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,t,extends,throwable,optional,t,find,throwable,throwable,throwable,class,t,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,search,type,cast,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType);1537436047;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(searchType.cast(t))__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,t,extends,throwable,optional,t,find,throwable,throwable,throwable,class,t,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,search,type,cast,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType);1549545568;Checks whether a throwable chain contains a specific type of exception and returns it.__@param throwable the throwable chain to check._@param searchType the type of exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static <T extends Throwable> Optional<T> findThrowable(Throwable throwable, Class<T> searchType) {_		if (throwable == null || searchType == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (searchType.isAssignableFrom(t.getClass())) {_				return Optional.of(searchType.cast(t))__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,a,specific,type,of,exception,and,returns,it,param,throwable,the,throwable,chain,to,check,param,search,type,the,type,of,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,t,extends,throwable,optional,t,find,throwable,throwable,throwable,class,t,search,type,if,throwable,null,search,type,null,return,optional,empty,throwable,t,throwable,while,t,null,if,search,type,is,assignable,from,t,get,class,return,optional,of,search,type,cast,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowable(Throwable throwable, Predicate<Throwable> predicate);1521828709;Checks whether a throwable chain contains an exception matching a predicate and returns it.__@param throwable the throwable chain to check._@param predicate the predicate of the exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static Optional<Throwable> findThrowable(Throwable throwable, Predicate<Throwable> predicate) {_		if (throwable == null || predicate == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (predicate.test(t)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,an,exception,matching,a,predicate,and,returns,it,param,throwable,the,throwable,chain,to,check,param,predicate,the,predicate,of,the,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,throwable,throwable,predicate,throwable,predicate,if,throwable,null,predicate,null,return,optional,empty,throwable,t,throwable,while,t,null,if,predicate,test,t,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowable(Throwable throwable, Predicate<Throwable> predicate);1528876304;Checks whether a throwable chain contains an exception matching a predicate and returns it.__@param throwable the throwable chain to check._@param predicate the predicate of the exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static Optional<Throwable> findThrowable(Throwable throwable, Predicate<Throwable> predicate) {_		if (throwable == null || predicate == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (predicate.test(t)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,an,exception,matching,a,predicate,and,returns,it,param,throwable,the,throwable,chain,to,check,param,predicate,the,predicate,of,the,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,throwable,throwable,predicate,throwable,predicate,if,throwable,null,predicate,null,return,optional,empty,throwable,t,throwable,while,t,null,if,predicate,test,t,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowable(Throwable throwable, Predicate<Throwable> predicate);1537436047;Checks whether a throwable chain contains an exception matching a predicate and returns it.__@param throwable the throwable chain to check._@param predicate the predicate of the exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static Optional<Throwable> findThrowable(Throwable throwable, Predicate<Throwable> predicate) {_		if (throwable == null || predicate == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (predicate.test(t)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,an,exception,matching,a,predicate,and,returns,it,param,throwable,the,throwable,chain,to,check,param,predicate,the,predicate,of,the,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,throwable,throwable,predicate,throwable,predicate,if,throwable,null,predicate,null,return,optional,empty,throwable,t,throwable,while,t,null,if,predicate,test,t,return,optional,of,t,else,t,t,get,cause,return,optional,empty
ExceptionUtils -> public static Optional<Throwable> findThrowable(Throwable throwable, Predicate<Throwable> predicate);1549545568;Checks whether a throwable chain contains an exception matching a predicate and returns it.__@param throwable the throwable chain to check._@param predicate the predicate of the exception to search for in the chain._@return Optional throwable of the requested type if available, otherwise empty;public static Optional<Throwable> findThrowable(Throwable throwable, Predicate<Throwable> predicate) {_		if (throwable == null || predicate == null) {_			return Optional.empty()__		}__		Throwable t = throwable__		while (t != null) {_			if (predicate.test(t)) {_				return Optional.of(t)__			} else {_				t = t.getCause()__			}_		}__		return Optional.empty()__	};checks,whether,a,throwable,chain,contains,an,exception,matching,a,predicate,and,returns,it,param,throwable,the,throwable,chain,to,check,param,predicate,the,predicate,of,the,exception,to,search,for,in,the,chain,return,optional,throwable,of,the,requested,type,if,available,otherwise,empty;public,static,optional,throwable,find,throwable,throwable,throwable,predicate,throwable,predicate,if,throwable,null,predicate,null,return,optional,empty,throwable,t,throwable,while,t,null,if,predicate,test,t,return,optional,of,t,else,t,t,get,cause,return,optional,empty
