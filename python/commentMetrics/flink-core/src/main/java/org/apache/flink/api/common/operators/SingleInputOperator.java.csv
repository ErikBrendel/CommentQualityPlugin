# id;timestamp;commentText;codeText;commentWords;codeWords
SingleInputOperator -> @Deprecated 	public void addInput(Operator<IN>... input);1405024514;Adds to the input the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(this.input, input)__	};adds,to,the,input,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,add,input,operator,in,input,this,input,operator,create,union,cascade,this,input,input
SingleInputOperator -> @Deprecated 	public void addInput(Operator<IN>... input);1405090423;Adds to the input the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(this.input, input)__	};adds,to,the,input,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,add,input,operator,in,input,this,input,operator,create,union,cascade,this,input,input
SingleInputOperator -> @Deprecated 	public void addInput(Operator<IN>... input);1411473593;Adds to the input the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(this.input, input)__	};adds,to,the,input,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,add,input,operator,in,input,this,input,operator,create,union,cascade,this,input,input
SingleInputOperator -> @Deprecated 	public void addInput(Operator<IN>... input);1412346153;Adds to the input the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(this.input, input)__	};adds,to,the,input,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,add,input,operator,in,input,this,input,operator,create,union,cascade,this,input,input
SingleInputOperator -> @Deprecated 	public void addInput(Operator<IN>... input);1412346154;Adds to the input the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(this.input, input)__	};adds,to,the,input,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,add,input,operator,in,input,this,input,operator,create,union,cascade,this,input,input
SingleInputOperator -> @Deprecated 	public void addInput(Operator<IN>... input);1416585395;Adds to the input the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(this.input, input)__	};adds,to,the,input,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,add,input,operator,in,input,this,input,operator,create,union,cascade,this,input,input
SingleInputOperator -> @Deprecated 	public void addInput(Operator<IN>... input);1422405541;Adds to the input the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(this.input, input)__	};adds,to,the,input,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,add,input,operator,in,input,this,input,operator,create,union,cascade,this,input,input
SingleInputOperator -> @Deprecated 	public void addInput(Operator<IN>... input);1423570503;Adds to the input the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(this.input, input)__	};adds,to,the,input,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,add,input,operator,in,input,this,input,operator,create,union,cascade,this,input,input
SingleInputOperator -> @Deprecated 	public void addInput(Operator<IN>... input);1455479358;Adds to the input the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void addInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(this.input, input)__	};adds,to,the,input,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,add,input,operator,in,input,this,input,operator,create,union,cascade,this,input,input
SingleInputOperator -> @Override 	public void accept(Visitor<Operator<?>> visitor);1405024514;Accepts the visitor and applies it this instance. The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		if (visitor.preVisit(this)) {_			this.input.accept(visitor)__			for (Operator<?> c : this.broadcastInputs.values()) {_				c.accept(visitor)__			}_			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,if,visitor,pre,visit,this,this,input,accept,visitor,for,operator,c,this,broadcast,inputs,values,c,accept,visitor,visitor,post,visit,this
SingleInputOperator -> @Override 	public void accept(Visitor<Operator<?>> visitor);1405090423;Accepts the visitor and applies it this instance. The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		if (visitor.preVisit(this)) {_			this.input.accept(visitor)__			for (Operator<?> c : this.broadcastInputs.values()) {_				c.accept(visitor)__			}_			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,if,visitor,pre,visit,this,this,input,accept,visitor,for,operator,c,this,broadcast,inputs,values,c,accept,visitor,visitor,post,visit,this
SingleInputOperator -> @Override 	public void accept(Visitor<Operator<?>> visitor);1411473593;Accepts the visitor and applies it this instance. The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		if (visitor.preVisit(this)) {_			this.input.accept(visitor)__			for (Operator<?> c : this.broadcastInputs.values()) {_				c.accept(visitor)__			}_			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,if,visitor,pre,visit,this,this,input,accept,visitor,for,operator,c,this,broadcast,inputs,values,c,accept,visitor,visitor,post,visit,this
SingleInputOperator -> @Override 	public void accept(Visitor<Operator<?>> visitor);1412346153;Accepts the visitor and applies it this instance. The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		if (visitor.preVisit(this)) {_			this.input.accept(visitor)__			for (Operator<?> c : this.broadcastInputs.values()) {_				c.accept(visitor)__			}_			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,if,visitor,pre,visit,this,this,input,accept,visitor,for,operator,c,this,broadcast,inputs,values,c,accept,visitor,visitor,post,visit,this
SingleInputOperator -> @Override 	public void accept(Visitor<Operator<?>> visitor);1412346154;Accepts the visitor and applies it this instance. The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		if (visitor.preVisit(this)) {_			this.input.accept(visitor)__			for (Operator<?> c : this.broadcastInputs.values()) {_				c.accept(visitor)__			}_			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,if,visitor,pre,visit,this,this,input,accept,visitor,for,operator,c,this,broadcast,inputs,values,c,accept,visitor,visitor,post,visit,this
SingleInputOperator -> @Override 	public void accept(Visitor<Operator<?>> visitor);1416585395;Accepts the visitor and applies it this instance. The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		if (visitor.preVisit(this)) {_			this.input.accept(visitor)__			for (Operator<?> c : this.broadcastInputs.values()) {_				c.accept(visitor)__			}_			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,if,visitor,pre,visit,this,this,input,accept,visitor,for,operator,c,this,broadcast,inputs,values,c,accept,visitor,visitor,post,visit,this
SingleInputOperator -> @Override 	public void accept(Visitor<Operator<?>> visitor);1422405541;Accepts the visitor and applies it this instance. The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		if (visitor.preVisit(this)) {_			this.input.accept(visitor)__			for (Operator<?> c : this.broadcastInputs.values()) {_				c.accept(visitor)__			}_			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,if,visitor,pre,visit,this,this,input,accept,visitor,for,operator,c,this,broadcast,inputs,values,c,accept,visitor,visitor,post,visit,this
SingleInputOperator -> @Override 	public void accept(Visitor<Operator<?>> visitor);1423570503;Accepts the visitor and applies it this instance. The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		if (visitor.preVisit(this)) {_			this.input.accept(visitor)__			for (Operator<?> c : this.broadcastInputs.values()) {_				c.accept(visitor)__			}_			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,if,visitor,pre,visit,this,this,input,accept,visitor,for,operator,c,this,broadcast,inputs,values,c,accept,visitor,visitor,post,visit,this
SingleInputOperator -> @Override 	public void accept(Visitor<Operator<?>> visitor);1455479358;Accepts the visitor and applies it this instance. The visitors pre-visit method is called and, if returning_<tt>true</tt>, the visitor is recursively applied on the single input. After the recursion returned,_the post-visit method is called.__@param visitor The visitor.__@see org.apache.flink.util.Visitable#accept(org.apache.flink.util.Visitor);@Override_	public void accept(Visitor<Operator<?>> visitor) {_		if (visitor.preVisit(this)) {_			this.input.accept(visitor)__			for (Operator<?> c : this.broadcastInputs.values()) {_				c.accept(visitor)__			}_			visitor.postVisit(this)__		}_	};accepts,the,visitor,and,applies,it,this,instance,the,visitors,pre,visit,method,is,called,and,if,returning,tt,true,tt,the,visitor,is,recursively,applied,on,the,single,input,after,the,recursion,returned,the,post,visit,method,is,called,param,visitor,the,visitor,see,org,apache,flink,util,visitable,accept,org,apache,flink,util,visitor;override,public,void,accept,visitor,operator,visitor,if,visitor,pre,visit,this,this,input,accept,visitor,for,operator,c,this,broadcast,inputs,values,c,accept,visitor,visitor,post,visit,this
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name);1405024514;Creates a new abstract single-input operator with the given name wrapping the given user function._This constructor is specialized only for operators that require no keys for their processing.__@param stub The object containing the user function._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = new int[0]__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,this,constructor,is,specialized,only,for,operators,that,require,no,keys,for,their,processing,param,stub,the,object,containing,the,user,function,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,string,name,super,stub,operator,info,name,this,key,fields,new,int,0
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name);1405090423;Creates a new abstract single-input operator with the given name wrapping the given user function._This constructor is specialized only for operators that require no keys for their processing.__@param stub The object containing the user function._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = new int[0]__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,this,constructor,is,specialized,only,for,operators,that,require,no,keys,for,their,processing,param,stub,the,object,containing,the,user,function,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,string,name,super,stub,operator,info,name,this,key,fields,new,int,0
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name);1411473593;Creates a new abstract single-input operator with the given name wrapping the given user function._This constructor is specialized only for operators that require no keys for their processing.__@param stub The object containing the user function._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = new int[0]__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,this,constructor,is,specialized,only,for,operators,that,require,no,keys,for,their,processing,param,stub,the,object,containing,the,user,function,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,string,name,super,stub,operator,info,name,this,key,fields,new,int,0
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name);1412346153;Creates a new abstract single-input operator with the given name wrapping the given user function._This constructor is specialized only for operators that require no keys for their processing.__@param stub The object containing the user function._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = new int[0]__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,this,constructor,is,specialized,only,for,operators,that,require,no,keys,for,their,processing,param,stub,the,object,containing,the,user,function,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,string,name,super,stub,operator,info,name,this,key,fields,new,int,0
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name);1412346154;Creates a new abstract single-input operator with the given name wrapping the given user function._This constructor is specialized only for operators that require no keys for their processing.__@param stub The object containing the user function._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = new int[0]__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,this,constructor,is,specialized,only,for,operators,that,require,no,keys,for,their,processing,param,stub,the,object,containing,the,user,function,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,string,name,super,stub,operator,info,name,this,key,fields,new,int,0
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name);1416585395;Creates a new abstract single-input operator with the given name wrapping the given user function._This constructor is specialized only for operators that require no keys for their processing.__@param stub The object containing the user function._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = new int[0]__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,this,constructor,is,specialized,only,for,operators,that,require,no,keys,for,their,processing,param,stub,the,object,containing,the,user,function,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,string,name,super,stub,operator,info,name,this,key,fields,new,int,0
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name);1422405541;Creates a new abstract single-input operator with the given name wrapping the given user function._This constructor is specialized only for operators that require no keys for their processing.__@param stub The object containing the user function._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = new int[0]__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,this,constructor,is,specialized,only,for,operators,that,require,no,keys,for,their,processing,param,stub,the,object,containing,the,user,function,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,string,name,super,stub,operator,info,name,this,key,fields,new,int,0
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name);1423570503;Creates a new abstract single-input operator with the given name wrapping the given user function._This constructor is specialized only for operators that require no keys for their processing.__@param stub The object containing the user function._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = new int[0]__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,this,constructor,is,specialized,only,for,operators,that,require,no,keys,for,their,processing,param,stub,the,object,containing,the,user,function,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,string,name,super,stub,operator,info,name,this,key,fields,new,int,0
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name);1455479358;Creates a new abstract single-input operator with the given name wrapping the given user function._This constructor is specialized only for operators that require no keys for their processing.__@param stub The object containing the user function._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = new int[0]__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,this,constructor,is,specialized,only,for,operators,that,require,no,keys,for,their,processing,param,stub,the,object,containing,the,user,function,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,string,name,super,stub,operator,info,name,this,key,fields,new,int,0
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void addInput(List<Operator<IN>> inputs);1405024514;Adds to the input the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void addInput(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(this.input, inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,add,input,list,operator,in,inputs,this,input,operator,create,union,cascade,this,input,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void addInput(List<Operator<IN>> inputs);1405090423;Adds to the input the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void addInput(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(this.input, inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,add,input,list,operator,in,inputs,this,input,operator,create,union,cascade,this,input,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void addInput(List<Operator<IN>> inputs);1411473593;Adds to the input the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void addInput(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(this.input, inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,add,input,list,operator,in,inputs,this,input,operator,create,union,cascade,this,input,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void addInput(List<Operator<IN>> inputs);1412346153;Adds to the input the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void addInput(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(this.input, inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,add,input,list,operator,in,inputs,this,input,operator,create,union,cascade,this,input,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void addInput(List<Operator<IN>> inputs);1412346154;Adds to the input the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void addInput(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(this.input, inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,add,input,list,operator,in,inputs,this,input,operator,create,union,cascade,this,input,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void addInput(List<Operator<IN>> inputs);1416585395;Adds to the input the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void addInput(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(this.input, inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,add,input,list,operator,in,inputs,this,input,operator,create,union,cascade,this,input,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void addInput(List<Operator<IN>> inputs);1422405541;Adds to the input the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void addInput(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(this.input, inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,add,input,list,operator,in,inputs,this,input,operator,create,union,cascade,this,input,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void addInput(List<Operator<IN>> inputs);1423570503;Adds to the input the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void addInput(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(this.input, inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,add,input,list,operator,in,inputs,this,input,operator,create,union,cascade,this,input,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void addInput(List<Operator<IN>> inputs);1455479358;Adds to the input the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void addInput(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(this.input, inputs.toArray(new Operator[inputs.size()]))__	};adds,to,the,input,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,add,input,list,operator,in,inputs,this,input,operator,create,union,cascade,this,input,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> public Operator<IN> getInput();1405024514;Returns the input operator or data source, or null, if none is set.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,the,input,operator,or,data,source,or,null,if,none,is,set,return,this,operator,s,input;public,operator,in,get,input,return,this,input
SingleInputOperator -> public Operator<IN> getInput();1405090423;Returns the input operator or data source, or null, if none is set.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,the,input,operator,or,data,source,or,null,if,none,is,set,return,this,operator,s,input;public,operator,in,get,input,return,this,input
SingleInputOperator -> public Operator<IN> getInput();1411473593;Returns the input operator or data source, or null, if none is set.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,the,input,operator,or,data,source,or,null,if,none,is,set,return,this,operator,s,input;public,operator,in,get,input,return,this,input
SingleInputOperator -> public Operator<IN> getInput();1412346153;Returns the input operator or data source, or null, if none is set.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,the,input,operator,or,data,source,or,null,if,none,is,set,return,this,operator,s,input;public,operator,in,get,input,return,this,input
SingleInputOperator -> public Operator<IN> getInput();1412346154;Returns the input operator or data source, or null, if none is set.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,the,input,operator,or,data,source,or,null,if,none,is,set,return,this,operator,s,input;public,operator,in,get,input,return,this,input
SingleInputOperator -> public Operator<IN> getInput();1416585395;Returns the input operator or data source, or null, if none is set.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,the,input,operator,or,data,source,or,null,if,none,is,set,return,this,operator,s,input;public,operator,in,get,input,return,this,input
SingleInputOperator -> public Operator<IN> getInput();1422405541;Returns the input operator or data source, or null, if none is set.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,the,input,operator,or,data,source,or,null,if,none,is,set,return,this,operator,s,input;public,operator,in,get,input,return,this,input
SingleInputOperator -> public Operator<IN> getInput();1423570503;Returns the input operator or data source, or null, if none is set.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,the,input,operator,or,data,source,or,null,if,none,is,set,return,this,operator,s,input;public,operator,in,get,input,return,this,input
SingleInputOperator -> public Operator<IN> getInput();1455479358;Returns the input operator or data source, or null, if none is set.__@return This operator's input.;public Operator<IN> getInput() {_		return this.input__	};returns,the,input,operator,or,data,source,or,null,if,none,is,set,return,this,operator,s,input;public,operator,in,get,input,return,this,input
SingleInputOperator -> public void setInput(Operator<IN> input);1405024514;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,this,input,input
SingleInputOperator -> public void setInput(Operator<IN> input);1405090423;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,this,input,input
SingleInputOperator -> public void setInput(Operator<IN> input);1411473593;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,this,input,input
SingleInputOperator -> public void setInput(Operator<IN> input);1412346153;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,this,input,input
SingleInputOperator -> public void setInput(Operator<IN> input);1412346154;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,this,input,input
SingleInputOperator -> public void setInput(Operator<IN> input);1416585395;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,this,input,input
SingleInputOperator -> public void setInput(Operator<IN> input);1422405541;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,this,input,input
SingleInputOperator -> public void setInput(Operator<IN> input);1423570503;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,this,input,input
SingleInputOperator -> public void setInput(Operator<IN> input);1455479358;Sets the given operator as the input to this operator.__@param input The operator to use as the input.;public void setInput(Operator<IN> input) {_		this.input = input__	};sets,the,given,operator,as,the,input,to,this,operator,param,input,the,operator,to,use,as,the,input;public,void,set,input,operator,in,input,this,input,input
SingleInputOperator -> @Override 	@SuppressWarnings("unchecked") 	public UnaryOperatorInformation<IN, OUT> getOperatorInfo();1405024514;Gets the information about the operators input/output types.;@Override_	@SuppressWarnings("unchecked")_	public UnaryOperatorInformation<IN, OUT> getOperatorInfo() {_		return (UnaryOperatorInformation<IN, OUT>) this.operatorInfo__	};gets,the,information,about,the,operators,input,output,types;override,suppress,warnings,unchecked,public,unary,operator,information,in,out,get,operator,info,return,unary,operator,information,in,out,this,operator,info
SingleInputOperator -> @Override 	@SuppressWarnings("unchecked") 	public UnaryOperatorInformation<IN, OUT> getOperatorInfo();1405090423;Gets the information about the operators input/output types.;@Override_	@SuppressWarnings("unchecked")_	public UnaryOperatorInformation<IN, OUT> getOperatorInfo() {_		return (UnaryOperatorInformation<IN, OUT>) this.operatorInfo__	};gets,the,information,about,the,operators,input,output,types;override,suppress,warnings,unchecked,public,unary,operator,information,in,out,get,operator,info,return,unary,operator,information,in,out,this,operator,info
SingleInputOperator -> @Override 	@SuppressWarnings("unchecked") 	public UnaryOperatorInformation<IN, OUT> getOperatorInfo();1411473593;Gets the information about the operators input/output types.;@Override_	@SuppressWarnings("unchecked")_	public UnaryOperatorInformation<IN, OUT> getOperatorInfo() {_		return (UnaryOperatorInformation<IN, OUT>) this.operatorInfo__	};gets,the,information,about,the,operators,input,output,types;override,suppress,warnings,unchecked,public,unary,operator,information,in,out,get,operator,info,return,unary,operator,information,in,out,this,operator,info
SingleInputOperator -> @Override 	@SuppressWarnings("unchecked") 	public UnaryOperatorInformation<IN, OUT> getOperatorInfo();1412346153;Gets the information about the operators input/output types.;@Override_	@SuppressWarnings("unchecked")_	public UnaryOperatorInformation<IN, OUT> getOperatorInfo() {_		return (UnaryOperatorInformation<IN, OUT>) this.operatorInfo__	};gets,the,information,about,the,operators,input,output,types;override,suppress,warnings,unchecked,public,unary,operator,information,in,out,get,operator,info,return,unary,operator,information,in,out,this,operator,info
SingleInputOperator -> @Override 	@SuppressWarnings("unchecked") 	public UnaryOperatorInformation<IN, OUT> getOperatorInfo();1412346154;Gets the information about the operators input/output types.;@Override_	@SuppressWarnings("unchecked")_	public UnaryOperatorInformation<IN, OUT> getOperatorInfo() {_		return (UnaryOperatorInformation<IN, OUT>) this.operatorInfo__	};gets,the,information,about,the,operators,input,output,types;override,suppress,warnings,unchecked,public,unary,operator,information,in,out,get,operator,info,return,unary,operator,information,in,out,this,operator,info
SingleInputOperator -> @Override 	@SuppressWarnings("unchecked") 	public UnaryOperatorInformation<IN, OUT> getOperatorInfo();1416585395;Gets the information about the operators input/output types.;@Override_	@SuppressWarnings("unchecked")_	public UnaryOperatorInformation<IN, OUT> getOperatorInfo() {_		return (UnaryOperatorInformation<IN, OUT>) this.operatorInfo__	};gets,the,information,about,the,operators,input,output,types;override,suppress,warnings,unchecked,public,unary,operator,information,in,out,get,operator,info,return,unary,operator,information,in,out,this,operator,info
SingleInputOperator -> @Override 	@SuppressWarnings("unchecked") 	public UnaryOperatorInformation<IN, OUT> getOperatorInfo();1422405541;Gets the information about the operators input/output types.;@Override_	@SuppressWarnings("unchecked")_	public UnaryOperatorInformation<IN, OUT> getOperatorInfo() {_		return (UnaryOperatorInformation<IN, OUT>) this.operatorInfo__	};gets,the,information,about,the,operators,input,output,types;override,suppress,warnings,unchecked,public,unary,operator,information,in,out,get,operator,info,return,unary,operator,information,in,out,this,operator,info
SingleInputOperator -> @Override 	@SuppressWarnings("unchecked") 	public UnaryOperatorInformation<IN, OUT> getOperatorInfo();1423570503;Gets the information about the operators input/output types.;@Override_	@SuppressWarnings("unchecked")_	public UnaryOperatorInformation<IN, OUT> getOperatorInfo() {_		return (UnaryOperatorInformation<IN, OUT>) this.operatorInfo__	};gets,the,information,about,the,operators,input,output,types;override,suppress,warnings,unchecked,public,unary,operator,information,in,out,get,operator,info,return,unary,operator,information,in,out,this,operator,info
SingleInputOperator -> @Override 	@SuppressWarnings("unchecked") 	public UnaryOperatorInformation<IN, OUT> getOperatorInfo();1455479358;Gets the information about the operators input/output types.;@Override_	@SuppressWarnings("unchecked")_	public UnaryOperatorInformation<IN, OUT> getOperatorInfo() {_		return (UnaryOperatorInformation<IN, OUT>) this.operatorInfo__	};gets,the,information,about,the,operators,input,output,types;override,suppress,warnings,unchecked,public,unary,operator,information,in,out,get,operator,info,return,unary,operator,information,in,out,this,operator,info
SingleInputOperator -> @Deprecated 	public void setInput(Operator<IN>... input);1405024514;Sets the input to the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void setInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(null, input)__	};sets,the,input,to,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,set,input,operator,in,input,this,input,operator,create,union,cascade,null,input
SingleInputOperator -> @Deprecated 	public void setInput(Operator<IN>... input);1405090423;Sets the input to the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void setInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(null, input)__	};sets,the,input,to,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,set,input,operator,in,input,this,input,operator,create,union,cascade,null,input
SingleInputOperator -> @Deprecated 	public void setInput(Operator<IN>... input);1411473593;Sets the input to the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void setInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(null, input)__	};sets,the,input,to,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,set,input,operator,in,input,this,input,operator,create,union,cascade,null,input
SingleInputOperator -> @Deprecated 	public void setInput(Operator<IN>... input);1412346153;Sets the input to the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void setInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(null, input)__	};sets,the,input,to,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,set,input,operator,in,input,this,input,operator,create,union,cascade,null,input
SingleInputOperator -> @Deprecated 	public void setInput(Operator<IN>... input);1412346154;Sets the input to the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void setInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(null, input)__	};sets,the,input,to,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,set,input,operator,in,input,this,input,operator,create,union,cascade,null,input
SingleInputOperator -> @Deprecated 	public void setInput(Operator<IN>... input);1416585395;Sets the input to the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void setInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(null, input)__	};sets,the,input,to,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,set,input,operator,in,input,this,input,operator,create,union,cascade,null,input
SingleInputOperator -> @Deprecated 	public void setInput(Operator<IN>... input);1422405541;Sets the input to the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void setInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(null, input)__	};sets,the,input,to,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,set,input,operator,in,input,this,input,operator,create,union,cascade,null,input
SingleInputOperator -> @Deprecated 	public void setInput(Operator<IN>... input);1423570503;Sets the input to the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void setInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(null, input)__	};sets,the,input,to,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,set,input,operator,in,input,this,input,operator,create,union,cascade,null,input
SingleInputOperator -> @Deprecated 	public void setInput(Operator<IN>... input);1455479358;Sets the input to the union of the given operators.__@param input The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	public void setInput(Operator<IN>... input) {_		this.input = Operator.createUnionCascade(null, input)__	};sets,the,input,to,the,union,of,the,given,operators,param,input,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,public,void,set,input,operator,in,input,this,input,operator,create,union,cascade,null,input
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name);1405024514;Creates a new abstract single-input operator with the given name wrapping the given user function.__@param stub The object containing the user function._@param keyPositions The field positions of the input records that act as keys._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = keyPositions__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,param,stub,the,object,containing,the,user,function,param,key,positions,the,field,positions,of,the,input,records,that,act,as,keys,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,int,key,positions,string,name,super,stub,operator,info,name,this,key,fields,key,positions
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name);1405090423;Creates a new abstract single-input operator with the given name wrapping the given user function.__@param stub The object containing the user function._@param keyPositions The field positions of the input records that act as keys._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = keyPositions__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,param,stub,the,object,containing,the,user,function,param,key,positions,the,field,positions,of,the,input,records,that,act,as,keys,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,int,key,positions,string,name,super,stub,operator,info,name,this,key,fields,key,positions
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name);1411473593;Creates a new abstract single-input operator with the given name wrapping the given user function.__@param stub The object containing the user function._@param keyPositions The field positions of the input records that act as keys._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = keyPositions__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,param,stub,the,object,containing,the,user,function,param,key,positions,the,field,positions,of,the,input,records,that,act,as,keys,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,int,key,positions,string,name,super,stub,operator,info,name,this,key,fields,key,positions
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name);1412346153;Creates a new abstract single-input operator with the given name wrapping the given user function.__@param stub The object containing the user function._@param keyPositions The field positions of the input records that act as keys._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = keyPositions__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,param,stub,the,object,containing,the,user,function,param,key,positions,the,field,positions,of,the,input,records,that,act,as,keys,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,int,key,positions,string,name,super,stub,operator,info,name,this,key,fields,key,positions
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name);1412346154;Creates a new abstract single-input operator with the given name wrapping the given user function.__@param stub The object containing the user function._@param keyPositions The field positions of the input records that act as keys._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = keyPositions__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,param,stub,the,object,containing,the,user,function,param,key,positions,the,field,positions,of,the,input,records,that,act,as,keys,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,int,key,positions,string,name,super,stub,operator,info,name,this,key,fields,key,positions
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name);1416585395;Creates a new abstract single-input operator with the given name wrapping the given user function.__@param stub The object containing the user function._@param keyPositions The field positions of the input records that act as keys._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = keyPositions__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,param,stub,the,object,containing,the,user,function,param,key,positions,the,field,positions,of,the,input,records,that,act,as,keys,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,int,key,positions,string,name,super,stub,operator,info,name,this,key,fields,key,positions
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name);1422405541;Creates a new abstract single-input operator with the given name wrapping the given user function.__@param stub The object containing the user function._@param keyPositions The field positions of the input records that act as keys._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = keyPositions__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,param,stub,the,object,containing,the,user,function,param,key,positions,the,field,positions,of,the,input,records,that,act,as,keys,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,int,key,positions,string,name,super,stub,operator,info,name,this,key,fields,key,positions
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name);1423570503;Creates a new abstract single-input operator with the given name wrapping the given user function.__@param stub The object containing the user function._@param keyPositions The field positions of the input records that act as keys._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = keyPositions__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,param,stub,the,object,containing,the,user,function,param,key,positions,the,field,positions,of,the,input,records,that,act,as,keys,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,int,key,positions,string,name,super,stub,operator,info,name,this,key,fields,key,positions
SingleInputOperator -> protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name);1455479358;Creates a new abstract single-input operator with the given name wrapping the given user function.__@param stub The object containing the user function._@param keyPositions The field positions of the input records that act as keys._@param name The given name for the operator, used in plans, logs and progress messages.;protected SingleInputOperator(UserCodeWrapper<FT> stub, UnaryOperatorInformation<IN, OUT> operatorInfo, int[] keyPositions, String name) {_		super(stub, operatorInfo, name)__		this.keyFields = keyPositions__	};creates,a,new,abstract,single,input,operator,with,the,given,name,wrapping,the,given,user,function,param,stub,the,object,containing,the,user,function,param,key,positions,the,field,positions,of,the,input,records,that,act,as,keys,param,name,the,given,name,for,the,operator,used,in,plans,logs,and,progress,messages;protected,single,input,operator,user,code,wrapper,ft,stub,unary,operator,information,in,out,operator,info,int,key,positions,string,name,super,stub,operator,info,name,this,key,fields,key,positions
SingleInputOperator -> public void clearInputs();1405024514;Removes all inputs.;public void clearInputs() {_		this.input = null__	};removes,all,inputs;public,void,clear,inputs,this,input,null
SingleInputOperator -> public void clearInputs();1405090423;Removes all inputs.;public void clearInputs() {_		this.input = null__	};removes,all,inputs;public,void,clear,inputs,this,input,null
SingleInputOperator -> public void clearInputs();1411473593;Removes all inputs.;public void clearInputs() {_		this.input = null__	};removes,all,inputs;public,void,clear,inputs,this,input,null
SingleInputOperator -> public void clearInputs();1412346153;Removes all inputs.;public void clearInputs() {_		this.input = null__	};removes,all,inputs;public,void,clear,inputs,this,input,null
SingleInputOperator -> public void clearInputs();1412346154;Removes all inputs.;public void clearInputs() {_		this.input = null__	};removes,all,inputs;public,void,clear,inputs,this,input,null
SingleInputOperator -> public void clearInputs();1416585395;Removes all inputs.;public void clearInputs() {_		this.input = null__	};removes,all,inputs;public,void,clear,inputs,this,input,null
SingleInputOperator -> public void clearInputs();1422405541;Removes all inputs.;public void clearInputs() {_		this.input = null__	};removes,all,inputs;public,void,clear,inputs,this,input,null
SingleInputOperator -> public void clearInputs();1423570503;Removes all inputs.;public void clearInputs() {_		this.input = null__	};removes,all,inputs;public,void,clear,inputs,this,input,null
SingleInputOperator -> public void clearInputs();1455479358;Removes all inputs.;public void clearInputs() {_		this.input = null__	};removes,all,inputs;public,void,clear,inputs,this,input,null
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void setInputs(List<Operator<IN>> inputs);1405024514;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void setInputs(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(null, inputs.toArray(new Operator[inputs.size()]))__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,set,inputs,list,operator,in,inputs,this,input,operator,create,union,cascade,null,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void setInputs(List<Operator<IN>> inputs);1405090423;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void setInputs(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(null, inputs.toArray(new Operator[inputs.size()]))__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,set,inputs,list,operator,in,inputs,this,input,operator,create,union,cascade,null,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void setInputs(List<Operator<IN>> inputs);1411473593;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void setInputs(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(null, inputs.toArray(new Operator[inputs.size()]))__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,set,inputs,list,operator,in,inputs,this,input,operator,create,union,cascade,null,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void setInputs(List<Operator<IN>> inputs);1412346153;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void setInputs(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(null, inputs.toArray(new Operator[inputs.size()]))__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,set,inputs,list,operator,in,inputs,this,input,operator,create,union,cascade,null,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void setInputs(List<Operator<IN>> inputs);1412346154;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void setInputs(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(null, inputs.toArray(new Operator[inputs.size()]))__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,set,inputs,list,operator,in,inputs,this,input,operator,create,union,cascade,null,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void setInputs(List<Operator<IN>> inputs);1416585395;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void setInputs(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(null, inputs.toArray(new Operator[inputs.size()]))__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,set,inputs,list,operator,in,inputs,this,input,operator,create,union,cascade,null,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void setInputs(List<Operator<IN>> inputs);1422405541;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void setInputs(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(null, inputs.toArray(new Operator[inputs.size()]))__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,set,inputs,list,operator,in,inputs,this,input,operator,create,union,cascade,null,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void setInputs(List<Operator<IN>> inputs);1423570503;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void setInputs(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(null, inputs.toArray(new Operator[inputs.size()]))__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,set,inputs,list,operator,in,inputs,this,input,operator,create,union,cascade,null,inputs,to,array,new,operator,inputs,size
SingleInputOperator -> @Deprecated 	@SuppressWarnings("unchecked") 	public void setInputs(List<Operator<IN>> inputs);1455479358;Sets the input to the union of the given operators.__@param inputs The operator(s) that form the input._@deprecated This method will be removed in future versions. Use the {@link Union} operator instead.;@Deprecated_	@SuppressWarnings("unchecked")_	public void setInputs(List<Operator<IN>> inputs) {_		this.input = Operator.createUnionCascade(null, inputs.toArray(new Operator[inputs.size()]))__	};sets,the,input,to,the,union,of,the,given,operators,param,inputs,the,operator,s,that,form,the,input,deprecated,this,method,will,be,removed,in,future,versions,use,the,link,union,operator,instead;deprecated,suppress,warnings,unchecked,public,void,set,inputs,list,operator,in,inputs,this,input,operator,create,union,cascade,null,inputs,to,array,new,operator,inputs,size
