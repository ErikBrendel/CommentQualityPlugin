# id;timestamp;commentText;codeText;commentWords;codeWords
InstantiationUtil -> public static <T> Class<T> resolveClassByName( 			DataInputView in, 			ClassLoader cl, 			Class<? super T> supertype) throws IOException;1540907751;Loads a class by name from the given input stream and reflectively instantiates it.__<p>This method will use {@link DataInputView#readUTF()} to read the class name, and_then attempt to load the class from the given ClassLoader.__<p>The resolved class is checked to be equal to or a subtype of the given supertype_class.__@param in The stream to read the class name from._@param cl The class loader to resolve the class._@param supertype A class that the resolved class must extend.__@throws IOException Thrown, if the class name could not be read, the class could not be found,_or the class is not a subtype of the given supertype class.;public static <T> Class<T> resolveClassByName(_			DataInputView in,_			ClassLoader cl,_			Class<? super T> supertype) throws IOException {__		final String className = in.readUTF()__		final Class<?> rawClazz__		try {_			rawClazz = Class.forName(className, false, cl)__		}_		catch (ClassNotFoundException e) {_			throw new IOException(_					"Could not find class '" + className +  "' in classpath.", e)__		}__		if (!supertype.isAssignableFrom(rawClazz)) {_			throw new IOException("The class " + className + " is not a subclass of " + supertype.getName())__		}__		@SuppressWarnings("unchecked")_		Class<T> clazz = (Class<T>) rawClazz__		return clazz__	};loads,a,class,by,name,from,the,given,input,stream,and,reflectively,instantiates,it,p,this,method,will,use,link,data,input,view,read,utf,to,read,the,class,name,and,then,attempt,to,load,the,class,from,the,given,class,loader,p,the,resolved,class,is,checked,to,be,equal,to,or,a,subtype,of,the,given,supertype,class,param,in,the,stream,to,read,the,class,name,from,param,cl,the,class,loader,to,resolve,the,class,param,supertype,a,class,that,the,resolved,class,must,extend,throws,ioexception,thrown,if,the,class,name,could,not,be,read,the,class,could,not,be,found,or,the,class,is,not,a,subtype,of,the,given,supertype,class;public,static,t,class,t,resolve,class,by,name,data,input,view,in,class,loader,cl,class,super,t,supertype,throws,ioexception,final,string,class,name,in,read,utf,final,class,raw,clazz,try,raw,clazz,class,for,name,class,name,false,cl,catch,class,not,found,exception,e,throw,new,ioexception,could,not,find,class,class,name,in,classpath,e,if,supertype,is,assignable,from,raw,clazz,throw,new,ioexception,the,class,class,name,is,not,a,subclass,of,supertype,get,name,suppress,warnings,unchecked,class,t,clazz,class,t,raw,clazz,return,clazz
InstantiationUtil -> public static <T> Class<T> resolveClassByName( 			DataInputView in, 			ClassLoader cl, 			Class<? super T> supertype) throws IOException;1540981438;Loads a class by name from the given input stream and reflectively instantiates it.__<p>This method will use {@link DataInputView#readUTF()} to read the class name, and_then attempt to load the class from the given ClassLoader.__<p>The resolved class is checked to be equal to or a subtype of the given supertype_class.__@param in The stream to read the class name from._@param cl The class loader to resolve the class._@param supertype A class that the resolved class must extend.__@throws IOException Thrown, if the class name could not be read, the class could not be found,_or the class is not a subtype of the given supertype class.;public static <T> Class<T> resolveClassByName(_			DataInputView in,_			ClassLoader cl,_			Class<? super T> supertype) throws IOException {__		final String className = in.readUTF()__		final Class<?> rawClazz__		try {_			rawClazz = Class.forName(className, false, cl)__		}_		catch (ClassNotFoundException e) {_			throw new IOException(_					"Could not find class '" + className +  "' in classpath.", e)__		}__		if (!supertype.isAssignableFrom(rawClazz)) {_			throw new IOException("The class " + className + " is not a subclass of " + supertype.getName())__		}__		@SuppressWarnings("unchecked")_		Class<T> clazz = (Class<T>) rawClazz__		return clazz__	};loads,a,class,by,name,from,the,given,input,stream,and,reflectively,instantiates,it,p,this,method,will,use,link,data,input,view,read,utf,to,read,the,class,name,and,then,attempt,to,load,the,class,from,the,given,class,loader,p,the,resolved,class,is,checked,to,be,equal,to,or,a,subtype,of,the,given,supertype,class,param,in,the,stream,to,read,the,class,name,from,param,cl,the,class,loader,to,resolve,the,class,param,supertype,a,class,that,the,resolved,class,must,extend,throws,ioexception,thrown,if,the,class,name,could,not,be,read,the,class,could,not,be,found,or,the,class,is,not,a,subtype,of,the,given,supertype,class;public,static,t,class,t,resolve,class,by,name,data,input,view,in,class,loader,cl,class,super,t,supertype,throws,ioexception,final,string,class,name,in,read,utf,final,class,raw,clazz,try,raw,clazz,class,for,name,class,name,false,cl,catch,class,not,found,exception,e,throw,new,ioexception,could,not,find,class,class,name,in,classpath,e,if,supertype,is,assignable,from,raw,clazz,throw,new,ioexception,the,class,class,name,is,not,a,subclass,of,supertype,get,name,suppress,warnings,unchecked,class,t,clazz,class,t,raw,clazz,return,clazz
InstantiationUtil -> public static <T> Class<T> resolveClassByName( 			DataInputView in, 			ClassLoader cl, 			Class<? super T> supertype) throws IOException;1548745569;Loads a class by name from the given input stream and reflectively instantiates it.__<p>This method will use {@link DataInputView#readUTF()} to read the class name, and_then attempt to load the class from the given ClassLoader.__<p>The resolved class is checked to be equal to or a subtype of the given supertype_class.__@param in The stream to read the class name from._@param cl The class loader to resolve the class._@param supertype A class that the resolved class must extend.__@throws IOException Thrown, if the class name could not be read, the class could not be found,_or the class is not a subtype of the given supertype class.;public static <T> Class<T> resolveClassByName(_			DataInputView in,_			ClassLoader cl,_			Class<? super T> supertype) throws IOException {__		final String className = in.readUTF()__		final Class<?> rawClazz__		try {_			rawClazz = Class.forName(className, false, cl)__		}_		catch (ClassNotFoundException e) {_			throw new IOException(_					"Could not find class '" + className +  "' in classpath.", e)__		}__		if (!supertype.isAssignableFrom(rawClazz)) {_			throw new IOException("The class " + className + " is not a subclass of " + supertype.getName())__		}__		@SuppressWarnings("unchecked")_		Class<T> clazz = (Class<T>) rawClazz__		return clazz__	};loads,a,class,by,name,from,the,given,input,stream,and,reflectively,instantiates,it,p,this,method,will,use,link,data,input,view,read,utf,to,read,the,class,name,and,then,attempt,to,load,the,class,from,the,given,class,loader,p,the,resolved,class,is,checked,to,be,equal,to,or,a,subtype,of,the,given,supertype,class,param,in,the,stream,to,read,the,class,name,from,param,cl,the,class,loader,to,resolve,the,class,param,supertype,a,class,that,the,resolved,class,must,extend,throws,ioexception,thrown,if,the,class,name,could,not,be,read,the,class,could,not,be,found,or,the,class,is,not,a,subtype,of,the,given,supertype,class;public,static,t,class,t,resolve,class,by,name,data,input,view,in,class,loader,cl,class,super,t,supertype,throws,ioexception,final,string,class,name,in,read,utf,final,class,raw,clazz,try,raw,clazz,class,for,name,class,name,false,cl,catch,class,not,found,exception,e,throw,new,ioexception,could,not,find,class,class,name,in,classpath,e,if,supertype,is,assignable,from,raw,clazz,throw,new,ioexception,the,class,class,name,is,not,a,subclass,of,supertype,get,name,suppress,warnings,unchecked,class,t,clazz,class,t,raw,clazz,return,clazz
InstantiationUtil -> public static <T> Class<T> resolveClassByName( 			DataInputView in, 			ClassLoader cl, 			Class<? super T> supertype) throws IOException;1548758966;Loads a class by name from the given input stream and reflectively instantiates it.__<p>This method will use {@link DataInputView#readUTF()} to read the class name, and_then attempt to load the class from the given ClassLoader.__<p>The resolved class is checked to be equal to or a subtype of the given supertype_class.__@param in The stream to read the class name from._@param cl The class loader to resolve the class._@param supertype A class that the resolved class must extend.__@throws IOException Thrown, if the class name could not be read, the class could not be found,_or the class is not a subtype of the given supertype class.;public static <T> Class<T> resolveClassByName(_			DataInputView in,_			ClassLoader cl,_			Class<? super T> supertype) throws IOException {__		final String className = in.readUTF()__		final Class<?> rawClazz__		try {_			rawClazz = Class.forName(className, false, cl)__		}_		catch (ClassNotFoundException e) {_			throw new IOException(_					"Could not find class '" + className +  "' in classpath.", e)__		}__		if (!supertype.isAssignableFrom(rawClazz)) {_			throw new IOException("The class " + className + " is not a subclass of " + supertype.getName())__		}__		@SuppressWarnings("unchecked")_		Class<T> clazz = (Class<T>) rawClazz__		return clazz__	};loads,a,class,by,name,from,the,given,input,stream,and,reflectively,instantiates,it,p,this,method,will,use,link,data,input,view,read,utf,to,read,the,class,name,and,then,attempt,to,load,the,class,from,the,given,class,loader,p,the,resolved,class,is,checked,to,be,equal,to,or,a,subtype,of,the,given,supertype,class,param,in,the,stream,to,read,the,class,name,from,param,cl,the,class,loader,to,resolve,the,class,param,supertype,a,class,that,the,resolved,class,must,extend,throws,ioexception,thrown,if,the,class,name,could,not,be,read,the,class,could,not,be,found,or,the,class,is,not,a,subtype,of,the,given,supertype,class;public,static,t,class,t,resolve,class,by,name,data,input,view,in,class,loader,cl,class,super,t,supertype,throws,ioexception,final,string,class,name,in,read,utf,final,class,raw,clazz,try,raw,clazz,class,for,name,class,name,false,cl,catch,class,not,found,exception,e,throw,new,ioexception,could,not,find,class,class,name,in,classpath,e,if,supertype,is,assignable,from,raw,clazz,throw,new,ioexception,the,class,class,name,is,not,a,subclass,of,supertype,get,name,suppress,warnings,unchecked,class,t,clazz,class,t,raw,clazz,return,clazz
InstantiationUtil -> private InstantiationUtil();1405024514;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1405090423;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1411236168;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1411473593;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1416395139;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1428410784;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1438187929;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1440150581;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1440951699;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1443564120;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1445001970;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1448897362;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1450111459;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1450122912;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1454506288;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1454677662;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1455479358;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1467726586;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1471549817;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1472663401;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1474548132;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1475688972;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1481115912;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1483643244;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1487948320;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1489419093;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1516295284;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1517943539;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1519820892;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1524760045;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1530698221;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1537436047;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1538152840;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1540907751;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1540981438;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1548745569;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> private InstantiationUtil();1548758966;Private constructor to prevent instantiation.;private InstantiationUtil() {_		throw new RuntimeException()__	};private,constructor,to,prevent,instantiation;private,instantiation,util,throw,new,runtime,exception
InstantiationUtil -> public static <T> Class<T> resolveClassByName( 			DataInputView in, 			ClassLoader cl) throws IOException;1540907751;Loads a class by name from the given input stream and reflectively instantiates it.__<p>This method will use {@link DataInputView#readUTF()} to read the class name, and_then attempt to load the class from the given ClassLoader.__@param in The stream to read the class name from._@param cl The class loader to resolve the class.__@throws IOException Thrown, if the class name could not be read, the class could not be found.;public static <T> Class<T> resolveClassByName(_			DataInputView in,_			ClassLoader cl) throws IOException {_		return resolveClassByName(in, cl, Object.class)__	};loads,a,class,by,name,from,the,given,input,stream,and,reflectively,instantiates,it,p,this,method,will,use,link,data,input,view,read,utf,to,read,the,class,name,and,then,attempt,to,load,the,class,from,the,given,class,loader,param,in,the,stream,to,read,the,class,name,from,param,cl,the,class,loader,to,resolve,the,class,throws,ioexception,thrown,if,the,class,name,could,not,be,read,the,class,could,not,be,found;public,static,t,class,t,resolve,class,by,name,data,input,view,in,class,loader,cl,throws,ioexception,return,resolve,class,by,name,in,cl,object,class
InstantiationUtil -> public static <T> Class<T> resolveClassByName( 			DataInputView in, 			ClassLoader cl) throws IOException;1540981438;Loads a class by name from the given input stream and reflectively instantiates it.__<p>This method will use {@link DataInputView#readUTF()} to read the class name, and_then attempt to load the class from the given ClassLoader.__@param in The stream to read the class name from._@param cl The class loader to resolve the class.__@throws IOException Thrown, if the class name could not be read, the class could not be found.;public static <T> Class<T> resolveClassByName(_			DataInputView in,_			ClassLoader cl) throws IOException {_		return resolveClassByName(in, cl, Object.class)__	};loads,a,class,by,name,from,the,given,input,stream,and,reflectively,instantiates,it,p,this,method,will,use,link,data,input,view,read,utf,to,read,the,class,name,and,then,attempt,to,load,the,class,from,the,given,class,loader,param,in,the,stream,to,read,the,class,name,from,param,cl,the,class,loader,to,resolve,the,class,throws,ioexception,thrown,if,the,class,name,could,not,be,read,the,class,could,not,be,found;public,static,t,class,t,resolve,class,by,name,data,input,view,in,class,loader,cl,throws,ioexception,return,resolve,class,by,name,in,cl,object,class
InstantiationUtil -> public static <T> Class<T> resolveClassByName( 			DataInputView in, 			ClassLoader cl) throws IOException;1548745569;Loads a class by name from the given input stream and reflectively instantiates it.__<p>This method will use {@link DataInputView#readUTF()} to read the class name, and_then attempt to load the class from the given ClassLoader.__@param in The stream to read the class name from._@param cl The class loader to resolve the class.__@throws IOException Thrown, if the class name could not be read, the class could not be found.;public static <T> Class<T> resolveClassByName(_			DataInputView in,_			ClassLoader cl) throws IOException {_		return resolveClassByName(in, cl, Object.class)__	};loads,a,class,by,name,from,the,given,input,stream,and,reflectively,instantiates,it,p,this,method,will,use,link,data,input,view,read,utf,to,read,the,class,name,and,then,attempt,to,load,the,class,from,the,given,class,loader,param,in,the,stream,to,read,the,class,name,from,param,cl,the,class,loader,to,resolve,the,class,throws,ioexception,thrown,if,the,class,name,could,not,be,read,the,class,could,not,be,found;public,static,t,class,t,resolve,class,by,name,data,input,view,in,class,loader,cl,throws,ioexception,return,resolve,class,by,name,in,cl,object,class
InstantiationUtil -> public static <T> Class<T> resolveClassByName( 			DataInputView in, 			ClassLoader cl) throws IOException;1548758966;Loads a class by name from the given input stream and reflectively instantiates it.__<p>This method will use {@link DataInputView#readUTF()} to read the class name, and_then attempt to load the class from the given ClassLoader.__@param in The stream to read the class name from._@param cl The class loader to resolve the class.__@throws IOException Thrown, if the class name could not be read, the class could not be found.;public static <T> Class<T> resolveClassByName(_			DataInputView in,_			ClassLoader cl) throws IOException {_		return resolveClassByName(in, cl, Object.class)__	};loads,a,class,by,name,from,the,given,input,stream,and,reflectively,instantiates,it,p,this,method,will,use,link,data,input,view,read,utf,to,read,the,class,name,and,then,attempt,to,load,the,class,from,the,given,class,loader,param,in,the,stream,to,read,the,class,name,from,param,cl,the,class,loader,to,resolve,the,class,throws,ioexception,thrown,if,the,class,name,could,not,be,read,the,class,could,not,be,found;public,static,t,class,t,resolve,class,by,name,data,input,view,in,class,loader,cl,throws,ioexception,return,resolve,class,by,name,in,cl,object,class
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1405024514;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1405090423;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1411236168;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1411473593;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1416395139;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1428410784;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1438187929;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1440150581;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1440951699;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1443564120;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1445001970;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1448897362;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1450111459;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1450122912;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1454506288;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1454677662;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1455479358;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1467726586;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1471549817;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1472663401;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1474548132;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1475688972;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1481115912;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1483643244;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1487948320;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1489419093;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)__		_		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1516295284;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)___		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1517943539;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)___		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1519820892;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)___		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1524760045;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)___		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1530698221;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)___		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1537436047;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)___		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1538152840;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)___		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1540907751;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)___		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1540981438;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)___		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1548745569;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)___		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static void checkForInstantiation(Class<?> clazz);1548758966;Performs a standard check whether the class can be instantiated by {@code Class#newInstance()}.__@param clazz The class to check._@throws RuntimeException Thrown, if the class cannot be instantiated by {@code Class#newInstance()}.;public static void checkForInstantiation(Class<?> clazz) {_		final String errorMessage = checkForInstantiationError(clazz)___		if (errorMessage != null) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not instantiable: " + errorMessage)__		}_	};performs,a,standard,check,whether,the,class,can,be,instantiated,by,code,class,new,instance,param,clazz,the,class,to,check,throws,runtime,exception,thrown,if,the,class,cannot,be,instantiated,by,code,class,new,instance;public,static,void,check,for,instantiation,class,clazz,final,string,error,message,check,for,instantiation,error,clazz,if,error,message,null,throw,new,runtime,exception,the,class,clazz,get,name,is,not,instantiable,error,message
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1405024514;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1405090423;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1411236168;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1411473593;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1416395139;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1428410784;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1438187929;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1440150581;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1440951699;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1443564120;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1445001970;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1448897362;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1450111459;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1450122912;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1454506288;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1454677662;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1455479358;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1467726586;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1471549817;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1472663401;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1474548132;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1475688972;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1481115912;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1483643244;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1487948320;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1489419093;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" + _				castTo.getName() + "' as is required.")__		}_		_		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1516295284;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" +_				castTo.getName() + "' as is required.")__		}__		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1517943539;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" +_				castTo.getName() + "' as is required.")__		}__		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1519820892;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" +_				castTo.getName() + "' as is required.")__		}__		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1524760045;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" +_				castTo.getName() + "' as is required.")__		}__		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1530698221;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" +_				castTo.getName() + "' as is required.")__		}__		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1537436047;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" +_				castTo.getName() + "' as is required.")__		}__		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1538152840;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" +_				castTo.getName() + "' as is required.")__		}__		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1540907751;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" +_				castTo.getName() + "' as is required.")__		}__		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1540981438;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" +_				castTo.getName() + "' as is required.")__		}__		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1548745569;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" +_				castTo.getName() + "' as is required.")__		}__		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo);1548758966;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate._@param castTo Optional parameter, specifying the class that the given class must be a subclass off. This_argument is added to prevent class cast exceptions occurring later._@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz, Class<? super T> castTo) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		if (castTo != null && !castTo.isAssignableFrom(clazz)) {_			throw new RuntimeException("The class '" + clazz.getName() + "' is not a subclass of '" +_				castTo.getName() + "' as is required.")__		}__		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,param,cast,to,optional,parameter,specifying,the,class,that,the,given,class,must,be,a,subclass,off,this,argument,is,added,to,prevent,class,cast,exceptions,occurring,later,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,class,super,t,cast,to,if,clazz,null,throw,new,null,pointer,exception,if,cast,to,null,cast,to,is,assignable,from,clazz,throw,new,runtime,exception,the,class,clazz,get,name,is,not,a,subclass,of,cast,to,get,name,as,is,required,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException;1537436047;Creates a new instance of the given class name and type using the provided {@link ClassLoader}.__@param className of the class to load_@param targetType type of the instantiated class_@param classLoader to use for loading the class_@param <T> type of the instantiated class_@return Instance of the given class name_@throws ClassNotFoundException if the class could not be found;public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException {_		final Class<? extends T> clazz = Class.forName(_			className,_			false,_			classLoader).asSubclass(targetType)___		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,name,and,type,using,the,provided,link,class,loader,param,class,name,of,the,class,to,load,param,target,type,type,of,the,instantiated,class,param,class,loader,to,use,for,loading,the,class,param,t,type,of,the,instantiated,class,return,instance,of,the,given,class,name,throws,class,not,found,exception,if,the,class,could,not,be,found;public,static,t,t,instantiate,final,string,class,name,final,class,t,target,type,final,class,loader,class,loader,throws,class,not,found,exception,final,class,extends,t,clazz,class,for,name,class,name,false,class,loader,as,subclass,target,type,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException;1538152840;Creates a new instance of the given class name and type using the provided {@link ClassLoader}.__@param className of the class to load_@param targetType type of the instantiated class_@param classLoader to use for loading the class_@param <T> type of the instantiated class_@return Instance of the given class name_@throws ClassNotFoundException if the class could not be found;public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException {_		final Class<? extends T> clazz = Class.forName(_			className,_			false,_			classLoader).asSubclass(targetType)___		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,name,and,type,using,the,provided,link,class,loader,param,class,name,of,the,class,to,load,param,target,type,type,of,the,instantiated,class,param,class,loader,to,use,for,loading,the,class,param,t,type,of,the,instantiated,class,return,instance,of,the,given,class,name,throws,class,not,found,exception,if,the,class,could,not,be,found;public,static,t,t,instantiate,final,string,class,name,final,class,t,target,type,final,class,loader,class,loader,throws,class,not,found,exception,final,class,extends,t,clazz,class,for,name,class,name,false,class,loader,as,subclass,target,type,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException;1540907751;Creates a new instance of the given class name and type using the provided {@link ClassLoader}.__@param className of the class to load_@param targetType type of the instantiated class_@param classLoader to use for loading the class_@param <T> type of the instantiated class_@return Instance of the given class name_@throws ClassNotFoundException if the class could not be found;public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException {_		final Class<? extends T> clazz = Class.forName(_			className,_			false,_			classLoader).asSubclass(targetType)___		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,name,and,type,using,the,provided,link,class,loader,param,class,name,of,the,class,to,load,param,target,type,type,of,the,instantiated,class,param,class,loader,to,use,for,loading,the,class,param,t,type,of,the,instantiated,class,return,instance,of,the,given,class,name,throws,class,not,found,exception,if,the,class,could,not,be,found;public,static,t,t,instantiate,final,string,class,name,final,class,t,target,type,final,class,loader,class,loader,throws,class,not,found,exception,final,class,extends,t,clazz,class,for,name,class,name,false,class,loader,as,subclass,target,type,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException;1540981438;Creates a new instance of the given class name and type using the provided {@link ClassLoader}.__@param className of the class to load_@param targetType type of the instantiated class_@param classLoader to use for loading the class_@param <T> type of the instantiated class_@return Instance of the given class name_@throws ClassNotFoundException if the class could not be found;public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException {_		final Class<? extends T> clazz = Class.forName(_			className,_			false,_			classLoader).asSubclass(targetType)___		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,name,and,type,using,the,provided,link,class,loader,param,class,name,of,the,class,to,load,param,target,type,type,of,the,instantiated,class,param,class,loader,to,use,for,loading,the,class,param,t,type,of,the,instantiated,class,return,instance,of,the,given,class,name,throws,class,not,found,exception,if,the,class,could,not,be,found;public,static,t,t,instantiate,final,string,class,name,final,class,t,target,type,final,class,loader,class,loader,throws,class,not,found,exception,final,class,extends,t,clazz,class,for,name,class,name,false,class,loader,as,subclass,target,type,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException;1548745569;Creates a new instance of the given class name and type using the provided {@link ClassLoader}.__@param className of the class to load_@param targetType type of the instantiated class_@param classLoader to use for loading the class_@param <T> type of the instantiated class_@return Instance of the given class name_@throws ClassNotFoundException if the class could not be found;public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException {_		final Class<? extends T> clazz = Class.forName(_			className,_			false,_			classLoader).asSubclass(targetType)___		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,name,and,type,using,the,provided,link,class,loader,param,class,name,of,the,class,to,load,param,target,type,type,of,the,instantiated,class,param,class,loader,to,use,for,loading,the,class,param,t,type,of,the,instantiated,class,return,instance,of,the,given,class,name,throws,class,not,found,exception,if,the,class,could,not,be,found;public,static,t,t,instantiate,final,string,class,name,final,class,t,target,type,final,class,loader,class,loader,throws,class,not,found,exception,final,class,extends,t,clazz,class,for,name,class,name,false,class,loader,as,subclass,target,type,return,instantiate,clazz
InstantiationUtil -> public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException;1548758966;Creates a new instance of the given class name and type using the provided {@link ClassLoader}.__@param className of the class to load_@param targetType type of the instantiated class_@param classLoader to use for loading the class_@param <T> type of the instantiated class_@return Instance of the given class name_@throws ClassNotFoundException if the class could not be found;public static <T> T instantiate(final String className, final Class<T> targetType, final ClassLoader classLoader) throws ClassNotFoundException {_		final Class<? extends T> clazz = Class.forName(_			className,_			false,_			classLoader).asSubclass(targetType)___		return instantiate(clazz)__	};creates,a,new,instance,of,the,given,class,name,and,type,using,the,provided,link,class,loader,param,class,name,of,the,class,to,load,param,target,type,type,of,the,instantiated,class,param,class,loader,to,use,for,loading,the,class,param,t,type,of,the,instantiated,class,return,instance,of,the,given,class,name,throws,class,not,found,exception,if,the,class,could,not,be,found;public,static,t,t,instantiate,final,string,class,name,final,class,t,target,type,final,class,loader,class,loader,throws,class,not,found,exception,final,class,extends,t,clazz,class,for,name,class,name,false,class,loader,as,subclass,target,type,return,instantiate,clazz
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1405024514;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1405090423;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1411236168;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1411473593;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1416395139;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1428410784;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1438187929;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1440150581;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1440951699;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1443564120;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1445001970;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1448897362;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1450111459;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		if (clazz.getEnclosingClass() == null) {_			_			return false__		} else {_			_			if (clazz.getDeclaringClass() != null) {_				_				return !Modifier.isStatic(clazz.getModifiers())__			} else {_				_				return true__			}_		}_	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,if,clazz,get,enclosing,class,null,return,false,else,if,clazz,get,declaring,class,null,return,modifier,is,static,clazz,get,modifiers,else,return,true
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1450122912;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1454506288;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1454677662;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1455479358;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1467726586;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1471549817;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1472663401;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1474548132;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1475688972;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1481115912;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1483643244;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1487948320;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1489419093;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null && _			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1516295284;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null &&_			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1517943539;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null &&_			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1519820892;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null &&_			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1524760045;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null &&_			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1530698221;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null &&_			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1537436047;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null &&_			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1538152840;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null &&_			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1540907751;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null &&_			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1540981438;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null &&_			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1548745569;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null &&_			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isNonStaticInnerClass(Class<?> clazz);1548758966;Checks, whether the class is an inner class that is not statically accessible. That is especially true for_anonymous inner classes.__@param clazz The class to check._@return True, if the class is a non-statically accessible inner class.;public static boolean isNonStaticInnerClass(Class<?> clazz) {_		return clazz.getEnclosingClass() != null &&_			(clazz.getDeclaringClass() == null || !Modifier.isStatic(clazz.getModifiers()))__	};checks,whether,the,class,is,an,inner,class,that,is,not,statically,accessible,that,is,especially,true,for,anonymous,inner,classes,param,clazz,the,class,to,check,return,true,if,the,class,is,a,non,statically,accessible,inner,class;public,static,boolean,is,non,static,inner,class,class,clazz,return,clazz,get,enclosing,class,null,clazz,get,declaring,class,null,modifier,is,static,clazz,get,modifiers
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1405024514;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1405090423;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1411236168;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1411473593;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1416395139;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1428410784;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1438187929;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1440150581;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1440951699;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1443564120;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1445001970;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1448897362;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1450111459;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1450122912;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1454506288;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1454677662;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1455479358;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1467726586;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1471549817;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1472663401;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1474548132;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1475688972;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1481115912;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1483643244;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1487948320;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1489419093;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1516295284;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1517943539;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1519820892;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1524760045;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1530698221;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1537436047;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1538152840;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1540907751;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1540981438;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1548745569;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static boolean isProperClass(Class<?> clazz);1548758966;Checks, whether the class is a proper class, i.e. not abstract or an interface, and not a primitive type.__@param clazz The class to check._@return True, if the class is a proper class, false otherwise.;public static boolean isProperClass(Class<?> clazz) {_		int mods = clazz.getModifiers()__		return !(Modifier.isAbstract(mods) || Modifier.isInterface(mods) || Modifier.isNative(mods))__	};checks,whether,the,class,is,a,proper,class,i,e,not,abstract,or,an,interface,and,not,a,primitive,type,param,clazz,the,class,to,check,return,true,if,the,class,is,a,proper,class,false,otherwise;public,static,boolean,is,proper,class,class,clazz,int,mods,clazz,get,modifiers,return,modifier,is,abstract,mods,modifier,is,interface,mods,modifier,is,native,mods
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1454677662;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1455479358;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1467726586;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1471549817;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1472663401;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1474548132;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1475688972;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1481115912;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1483643244;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1487948320;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1489419093;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1516295284;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1517943539;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1519820892;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1524760045;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1530698221;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1537436047;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1538152840;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1540907751;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1540981438;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1548745569;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException;1548758966;Clones the given serializable object using Java serialization, using the given classloader to_resolve the cloned classes.__@param obj Object to clone_@param classLoader The classloader to resolve the classes during deserialization._@param <T> Type of the object to clone__@return Cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj, ClassLoader classLoader) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			final byte[] serializedObject = serializeObject(obj)__			return deserializeObject(serializedObject, classLoader)__		}_	};clones,the,given,serializable,object,using,java,serialization,using,the,given,classloader,to,resolve,the,cloned,classes,param,obj,object,to,clone,param,class,loader,the,classloader,to,resolve,the,classes,during,deserialization,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,class,loader,class,loader,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,class,loader
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1405024514;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1405090423;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1411236168;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1411473593;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1416395139;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1428410784;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1438187929;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1440150581;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1440951699;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1443564120;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1445001970;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1448897362;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1450111459;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1450122912;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1454506288;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1454677662;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1455479358;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1467726586;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1471549817;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1472663401;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1474548132;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1475688972;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1481115912;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1483643244;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1487948320;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1489419093;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1516295284;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1517943539;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1519820892;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1524760045;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1530698221;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1537436047;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1538152840;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1540907751;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1540981438;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1548745569;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static boolean isPublic(Class<?> clazz);1548758966;Checks, whether the given class is public.__@param clazz The class to check._@return True, if the class is public, false if not.;public static boolean isPublic(Class<?> clazz) {_		return Modifier.isPublic(clazz.getModifiers())__	};checks,whether,the,given,class,is,public,param,clazz,the,class,to,check,return,true,if,the,class,is,public,false,if,not;public,static,boolean,is,public,class,clazz,return,modifier,is,public,clazz,get,modifiers
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1405024514;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (IllegalAccessException iaex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iaex.getMessage(), iaex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,illegal,access,exception,iaex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iaex,get,message,iaex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1405090423;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (IllegalAccessException iaex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iaex.getMessage(), iaex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,illegal,access,exception,iaex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iaex,get,message,iaex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1411236168;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (IllegalAccessException iaex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iaex.getMessage(), iaex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,illegal,access,exception,iaex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iaex,get,message,iaex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1411473593;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (IllegalAccessException iaex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iaex.getMessage(), iaex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,illegal,access,exception,iaex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iaex,get,message,iaex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1416395139;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (IllegalAccessException iaex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iaex.getMessage(), iaex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,illegal,access,exception,iaex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iaex,get,message,iaex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1428410784;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (IllegalAccessException iaex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iaex.getMessage(), iaex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,illegal,access,exception,iaex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iaex,get,message,iaex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1438187929;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (IllegalAccessException iaex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iaex.getMessage(), iaex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,illegal,access,exception,iaex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iaex,get,message,iaex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1440150581;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1440951699;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1443564120;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1445001970;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1448897362;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1450111459;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1450122912;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1454506288;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1454677662;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1455479358;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1467726586;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1471549817;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1472663401;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1474548132;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1475688972;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1481115912;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1483643244;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1487948320;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1489419093;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}_		_		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)__			_			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() + _				"' Most likely the constructor (or a member variable initialization) threw an exception" + _				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1516295284;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)___			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_				"' Most likely the constructor (or a member variable initialization) threw an exception" +_				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1517943539;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)___			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_				"' Most likely the constructor (or a member variable initialization) threw an exception" +_				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1519820892;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)___			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_				"' Most likely the constructor (or a member variable initialization) threw an exception" +_				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1524760045;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)___			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_				"' Most likely the constructor (or a member variable initialization) threw an exception" +_				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1530698221;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)___			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_				"' Most likely the constructor (or a member variable initialization) threw an exception" +_				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1537436047;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)___			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_				"' Most likely the constructor (or a member variable initialization) threw an exception" +_				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1538152840;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)___			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_				"' Most likely the constructor (or a member variable initialization) threw an exception" +_				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1540907751;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)___			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_				"' Most likely the constructor (or a member variable initialization) threw an exception" +_				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1540981438;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)___			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_				"' Most likely the constructor (or a member variable initialization) threw an exception" +_				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1548745569;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)___			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_				"' Most likely the constructor (or a member variable initialization) threw an exception" +_				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T> T instantiate(Class<T> clazz);1548758966;Creates a new instance of the given class.__@param <T> The generic type of the class._@param clazz The class to instantiate.__@return An instance of the given class.__@throws RuntimeException Thrown, if the class could not be instantiated. The exception contains a detailed_message about the reason why the instantiation failed.;public static <T> T instantiate(Class<T> clazz) {_		if (clazz == null) {_			throw new NullPointerException()__		}__		_		try {_			return clazz.newInstance()__		}_		catch (InstantiationException | IllegalAccessException iex) {_			_			checkForInstantiation(clazz)___			_			_			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_					"' due to an unspecified exception: " + iex.getMessage(), iex)__		}_		catch (Throwable t) {_			String message = t.getMessage()__			throw new RuntimeException("Could not instantiate type '" + clazz.getName() +_				"' Most likely the constructor (or a member variable initialization) threw an exception" +_				(message == null ? "." : ": " + message), t)__		}_	};creates,a,new,instance,of,the,given,class,param,t,the,generic,type,of,the,class,param,clazz,the,class,to,instantiate,return,an,instance,of,the,given,class,throws,runtime,exception,thrown,if,the,class,could,not,be,instantiated,the,exception,contains,a,detailed,message,about,the,reason,why,the,instantiation,failed;public,static,t,t,instantiate,class,t,clazz,if,clazz,null,throw,new,null,pointer,exception,try,return,clazz,new,instance,catch,instantiation,exception,illegal,access,exception,iex,check,for,instantiation,clazz,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,due,to,an,unspecified,exception,iex,get,message,iex,catch,throwable,t,string,message,t,get,message,throw,new,runtime,exception,could,not,instantiate,type,clazz,get,name,most,likely,the,constructor,or,a,member,variable,initialization,threw,an,exception,message,null,message,t
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1467726586;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1471549817;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1472663401;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1474548132;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1475688972;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1481115912;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1483643244;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1487948320;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1489419093;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1516295284;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1517943539;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1519820892;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1524760045;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1530698221;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1537436047;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1538152840;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1540907751;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1540981438;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1548745569;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException;1548758966;Clones the given writable using the {@link IOReadableWritable serialization}.__@param original Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException Thrown is the serialization fails.;public static <T extends IOReadableWritable> T createCopyWritable(T original) throws IOException {_		if (original == null) {_			return null__		}__		final ByteArrayOutputStream baos = new ByteArrayOutputStream()__		try (DataOutputViewStreamWrapper out = new DataOutputViewStreamWrapper(baos)) {_			original.write(out)__		}__		final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray())__		try (DataInputViewStreamWrapper in = new DataInputViewStreamWrapper(bais)) {__			@SuppressWarnings("unchecked")_			T copy = (T) instantiate(original.getClass())__			copy.read(in)__			return copy__		}_	};clones,the,given,writable,using,the,link,ioreadable,writable,serialization,param,original,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,thrown,is,the,serialization,fails;public,static,t,extends,ioreadable,writable,t,create,copy,writable,t,original,throws,ioexception,if,original,null,return,null,final,byte,array,output,stream,baos,new,byte,array,output,stream,try,data,output,view,stream,wrapper,out,new,data,output,view,stream,wrapper,baos,original,write,out,final,byte,array,input,stream,bais,new,byte,array,input,stream,baos,to,byte,array,try,data,input,view,stream,wrapper,in,new,data,input,view,stream,wrapper,bais,suppress,warnings,unchecked,t,copy,t,instantiate,original,get,class,copy,read,in,return,copy
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1405024514;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (int i = 0_ i < constructors.length_ i++) {_			if (constructors[i].getParameterTypes().length == 0 && _					Modifier.isPublic(constructors[i].getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,int,i,0,i,constructors,length,i,if,constructors,i,get,parameter,types,length,0,modifier,is,public,constructors,i,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1405090423;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (int i = 0_ i < constructors.length_ i++) {_			if (constructors[i].getParameterTypes().length == 0 && _					Modifier.isPublic(constructors[i].getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,int,i,0,i,constructors,length,i,if,constructors,i,get,parameter,types,length,0,modifier,is,public,constructors,i,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1411236168;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (int i = 0_ i < constructors.length_ i++) {_			if (constructors[i].getParameterTypes().length == 0 && _					Modifier.isPublic(constructors[i].getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,int,i,0,i,constructors,length,i,if,constructors,i,get,parameter,types,length,0,modifier,is,public,constructors,i,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1411473593;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (int i = 0_ i < constructors.length_ i++) {_			if (constructors[i].getParameterTypes().length == 0 && _					Modifier.isPublic(constructors[i].getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,int,i,0,i,constructors,length,i,if,constructors,i,get,parameter,types,length,0,modifier,is,public,constructors,i,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1416395139;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (int i = 0_ i < constructors.length_ i++) {_			if (constructors[i].getParameterTypes().length == 0 && _					Modifier.isPublic(constructors[i].getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,int,i,0,i,constructors,length,i,if,constructors,i,get,parameter,types,length,0,modifier,is,public,constructors,i,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1428410784;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (int i = 0_ i < constructors.length_ i++) {_			if (constructors[i].getParameterTypes().length == 0 && _					Modifier.isPublic(constructors[i].getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,int,i,0,i,constructors,length,i,if,constructors,i,get,parameter,types,length,0,modifier,is,public,constructors,i,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1438187929;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (int i = 0_ i < constructors.length_ i++) {_			if (constructors[i].getParameterTypes().length == 0 && _					Modifier.isPublic(constructors[i].getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,int,i,0,i,constructors,length,i,if,constructors,i,get,parameter,types,length,0,modifier,is,public,constructors,i,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1440150581;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1440951699;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1443564120;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1445001970;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1448897362;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1450111459;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1450122912;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1454506288;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1454677662;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1455479358;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1467726586;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1471549817;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1472663401;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1474548132;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1475688972;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1481115912;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1483643244;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1487948320;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1489419093;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1516295284;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1517943539;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1519820892;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1524760045;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1530698221;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1537436047;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1538152840;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1540907751;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1540981438;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1548745569;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static boolean hasPublicNullaryConstructor(Class<?> clazz);1548758966;Checks, whether the given class has a public nullary constructor.__@param clazz The class to check._@return True, if the class has a public nullary constructor, false if not.;public static boolean hasPublicNullaryConstructor(Class<?> clazz) {_		Constructor<?>[] constructors = clazz.getConstructors()__		for (Constructor<?> constructor : constructors) {_			if (constructor.getParameterTypes().length == 0 &&_					Modifier.isPublic(constructor.getModifiers())) {_				return true__			}_		}_		return false__	};checks,whether,the,given,class,has,a,public,nullary,constructor,param,clazz,the,class,to,check,return,true,if,the,class,has,a,public,nullary,constructor,false,if,not;public,static,boolean,has,public,nullary,constructor,class,clazz,constructor,constructors,clazz,get,constructors,for,constructor,constructor,constructors,if,constructor,get,parameter,types,length,0,modifier,is,public,constructor,get,modifiers,return,true,return,false
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1454506288;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		final byte[] serializedObject = serializeObject(obj)__		return deserializeObject(serializedObject, obj.getClass().getClassLoader())__	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,final,byte,serialized,object,serialize,object,obj,return,deserialize,object,serialized,object,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1454677662;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1455479358;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1467726586;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1471549817;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1472663401;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1474548132;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1475688972;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1481115912;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1483643244;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1487948320;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1489419093;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return Cloned object_@throws IOException_@throws ClassNotFoundException;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,cloned,object,throws,ioexception,throws,class,not,found,exception;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1516295284;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return The cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,the,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1517943539;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return The cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,the,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1519820892;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return The cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,the,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1524760045;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return The cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,the,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1530698221;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return The cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,the,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1537436047;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return The cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,the,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1538152840;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return The cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,the,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1540907751;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return The cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,the,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1540981438;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return The cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,the,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1548745569;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return The cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,the,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
InstantiationUtil -> public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException;1548758966;Clones the given serializable object using Java serialization.__@param obj Object to clone_@param <T> Type of the object to clone_@return The cloned object__@throws IOException Thrown if the serialization or deserialization process fails._@throws ClassNotFoundException Thrown if any of the classes referenced by the object_cannot be resolved during deserialization.;public static <T extends Serializable> T clone(T obj) throws IOException, ClassNotFoundException {_		if (obj == null) {_			return null__		} else {_			return clone(obj, obj.getClass().getClassLoader())__		}_	};clones,the,given,serializable,object,using,java,serialization,param,obj,object,to,clone,param,t,type,of,the,object,to,clone,return,the,cloned,object,throws,ioexception,thrown,if,the,serialization,or,deserialization,process,fails,throws,class,not,found,exception,thrown,if,any,of,the,classes,referenced,by,the,object,cannot,be,resolved,during,deserialization;public,static,t,extends,serializable,t,clone,t,obj,throws,ioexception,class,not,found,exception,if,obj,null,return,null,else,return,clone,obj,obj,get,class,get,class,loader
