# id;timestamp;commentText;codeText;commentWords;codeWords
TypeInformation -> public abstract boolean isTupleType()_;1424115592;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,abstract,boolean,is,tuple,type
TypeInformation -> public abstract boolean isTupleType()_;1424693348;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,abstract,boolean,is,tuple,type
TypeInformation -> public abstract boolean isTupleType()_;1428086525;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,abstract,boolean,is,tuple,type
TypeInformation -> public abstract boolean isTupleType()_;1433417242;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,abstract,boolean,is,tuple,type
TypeInformation -> public abstract boolean isTupleType()_;1442481573;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,abstract,boolean,is,tuple,type
TypeInformation -> public abstract boolean isTupleType()_;1444144446;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,abstract,boolean,is,tuple,type
TypeInformation -> public abstract boolean isTupleType()_;1452178883;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,abstract,boolean,is,tuple,type
TypeInformation -> public abstract boolean canEqual(Object obj)_;1442481573;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1444144446;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1452178883;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1454679829;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1455101486;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1456848177;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1474459924;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1480022562;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1480022575;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1524407314;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1524407314;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1534452319;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> public abstract boolean canEqual(Object obj)_;1549467949;Returns true if the given object can be equaled with this object. If not, it returns false.__@param obj Object which wants to take part in the equality relation_@return true if obj can be equaled with this, otherwise false;public abstract boolean canEqual(Object obj)_;returns,true,if,the,given,object,can,be,equaled,with,this,object,if,not,it,returns,false,param,obj,object,which,wants,to,take,part,in,the,equality,relation,return,true,if,obj,can,be,equaled,with,this,otherwise,false;public,abstract,boolean,can,equal,object,obj
TypeInformation -> @PublicEvolving 	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1455101486;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;@PublicEvolving_	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,evolving,public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> @PublicEvolving 	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1456848177;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;@PublicEvolving_	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,evolving,public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> @PublicEvolving 	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1474459924;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;@PublicEvolving_	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,evolving,public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> @PublicEvolving 	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1480022562;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;@PublicEvolving_	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,evolving,public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> @PublicEvolving 	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1480022575;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;@PublicEvolving_	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,evolving,public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> @PublicEvolving 	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1524407314;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;@PublicEvolving_	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,evolving,public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> @PublicEvolving 	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1524407314;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;@PublicEvolving_	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,evolving,public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> @PublicEvolving 	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1534452319;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;@PublicEvolving_	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,evolving,public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> @PublicEvolving 	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1549467949;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;@PublicEvolving_	public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,evolving,public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> public abstract Class<T> getTypeClass()_;1424115592;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,abstract,class,t,get,type,class
TypeInformation -> public abstract Class<T> getTypeClass()_;1424693348;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,abstract,class,t,get,type,class
TypeInformation -> public abstract Class<T> getTypeClass()_;1428086525;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,abstract,class,t,get,type,class
TypeInformation -> public abstract Class<T> getTypeClass()_;1433417242;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,abstract,class,t,get,type,class
TypeInformation -> public abstract Class<T> getTypeClass()_;1442481573;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,abstract,class,t,get,type,class
TypeInformation -> public abstract Class<T> getTypeClass()_;1444144446;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,abstract,class,t,get,type,class
TypeInformation -> public abstract Class<T> getTypeClass()_;1452178883;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,abstract,class,t,get,type,class
TypeInformation -> public static <T> TypeInformation<T> of(Class<T> typeClass);1456848177;Creates a TypeInformation for the type described by the given class.__<p>This method only works for non-generic types. For generic types, use the_{@link #of(TypeHint)} method.__@param typeClass The class of the type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(Class<T> typeClass) {_		return TypeExtractor.createTypeInfo(typeClass)__	};creates,a,type,information,for,the,type,described,by,the,given,class,p,this,method,only,works,for,non,generic,types,for,generic,types,use,the,link,of,type,hint,method,param,type,class,the,class,of,the,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,class,t,type,class,return,type,extractor,create,type,info,type,class
TypeInformation -> public static <T> TypeInformation<T> of(Class<T> typeClass);1474459924;Creates a TypeInformation for the type described by the given class.__<p>This method only works for non-generic types. For generic types, use the_{@link #of(TypeHint)} method.__@param typeClass The class of the type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(Class<T> typeClass) {_		return TypeExtractor.createTypeInfo(typeClass)__	};creates,a,type,information,for,the,type,described,by,the,given,class,p,this,method,only,works,for,non,generic,types,for,generic,types,use,the,link,of,type,hint,method,param,type,class,the,class,of,the,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,class,t,type,class,return,type,extractor,create,type,info,type,class
TypeInformation -> public static <T> TypeInformation<T> of(Class<T> typeClass);1480022562;Creates a TypeInformation for the type described by the given class.__<p>This method only works for non-generic types. For generic types, use the_{@link #of(TypeHint)} method.__@param typeClass The class of the type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(Class<T> typeClass) {_		return TypeExtractor.createTypeInfo(typeClass)__	};creates,a,type,information,for,the,type,described,by,the,given,class,p,this,method,only,works,for,non,generic,types,for,generic,types,use,the,link,of,type,hint,method,param,type,class,the,class,of,the,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,class,t,type,class,return,type,extractor,create,type,info,type,class
TypeInformation -> public static <T> TypeInformation<T> of(Class<T> typeClass);1480022575;Creates a TypeInformation for the type described by the given class.__<p>This method only works for non-generic types. For generic types, use the_{@link #of(TypeHint)} method.__@param typeClass The class of the type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(Class<T> typeClass) {_		return TypeExtractor.createTypeInfo(typeClass)__	};creates,a,type,information,for,the,type,described,by,the,given,class,p,this,method,only,works,for,non,generic,types,for,generic,types,use,the,link,of,type,hint,method,param,type,class,the,class,of,the,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,class,t,type,class,return,type,extractor,create,type,info,type,class
TypeInformation -> public static <T> TypeInformation<T> of(Class<T> typeClass);1524407314;Creates a TypeInformation for the type described by the given class.__<p>This method only works for non-generic types. For generic types, use the_{@link #of(TypeHint)} method.__@param typeClass The class of the type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(Class<T> typeClass) {_		return TypeExtractor.createTypeInfo(typeClass)__	};creates,a,type,information,for,the,type,described,by,the,given,class,p,this,method,only,works,for,non,generic,types,for,generic,types,use,the,link,of,type,hint,method,param,type,class,the,class,of,the,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,class,t,type,class,return,type,extractor,create,type,info,type,class
TypeInformation -> public static <T> TypeInformation<T> of(Class<T> typeClass);1524407314;Creates a TypeInformation for the type described by the given class.__<p>This method only works for non-generic types. For generic types, use the_{@link #of(TypeHint)} method.__@param typeClass The class of the type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(Class<T> typeClass) {_		try {_			return TypeExtractor.createTypeInfo(typeClass)__		}_		catch (InvalidTypesException e) {_			throw new FlinkRuntimeException(_					"Cannot extract TypeInformation from Class alone, because generic parameters are missing. " +_					"Please use TypeInformation.of(TypeHint) instead, or another equivalent method in the API that " +_					"accepts a TypeHint instead of a Class. " +_					"For example for a Tuple2<Long, String> pass a 'new TypeHint<Tuple2<Long, String>>(){}'.")__		}_	};creates,a,type,information,for,the,type,described,by,the,given,class,p,this,method,only,works,for,non,generic,types,for,generic,types,use,the,link,of,type,hint,method,param,type,class,the,class,of,the,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,class,t,type,class,try,return,type,extractor,create,type,info,type,class,catch,invalid,types,exception,e,throw,new,flink,runtime,exception,cannot,extract,type,information,from,class,alone,because,generic,parameters,are,missing,please,use,type,information,of,type,hint,instead,or,another,equivalent,method,in,the,api,that,accepts,a,type,hint,instead,of,a,class,for,example,for,a,tuple2,long,string,pass,a,new,type,hint,tuple2,long,string
TypeInformation -> public static <T> TypeInformation<T> of(Class<T> typeClass);1534452319;Creates a TypeInformation for the type described by the given class.__<p>This method only works for non-generic types. For generic types, use the_{@link #of(TypeHint)} method.__@param typeClass The class of the type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(Class<T> typeClass) {_		try {_			return TypeExtractor.createTypeInfo(typeClass)__		}_		catch (InvalidTypesException e) {_			throw new FlinkRuntimeException(_					"Cannot extract TypeInformation from Class alone, because generic parameters are missing. " +_					"Please use TypeInformation.of(TypeHint) instead, or another equivalent method in the API that " +_					"accepts a TypeHint instead of a Class. " +_					"For example for a Tuple2<Long, String> pass a 'new TypeHint<Tuple2<Long, String>>(){}'.")__		}_	};creates,a,type,information,for,the,type,described,by,the,given,class,p,this,method,only,works,for,non,generic,types,for,generic,types,use,the,link,of,type,hint,method,param,type,class,the,class,of,the,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,class,t,type,class,try,return,type,extractor,create,type,info,type,class,catch,invalid,types,exception,e,throw,new,flink,runtime,exception,cannot,extract,type,information,from,class,alone,because,generic,parameters,are,missing,please,use,type,information,of,type,hint,instead,or,another,equivalent,method,in,the,api,that,accepts,a,type,hint,instead,of,a,class,for,example,for,a,tuple2,long,string,pass,a,new,type,hint,tuple2,long,string
TypeInformation -> public static <T> TypeInformation<T> of(Class<T> typeClass);1549467949;Creates a TypeInformation for the type described by the given class.__<p>This method only works for non-generic types. For generic types, use the_{@link #of(TypeHint)} method.__@param typeClass The class of the type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(Class<T> typeClass) {_		try {_			return TypeExtractor.createTypeInfo(typeClass)__		}_		catch (InvalidTypesException e) {_			throw new FlinkRuntimeException(_					"Cannot extract TypeInformation from Class alone, because generic parameters are missing. " +_					"Please use TypeInformation.of(TypeHint) instead, or another equivalent method in the API that " +_					"accepts a TypeHint instead of a Class. " +_					"For example for a Tuple2<Long, String> pass a 'new TypeHint<Tuple2<Long, String>>(){}'.")__		}_	};creates,a,type,information,for,the,type,described,by,the,given,class,p,this,method,only,works,for,non,generic,types,for,generic,types,use,the,link,of,type,hint,method,param,type,class,the,class,of,the,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,class,t,type,class,try,return,type,extractor,create,type,info,type,class,catch,invalid,types,exception,e,throw,new,flink,runtime,exception,cannot,extract,type,information,from,class,alone,because,generic,parameters,are,missing,please,use,type,information,of,type,hint,instead,or,another,equivalent,method,in,the,api,that,accepts,a,type,hint,instead,of,a,class,for,example,for,a,tuple2,long,string,pass,a,new,type,hint,tuple2,long,string
TypeInformation -> public static <T> TypeInformation<T> of(TypeHint<T> typeHint);1456848177;Creates a TypeInformation for a generic type via a utility "type hint"._This method can be used as follows:_<pre>_{@code_TypeInformation<Tuple2<String, Long>> info = TypeInformation.of(new TypeHint<Tuple2<String, Long>>(){})___</pre>__@param typeHint The hint for the generic type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(TypeHint<T> typeHint) {_		return typeHint.getTypeInfo()__	};creates,a,type,information,for,a,generic,type,via,a,utility,type,hint,this,method,can,be,used,as,follows,pre,code,type,information,tuple2,string,long,info,type,information,of,new,type,hint,tuple2,string,long,pre,param,type,hint,the,hint,for,the,generic,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,type,hint,t,type,hint,return,type,hint,get,type,info
TypeInformation -> public static <T> TypeInformation<T> of(TypeHint<T> typeHint);1474459924;Creates a TypeInformation for a generic type via a utility "type hint"._This method can be used as follows:_<pre>_{@code_TypeInformation<Tuple2<String, Long>> info = TypeInformation.of(new TypeHint<Tuple2<String, Long>>(){})___</pre>__@param typeHint The hint for the generic type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(TypeHint<T> typeHint) {_		return typeHint.getTypeInfo()__	};creates,a,type,information,for,a,generic,type,via,a,utility,type,hint,this,method,can,be,used,as,follows,pre,code,type,information,tuple2,string,long,info,type,information,of,new,type,hint,tuple2,string,long,pre,param,type,hint,the,hint,for,the,generic,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,type,hint,t,type,hint,return,type,hint,get,type,info
TypeInformation -> public static <T> TypeInformation<T> of(TypeHint<T> typeHint);1480022562;Creates a TypeInformation for a generic type via a utility "type hint"._This method can be used as follows:_<pre>_{@code_TypeInformation<Tuple2<String, Long>> info = TypeInformation.of(new TypeHint<Tuple2<String, Long>>(){})___</pre>__@param typeHint The hint for the generic type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(TypeHint<T> typeHint) {_		return typeHint.getTypeInfo()__	};creates,a,type,information,for,a,generic,type,via,a,utility,type,hint,this,method,can,be,used,as,follows,pre,code,type,information,tuple2,string,long,info,type,information,of,new,type,hint,tuple2,string,long,pre,param,type,hint,the,hint,for,the,generic,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,type,hint,t,type,hint,return,type,hint,get,type,info
TypeInformation -> public static <T> TypeInformation<T> of(TypeHint<T> typeHint);1480022575;Creates a TypeInformation for a generic type via a utility "type hint"._This method can be used as follows:_<pre>_{@code_TypeInformation<Tuple2<String, Long>> info = TypeInformation.of(new TypeHint<Tuple2<String, Long>>(){})___</pre>__@param typeHint The hint for the generic type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(TypeHint<T> typeHint) {_		return typeHint.getTypeInfo()__	};creates,a,type,information,for,a,generic,type,via,a,utility,type,hint,this,method,can,be,used,as,follows,pre,code,type,information,tuple2,string,long,info,type,information,of,new,type,hint,tuple2,string,long,pre,param,type,hint,the,hint,for,the,generic,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,type,hint,t,type,hint,return,type,hint,get,type,info
TypeInformation -> public static <T> TypeInformation<T> of(TypeHint<T> typeHint);1524407314;Creates a TypeInformation for a generic type via a utility "type hint"._This method can be used as follows:_<pre>_{@code_TypeInformation<Tuple2<String, Long>> info = TypeInformation.of(new TypeHint<Tuple2<String, Long>>(){})___</pre>__@param typeHint The hint for the generic type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(TypeHint<T> typeHint) {_		return typeHint.getTypeInfo()__	};creates,a,type,information,for,a,generic,type,via,a,utility,type,hint,this,method,can,be,used,as,follows,pre,code,type,information,tuple2,string,long,info,type,information,of,new,type,hint,tuple2,string,long,pre,param,type,hint,the,hint,for,the,generic,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,type,hint,t,type,hint,return,type,hint,get,type,info
TypeInformation -> public static <T> TypeInformation<T> of(TypeHint<T> typeHint);1524407314;Creates a TypeInformation for a generic type via a utility "type hint"._This method can be used as follows:_<pre>_{@code_TypeInformation<Tuple2<String, Long>> info = TypeInformation.of(new TypeHint<Tuple2<String, Long>>(){})___</pre>__@param typeHint The hint for the generic type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(TypeHint<T> typeHint) {_		return typeHint.getTypeInfo()__	};creates,a,type,information,for,a,generic,type,via,a,utility,type,hint,this,method,can,be,used,as,follows,pre,code,type,information,tuple2,string,long,info,type,information,of,new,type,hint,tuple2,string,long,pre,param,type,hint,the,hint,for,the,generic,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,type,hint,t,type,hint,return,type,hint,get,type,info
TypeInformation -> public static <T> TypeInformation<T> of(TypeHint<T> typeHint);1534452319;Creates a TypeInformation for a generic type via a utility "type hint"._This method can be used as follows:_<pre>_{@code_TypeInformation<Tuple2<String, Long>> info = TypeInformation.of(new TypeHint<Tuple2<String, Long>>(){})___</pre>__@param typeHint The hint for the generic type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(TypeHint<T> typeHint) {_		return typeHint.getTypeInfo()__	};creates,a,type,information,for,a,generic,type,via,a,utility,type,hint,this,method,can,be,used,as,follows,pre,code,type,information,tuple2,string,long,info,type,information,of,new,type,hint,tuple2,string,long,pre,param,type,hint,the,hint,for,the,generic,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,type,hint,t,type,hint,return,type,hint,get,type,info
TypeInformation -> public static <T> TypeInformation<T> of(TypeHint<T> typeHint);1549467949;Creates a TypeInformation for a generic type via a utility "type hint"._This method can be used as follows:_<pre>_{@code_TypeInformation<Tuple2<String, Long>> info = TypeInformation.of(new TypeHint<Tuple2<String, Long>>(){})___</pre>__@param typeHint The hint for the generic type._@param <T> The generic type.__@return The TypeInformation object for the type described by the hint.;public static <T> TypeInformation<T> of(TypeHint<T> typeHint) {_		return typeHint.getTypeInfo()__	};creates,a,type,information,for,a,generic,type,via,a,utility,type,hint,this,method,can,be,used,as,follows,pre,code,type,information,tuple2,string,long,info,type,information,of,new,type,hint,tuple2,string,long,pre,param,type,hint,the,hint,for,the,generic,type,param,t,the,generic,type,return,the,type,information,object,for,the,type,described,by,the,hint;public,static,t,type,information,t,of,type,hint,t,type,hint,return,type,hint,get,type,info
TypeInformation -> @PublicEvolving 	public List<TypeInformation<?>> getGenericParameters();1455101486;Returns the generic parameters of this type.__@return The list of generic parameters. This list can be empty.;@PublicEvolving_	public List<TypeInformation<?>> getGenericParameters() {_		_		return new LinkedList<>()__	};returns,the,generic,parameters,of,this,type,return,the,list,of,generic,parameters,this,list,can,be,empty;public,evolving,public,list,type,information,get,generic,parameters,return,new,linked,list
TypeInformation -> @PublicEvolving 	public List<TypeInformation<?>> getGenericParameters();1456848177;Returns the generic parameters of this type.__@return The list of generic parameters. This list can be empty.;@PublicEvolving_	public List<TypeInformation<?>> getGenericParameters() {_		_		return Collections.emptyList()__	};returns,the,generic,parameters,of,this,type,return,the,list,of,generic,parameters,this,list,can,be,empty;public,evolving,public,list,type,information,get,generic,parameters,return,collections,empty,list
TypeInformation -> @PublicEvolving 	public abstract boolean isBasicType()_;1455101486;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;@PublicEvolving_	public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,evolving,public,abstract,boolean,is,basic,type
TypeInformation -> @PublicEvolving 	public abstract boolean isBasicType()_;1456848177;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;@PublicEvolving_	public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,evolving,public,abstract,boolean,is,basic,type
TypeInformation -> @PublicEvolving 	public abstract boolean isBasicType()_;1474459924;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;@PublicEvolving_	public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,evolving,public,abstract,boolean,is,basic,type
TypeInformation -> @PublicEvolving 	public abstract boolean isBasicType()_;1480022562;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;@PublicEvolving_	public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,evolving,public,abstract,boolean,is,basic,type
TypeInformation -> @PublicEvolving 	public abstract boolean isBasicType()_;1480022575;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;@PublicEvolving_	public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,evolving,public,abstract,boolean,is,basic,type
TypeInformation -> @PublicEvolving 	public abstract boolean isBasicType()_;1524407314;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;@PublicEvolving_	public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,evolving,public,abstract,boolean,is,basic,type
TypeInformation -> @PublicEvolving 	public abstract boolean isBasicType()_;1524407314;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;@PublicEvolving_	public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,evolving,public,abstract,boolean,is,basic,type
TypeInformation -> @PublicEvolving 	public abstract boolean isBasicType()_;1534452319;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;@PublicEvolving_	public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,evolving,public,abstract,boolean,is,basic,type
TypeInformation -> @PublicEvolving 	public abstract boolean isBasicType()_;1549467949;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;@PublicEvolving_	public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,evolving,public,abstract,boolean,is,basic,type
TypeInformation -> public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1424115592;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1424693348;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1428086525;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1433417242;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1442481573;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1444144446;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;1452178883;Creates a serializer for the type. The serializer may use the ExecutionConfig_for parameterization.__@param config The config used to parameterize the serializer._@return A serializer for this type.;public abstract TypeSerializer<T> createSerializer(ExecutionConfig config)_;creates,a,serializer,for,the,type,the,serializer,may,use,the,execution,config,for,parameterization,param,config,the,config,used,to,parameterize,the,serializer,return,a,serializer,for,this,type;public,abstract,type,serializer,t,create,serializer,execution,config,config
TypeInformation -> @PublicEvolving 	public boolean isSortKeyType();1455101486;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;@PublicEvolving_	public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,evolving,public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> @PublicEvolving 	public boolean isSortKeyType();1456848177;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;@PublicEvolving_	public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,evolving,public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> @PublicEvolving 	public boolean isSortKeyType();1474459924;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;@PublicEvolving_	public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,evolving,public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> @PublicEvolving 	public boolean isSortKeyType();1480022562;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;@PublicEvolving_	public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,evolving,public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> @PublicEvolving 	public boolean isSortKeyType();1480022575;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;@PublicEvolving_	public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,evolving,public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> @PublicEvolving 	public boolean isSortKeyType();1524407314;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;@PublicEvolving_	public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,evolving,public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> @PublicEvolving 	public boolean isSortKeyType();1524407314;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;@PublicEvolving_	public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,evolving,public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> @PublicEvolving 	public boolean isSortKeyType();1534452319;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;@PublicEvolving_	public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,evolving,public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> @PublicEvolving 	public boolean isSortKeyType();1549467949;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;@PublicEvolving_	public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,evolving,public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> @PublicEvolving 	public abstract boolean isKeyType()_;1455101486;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;@PublicEvolving_	public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,evolving,public,abstract,boolean,is,key,type
TypeInformation -> @PublicEvolving 	public abstract boolean isKeyType()_;1456848177;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;@PublicEvolving_	public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,evolving,public,abstract,boolean,is,key,type
TypeInformation -> @PublicEvolving 	public abstract boolean isKeyType()_;1474459924;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;@PublicEvolving_	public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,evolving,public,abstract,boolean,is,key,type
TypeInformation -> @PublicEvolving 	public abstract boolean isKeyType()_;1480022562;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;@PublicEvolving_	public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,evolving,public,abstract,boolean,is,key,type
TypeInformation -> @PublicEvolving 	public abstract boolean isKeyType()_;1480022575;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;@PublicEvolving_	public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,evolving,public,abstract,boolean,is,key,type
TypeInformation -> @PublicEvolving 	public abstract boolean isKeyType()_;1524407314;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;@PublicEvolving_	public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,evolving,public,abstract,boolean,is,key,type
TypeInformation -> @PublicEvolving 	public abstract boolean isKeyType()_;1524407314;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;@PublicEvolving_	public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,evolving,public,abstract,boolean,is,key,type
TypeInformation -> @PublicEvolving 	public abstract boolean isKeyType()_;1534452319;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;@PublicEvolving_	public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,evolving,public,abstract,boolean,is,key,type
TypeInformation -> @PublicEvolving 	public abstract boolean isKeyType()_;1549467949;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;@PublicEvolving_	public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,evolving,public,abstract,boolean,is,key,type
TypeInformation -> public abstract boolean isBasicType()_;1424115592;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,abstract,boolean,is,basic,type
TypeInformation -> public abstract boolean isBasicType()_;1424693348;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,abstract,boolean,is,basic,type
TypeInformation -> public abstract boolean isBasicType()_;1428086525;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,abstract,boolean,is,basic,type
TypeInformation -> public abstract boolean isBasicType()_;1433417242;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,abstract,boolean,is,basic,type
TypeInformation -> public abstract boolean isBasicType()_;1442481573;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,abstract,boolean,is,basic,type
TypeInformation -> public abstract boolean isBasicType()_;1444144446;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,abstract,boolean,is,basic,type
TypeInformation -> public abstract boolean isBasicType()_;1452178883;Checks if this type information represents a basic type._Basic types are defined in {@link BasicTypeInfo} and are primitives, their boxing types,_Strings, Date, Void, ...__@return True, if this type information describes a basic type, false otherwise.;public abstract boolean isBasicType()_;checks,if,this,type,information,represents,a,basic,type,basic,types,are,defined,in,link,basic,type,info,and,are,primitives,their,boxing,types,strings,date,void,return,true,if,this,type,information,describes,a,basic,type,false,otherwise;public,abstract,boolean,is,basic,type
TypeInformation -> public abstract int getTotalFields()_;1412761141;@return The number of fields in this type, including its sub-fields (for compsite types);public abstract int getTotalFields()_;return,the,number,of,fields,in,this,type,including,its,sub,fields,for,compsite,types;public,abstract,int,get,total,fields
TypeInformation -> public abstract int getTotalFields()_;1423570503;@return The number of fields in this type, including its sub-fields (for compsite types);public abstract int getTotalFields()_;return,the,number,of,fields,in,this,type,including,its,sub,fields,for,compsite,types;public,abstract,int,get,total,fields
TypeInformation -> public abstract int getTotalFields()_;1424115592;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,abstract,int,get,total,fields
TypeInformation -> public abstract int getTotalFields()_;1424693348;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,abstract,int,get,total,fields
TypeInformation -> public abstract int getTotalFields()_;1428086525;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,abstract,int,get,total,fields
TypeInformation -> public abstract int getTotalFields()_;1433417242;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,abstract,int,get,total,fields
TypeInformation -> public abstract int getTotalFields()_;1442481573;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,abstract,int,get,total,fields
TypeInformation -> public abstract int getTotalFields()_;1444144446;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,abstract,int,get,total,fields
TypeInformation -> public abstract int getTotalFields()_;1452178883;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,abstract,int,get,total,fields
TypeInformation -> @PublicEvolving 	public abstract Class<T> getTypeClass()_;1455101486;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;@PublicEvolving_	public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,evolving,public,abstract,class,t,get,type,class
TypeInformation -> @PublicEvolving 	public abstract Class<T> getTypeClass()_;1456848177;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;@PublicEvolving_	public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,evolving,public,abstract,class,t,get,type,class
TypeInformation -> @PublicEvolving 	public abstract Class<T> getTypeClass()_;1474459924;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;@PublicEvolving_	public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,evolving,public,abstract,class,t,get,type,class
TypeInformation -> @PublicEvolving 	public abstract Class<T> getTypeClass()_;1480022562;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;@PublicEvolving_	public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,evolving,public,abstract,class,t,get,type,class
TypeInformation -> @PublicEvolving 	public abstract Class<T> getTypeClass()_;1480022575;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;@PublicEvolving_	public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,evolving,public,abstract,class,t,get,type,class
TypeInformation -> @PublicEvolving 	public abstract Class<T> getTypeClass()_;1524407314;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;@PublicEvolving_	public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,evolving,public,abstract,class,t,get,type,class
TypeInformation -> @PublicEvolving 	public abstract Class<T> getTypeClass()_;1524407314;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;@PublicEvolving_	public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,evolving,public,abstract,class,t,get,type,class
TypeInformation -> @PublicEvolving 	public abstract Class<T> getTypeClass()_;1534452319;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;@PublicEvolving_	public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,evolving,public,abstract,class,t,get,type,class
TypeInformation -> @PublicEvolving 	public abstract Class<T> getTypeClass()_;1549467949;Gets the class of the type represented by this type information.__@return The class of the type represented by this type information.;@PublicEvolving_	public abstract Class<T> getTypeClass()_;gets,the,class,of,the,type,represented,by,this,type,information,return,the,class,of,the,type,represented,by,this,type,information;public,evolving,public,abstract,class,t,get,type,class
TypeInformation -> @PublicEvolving 	public Map<String, TypeInformation<?>> getGenericParameters();1474459924;Optional method for giving Flink's type extraction system information about the mapping_of a generic type parameter to the type information of a subtype. This information is necessary_in cases where type information should be deduced from an input type.__For instance, a method for a {@link Tuple2} would look like this:_<code>_Map m = new HashMap()__m.put("T0", this.getTypeAt(0))__m.put("T1", this.getTypeAt(1))__return m__</code>__@return map of inferred subtypes_ it does not have to contain all generic parameters as key__values may be null if type could not be inferred;@PublicEvolving_	public Map<String, TypeInformation<?>> getGenericParameters() {_		_		return Collections.emptyMap()__	};optional,method,for,giving,flink,s,type,extraction,system,information,about,the,mapping,of,a,generic,type,parameter,to,the,type,information,of,a,subtype,this,information,is,necessary,in,cases,where,type,information,should,be,deduced,from,an,input,type,for,instance,a,method,for,a,link,tuple2,would,look,like,this,code,map,m,new,hash,map,m,put,t0,this,get,type,at,0,m,put,t1,this,get,type,at,1,return,m,code,return,map,of,inferred,subtypes,it,does,not,have,to,contain,all,generic,parameters,as,key,values,may,be,null,if,type,could,not,be,inferred;public,evolving,public,map,string,type,information,get,generic,parameters,return,collections,empty,map
TypeInformation -> @PublicEvolving 	public Map<String, TypeInformation<?>> getGenericParameters();1480022562;Optional method for giving Flink's type extraction system information about the mapping_of a generic type parameter to the type information of a subtype. This information is necessary_in cases where type information should be deduced from an input type.__For instance, a method for a {@link Tuple2} would look like this:_<code>_Map m = new HashMap()__m.put("T0", this.getTypeAt(0))__m.put("T1", this.getTypeAt(1))__return m__</code>__@return map of inferred subtypes_ it does not have to contain all generic parameters as key__values may be null if type could not be inferred;@PublicEvolving_	public Map<String, TypeInformation<?>> getGenericParameters() {_		_		return Collections.emptyMap()__	};optional,method,for,giving,flink,s,type,extraction,system,information,about,the,mapping,of,a,generic,type,parameter,to,the,type,information,of,a,subtype,this,information,is,necessary,in,cases,where,type,information,should,be,deduced,from,an,input,type,for,instance,a,method,for,a,link,tuple2,would,look,like,this,code,map,m,new,hash,map,m,put,t0,this,get,type,at,0,m,put,t1,this,get,type,at,1,return,m,code,return,map,of,inferred,subtypes,it,does,not,have,to,contain,all,generic,parameters,as,key,values,may,be,null,if,type,could,not,be,inferred;public,evolving,public,map,string,type,information,get,generic,parameters,return,collections,empty,map
TypeInformation -> @PublicEvolving 	public Map<String, TypeInformation<?>> getGenericParameters();1480022575;Optional method for giving Flink's type extraction system information about the mapping_of a generic type parameter to the type information of a subtype. This information is necessary_in cases where type information should be deduced from an input type.__For instance, a method for a {@link Tuple2} would look like this:_<code>_Map m = new HashMap()__m.put("T0", this.getTypeAt(0))__m.put("T1", this.getTypeAt(1))__return m__</code>__@return map of inferred subtypes_ it does not have to contain all generic parameters as key__values may be null if type could not be inferred;@PublicEvolving_	public Map<String, TypeInformation<?>> getGenericParameters() {_		_		return Collections.emptyMap()__	};optional,method,for,giving,flink,s,type,extraction,system,information,about,the,mapping,of,a,generic,type,parameter,to,the,type,information,of,a,subtype,this,information,is,necessary,in,cases,where,type,information,should,be,deduced,from,an,input,type,for,instance,a,method,for,a,link,tuple2,would,look,like,this,code,map,m,new,hash,map,m,put,t0,this,get,type,at,0,m,put,t1,this,get,type,at,1,return,m,code,return,map,of,inferred,subtypes,it,does,not,have,to,contain,all,generic,parameters,as,key,values,may,be,null,if,type,could,not,be,inferred;public,evolving,public,map,string,type,information,get,generic,parameters,return,collections,empty,map
TypeInformation -> @PublicEvolving 	public Map<String, TypeInformation<?>> getGenericParameters();1524407314;Optional method for giving Flink's type extraction system information about the mapping_of a generic type parameter to the type information of a subtype. This information is necessary_in cases where type information should be deduced from an input type.__<p>For instance, a method for a {@link Tuple2} would look like this:_<code>_Map m = new HashMap()__m.put("T0", this.getTypeAt(0))__m.put("T1", this.getTypeAt(1))__return m__</code>__@return map of inferred subtypes_ it does not have to contain all generic parameters as key__values may be null if type could not be inferred;@PublicEvolving_	public Map<String, TypeInformation<?>> getGenericParameters() {_		_		return Collections.emptyMap()__	};optional,method,for,giving,flink,s,type,extraction,system,information,about,the,mapping,of,a,generic,type,parameter,to,the,type,information,of,a,subtype,this,information,is,necessary,in,cases,where,type,information,should,be,deduced,from,an,input,type,p,for,instance,a,method,for,a,link,tuple2,would,look,like,this,code,map,m,new,hash,map,m,put,t0,this,get,type,at,0,m,put,t1,this,get,type,at,1,return,m,code,return,map,of,inferred,subtypes,it,does,not,have,to,contain,all,generic,parameters,as,key,values,may,be,null,if,type,could,not,be,inferred;public,evolving,public,map,string,type,information,get,generic,parameters,return,collections,empty,map
TypeInformation -> @PublicEvolving 	public Map<String, TypeInformation<?>> getGenericParameters();1524407314;Optional method for giving Flink's type extraction system information about the mapping_of a generic type parameter to the type information of a subtype. This information is necessary_in cases where type information should be deduced from an input type.__<p>For instance, a method for a {@link Tuple2} would look like this:_<code>_Map m = new HashMap()__m.put("T0", this.getTypeAt(0))__m.put("T1", this.getTypeAt(1))__return m__</code>__@return map of inferred subtypes_ it does not have to contain all generic parameters as key__values may be null if type could not be inferred;@PublicEvolving_	public Map<String, TypeInformation<?>> getGenericParameters() {_		_		return Collections.emptyMap()__	};optional,method,for,giving,flink,s,type,extraction,system,information,about,the,mapping,of,a,generic,type,parameter,to,the,type,information,of,a,subtype,this,information,is,necessary,in,cases,where,type,information,should,be,deduced,from,an,input,type,p,for,instance,a,method,for,a,link,tuple2,would,look,like,this,code,map,m,new,hash,map,m,put,t0,this,get,type,at,0,m,put,t1,this,get,type,at,1,return,m,code,return,map,of,inferred,subtypes,it,does,not,have,to,contain,all,generic,parameters,as,key,values,may,be,null,if,type,could,not,be,inferred;public,evolving,public,map,string,type,information,get,generic,parameters,return,collections,empty,map
TypeInformation -> @PublicEvolving 	public Map<String, TypeInformation<?>> getGenericParameters();1534452319;Optional method for giving Flink's type extraction system information about the mapping_of a generic type parameter to the type information of a subtype. This information is necessary_in cases where type information should be deduced from an input type.__<p>For instance, a method for a {@link Tuple2} would look like this:_<code>_Map m = new HashMap()__m.put("T0", this.getTypeAt(0))__m.put("T1", this.getTypeAt(1))__return m__</code>__@return map of inferred subtypes_ it does not have to contain all generic parameters as key__values may be null if type could not be inferred;@PublicEvolving_	public Map<String, TypeInformation<?>> getGenericParameters() {_		_		return Collections.emptyMap()__	};optional,method,for,giving,flink,s,type,extraction,system,information,about,the,mapping,of,a,generic,type,parameter,to,the,type,information,of,a,subtype,this,information,is,necessary,in,cases,where,type,information,should,be,deduced,from,an,input,type,p,for,instance,a,method,for,a,link,tuple2,would,look,like,this,code,map,m,new,hash,map,m,put,t0,this,get,type,at,0,m,put,t1,this,get,type,at,1,return,m,code,return,map,of,inferred,subtypes,it,does,not,have,to,contain,all,generic,parameters,as,key,values,may,be,null,if,type,could,not,be,inferred;public,evolving,public,map,string,type,information,get,generic,parameters,return,collections,empty,map
TypeInformation -> @PublicEvolving 	public Map<String, TypeInformation<?>> getGenericParameters();1549467949;Optional method for giving Flink's type extraction system information about the mapping_of a generic type parameter to the type information of a subtype. This information is necessary_in cases where type information should be deduced from an input type.__<p>For instance, a method for a {@link Tuple2} would look like this:_<code>_Map m = new HashMap()__m.put("T0", this.getTypeAt(0))__m.put("T1", this.getTypeAt(1))__return m__</code>__@return map of inferred subtypes_ it does not have to contain all generic parameters as key__values may be null if type could not be inferred;@PublicEvolving_	public Map<String, TypeInformation<?>> getGenericParameters() {_		_		return Collections.emptyMap()__	};optional,method,for,giving,flink,s,type,extraction,system,information,about,the,mapping,of,a,generic,type,parameter,to,the,type,information,of,a,subtype,this,information,is,necessary,in,cases,where,type,information,should,be,deduced,from,an,input,type,p,for,instance,a,method,for,a,link,tuple2,would,look,like,this,code,map,m,new,hash,map,m,put,t0,this,get,type,at,0,m,put,t1,this,get,type,at,1,return,m,code,return,map,of,inferred,subtypes,it,does,not,have,to,contain,all,generic,parameters,as,key,values,may,be,null,if,type,could,not,be,inferred;public,evolving,public,map,string,type,information,get,generic,parameters,return,collections,empty,map
TypeInformation -> public List<TypeInformation<?>> getGenericParameters();1424693348;Returns the generic parameters of this type.__@return The list of generic parameters. This list can be empty.;public List<TypeInformation<?>> getGenericParameters() {_		_		return new LinkedList<TypeInformation<?>>()__	};returns,the,generic,parameters,of,this,type,return,the,list,of,generic,parameters,this,list,can,be,empty;public,list,type,information,get,generic,parameters,return,new,linked,list,type,information
TypeInformation -> public List<TypeInformation<?>> getGenericParameters();1428086525;Returns the generic parameters of this type.__@return The list of generic parameters. This list can be empty.;public List<TypeInformation<?>> getGenericParameters() {_		_		return new LinkedList<TypeInformation<?>>()__	};returns,the,generic,parameters,of,this,type,return,the,list,of,generic,parameters,this,list,can,be,empty;public,list,type,information,get,generic,parameters,return,new,linked,list,type,information
TypeInformation -> public List<TypeInformation<?>> getGenericParameters();1433417242;Returns the generic parameters of this type.__@return The list of generic parameters. This list can be empty.;public List<TypeInformation<?>> getGenericParameters() {_		_		return new LinkedList<TypeInformation<?>>()__	};returns,the,generic,parameters,of,this,type,return,the,list,of,generic,parameters,this,list,can,be,empty;public,list,type,information,get,generic,parameters,return,new,linked,list,type,information
TypeInformation -> public List<TypeInformation<?>> getGenericParameters();1442481573;Returns the generic parameters of this type.__@return The list of generic parameters. This list can be empty.;public List<TypeInformation<?>> getGenericParameters() {_		_		return new LinkedList<TypeInformation<?>>()__	};returns,the,generic,parameters,of,this,type,return,the,list,of,generic,parameters,this,list,can,be,empty;public,list,type,information,get,generic,parameters,return,new,linked,list,type,information
TypeInformation -> public List<TypeInformation<?>> getGenericParameters();1444144446;Returns the generic parameters of this type.__@return The list of generic parameters. This list can be empty.;public List<TypeInformation<?>> getGenericParameters() {_		_		return new LinkedList<>()__	};returns,the,generic,parameters,of,this,type,return,the,list,of,generic,parameters,this,list,can,be,empty;public,list,type,information,get,generic,parameters,return,new,linked,list
TypeInformation -> public List<TypeInformation<?>> getGenericParameters();1452178883;Returns the generic parameters of this type.__@return The list of generic parameters. This list can be empty.;public List<TypeInformation<?>> getGenericParameters() {_		_		return new LinkedList<>()__	};returns,the,generic,parameters,of,this,type,return,the,list,of,generic,parameters,this,list,can,be,empty;public,list,type,information,get,generic,parameters,return,new,linked,list
TypeInformation -> public boolean isSortKeyType();1428086525;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> public boolean isSortKeyType();1433417242;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> public boolean isSortKeyType();1442481573;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> public boolean isSortKeyType();1444144446;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> public boolean isSortKeyType();1452178883;Checks whether this type can be used as a key for sorting._The order produced by sorting this type must be meaningful.;public boolean isSortKeyType() {_		return isKeyType()__	};checks,whether,this,type,can,be,used,as,a,key,for,sorting,the,order,produced,by,sorting,this,type,must,be,meaningful;public,boolean,is,sort,key,type,return,is,key,type
TypeInformation -> @PublicEvolving 	public abstract boolean isTupleType()_;1455101486;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;@PublicEvolving_	public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,evolving,public,abstract,boolean,is,tuple,type
TypeInformation -> @PublicEvolving 	public abstract boolean isTupleType()_;1456848177;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;@PublicEvolving_	public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,evolving,public,abstract,boolean,is,tuple,type
TypeInformation -> @PublicEvolving 	public abstract boolean isTupleType()_;1474459924;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;@PublicEvolving_	public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,evolving,public,abstract,boolean,is,tuple,type
TypeInformation -> @PublicEvolving 	public abstract boolean isTupleType()_;1480022562;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;@PublicEvolving_	public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,evolving,public,abstract,boolean,is,tuple,type
TypeInformation -> @PublicEvolving 	public abstract boolean isTupleType()_;1480022575;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;@PublicEvolving_	public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,evolving,public,abstract,boolean,is,tuple,type
TypeInformation -> @PublicEvolving 	public abstract boolean isTupleType()_;1524407314;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;@PublicEvolving_	public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,evolving,public,abstract,boolean,is,tuple,type
TypeInformation -> @PublicEvolving 	public abstract boolean isTupleType()_;1524407314;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;@PublicEvolving_	public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,evolving,public,abstract,boolean,is,tuple,type
TypeInformation -> @PublicEvolving 	public abstract boolean isTupleType()_;1534452319;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;@PublicEvolving_	public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,evolving,public,abstract,boolean,is,tuple,type
TypeInformation -> @PublicEvolving 	public abstract boolean isTupleType()_;1549467949;Checks if this type information represents a Tuple type._Tuple types are subclasses of the Java API tuples.__@return True, if this type information describes a tuple type, false otherwise.;@PublicEvolving_	public abstract boolean isTupleType()_;checks,if,this,type,information,represents,a,tuple,type,tuple,types,are,subclasses,of,the,java,api,tuples,return,true,if,this,type,information,describes,a,tuple,type,false,otherwise;public,evolving,public,abstract,boolean,is,tuple,type
TypeInformation -> public abstract int getArity()_;1424115592;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,abstract,int,get,arity
TypeInformation -> public abstract int getArity()_;1424693348;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,abstract,int,get,arity
TypeInformation -> public abstract int getArity()_;1428086525;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,abstract,int,get,arity
TypeInformation -> public abstract int getArity()_;1433417242;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,abstract,int,get,arity
TypeInformation -> public abstract int getArity()_;1442481573;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,abstract,int,get,arity
TypeInformation -> public abstract int getArity()_;1444144446;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,abstract,int,get,arity
TypeInformation -> public abstract int getArity()_;1452178883;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,abstract,int,get,arity
TypeInformation -> public abstract boolean isKeyType()_;1424115592;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,abstract,boolean,is,key,type
TypeInformation -> public abstract boolean isKeyType()_;1424693348;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,abstract,boolean,is,key,type
TypeInformation -> public abstract boolean isKeyType()_;1428086525;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,abstract,boolean,is,key,type
TypeInformation -> public abstract boolean isKeyType()_;1433417242;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,abstract,boolean,is,key,type
TypeInformation -> public abstract boolean isKeyType()_;1442481573;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,abstract,boolean,is,key,type
TypeInformation -> public abstract boolean isKeyType()_;1444144446;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,abstract,boolean,is,key,type
TypeInformation -> public abstract boolean isKeyType()_;1452178883;Checks whether this type can be used as a key. As a bare minimum, types have_to be hashable and comparable to be keys.__@return True, if the type can be used as a key, false otherwise.;public abstract boolean isKeyType()_;checks,whether,this,type,can,be,used,as,a,key,as,a,bare,minimum,types,have,to,be,hashable,and,comparable,to,be,keys,return,true,if,the,type,can,be,used,as,a,key,false,otherwise;public,abstract,boolean,is,key,type
TypeInformation -> @PublicEvolving 	public abstract int getArity()_;1455101486;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;@PublicEvolving_	public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,evolving,public,abstract,int,get,arity
TypeInformation -> @PublicEvolving 	public abstract int getArity()_;1456848177;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;@PublicEvolving_	public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,evolving,public,abstract,int,get,arity
TypeInformation -> @PublicEvolving 	public abstract int getArity()_;1474459924;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;@PublicEvolving_	public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,evolving,public,abstract,int,get,arity
TypeInformation -> @PublicEvolving 	public abstract int getArity()_;1480022562;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;@PublicEvolving_	public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,evolving,public,abstract,int,get,arity
TypeInformation -> @PublicEvolving 	public abstract int getArity()_;1480022575;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;@PublicEvolving_	public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,evolving,public,abstract,int,get,arity
TypeInformation -> @PublicEvolving 	public abstract int getArity()_;1524407314;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;@PublicEvolving_	public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,evolving,public,abstract,int,get,arity
TypeInformation -> @PublicEvolving 	public abstract int getArity()_;1524407314;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;@PublicEvolving_	public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,evolving,public,abstract,int,get,arity
TypeInformation -> @PublicEvolving 	public abstract int getArity()_;1534452319;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;@PublicEvolving_	public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,evolving,public,abstract,int,get,arity
TypeInformation -> @PublicEvolving 	public abstract int getArity()_;1549467949;Gets the arity of this type - the number of fields without nesting.__@return Gets the number of fields in this type without nesting.;@PublicEvolving_	public abstract int getArity()_;gets,the,arity,of,this,type,the,number,of,fields,without,nesting,return,gets,the,number,of,fields,in,this,type,without,nesting;public,evolving,public,abstract,int,get,arity
TypeInformation -> @PublicEvolving 	public abstract int getTotalFields()_;1455101486;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);@PublicEvolving_	public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,evolving,public,abstract,int,get,total,fields
TypeInformation -> @PublicEvolving 	public abstract int getTotalFields()_;1456848177;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);@PublicEvolving_	public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,evolving,public,abstract,int,get,total,fields
TypeInformation -> @PublicEvolving 	public abstract int getTotalFields()_;1474459924;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);@PublicEvolving_	public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,evolving,public,abstract,int,get,total,fields
TypeInformation -> @PublicEvolving 	public abstract int getTotalFields()_;1480022562;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);@PublicEvolving_	public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,evolving,public,abstract,int,get,total,fields
TypeInformation -> @PublicEvolving 	public abstract int getTotalFields()_;1480022575;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);@PublicEvolving_	public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,evolving,public,abstract,int,get,total,fields
TypeInformation -> @PublicEvolving 	public abstract int getTotalFields()_;1524407314;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);@PublicEvolving_	public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,evolving,public,abstract,int,get,total,fields
TypeInformation -> @PublicEvolving 	public abstract int getTotalFields()_;1524407314;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.___@return The number of fields in this type, including its sub-fields (for composite types);@PublicEvolving_	public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,evolving,public,abstract,int,get,total,fields
TypeInformation -> @PublicEvolving 	public abstract int getTotalFields()_;1534452319;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.__<p>The total number of fields must be at least 1.__@return The number of fields in this type, including its sub-fields (for composite types);@PublicEvolving_	public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,p,the,total,number,of,fields,must,be,at,least,1,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,evolving,public,abstract,int,get,total,fields
TypeInformation -> @PublicEvolving 	public abstract int getTotalFields()_;1549467949;Gets the number of logical fields in this type. This includes its nested and transitively nested_fields, in the case of composite types. In the example below, the OuterType type has three_fields in total.__<p>The total number of fields must be at least 1.__@return The number of fields in this type, including its sub-fields (for composite types);@PublicEvolving_	public abstract int getTotalFields()_;gets,the,number,of,logical,fields,in,this,type,this,includes,its,nested,and,transitively,nested,fields,in,the,case,of,composite,types,in,the,example,below,the,outer,type,type,has,three,fields,in,total,p,the,total,number,of,fields,must,be,at,least,1,return,the,number,of,fields,in,this,type,including,its,sub,fields,for,composite,types;public,evolving,public,abstract,int,get,total,fields
