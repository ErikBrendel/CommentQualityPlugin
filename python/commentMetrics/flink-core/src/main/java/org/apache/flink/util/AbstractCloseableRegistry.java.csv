# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractCloseableRegistry -> public final void registerClosable(C closeable) throws IOException;1479853012;Registers a {@link Closeable} with the registry. In case the registry is already closed, this method throws an_{@link IllegalStateException} and closes the passed {@link Closeable}.__@param closeable Closeable tor register_@return true if the the Closeable was newly added to the registry_@throws IOException exception when the registry was closed before;public final void registerClosable(C closeable) throws IOException {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			if (closed) {_				IOUtils.closeQuietly(closeable)__				throw new IOException("Cannot register Closeable, registry is already closed. Closing argument.")__			}__			doRegister(closeable, closeableToRef)__		}_	};registers,a,link,closeable,with,the,registry,in,case,the,registry,is,already,closed,this,method,throws,an,link,illegal,state,exception,and,closes,the,passed,link,closeable,param,closeable,closeable,tor,register,return,true,if,the,the,closeable,was,newly,added,to,the,registry,throws,ioexception,exception,when,the,registry,was,closed,before;public,final,void,register,closable,c,closeable,throws,ioexception,if,null,closeable,return,synchronized,get,synchronization,lock,if,closed,ioutils,close,quietly,closeable,throw,new,ioexception,cannot,register,closeable,registry,is,already,closed,closing,argument,do,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void registerClosable(C closeable) throws IOException;1485363344;Registers a {@link Closeable} with the registry. In case the registry is already closed, this method throws an_{@link IllegalStateException} and closes the passed {@link Closeable}.__@param closeable Closeable tor register_@return true if the the Closeable was newly added to the registry_@throws IOException exception when the registry was closed before;public final void registerClosable(C closeable) throws IOException {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			if (closed) {_				IOUtils.closeQuietly(closeable)__				throw new IOException("Cannot register Closeable, registry is already closed. Closing argument.")__			}__			doRegister(closeable, closeableToRef)__		}_	};registers,a,link,closeable,with,the,registry,in,case,the,registry,is,already,closed,this,method,throws,an,link,illegal,state,exception,and,closes,the,passed,link,closeable,param,closeable,closeable,tor,register,return,true,if,the,the,closeable,was,newly,added,to,the,registry,throws,ioexception,exception,when,the,registry,was,closed,before;public,final,void,register,closable,c,closeable,throws,ioexception,if,null,closeable,return,synchronized,get,synchronization,lock,if,closed,ioutils,close,quietly,closeable,throw,new,ioexception,cannot,register,closeable,registry,is,already,closed,closing,argument,do,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void registerClosable(C closeable) throws IOException;1487548884;Registers a {@link Closeable} with the registry. In case the registry is already closed, this method throws an_{@link IllegalStateException} and closes the passed {@link Closeable}.__@param closeable Closeable tor register_@return true if the the Closeable was newly added to the registry_@throws IOException exception when the registry was closed before;public final void registerClosable(C closeable) throws IOException {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			if (closed) {_				IOUtils.closeQuietly(closeable)__				throw new IOException("Cannot register Closeable, registry is already closed. Closing argument.")__			}__			doRegister(closeable, closeableToRef)__		}_	};registers,a,link,closeable,with,the,registry,in,case,the,registry,is,already,closed,this,method,throws,an,link,illegal,state,exception,and,closes,the,passed,link,closeable,param,closeable,closeable,tor,register,return,true,if,the,the,closeable,was,newly,added,to,the,registry,throws,ioexception,exception,when,the,registry,was,closed,before;public,final,void,register,closable,c,closeable,throws,ioexception,if,null,closeable,return,synchronized,get,synchronization,lock,if,closed,ioutils,close,quietly,closeable,throw,new,ioexception,cannot,register,closeable,registry,is,already,closed,closing,argument,do,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void registerClosable(C closeable) throws IOException;1487548884;Registers a {@link Closeable} with the registry. In case the registry is already closed, this method throws an_{@link IllegalStateException} and closes the passed {@link Closeable}.__@param closeable Closeable tor register__@throws IOException exception when the registry was closed before;public final void registerClosable(C closeable) throws IOException {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			if (closed) {_				IOUtils.closeQuietly(closeable)__				throw new IOException("Cannot register Closeable, registry is already closed. Closing argument.")__			}__			doRegister(closeable, closeableToRef)__		}_	};registers,a,link,closeable,with,the,registry,in,case,the,registry,is,already,closed,this,method,throws,an,link,illegal,state,exception,and,closes,the,passed,link,closeable,param,closeable,closeable,tor,register,throws,ioexception,exception,when,the,registry,was,closed,before;public,final,void,register,closable,c,closeable,throws,ioexception,if,null,closeable,return,synchronized,get,synchronization,lock,if,closed,ioutils,close,quietly,closeable,throw,new,ioexception,cannot,register,closeable,registry,is,already,closed,closing,argument,do,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void registerClosable(C closeable) throws IOException;1487548884;Registers a {@link Closeable} with the registry. In case the registry is already closed, this method throws an_{@link IllegalStateException} and closes the passed {@link Closeable}.__@param closeable Closeable tor register__@throws IOException exception when the registry was closed before;public final void registerClosable(C closeable) throws IOException {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			if (closed) {_				IOUtils.closeQuietly(closeable)__				throw new IOException("Cannot register Closeable, registry is already closed. Closing argument.")__			}__			doRegister(closeable, closeableToRef)__		}_	};registers,a,link,closeable,with,the,registry,in,case,the,registry,is,already,closed,this,method,throws,an,link,illegal,state,exception,and,closes,the,passed,link,closeable,param,closeable,closeable,tor,register,throws,ioexception,exception,when,the,registry,was,closed,before;public,final,void,register,closable,c,closeable,throws,ioexception,if,null,closeable,return,synchronized,get,synchronization,lock,if,closed,ioutils,close,quietly,closeable,throw,new,ioexception,cannot,register,closeable,registry,is,already,closed,closing,argument,do,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void registerClosable(C closeable) throws IOException;1494187243;Registers a {@link Closeable} with the registry. In case the registry is already closed, this method throws an_{@link IllegalStateException} and closes the passed {@link Closeable}.__@param closeable Closeable tor register__@throws IOException exception when the registry was closed before;public final void registerClosable(C closeable) throws IOException {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			if (closed) {_				IOUtils.closeQuietly(closeable)__				throw new IOException("Cannot register Closeable, registry is already closed. Closing argument.")__			}__			doRegister(closeable, closeableToRef)__		}_	};registers,a,link,closeable,with,the,registry,in,case,the,registry,is,already,closed,this,method,throws,an,link,illegal,state,exception,and,closes,the,passed,link,closeable,param,closeable,closeable,tor,register,throws,ioexception,exception,when,the,registry,was,closed,before;public,final,void,register,closable,c,closeable,throws,ioexception,if,null,closeable,return,synchronized,get,synchronization,lock,if,closed,ioutils,close,quietly,closeable,throw,new,ioexception,cannot,register,closeable,registry,is,already,closed,closing,argument,do,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void registerClosable(C closeable) throws IOException;1506348246;Registers a {@link Closeable} with the registry. In case the registry is already closed, this method throws an_{@link IllegalStateException} and closes the passed {@link Closeable}.__@param closeable Closeable tor register_@throws IOException exception when the registry was closed before;public final void registerClosable(C closeable) throws IOException {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			if (!closed) {_				doRegister(closeable, closeableToRef)__				return__			}_		}__		IOUtils.closeQuietly(closeable)__		throw new IOException("Cannot register Closeable, registry is already closed. Closing argument.")__	};registers,a,link,closeable,with,the,registry,in,case,the,registry,is,already,closed,this,method,throws,an,link,illegal,state,exception,and,closes,the,passed,link,closeable,param,closeable,closeable,tor,register,throws,ioexception,exception,when,the,registry,was,closed,before;public,final,void,register,closable,c,closeable,throws,ioexception,if,null,closeable,return,synchronized,get,synchronization,lock,if,closed,do,register,closeable,closeable,to,ref,return,ioutils,close,quietly,closeable,throw,new,ioexception,cannot,register,closeable,registry,is,already,closed,closing,argument
AbstractCloseableRegistry -> protected final void addCloseableInternal(Closeable closeable, T metaData);1506348246;Adds a mapping to the registry map, respecting locking.;protected final void addCloseableInternal(Closeable closeable, T metaData) {_		synchronized (getSynchronizationLock()) {_			closeableToRef.put(closeable, metaData)__		}_	};adds,a,mapping,to,the,registry,map,respecting,locking;protected,final,void,add,closeable,internal,closeable,closeable,t,meta,data,synchronized,get,synchronization,lock,closeable,to,ref,put,closeable,meta,data
AbstractCloseableRegistry -> protected final void addCloseableInternal(Closeable closeable, T metaData);1506348255;Adds a mapping to the registry map, respecting locking.;protected final void addCloseableInternal(Closeable closeable, T metaData) {_		synchronized (getSynchronizationLock()) {_			closeableToRef.put(closeable, metaData)__		}_	};adds,a,mapping,to,the,registry,map,respecting,locking;protected,final,void,add,closeable,internal,closeable,closeable,t,meta,data,synchronized,get,synchronization,lock,closeable,to,ref,put,closeable,meta,data
AbstractCloseableRegistry -> protected final void addCloseableInternal(Closeable closeable, T metaData);1516295284;Adds a mapping to the registry map, respecting locking.;protected final void addCloseableInternal(Closeable closeable, T metaData) {_		synchronized (getSynchronizationLock()) {_			closeableToRef.put(closeable, metaData)__		}_	};adds,a,mapping,to,the,registry,map,respecting,locking;protected,final,void,add,closeable,internal,closeable,closeable,t,meta,data,synchronized,get,synchronization,lock,closeable,to,ref,put,closeable,meta,data
AbstractCloseableRegistry -> public final void registerCloseable(C closeable) throws IOException;1506348255;Registers a {@link Closeable} with the registry. In case the registry is already closed, this method throws an_{@link IllegalStateException} and closes the passed {@link Closeable}.__@param closeable Closeable tor register_@throws IOException exception when the registry was closed before;public final void registerCloseable(C closeable) throws IOException {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			if (!closed) {_				doRegister(closeable, closeableToRef)__				return__			}_		}__		IOUtils.closeQuietly(closeable)__		throw new IOException("Cannot register Closeable, registry is already closed. Closing argument.")__	};registers,a,link,closeable,with,the,registry,in,case,the,registry,is,already,closed,this,method,throws,an,link,illegal,state,exception,and,closes,the,passed,link,closeable,param,closeable,closeable,tor,register,throws,ioexception,exception,when,the,registry,was,closed,before;public,final,void,register,closeable,c,closeable,throws,ioexception,if,null,closeable,return,synchronized,get,synchronization,lock,if,closed,do,register,closeable,closeable,to,ref,return,ioutils,close,quietly,closeable,throw,new,ioexception,cannot,register,closeable,registry,is,already,closed,closing,argument
AbstractCloseableRegistry -> public final void registerCloseable(C closeable) throws IOException;1516295284;Registers a {@link Closeable} with the registry. In case the registry is already closed, this method throws an_{@link IllegalStateException} and closes the passed {@link Closeable}.__@param closeable Closeable tor register_@throws IOException exception when the registry was closed before;public final void registerCloseable(C closeable) throws IOException {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			if (!closed) {_				doRegister(closeable, closeableToRef)__				return__			}_		}__		IOUtils.closeQuietly(closeable)__		throw new IOException("Cannot register Closeable, registry is already closed. Closing argument.")__	};registers,a,link,closeable,with,the,registry,in,case,the,registry,is,already,closed,this,method,throws,an,link,illegal,state,exception,and,closes,the,passed,link,closeable,param,closeable,closeable,tor,register,throws,ioexception,exception,when,the,registry,was,closed,before;public,final,void,register,closeable,c,closeable,throws,ioexception,if,null,closeable,return,synchronized,get,synchronization,lock,if,closed,do,register,closeable,closeable,to,ref,return,ioutils,close,quietly,closeable,throw,new,ioexception,cannot,register,closeable,registry,is,already,closed,closing,argument
AbstractCloseableRegistry -> public final boolean unregisterCloseable(C closeable);1506348255;Removes a {@link Closeable} from the registry.__@param closeable instance to remove from the registry._@return true if the closeable was previously registered and became unregistered through this call.;public final boolean unregisterCloseable(C closeable) {__		if (null == closeable) {_			return false__		}__		synchronized (getSynchronizationLock()) {_			return doUnRegister(closeable, closeableToRef)__		}_	};removes,a,link,closeable,from,the,registry,param,closeable,instance,to,remove,from,the,registry,return,true,if,the,closeable,was,previously,registered,and,became,unregistered,through,this,call;public,final,boolean,unregister,closeable,c,closeable,if,null,closeable,return,false,synchronized,get,synchronization,lock,return,do,un,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final boolean unregisterCloseable(C closeable);1516295284;Removes a {@link Closeable} from the registry.__@param closeable instance to remove from the registry._@return true if the closeable was previously registered and became unregistered through this call.;public final boolean unregisterCloseable(C closeable) {__		if (null == closeable) {_			return false__		}__		synchronized (getSynchronizationLock()) {_			return doUnRegister(closeable, closeableToRef)__		}_	};removes,a,link,closeable,from,the,registry,param,closeable,instance,to,remove,from,the,registry,return,true,if,the,closeable,was,previously,registered,and,became,unregistered,through,this,call;public,final,boolean,unregister,closeable,c,closeable,if,null,closeable,return,false,synchronized,get,synchronization,lock,return,do,un,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> protected abstract boolean doUnRegister(@Nonnull C closeable, @Nonnull Map<Closeable, T> closeableMap)_;1506348255;Does the actual un-registration of the closeable from the registry map. This should not do any long running or_potentially blocking operations as is is executed under the registry's lock.;protected abstract boolean doUnRegister(@Nonnull C closeable, @Nonnull Map<Closeable, T> closeableMap)_;does,the,actual,un,registration,of,the,closeable,from,the,registry,map,this,should,not,do,any,long,running,or,potentially,blocking,operations,as,is,is,executed,under,the,registry,s,lock;protected,abstract,boolean,do,un,register,nonnull,c,closeable,nonnull,map,closeable,t,closeable,map
AbstractCloseableRegistry -> protected abstract boolean doUnRegister(@Nonnull C closeable, @Nonnull Map<Closeable, T> closeableMap)_;1516295284;Does the actual un-registration of the closeable from the registry map. This should not do any long running or_potentially blocking operations as is is executed under the registry's lock.;protected abstract boolean doUnRegister(@Nonnull C closeable, @Nonnull Map<Closeable, T> closeableMap)_;does,the,actual,un,registration,of,the,closeable,from,the,registry,map,this,should,not,do,any,long,running,or,potentially,blocking,operations,as,is,is,executed,under,the,registry,s,lock;protected,abstract,boolean,do,un,register,nonnull,c,closeable,nonnull,map,closeable,t,closeable,map
AbstractCloseableRegistry -> public final void unregisterClosable(C closeable);1479853012;Removes a {@link Closeable} from the registry.__@param closeable instance to remove from the registry._@return true, if the instance was actually registered and now removed;public final void unregisterClosable(C closeable) {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			doUnRegister(closeable, closeableToRef)__		}_	};removes,a,link,closeable,from,the,registry,param,closeable,instance,to,remove,from,the,registry,return,true,if,the,instance,was,actually,registered,and,now,removed;public,final,void,unregister,closable,c,closeable,if,null,closeable,return,synchronized,get,synchronization,lock,do,un,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void unregisterClosable(C closeable);1485363344;Removes a {@link Closeable} from the registry.__@param closeable instance to remove from the registry._@return true, if the instance was actually registered and now removed;public final void unregisterClosable(C closeable) {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			doUnRegister(closeable, closeableToRef)__		}_	};removes,a,link,closeable,from,the,registry,param,closeable,instance,to,remove,from,the,registry,return,true,if,the,instance,was,actually,registered,and,now,removed;public,final,void,unregister,closable,c,closeable,if,null,closeable,return,synchronized,get,synchronization,lock,do,un,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void unregisterClosable(C closeable);1487548884;Removes a {@link Closeable} from the registry.__@param closeable instance to remove from the registry._@return true, if the instance was actually registered and now removed;public final void unregisterClosable(C closeable) {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			doUnRegister(closeable, closeableToRef)__		}_	};removes,a,link,closeable,from,the,registry,param,closeable,instance,to,remove,from,the,registry,return,true,if,the,instance,was,actually,registered,and,now,removed;public,final,void,unregister,closable,c,closeable,if,null,closeable,return,synchronized,get,synchronization,lock,do,un,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void unregisterClosable(C closeable);1487548884;Removes a {@link Closeable} from the registry.__@param closeable instance to remove from the registry.;public final void unregisterClosable(C closeable) {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			doUnRegister(closeable, closeableToRef)__		}_	};removes,a,link,closeable,from,the,registry,param,closeable,instance,to,remove,from,the,registry;public,final,void,unregister,closable,c,closeable,if,null,closeable,return,synchronized,get,synchronization,lock,do,un,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void unregisterClosable(C closeable);1487548884;Removes a {@link Closeable} from the registry.__@param closeable instance to remove from the registry.;public final void unregisterClosable(C closeable) {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			doUnRegister(closeable, closeableToRef)__		}_	};removes,a,link,closeable,from,the,registry,param,closeable,instance,to,remove,from,the,registry;public,final,void,unregister,closable,c,closeable,if,null,closeable,return,synchronized,get,synchronization,lock,do,un,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void unregisterClosable(C closeable);1494187243;Removes a {@link Closeable} from the registry.__@param closeable instance to remove from the registry.;public final void unregisterClosable(C closeable) {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			doUnRegister(closeable, closeableToRef)__		}_	};removes,a,link,closeable,from,the,registry,param,closeable,instance,to,remove,from,the,registry;public,final,void,unregister,closable,c,closeable,if,null,closeable,return,synchronized,get,synchronization,lock,do,un,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> public final void unregisterClosable(C closeable);1506348246;Removes a {@link Closeable} from the registry.__@param closeable instance to remove from the registry.;public final void unregisterClosable(C closeable) {__		if (null == closeable) {_			return__		}__		synchronized (getSynchronizationLock()) {_			doUnRegister(closeable, closeableToRef)__		}_	};removes,a,link,closeable,from,the,registry,param,closeable,instance,to,remove,from,the,registry;public,final,void,unregister,closable,c,closeable,if,null,closeable,return,synchronized,get,synchronization,lock,do,un,register,closeable,closeable,to,ref
AbstractCloseableRegistry -> protected abstract void doRegister(@Nonnull C closeable, @Nonnull Map<Closeable, T> closeableMap)_;1506348246;Does the actual registration of the closeable with the registry map. This should not do any long running or_potentially blocking operations as is is executed under the registry's lock.;protected abstract void doRegister(@Nonnull C closeable, @Nonnull Map<Closeable, T> closeableMap)_;does,the,actual,registration,of,the,closeable,with,the,registry,map,this,should,not,do,any,long,running,or,potentially,blocking,operations,as,is,is,executed,under,the,registry,s,lock;protected,abstract,void,do,register,nonnull,c,closeable,nonnull,map,closeable,t,closeable,map
AbstractCloseableRegistry -> protected abstract void doRegister(@Nonnull C closeable, @Nonnull Map<Closeable, T> closeableMap)_;1506348255;Does the actual registration of the closeable with the registry map. This should not do any long running or_potentially blocking operations as is is executed under the registry's lock.;protected abstract void doRegister(@Nonnull C closeable, @Nonnull Map<Closeable, T> closeableMap)_;does,the,actual,registration,of,the,closeable,with,the,registry,map,this,should,not,do,any,long,running,or,potentially,blocking,operations,as,is,is,executed,under,the,registry,s,lock;protected,abstract,void,do,register,nonnull,c,closeable,nonnull,map,closeable,t,closeable,map
AbstractCloseableRegistry -> protected abstract void doRegister(@Nonnull C closeable, @Nonnull Map<Closeable, T> closeableMap)_;1516295284;Does the actual registration of the closeable with the registry map. This should not do any long running or_potentially blocking operations as is is executed under the registry's lock.;protected abstract void doRegister(@Nonnull C closeable, @Nonnull Map<Closeable, T> closeableMap)_;does,the,actual,registration,of,the,closeable,with,the,registry,map,this,should,not,do,any,long,running,or,potentially,blocking,operations,as,is,is,executed,under,the,registry,s,lock;protected,abstract,void,do,register,nonnull,c,closeable,nonnull,map,closeable,t,closeable,map
AbstractCloseableRegistry -> protected final Object getSynchronizationLock();1506348246;Returns the lock on which manipulations to members closeableToRef and closeable must be synchronized.;protected final Object getSynchronizationLock() {_		return lock__	};returns,the,lock,on,which,manipulations,to,members,closeable,to,ref,and,closeable,must,be,synchronized;protected,final,object,get,synchronization,lock,return,lock
AbstractCloseableRegistry -> protected final Object getSynchronizationLock();1506348255;Returns the lock on which manipulations to members closeableToRef and closeable must be synchronized.;protected final Object getSynchronizationLock() {_		return lock__	};returns,the,lock,on,which,manipulations,to,members,closeable,to,ref,and,closeable,must,be,synchronized;protected,final,object,get,synchronization,lock,return,lock
AbstractCloseableRegistry -> protected final Object getSynchronizationLock();1516295284;Returns the lock on which manipulations to members closeableToRef and closeable must be synchronized.;protected final Object getSynchronizationLock() {_		return lock__	};returns,the,lock,on,which,manipulations,to,members,closeable,to,ref,and,closeable,must,be,synchronized;protected,final,object,get,synchronization,lock,return,lock
AbstractCloseableRegistry -> protected final void removeCloseableInternal(Closeable closeable);1506348246;Removes a mapping from the registry map, respecting locking.;protected final void removeCloseableInternal(Closeable closeable) {_		synchronized (getSynchronizationLock()) {_			closeableToRef.remove(closeable)__		}_	};removes,a,mapping,from,the,registry,map,respecting,locking;protected,final,void,remove,closeable,internal,closeable,closeable,synchronized,get,synchronization,lock,closeable,to,ref,remove,closeable
AbstractCloseableRegistry -> protected final void removeCloseableInternal(Closeable closeable);1506348255;Removes a mapping from the registry map, respecting locking.;protected final void removeCloseableInternal(Closeable closeable) {_		synchronized (getSynchronizationLock()) {_			closeableToRef.remove(closeable)__		}_	};removes,a,mapping,from,the,registry,map,respecting,locking;protected,final,void,remove,closeable,internal,closeable,closeable,synchronized,get,synchronization,lock,closeable,to,ref,remove,closeable
AbstractCloseableRegistry -> protected final void removeCloseableInternal(Closeable closeable);1516295284;Removes a mapping from the registry map, respecting locking.;protected final void removeCloseableInternal(Closeable closeable) {_		synchronized (getSynchronizationLock()) {_			closeableToRef.remove(closeable)__		}_	};removes,a,mapping,from,the,registry,map,respecting,locking;protected,final,void,remove,closeable,internal,closeable,closeable,synchronized,get,synchronization,lock,closeable,to,ref,remove,closeable
