# id;timestamp;commentText;codeText;commentWords;codeWords
PojoSerializerSnapshot -> public PojoSerializerSnapshot();1550821416;Constructor for reading the snapshot.;public PojoSerializerSnapshot() {};constructor,for,reading,the,snapshot;public,pojo,serializer,snapshot
PojoSerializerSnapshot -> public PojoSerializerSnapshot();1550821417;Constructor for reading the snapshot.;public PojoSerializerSnapshot() {};constructor,for,reading,the,snapshot;public,pojo,serializer,snapshot
PojoSerializerSnapshot -> public PojoSerializerSnapshot();1550821418;Constructor for reading the snapshot.;public PojoSerializerSnapshot() {};constructor,for,reading,the,snapshot;public,pojo,serializer,snapshot
PojoSerializerSnapshot -> private static <T> Map<Field, TypeSerializer<?>> buildNewFieldSerializersIndex(PojoSerializer<T> newPojoSerializer);1550821417;Builds an index of fields to their corresponding serializers for the_new {@link PojoSerializer} for faster field serializer lookups.;private static <T> Map<Field, TypeSerializer<?>> buildNewFieldSerializersIndex(PojoSerializer<T> newPojoSerializer) {_		final Field[] newFields = newPojoSerializer.getFields()__		final TypeSerializer<?>[] newFieldSerializers = newPojoSerializer.getFieldSerializers()___		checkState(newFields.length == newFieldSerializers.length)___		int numFields = newFields.length__		final Map<Field, TypeSerializer<?>> index = new HashMap<>(numFields)__		for (int i = 0_ i < numFields_ i++) {_			index.put(newFields[i], newFieldSerializers[i])__		}__		return index__	};builds,an,index,of,fields,to,their,corresponding,serializers,for,the,new,link,pojo,serializer,for,faster,field,serializer,lookups;private,static,t,map,field,type,serializer,build,new,field,serializers,index,pojo,serializer,t,new,pojo,serializer,final,field,new,fields,new,pojo,serializer,get,fields,final,type,serializer,new,field,serializers,new,pojo,serializer,get,field,serializers,check,state,new,fields,length,new,field,serializers,length,int,num,fields,new,fields,length,final,map,field,type,serializer,index,new,hash,map,num,fields,for,int,i,0,i,num,fields,i,index,put,new,fields,i,new,field,serializers,i,return,index
PojoSerializerSnapshot -> private static <T> Map<Field, TypeSerializer<?>> buildNewFieldSerializersIndex(PojoSerializer<T> newPojoSerializer);1550821418;Builds an index of fields to their corresponding serializers for the_new {@link PojoSerializer} for faster field serializer lookups.;private static <T> Map<Field, TypeSerializer<?>> buildNewFieldSerializersIndex(PojoSerializer<T> newPojoSerializer) {_		final Field[] newFields = newPojoSerializer.getFields()__		final TypeSerializer<?>[] newFieldSerializers = newPojoSerializer.getFieldSerializers()___		checkState(newFields.length == newFieldSerializers.length)___		int numFields = newFields.length__		final Map<Field, TypeSerializer<?>> index = new HashMap<>(numFields)__		for (int i = 0_ i < numFields_ i++) {_			index.put(newFields[i], newFieldSerializers[i])__		}__		return index__	};builds,an,index,of,fields,to,their,corresponding,serializers,for,the,new,link,pojo,serializer,for,faster,field,serializer,lookups;private,static,t,map,field,type,serializer,build,new,field,serializers,index,pojo,serializer,t,new,pojo,serializer,final,field,new,fields,new,pojo,serializer,get,fields,final,type,serializer,new,field,serializers,new,pojo,serializer,get,field,serializers,check,state,new,fields,length,new,field,serializers,length,int,num,fields,new,fields,length,final,map,field,type,serializer,index,new,hash,map,num,fields,for,int,i,0,i,num,fields,i,index,put,new,fields,i,new,field,serializers,i,return,index
PojoSerializerSnapshot -> private static boolean newPojoHasNewOrRemovedFields( 			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots, 			PojoSerializer<?> newPojoSerializer);1550821416;Checks whether the new {@link PojoSerializer} has new or removed fields compared to the previous one.;private static boolean newPojoHasNewOrRemovedFields(_			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots,_			PojoSerializer<?> newPojoSerializer) {_		int numRemovedFields = fieldSerializerSnapshots.absentKeysOrValues().size()__		int numPreexistingFields = fieldSerializerSnapshots.size() - numRemovedFields___		boolean hasRemovedFields = numRemovedFields > 0__		boolean hasNewFields = newPojoSerializer.getFields().length - numPreexistingFields > 0__		return hasRemovedFields || hasNewFields__	};checks,whether,the,new,link,pojo,serializer,has,new,or,removed,fields,compared,to,the,previous,one;private,static,boolean,new,pojo,has,new,or,removed,fields,linked,optional,map,field,type,serializer,snapshot,field,serializer,snapshots,pojo,serializer,new,pojo,serializer,int,num,removed,fields,field,serializer,snapshots,absent,keys,or,values,size,int,num,preexisting,fields,field,serializer,snapshots,size,num,removed,fields,boolean,has,removed,fields,num,removed,fields,0,boolean,has,new,fields,new,pojo,serializer,get,fields,length,num,preexisting,fields,0,return,has,removed,fields,has,new,fields
PojoSerializerSnapshot -> private static boolean newPojoHasNewOrRemovedFields( 			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots, 			PojoSerializer<?> newPojoSerializer);1550821417;Checks whether the new {@link PojoSerializer} has new or removed fields compared to the previous one.;private static boolean newPojoHasNewOrRemovedFields(_			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots,_			PojoSerializer<?> newPojoSerializer) {_		int numRemovedFields = fieldSerializerSnapshots.absentKeysOrValues().size()__		int numPreexistingFields = fieldSerializerSnapshots.size() - numRemovedFields___		boolean hasRemovedFields = numRemovedFields > 0__		boolean hasNewFields = newPojoSerializer.getFields().length - numPreexistingFields > 0__		return hasRemovedFields || hasNewFields__	};checks,whether,the,new,link,pojo,serializer,has,new,or,removed,fields,compared,to,the,previous,one;private,static,boolean,new,pojo,has,new,or,removed,fields,linked,optional,map,field,type,serializer,snapshot,field,serializer,snapshots,pojo,serializer,new,pojo,serializer,int,num,removed,fields,field,serializer,snapshots,absent,keys,or,values,size,int,num,preexisting,fields,field,serializer,snapshots,size,num,removed,fields,boolean,has,removed,fields,num,removed,fields,0,boolean,has,new,fields,new,pojo,serializer,get,fields,length,num,preexisting,fields,0,return,has,removed,fields,has,new,fields
PojoSerializerSnapshot -> private static boolean newPojoHasNewOrRemovedFields( 			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots, 			PojoSerializer<?> newPojoSerializer);1550821418;Checks whether the new {@link PojoSerializer} has new or removed fields compared to the previous one.;private static boolean newPojoHasNewOrRemovedFields(_			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots,_			PojoSerializer<?> newPojoSerializer) {_		int numRemovedFields = fieldSerializerSnapshots.absentKeysOrValues().size()__		int numPreexistingFields = fieldSerializerSnapshots.size() - numRemovedFields___		boolean hasRemovedFields = numRemovedFields > 0__		boolean hasNewFields = newPojoSerializer.getFields().length - numPreexistingFields > 0__		return hasRemovedFields || hasNewFields__	};checks,whether,the,new,link,pojo,serializer,has,new,or,removed,fields,compared,to,the,previous,one;private,static,boolean,new,pojo,has,new,or,removed,fields,linked,optional,map,field,type,serializer,snapshot,field,serializer,snapshots,pojo,serializer,new,pojo,serializer,int,num,removed,fields,field,serializer,snapshots,absent,keys,or,values,size,int,num,preexisting,fields,field,serializer,snapshots,size,num,removed,fields,boolean,has,removed,fields,num,removed,fields,0,boolean,has,new,fields,new,pojo,serializer,get,fields,length,num,preexisting,fields,0,return,has,removed,fields,has,new,fields
PojoSerializerSnapshot -> PojoSerializerSnapshot( 			Class<T> pojoClass, 			Field[] fields, 			TypeSerializerSnapshot<?>[] existingFieldSerializerSnapshots, 			LinkedHashMap<Class<?>, TypeSerializerSnapshot<?>> existingRegisteredSubclassSerializerSnapshots, 			Map<Class<?>, TypeSerializerSnapshot<?>> existingNonRegisteredSubclassSerializerSnapshots);1550821416;Constructor for backwards compatibility paths with the {@link PojoSerializer.PojoSerializerConfigSnapshot}._This is used in {@link PojoSerializer.PojoSerializerConfigSnapshot#resolveSchemaCompatibility(TypeSerializer)}_to delegate the compatibility check to this snapshot class.;PojoSerializerSnapshot(_			Class<T> pojoClass,_			Field[] fields,_			TypeSerializerSnapshot<?>[] existingFieldSerializerSnapshots,_			LinkedHashMap<Class<?>, TypeSerializerSnapshot<?>> existingRegisteredSubclassSerializerSnapshots,_			Map<Class<?>, TypeSerializerSnapshot<?>> existingNonRegisteredSubclassSerializerSnapshots) {__		this.snapshotData = PojoSerializerSnapshotData.createFrom(_			pojoClass,_			fields,_			existingFieldSerializerSnapshots,_			existingRegisteredSubclassSerializerSnapshots,_			existingNonRegisteredSubclassSerializerSnapshots)__	};constructor,for,backwards,compatibility,paths,with,the,link,pojo,serializer,pojo,serializer,config,snapshot,this,is,used,in,link,pojo,serializer,pojo,serializer,config,snapshot,resolve,schema,compatibility,type,serializer,to,delegate,the,compatibility,check,to,this,snapshot,class;pojo,serializer,snapshot,class,t,pojo,class,field,fields,type,serializer,snapshot,existing,field,serializer,snapshots,linked,hash,map,class,type,serializer,snapshot,existing,registered,subclass,serializer,snapshots,map,class,type,serializer,snapshot,existing,non,registered,subclass,serializer,snapshots,this,snapshot,data,pojo,serializer,snapshot,data,create,from,pojo,class,fields,existing,field,serializer,snapshots,existing,registered,subclass,serializer,snapshots,existing,non,registered,subclass,serializer,snapshots
PojoSerializerSnapshot -> PojoSerializerSnapshot( 			Class<T> pojoClass, 			Field[] fields, 			TypeSerializerSnapshot<?>[] existingFieldSerializerSnapshots, 			LinkedHashMap<Class<?>, TypeSerializerSnapshot<?>> existingRegisteredSubclassSerializerSnapshots, 			Map<Class<?>, TypeSerializerSnapshot<?>> existingNonRegisteredSubclassSerializerSnapshots);1550821417;Constructor for backwards compatibility paths with the {@link PojoSerializer.PojoSerializerConfigSnapshot}._This is used in {@link PojoSerializer.PojoSerializerConfigSnapshot#resolveSchemaCompatibility(TypeSerializer)}_to delegate the compatibility check to this snapshot class.;PojoSerializerSnapshot(_			Class<T> pojoClass,_			Field[] fields,_			TypeSerializerSnapshot<?>[] existingFieldSerializerSnapshots,_			LinkedHashMap<Class<?>, TypeSerializerSnapshot<?>> existingRegisteredSubclassSerializerSnapshots,_			Map<Class<?>, TypeSerializerSnapshot<?>> existingNonRegisteredSubclassSerializerSnapshots) {__		this.snapshotData = PojoSerializerSnapshotData.createFrom(_			pojoClass,_			fields,_			existingFieldSerializerSnapshots,_			existingRegisteredSubclassSerializerSnapshots,_			existingNonRegisteredSubclassSerializerSnapshots)__	};constructor,for,backwards,compatibility,paths,with,the,link,pojo,serializer,pojo,serializer,config,snapshot,this,is,used,in,link,pojo,serializer,pojo,serializer,config,snapshot,resolve,schema,compatibility,type,serializer,to,delegate,the,compatibility,check,to,this,snapshot,class;pojo,serializer,snapshot,class,t,pojo,class,field,fields,type,serializer,snapshot,existing,field,serializer,snapshots,linked,hash,map,class,type,serializer,snapshot,existing,registered,subclass,serializer,snapshots,map,class,type,serializer,snapshot,existing,non,registered,subclass,serializer,snapshots,this,snapshot,data,pojo,serializer,snapshot,data,create,from,pojo,class,fields,existing,field,serializer,snapshots,existing,registered,subclass,serializer,snapshots,existing,non,registered,subclass,serializer,snapshots
PojoSerializerSnapshot -> PojoSerializerSnapshot( 			Class<T> pojoClass, 			Field[] fields, 			TypeSerializerSnapshot<?>[] existingFieldSerializerSnapshots, 			LinkedHashMap<Class<?>, TypeSerializerSnapshot<?>> existingRegisteredSubclassSerializerSnapshots, 			Map<Class<?>, TypeSerializerSnapshot<?>> existingNonRegisteredSubclassSerializerSnapshots);1550821418;Constructor for backwards compatibility paths with the {@link PojoSerializer.PojoSerializerConfigSnapshot}._This is used in {@link PojoSerializer.PojoSerializerConfigSnapshot#resolveSchemaCompatibility(TypeSerializer)}_to delegate the compatibility check to this snapshot class.;PojoSerializerSnapshot(_			Class<T> pojoClass,_			Field[] fields,_			TypeSerializerSnapshot<?>[] existingFieldSerializerSnapshots,_			LinkedHashMap<Class<?>, TypeSerializerSnapshot<?>> existingRegisteredSubclassSerializerSnapshots,_			Map<Class<?>, TypeSerializerSnapshot<?>> existingNonRegisteredSubclassSerializerSnapshots) {__		this.snapshotData = PojoSerializerSnapshotData.createFrom(_			pojoClass,_			fields,_			existingFieldSerializerSnapshots,_			existingRegisteredSubclassSerializerSnapshots,_			existingNonRegisteredSubclassSerializerSnapshots)__	};constructor,for,backwards,compatibility,paths,with,the,link,pojo,serializer,pojo,serializer,config,snapshot,this,is,used,in,link,pojo,serializer,pojo,serializer,config,snapshot,resolve,schema,compatibility,type,serializer,to,delegate,the,compatibility,check,to,this,snapshot,class;pojo,serializer,snapshot,class,t,pojo,class,field,fields,type,serializer,snapshot,existing,field,serializer,snapshots,linked,hash,map,class,type,serializer,snapshot,existing,registered,subclass,serializer,snapshots,map,class,type,serializer,snapshot,existing,non,registered,subclass,serializer,snapshots,this,snapshot,data,pojo,serializer,snapshot,data,create,from,pojo,class,fields,existing,field,serializer,snapshots,existing,registered,subclass,serializer,snapshots,existing,non,registered,subclass,serializer,snapshots
PojoSerializerSnapshot -> private static <T> PojoSerializer<T> constructReconfiguredPojoSerializer( 			PojoSerializer<T> originalNewPojoSerializer, 			IntermediateCompatibilityResult<T> fieldSerializerCompatibility, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSerializerSnapshots, 			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots);1550821416;Creates a reconfigured version of the {@link PojoSerializer}.__@param originalNewPojoSerializer the original new {@link PojoSerializer} to create a reconfigured version of._@param fieldSerializerCompatibility compatibility of preexisting fields' serializers._@param registeredSerializerSnapshots snapshot of previous registered subclasses' serializers._@param preExistingRegistrationsCompatibility compatibility of preexisting subclasses' serializers._@param nonRegisteredSubclassSerializerSnapshots snapshot of previous non-registered subclasses' serializers.__@return a reconfigured version of the original new {@link PojoSerializer}.;private static <T> PojoSerializer<T> constructReconfiguredPojoSerializer(_			PojoSerializer<T> originalNewPojoSerializer,_			IntermediateCompatibilityResult<T> fieldSerializerCompatibility,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSerializerSnapshots,_			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots) {__		@SuppressWarnings("unchecked")_		final TypeSerializer<Object>[] reconfiguredFieldSerializers = constructReconfiguredFieldSerializers(fieldSerializerCompatibility)___		Tuple2<LinkedHashMap<Class<?>, Integer>, TypeSerializer<Object>[]> reconfiguredSubclassRegistry = constructReconfiguredSubclassRegistry(_			originalNewPojoSerializer.getBundledSubclassSerializerRegistry(),_			registeredSerializerSnapshots,_			preExistingRegistrationsCompatibility)___		return new PojoSerializer<>(_			originalNewPojoSerializer.getPojoClass(),_			originalNewPojoSerializer.getFields(),_			reconfiguredFieldSerializers,_			reconfiguredSubclassRegistry.f0,_			reconfiguredSubclassRegistry.f1,_			restoreSerializers(nonRegisteredSubclassSerializerSnapshots.unwrapOptionals()),_			originalNewPojoSerializer.getExecutionConfig())__	};creates,a,reconfigured,version,of,the,link,pojo,serializer,param,original,new,pojo,serializer,the,original,new,link,pojo,serializer,to,create,a,reconfigured,version,of,param,field,serializer,compatibility,compatibility,of,preexisting,fields,serializers,param,registered,serializer,snapshots,snapshot,of,previous,registered,subclasses,serializers,param,pre,existing,registrations,compatibility,compatibility,of,preexisting,subclasses,serializers,param,non,registered,subclass,serializer,snapshots,snapshot,of,previous,non,registered,subclasses,serializers,return,a,reconfigured,version,of,the,original,new,link,pojo,serializer;private,static,t,pojo,serializer,t,construct,reconfigured,pojo,serializer,pojo,serializer,t,original,new,pojo,serializer,intermediate,compatibility,result,t,field,serializer,compatibility,linked,optional,map,class,type,serializer,snapshot,registered,serializer,snapshots,intermediate,compatibility,result,t,pre,existing,registrations,compatibility,linked,optional,map,class,type,serializer,snapshot,non,registered,subclass,serializer,snapshots,suppress,warnings,unchecked,final,type,serializer,object,reconfigured,field,serializers,construct,reconfigured,field,serializers,field,serializer,compatibility,tuple2,linked,hash,map,class,integer,type,serializer,object,reconfigured,subclass,registry,construct,reconfigured,subclass,registry,original,new,pojo,serializer,get,bundled,subclass,serializer,registry,registered,serializer,snapshots,pre,existing,registrations,compatibility,return,new,pojo,serializer,original,new,pojo,serializer,get,pojo,class,original,new,pojo,serializer,get,fields,reconfigured,field,serializers,reconfigured,subclass,registry,f0,reconfigured,subclass,registry,f1,restore,serializers,non,registered,subclass,serializer,snapshots,unwrap,optionals,original,new,pojo,serializer,get,execution,config
PojoSerializerSnapshot -> private static <T> PojoSerializer<T> constructReconfiguredPojoSerializer( 			PojoSerializer<T> originalNewPojoSerializer, 			IntermediateCompatibilityResult<T> fieldSerializerCompatibility, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSerializerSnapshots, 			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots);1550821417;Creates a reconfigured version of the {@link PojoSerializer}.__@param originalNewPojoSerializer the original new {@link PojoSerializer} to create a reconfigured version of._@param fieldSerializerCompatibility compatibility of preexisting fields' serializers._@param registeredSerializerSnapshots snapshot of previous registered subclasses' serializers._@param preExistingRegistrationsCompatibility compatibility of preexisting subclasses' serializers._@param nonRegisteredSubclassSerializerSnapshots snapshot of previous non-registered subclasses' serializers.__@return a reconfigured version of the original new {@link PojoSerializer}.;private static <T> PojoSerializer<T> constructReconfiguredPojoSerializer(_			PojoSerializer<T> originalNewPojoSerializer,_			IntermediateCompatibilityResult<T> fieldSerializerCompatibility,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSerializerSnapshots,_			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots) {__		@SuppressWarnings("unchecked")_		final TypeSerializer<Object>[] reconfiguredFieldSerializers = constructReconfiguredFieldSerializers(fieldSerializerCompatibility)___		Tuple2<LinkedHashMap<Class<?>, Integer>, TypeSerializer<Object>[]> reconfiguredSubclassRegistry = constructReconfiguredSubclassRegistry(_			originalNewPojoSerializer.getBundledSubclassSerializerRegistry(),_			registeredSerializerSnapshots,_			preExistingRegistrationsCompatibility)___		return new PojoSerializer<>(_			originalNewPojoSerializer.getPojoClass(),_			originalNewPojoSerializer.getFields(),_			reconfiguredFieldSerializers,_			reconfiguredSubclassRegistry.f0,_			reconfiguredSubclassRegistry.f1,_			restoreSerializers(nonRegisteredSubclassSerializerSnapshots.unwrapOptionals()),_			originalNewPojoSerializer.getExecutionConfig())__	};creates,a,reconfigured,version,of,the,link,pojo,serializer,param,original,new,pojo,serializer,the,original,new,link,pojo,serializer,to,create,a,reconfigured,version,of,param,field,serializer,compatibility,compatibility,of,preexisting,fields,serializers,param,registered,serializer,snapshots,snapshot,of,previous,registered,subclasses,serializers,param,pre,existing,registrations,compatibility,compatibility,of,preexisting,subclasses,serializers,param,non,registered,subclass,serializer,snapshots,snapshot,of,previous,non,registered,subclasses,serializers,return,a,reconfigured,version,of,the,original,new,link,pojo,serializer;private,static,t,pojo,serializer,t,construct,reconfigured,pojo,serializer,pojo,serializer,t,original,new,pojo,serializer,intermediate,compatibility,result,t,field,serializer,compatibility,linked,optional,map,class,type,serializer,snapshot,registered,serializer,snapshots,intermediate,compatibility,result,t,pre,existing,registrations,compatibility,linked,optional,map,class,type,serializer,snapshot,non,registered,subclass,serializer,snapshots,suppress,warnings,unchecked,final,type,serializer,object,reconfigured,field,serializers,construct,reconfigured,field,serializers,field,serializer,compatibility,tuple2,linked,hash,map,class,integer,type,serializer,object,reconfigured,subclass,registry,construct,reconfigured,subclass,registry,original,new,pojo,serializer,get,bundled,subclass,serializer,registry,registered,serializer,snapshots,pre,existing,registrations,compatibility,return,new,pojo,serializer,original,new,pojo,serializer,get,pojo,class,original,new,pojo,serializer,get,fields,reconfigured,field,serializers,reconfigured,subclass,registry,f0,reconfigured,subclass,registry,f1,restore,serializers,non,registered,subclass,serializer,snapshots,unwrap,optionals,original,new,pojo,serializer,get,execution,config
PojoSerializerSnapshot -> private static <T> PojoSerializer<T> constructReconfiguredPojoSerializer( 			PojoSerializer<T> originalNewPojoSerializer, 			IntermediateCompatibilityResult<T> fieldSerializerCompatibility, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSerializerSnapshots, 			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots);1550821418;Creates a reconfigured version of the {@link PojoSerializer}.__@param originalNewPojoSerializer the original new {@link PojoSerializer} to create a reconfigured version of._@param fieldSerializerCompatibility compatibility of preexisting fields' serializers._@param registeredSerializerSnapshots snapshot of previous registered subclasses' serializers._@param preExistingRegistrationsCompatibility compatibility of preexisting subclasses' serializers._@param nonRegisteredSubclassSerializerSnapshots snapshot of previous non-registered subclasses' serializers.__@return a reconfigured version of the original new {@link PojoSerializer}.;private static <T> PojoSerializer<T> constructReconfiguredPojoSerializer(_			PojoSerializer<T> originalNewPojoSerializer,_			IntermediateCompatibilityResult<T> fieldSerializerCompatibility,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSerializerSnapshots,_			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots) {__		@SuppressWarnings("unchecked")_		final TypeSerializer<Object>[] reconfiguredFieldSerializers = constructReconfiguredFieldSerializers(fieldSerializerCompatibility)___		Tuple2<LinkedHashMap<Class<?>, Integer>, TypeSerializer<Object>[]> reconfiguredSubclassRegistry = constructReconfiguredSubclassRegistry(_			originalNewPojoSerializer.getBundledSubclassSerializerRegistry(),_			registeredSerializerSnapshots,_			preExistingRegistrationsCompatibility)___		return new PojoSerializer<>(_			originalNewPojoSerializer.getPojoClass(),_			originalNewPojoSerializer.getFields(),_			reconfiguredFieldSerializers,_			reconfiguredSubclassRegistry.f0,_			reconfiguredSubclassRegistry.f1,_			restoreSerializers(nonRegisteredSubclassSerializerSnapshots.unwrapOptionals()),_			originalNewPojoSerializer.getExecutionConfig())__	};creates,a,reconfigured,version,of,the,link,pojo,serializer,param,original,new,pojo,serializer,the,original,new,link,pojo,serializer,to,create,a,reconfigured,version,of,param,field,serializer,compatibility,compatibility,of,preexisting,fields,serializers,param,registered,serializer,snapshots,snapshot,of,previous,registered,subclasses,serializers,param,pre,existing,registrations,compatibility,compatibility,of,preexisting,subclasses,serializers,param,non,registered,subclass,serializer,snapshots,snapshot,of,previous,non,registered,subclasses,serializers,return,a,reconfigured,version,of,the,original,new,link,pojo,serializer;private,static,t,pojo,serializer,t,construct,reconfigured,pojo,serializer,pojo,serializer,t,original,new,pojo,serializer,intermediate,compatibility,result,t,field,serializer,compatibility,linked,optional,map,class,type,serializer,snapshot,registered,serializer,snapshots,intermediate,compatibility,result,t,pre,existing,registrations,compatibility,linked,optional,map,class,type,serializer,snapshot,non,registered,subclass,serializer,snapshots,suppress,warnings,unchecked,final,type,serializer,object,reconfigured,field,serializers,construct,reconfigured,field,serializers,field,serializer,compatibility,tuple2,linked,hash,map,class,integer,type,serializer,object,reconfigured,subclass,registry,construct,reconfigured,subclass,registry,original,new,pojo,serializer,get,bundled,subclass,serializer,registry,registered,serializer,snapshots,pre,existing,registrations,compatibility,return,new,pojo,serializer,original,new,pojo,serializer,get,pojo,class,original,new,pojo,serializer,get,fields,reconfigured,field,serializers,reconfigured,subclass,registry,f0,reconfigured,subclass,registry,f1,restore,serializers,non,registered,subclass,serializer,snapshots,unwrap,optionals,original,new,pojo,serializer,get,execution,config
PojoSerializerSnapshot -> @SuppressWarnings("unchecked") 	private static Tuple2<LinkedHashMap<Class<?>, Integer>, TypeSerializer<Object>[]> decomposeSubclassSerializerRegistry( 		LinkedHashMap<Class<?>, TypeSerializer<?>> subclassSerializerRegistry);1550821416;Transforms the subclass serializer registry structure, {@code LinkedHashMap<Class<?>, TypeSerializer<?>>}_to 2 separate structures: a map containing with registered classes as key and their corresponding ids (order_in the original map) as value, as well as a separate array of the corresponding subclass serializers.;@SuppressWarnings("unchecked")_	private static Tuple2<LinkedHashMap<Class<?>, Integer>, TypeSerializer<Object>[]> decomposeSubclassSerializerRegistry(_		LinkedHashMap<Class<?>, TypeSerializer<?>> subclassSerializerRegistry) {__		final LinkedHashMap<Class<?>, Integer> subclassIds = new LinkedHashMap<>(subclassSerializerRegistry.size())__		final TypeSerializer[] subclassSerializers = new TypeSerializer[subclassSerializerRegistry.size()]___		subclassSerializerRegistry.forEach((registeredSubclassClass, serializer) -> {_			int id = subclassIds.size()__			subclassIds.put(registeredSubclassClass, id)__			subclassSerializers[id] = serializer__		})___		return Tuple2.of(subclassIds, subclassSerializers)__	};transforms,the,subclass,serializer,registry,structure,code,linked,hash,map,class,type,serializer,to,2,separate,structures,a,map,containing,with,registered,classes,as,key,and,their,corresponding,ids,order,in,the,original,map,as,value,as,well,as,a,separate,array,of,the,corresponding,subclass,serializers;suppress,warnings,unchecked,private,static,tuple2,linked,hash,map,class,integer,type,serializer,object,decompose,subclass,serializer,registry,linked,hash,map,class,type,serializer,subclass,serializer,registry,final,linked,hash,map,class,integer,subclass,ids,new,linked,hash,map,subclass,serializer,registry,size,final,type,serializer,subclass,serializers,new,type,serializer,subclass,serializer,registry,size,subclass,serializer,registry,for,each,registered,subclass,class,serializer,int,id,subclass,ids,size,subclass,ids,put,registered,subclass,class,id,subclass,serializers,id,serializer,return,tuple2,of,subclass,ids,subclass,serializers
PojoSerializerSnapshot -> @SuppressWarnings("unchecked") 	private static Tuple2<LinkedHashMap<Class<?>, Integer>, TypeSerializer<Object>[]> decomposeSubclassSerializerRegistry( 		LinkedHashMap<Class<?>, TypeSerializer<?>> subclassSerializerRegistry);1550821417;Transforms the subclass serializer registry structure, {@code LinkedHashMap<Class<?>, TypeSerializer<?>>}_to 2 separate structures: a map containing with registered classes as key and their corresponding ids (order_in the original map) as value, as well as a separate array of the corresponding subclass serializers.;@SuppressWarnings("unchecked")_	private static Tuple2<LinkedHashMap<Class<?>, Integer>, TypeSerializer<Object>[]> decomposeSubclassSerializerRegistry(_		LinkedHashMap<Class<?>, TypeSerializer<?>> subclassSerializerRegistry) {__		final LinkedHashMap<Class<?>, Integer> subclassIds = new LinkedHashMap<>(subclassSerializerRegistry.size())__		final TypeSerializer[] subclassSerializers = new TypeSerializer[subclassSerializerRegistry.size()]___		subclassSerializerRegistry.forEach((registeredSubclassClass, serializer) -> {_			int id = subclassIds.size()__			subclassIds.put(registeredSubclassClass, id)__			subclassSerializers[id] = serializer__		})___		return Tuple2.of(subclassIds, subclassSerializers)__	};transforms,the,subclass,serializer,registry,structure,code,linked,hash,map,class,type,serializer,to,2,separate,structures,a,map,containing,with,registered,classes,as,key,and,their,corresponding,ids,order,in,the,original,map,as,value,as,well,as,a,separate,array,of,the,corresponding,subclass,serializers;suppress,warnings,unchecked,private,static,tuple2,linked,hash,map,class,integer,type,serializer,object,decompose,subclass,serializer,registry,linked,hash,map,class,type,serializer,subclass,serializer,registry,final,linked,hash,map,class,integer,subclass,ids,new,linked,hash,map,subclass,serializer,registry,size,final,type,serializer,subclass,serializers,new,type,serializer,subclass,serializer,registry,size,subclass,serializer,registry,for,each,registered,subclass,class,serializer,int,id,subclass,ids,size,subclass,ids,put,registered,subclass,class,id,subclass,serializers,id,serializer,return,tuple2,of,subclass,ids,subclass,serializers
PojoSerializerSnapshot -> @SuppressWarnings("unchecked") 	private static Tuple2<LinkedHashMap<Class<?>, Integer>, TypeSerializer<Object>[]> decomposeSubclassSerializerRegistry( 		LinkedHashMap<Class<?>, TypeSerializer<?>> subclassSerializerRegistry);1550821418;Transforms the subclass serializer registry structure, {@code LinkedHashMap<Class<?>, TypeSerializer<?>>}_to 2 separate structures: a map containing with registered classes as key and their corresponding ids (order_in the original map) as value, as well as a separate array of the corresponding subclass serializers.;@SuppressWarnings("unchecked")_	private static Tuple2<LinkedHashMap<Class<?>, Integer>, TypeSerializer<Object>[]> decomposeSubclassSerializerRegistry(_		LinkedHashMap<Class<?>, TypeSerializer<?>> subclassSerializerRegistry) {__		final LinkedHashMap<Class<?>, Integer> subclassIds = new LinkedHashMap<>(subclassSerializerRegistry.size())__		final TypeSerializer[] subclassSerializers = new TypeSerializer[subclassSerializerRegistry.size()]___		subclassSerializerRegistry.forEach((registeredSubclassClass, serializer) -> {_			int id = subclassIds.size()__			subclassIds.put(registeredSubclassClass, id)__			subclassSerializers[id] = serializer__		})___		return Tuple2.of(subclassIds, subclassSerializers)__	};transforms,the,subclass,serializer,registry,structure,code,linked,hash,map,class,type,serializer,to,2,separate,structures,a,map,containing,with,registered,classes,as,key,and,their,corresponding,ids,order,in,the,original,map,as,value,as,well,as,a,separate,array,of,the,corresponding,subclass,serializers;suppress,warnings,unchecked,private,static,tuple2,linked,hash,map,class,integer,type,serializer,object,decompose,subclass,serializer,registry,linked,hash,map,class,type,serializer,subclass,serializer,registry,final,linked,hash,map,class,integer,subclass,ids,new,linked,hash,map,subclass,serializer,registry,size,final,type,serializer,subclass,serializers,new,type,serializer,subclass,serializer,registry,size,subclass,serializer,registry,for,each,registered,subclass,class,serializer,int,id,subclass,ids,size,subclass,ids,put,registered,subclass,class,id,subclass,serializers,id,serializer,return,tuple2,of,subclass,ids,subclass,serializers
PojoSerializerSnapshot -> private static <T> boolean newPojoSerializerIsCompatibleWithReconfiguredSerializer( 			PojoSerializer<T> newPojoSerializer, 			IntermediateCompatibilityResult<T> fieldSerializerCompatibility, 			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots);1550821416;Checks if the new {@link PojoSerializer} is compatible with a reconfigured instance.;private static <T> boolean newPojoSerializerIsCompatibleWithReconfiguredSerializer(_			PojoSerializer<T> newPojoSerializer,_			IntermediateCompatibilityResult<T> fieldSerializerCompatibility,_			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots) {_		return newPojoHasDifferentSubclassRegistrationOrder(registeredSubclassSerializerSnapshots, newPojoSerializer)_			|| previousSerializerHasNonRegisteredSubclasses(nonRegisteredSubclassSerializerSnapshots)_			|| fieldSerializerCompatibility.isCompatibleWithReconfiguredSerializer()_			|| preExistingRegistrationsCompatibility.isCompatibleWithReconfiguredSerializer()__	};checks,if,the,new,link,pojo,serializer,is,compatible,with,a,reconfigured,instance;private,static,t,boolean,new,pojo,serializer,is,compatible,with,reconfigured,serializer,pojo,serializer,t,new,pojo,serializer,intermediate,compatibility,result,t,field,serializer,compatibility,intermediate,compatibility,result,t,pre,existing,registrations,compatibility,linked,optional,map,class,type,serializer,snapshot,registered,subclass,serializer,snapshots,linked,optional,map,class,type,serializer,snapshot,non,registered,subclass,serializer,snapshots,return,new,pojo,has,different,subclass,registration,order,registered,subclass,serializer,snapshots,new,pojo,serializer,previous,serializer,has,non,registered,subclasses,non,registered,subclass,serializer,snapshots,field,serializer,compatibility,is,compatible,with,reconfigured,serializer,pre,existing,registrations,compatibility,is,compatible,with,reconfigured,serializer
PojoSerializerSnapshot -> private static <T> boolean newPojoSerializerIsCompatibleWithReconfiguredSerializer( 			PojoSerializer<T> newPojoSerializer, 			IntermediateCompatibilityResult<T> fieldSerializerCompatibility, 			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots);1550821417;Checks if the new {@link PojoSerializer} is compatible with a reconfigured instance.;private static <T> boolean newPojoSerializerIsCompatibleWithReconfiguredSerializer(_			PojoSerializer<T> newPojoSerializer,_			IntermediateCompatibilityResult<T> fieldSerializerCompatibility,_			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots) {_		return newPojoHasDifferentSubclassRegistrationOrder(registeredSubclassSerializerSnapshots, newPojoSerializer)_			|| previousSerializerHasNonRegisteredSubclasses(nonRegisteredSubclassSerializerSnapshots)_			|| fieldSerializerCompatibility.isCompatibleWithReconfiguredSerializer()_			|| preExistingRegistrationsCompatibility.isCompatibleWithReconfiguredSerializer()__	};checks,if,the,new,link,pojo,serializer,is,compatible,with,a,reconfigured,instance;private,static,t,boolean,new,pojo,serializer,is,compatible,with,reconfigured,serializer,pojo,serializer,t,new,pojo,serializer,intermediate,compatibility,result,t,field,serializer,compatibility,intermediate,compatibility,result,t,pre,existing,registrations,compatibility,linked,optional,map,class,type,serializer,snapshot,registered,subclass,serializer,snapshots,linked,optional,map,class,type,serializer,snapshot,non,registered,subclass,serializer,snapshots,return,new,pojo,has,different,subclass,registration,order,registered,subclass,serializer,snapshots,new,pojo,serializer,previous,serializer,has,non,registered,subclasses,non,registered,subclass,serializer,snapshots,field,serializer,compatibility,is,compatible,with,reconfigured,serializer,pre,existing,registrations,compatibility,is,compatible,with,reconfigured,serializer
PojoSerializerSnapshot -> private static <T> boolean newPojoSerializerIsCompatibleWithReconfiguredSerializer( 			PojoSerializer<T> newPojoSerializer, 			IntermediateCompatibilityResult<T> fieldSerializerCompatibility, 			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots);1550821418;Checks if the new {@link PojoSerializer} is compatible with a reconfigured instance.;private static <T> boolean newPojoSerializerIsCompatibleWithReconfiguredSerializer(_			PojoSerializer<T> newPojoSerializer,_			IntermediateCompatibilityResult<T> fieldSerializerCompatibility,_			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots) {_		return newPojoHasDifferentSubclassRegistrationOrder(registeredSubclassSerializerSnapshots, newPojoSerializer)_			|| previousSerializerHasNonRegisteredSubclasses(nonRegisteredSubclassSerializerSnapshots)_			|| fieldSerializerCompatibility.isCompatibleWithReconfiguredSerializer()_			|| preExistingRegistrationsCompatibility.isCompatibleWithReconfiguredSerializer()__	};checks,if,the,new,link,pojo,serializer,is,compatible,with,a,reconfigured,instance;private,static,t,boolean,new,pojo,serializer,is,compatible,with,reconfigured,serializer,pojo,serializer,t,new,pojo,serializer,intermediate,compatibility,result,t,field,serializer,compatibility,intermediate,compatibility,result,t,pre,existing,registrations,compatibility,linked,optional,map,class,type,serializer,snapshot,registered,subclass,serializer,snapshots,linked,optional,map,class,type,serializer,snapshot,non,registered,subclass,serializer,snapshots,return,new,pojo,has,different,subclass,registration,order,registered,subclass,serializer,snapshots,new,pojo,serializer,previous,serializer,has,non,registered,subclasses,non,registered,subclass,serializer,snapshots,field,serializer,compatibility,is,compatible,with,reconfigured,serializer,pre,existing,registrations,compatibility,is,compatible,with,reconfigured,serializer
PojoSerializerSnapshot -> private static <K> LinkedHashMap<K, TypeSerializer<?>> restoreSerializers(LinkedHashMap<K, TypeSerializerSnapshot<?>> snapshotsMap);1550821416;Transforms a {@link LinkedHashMap} with {@link TypeSerializerSnapshot}s as_the value to {@link TypeSerializer} as the value by restoring the snapshot.;private static <K> LinkedHashMap<K, TypeSerializer<?>> restoreSerializers(LinkedHashMap<K, TypeSerializerSnapshot<?>> snapshotsMap) {_		final LinkedHashMap<K, TypeSerializer<?>> restoredSerializersMap = new LinkedHashMap<>(snapshotsMap.size())__		snapshotsMap.forEach((key, snapshot) -> restoredSerializersMap.put(key, snapshot.restoreSerializer()))__		return restoredSerializersMap__	};transforms,a,link,linked,hash,map,with,link,type,serializer,snapshot,s,as,the,value,to,link,type,serializer,as,the,value,by,restoring,the,snapshot;private,static,k,linked,hash,map,k,type,serializer,restore,serializers,linked,hash,map,k,type,serializer,snapshot,snapshots,map,final,linked,hash,map,k,type,serializer,restored,serializers,map,new,linked,hash,map,snapshots,map,size,snapshots,map,for,each,key,snapshot,restored,serializers,map,put,key,snapshot,restore,serializer,return,restored,serializers,map
PojoSerializerSnapshot -> private static <K> LinkedHashMap<K, TypeSerializer<?>> restoreSerializers(LinkedHashMap<K, TypeSerializerSnapshot<?>> snapshotsMap);1550821417;Transforms a {@link LinkedHashMap} with {@link TypeSerializerSnapshot}s as_the value to {@link TypeSerializer} as the value by restoring the snapshot.;private static <K> LinkedHashMap<K, TypeSerializer<?>> restoreSerializers(LinkedHashMap<K, TypeSerializerSnapshot<?>> snapshotsMap) {_		final LinkedHashMap<K, TypeSerializer<?>> restoredSerializersMap = new LinkedHashMap<>(snapshotsMap.size())__		snapshotsMap.forEach((key, snapshot) -> restoredSerializersMap.put(key, snapshot.restoreSerializer()))__		return restoredSerializersMap__	};transforms,a,link,linked,hash,map,with,link,type,serializer,snapshot,s,as,the,value,to,link,type,serializer,as,the,value,by,restoring,the,snapshot;private,static,k,linked,hash,map,k,type,serializer,restore,serializers,linked,hash,map,k,type,serializer,snapshot,snapshots,map,final,linked,hash,map,k,type,serializer,restored,serializers,map,new,linked,hash,map,snapshots,map,size,snapshots,map,for,each,key,snapshot,restored,serializers,map,put,key,snapshot,restore,serializer,return,restored,serializers,map
PojoSerializerSnapshot -> private static <K> LinkedHashMap<K, TypeSerializer<?>> restoreSerializers(LinkedHashMap<K, TypeSerializerSnapshot<?>> snapshotsMap);1550821418;Transforms a {@link LinkedHashMap} with {@link TypeSerializerSnapshot}s as_the value to {@link TypeSerializer} as the value by restoring the snapshot.;private static <K> LinkedHashMap<K, TypeSerializer<?>> restoreSerializers(LinkedHashMap<K, TypeSerializerSnapshot<?>> snapshotsMap) {_		final LinkedHashMap<K, TypeSerializer<?>> restoredSerializersMap = new LinkedHashMap<>(snapshotsMap.size())__		snapshotsMap.forEach((key, snapshot) -> restoredSerializersMap.put(key, snapshot.restoreSerializer()))__		return restoredSerializersMap__	};transforms,a,link,linked,hash,map,with,link,type,serializer,snapshot,s,as,the,value,to,link,type,serializer,as,the,value,by,restoring,the,snapshot;private,static,k,linked,hash,map,k,type,serializer,restore,serializers,linked,hash,map,k,type,serializer,snapshot,snapshots,map,final,linked,hash,map,k,type,serializer,restored,serializers,map,new,linked,hash,map,snapshots,map,size,snapshots,map,for,each,key,snapshot,restored,serializers,map,put,key,snapshot,restore,serializer,return,restored,serializers,map
PojoSerializerSnapshot -> private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingFields( 			PojoSerializer<T> newPojoSerializer, 			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots);1550821416;Finds which Pojo fields exists both in the new {@link PojoSerializer} as well as in the previous one_(represented by this snapshot), and returns an {@link IntermediateCompatibilityResult}_of the serializers of those preexisting fields.;private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingFields(_			PojoSerializer<T> newPojoSerializer,_			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots) {__		_		_		final Set<LinkedOptionalMap.KeyValue<Field, TypeSerializerSnapshot<?>>> presentFieldSnapshots =_			fieldSerializerSnapshots.getPresentEntries()___		final ArrayList<TypeSerializerSnapshot<?>> associatedFieldSerializerSnapshots = new ArrayList<>(presentFieldSnapshots.size())__		final ArrayList<TypeSerializer<?>> associatedNewFieldSerializers = new ArrayList<>(presentFieldSnapshots.size())___		for (LinkedOptionalMap.KeyValue<Field, TypeSerializerSnapshot<?>> presentFieldEntry : presentFieldSnapshots) {_			TypeSerializer<?> associatedNewFieldSerializer = newPojoSerializer.getFieldSerializer(presentFieldEntry.getKey())__			checkState(_				associatedNewFieldSerializer != null,_				"a present field should have its associated new field serializer available.")___			associatedFieldSerializerSnapshots.add(presentFieldEntry.getValue())__			associatedNewFieldSerializers.add(associatedNewFieldSerializer)__		}__		return CompositeTypeSerializerUtil.constructIntermediateCompatibilityResult(_			associatedNewFieldSerializers.toArray(new TypeSerializer<?>[associatedNewFieldSerializers.size()]),_			associatedFieldSerializerSnapshots.toArray(new TypeSerializerSnapshot<?>[associatedFieldSerializerSnapshots.size()]))__	};finds,which,pojo,fields,exists,both,in,the,new,link,pojo,serializer,as,well,as,in,the,previous,one,represented,by,this,snapshot,and,returns,an,link,intermediate,compatibility,result,of,the,serializers,of,those,preexisting,fields;private,static,t,intermediate,compatibility,result,t,get,compatibility,of,pre,existing,fields,pojo,serializer,t,new,pojo,serializer,linked,optional,map,field,type,serializer,snapshot,field,serializer,snapshots,final,set,linked,optional,map,key,value,field,type,serializer,snapshot,present,field,snapshots,field,serializer,snapshots,get,present,entries,final,array,list,type,serializer,snapshot,associated,field,serializer,snapshots,new,array,list,present,field,snapshots,size,final,array,list,type,serializer,associated,new,field,serializers,new,array,list,present,field,snapshots,size,for,linked,optional,map,key,value,field,type,serializer,snapshot,present,field,entry,present,field,snapshots,type,serializer,associated,new,field,serializer,new,pojo,serializer,get,field,serializer,present,field,entry,get,key,check,state,associated,new,field,serializer,null,a,present,field,should,have,its,associated,new,field,serializer,available,associated,field,serializer,snapshots,add,present,field,entry,get,value,associated,new,field,serializers,add,associated,new,field,serializer,return,composite,type,serializer,util,construct,intermediate,compatibility,result,associated,new,field,serializers,to,array,new,type,serializer,associated,new,field,serializers,size,associated,field,serializer,snapshots,to,array,new,type,serializer,snapshot,associated,field,serializer,snapshots,size
PojoSerializerSnapshot -> private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingFields( 			PojoSerializer<T> newPojoSerializer, 			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots);1550821417;Finds which Pojo fields exists both in the new {@link PojoSerializer} as well as in the previous one_(represented by this snapshot), and returns an {@link IntermediateCompatibilityResult}_of the serializers of those preexisting fields.;private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingFields(_			PojoSerializer<T> newPojoSerializer,_			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots) {__		_		_		final Set<LinkedOptionalMap.KeyValue<Field, TypeSerializerSnapshot<?>>> presentFieldSnapshots =_			fieldSerializerSnapshots.getPresentEntries()___		final ArrayList<TypeSerializerSnapshot<?>> associatedFieldSerializerSnapshots = new ArrayList<>(presentFieldSnapshots.size())__		final ArrayList<TypeSerializer<?>> associatedNewFieldSerializers = new ArrayList<>(presentFieldSnapshots.size())___		final Map<Field, TypeSerializer<?>> newFieldSerializersIndex = buildNewFieldSerializersIndex(newPojoSerializer)__		for (LinkedOptionalMap.KeyValue<Field, TypeSerializerSnapshot<?>> presentFieldEntry : presentFieldSnapshots) {_			TypeSerializer<?> associatedNewFieldSerializer = newFieldSerializersIndex.get(presentFieldEntry.getKey())__			checkState(_				associatedNewFieldSerializer != null,_				"a present field should have its associated new field serializer available.")___			associatedFieldSerializerSnapshots.add(presentFieldEntry.getValue())__			associatedNewFieldSerializers.add(associatedNewFieldSerializer)__		}__		return CompositeTypeSerializerUtil.constructIntermediateCompatibilityResult(_			associatedNewFieldSerializers.toArray(new TypeSerializer<?>[associatedNewFieldSerializers.size()]),_			associatedFieldSerializerSnapshots.toArray(new TypeSerializerSnapshot<?>[associatedFieldSerializerSnapshots.size()]))__	};finds,which,pojo,fields,exists,both,in,the,new,link,pojo,serializer,as,well,as,in,the,previous,one,represented,by,this,snapshot,and,returns,an,link,intermediate,compatibility,result,of,the,serializers,of,those,preexisting,fields;private,static,t,intermediate,compatibility,result,t,get,compatibility,of,pre,existing,fields,pojo,serializer,t,new,pojo,serializer,linked,optional,map,field,type,serializer,snapshot,field,serializer,snapshots,final,set,linked,optional,map,key,value,field,type,serializer,snapshot,present,field,snapshots,field,serializer,snapshots,get,present,entries,final,array,list,type,serializer,snapshot,associated,field,serializer,snapshots,new,array,list,present,field,snapshots,size,final,array,list,type,serializer,associated,new,field,serializers,new,array,list,present,field,snapshots,size,final,map,field,type,serializer,new,field,serializers,index,build,new,field,serializers,index,new,pojo,serializer,for,linked,optional,map,key,value,field,type,serializer,snapshot,present,field,entry,present,field,snapshots,type,serializer,associated,new,field,serializer,new,field,serializers,index,get,present,field,entry,get,key,check,state,associated,new,field,serializer,null,a,present,field,should,have,its,associated,new,field,serializer,available,associated,field,serializer,snapshots,add,present,field,entry,get,value,associated,new,field,serializers,add,associated,new,field,serializer,return,composite,type,serializer,util,construct,intermediate,compatibility,result,associated,new,field,serializers,to,array,new,type,serializer,associated,new,field,serializers,size,associated,field,serializer,snapshots,to,array,new,type,serializer,snapshot,associated,field,serializer,snapshots,size
PojoSerializerSnapshot -> private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingFields( 			PojoSerializer<T> newPojoSerializer, 			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots);1550821418;Finds which Pojo fields exists both in the new {@link PojoSerializer} as well as in the previous one_(represented by this snapshot), and returns an {@link IntermediateCompatibilityResult}_of the serializers of those preexisting fields.;private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingFields(_			PojoSerializer<T> newPojoSerializer,_			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots) {__		_		_		final Set<LinkedOptionalMap.KeyValue<Field, TypeSerializerSnapshot<?>>> presentFieldSnapshots =_			fieldSerializerSnapshots.getPresentEntries()___		final ArrayList<TypeSerializerSnapshot<?>> associatedFieldSerializerSnapshots = new ArrayList<>(presentFieldSnapshots.size())__		final ArrayList<TypeSerializer<?>> associatedNewFieldSerializers = new ArrayList<>(presentFieldSnapshots.size())___		final Map<Field, TypeSerializer<?>> newFieldSerializersIndex = buildNewFieldSerializersIndex(newPojoSerializer)__		for (LinkedOptionalMap.KeyValue<Field, TypeSerializerSnapshot<?>> presentFieldEntry : presentFieldSnapshots) {_			TypeSerializer<?> associatedNewFieldSerializer = newFieldSerializersIndex.get(presentFieldEntry.getKey())__			checkState(_				associatedNewFieldSerializer != null,_				"a present field should have its associated new field serializer available.")___			associatedFieldSerializerSnapshots.add(presentFieldEntry.getValue())__			associatedNewFieldSerializers.add(associatedNewFieldSerializer)__		}__		return CompositeTypeSerializerUtil.constructIntermediateCompatibilityResult(_			associatedNewFieldSerializers.toArray(new TypeSerializer<?>[associatedNewFieldSerializers.size()]),_			associatedFieldSerializerSnapshots.toArray(new TypeSerializerSnapshot<?>[associatedFieldSerializerSnapshots.size()]))__	};finds,which,pojo,fields,exists,both,in,the,new,link,pojo,serializer,as,well,as,in,the,previous,one,represented,by,this,snapshot,and,returns,an,link,intermediate,compatibility,result,of,the,serializers,of,those,preexisting,fields;private,static,t,intermediate,compatibility,result,t,get,compatibility,of,pre,existing,fields,pojo,serializer,t,new,pojo,serializer,linked,optional,map,field,type,serializer,snapshot,field,serializer,snapshots,final,set,linked,optional,map,key,value,field,type,serializer,snapshot,present,field,snapshots,field,serializer,snapshots,get,present,entries,final,array,list,type,serializer,snapshot,associated,field,serializer,snapshots,new,array,list,present,field,snapshots,size,final,array,list,type,serializer,associated,new,field,serializers,new,array,list,present,field,snapshots,size,final,map,field,type,serializer,new,field,serializers,index,build,new,field,serializers,index,new,pojo,serializer,for,linked,optional,map,key,value,field,type,serializer,snapshot,present,field,entry,present,field,snapshots,type,serializer,associated,new,field,serializer,new,field,serializers,index,get,present,field,entry,get,key,check,state,associated,new,field,serializer,null,a,present,field,should,have,its,associated,new,field,serializer,available,associated,field,serializer,snapshots,add,present,field,entry,get,value,associated,new,field,serializers,add,associated,new,field,serializer,return,composite,type,serializer,util,construct,intermediate,compatibility,result,associated,new,field,serializers,to,array,new,type,serializer,associated,new,field,serializers,size,associated,field,serializer,snapshots,to,array,new,type,serializer,snapshot,associated,field,serializer,snapshots,size
PojoSerializerSnapshot -> private static boolean previousSerializerHasNonRegisteredSubclasses( 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots);1550821416;Checks whether the previous serializer, represented by this snapshot, has_non-registered subclasses.;private static boolean previousSerializerHasNonRegisteredSubclasses(_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots) {_		return nonRegisteredSubclassSerializerSnapshots.size() > 0__	};checks,whether,the,previous,serializer,represented,by,this,snapshot,has,non,registered,subclasses;private,static,boolean,previous,serializer,has,non,registered,subclasses,linked,optional,map,class,type,serializer,snapshot,non,registered,subclass,serializer,snapshots,return,non,registered,subclass,serializer,snapshots,size,0
PojoSerializerSnapshot -> private static boolean previousSerializerHasNonRegisteredSubclasses( 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots);1550821417;Checks whether the previous serializer, represented by this snapshot, has_non-registered subclasses.;private static boolean previousSerializerHasNonRegisteredSubclasses(_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots) {_		return nonRegisteredSubclassSerializerSnapshots.size() > 0__	};checks,whether,the,previous,serializer,represented,by,this,snapshot,has,non,registered,subclasses;private,static,boolean,previous,serializer,has,non,registered,subclasses,linked,optional,map,class,type,serializer,snapshot,non,registered,subclass,serializer,snapshots,return,non,registered,subclass,serializer,snapshots,size,0
PojoSerializerSnapshot -> private static boolean previousSerializerHasNonRegisteredSubclasses( 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots);1550821418;Checks whether the previous serializer, represented by this snapshot, has_non-registered subclasses.;private static boolean previousSerializerHasNonRegisteredSubclasses(_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> nonRegisteredSubclassSerializerSnapshots) {_		return nonRegisteredSubclassSerializerSnapshots.size() > 0__	};checks,whether,the,previous,serializer,represented,by,this,snapshot,has,non,registered,subclasses;private,static,boolean,previous,serializer,has,non,registered,subclasses,linked,optional,map,class,type,serializer,snapshot,non,registered,subclass,serializer,snapshots,return,non,registered,subclass,serializer,snapshots,size,0
PojoSerializerSnapshot -> private static <T> boolean newPojoSerializerIsCompatibleAfterMigration( 			PojoSerializer<T> newPojoSerializer, 			IntermediateCompatibilityResult<T> fieldSerializerCompatibility, 			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility, 			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots);1550821416;Checks if the new {@link PojoSerializer} is compatible after migration.;private static <T> boolean newPojoSerializerIsCompatibleAfterMigration(_			PojoSerializer<T> newPojoSerializer,_			IntermediateCompatibilityResult<T> fieldSerializerCompatibility,_			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility,_			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots) {_		return newPojoHasNewOrRemovedFields(fieldSerializerSnapshots, newPojoSerializer)_			|| fieldSerializerCompatibility.isCompatibleAfterMigration()_			|| preExistingRegistrationsCompatibility.isCompatibleAfterMigration()__	};checks,if,the,new,link,pojo,serializer,is,compatible,after,migration;private,static,t,boolean,new,pojo,serializer,is,compatible,after,migration,pojo,serializer,t,new,pojo,serializer,intermediate,compatibility,result,t,field,serializer,compatibility,intermediate,compatibility,result,t,pre,existing,registrations,compatibility,linked,optional,map,field,type,serializer,snapshot,field,serializer,snapshots,return,new,pojo,has,new,or,removed,fields,field,serializer,snapshots,new,pojo,serializer,field,serializer,compatibility,is,compatible,after,migration,pre,existing,registrations,compatibility,is,compatible,after,migration
PojoSerializerSnapshot -> private static <T> boolean newPojoSerializerIsCompatibleAfterMigration( 			PojoSerializer<T> newPojoSerializer, 			IntermediateCompatibilityResult<T> fieldSerializerCompatibility, 			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility, 			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots);1550821417;Checks if the new {@link PojoSerializer} is compatible after migration.;private static <T> boolean newPojoSerializerIsCompatibleAfterMigration(_			PojoSerializer<T> newPojoSerializer,_			IntermediateCompatibilityResult<T> fieldSerializerCompatibility,_			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility,_			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots) {_		return newPojoHasNewOrRemovedFields(fieldSerializerSnapshots, newPojoSerializer)_			|| fieldSerializerCompatibility.isCompatibleAfterMigration()_			|| preExistingRegistrationsCompatibility.isCompatibleAfterMigration()__	};checks,if,the,new,link,pojo,serializer,is,compatible,after,migration;private,static,t,boolean,new,pojo,serializer,is,compatible,after,migration,pojo,serializer,t,new,pojo,serializer,intermediate,compatibility,result,t,field,serializer,compatibility,intermediate,compatibility,result,t,pre,existing,registrations,compatibility,linked,optional,map,field,type,serializer,snapshot,field,serializer,snapshots,return,new,pojo,has,new,or,removed,fields,field,serializer,snapshots,new,pojo,serializer,field,serializer,compatibility,is,compatible,after,migration,pre,existing,registrations,compatibility,is,compatible,after,migration
PojoSerializerSnapshot -> private static <T> boolean newPojoSerializerIsCompatibleAfterMigration( 			PojoSerializer<T> newPojoSerializer, 			IntermediateCompatibilityResult<T> fieldSerializerCompatibility, 			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility, 			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots);1550821418;Checks if the new {@link PojoSerializer} is compatible after migration.;private static <T> boolean newPojoSerializerIsCompatibleAfterMigration(_			PojoSerializer<T> newPojoSerializer,_			IntermediateCompatibilityResult<T> fieldSerializerCompatibility,_			IntermediateCompatibilityResult<T> preExistingRegistrationsCompatibility,_			LinkedOptionalMap<Field, TypeSerializerSnapshot<?>> fieldSerializerSnapshots) {_		return newPojoHasNewOrRemovedFields(fieldSerializerSnapshots, newPojoSerializer)_			|| fieldSerializerCompatibility.isCompatibleAfterMigration()_			|| preExistingRegistrationsCompatibility.isCompatibleAfterMigration()__	};checks,if,the,new,link,pojo,serializer,is,compatible,after,migration;private,static,t,boolean,new,pojo,serializer,is,compatible,after,migration,pojo,serializer,t,new,pojo,serializer,intermediate,compatibility,result,t,field,serializer,compatibility,intermediate,compatibility,result,t,pre,existing,registrations,compatibility,linked,optional,map,field,type,serializer,snapshot,field,serializer,snapshots,return,new,pojo,has,new,or,removed,fields,field,serializer,snapshots,new,pojo,serializer,field,serializer,compatibility,is,compatible,after,migration,pre,existing,registrations,compatibility,is,compatible,after,migration
PojoSerializerSnapshot -> private static boolean newPojoHasDifferentSubclassRegistrationOrder( 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots, 			PojoSerializer<?> newPojoSerializer);1550821416;Checks whether the new {@link PojoSerializer} has a different subclass registration order_compared to the previous one.;private static boolean newPojoHasDifferentSubclassRegistrationOrder(_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots,_			PojoSerializer<?> newPojoSerializer) {_		Set<Class<?>> previousRegistrationOrder = registeredSubclassSerializerSnapshots.unwrapOptionals().keySet()__		Set<Class<?>> newRegistrationOrder = newPojoSerializer.getRegisteredClasses().keySet()__		return !isPreviousRegistrationPrefixOfNewRegistration(previousRegistrationOrder, newRegistrationOrder)__	};checks,whether,the,new,link,pojo,serializer,has,a,different,subclass,registration,order,compared,to,the,previous,one;private,static,boolean,new,pojo,has,different,subclass,registration,order,linked,optional,map,class,type,serializer,snapshot,registered,subclass,serializer,snapshots,pojo,serializer,new,pojo,serializer,set,class,previous,registration,order,registered,subclass,serializer,snapshots,unwrap,optionals,key,set,set,class,new,registration,order,new,pojo,serializer,get,registered,classes,key,set,return,is,previous,registration,prefix,of,new,registration,previous,registration,order,new,registration,order
PojoSerializerSnapshot -> private static boolean newPojoHasDifferentSubclassRegistrationOrder( 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots, 			PojoSerializer<?> newPojoSerializer);1550821417;Checks whether the new {@link PojoSerializer} has a different subclass registration order_compared to the previous one.;private static boolean newPojoHasDifferentSubclassRegistrationOrder(_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots,_			PojoSerializer<?> newPojoSerializer) {_		Set<Class<?>> previousRegistrationOrder = registeredSubclassSerializerSnapshots.unwrapOptionals().keySet()__		Set<Class<?>> newRegistrationOrder = newPojoSerializer.getRegisteredClasses().keySet()__		return !isPreviousRegistrationPrefixOfNewRegistration(previousRegistrationOrder, newRegistrationOrder)__	};checks,whether,the,new,link,pojo,serializer,has,a,different,subclass,registration,order,compared,to,the,previous,one;private,static,boolean,new,pojo,has,different,subclass,registration,order,linked,optional,map,class,type,serializer,snapshot,registered,subclass,serializer,snapshots,pojo,serializer,new,pojo,serializer,set,class,previous,registration,order,registered,subclass,serializer,snapshots,unwrap,optionals,key,set,set,class,new,registration,order,new,pojo,serializer,get,registered,classes,key,set,return,is,previous,registration,prefix,of,new,registration,previous,registration,order,new,registration,order
PojoSerializerSnapshot -> private static boolean newPojoHasDifferentSubclassRegistrationOrder( 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots, 			PojoSerializer<?> newPojoSerializer);1550821418;Checks whether the new {@link PojoSerializer} has a different subclass registration order_compared to the previous one.;private static boolean newPojoHasDifferentSubclassRegistrationOrder(_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots,_			PojoSerializer<?> newPojoSerializer) {_		Set<Class<?>> previousRegistrationOrder = registeredSubclassSerializerSnapshots.unwrapOptionals().keySet()__		Set<Class<?>> newRegistrationOrder = newPojoSerializer.getRegisteredClasses().keySet()__		return !isPreviousRegistrationPrefixOfNewRegistration(previousRegistrationOrder, newRegistrationOrder)__	};checks,whether,the,new,link,pojo,serializer,has,a,different,subclass,registration,order,compared,to,the,previous,one;private,static,boolean,new,pojo,has,different,subclass,registration,order,linked,optional,map,class,type,serializer,snapshot,registered,subclass,serializer,snapshots,pojo,serializer,new,pojo,serializer,set,class,previous,registration,order,registered,subclass,serializer,snapshots,unwrap,optionals,key,set,set,class,new,registration,order,new,pojo,serializer,get,registered,classes,key,set,return,is,previous,registration,prefix,of,new,registration,previous,registration,order,new,registration,order
PojoSerializerSnapshot -> PojoSerializerSnapshot( 			Class<T> pojoClass, 			Field[] fields, 			TypeSerializer<?>[] fieldSerializers, 			LinkedHashMap<Class<?>, TypeSerializer<?>> registeredSubclassSerializers, 			HashMap<Class<?>, TypeSerializer<?>> nonRegisteredSubclassSerializers);1550821416;Constructor for writing the snapshot.__@param pojoClass the Pojo type class._@param fields array of fields. Fields may be {@code null} if the originating {@link PojoSerializer} is a_restored one with already missing fields, and was never replaced by a new {@link PojoSerializer}._@param fieldSerializers array of field serializers._@param registeredSubclassSerializers map of registered subclasses to their corresponding serializers._@param nonRegisteredSubclassSerializers map of non-registered subclasses to their corresponding serializers.;PojoSerializerSnapshot(_			Class<T> pojoClass,_			Field[] fields,_			TypeSerializer<?>[] fieldSerializers,_			LinkedHashMap<Class<?>, TypeSerializer<?>> registeredSubclassSerializers,_			HashMap<Class<?>, TypeSerializer<?>> nonRegisteredSubclassSerializers) {__		this.snapshotData = PojoSerializerSnapshotData.createFrom(_			pojoClass,_			fields,_			fieldSerializers,_			registeredSubclassSerializers,_			nonRegisteredSubclassSerializers)__	};constructor,for,writing,the,snapshot,param,pojo,class,the,pojo,type,class,param,fields,array,of,fields,fields,may,be,code,null,if,the,originating,link,pojo,serializer,is,a,restored,one,with,already,missing,fields,and,was,never,replaced,by,a,new,link,pojo,serializer,param,field,serializers,array,of,field,serializers,param,registered,subclass,serializers,map,of,registered,subclasses,to,their,corresponding,serializers,param,non,registered,subclass,serializers,map,of,non,registered,subclasses,to,their,corresponding,serializers;pojo,serializer,snapshot,class,t,pojo,class,field,fields,type,serializer,field,serializers,linked,hash,map,class,type,serializer,registered,subclass,serializers,hash,map,class,type,serializer,non,registered,subclass,serializers,this,snapshot,data,pojo,serializer,snapshot,data,create,from,pojo,class,fields,field,serializers,registered,subclass,serializers,non,registered,subclass,serializers
PojoSerializerSnapshot -> PojoSerializerSnapshot( 			Class<T> pojoClass, 			Field[] fields, 			TypeSerializer<?>[] fieldSerializers, 			LinkedHashMap<Class<?>, TypeSerializer<?>> registeredSubclassSerializers, 			HashMap<Class<?>, TypeSerializer<?>> nonRegisteredSubclassSerializers);1550821417;Constructor for writing the snapshot.__@param pojoClass the Pojo type class._@param fields array of fields. Fields may be {@code null} if the originating {@link PojoSerializer} is a_restored one with already missing fields, and was never replaced by a new {@link PojoSerializer}._@param fieldSerializers array of field serializers._@param registeredSubclassSerializers map of registered subclasses to their corresponding serializers._@param nonRegisteredSubclassSerializers map of non-registered subclasses to their corresponding serializers.;PojoSerializerSnapshot(_			Class<T> pojoClass,_			Field[] fields,_			TypeSerializer<?>[] fieldSerializers,_			LinkedHashMap<Class<?>, TypeSerializer<?>> registeredSubclassSerializers,_			HashMap<Class<?>, TypeSerializer<?>> nonRegisteredSubclassSerializers) {__		this.snapshotData = PojoSerializerSnapshotData.createFrom(_			pojoClass,_			fields,_			fieldSerializers,_			registeredSubclassSerializers,_			nonRegisteredSubclassSerializers)__	};constructor,for,writing,the,snapshot,param,pojo,class,the,pojo,type,class,param,fields,array,of,fields,fields,may,be,code,null,if,the,originating,link,pojo,serializer,is,a,restored,one,with,already,missing,fields,and,was,never,replaced,by,a,new,link,pojo,serializer,param,field,serializers,array,of,field,serializers,param,registered,subclass,serializers,map,of,registered,subclasses,to,their,corresponding,serializers,param,non,registered,subclass,serializers,map,of,non,registered,subclasses,to,their,corresponding,serializers;pojo,serializer,snapshot,class,t,pojo,class,field,fields,type,serializer,field,serializers,linked,hash,map,class,type,serializer,registered,subclass,serializers,hash,map,class,type,serializer,non,registered,subclass,serializers,this,snapshot,data,pojo,serializer,snapshot,data,create,from,pojo,class,fields,field,serializers,registered,subclass,serializers,non,registered,subclass,serializers
PojoSerializerSnapshot -> private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingRegisteredSubclasses( 			PojoSerializer<T> newPojoSerializer, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots);1550821416;Finds which registered subclasses exists both in the new {@link PojoSerializer} as well as in the previous one_(represented by this snapshot), and returns an {@link IntermediateCompatibilityResult}_of the serializers of this preexisting registered subclasses.;private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingRegisteredSubclasses(_			PojoSerializer<T> newPojoSerializer,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots) {__		final LinkedHashMap<Class<?>, TypeSerializerSnapshot<?>> unwrappedSerializerSnapshots = registeredSubclassSerializerSnapshots.unwrapOptionals()___		final ArrayList<TypeSerializerSnapshot<?>> associatedSubclassSerializerSnapshots = new ArrayList<>()__		final ArrayList<TypeSerializer<?>> associatedNewSubclassSerializers = new ArrayList<>()___		final LinkedHashMap<Class<?>, TypeSerializer<?>> newSubclassSerializerRegistry = newPojoSerializer.getBundledSubclassSerializerRegistry()___		for (Map.Entry<Class<?>, TypeSerializerSnapshot<?>> entry : unwrappedSerializerSnapshots.entrySet()) {_			TypeSerializer<?> newRegisteredSerializer = newSubclassSerializerRegistry.get(entry.getKey())__			if (newRegisteredSerializer != null) {_				associatedSubclassSerializerSnapshots.add(entry.getValue())__				associatedNewSubclassSerializers.add(newRegisteredSerializer)__			}_		}__		return CompositeTypeSerializerUtil.constructIntermediateCompatibilityResult(_			associatedNewSubclassSerializers.toArray(new TypeSerializer<?>[associatedNewSubclassSerializers.size()]),_			associatedSubclassSerializerSnapshots.toArray(new TypeSerializerSnapshot<?>[associatedSubclassSerializerSnapshots.size()]))__	};finds,which,registered,subclasses,exists,both,in,the,new,link,pojo,serializer,as,well,as,in,the,previous,one,represented,by,this,snapshot,and,returns,an,link,intermediate,compatibility,result,of,the,serializers,of,this,preexisting,registered,subclasses;private,static,t,intermediate,compatibility,result,t,get,compatibility,of,pre,existing,registered,subclasses,pojo,serializer,t,new,pojo,serializer,linked,optional,map,class,type,serializer,snapshot,registered,subclass,serializer,snapshots,final,linked,hash,map,class,type,serializer,snapshot,unwrapped,serializer,snapshots,registered,subclass,serializer,snapshots,unwrap,optionals,final,array,list,type,serializer,snapshot,associated,subclass,serializer,snapshots,new,array,list,final,array,list,type,serializer,associated,new,subclass,serializers,new,array,list,final,linked,hash,map,class,type,serializer,new,subclass,serializer,registry,new,pojo,serializer,get,bundled,subclass,serializer,registry,for,map,entry,class,type,serializer,snapshot,entry,unwrapped,serializer,snapshots,entry,set,type,serializer,new,registered,serializer,new,subclass,serializer,registry,get,entry,get,key,if,new,registered,serializer,null,associated,subclass,serializer,snapshots,add,entry,get,value,associated,new,subclass,serializers,add,new,registered,serializer,return,composite,type,serializer,util,construct,intermediate,compatibility,result,associated,new,subclass,serializers,to,array,new,type,serializer,associated,new,subclass,serializers,size,associated,subclass,serializer,snapshots,to,array,new,type,serializer,snapshot,associated,subclass,serializer,snapshots,size
PojoSerializerSnapshot -> private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingRegisteredSubclasses( 			PojoSerializer<T> newPojoSerializer, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots);1550821417;Finds which registered subclasses exists both in the new {@link PojoSerializer} as well as in the previous one_(represented by this snapshot), and returns an {@link IntermediateCompatibilityResult}_of the serializers of this preexisting registered subclasses.;private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingRegisteredSubclasses(_			PojoSerializer<T> newPojoSerializer,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots) {__		final LinkedHashMap<Class<?>, TypeSerializerSnapshot<?>> unwrappedSerializerSnapshots = registeredSubclassSerializerSnapshots.unwrapOptionals()___		final ArrayList<TypeSerializerSnapshot<?>> associatedSubclassSerializerSnapshots = new ArrayList<>()__		final ArrayList<TypeSerializer<?>> associatedNewSubclassSerializers = new ArrayList<>()___		final LinkedHashMap<Class<?>, TypeSerializer<?>> newSubclassSerializerRegistry = newPojoSerializer.getBundledSubclassSerializerRegistry()___		for (Map.Entry<Class<?>, TypeSerializerSnapshot<?>> entry : unwrappedSerializerSnapshots.entrySet()) {_			TypeSerializer<?> newRegisteredSerializer = newSubclassSerializerRegistry.get(entry.getKey())__			if (newRegisteredSerializer != null) {_				associatedSubclassSerializerSnapshots.add(entry.getValue())__				associatedNewSubclassSerializers.add(newRegisteredSerializer)__			}_		}__		return CompositeTypeSerializerUtil.constructIntermediateCompatibilityResult(_			associatedNewSubclassSerializers.toArray(new TypeSerializer<?>[associatedNewSubclassSerializers.size()]),_			associatedSubclassSerializerSnapshots.toArray(new TypeSerializerSnapshot<?>[associatedSubclassSerializerSnapshots.size()]))__	};finds,which,registered,subclasses,exists,both,in,the,new,link,pojo,serializer,as,well,as,in,the,previous,one,represented,by,this,snapshot,and,returns,an,link,intermediate,compatibility,result,of,the,serializers,of,this,preexisting,registered,subclasses;private,static,t,intermediate,compatibility,result,t,get,compatibility,of,pre,existing,registered,subclasses,pojo,serializer,t,new,pojo,serializer,linked,optional,map,class,type,serializer,snapshot,registered,subclass,serializer,snapshots,final,linked,hash,map,class,type,serializer,snapshot,unwrapped,serializer,snapshots,registered,subclass,serializer,snapshots,unwrap,optionals,final,array,list,type,serializer,snapshot,associated,subclass,serializer,snapshots,new,array,list,final,array,list,type,serializer,associated,new,subclass,serializers,new,array,list,final,linked,hash,map,class,type,serializer,new,subclass,serializer,registry,new,pojo,serializer,get,bundled,subclass,serializer,registry,for,map,entry,class,type,serializer,snapshot,entry,unwrapped,serializer,snapshots,entry,set,type,serializer,new,registered,serializer,new,subclass,serializer,registry,get,entry,get,key,if,new,registered,serializer,null,associated,subclass,serializer,snapshots,add,entry,get,value,associated,new,subclass,serializers,add,new,registered,serializer,return,composite,type,serializer,util,construct,intermediate,compatibility,result,associated,new,subclass,serializers,to,array,new,type,serializer,associated,new,subclass,serializers,size,associated,subclass,serializer,snapshots,to,array,new,type,serializer,snapshot,associated,subclass,serializer,snapshots,size
PojoSerializerSnapshot -> private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingRegisteredSubclasses( 			PojoSerializer<T> newPojoSerializer, 			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots);1550821418;Finds which registered subclasses exists both in the new {@link PojoSerializer} as well as in the previous one_(represented by this snapshot), and returns an {@link IntermediateCompatibilityResult}_of the serializers of this preexisting registered subclasses.;private static <T> IntermediateCompatibilityResult<T> getCompatibilityOfPreExistingRegisteredSubclasses(_			PojoSerializer<T> newPojoSerializer,_			LinkedOptionalMap<Class<?>, TypeSerializerSnapshot<?>> registeredSubclassSerializerSnapshots) {__		final LinkedHashMap<Class<?>, TypeSerializerSnapshot<?>> unwrappedSerializerSnapshots = registeredSubclassSerializerSnapshots.unwrapOptionals()___		final ArrayList<TypeSerializerSnapshot<?>> associatedSubclassSerializerSnapshots = new ArrayList<>()__		final ArrayList<TypeSerializer<?>> associatedNewSubclassSerializers = new ArrayList<>()___		final LinkedHashMap<Class<?>, TypeSerializer<?>> newSubclassSerializerRegistry = newPojoSerializer.getBundledSubclassSerializerRegistry()___		for (Map.Entry<Class<?>, TypeSerializerSnapshot<?>> entry : unwrappedSerializerSnapshots.entrySet()) {_			TypeSerializer<?> newRegisteredSerializer = newSubclassSerializerRegistry.get(entry.getKey())__			if (newRegisteredSerializer != null) {_				associatedSubclassSerializerSnapshots.add(entry.getValue())__				associatedNewSubclassSerializers.add(newRegisteredSerializer)__			}_		}__		return CompositeTypeSerializerUtil.constructIntermediateCompatibilityResult(_			associatedNewSubclassSerializers.toArray(new TypeSerializer<?>[associatedNewSubclassSerializers.size()]),_			associatedSubclassSerializerSnapshots.toArray(new TypeSerializerSnapshot<?>[associatedSubclassSerializerSnapshots.size()]))__	};finds,which,registered,subclasses,exists,both,in,the,new,link,pojo,serializer,as,well,as,in,the,previous,one,represented,by,this,snapshot,and,returns,an,link,intermediate,compatibility,result,of,the,serializers,of,this,preexisting,registered,subclasses;private,static,t,intermediate,compatibility,result,t,get,compatibility,of,pre,existing,registered,subclasses,pojo,serializer,t,new,pojo,serializer,linked,optional,map,class,type,serializer,snapshot,registered,subclass,serializer,snapshots,final,linked,hash,map,class,type,serializer,snapshot,unwrapped,serializer,snapshots,registered,subclass,serializer,snapshots,unwrap,optionals,final,array,list,type,serializer,snapshot,associated,subclass,serializer,snapshots,new,array,list,final,array,list,type,serializer,associated,new,subclass,serializers,new,array,list,final,linked,hash,map,class,type,serializer,new,subclass,serializer,registry,new,pojo,serializer,get,bundled,subclass,serializer,registry,for,map,entry,class,type,serializer,snapshot,entry,unwrapped,serializer,snapshots,entry,set,type,serializer,new,registered,serializer,new,subclass,serializer,registry,get,entry,get,key,if,new,registered,serializer,null,associated,subclass,serializer,snapshots,add,entry,get,value,associated,new,subclass,serializers,add,new,registered,serializer,return,composite,type,serializer,util,construct,intermediate,compatibility,result,associated,new,subclass,serializers,to,array,new,type,serializer,associated,new,subclass,serializers,size,associated,subclass,serializer,snapshots,to,array,new,type,serializer,snapshot,associated,subclass,serializer,snapshots,size
