# id;timestamp;commentText;codeText;commentWords;codeWords
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1492761311;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		final File p2f = pathToFile(f)___		if(p2f.isDirectory()) {_			return true__		}__		final Path parent = f.getParent()__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,final,file,p2f,path,to,file,f,if,p2f,is,directory,return,true,final,path,parent,f,get,parent,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1492761311;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		final File p2f = pathToFile(f)___		if(p2f.isDirectory()) {_			return true__		}__		final Path parent = f.getParent()__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,final,file,p2f,path,to,file,f,if,p2f,is,directory,return,true,final,path,parent,f,get,parent,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1507223685;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		final File p2f = pathToFile(f)___		if(p2f.isDirectory()) {_			return true__		}__		final Path parent = f.getParent()__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,final,file,p2f,path,to,file,f,if,p2f,is,directory,return,true,final,path,parent,f,get,parent,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1507281370;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		final File p2f = pathToFile(f)___		if(p2f.isDirectory()) {_			return true__		}__		final Path parent = f.getParent()__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,final,file,p2f,path,to,file,f,if,p2f,is,directory,return,true,final,path,parent,f,get,parent,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1510933709;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		final File p2f = pathToFile(f)___		if(p2f.isDirectory()) {_			return true__		}__		final Path parent = f.getParent()__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,final,file,p2f,path,to,file,f,if,p2f,is,directory,return,true,final,path,parent,f,get,parent,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1512410190;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		final File p2f = pathToFile(f)___		if (p2f.isDirectory()) {_			return true__		}__		final Path parent = f.getParent()__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,final,file,p2f,path,to,file,f,if,p2f,is,directory,return,true,final,path,parent,f,get,parent,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1515177486;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		checkNotNull(f, "path is null")__		return mkdirsInternal(pathToFile(f))__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,check,not,null,f,path,is,null,return,mkdirs,internal,path,to,file,f
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1515177486;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		checkNotNull(f, "path is null")__		return mkdirsInternal(pathToFile(f))__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,check,not,null,f,path,is,null,return,mkdirs,internal,path,to,file,f
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1515177486;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		checkNotNull(f, "path is null")__		return mkdirsInternal(pathToFile(f))__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,check,not,null,f,path,is,null,return,mkdirs,internal,path,to,file,f
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1519568061;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		checkNotNull(f, "path is null")__		return mkdirsInternal(pathToFile(f))__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,check,not,null,f,path,is,null,return,mkdirs,internal,path,to,file,f
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1530698526;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		checkNotNull(f, "path is null")__		return mkdirsInternal(pathToFile(f))__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,check,not,null,f,path,is,null,return,mkdirs,internal,path,to,file,f
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1531689536;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		checkNotNull(f, "path is null")__		return mkdirsInternal(pathToFile(f))__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,check,not,null,f,path,is,null,return,mkdirs,internal,path,to,file,f
LocalFileSystem -> @Override 	public boolean mkdirs(final Path f) throws IOException;1542286796;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;@Override_	public boolean mkdirs(final Path f) throws IOException {_		checkNotNull(f, "path is null")__		return mkdirsInternal(pathToFile(f))__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;override,public,boolean,mkdirs,final,path,f,throws,ioexception,check,not,null,f,path,is,null,return,mkdirs,internal,path,to,file,f
LocalFileSystem -> public static LocalFileSystem getSharedInstance();1507281370;Gets the shared instance of this file system.__@return The shared instance of this file system.;public static LocalFileSystem getSharedInstance() {_		return INSTANCE__	};gets,the,shared,instance,of,this,file,system,return,the,shared,instance,of,this,file,system;public,static,local,file,system,get,shared,instance,return,instance
LocalFileSystem -> public static LocalFileSystem getSharedInstance();1510933709;Gets the shared instance of this file system.__@return The shared instance of this file system.;public static LocalFileSystem getSharedInstance() {_		return INSTANCE__	};gets,the,shared,instance,of,this,file,system,return,the,shared,instance,of,this,file,system;public,static,local,file,system,get,shared,instance,return,instance
LocalFileSystem -> public static LocalFileSystem getSharedInstance();1512410190;Gets the shared instance of this file system.__@return The shared instance of this file system.;public static LocalFileSystem getSharedInstance() {_		return INSTANCE__	};gets,the,shared,instance,of,this,file,system,return,the,shared,instance,of,this,file,system;public,static,local,file,system,get,shared,instance,return,instance
LocalFileSystem -> public static LocalFileSystem getSharedInstance();1515177486;Gets the shared instance of this file system.__@return The shared instance of this file system.;public static LocalFileSystem getSharedInstance() {_		return INSTANCE__	};gets,the,shared,instance,of,this,file,system,return,the,shared,instance,of,this,file,system;public,static,local,file,system,get,shared,instance,return,instance
LocalFileSystem -> public static LocalFileSystem getSharedInstance();1515177486;Gets the shared instance of this file system.__@return The shared instance of this file system.;public static LocalFileSystem getSharedInstance() {_		return INSTANCE__	};gets,the,shared,instance,of,this,file,system,return,the,shared,instance,of,this,file,system;public,static,local,file,system,get,shared,instance,return,instance
LocalFileSystem -> public static LocalFileSystem getSharedInstance();1515177486;Gets the shared instance of this file system.__@return The shared instance of this file system.;public static LocalFileSystem getSharedInstance() {_		return INSTANCE__	};gets,the,shared,instance,of,this,file,system,return,the,shared,instance,of,this,file,system;public,static,local,file,system,get,shared,instance,return,instance
LocalFileSystem -> public static LocalFileSystem getSharedInstance();1519568061;Gets the shared instance of this file system.__@return The shared instance of this file system.;public static LocalFileSystem getSharedInstance() {_		return INSTANCE__	};gets,the,shared,instance,of,this,file,system,return,the,shared,instance,of,this,file,system;public,static,local,file,system,get,shared,instance,return,instance
LocalFileSystem -> public static LocalFileSystem getSharedInstance();1530698526;Gets the shared instance of this file system.__@return The shared instance of this file system.;public static LocalFileSystem getSharedInstance() {_		return INSTANCE__	};gets,the,shared,instance,of,this,file,system,return,the,shared,instance,of,this,file,system;public,static,local,file,system,get,shared,instance,return,instance
LocalFileSystem -> public static LocalFileSystem getSharedInstance();1531689536;Gets the shared instance of this file system.__@return The shared instance of this file system.;public static LocalFileSystem getSharedInstance() {_		return INSTANCE__	};gets,the,shared,instance,of,this,file,system,return,the,shared,instance,of,this,file,system;public,static,local,file,system,get,shared,instance,return,instance
LocalFileSystem -> public static LocalFileSystem getSharedInstance();1542286796;Gets the shared instance of this file system.__@return The shared instance of this file system.;public static LocalFileSystem getSharedInstance() {_		return INSTANCE__	};gets,the,shared,instance,of,this,file,system,return,the,shared,instance,of,this,file,system;public,static,local,file,system,get,shared,instance,return,instance
LocalFileSystem -> public LocalFileSystem();1405024514;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this)___		String tmp = "unknownHost"___		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error(e)__		}__		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1405090423;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this)___		String tmp = "unknownHost"___		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error(e)__		}__		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1409911022;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this)___		String tmp = "unknownHost"___		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}__		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1411473593;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this)___		String tmp = "unknownHost"___		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}__		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1415031057;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this)___		String tmp = "unknownHost"___		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}__		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1416482279;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this)___		String tmp = "unknownHost"___		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}__		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1424860683;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this)___		String tmp = "unknownHost"___		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}__		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1432679948;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this)___		String tmp = "unknownHost"___		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}__		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1455479358;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this)___		String tmp = "unknownHost"___		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}__		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1481543151;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this)___		String tmp = "unknownHost"___		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}__		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1481715812;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this).toString()__		this.homeDir = new Path(System.getProperty("user.home")).toString()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,to,string,this,home,dir,new,path,system,get,property,user,home,to,string,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1487548884;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this).toString()__		this.homeDir = new Path(System.getProperty("user.home")).toString()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,to,string,this,home,dir,new,path,system,get,property,user,home,to,string,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1492761311;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this).toString()__		this.homeDir = new Path(System.getProperty("user.home")).toString()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,to,string,this,home,dir,new,path,system,get,property,user,home,to,string,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1492761311;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this).toString()__		this.homeDir = new Path(System.getProperty("user.home")).toString()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,to,string,this,home,dir,new,path,system,get,property,user,home,to,string,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1507223685;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this).toString()__		this.homeDir = new Path(System.getProperty("user.home")).toString()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,to,string,this,home,dir,new,path,system,get,property,user,home,to,string,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1507281370;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this).toString()__		this.homeDir = new Path(System.getProperty("user.home")).toString()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,to,string,this,home,dir,new,path,system,get,property,user,home,to,string,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1510933709;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this).toString()__		this.homeDir = new Path(System.getProperty("user.home")).toString()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,to,string,this,home,dir,new,path,system,get,property,user,home,to,string,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1512410190;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new Path(System.getProperty("user.dir")).makeQualified(this).toString()__		this.homeDir = new Path(System.getProperty("user.home")).toString()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,path,system,get,property,user,dir,make,qualified,this,to,string,this,home,dir,new,path,system,get,property,user,home,to,string,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1515177486;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new File(System.getProperty("user.dir")).toURI()__		this.homeDir = new File(System.getProperty("user.home")).toURI()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,file,system,get,property,user,dir,to,uri,this,home,dir,new,file,system,get,property,user,home,to,uri,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1515177486;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new File(System.getProperty("user.dir")).toURI()__		this.homeDir = new File(System.getProperty("user.home")).toURI()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,file,system,get,property,user,dir,to,uri,this,home,dir,new,file,system,get,property,user,home,to,uri,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1515177486;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new File(System.getProperty("user.dir")).toURI()__		this.homeDir = new File(System.getProperty("user.home")).toURI()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,file,system,get,property,user,dir,to,uri,this,home,dir,new,file,system,get,property,user,home,to,uri,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1519568061;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new File(System.getProperty("user.dir")).toURI()__		this.homeDir = new File(System.getProperty("user.home")).toURI()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,file,system,get,property,user,dir,to,uri,this,home,dir,new,file,system,get,property,user,home,to,uri,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1530698526;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new File(System.getProperty("user.dir")).toURI()__		this.homeDir = new File(System.getProperty("user.home")).toURI()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,file,system,get,property,user,dir,to,uri,this,home,dir,new,file,system,get,property,user,home,to,uri,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1531689536;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new File(System.getProperty("user.dir")).toURI()__		this.homeDir = new File(System.getProperty("user.home")).toURI()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,file,system,get,property,user,dir,to,uri,this,home,dir,new,file,system,get,property,user,home,to,uri,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public LocalFileSystem();1542286796;Constructs a new <code>LocalFileSystem</code> object.;public LocalFileSystem() {_		this.workingDir = new File(System.getProperty("user.dir")).toURI()__		this.homeDir = new File(System.getProperty("user.home")).toURI()___		String tmp = "unknownHost"__		try {_			tmp = InetAddress.getLocalHost().getHostName()__		} catch (UnknownHostException e) {_			LOG.error("Could not resolve local host", e)__		}_		this.hostName = tmp__	};constructs,a,new,code,local,file,system,code,object;public,local,file,system,this,working,dir,new,file,system,get,property,user,dir,to,uri,this,home,dir,new,file,system,get,property,user,home,to,uri,string,tmp,unknown,host,try,tmp,inet,address,get,local,host,get,host,name,catch,unknown,host,exception,e,log,error,could,not,resolve,local,host,e,this,host,name,tmp
LocalFileSystem -> public static URI getLocalFsURI();1507223685;Gets the URI that represents the local file system._That URI is {@code "file:/"} on Windows platforms and {@code "file:///"} on other_UNIX family platforms.__@return The URI that represents the local file system.;public static URI getLocalFsURI() {_		return uri__	};gets,the,uri,that,represents,the,local,file,system,that,uri,is,code,file,on,windows,platforms,and,code,file,on,other,unix,family,platforms,return,the,uri,that,represents,the,local,file,system;public,static,uri,get,local,fs,uri,return,uri
LocalFileSystem -> public static URI getLocalFsURI();1507281370;Gets the URI that represents the local file system._That URI is {@code "file:/"} on Windows platforms and {@code "file:///"} on other_UNIX family platforms.__@return The URI that represents the local file system.;public static URI getLocalFsURI() {_		return LOCAL_URI__	};gets,the,uri,that,represents,the,local,file,system,that,uri,is,code,file,on,windows,platforms,and,code,file,on,other,unix,family,platforms,return,the,uri,that,represents,the,local,file,system;public,static,uri,get,local,fs,uri,return
LocalFileSystem -> public static URI getLocalFsURI();1510933709;Gets the URI that represents the local file system._That URI is {@code "file:/"} on Windows platforms and {@code "file:///"} on other_UNIX family platforms.__@return The URI that represents the local file system.;public static URI getLocalFsURI() {_		return LOCAL_URI__	};gets,the,uri,that,represents,the,local,file,system,that,uri,is,code,file,on,windows,platforms,and,code,file,on,other,unix,family,platforms,return,the,uri,that,represents,the,local,file,system;public,static,uri,get,local,fs,uri,return
LocalFileSystem -> public static URI getLocalFsURI();1512410190;Gets the URI that represents the local file system._That URI is {@code "file:/"} on Windows platforms and {@code "file:///"} on other_UNIX family platforms.__@return The URI that represents the local file system.;public static URI getLocalFsURI() {_		return LOCAL_URI__	};gets,the,uri,that,represents,the,local,file,system,that,uri,is,code,file,on,windows,platforms,and,code,file,on,other,unix,family,platforms,return,the,uri,that,represents,the,local,file,system;public,static,uri,get,local,fs,uri,return
LocalFileSystem -> public static URI getLocalFsURI();1515177486;Gets the URI that represents the local file system._That URI is {@code "file:/"} on Windows platforms and {@code "file:///"} on other_UNIX family platforms.__@return The URI that represents the local file system.;public static URI getLocalFsURI() {_		return LOCAL_URI__	};gets,the,uri,that,represents,the,local,file,system,that,uri,is,code,file,on,windows,platforms,and,code,file,on,other,unix,family,platforms,return,the,uri,that,represents,the,local,file,system;public,static,uri,get,local,fs,uri,return
LocalFileSystem -> public static URI getLocalFsURI();1515177486;Gets the URI that represents the local file system._That URI is {@code "file:/"} on Windows platforms and {@code "file:///"} on other_UNIX family platforms.__@return The URI that represents the local file system.;public static URI getLocalFsURI() {_		return LOCAL_URI__	};gets,the,uri,that,represents,the,local,file,system,that,uri,is,code,file,on,windows,platforms,and,code,file,on,other,unix,family,platforms,return,the,uri,that,represents,the,local,file,system;public,static,uri,get,local,fs,uri,return
LocalFileSystem -> public static URI getLocalFsURI();1515177486;Gets the URI that represents the local file system._That URI is {@code "file:/"} on Windows platforms and {@code "file:///"} on other_UNIX family platforms.__@return The URI that represents the local file system.;public static URI getLocalFsURI() {_		return LOCAL_URI__	};gets,the,uri,that,represents,the,local,file,system,that,uri,is,code,file,on,windows,platforms,and,code,file,on,other,unix,family,platforms,return,the,uri,that,represents,the,local,file,system;public,static,uri,get,local,fs,uri,return
LocalFileSystem -> public static URI getLocalFsURI();1519568061;Gets the URI that represents the local file system._That URI is {@code "file:/"} on Windows platforms and {@code "file:///"} on other_UNIX family platforms.__@return The URI that represents the local file system.;public static URI getLocalFsURI() {_		return LOCAL_URI__	};gets,the,uri,that,represents,the,local,file,system,that,uri,is,code,file,on,windows,platforms,and,code,file,on,other,unix,family,platforms,return,the,uri,that,represents,the,local,file,system;public,static,uri,get,local,fs,uri,return
LocalFileSystem -> public static URI getLocalFsURI();1530698526;Gets the URI that represents the local file system._That URI is {@code "file:/"} on Windows platforms and {@code "file:///"} on other_UNIX family platforms.__@return The URI that represents the local file system.;public static URI getLocalFsURI() {_		return LOCAL_URI__	};gets,the,uri,that,represents,the,local,file,system,that,uri,is,code,file,on,windows,platforms,and,code,file,on,other,unix,family,platforms,return,the,uri,that,represents,the,local,file,system;public,static,uri,get,local,fs,uri,return
LocalFileSystem -> public static URI getLocalFsURI();1531689536;Gets the URI that represents the local file system._That URI is {@code "file:/"} on Windows platforms and {@code "file:///"} on other_UNIX family platforms.__@return The URI that represents the local file system.;public static URI getLocalFsURI() {_		return LOCAL_URI__	};gets,the,uri,that,represents,the,local,file,system,that,uri,is,code,file,on,windows,platforms,and,code,file,on,other,unix,family,platforms,return,the,uri,that,represents,the,local,file,system;public,static,uri,get,local,fs,uri,return
LocalFileSystem -> public static URI getLocalFsURI();1542286796;Gets the URI that represents the local file system._That URI is {@code "file:/"} on Windows platforms and {@code "file:///"} on other_UNIX family platforms.__@return The URI that represents the local file system.;public static URI getLocalFsURI() {_		return LOCAL_URI__	};gets,the,uri,that,represents,the,local,file,system,that,uri,is,code,file,on,windows,platforms,and,code,file,on,other,unix,family,platforms,return,the,uri,that,represents,the,local,file,system;public,static,uri,get,local,fs,uri,return
LocalFileSystem -> public File pathToFile(Path path);1531689536;Converts the given Path to a File for this file system.__<p>If the path is not absolute, it is interpreted relative to this FileSystem's working directory.;public File pathToFile(Path path) {_		if (!path.isAbsolute()) {_			path = new Path(getWorkingDirectory(), path)__		}_		return new File(path.toUri().getPath())__	};converts,the,given,path,to,a,file,for,this,file,system,p,if,the,path,is,not,absolute,it,is,interpreted,relative,to,this,file,system,s,working,directory;public,file,path,to,file,path,path,if,path,is,absolute,path,new,path,get,working,directory,path,return,new,file,path,to,uri,get,path
LocalFileSystem -> public File pathToFile(Path path);1542286796;Converts the given Path to a File for this file system.__<p>If the path is not absolute, it is interpreted relative to this FileSystem's working directory.;public File pathToFile(Path path) {_		if (!path.isAbsolute()) {_			path = new Path(getWorkingDirectory(), path)__		}_		return new File(path.toUri().getPath())__	};converts,the,given,path,to,a,file,for,this,file,system,p,if,the,path,is,not,absolute,it,is,interpreted,relative,to,this,file,system,s,working,directory;public,file,path,to,file,path,path,if,path,is,absolute,path,new,path,get,working,directory,path,return,new,file,path,to,uri,get,path
LocalFileSystem -> private boolean delete(final File f) throws IOException;1405024514;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {__			final File[] files = f.listFiles()__			for (int i = 0_ i < files.length_ i++) {_				final boolean del = delete(files[i])__				if (del == false) {_					return false__				}_			}__		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,int,i,0,i,files,length,i,final,boolean,del,delete,files,i,if,del,false,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1405090423;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {__			final File[] files = f.listFiles()__			for (int i = 0_ i < files.length_ i++) {_				final boolean del = delete(files[i])__				if (del == false) {_					return false__				}_			}__		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,int,i,0,i,files,length,i,final,boolean,del,delete,files,i,if,del,false,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1409911022;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {__			final File[] files = f.listFiles()__			for (int i = 0_ i < files.length_ i++) {_				final boolean del = delete(files[i])__				if (del == false) {_					return false__				}_			}__		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,int,i,0,i,files,length,i,final,boolean,del,delete,files,i,if,del,false,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1411473593;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {__			final File[] files = f.listFiles()__			for (int i = 0_ i < files.length_ i++) {_				final boolean del = delete(files[i])__				if (del == false) {_					return false__				}_			}__		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,int,i,0,i,files,length,i,final,boolean,del,delete,files,i,if,del,false,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1415031057;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {__			final File[] files = f.listFiles()__			for (int i = 0_ i < files.length_ i++) {_				final boolean del = delete(files[i])__				if (del == false) {_					return false__				}_			}__		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,int,i,0,i,files,length,i,final,boolean,del,delete,files,i,if,del,false,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1416482279;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {__			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}__		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1424860683;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {__			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}__		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1432679948;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {__			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}__		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1455479358;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {__			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}__		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1481543151;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {__			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}__		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1481715812;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1487548884;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1492761311;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1492761311;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1507223685;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1507281370;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1510933709;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1512410190;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1515177486;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1515177486;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1515177486;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			for (File file : files) {_				final boolean del = delete(file)__				if (!del) {_					return false__				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1519568061;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			if (files != null) {_				for (File file : files) {_					final boolean del = delete(file)__					if (!del) {_						return false__					}_				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,if,files,null,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1530698526;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			if (files != null) {_				for (File file : files) {_					final boolean del = delete(file)__					if (!del) {_						return false__					}_				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,if,files,null,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1531689536;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			if (files != null) {_				for (File file : files) {_					final boolean del = delete(file)__					if (!del) {_						return false__					}_				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,if,files,null,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> private boolean delete(final File f) throws IOException;1542286796;Deletes the given file or directory.__@param f_the file to be deleted_@return <code>true</code> if all files were deleted successfully, <code>false</code> otherwise_@throws IOException_thrown if an error occurred while deleting the files/directories;private boolean delete(final File f) throws IOException {__		if (f.isDirectory()) {_			final File[] files = f.listFiles()__			if (files != null) {_				for (File file : files) {_					final boolean del = delete(file)__					if (!del) {_						return false__					}_				}_			}_		} else {_			return f.delete()__		}__		_		return f.delete()__	};deletes,the,given,file,or,directory,param,f,the,file,to,be,deleted,return,code,true,code,if,all,files,were,deleted,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,deleting,the,files,directories;private,boolean,delete,final,file,f,throws,ioexception,if,f,is,directory,final,file,files,f,list,files,if,files,null,for,file,file,files,final,boolean,del,delete,file,if,del,return,false,else,return,f,delete,return,f,delete
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1405024514;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {__		final Path parent = f.getParent()__		final File p2f = pathToFile(f)__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,path,parent,f,get,parent,final,file,p2f,path,to,file,f,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1405090423;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {__		final Path parent = f.getParent()__		final File p2f = pathToFile(f)__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,path,parent,f,get,parent,final,file,p2f,path,to,file,f,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1409911022;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {__		final Path parent = f.getParent()__		final File p2f = pathToFile(f)__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,path,parent,f,get,parent,final,file,p2f,path,to,file,f,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1411473593;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {__		final Path parent = f.getParent()__		final File p2f = pathToFile(f)__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,path,parent,f,get,parent,final,file,p2f,path,to,file,f,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1415031057;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {__		final Path parent = f.getParent()__		final File p2f = pathToFile(f)__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,path,parent,f,get,parent,final,file,p2f,path,to,file,f,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1416482279;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {__		final Path parent = f.getParent()__		final File p2f = pathToFile(f)__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,path,parent,f,get,parent,final,file,p2f,path,to,file,f,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1424860683;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {__		final Path parent = f.getParent()__		final File p2f = pathToFile(f)__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,path,parent,f,get,parent,final,file,p2f,path,to,file,f,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1432679948;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {__		final File p2f = pathToFile(f)___		if(p2f.isDirectory()) {_			return true__		}__		final Path parent = f.getParent()__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,file,p2f,path,to,file,f,if,p2f,is,directory,return,true,final,path,parent,f,get,parent,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1455479358;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {__		final File p2f = pathToFile(f)___		if(p2f.isDirectory()) {_			return true__		}__		final Path parent = f.getParent()__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,file,p2f,path,to,file,f,if,p2f,is,directory,return,true,final,path,parent,f,get,parent,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1481543151;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {__		final File p2f = pathToFile(f)___		if(p2f.isDirectory()) {_			return true__		}__		final Path parent = f.getParent()__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,file,p2f,path,to,file,f,if,p2f,is,directory,return,true,final,path,parent,f,get,parent,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1481715812;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {_		final File p2f = pathToFile(f)___		if(p2f.isDirectory()) {_			return true__		}__		final Path parent = f.getParent()__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,file,p2f,path,to,file,f,if,p2f,is,directory,return,true,final,path,parent,f,get,parent,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
LocalFileSystem -> public boolean mkdirs(final Path f) throws IOException;1487548884;Recursively creates the directory specified by the provided path.__@return <code>true</code>if the directories either already existed or have been created successfully,_<code>false</code> otherwise_@throws IOException_thrown if an error occurred while creating the directory/directories;public boolean mkdirs(final Path f) throws IOException {_		final File p2f = pathToFile(f)___		if(p2f.isDirectory()) {_			return true__		}__		final Path parent = f.getParent()__		return (parent == null || mkdirs(parent)) && (p2f.mkdir() || p2f.isDirectory())__	};recursively,creates,the,directory,specified,by,the,provided,path,return,code,true,code,if,the,directories,either,already,existed,or,have,been,created,successfully,code,false,code,otherwise,throws,ioexception,thrown,if,an,error,occurred,while,creating,the,directory,directories;public,boolean,mkdirs,final,path,f,throws,ioexception,final,file,p2f,path,to,file,f,if,p2f,is,directory,return,true,final,path,parent,f,get,parent,return,parent,null,mkdirs,parent,p2f,mkdir,p2f,is,directory
