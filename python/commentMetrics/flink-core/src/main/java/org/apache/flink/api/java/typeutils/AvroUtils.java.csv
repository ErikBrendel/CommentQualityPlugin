# id;timestamp;commentText;codeText;commentWords;codeWords
AvroUtils -> public abstract void addAvroSerializersIfRequired(ExecutionConfig reg, Class<?> type)_;1509723634;Loads the utility class from <code>flink-avro</code> and adds Avro-specific serializers. This_method will throw an exception if we see an Avro type but flink-avro is not in the classpath.;public abstract void addAvroSerializersIfRequired(ExecutionConfig reg, Class<?> type)_;loads,the,utility,class,from,code,flink,avro,code,and,adds,avro,specific,serializers,this,method,will,throw,an,exception,if,we,see,an,avro,type,but,flink,avro,is,not,in,the,classpath;public,abstract,void,add,avro,serializers,if,required,execution,config,reg,class,type
AvroUtils -> public abstract void addAvroSerializersIfRequired(ExecutionConfig reg, Class<?> type)_;1509723635;Loads the utility class from <code>flink-avro</code> and adds Avro-specific serializers. This_method will throw an exception if we see an Avro type but flink-avro is not in the classpath.;public abstract void addAvroSerializersIfRequired(ExecutionConfig reg, Class<?> type)_;loads,the,utility,class,from,code,flink,avro,code,and,adds,avro,specific,serializers,this,method,will,throw,an,exception,if,we,see,an,avro,type,but,flink,avro,is,not,in,the,classpath;public,abstract,void,add,avro,serializers,if,required,execution,config,reg,class,type
AvroUtils -> public abstract void addAvroSerializersIfRequired(ExecutionConfig reg, Class<?> type)_;1512489182;Loads the utility class from <code>flink-avro</code> and adds Avro-specific serializers. This_method will throw an exception if we see an Avro type but flink-avro is not in the classpath.;public abstract void addAvroSerializersIfRequired(ExecutionConfig reg, Class<?> type)_;loads,the,utility,class,from,code,flink,avro,code,and,adds,avro,specific,serializers,this,method,will,throw,an,exception,if,we,see,an,avro,type,but,flink,avro,is,not,in,the,classpath;public,abstract,void,add,avro,serializers,if,required,execution,config,reg,class,type
AvroUtils -> public abstract <T> TypeSerializer<T> createAvroSerializer(Class<T> type)_;1509723634;Creates an {@code AvroSerializer} if flink-avro is present, otherwise throws an exception.;public abstract <T> TypeSerializer<T> createAvroSerializer(Class<T> type)_;creates,an,code,avro,serializer,if,flink,avro,is,present,otherwise,throws,an,exception;public,abstract,t,type,serializer,t,create,avro,serializer,class,t,type
AvroUtils -> public abstract <T> TypeSerializer<T> createAvroSerializer(Class<T> type)_;1509723635;Creates an {@code AvroSerializer} if flink-avro is present, otherwise throws an exception.;public abstract <T> TypeSerializer<T> createAvroSerializer(Class<T> type)_;creates,an,code,avro,serializer,if,flink,avro,is,present,otherwise,throws,an,exception;public,abstract,t,type,serializer,t,create,avro,serializer,class,t,type
AvroUtils -> public abstract <T> TypeSerializer<T> createAvroSerializer(Class<T> type)_;1512489182;Creates an {@code AvroSerializer} if flink-avro is present, otherwise throws an exception.;public abstract <T> TypeSerializer<T> createAvroSerializer(Class<T> type)_;creates,an,code,avro,serializer,if,flink,avro,is,present,otherwise,throws,an,exception;public,abstract,t,type,serializer,t,create,avro,serializer,class,t,type
AvroUtils -> public static AvroUtils getAvroUtils();1509723634;Returns either the default {@link AvroUtils} which throw an exception in cases where Avro_would be needed or loads the specific utils for Avro from flink-avro.;public static AvroUtils getAvroUtils() {__		_		Class<?> clazz__		try {_			clazz = Class.forName(AVRO_KRYO_UTILS, false, AvroUtils.class.getClassLoader())__		} catch (ClassNotFoundException e) {_			_			return new DefaultAvroUtils()__		}__		try {_			return (AvroUtils) clazz.getConstructor().newInstance()__		} catch (Exception e) {_			throw new RuntimeException("Could not instantiate " + AVRO_KRYO_UTILS + ".")__		}_	};returns,either,the,default,link,avro,utils,which,throw,an,exception,in,cases,where,avro,would,be,needed,or,loads,the,specific,utils,for,avro,from,flink,avro;public,static,avro,utils,get,avro,utils,class,clazz,try,clazz,class,for,name,false,avro,utils,class,get,class,loader,catch,class,not,found,exception,e,return,new,default,avro,utils,try,return,avro,utils,clazz,get,constructor,new,instance,catch,exception,e,throw,new,runtime,exception,could,not,instantiate
AvroUtils -> public static AvroUtils getAvroUtils();1509723635;Returns either the default {@link AvroUtils} which throw an exception in cases where Avro_would be needed or loads the specific utils for Avro from flink-avro.;public static AvroUtils getAvroUtils() {_		return INSTANCE__	};returns,either,the,default,link,avro,utils,which,throw,an,exception,in,cases,where,avro,would,be,needed,or,loads,the,specific,utils,for,avro,from,flink,avro;public,static,avro,utils,get,avro,utils,return,instance
AvroUtils -> public static AvroUtils getAvroUtils();1512489182;Returns either the default {@link AvroUtils} which throw an exception in cases where Avro_would be needed or loads the specific utils for Avro from flink-avro.;public static AvroUtils getAvroUtils() {_		_		try {_			Class<?> clazz = Class.forName(AVRO_KRYO_UTILS, false, Thread.currentThread().getContextClassLoader())__			return clazz.asSubclass(AvroUtils.class).getConstructor().newInstance()__		} catch (ClassNotFoundException e) {_			_			return new DefaultAvroUtils()__		} catch (Exception e) {_			throw new RuntimeException("Could not instantiate " + AVRO_KRYO_UTILS + ".", e)__		}_	};returns,either,the,default,link,avro,utils,which,throw,an,exception,in,cases,where,avro,would,be,needed,or,loads,the,specific,utils,for,avro,from,flink,avro;public,static,avro,utils,get,avro,utils,try,class,clazz,class,for,name,false,thread,current,thread,get,context,class,loader,return,clazz,as,subclass,avro,utils,class,get,constructor,new,instance,catch,class,not,found,exception,e,return,new,default,avro,utils,catch,exception,e,throw,new,runtime,exception,could,not,instantiate,e
AvroUtils -> public abstract <T> TypeInformation<T> createAvroTypeInfo(Class<T> type)_;1509723634;Creates an {@code AvroTypeInfo} if flink-avro is present, otherwise throws an exception.;public abstract <T> TypeInformation<T> createAvroTypeInfo(Class<T> type)_;creates,an,code,avro,type,info,if,flink,avro,is,present,otherwise,throws,an,exception;public,abstract,t,type,information,t,create,avro,type,info,class,t,type
AvroUtils -> public abstract <T> TypeInformation<T> createAvroTypeInfo(Class<T> type)_;1509723635;Creates an {@code AvroTypeInfo} if flink-avro is present, otherwise throws an exception.;public abstract <T> TypeInformation<T> createAvroTypeInfo(Class<T> type)_;creates,an,code,avro,type,info,if,flink,avro,is,present,otherwise,throws,an,exception;public,abstract,t,type,information,t,create,avro,type,info,class,t,type
AvroUtils -> public abstract <T> TypeInformation<T> createAvroTypeInfo(Class<T> type)_;1512489182;Creates an {@code AvroTypeInfo} if flink-avro is present, otherwise throws an exception.;public abstract <T> TypeInformation<T> createAvroTypeInfo(Class<T> type)_;creates,an,code,avro,type,info,if,flink,avro,is,present,otherwise,throws,an,exception;public,abstract,t,type,information,t,create,avro,type,info,class,t,type
AvroUtils -> public abstract void addAvroGenericDataArrayRegistration( 			LinkedHashMap<String, 			KryoRegistration> kryoRegistrations)_;1509723634;Registers a special Serializer for GenericData.Array.;public abstract void addAvroGenericDataArrayRegistration(_			LinkedHashMap<String,_			KryoRegistration> kryoRegistrations)_;registers,a,special,serializer,for,generic,data,array;public,abstract,void,add,avro,generic,data,array,registration,linked,hash,map,string,kryo,registration,kryo,registrations
AvroUtils -> public abstract void addAvroGenericDataArrayRegistration( 			LinkedHashMap<String, 			KryoRegistration> kryoRegistrations)_;1509723635;Registers a special Serializer for GenericData.Array.;public abstract void addAvroGenericDataArrayRegistration(_			LinkedHashMap<String,_			KryoRegistration> kryoRegistrations)_;registers,a,special,serializer,for,generic,data,array;public,abstract,void,add,avro,generic,data,array,registration,linked,hash,map,string,kryo,registration,kryo,registrations
AvroUtils -> public abstract void addAvroGenericDataArrayRegistration( 			LinkedHashMap<String, 			KryoRegistration> kryoRegistrations)_;1512489182;Registers a special Serializer for GenericData.Array.;public abstract void addAvroGenericDataArrayRegistration(_			LinkedHashMap<String,_			KryoRegistration> kryoRegistrations)_;registers,a,special,serializer,for,generic,data,array;public,abstract,void,add,avro,generic,data,array,registration,linked,hash,map,string,kryo,registration,kryo,registrations
