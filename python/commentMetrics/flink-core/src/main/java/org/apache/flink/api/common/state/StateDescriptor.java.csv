# id;timestamp;commentText;codeText;commentWords;codeWords
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue);1521729954;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.typeInfo = checkNotNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,type,info,check,not,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue);1521729969;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.typeInfo = checkNotNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,type,info,check,not,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue);1529325710;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.typeInfo = checkNotNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,type,info,check,not,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue);1531419503;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.typeInfo = checkNotNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,type,info,check,not,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue);1531499577;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.typeInfo = checkNotNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,type,info,check,not,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue);1533318024;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.typeInfo = checkNotNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,type,info,check,not,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1454527721;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1455299461;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1455479358;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1456149562;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1460650154;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1461161201;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1470753725;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1472663071;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1481734251;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1484160227;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1485118420;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception_;1487157667;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception_;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public boolean isQueryable();1470753725;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1472663071;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1481734251;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1484160227;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1485118420;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1487157667;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1487636186;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1487865389;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1491417674;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1496332245;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1500837517;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1521628649;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1521729754;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1521729954;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1521729969;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1529325710;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1531419503;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1531499577;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public boolean isQueryable();1533318024;Returns whether the state created from this descriptor is queryable.__@return <code>true</code> if state is queryable, <code>false</code>_otherwise.;public boolean isQueryable() {_		return queryableStateName != null__	};returns,whether,the,state,created,from,this,descriptor,is,queryable,return,code,true,code,if,state,is,queryable,code,false,code,otherwise;public,boolean,is,queryable,return,queryable,state,name,null
StateDescriptor -> public StateDescriptor(String name);1454527671;Create a new {@code StateDescriptor} with the given name._@param name The name of the {@code StateDescriptor}.;public StateDescriptor(String name) {_		this.name = requireNonNull(name)___	};create,a,new,code,state,descriptor,with,the,given,name,param,name,the,name,of,the,code,state,descriptor;public,state,descriptor,string,name,this,name,require,non,null,name
StateDescriptor -> public StateDescriptor(String name);1454527671;Create a new {@code StateDescriptor} with the given name._@param name The name of the {@code StateDescriptor}.;public StateDescriptor(String name) {_		this.name = requireNonNull(name)__	};create,a,new,code,state,descriptor,with,the,given,name,param,name,the,name,of,the,code,state,descriptor;public,state,descriptor,string,name,this,name,require,non,null,name
StateDescriptor -> public String getName();1454527671;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1454527671;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1454527721;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1455299461;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1455479358;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1456149562;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1460650154;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1461161201;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1470753725;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1472663071;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1481734251;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1484160227;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1485118420;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1487157667;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1487636186;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1487865389;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1491417674;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1496332245;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1500837517;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1521628649;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1521729754;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1521729954;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1521729969;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1529325710;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1531419503;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1531499577;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public String getName();1533318024;Returns the name of this {@code StateDescriptor}.;public String getName() {_		return name__	};returns,the,name,of,this,code,state,descriptor;public,string,get,name,return,name
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception _;1454527671;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception _;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public abstract S bind(StateBackend stateBackend) throws Exception _;1454527671;Creates a new {@link State} on the given {@link StateBackend}.__@param stateBackend The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBackend stateBackend) throws Exception _;creates,a,new,link,state,on,the,given,link,state,backend,param,state,backend,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,backend,state,backend,throws,exception
StateDescriptor -> public void enableTimeToLive(StateTtlConfiguration ttlConfig);1531419503;Configures optional activation of state time-to-live (TTL).__<p>State user value will expire, become unavailable and be cleaned up in storage_depending on configured {@link StateTtlConfiguration}.__@param ttlConfig configuration of state TTL;public void enableTimeToLive(StateTtlConfiguration ttlConfig) {_		Preconditions.checkNotNull(ttlConfig)__		Preconditions.checkArgument(queryableStateName == null,_			"Queryable state is currently not supported with TTL")__		this.ttlConfig = ttlConfig__	};configures,optional,activation,of,state,time,to,live,ttl,p,state,user,value,will,expire,become,unavailable,and,be,cleaned,up,in,storage,depending,on,configured,link,state,ttl,configuration,param,ttl,config,configuration,of,state,ttl;public,void,enable,time,to,live,state,ttl,configuration,ttl,config,preconditions,check,not,null,ttl,config,preconditions,check,argument,queryable,state,name,null,queryable,state,is,currently,not,supported,with,ttl,this,ttl,config,ttl,config
StateDescriptor -> public void enableTimeToLive(StateTtlConfiguration ttlConfig);1531499577;Configures optional activation of state time-to-live (TTL).__<p>State user value will expire, become unavailable and be cleaned up in storage_depending on configured {@link StateTtlConfiguration}.__@param ttlConfig configuration of state TTL;public void enableTimeToLive(StateTtlConfiguration ttlConfig) {_		Preconditions.checkNotNull(ttlConfig)__		Preconditions.checkArgument(_			ttlConfig.getTtlUpdateType() != StateTtlConfiguration.TtlUpdateType.Disabled &&_				queryableStateName == null,_			"Queryable state is currently not supported with TTL")__		this.ttlConfig = ttlConfig__	};configures,optional,activation,of,state,time,to,live,ttl,p,state,user,value,will,expire,become,unavailable,and,be,cleaned,up,in,storage,depending,on,configured,link,state,ttl,configuration,param,ttl,config,configuration,of,state,ttl;public,void,enable,time,to,live,state,ttl,configuration,ttl,config,preconditions,check,not,null,ttl,config,preconditions,check,argument,ttl,config,get,ttl,update,type,state,ttl,configuration,ttl,update,type,disabled,queryable,state,name,null,queryable,state,is,currently,not,supported,with,ttl,this,ttl,config,ttl,config
StateDescriptor -> public void setQueryable(String queryableStateName);1470753725;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1472663071;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1481734251;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1484160227;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1485118420;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1487157667;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1487636186;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1487865389;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1491417674;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1496332245;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1500837517;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1521628649;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1521729754;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1521729954;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1521729969;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1529325710;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1531419503;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		Preconditions.checkArgument(ttlConfig == null,_			"Queryable state is currently not supported with TTL")__		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,preconditions,check,argument,ttl,config,null,queryable,state,is,currently,not,supported,with,ttl,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1531499577;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		Preconditions.checkArgument(_			ttlConfig.getTtlUpdateType() == StateTtlConfiguration.TtlUpdateType.Disabled,_			"Queryable state is currently not supported with TTL")__		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,preconditions,check,argument,ttl,config,get,ttl,update,type,state,ttl,configuration,ttl,update,type,disabled,queryable,state,is,currently,not,supported,with,ttl,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public void setQueryable(String queryableStateName);1533318024;Sets the name for queries of state created from this descriptor.__<p>If a name is set, the created state will be published for queries_during runtime. The name needs to be unique per job. If there is another_state instance published under the same name, the job will fail during runtime.__@param queryableStateName State name for queries (unique name per job)_@throws IllegalStateException If queryable state name already set;public void setQueryable(String queryableStateName) {_		Preconditions.checkArgument(_			ttlConfig.getUpdateType() == StateTtlConfig.UpdateType.Disabled,_			"Queryable state is currently not supported with TTL")__		if (this.queryableStateName == null) {_			this.queryableStateName = Preconditions.checkNotNull(queryableStateName, "Registration name")__		} else {_			throw new IllegalStateException("Queryable state name already set")__		}_	};sets,the,name,for,queries,of,state,created,from,this,descriptor,p,if,a,name,is,set,the,created,state,will,be,published,for,queries,during,runtime,the,name,needs,to,be,unique,per,job,if,there,is,another,state,instance,published,under,the,same,name,the,job,will,fail,during,runtime,param,queryable,state,name,state,name,for,queries,unique,name,per,job,throws,illegal,state,exception,if,queryable,state,name,already,set;public,void,set,queryable,string,queryable,state,name,preconditions,check,argument,ttl,config,get,update,type,state,ttl,config,update,type,disabled,queryable,state,is,currently,not,supported,with,ttl,if,this,queryable,state,name,null,this,queryable,state,name,preconditions,check,not,null,queryable,state,name,registration,name,else,throw,new,illegal,state,exception,queryable,state,name,already,set
StateDescriptor -> public boolean isSerializerInitialized();1454527721;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1455299461;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1455479358;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1456149562;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1460650154;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1461161201;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1470753725;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1472663071;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1481734251;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1484160227;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1485118420;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1487157667;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1487636186;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1487865389;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1491417674;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1496332245;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1500837517;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1521628649;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1521729754;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1521729954;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1521729969;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1529325710;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1531419503;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1531499577;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public boolean isSerializerInitialized();1533318024;Checks whether the serializer has been initialized. Serializer initialization is lazy,_to allow parametrization of serializers with an {@link ExecutionConfig} via_{@link #initializeSerializerUnlessSet(ExecutionConfig)}.__@return True if the serializers have been initialized, false otherwise.;public boolean isSerializerInitialized() {_		return serializer != null__	};checks,whether,the,serializer,has,been,initialized,serializer,initialization,is,lazy,to,allow,parametrization,of,serializers,with,an,link,execution,config,via,link,initialize,serializer,unless,set,execution,config,return,true,if,the,serializers,have,been,initialized,false,otherwise;public,boolean,is,serializer,initialized,return,serializer,null
StateDescriptor -> public String getQueryableStateName();1470753725;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1472663071;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1481734251;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1484160227;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1485118420;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1487157667;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1487636186;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1487865389;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1491417674;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1496332245;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1500837517;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1521628649;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public String getQueryableStateName();1521729754;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1454527721;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1455299461;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1455479358;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1456149562;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1460650154;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1461161201;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1470753725;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1472663071;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1481734251;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1484160227;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1485118420;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1487157667;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1487636186;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1487865389;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1491417674;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1496332245;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1500837517;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1521628649;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1521729754;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(executionConfig)__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1521729954;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			checkState(typeInfo != null, "no serializer and no type info")___			_			serializer = typeInfo.createSerializer(executionConfig)___			_			typeInfo  = null__		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,check,state,type,info,null,no,serializer,and,no,type,info,serializer,type,info,create,serializer,execution,config,type,info,null
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1521729969;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			checkState(typeInfo != null, "no serializer and no type info")___			_			serializer = typeInfo.createSerializer(executionConfig)___			_			typeInfo  = null__		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,check,state,type,info,null,no,serializer,and,no,type,info,serializer,type,info,create,serializer,execution,config,type,info,null
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1529325710;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			checkState(typeInfo != null, "no serializer and no type info")___			_			serializer = typeInfo.createSerializer(executionConfig)___			_			typeInfo  = null__		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,check,state,type,info,null,no,serializer,and,no,type,info,serializer,type,info,create,serializer,execution,config,type,info,null
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1531419503;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			checkState(typeInfo != null, "no serializer and no type info")___			_			serializer = typeInfo.createSerializer(executionConfig)___			_			typeInfo  = null__		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,check,state,type,info,null,no,serializer,and,no,type,info,serializer,type,info,create,serializer,execution,config,type,info,null
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1531499577;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			checkState(typeInfo != null, "no serializer and no type info")___			_			serializer = typeInfo.createSerializer(executionConfig)___			_			typeInfo  = null__		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,check,state,type,info,null,no,serializer,and,no,type,info,serializer,type,info,create,serializer,execution,config,type,info,null
StateDescriptor -> public void initializeSerializerUnlessSet(ExecutionConfig executionConfig);1533318024;Initializes the serializer, unless it has been initialized before.__@param executionConfig The execution config to use when creating the serializer.;public void initializeSerializerUnlessSet(ExecutionConfig executionConfig) {_		if (serializer == null) {_			checkState(typeInfo != null, "no serializer and no type info")___			_			serializer = typeInfo.createSerializer(executionConfig)___			_			typeInfo  = null__		}_	};initializes,the,serializer,unless,it,has,been,initialized,before,param,execution,config,the,execution,config,to,use,when,creating,the,serializer;public,void,initialize,serializer,unless,set,execution,config,execution,config,if,serializer,null,check,state,type,info,null,no,serializer,and,no,type,info,serializer,type,info,create,serializer,execution,config,type,info,null
StateDescriptor -> public abstract S bind(StateBinder stateBinder) throws Exception_;1487636186;Creates a new {@link State} on the given {@link StateBinder}.__@param stateBinder The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBinder stateBinder) throws Exception_;creates,a,new,link,state,on,the,given,link,state,binder,param,state,binder,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,binder,state,binder,throws,exception
StateDescriptor -> public abstract S bind(StateBinder stateBinder) throws Exception_;1487865389;Creates a new {@link State} on the given {@link StateBinder}.__@param stateBinder The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBinder stateBinder) throws Exception_;creates,a,new,link,state,on,the,given,link,state,binder,param,state,binder,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,binder,state,binder,throws,exception
StateDescriptor -> public abstract S bind(StateBinder stateBinder) throws Exception_;1491417674;Creates a new {@link State} on the given {@link StateBinder}.__@param stateBinder The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBinder stateBinder) throws Exception_;creates,a,new,link,state,on,the,given,link,state,binder,param,state,binder,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,binder,state,binder,throws,exception
StateDescriptor -> public abstract S bind(StateBinder stateBinder) throws Exception_;1496332245;Creates a new {@link State} on the given {@link StateBinder}.__@param stateBinder The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBinder stateBinder) throws Exception_;creates,a,new,link,state,on,the,given,link,state,binder,param,state,binder,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,binder,state,binder,throws,exception
StateDescriptor -> public abstract S bind(StateBinder stateBinder) throws Exception_;1500837517;Creates a new {@link State} on the given {@link StateBinder}.__@param stateBinder The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBinder stateBinder) throws Exception_;creates,a,new,link,state,on,the,given,link,state,binder,param,state,binder,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,binder,state,binder,throws,exception
StateDescriptor -> public abstract S bind(StateBinder stateBinder) throws Exception_;1521628649;Creates a new {@link State} on the given {@link StateBinder}.__@param stateBinder The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBinder stateBinder) throws Exception_;creates,a,new,link,state,on,the,given,link,state,binder,param,state,binder,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,binder,state,binder,throws,exception
StateDescriptor -> public abstract S bind(StateBinder stateBinder) throws Exception_;1521729754;Creates a new {@link State} on the given {@link StateBinder}.__@param stateBinder The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBinder stateBinder) throws Exception_;creates,a,new,link,state,on,the,given,link,state,binder,param,state,binder,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,binder,state,binder,throws,exception
StateDescriptor -> public abstract S bind(StateBinder stateBinder) throws Exception_;1521729954;Creates a new {@link State} on the given {@link StateBinder}.__@param stateBinder The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBinder stateBinder) throws Exception_;creates,a,new,link,state,on,the,given,link,state,binder,param,state,binder,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,binder,state,binder,throws,exception
StateDescriptor -> public abstract S bind(StateBinder stateBinder) throws Exception_;1521729969;Creates a new {@link State} on the given {@link StateBinder}.__@param stateBinder The {@code StateBackend} on which to create the {@link State}.;public abstract S bind(StateBinder stateBinder) throws Exception_;creates,a,new,link,state,on,the,given,link,state,binder,param,state,binder,the,code,state,backend,on,which,to,create,the,link,state;public,abstract,s,bind,state,binder,state,binder,throws,exception
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue);1521729954;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.serializer = checkNotNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,serializer,check,not,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue);1521729969;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.serializer = checkNotNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,serializer,check,not,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue);1529325710;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.serializer = checkNotNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,serializer,check,not,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue);1531419503;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.serializer = checkNotNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,serializer,check,not,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue);1531499577;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.serializer = checkNotNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,serializer,check,not,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue);1533318024;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.serializer = checkNotNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,serializer,check,not,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> public T getDefaultValue();1454527721;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1455299461;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1455479358;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1456149562;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1460650154;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1461161201;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1470753725;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1472663071;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1481734251;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1484160227;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1485118420;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1487157667;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1487636186;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1487865389;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1491417674;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1496332245;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1500837517;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1521628649;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1521729754;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1521729954;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1521729969;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1529325710;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1531419503;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1531499577;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public T getDefaultValue();1533318024;Returns the default value.;public T getDefaultValue() {_		if (defaultValue != null) {_			if (serializer != null) {_				return serializer.copy(defaultValue)__			} else {_				throw new IllegalStateException("Serializer not yet initialized.")__			}_		} else {_			return null__		}_	};returns,the,default,value;public,t,get,default,value,if,default,value,null,if,serializer,null,return,serializer,copy,default,value,else,throw,new,illegal,state,exception,serializer,not,yet,initialized,else,return,null
StateDescriptor -> public TypeSerializer<T> getSerializer();1454527721;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1455299461;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1455479358;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1456149562;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1460650154;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1461161201;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1470753725;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1472663071;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1481734251;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1484160227;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1485118420;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1487157667;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1487636186;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1487865389;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1491417674;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1496332245;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer.duplicate()__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,duplicate,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1500837517;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer.duplicate()__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,duplicate,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1521628649;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer.duplicate()__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,duplicate,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1521729754;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer.duplicate()__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,duplicate,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1521729954;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer.duplicate()__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,duplicate,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1521729969;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer.duplicate()__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,duplicate,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1529325710;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer.duplicate()__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,duplicate,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1531419503;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer.duplicate()__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,duplicate,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1531499577;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer.duplicate()__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,duplicate,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> public TypeSerializer<T> getSerializer();1533318024;Returns the {@link TypeSerializer} that can be used to serialize the value in the state._Note that the serializer may initialized lazily and is only guaranteed to exist after_calling {@link #initializeSerializerUnlessSet(ExecutionConfig)}.;public TypeSerializer<T> getSerializer() {_		if (serializer != null) {_			return serializer.duplicate()__		} else {_			throw new IllegalStateException("Serializer not yet initialized.")__		}_	};returns,the,link,type,serializer,that,can,be,used,to,serialize,the,value,in,the,state,note,that,the,serializer,may,initialized,lazily,and,is,only,guaranteed,to,exist,after,calling,link,initialize,serializer,unless,set,execution,config;public,type,serializer,t,get,serializer,if,serializer,null,return,serializer,duplicate,else,throw,new,illegal,state,exception,serializer,not,yet,initialized
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1454527721;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")__		_		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1455299461;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")__		_		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1455479358;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")__		_		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1456149562;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")__		_		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1460650154;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1461161201;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1470753725;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1472663071;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1481734251;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1484160227;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1485118420;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1487157667;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1487636186;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1487865389;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1491417674;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1496332245;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException("Cannot create full type information based on the given class. If the type has generics, please", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,cannot,create,full,type,information,based,on,the,given,class,if,the,type,has,generics,please,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1500837517;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException(_					"Could not create the type information for '" + type.getName() + "'. " +_					"The most common reason is failure to infer the generic type information, due to Java's type erasure. " +_					"In that case, please pass a 'TypeHint' instead of a class to describe the type. " +_					"For example, to describe 'Tuple2<String, String>' as a generic type, use " +_					"'new PravegaDeserializationSchema<>(new TypeHint<Tuple2<String, String>>(){}, serializer)_'", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,could,not,create,the,type,information,for,type,get,name,the,most,common,reason,is,failure,to,infer,the,generic,type,information,due,to,java,s,type,erasure,in,that,case,please,pass,a,type,hint,instead,of,a,class,to,describe,the,type,for,example,to,describe,tuple2,string,string,as,a,generic,type,use,new,pravega,deserialization,schema,new,type,hint,tuple2,string,string,serializer,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1521628649;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		requireNonNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException(_					"Could not create the type information for '" + type.getName() + "'. " +_					"The most common reason is failure to infer the generic type information, due to Java's type erasure. " +_					"In that case, please pass a 'TypeHint' instead of a class to describe the type. " +_					"For example, to describe 'Tuple2<String, String>' as a generic type, use " +_					"'new PravegaDeserializationSchema<>(new TypeHint<Tuple2<String, String>>(){}, serializer)_'", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,require,non,null,name,name,must,not,be,null,require,non,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,could,not,create,the,type,information,for,type,get,name,the,most,common,reason,is,failure,to,infer,the,generic,type,information,due,to,java,s,type,erasure,in,that,case,please,pass,a,type,hint,instead,of,a,class,to,describe,the,type,for,example,to,describe,tuple2,string,string,as,a,generic,type,use,new,pravega,deserialization,schema,new,type,hint,tuple2,string,string,serializer,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, T defaultValue);1521729754;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		checkNotNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException(_					"Could not create the type information for '" + type.getName() + "'. " +_					"The most common reason is failure to infer the generic type information, due to Java's type erasure. " +_					"In that case, please pass a 'TypeHint' instead of a class to describe the type. " +_					"For example, to describe 'Tuple2<String, String>' as a generic type, use " +_					"'new PravegaDeserializationSchema<>(new TypeHint<Tuple2<String, String>>(){}, serializer)_'", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,t,default,value,this,name,check,not,null,name,name,must,not,be,null,check,not,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,could,not,create,the,type,information,for,type,get,name,the,most,common,reason,is,failure,to,infer,the,generic,type,information,due,to,java,s,type,erasure,in,that,case,please,pass,a,type,hint,instead,of,a,class,to,describe,the,type,for,example,to,describe,tuple2,string,string,as,a,generic,type,use,new,pravega,deserialization,schema,new,type,hint,tuple2,string,string,serializer,e,this,default,value,default,value
StateDescriptor -> @Nullable 	public String getQueryableStateName();1521729954;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;@Nullable_	public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;nullable,public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> @Nullable 	public String getQueryableStateName();1521729969;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;@Nullable_	public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;nullable,public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> @Nullable 	public String getQueryableStateName();1529325710;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;@Nullable_	public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;nullable,public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> @Nullable 	public String getQueryableStateName();1531419503;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;@Nullable_	public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;nullable,public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> @Nullable 	public String getQueryableStateName();1531499577;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;@Nullable_	public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;nullable,public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> @Nullable 	public String getQueryableStateName();1533318024;Returns the queryable state name.__@return Queryable state name or <code>null</code> if not set.;@Nullable_	public String getQueryableStateName() {_		return queryableStateName__	};returns,the,queryable,state,name,return,queryable,state,name,or,code,null,code,if,not,set;nullable,public,string,get,queryable,state,name,return,queryable,state,name
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue);1521729954;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		checkNotNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException(_					"Could not create the type information for '" + type.getName() + "'. " +_					"The most common reason is failure to infer the generic type information, due to Java's type erasure. " +_					"In that case, please pass a 'TypeHint' instead of a class to describe the type. " +_					"For example, to describe 'Tuple2<String, String>' as a generic type, use " +_					"'new PravegaDeserializationSchema<>(new TypeHint<Tuple2<String, String>>(){}, serializer)_'", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,check,not,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,could,not,create,the,type,information,for,type,get,name,the,most,common,reason,is,failure,to,infer,the,generic,type,information,due,to,java,s,type,erasure,in,that,case,please,pass,a,type,hint,instead,of,a,class,to,describe,the,type,for,example,to,describe,tuple2,string,string,as,a,generic,type,use,new,pravega,deserialization,schema,new,type,hint,tuple2,string,string,serializer,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue);1521729969;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		checkNotNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException(_					"Could not create the type information for '" + type.getName() + "'. " +_					"The most common reason is failure to infer the generic type information, due to Java's type erasure. " +_					"In that case, please pass a 'TypeHint' instead of a class to describe the type. " +_					"For example, to describe 'Tuple2<String, String>' as a generic type, use " +_					"'new PravegaDeserializationSchema<>(new TypeHint<Tuple2<String, String>>(){}, serializer)_'", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,check,not,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,could,not,create,the,type,information,for,type,get,name,the,most,common,reason,is,failure,to,infer,the,generic,type,information,due,to,java,s,type,erasure,in,that,case,please,pass,a,type,hint,instead,of,a,class,to,describe,the,type,for,example,to,describe,tuple2,string,string,as,a,generic,type,use,new,pravega,deserialization,schema,new,type,hint,tuple2,string,string,serializer,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue);1529325710;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		checkNotNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException(_					"Could not create the type information for '" + type.getName() + "'. " +_					"The most common reason is failure to infer the generic type information, due to Java's type erasure. " +_					"In that case, please pass a 'TypeHint' instead of a class to describe the type. " +_					"For example, to describe 'Tuple2<String, String>' as a generic type, use " +_					"'new PravegaDeserializationSchema<>(new TypeHint<Tuple2<String, String>>(){}, serializer)_'", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,check,not,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,could,not,create,the,type,information,for,type,get,name,the,most,common,reason,is,failure,to,infer,the,generic,type,information,due,to,java,s,type,erasure,in,that,case,please,pass,a,type,hint,instead,of,a,class,to,describe,the,type,for,example,to,describe,tuple2,string,string,as,a,generic,type,use,new,pravega,deserialization,schema,new,type,hint,tuple2,string,string,serializer,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue);1531419503;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		checkNotNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException(_					"Could not create the type information for '" + type.getName() + "'. " +_					"The most common reason is failure to infer the generic type information, due to Java's type erasure. " +_					"In that case, please pass a 'TypeHint' instead of a class to describe the type. " +_					"For example, to describe 'Tuple2<String, String>' as a generic type, use " +_					"'new PravegaDeserializationSchema<>(new TypeHint<Tuple2<String, String>>(){}, serializer)_'", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,check,not,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,could,not,create,the,type,information,for,type,get,name,the,most,common,reason,is,failure,to,infer,the,generic,type,information,due,to,java,s,type,erasure,in,that,case,please,pass,a,type,hint,instead,of,a,class,to,describe,the,type,for,example,to,describe,tuple2,string,string,as,a,generic,type,use,new,pravega,deserialization,schema,new,type,hint,tuple2,string,string,serializer,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue);1531499577;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		checkNotNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException(_					"Could not create the type information for '" + type.getName() + "'. " +_					"The most common reason is failure to infer the generic type information, due to Java's type erasure. " +_					"In that case, please pass a 'TypeHint' instead of a class to describe the type. " +_					"For example, to describe 'Tuple2<String, String>' as a generic type, use " +_					"'new PravegaDeserializationSchema<>(new TypeHint<Tuple2<String, String>>(){}, serializer)_'", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,check,not,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,could,not,create,the,type,information,for,type,get,name,the,most,common,reason,is,failure,to,infer,the,generic,type,information,due,to,java,s,type,erasure,in,that,case,please,pass,a,type,hint,instead,of,a,class,to,describe,the,type,for,example,to,describe,tuple2,string,string,as,a,generic,type,use,new,pravega,deserialization,schema,new,type,hint,tuple2,string,string,serializer,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue);1533318024;Create a new {@code StateDescriptor} with the given name and the given type information.__<p>If this constructor fails (because it is not possible to describe the type via a class),_consider using the {@link #StateDescriptor(String, TypeInformation, Object)} constructor.__@param name The name of the {@code StateDescriptor}._@param type The class of the type of values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, Class<T> type, @Nullable T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		checkNotNull(type, "type class must not be null")___		try {_			this.typeInfo = TypeExtractor.createTypeInfo(type)__		} catch (Exception e) {_			throw new RuntimeException(_					"Could not create the type information for '" + type.getName() + "'. " +_					"The most common reason is failure to infer the generic type information, due to Java's type erasure. " +_					"In that case, please pass a 'TypeHint' instead of a class to describe the type. " +_					"For example, to describe 'Tuple2<String, String>' as a generic type, use " +_					"'new PravegaDeserializationSchema<>(new TypeHint<Tuple2<String, String>>(){}, serializer)_'", e)__		}__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,p,if,this,constructor,fails,because,it,is,not,possible,to,describe,the,type,via,a,class,consider,using,the,link,state,descriptor,string,type,information,object,constructor,param,name,the,name,of,the,code,state,descriptor,param,type,the,class,of,the,type,of,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,class,t,type,nullable,t,default,value,this,name,check,not,null,name,name,must,not,be,null,check,not,null,type,type,class,must,not,be,null,try,this,type,info,type,extractor,create,type,info,type,catch,exception,e,throw,new,runtime,exception,could,not,create,the,type,information,for,type,get,name,the,most,common,reason,is,failure,to,infer,the,generic,type,information,due,to,java,s,type,erasure,in,that,case,please,pass,a,type,hint,instead,of,a,class,to,describe,the,type,for,example,to,describe,tuple2,string,string,as,a,generic,type,use,new,pravega,deserialization,schema,new,type,hint,tuple2,string,string,serializer,e,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1454527721;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1455299461;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1455479358;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1456149562;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1460650154;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1461161201;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1470753725;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1472663071;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1481734251;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1484160227;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1485118420;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1487157667;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1487636186;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1487865389;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1491417674;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1496332245;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1500837517;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1521628649;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.typeInfo = requireNonNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,type,info,require,non,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue);1521729754;Create a new {@code StateDescriptor} with the given name and the given type information.__@param name The name of the {@code StateDescriptor}._@param typeInfo The type information for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeInformation<T> typeInfo, T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.typeInfo = checkNotNull(typeInfo, "type information must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,information,param,name,the,name,of,the,code,state,descriptor,param,type,info,the,type,information,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,information,t,type,info,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,type,info,check,not,null,type,info,type,information,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1454527721;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1455299461;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1455479358;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1456149562;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1460650154;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1461161201;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1470753725;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1472663071;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1481734251;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1484160227;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1485118420;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1487157667;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1487636186;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1487865389;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1491417674;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1496332245;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1500837517;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1521628649;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = requireNonNull(name, "name must not be null")__		this.serializer = requireNonNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,require,non,null,name,name,must,not,be,null,this,serializer,require,non,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue);1521729754;Create a new {@code StateDescriptor} with the given name and the given type serializer.__@param name The name of the {@code StateDescriptor}._@param serializer The type serializer for the values in the state._@param defaultValue The default value that will be set when requesting state without setting_a value before.;protected StateDescriptor(String name, TypeSerializer<T> serializer, T defaultValue) {_		this.name = checkNotNull(name, "name must not be null")__		this.serializer = checkNotNull(serializer, "serializer must not be null")__		this.defaultValue = defaultValue__	};create,a,new,code,state,descriptor,with,the,given,name,and,the,given,type,serializer,param,name,the,name,of,the,code,state,descriptor,param,serializer,the,type,serializer,for,the,values,in,the,state,param,default,value,the,default,value,that,will,be,set,when,requesting,state,without,setting,a,value,before;protected,state,descriptor,string,name,type,serializer,t,serializer,t,default,value,this,name,check,not,null,name,name,must,not,be,null,this,serializer,check,not,null,serializer,serializer,must,not,be,null,this,default,value,default,value
StateDescriptor -> private void ensureSerializerCreated();1454527721;This method should be called by subclasses prior to serialization. Because the TypeInformation is_not always serializable, it is 'transient' and dropped during serialization. Hence, the descriptor_needs to make sure that the serializer is created before the TypeInformation is dropped.;private void ensureSerializerCreated() {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(new ExecutionConfig())__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};this,method,should,be,called,by,subclasses,prior,to,serialization,because,the,type,information,is,not,always,serializable,it,is,transient,and,dropped,during,serialization,hence,the,descriptor,needs,to,make,sure,that,the,serializer,is,created,before,the,type,information,is,dropped;private,void,ensure,serializer,created,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,new,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> private void ensureSerializerCreated();1455299461;This method should be called by subclasses prior to serialization. Because the TypeInformation is_not always serializable, it is 'transient' and dropped during serialization. Hence, the descriptor_needs to make sure that the serializer is created before the TypeInformation is dropped.;private void ensureSerializerCreated() {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(new ExecutionConfig())__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};this,method,should,be,called,by,subclasses,prior,to,serialization,because,the,type,information,is,not,always,serializable,it,is,transient,and,dropped,during,serialization,hence,the,descriptor,needs,to,make,sure,that,the,serializer,is,created,before,the,type,information,is,dropped;private,void,ensure,serializer,created,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,new,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> private void ensureSerializerCreated();1455479358;This method should be called by subclasses prior to serialization. Because the TypeInformation is_not always serializable, it is 'transient' and dropped during serialization. Hence, the descriptor_needs to make sure that the serializer is created before the TypeInformation is dropped.;private void ensureSerializerCreated() {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(new ExecutionConfig())__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};this,method,should,be,called,by,subclasses,prior,to,serialization,because,the,type,information,is,not,always,serializable,it,is,transient,and,dropped,during,serialization,hence,the,descriptor,needs,to,make,sure,that,the,serializer,is,created,before,the,type,information,is,dropped;private,void,ensure,serializer,created,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,new,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> private void ensureSerializerCreated();1456149562;This method should be called by subclasses prior to serialization. Because the TypeInformation is_not always serializable, it is 'transient' and dropped during serialization. Hence, the descriptor_needs to make sure that the serializer is created before the TypeInformation is dropped.;private void ensureSerializerCreated() {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(new ExecutionConfig())__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};this,method,should,be,called,by,subclasses,prior,to,serialization,because,the,type,information,is,not,always,serializable,it,is,transient,and,dropped,during,serialization,hence,the,descriptor,needs,to,make,sure,that,the,serializer,is,created,before,the,type,information,is,dropped;private,void,ensure,serializer,created,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,new,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> private void ensureSerializerCreated();1460650154;This method should be called by subclasses prior to serialization. Because the TypeInformation is_not always serializable, it is 'transient' and dropped during serialization. Hence, the descriptor_needs to make sure that the serializer is created before the TypeInformation is dropped.;private void ensureSerializerCreated() {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(new ExecutionConfig())__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};this,method,should,be,called,by,subclasses,prior,to,serialization,because,the,type,information,is,not,always,serializable,it,is,transient,and,dropped,during,serialization,hence,the,descriptor,needs,to,make,sure,that,the,serializer,is,created,before,the,type,information,is,dropped;private,void,ensure,serializer,created,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,new,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> private void ensureSerializerCreated();1461161201;This method should be called by subclasses prior to serialization. Because the TypeInformation is_not always serializable, it is 'transient' and dropped during serialization. Hence, the descriptor_needs to make sure that the serializer is created before the TypeInformation is dropped.;private void ensureSerializerCreated() {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(new ExecutionConfig())__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};this,method,should,be,called,by,subclasses,prior,to,serialization,because,the,type,information,is,not,always,serializable,it,is,transient,and,dropped,during,serialization,hence,the,descriptor,needs,to,make,sure,that,the,serializer,is,created,before,the,type,information,is,dropped;private,void,ensure,serializer,created,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,new,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> private void ensureSerializerCreated();1470753725;This method should be called by subclasses prior to serialization. Because the TypeInformation is_not always serializable, it is 'transient' and dropped during serialization. Hence, the descriptor_needs to make sure that the serializer is created before the TypeInformation is dropped.;private void ensureSerializerCreated() {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(new ExecutionConfig())__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};this,method,should,be,called,by,subclasses,prior,to,serialization,because,the,type,information,is,not,always,serializable,it,is,transient,and,dropped,during,serialization,hence,the,descriptor,needs,to,make,sure,that,the,serializer,is,created,before,the,type,information,is,dropped;private,void,ensure,serializer,created,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,new,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> private void ensureSerializerCreated();1472663071;This method should be called by subclasses prior to serialization. Because the TypeInformation is_not always serializable, it is 'transient' and dropped during serialization. Hence, the descriptor_needs to make sure that the serializer is created before the TypeInformation is dropped.;private void ensureSerializerCreated() {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(new ExecutionConfig())__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};this,method,should,be,called,by,subclasses,prior,to,serialization,because,the,type,information,is,not,always,serializable,it,is,transient,and,dropped,during,serialization,hence,the,descriptor,needs,to,make,sure,that,the,serializer,is,created,before,the,type,information,is,dropped;private,void,ensure,serializer,created,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,new,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> private void ensureSerializerCreated();1481734251;This method should be called by subclasses prior to serialization. Because the TypeInformation is_not always serializable, it is 'transient' and dropped during serialization. Hence, the descriptor_needs to make sure that the serializer is created before the TypeInformation is dropped.;private void ensureSerializerCreated() {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(new ExecutionConfig())__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};this,method,should,be,called,by,subclasses,prior,to,serialization,because,the,type,information,is,not,always,serializable,it,is,transient,and,dropped,during,serialization,hence,the,descriptor,needs,to,make,sure,that,the,serializer,is,created,before,the,type,information,is,dropped;private,void,ensure,serializer,created,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,new,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> private void ensureSerializerCreated();1484160227;This method should be called by subclasses prior to serialization. Because the TypeInformation is_not always serializable, it is 'transient' and dropped during serialization. Hence, the descriptor_needs to make sure that the serializer is created before the TypeInformation is dropped.;private void ensureSerializerCreated() {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(new ExecutionConfig())__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};this,method,should,be,called,by,subclasses,prior,to,serialization,because,the,type,information,is,not,always,serializable,it,is,transient,and,dropped,during,serialization,hence,the,descriptor,needs,to,make,sure,that,the,serializer,is,created,before,the,type,information,is,dropped;private,void,ensure,serializer,created,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,new,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
StateDescriptor -> private void ensureSerializerCreated();1485118420;This method should be called by subclasses prior to serialization. Because the TypeInformation is_not always serializable, it is 'transient' and dropped during serialization. Hence, the descriptor_needs to make sure that the serializer is created before the TypeInformation is dropped.;private void ensureSerializerCreated() {_		if (serializer == null) {_			if (typeInfo != null) {_				serializer = typeInfo.createSerializer(new ExecutionConfig())__			} else {_				throw new IllegalStateException(_						"Cannot initialize serializer after TypeInformation was dropped during serialization")__			}_		}_	};this,method,should,be,called,by,subclasses,prior,to,serialization,because,the,type,information,is,not,always,serializable,it,is,transient,and,dropped,during,serialization,hence,the,descriptor,needs,to,make,sure,that,the,serializer,is,created,before,the,type,information,is,dropped;private,void,ensure,serializer,created,if,serializer,null,if,type,info,null,serializer,type,info,create,serializer,new,execution,config,else,throw,new,illegal,state,exception,cannot,initialize,serializer,after,type,information,was,dropped,during,serialization
