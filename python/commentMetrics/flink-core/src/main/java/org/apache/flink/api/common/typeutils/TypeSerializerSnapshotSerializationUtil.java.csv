# id;timestamp;commentText;codeText;commentWords;codeWords
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @VisibleForTesting 		@SuppressWarnings("deprecation") 		static <T> TypeSerializerSnapshot<T> deserializeV1( 				DataInputView in, 				ClassLoader cl, 				@Nullable TypeSerializer<T> serializer) throws IOException;1540907751;Deserialization path for Flink versions in [1.4, 1.6].;@VisibleForTesting_		@SuppressWarnings("deprecation")_		static <T> TypeSerializerSnapshot<T> deserializeV1(_				DataInputView in,_				ClassLoader cl,_				@Nullable TypeSerializer<T> serializer) throws IOException {__			TypeSerializerSnapshot<T> snapshot = readAndInstantiateSnapshotClass(in, cl)___			_			_			_			if (snapshot instanceof TypeSerializerConfigSnapshot) {_				TypeSerializerConfigSnapshot<T> oldTypeSnapshot = (TypeSerializerConfigSnapshot<T>) snapshot___				_				if (serializer == null || serializer instanceof UnloadableDummyTypeSerializer) {_					throw new IOException(_							"Found serializer snapshot of pre-Flink-1.7 format (TypeSerializerConfigSnapshot) " +_							"but could not Java-deserialize the corresponding TypeSerializer.")__				}__				oldTypeSnapshot.setPriorSerializer(serializer)__				oldTypeSnapshot.setUserCodeClassLoader(cl)__				oldTypeSnapshot.read(in)__			}_			else {_				_				int readVersion = in.readInt()__				snapshot.readSnapshot(readVersion, in, cl)__			}__			return snapshot__		};deserialization,path,for,flink,versions,in,1,4,1,6;visible,for,testing,suppress,warnings,deprecation,static,t,type,serializer,snapshot,t,deserialize,v1,data,input,view,in,class,loader,cl,nullable,type,serializer,t,serializer,throws,ioexception,type,serializer,snapshot,t,snapshot,read,and,instantiate,snapshot,class,in,cl,if,snapshot,instanceof,type,serializer,config,snapshot,type,serializer,config,snapshot,t,old,type,snapshot,type,serializer,config,snapshot,t,snapshot,if,serializer,null,serializer,instanceof,unloadable,dummy,type,serializer,throw,new,ioexception,found,serializer,snapshot,of,pre,flink,1,7,format,type,serializer,config,snapshot,but,could,not,java,deserialize,the,corresponding,type,serializer,old,type,snapshot,set,prior,serializer,serializer,old,type,snapshot,set,user,code,class,loader,cl,old,type,snapshot,read,in,else,int,read,version,in,read,int,snapshot,read,snapshot,read,version,in,cl,return,snapshot
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @VisibleForTesting 		@SuppressWarnings("deprecation") 		static <T> TypeSerializerSnapshot<T> deserializeV1( 				DataInputView in, 				ClassLoader cl, 				@Nullable TypeSerializer<T> serializer) throws IOException;1540907751;Deserialization path for Flink versions in [1.4, 1.6].;@VisibleForTesting_		@SuppressWarnings("deprecation")_		static <T> TypeSerializerSnapshot<T> deserializeV1(_				DataInputView in,_				ClassLoader cl,_				@Nullable TypeSerializer<T> serializer) throws IOException {__			TypeSerializerSnapshot<T> snapshot = readAndInstantiateSnapshotClass(in, cl)___			_			_			_			if (snapshot instanceof TypeSerializerConfigSnapshot) {_				TypeSerializerConfigSnapshot<T> oldTypeSnapshot = (TypeSerializerConfigSnapshot<T>) snapshot__				oldTypeSnapshot.setPriorSerializer(serializer)__				oldTypeSnapshot.setUserCodeClassLoader(cl)__				oldTypeSnapshot.read(in)__			}_			else {_				_				int readVersion = in.readInt()__				snapshot.readSnapshot(readVersion, in, cl)__			}__			return snapshot__		};deserialization,path,for,flink,versions,in,1,4,1,6;visible,for,testing,suppress,warnings,deprecation,static,t,type,serializer,snapshot,t,deserialize,v1,data,input,view,in,class,loader,cl,nullable,type,serializer,t,serializer,throws,ioexception,type,serializer,snapshot,t,snapshot,read,and,instantiate,snapshot,class,in,cl,if,snapshot,instanceof,type,serializer,config,snapshot,type,serializer,config,snapshot,t,old,type,snapshot,type,serializer,config,snapshot,t,snapshot,old,type,snapshot,set,prior,serializer,serializer,old,type,snapshot,set,user,code,class,loader,cl,old,type,snapshot,read,in,else,int,read,version,in,read,int,snapshot,read,snapshot,read,version,in,cl,return,snapshot
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @VisibleForTesting 		@SuppressWarnings("deprecation") 		static <T> TypeSerializerSnapshot<T> deserializeV1( 				DataInputView in, 				ClassLoader cl, 				@Nullable TypeSerializer<T> serializer) throws IOException;1540907751;Deserialization path for Flink versions in [1.4, 1.6].;@VisibleForTesting_		@SuppressWarnings("deprecation")_		static <T> TypeSerializerSnapshot<T> deserializeV1(_				DataInputView in,_				ClassLoader cl,_				@Nullable TypeSerializer<T> serializer) throws IOException {__			TypeSerializerSnapshot<T> snapshot = readAndInstantiateSnapshotClass(in, cl)___			_			_			_			if (snapshot instanceof TypeSerializerConfigSnapshot) {_				TypeSerializerConfigSnapshot<T> oldTypeSnapshot = (TypeSerializerConfigSnapshot<T>) snapshot__				oldTypeSnapshot.setPriorSerializer(serializer)__				oldTypeSnapshot.setUserCodeClassLoader(cl)__				oldTypeSnapshot.read(in)__			}_			else {_				_				int readVersion = in.readInt()__				snapshot.readSnapshot(readVersion, in, cl)__			}__			return snapshot__		};deserialization,path,for,flink,versions,in,1,4,1,6;visible,for,testing,suppress,warnings,deprecation,static,t,type,serializer,snapshot,t,deserialize,v1,data,input,view,in,class,loader,cl,nullable,type,serializer,t,serializer,throws,ioexception,type,serializer,snapshot,t,snapshot,read,and,instantiate,snapshot,class,in,cl,if,snapshot,instanceof,type,serializer,config,snapshot,type,serializer,config,snapshot,t,old,type,snapshot,type,serializer,config,snapshot,t,snapshot,old,type,snapshot,set,prior,serializer,serializer,old,type,snapshot,set,user,code,class,loader,cl,old,type,snapshot,read,in,else,int,read,version,in,read,int,snapshot,read,snapshot,read,version,in,cl,return,snapshot
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @VisibleForTesting 		static <T> TypeSerializerSnapshot<T> deserializeV2(DataInputView in, ClassLoader cl) throws IOException;1540907751;Deserialization path for Flink versions 1.7+.;@VisibleForTesting_		static <T> TypeSerializerSnapshot<T> deserializeV2(DataInputView in, ClassLoader cl) throws IOException {_			final TypeSerializerSnapshot<T> snapshot = readAndInstantiateSnapshotClass(in, cl)__			final int version = in.readInt()__			snapshot.readSnapshot(version, in, cl)__			return snapshot__		};deserialization,path,for,flink,versions,1,7;visible,for,testing,static,t,type,serializer,snapshot,t,deserialize,v2,data,input,view,in,class,loader,cl,throws,ioexception,final,type,serializer,snapshot,t,snapshot,read,and,instantiate,snapshot,class,in,cl,final,int,version,in,read,int,snapshot,read,snapshot,version,in,cl,return,snapshot
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @VisibleForTesting 		static <T> TypeSerializerSnapshot<T> deserializeV2(DataInputView in, ClassLoader cl) throws IOException;1540907751;Deserialization path for Flink versions 1.7+.;@VisibleForTesting_		static <T> TypeSerializerSnapshot<T> deserializeV2(DataInputView in, ClassLoader cl) throws IOException {_			return TypeSerializerSnapshot.readVersionedSnapshot(in, cl)__		};deserialization,path,for,flink,versions,1,7;visible,for,testing,static,t,type,serializer,snapshot,t,deserialize,v2,data,input,view,in,class,loader,cl,throws,ioexception,return,type,serializer,snapshot,read,versioned,snapshot,in,cl
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @VisibleForTesting 		static <T> TypeSerializerSnapshot<T> deserializeV2(DataInputView in, ClassLoader cl) throws IOException;1540907751;Deserialization path for Flink versions 1.7+.;@VisibleForTesting_		static <T> TypeSerializerSnapshot<T> deserializeV2(DataInputView in, ClassLoader cl) throws IOException {_			return TypeSerializerSnapshot.readVersionedSnapshot(in, cl)__		};deserialization,path,for,flink,versions,1,7;visible,for,testing,static,t,type,serializer,snapshot,t,deserialize,v2,data,input,view,in,class,loader,cl,throws,ioexception,return,type,serializer,snapshot,read,versioned,snapshot,in,cl
TypeSerializerSnapshotSerializationUtil -> public static <T> void writeSerializerSnapshot( 		DataOutputView out, 		TypeSerializerSnapshot<T> serializerSnapshot, 		TypeSerializer<T> serializer) throws IOException;1539149114;Writes a {@link TypeSerializerSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerSnapshot(DataInputView, ClassLoader, TypeSerializer)}.__@param out the data output view_@param serializerSnapshot the serializer configuration snapshot to write_@param serializer the prior serializer. This needs to be written of the serializer snapshot_if the serializer snapshot is still the legacy {@link TypeSerializerConfigSnapshot}.__@throws IOException;public static <T> void writeSerializerSnapshot(_		DataOutputView out,_		TypeSerializerSnapshot<T> serializerSnapshot,_		TypeSerializer<T> serializer) throws IOException {__		new TypeSerializerSnapshotSerializationProxy<>(serializerSnapshot, serializer).write(out)__	};writes,a,link,type,serializer,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,snapshot,data,input,view,class,loader,type,serializer,param,out,the,data,output,view,param,serializer,snapshot,the,serializer,configuration,snapshot,to,write,param,serializer,the,prior,serializer,this,needs,to,be,written,of,the,serializer,snapshot,if,the,serializer,snapshot,is,still,the,legacy,link,type,serializer,config,snapshot,throws,ioexception;public,static,t,void,write,serializer,snapshot,data,output,view,out,type,serializer,snapshot,t,serializer,snapshot,type,serializer,t,serializer,throws,ioexception,new,type,serializer,snapshot,serialization,proxy,serializer,snapshot,serializer,write,out
TypeSerializerSnapshotSerializationUtil -> public static <T> void writeSerializerSnapshot( 		DataOutputView out, 		TypeSerializerSnapshot<T> serializerSnapshot, 		TypeSerializer<T> serializer) throws IOException;1539149151;Writes a {@link TypeSerializerSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerSnapshot(DataInputView, ClassLoader, TypeSerializer)}.__@param out the data output view_@param serializerSnapshot the serializer configuration snapshot to write_@param serializer the prior serializer. This needs to be written of the serializer snapshot_if the serializer snapshot is still the legacy {@link TypeSerializerConfigSnapshot}.__@throws IOException;public static <T> void writeSerializerSnapshot(_		DataOutputView out,_		TypeSerializerSnapshot<T> serializerSnapshot,_		TypeSerializer<T> serializer) throws IOException {__		new TypeSerializerSnapshotSerializationProxy<>(serializerSnapshot, serializer).write(out)__	};writes,a,link,type,serializer,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,snapshot,data,input,view,class,loader,type,serializer,param,out,the,data,output,view,param,serializer,snapshot,the,serializer,configuration,snapshot,to,write,param,serializer,the,prior,serializer,this,needs,to,be,written,of,the,serializer,snapshot,if,the,serializer,snapshot,is,still,the,legacy,link,type,serializer,config,snapshot,throws,ioexception;public,static,t,void,write,serializer,snapshot,data,output,view,out,type,serializer,snapshot,t,serializer,snapshot,type,serializer,t,serializer,throws,ioexception,new,type,serializer,snapshot,serialization,proxy,serializer,snapshot,serializer,write,out
TypeSerializerSnapshotSerializationUtil -> public static <T> void writeSerializerSnapshot( 		DataOutputView out, 		TypeSerializerSnapshot<T> serializerSnapshot, 		TypeSerializer<T> serializer) throws IOException;1540907750;Writes a {@link TypeSerializerSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerSnapshot(DataInputView, ClassLoader, TypeSerializer)}.__@param out the data output view_@param serializerSnapshot the serializer configuration snapshot to write_@param serializer the prior serializer. This needs to be written of the serializer snapshot_if the serializer snapshot is still the legacy {@link TypeSerializerConfigSnapshot}.__@throws IOException;public static <T> void writeSerializerSnapshot(_		DataOutputView out,_		TypeSerializerSnapshot<T> serializerSnapshot,_		TypeSerializer<T> serializer) throws IOException {__		new TypeSerializerSnapshotSerializationProxy<>(serializerSnapshot, serializer).write(out)__	};writes,a,link,type,serializer,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,snapshot,data,input,view,class,loader,type,serializer,param,out,the,data,output,view,param,serializer,snapshot,the,serializer,configuration,snapshot,to,write,param,serializer,the,prior,serializer,this,needs,to,be,written,of,the,serializer,snapshot,if,the,serializer,snapshot,is,still,the,legacy,link,type,serializer,config,snapshot,throws,ioexception;public,static,t,void,write,serializer,snapshot,data,output,view,out,type,serializer,snapshot,t,serializer,snapshot,type,serializer,t,serializer,throws,ioexception,new,type,serializer,snapshot,serialization,proxy,serializer,snapshot,serializer,write,out
TypeSerializerSnapshotSerializationUtil -> public static <T> void writeSerializerSnapshot( 		DataOutputView out, 		TypeSerializerSnapshot<T> serializerSnapshot, 		TypeSerializer<T> serializer) throws IOException;1540907751;Writes a {@link TypeSerializerSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerSnapshot(DataInputView, ClassLoader, TypeSerializer)}.__@param out the data output view_@param serializerSnapshot the serializer configuration snapshot to write_@param serializer the prior serializer. This needs to be written of the serializer snapshot_if the serializer snapshot is still the legacy {@link TypeSerializerConfigSnapshot}.;public static <T> void writeSerializerSnapshot(_		DataOutputView out,_		TypeSerializerSnapshot<T> serializerSnapshot,_		TypeSerializer<T> serializer) throws IOException {__		new TypeSerializerSnapshotSerializationProxy<>(serializerSnapshot, serializer).write(out)__	};writes,a,link,type,serializer,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,snapshot,data,input,view,class,loader,type,serializer,param,out,the,data,output,view,param,serializer,snapshot,the,serializer,configuration,snapshot,to,write,param,serializer,the,prior,serializer,this,needs,to,be,written,of,the,serializer,snapshot,if,the,serializer,snapshot,is,still,the,legacy,link,type,serializer,config,snapshot;public,static,t,void,write,serializer,snapshot,data,output,view,out,type,serializer,snapshot,t,serializer,snapshot,type,serializer,t,serializer,throws,ioexception,new,type,serializer,snapshot,serialization,proxy,serializer,snapshot,serializer,write,out
TypeSerializerSnapshotSerializationUtil -> public static <T> void writeSerializerSnapshot( 		DataOutputView out, 		TypeSerializerSnapshot<T> serializerSnapshot, 		TypeSerializer<T> serializer) throws IOException;1540907751;Writes a {@link TypeSerializerSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerSnapshot(DataInputView, ClassLoader, TypeSerializer)}.__@param out the data output view_@param serializerSnapshot the serializer configuration snapshot to write_@param serializer the prior serializer. This needs to be written of the serializer snapshot_if the serializer snapshot is still the legacy {@link TypeSerializerConfigSnapshot}.;public static <T> void writeSerializerSnapshot(_		DataOutputView out,_		TypeSerializerSnapshot<T> serializerSnapshot,_		TypeSerializer<T> serializer) throws IOException {__		new TypeSerializerSnapshotSerializationProxy<>(serializerSnapshot, serializer).write(out)__	};writes,a,link,type,serializer,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,snapshot,data,input,view,class,loader,type,serializer,param,out,the,data,output,view,param,serializer,snapshot,the,serializer,configuration,snapshot,to,write,param,serializer,the,prior,serializer,this,needs,to,be,written,of,the,serializer,snapshot,if,the,serializer,snapshot,is,still,the,legacy,link,type,serializer,config,snapshot;public,static,t,void,write,serializer,snapshot,data,output,view,out,type,serializer,snapshot,t,serializer,snapshot,type,serializer,t,serializer,throws,ioexception,new,type,serializer,snapshot,serialization,proxy,serializer,snapshot,serializer,write,out
TypeSerializerSnapshotSerializationUtil -> public static <T> void writeSerializerSnapshot( 		DataOutputView out, 		TypeSerializerSnapshot<T> serializerSnapshot, 		TypeSerializer<T> serializer) throws IOException;1540907751;Writes a {@link TypeSerializerSnapshot} to the provided data output view.__<p>It is written with a format that can be later read again using_{@link #readSerializerSnapshot(DataInputView, ClassLoader, TypeSerializer)}.__@param out the data output view_@param serializerSnapshot the serializer configuration snapshot to write_@param serializer the prior serializer. This needs to be written of the serializer snapshot_if the serializer snapshot is still the legacy {@link TypeSerializerConfigSnapshot}.;public static <T> void writeSerializerSnapshot(_		DataOutputView out,_		TypeSerializerSnapshot<T> serializerSnapshot,_		TypeSerializer<T> serializer) throws IOException {__		new TypeSerializerSnapshotSerializationProxy<>(serializerSnapshot, serializer).write(out)__	};writes,a,link,type,serializer,snapshot,to,the,provided,data,output,view,p,it,is,written,with,a,format,that,can,be,later,read,again,using,link,read,serializer,snapshot,data,input,view,class,loader,type,serializer,param,out,the,data,output,view,param,serializer,snapshot,the,serializer,configuration,snapshot,to,write,param,serializer,the,prior,serializer,this,needs,to,be,written,of,the,serializer,snapshot,if,the,serializer,snapshot,is,still,the,legacy,link,type,serializer,config,snapshot;public,static,t,void,write,serializer,snapshot,data,output,view,out,type,serializer,snapshot,t,serializer,snapshot,type,serializer,t,serializer,throws,ioexception,new,type,serializer,snapshot,serialization,proxy,serializer,snapshot,serializer,write,out
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> TypeSerializerSnapshotSerializationProxy( 			TypeSerializerSnapshot<T> serializerConfigSnapshot, 			TypeSerializer<T> serializer);1540907751;Constructor for writing out serializers.;TypeSerializerSnapshotSerializationProxy(_			TypeSerializerSnapshot<T> serializerConfigSnapshot,_			TypeSerializer<T> serializer) {_			this.serializerSnapshot = Preconditions.checkNotNull(serializerConfigSnapshot)__			this.serializer = Preconditions.checkNotNull(serializer)__		};constructor,for,writing,out,serializers;type,serializer,snapshot,serialization,proxy,type,serializer,snapshot,t,serializer,config,snapshot,type,serializer,t,serializer,this,serializer,snapshot,preconditions,check,not,null,serializer,config,snapshot,this,serializer,preconditions,check,not,null,serializer
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> TypeSerializerSnapshotSerializationProxy( 			TypeSerializerSnapshot<T> serializerConfigSnapshot, 			TypeSerializer<T> serializer);1540907751;Constructor for writing out serializers.;TypeSerializerSnapshotSerializationProxy(_			TypeSerializerSnapshot<T> serializerConfigSnapshot,_			TypeSerializer<T> serializer) {_			this.serializerSnapshot = Preconditions.checkNotNull(serializerConfigSnapshot)__			this.serializer = Preconditions.checkNotNull(serializer)__		};constructor,for,writing,out,serializers;type,serializer,snapshot,serialization,proxy,type,serializer,snapshot,t,serializer,config,snapshot,type,serializer,t,serializer,this,serializer,snapshot,preconditions,check,not,null,serializer,config,snapshot,this,serializer,preconditions,check,not,null,serializer
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> TypeSerializerSnapshotSerializationProxy( 			TypeSerializerSnapshot<T> serializerConfigSnapshot, 			TypeSerializer<T> serializer);1540907751;Constructor for writing out serializers.;TypeSerializerSnapshotSerializationProxy(_			TypeSerializerSnapshot<T> serializerConfigSnapshot,_			TypeSerializer<T> serializer) {_			this.serializerSnapshot = Preconditions.checkNotNull(serializerConfigSnapshot)__			this.serializer = Preconditions.checkNotNull(serializer)__		};constructor,for,writing,out,serializers;type,serializer,snapshot,serialization,proxy,type,serializer,snapshot,t,serializer,config,snapshot,type,serializer,t,serializer,this,serializer,snapshot,preconditions,check,not,null,serializer,config,snapshot,this,serializer,preconditions,check,not,null,serializer
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @Override 		public void write(DataOutputView out) throws IOException;1539149114;Binary format layout of a written serializer snapshot is as follows:__<ul>_<li>1. Serializer snapshot classname (UTF).</li>_<li>2. The originating serializer of the snapshot, if any, written via Java serialization._Presence of the serializer is indicated by a flag (boolean -> TypeSerializer).</li>_<li>3. The version of the serializer snapshot's binary format.</li>_<li>4. The actual serializer snapshot.</li>_</ul>;@Override_		public void write(DataOutputView out) throws IOException {_			super.write(out)___			_			_			out.writeUTF(serializerSnapshot.getClass().getName())___			if (serializerSnapshot instanceof TypeSerializerConfigSnapshot) {_				_				_				out.writeBoolean(true)__				@SuppressWarnings("unchecked")_				TypeSerializerConfigSnapshot<T> legacySerializerSnapshot = (TypeSerializerConfigSnapshot<T>) serializerSnapshot__				TypeSerializerSerializationUtil.writeSerializer(out, serializer)___				_				legacySerializerSnapshot.write(out)__			} else {_				out.writeBoolean(false)___				out.writeInt(serializerSnapshot.getCurrentVersion())__				serializerSnapshot.write(out)__			}_		};binary,format,layout,of,a,written,serializer,snapshot,is,as,follows,ul,li,1,serializer,snapshot,classname,utf,li,li,2,the,originating,serializer,of,the,snapshot,if,any,written,via,java,serialization,presence,of,the,serializer,is,indicated,by,a,flag,boolean,type,serializer,li,li,3,the,version,of,the,serializer,snapshot,s,binary,format,li,li,4,the,actual,serializer,snapshot,li,ul;override,public,void,write,data,output,view,out,throws,ioexception,super,write,out,out,write,utf,serializer,snapshot,get,class,get,name,if,serializer,snapshot,instanceof,type,serializer,config,snapshot,out,write,boolean,true,suppress,warnings,unchecked,type,serializer,config,snapshot,t,legacy,serializer,snapshot,type,serializer,config,snapshot,t,serializer,snapshot,type,serializer,serialization,util,write,serializer,out,serializer,legacy,serializer,snapshot,write,out,else,out,write,boolean,false,out,write,int,serializer,snapshot,get,current,version,serializer,snapshot,write,out
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @Override 		public void write(DataOutputView out) throws IOException;1539149151;Binary format layout of a written serializer snapshot is as follows:__<ul>_<li>1. Serializer snapshot classname (UTF).</li>_<li>2. The originating serializer of the snapshot, if any, written via Java serialization._Presence of the serializer is indicated by a flag (boolean -> TypeSerializer).</li>_<li>3. The version of the serializer snapshot's binary format.</li>_<li>4. The actual serializer snapshot.</li>_</ul>;@Override_		public void write(DataOutputView out) throws IOException {_			super.write(out)___			_			_			out.writeUTF(serializerSnapshot.getClass().getName())___			if (serializerSnapshot instanceof TypeSerializerConfigSnapshot) {_				_				_				out.writeBoolean(true)__				@SuppressWarnings("unchecked")_				TypeSerializerConfigSnapshot<T> legacySerializerSnapshot = (TypeSerializerConfigSnapshot<T>) serializerSnapshot__				TypeSerializerSerializationUtil.writeSerializer(out, serializer)___				_				legacySerializerSnapshot.write(out)__			} else {_				out.writeBoolean(false)___				out.writeInt(serializerSnapshot.getCurrentVersion())__				serializerSnapshot.write(out)__			}_		};binary,format,layout,of,a,written,serializer,snapshot,is,as,follows,ul,li,1,serializer,snapshot,classname,utf,li,li,2,the,originating,serializer,of,the,snapshot,if,any,written,via,java,serialization,presence,of,the,serializer,is,indicated,by,a,flag,boolean,type,serializer,li,li,3,the,version,of,the,serializer,snapshot,s,binary,format,li,li,4,the,actual,serializer,snapshot,li,ul;override,public,void,write,data,output,view,out,throws,ioexception,super,write,out,out,write,utf,serializer,snapshot,get,class,get,name,if,serializer,snapshot,instanceof,type,serializer,config,snapshot,out,write,boolean,true,suppress,warnings,unchecked,type,serializer,config,snapshot,t,legacy,serializer,snapshot,type,serializer,config,snapshot,t,serializer,snapshot,type,serializer,serialization,util,write,serializer,out,serializer,legacy,serializer,snapshot,write,out,else,out,write,boolean,false,out,write,int,serializer,snapshot,get,current,version,serializer,snapshot,write,out
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @Override 		public void write(DataOutputView out) throws IOException;1540907750;Binary format layout of a written serializer snapshot is as follows:__<ul>_<li>1. Serializer snapshot classname (UTF).</li>_<li>2. The originating serializer of the snapshot, if any, written via Java serialization._Presence of the serializer is indicated by a flag (boolean -> TypeSerializer).</li>_<li>3. The version of the serializer snapshot's binary format.</li>_<li>4. The actual serializer snapshot.</li>_</ul>;@Override_		public void write(DataOutputView out) throws IOException {_			super.write(out)___			_			_			out.writeUTF(serializerSnapshot.getClass().getName())___			if (serializerSnapshot instanceof TypeSerializerConfigSnapshot) {_				_				_				out.writeBoolean(true)__				@SuppressWarnings("unchecked")_				TypeSerializerConfigSnapshot<T> legacySerializerSnapshot = (TypeSerializerConfigSnapshot<T>) serializerSnapshot__				TypeSerializerSerializationUtil.writeSerializer(out, serializer)___				_				legacySerializerSnapshot.write(out)__			} else {_				out.writeBoolean(false)___				out.writeInt(serializerSnapshot.getCurrentVersion())__				serializerSnapshot.writeSnapshot(out)__			}_		};binary,format,layout,of,a,written,serializer,snapshot,is,as,follows,ul,li,1,serializer,snapshot,classname,utf,li,li,2,the,originating,serializer,of,the,snapshot,if,any,written,via,java,serialization,presence,of,the,serializer,is,indicated,by,a,flag,boolean,type,serializer,li,li,3,the,version,of,the,serializer,snapshot,s,binary,format,li,li,4,the,actual,serializer,snapshot,li,ul;override,public,void,write,data,output,view,out,throws,ioexception,super,write,out,out,write,utf,serializer,snapshot,get,class,get,name,if,serializer,snapshot,instanceof,type,serializer,config,snapshot,out,write,boolean,true,suppress,warnings,unchecked,type,serializer,config,snapshot,t,legacy,serializer,snapshot,type,serializer,config,snapshot,t,serializer,snapshot,type,serializer,serialization,util,write,serializer,out,serializer,legacy,serializer,snapshot,write,out,else,out,write,boolean,false,out,write,int,serializer,snapshot,get,current,version,serializer,snapshot,write,snapshot,out
TypeSerializerSnapshotSerializationUtil -> public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException;1539149114;Reads from a data input view a {@link TypeSerializerSnapshot} that was previously_written using {@link TypeSerializerSnapshotSerializationUtil#writeSerializerSnapshot(DataOutputView, TypeSerializerSnapshot, TypeSerializer)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use_@param existingPriorSerializer the prior serializer. This would only be non-null if we are_restoring from a snapshot taken with Flink version <= 1.6.__@return the read serializer configuration snapshot__@throws IOException;public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException {__		final TypeSerializerSnapshotSerializationProxy<T> proxy =_			new TypeSerializerSnapshotSerializationProxy<>(userCodeClassLoader, existingPriorSerializer)__		proxy.read(in)___		return proxy.getSerializerSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,snapshot,that,was,previously,written,using,link,type,serializer,snapshot,serialization,util,write,serializer,snapshot,data,output,view,type,serializer,snapshot,type,serializer,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,existing,prior,serializer,the,prior,serializer,this,would,only,be,non,null,if,we,are,restoring,from,a,snapshot,taken,with,flink,version,1,6,return,the,read,serializer,configuration,snapshot,throws,ioexception;public,static,t,type,serializer,snapshot,t,read,serializer,snapshot,data,input,view,in,class,loader,user,code,class,loader,nullable,type,serializer,t,existing,prior,serializer,throws,ioexception,final,type,serializer,snapshot,serialization,proxy,t,proxy,new,type,serializer,snapshot,serialization,proxy,user,code,class,loader,existing,prior,serializer,proxy,read,in,return,proxy,get,serializer,snapshot
TypeSerializerSnapshotSerializationUtil -> public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException;1539149151;Reads from a data input view a {@link TypeSerializerSnapshot} that was previously_written using {@link TypeSerializerSnapshotSerializationUtil#writeSerializerSnapshot(DataOutputView, TypeSerializerSnapshot, TypeSerializer)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use_@param existingPriorSerializer the prior serializer. This would only be non-null if we are_restoring from a snapshot taken with Flink version <= 1.6.__@return the read serializer configuration snapshot__@throws IOException;public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException {__		final TypeSerializerSnapshotSerializationProxy<T> proxy =_			new TypeSerializerSnapshotSerializationProxy<>(userCodeClassLoader, existingPriorSerializer)__		proxy.read(in)___		return proxy.getSerializerSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,snapshot,that,was,previously,written,using,link,type,serializer,snapshot,serialization,util,write,serializer,snapshot,data,output,view,type,serializer,snapshot,type,serializer,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,existing,prior,serializer,the,prior,serializer,this,would,only,be,non,null,if,we,are,restoring,from,a,snapshot,taken,with,flink,version,1,6,return,the,read,serializer,configuration,snapshot,throws,ioexception;public,static,t,type,serializer,snapshot,t,read,serializer,snapshot,data,input,view,in,class,loader,user,code,class,loader,nullable,type,serializer,t,existing,prior,serializer,throws,ioexception,final,type,serializer,snapshot,serialization,proxy,t,proxy,new,type,serializer,snapshot,serialization,proxy,user,code,class,loader,existing,prior,serializer,proxy,read,in,return,proxy,get,serializer,snapshot
TypeSerializerSnapshotSerializationUtil -> public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException;1540907750;Reads from a data input view a {@link TypeSerializerSnapshot} that was previously_written using {@link TypeSerializerSnapshotSerializationUtil#writeSerializerSnapshot(DataOutputView, TypeSerializerSnapshot, TypeSerializer)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use_@param existingPriorSerializer the prior serializer. This would only be non-null if we are_restoring from a snapshot taken with Flink version <= 1.6.__@return the read serializer configuration snapshot__@throws IOException;public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException {__		final TypeSerializerSnapshotSerializationProxy<T> proxy =_			new TypeSerializerSnapshotSerializationProxy<>(userCodeClassLoader, existingPriorSerializer)__		proxy.read(in)___		return proxy.getSerializerSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,snapshot,that,was,previously,written,using,link,type,serializer,snapshot,serialization,util,write,serializer,snapshot,data,output,view,type,serializer,snapshot,type,serializer,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,existing,prior,serializer,the,prior,serializer,this,would,only,be,non,null,if,we,are,restoring,from,a,snapshot,taken,with,flink,version,1,6,return,the,read,serializer,configuration,snapshot,throws,ioexception;public,static,t,type,serializer,snapshot,t,read,serializer,snapshot,data,input,view,in,class,loader,user,code,class,loader,nullable,type,serializer,t,existing,prior,serializer,throws,ioexception,final,type,serializer,snapshot,serialization,proxy,t,proxy,new,type,serializer,snapshot,serialization,proxy,user,code,class,loader,existing,prior,serializer,proxy,read,in,return,proxy,get,serializer,snapshot
TypeSerializerSnapshotSerializationUtil -> public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException;1540907751;Reads from a data input view a {@link TypeSerializerSnapshot} that was previously_written using {@link TypeSerializerSnapshotSerializationUtil#writeSerializerSnapshot(DataOutputView, TypeSerializerSnapshot, TypeSerializer)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use_@param existingPriorSerializer the prior serializer. This would only be non-null if we are_restoring from a snapshot taken with Flink version <= 1.6.__@return the read serializer configuration snapshot;public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException {__		final TypeSerializerSnapshotSerializationProxy<T> proxy =_			new TypeSerializerSnapshotSerializationProxy<>(userCodeClassLoader, existingPriorSerializer)__		proxy.read(in)___		return proxy.getSerializerSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,snapshot,that,was,previously,written,using,link,type,serializer,snapshot,serialization,util,write,serializer,snapshot,data,output,view,type,serializer,snapshot,type,serializer,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,existing,prior,serializer,the,prior,serializer,this,would,only,be,non,null,if,we,are,restoring,from,a,snapshot,taken,with,flink,version,1,6,return,the,read,serializer,configuration,snapshot;public,static,t,type,serializer,snapshot,t,read,serializer,snapshot,data,input,view,in,class,loader,user,code,class,loader,nullable,type,serializer,t,existing,prior,serializer,throws,ioexception,final,type,serializer,snapshot,serialization,proxy,t,proxy,new,type,serializer,snapshot,serialization,proxy,user,code,class,loader,existing,prior,serializer,proxy,read,in,return,proxy,get,serializer,snapshot
TypeSerializerSnapshotSerializationUtil -> public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException;1540907751;Reads from a data input view a {@link TypeSerializerSnapshot} that was previously_written using {@link TypeSerializerSnapshotSerializationUtil#writeSerializerSnapshot(DataOutputView, TypeSerializerSnapshot, TypeSerializer)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use_@param existingPriorSerializer the prior serializer. This would only be non-null if we are_restoring from a snapshot taken with Flink version <= 1.6.__@return the read serializer configuration snapshot;public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException {__		final TypeSerializerSnapshotSerializationProxy<T> proxy =_			new TypeSerializerSnapshotSerializationProxy<>(userCodeClassLoader, existingPriorSerializer)__		proxy.read(in)___		return proxy.getSerializerSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,snapshot,that,was,previously,written,using,link,type,serializer,snapshot,serialization,util,write,serializer,snapshot,data,output,view,type,serializer,snapshot,type,serializer,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,existing,prior,serializer,the,prior,serializer,this,would,only,be,non,null,if,we,are,restoring,from,a,snapshot,taken,with,flink,version,1,6,return,the,read,serializer,configuration,snapshot;public,static,t,type,serializer,snapshot,t,read,serializer,snapshot,data,input,view,in,class,loader,user,code,class,loader,nullable,type,serializer,t,existing,prior,serializer,throws,ioexception,final,type,serializer,snapshot,serialization,proxy,t,proxy,new,type,serializer,snapshot,serialization,proxy,user,code,class,loader,existing,prior,serializer,proxy,read,in,return,proxy,get,serializer,snapshot
TypeSerializerSnapshotSerializationUtil -> public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot( 			DataInputView in, 			ClassLoader userCodeClassLoader, 			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException;1540907751;Reads from a data input view a {@link TypeSerializerSnapshot} that was previously_written using {@link TypeSerializerSnapshotSerializationUtil#writeSerializerSnapshot(DataOutputView, TypeSerializerSnapshot, TypeSerializer)}.__@param in the data input view_@param userCodeClassLoader the user code class loader to use_@param existingPriorSerializer the prior serializer. This would only be non-null if we are_restoring from a snapshot taken with Flink version <= 1.6.__@return the read serializer configuration snapshot;public static <T> TypeSerializerSnapshot<T> readSerializerSnapshot(_			DataInputView in,_			ClassLoader userCodeClassLoader,_			@Nullable TypeSerializer<T> existingPriorSerializer) throws IOException {__		final TypeSerializerSnapshotSerializationProxy<T> proxy =_			new TypeSerializerSnapshotSerializationProxy<>(userCodeClassLoader, existingPriorSerializer)__		proxy.read(in)___		return proxy.getSerializerSnapshot()__	};reads,from,a,data,input,view,a,link,type,serializer,snapshot,that,was,previously,written,using,link,type,serializer,snapshot,serialization,util,write,serializer,snapshot,data,output,view,type,serializer,snapshot,type,serializer,param,in,the,data,input,view,param,user,code,class,loader,the,user,code,class,loader,to,use,param,existing,prior,serializer,the,prior,serializer,this,would,only,be,non,null,if,we,are,restoring,from,a,snapshot,taken,with,flink,version,1,6,return,the,read,serializer,configuration,snapshot;public,static,t,type,serializer,snapshot,t,read,serializer,snapshot,data,input,view,in,class,loader,user,code,class,loader,nullable,type,serializer,t,existing,prior,serializer,throws,ioexception,final,type,serializer,snapshot,serialization,proxy,t,proxy,new,type,serializer,snapshot,serialization,proxy,user,code,class,loader,existing,prior,serializer,proxy,read,in,return,proxy,get,serializer,snapshot
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @SuppressWarnings("deprecation") 		@Override 		public void write(DataOutputView out) throws IOException;1540907751;Binary format layout of a written serializer snapshot is as follows:__<ul>_<li>1. Format version of this util.</li>_<li>2. Name of the TypeSerializerSnapshot class.</li>_<li>3. The version of the TypeSerializerSnapshot's binary format.</li>_<li>4. The actual serializer snapshot data.</li>_</ul>;@SuppressWarnings("deprecation")_		@Override_		public void write(DataOutputView out) throws IOException {_			setSerializerForWriteIfOldPath(serializerSnapshot, serializer)___			_			super.write(out)___			_			_			out.writeUTF(serializerSnapshot.getClass().getName())__			out.writeInt(serializerSnapshot.getCurrentVersion())__			serializerSnapshot.writeSnapshot(out)__		};binary,format,layout,of,a,written,serializer,snapshot,is,as,follows,ul,li,1,format,version,of,this,util,li,li,2,name,of,the,type,serializer,snapshot,class,li,li,3,the,version,of,the,type,serializer,snapshot,s,binary,format,li,li,4,the,actual,serializer,snapshot,data,li,ul;suppress,warnings,deprecation,override,public,void,write,data,output,view,out,throws,ioexception,set,serializer,for,write,if,old,path,serializer,snapshot,serializer,super,write,out,out,write,utf,serializer,snapshot,get,class,get,name,out,write,int,serializer,snapshot,get,current,version,serializer,snapshot,write,snapshot,out
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @SuppressWarnings("deprecation") 		@Override 		public void write(DataOutputView out) throws IOException;1540907751;Binary format layout of a written serializer snapshot is as follows:__<ul>_<li>1. Format version of this util.</li>_<li>2. Name of the TypeSerializerSnapshot class.</li>_<li>3. The version of the TypeSerializerSnapshot's binary format.</li>_<li>4. The actual serializer snapshot data.</li>_</ul>;@SuppressWarnings("deprecation")_		@Override_		public void write(DataOutputView out) throws IOException {_			setSerializerForWriteIfOldPath(serializerSnapshot, serializer)___			_			super.write(out)___			TypeSerializerSnapshot.writeVersionedSnapshot(out, serializerSnapshot)__		};binary,format,layout,of,a,written,serializer,snapshot,is,as,follows,ul,li,1,format,version,of,this,util,li,li,2,name,of,the,type,serializer,snapshot,class,li,li,3,the,version,of,the,type,serializer,snapshot,s,binary,format,li,li,4,the,actual,serializer,snapshot,data,li,ul;suppress,warnings,deprecation,override,public,void,write,data,output,view,out,throws,ioexception,set,serializer,for,write,if,old,path,serializer,snapshot,serializer,super,write,out,type,serializer,snapshot,write,versioned,snapshot,out,serializer,snapshot
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> @SuppressWarnings("deprecation") 		@Override 		public void write(DataOutputView out) throws IOException;1540907751;Binary format layout of a written serializer snapshot is as follows:__<ul>_<li>1. Format version of this util.</li>_<li>2. Name of the TypeSerializerSnapshot class.</li>_<li>3. The version of the TypeSerializerSnapshot's binary format.</li>_<li>4. The actual serializer snapshot data.</li>_</ul>;@SuppressWarnings("deprecation")_		@Override_		public void write(DataOutputView out) throws IOException {_			setSerializerForWriteIfOldPath(serializerSnapshot, serializer)___			_			super.write(out)___			TypeSerializerSnapshot.writeVersionedSnapshot(out, serializerSnapshot)__		};binary,format,layout,of,a,written,serializer,snapshot,is,as,follows,ul,li,1,format,version,of,this,util,li,li,2,name,of,the,type,serializer,snapshot,class,li,li,3,the,version,of,the,type,serializer,snapshot,s,binary,format,li,li,4,the,actual,serializer,snapshot,data,li,ul;suppress,warnings,deprecation,override,public,void,write,data,output,view,out,throws,ioexception,set,serializer,for,write,if,old,path,serializer,snapshot,serializer,super,write,out,type,serializer,snapshot,write,versioned,snapshot,out,serializer,snapshot
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> TypeSerializerSnapshotSerializationProxy( 			ClassLoader userCodeClassLoader, 			@Nullable TypeSerializer<T> existingPriorSerializer);1540907751;Constructor for reading serializers.;TypeSerializerSnapshotSerializationProxy(_			ClassLoader userCodeClassLoader,_			@Nullable TypeSerializer<T> existingPriorSerializer) {_			this.userCodeClassLoader = Preconditions.checkNotNull(userCodeClassLoader)__			this.serializer = existingPriorSerializer__		};constructor,for,reading,serializers;type,serializer,snapshot,serialization,proxy,class,loader,user,code,class,loader,nullable,type,serializer,t,existing,prior,serializer,this,user,code,class,loader,preconditions,check,not,null,user,code,class,loader,this,serializer,existing,prior,serializer
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> TypeSerializerSnapshotSerializationProxy( 			ClassLoader userCodeClassLoader, 			@Nullable TypeSerializer<T> existingPriorSerializer);1540907751;Constructor for reading serializers.;TypeSerializerSnapshotSerializationProxy(_			ClassLoader userCodeClassLoader,_			@Nullable TypeSerializer<T> existingPriorSerializer) {_			this.userCodeClassLoader = Preconditions.checkNotNull(userCodeClassLoader)__			this.serializer = existingPriorSerializer__		};constructor,for,reading,serializers;type,serializer,snapshot,serialization,proxy,class,loader,user,code,class,loader,nullable,type,serializer,t,existing,prior,serializer,this,user,code,class,loader,preconditions,check,not,null,user,code,class,loader,this,serializer,existing,prior,serializer
TypeSerializerSnapshotSerializationUtil -> TypeSerializerSnapshotSerializationProxy -> TypeSerializerSnapshotSerializationProxy( 			ClassLoader userCodeClassLoader, 			@Nullable TypeSerializer<T> existingPriorSerializer);1540907751;Constructor for reading serializers.;TypeSerializerSnapshotSerializationProxy(_			ClassLoader userCodeClassLoader,_			@Nullable TypeSerializer<T> existingPriorSerializer) {_			this.userCodeClassLoader = Preconditions.checkNotNull(userCodeClassLoader)__			this.serializer = existingPriorSerializer__		};constructor,for,reading,serializers;type,serializer,snapshot,serialization,proxy,class,loader,user,code,class,loader,nullable,type,serializer,t,existing,prior,serializer,this,user,code,class,loader,preconditions,check,not,null,user,code,class,loader,this,serializer,existing,prior,serializer
