# id;timestamp;commentText;codeText;commentWords;codeWords
VersionedIOReadableWritable -> protected void resolveVersionRead(int foundVersion) throws VersionMismatchException;1481734251;This method is a hook to react on the version tag that we find during read. This can also be used to initialize_further read logic w.r.t. the version at hand._Default implementation of this method just checks the compatibility of a version number against the own version.__@param foundVersion the version found from reading the input stream_@throws VersionMismatchException thrown when serialization versions mismatch;protected void resolveVersionRead(int foundVersion) throws VersionMismatchException {_		if (!isCompatibleVersion(foundVersion)) {_			long expectedVersion = getVersion()__			throw new VersionMismatchException(_					"Incompatible version: found " + foundVersion + ", required " + expectedVersion)__		}_	};this,method,is,a,hook,to,react,on,the,version,tag,that,we,find,during,read,this,can,also,be,used,to,initialize,further,read,logic,w,r,t,the,version,at,hand,default,implementation,of,this,method,just,checks,the,compatibility,of,a,version,number,against,the,own,version,param,found,version,the,version,found,from,reading,the,input,stream,throws,version,mismatch,exception,thrown,when,serialization,versions,mismatch;protected,void,resolve,version,read,int,found,version,throws,version,mismatch,exception,if,is,compatible,version,found,version,long,expected,version,get,version,throw,new,version,mismatch,exception,incompatible,version,found,found,version,required,expected,version
VersionedIOReadableWritable -> protected void resolveVersionRead(int foundVersion) throws VersionMismatchException;1487548883;This method is a hook to react on the version tag that we find during read. This can also be used to initialize_further read logic w.r.t. the version at hand._Default implementation of this method just checks the compatibility of a version number against the own version.__@param foundVersion the version found from reading the input stream_@throws VersionMismatchException thrown when serialization versions mismatch;protected void resolveVersionRead(int foundVersion) throws VersionMismatchException {_		if (!isCompatibleVersion(foundVersion)) {_			long expectedVersion = getVersion()__			throw new VersionMismatchException(_					"Incompatible version: found " + foundVersion + ", required " + expectedVersion)__		}_	};this,method,is,a,hook,to,react,on,the,version,tag,that,we,find,during,read,this,can,also,be,used,to,initialize,further,read,logic,w,r,t,the,version,at,hand,default,implementation,of,this,method,just,checks,the,compatibility,of,a,version,number,against,the,own,version,param,found,version,the,version,found,from,reading,the,input,stream,throws,version,mismatch,exception,thrown,when,serialization,versions,mismatch;protected,void,resolve,version,read,int,found,version,throws,version,mismatch,exception,if,is,compatible,version,found,version,long,expected,version,get,version,throw,new,version,mismatch,exception,incompatible,version,found,found,version,required,expected,version
VersionedIOReadableWritable -> protected void resolveVersionRead(int foundVersion) throws VersionMismatchException;1492678790;This method is a hook to react on the version tag that we find during read. This can also be used to initialize_further read logic w.r.t. the version at hand._Default implementation of this method just checks the compatibility of a version number against the own version.__@param foundVersion the version found from reading the input stream_@throws VersionMismatchException thrown when serialization versions mismatch;protected void resolveVersionRead(int foundVersion) throws VersionMismatchException {_		if (!isCompatibleVersion(foundVersion)) {_			int expectedVersion = getVersion()__			throw new VersionMismatchException(_					"Incompatible version: found " + foundVersion + ", required " + expectedVersion)__		}_	};this,method,is,a,hook,to,react,on,the,version,tag,that,we,find,during,read,this,can,also,be,used,to,initialize,further,read,logic,w,r,t,the,version,at,hand,default,implementation,of,this,method,just,checks,the,compatibility,of,a,version,number,against,the,own,version,param,found,version,the,version,found,from,reading,the,input,stream,throws,version,mismatch,exception,thrown,when,serialization,versions,mismatch;protected,void,resolve,version,read,int,found,version,throws,version,mismatch,exception,if,is,compatible,version,found,version,int,expected,version,get,version,throw,new,version,mismatch,exception,incompatible,version,found,found,version,required,expected,version
VersionedIOReadableWritable -> public int[] getCompatibleVersions();1494657925;Returns the compatible version values.__<p>By default, the base implementation recognizes only the current version (identified by {@link #getVersion()})_as compatible. This method can be used as a hook and may be overridden to identify more compatible versions.__@return an array of integers representing the compatible version values.;public int[] getCompatibleVersions() {_		return new int[] {getVersion()}__	};returns,the,compatible,version,values,p,by,default,the,base,implementation,recognizes,only,the,current,version,identified,by,link,get,version,as,compatible,this,method,can,be,used,as,a,hook,and,may,be,overridden,to,identify,more,compatible,versions,return,an,array,of,integers,representing,the,compatible,version,values;public,int,get,compatible,versions,return,new,int,get,version
VersionedIOReadableWritable -> public int[] getCompatibleVersions();1539149027;Returns the compatible version values.__<p>By default, the base implementation recognizes only the current version (identified by {@link #getVersion()})_as compatible. This method can be used as a hook and may be overridden to identify more compatible versions.__@return an array of integers representing the compatible version values.;public int[] getCompatibleVersions() {_		return new int[] {getVersion()}__	};returns,the,compatible,version,values,p,by,default,the,base,implementation,recognizes,only,the,current,version,identified,by,link,get,version,as,compatible,this,method,can,be,used,as,a,hook,and,may,be,overridden,to,identify,more,compatible,versions,return,an,array,of,integers,representing,the,compatible,version,values;public,int,get,compatible,versions,return,new,int,get,version
VersionedIOReadableWritable -> public int[] getCompatibleVersions();1539149114;Returns the compatible version values.__<p>By default, the base implementation recognizes only the current version (identified by {@link #getVersion()})_as compatible. This method can be used as a hook and may be overridden to identify more compatible versions.__@return an array of integers representing the compatible version values.;public int[] getCompatibleVersions() {_		return new int[] {getVersion()}__	};returns,the,compatible,version,values,p,by,default,the,base,implementation,recognizes,only,the,current,version,identified,by,link,get,version,as,compatible,this,method,can,be,used,as,a,hook,and,may,be,overridden,to,identify,more,compatible,versions,return,an,array,of,integers,representing,the,compatible,version,values;public,int,get,compatible,versions,return,new,int,get,version
VersionedIOReadableWritable -> public boolean isCompatibleVersion(int version);1481734251;Checks for compatibility between this and the found version. Subclasses can override this methods in case of_intended backwards backwards compatibility.__@param version version number to compare against._@return true, iff this is compatible to the passed version.;public boolean isCompatibleVersion(int version) {_		return getVersion() == version__	};checks,for,compatibility,between,this,and,the,found,version,subclasses,can,override,this,methods,in,case,of,intended,backwards,backwards,compatibility,param,version,version,number,to,compare,against,return,true,iff,this,is,compatible,to,the,passed,version;public,boolean,is,compatible,version,int,version,return,get,version,version
VersionedIOReadableWritable -> public boolean isCompatibleVersion(int version);1487548883;Checks for compatibility between this and the found version. Subclasses can override this methods in case of_intended backwards backwards compatibility.__@param version version number to compare against._@return true, iff this is compatible to the passed version.;public boolean isCompatibleVersion(int version) {_		return getVersion() == version__	};checks,for,compatibility,between,this,and,the,found,version,subclasses,can,override,this,methods,in,case,of,intended,backwards,backwards,compatibility,param,version,version,number,to,compare,against,return,true,iff,this,is,compatible,to,the,passed,version;public,boolean,is,compatible,version,int,version,return,get,version,version
VersionedIOReadableWritable -> public boolean isCompatibleVersion(int version);1492678790;Checks for compatibility between this and the found version. Subclasses can override this methods in case of_intended backwards backwards compatibility.__@param version version number to compare against._@return true, iff this is compatible to the passed version.;public boolean isCompatibleVersion(int version) {_		return getVersion() == version__	};checks,for,compatibility,between,this,and,the,found,version,subclasses,can,override,this,methods,in,case,of,intended,backwards,backwards,compatibility,param,version,version,number,to,compare,against,return,true,iff,this,is,compatible,to,the,passed,version;public,boolean,is,compatible,version,int,version,return,get,version,version
VersionedIOReadableWritable -> public int getReadVersion();1494657925;Returns the found serialization version. If this instance was not read from serialized bytes_but simply instantiated, then the current version is returned.__@return the read serialization version, or the current version if the instance was not read from bytes.;public int getReadVersion() {_		return (readVersion == Integer.MIN_VALUE) ? getVersion() : readVersion__	};returns,the,found,serialization,version,if,this,instance,was,not,read,from,serialized,bytes,but,simply,instantiated,then,the,current,version,is,returned,return,the,read,serialization,version,or,the,current,version,if,the,instance,was,not,read,from,bytes;public,int,get,read,version,return,read,version,integer,get,version,read,version
VersionedIOReadableWritable -> public int getReadVersion();1539149027;Returns the found serialization version. If this instance was not read from serialized bytes_but simply instantiated, then the current version is returned.__@return the read serialization version, or the current version if the instance was not read from bytes.;public int getReadVersion() {_		return (readVersion == Integer.MIN_VALUE) ? getVersion() : readVersion__	};returns,the,found,serialization,version,if,this,instance,was,not,read,from,serialized,bytes,but,simply,instantiated,then,the,current,version,is,returned,return,the,read,serialization,version,or,the,current,version,if,the,instance,was,not,read,from,bytes;public,int,get,read,version,return,read,version,integer,get,version,read,version
VersionedIOReadableWritable -> public int getReadVersion();1539149114;Returns the found serialization version. If this instance was not read from serialized bytes_but simply instantiated, then the current version is returned.__@return the read serialization version, or the current version if the instance was not read from bytes.;public int getReadVersion() {_		return (readVersion == Integer.MIN_VALUE) ? getVersion() : readVersion__	};returns,the,found,serialization,version,if,this,instance,was,not,read,from,serialized,bytes,but,simply,instantiated,then,the,current,version,is,returned,return,the,read,serialization,version,or,the,current,version,if,the,instance,was,not,read,from,bytes;public,int,get,read,version,return,read,version,integer,get,version,read,version
