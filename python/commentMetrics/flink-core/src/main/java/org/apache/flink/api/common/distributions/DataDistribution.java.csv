# id;timestamp;commentText;codeText;commentWords;codeWords
DataDistribution -> Key<?>[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;1405024514;Returns the i'th bucket's upper bound, given that the distribution is to be_split into {@code totalBuckets} buckets._<p>_Assuming <i>n</i> buckets, let {@code B_i} be the result from calling {@code getBucketBoundary(i, n)},_then the distribution will partition the data domain in the following fashion:_<pre>_(-inf, B_1] (B_1, B_2] ... (B_n-2, B_n-1] (B_n-1, inf)_</pre>__<p>_Note: The last bucket's upper bound is actually discarded by many algorithms._The last bucket is assumed to hold all values <i>v</i> such that_{@code v &gt_ getBucketBoundary(n-1, n)}, where <i>n</i> is the number of buckets.__@param bucketNum The number of the bucket for which to get the upper bound._@param totalNumBuckets The number of buckets to split the data into.__@return A record whose values act as bucket boundaries for the specified bucket.;Key<?>[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;returns,the,i,th,bucket,s,upper,bound,given,that,the,distribution,is,to,be,split,into,code,total,buckets,buckets,p,assuming,i,n,i,buckets,let,code,be,the,result,from,calling,code,get,bucket,boundary,i,n,then,the,distribution,will,partition,the,data,domain,in,the,following,fashion,pre,inf,2,1,1,inf,pre,p,note,the,last,bucket,s,upper,bound,is,actually,discarded,by,many,algorithms,the,last,bucket,is,assumed,to,hold,all,values,i,v,i,such,that,code,v,gt,get,bucket,boundary,n,1,n,where,i,n,i,is,the,number,of,buckets,param,bucket,num,the,number,of,the,bucket,for,which,to,get,the,upper,bound,param,total,num,buckets,the,number,of,buckets,to,split,the,data,into,return,a,record,whose,values,act,as,bucket,boundaries,for,the,specified,bucket;key,get,bucket,boundary,int,bucket,num,int,total,num,buckets
DataDistribution -> Key<?>[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;1405090423;Returns the i'th bucket's upper bound, given that the distribution is to be_split into {@code totalBuckets} buckets._<p>_Assuming <i>n</i> buckets, let {@code B_i} be the result from calling {@code getBucketBoundary(i, n)},_then the distribution will partition the data domain in the following fashion:_<pre>_(-inf, B_1] (B_1, B_2] ... (B_n-2, B_n-1] (B_n-1, inf)_</pre>__<p>_Note: The last bucket's upper bound is actually discarded by many algorithms._The last bucket is assumed to hold all values <i>v</i> such that_{@code v &gt_ getBucketBoundary(n-1, n)}, where <i>n</i> is the number of buckets.__@param bucketNum The number of the bucket for which to get the upper bound._@param totalNumBuckets The number of buckets to split the data into.__@return A record whose values act as bucket boundaries for the specified bucket.;Key<?>[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;returns,the,i,th,bucket,s,upper,bound,given,that,the,distribution,is,to,be,split,into,code,total,buckets,buckets,p,assuming,i,n,i,buckets,let,code,be,the,result,from,calling,code,get,bucket,boundary,i,n,then,the,distribution,will,partition,the,data,domain,in,the,following,fashion,pre,inf,2,1,1,inf,pre,p,note,the,last,bucket,s,upper,bound,is,actually,discarded,by,many,algorithms,the,last,bucket,is,assumed,to,hold,all,values,i,v,i,such,that,code,v,gt,get,bucket,boundary,n,1,n,where,i,n,i,is,the,number,of,buckets,param,bucket,num,the,number,of,the,bucket,for,which,to,get,the,upper,bound,param,total,num,buckets,the,number,of,buckets,to,split,the,data,into,return,a,record,whose,values,act,as,bucket,boundaries,for,the,specified,bucket;key,get,bucket,boundary,int,bucket,num,int,total,num,buckets
DataDistribution -> Key<?>[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;1411473593;Returns the i'th bucket's upper bound, given that the distribution is to be_split into {@code totalBuckets} buckets._<p>_Assuming <i>n</i> buckets, let {@code B_i} be the result from calling {@code getBucketBoundary(i, n)},_then the distribution will partition the data domain in the following fashion:_<pre>_(-inf, B_1] (B_1, B_2] ... (B_n-2, B_n-1] (B_n-1, inf)_</pre>__<p>_Note: The last bucket's upper bound is actually discarded by many algorithms._The last bucket is assumed to hold all values <i>v</i> such that_{@code v &gt_ getBucketBoundary(n-1, n)}, where <i>n</i> is the number of buckets.__@param bucketNum The number of the bucket for which to get the upper bound._@param totalNumBuckets The number of buckets to split the data into.__@return A record whose values act as bucket boundaries for the specified bucket.;Key<?>[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;returns,the,i,th,bucket,s,upper,bound,given,that,the,distribution,is,to,be,split,into,code,total,buckets,buckets,p,assuming,i,n,i,buckets,let,code,be,the,result,from,calling,code,get,bucket,boundary,i,n,then,the,distribution,will,partition,the,data,domain,in,the,following,fashion,pre,inf,2,1,1,inf,pre,p,note,the,last,bucket,s,upper,bound,is,actually,discarded,by,many,algorithms,the,last,bucket,is,assumed,to,hold,all,values,i,v,i,such,that,code,v,gt,get,bucket,boundary,n,1,n,where,i,n,i,is,the,number,of,buckets,param,bucket,num,the,number,of,the,bucket,for,which,to,get,the,upper,bound,param,total,num,buckets,the,number,of,buckets,to,split,the,data,into,return,a,record,whose,values,act,as,bucket,boundaries,for,the,specified,bucket;key,get,bucket,boundary,int,bucket,num,int,total,num,buckets
DataDistribution -> Key<?>[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;1446112342;Returns the i'th bucket's upper bound, given that the distribution is to be_split into {@code totalBuckets} buckets._<p>_Assuming <i>n</i> buckets, let {@code B_i} be the result from calling {@code getBucketBoundary(i, n)},_then the distribution will partition the data domain in the following fashion:_<pre>_(-inf, B_1] (B_1, B_2] ... (B_n-2, B_n-1] (B_n-1, inf)_</pre>__<p>_Note: The last bucket's upper bound is actually discarded by many algorithms._The last bucket is assumed to hold all values <i>v</i> such that_{@code v > getBucketBoundary(n-1, n)}, where <i>n</i> is the number of buckets.__@param bucketNum The number of the bucket for which to get the upper bound._@param totalNumBuckets The number of buckets to split the data into.__@return A record whose values act as bucket boundaries for the specified bucket.;Key<?>[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;returns,the,i,th,bucket,s,upper,bound,given,that,the,distribution,is,to,be,split,into,code,total,buckets,buckets,p,assuming,i,n,i,buckets,let,code,be,the,result,from,calling,code,get,bucket,boundary,i,n,then,the,distribution,will,partition,the,data,domain,in,the,following,fashion,pre,inf,2,1,1,inf,pre,p,note,the,last,bucket,s,upper,bound,is,actually,discarded,by,many,algorithms,the,last,bucket,is,assumed,to,hold,all,values,i,v,i,such,that,code,v,get,bucket,boundary,n,1,n,where,i,n,i,is,the,number,of,buckets,param,bucket,num,the,number,of,the,bucket,for,which,to,get,the,upper,bound,param,total,num,buckets,the,number,of,buckets,to,split,the,data,into,return,a,record,whose,values,act,as,bucket,boundaries,for,the,specified,bucket;key,get,bucket,boundary,int,bucket,num,int,total,num,buckets
DataDistribution -> Object[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;1450712612;Returns the i'th bucket's upper bound, given that the distribution is to be_split into {@code totalBuckets} buckets._<p>_Assuming <i>n</i> buckets, let {@code B_i} be the result from calling {@code getBucketBoundary(i, n)},_then the distribution will partition the data domain in the following fashion:_<pre>_(-inf, B_1] (B_1, B_2] ... (B_n-2, B_n-1] (B_n-1, inf)_</pre>__<p>_Note: The last bucket's upper bound is actually discarded by many algorithms._The last bucket is assumed to hold all values <i>v</i> such that_{@code v > getBucketBoundary(n-1, n)}, where <i>n</i> is the number of buckets.__@param bucketNum The number of the bucket for which to get the upper bound._@param totalNumBuckets The number of buckets to split the data into.__@return A record whose values act as bucket boundaries for the specified bucket.;Object[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;returns,the,i,th,bucket,s,upper,bound,given,that,the,distribution,is,to,be,split,into,code,total,buckets,buckets,p,assuming,i,n,i,buckets,let,code,be,the,result,from,calling,code,get,bucket,boundary,i,n,then,the,distribution,will,partition,the,data,domain,in,the,following,fashion,pre,inf,2,1,1,inf,pre,p,note,the,last,bucket,s,upper,bound,is,actually,discarded,by,many,algorithms,the,last,bucket,is,assumed,to,hold,all,values,i,v,i,such,that,code,v,get,bucket,boundary,n,1,n,where,i,n,i,is,the,number,of,buckets,param,bucket,num,the,number,of,the,bucket,for,which,to,get,the,upper,bound,param,total,num,buckets,the,number,of,buckets,to,split,the,data,into,return,a,record,whose,values,act,as,bucket,boundaries,for,the,specified,bucket;object,get,bucket,boundary,int,bucket,num,int,total,num,buckets
DataDistribution -> Object[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;1455479358;Returns the i'th bucket's upper bound, given that the distribution is to be_split into {@code totalBuckets} buckets._<p>_Assuming <i>n</i> buckets, let {@code B_i} be the result from calling {@code getBucketBoundary(i, n)},_then the distribution will partition the data domain in the following fashion:_<pre>_(-inf, B_1] (B_1, B_2] ... (B_n-2, B_n-1] (B_n-1, inf)_</pre>__<p>_Note: The last bucket's upper bound is actually discarded by many algorithms._The last bucket is assumed to hold all values <i>v</i> such that_{@code v > getBucketBoundary(n-1, n)}, where <i>n</i> is the number of buckets.__@param bucketNum The number of the bucket for which to get the upper bound._@param totalNumBuckets The number of buckets to split the data into.__@return A record whose values act as bucket boundaries for the specified bucket.;Object[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;returns,the,i,th,bucket,s,upper,bound,given,that,the,distribution,is,to,be,split,into,code,total,buckets,buckets,p,assuming,i,n,i,buckets,let,code,be,the,result,from,calling,code,get,bucket,boundary,i,n,then,the,distribution,will,partition,the,data,domain,in,the,following,fashion,pre,inf,2,1,1,inf,pre,p,note,the,last,bucket,s,upper,bound,is,actually,discarded,by,many,algorithms,the,last,bucket,is,assumed,to,hold,all,values,i,v,i,such,that,code,v,get,bucket,boundary,n,1,n,where,i,n,i,is,the,number,of,buckets,param,bucket,num,the,number,of,the,bucket,for,which,to,get,the,upper,bound,param,total,num,buckets,the,number,of,buckets,to,split,the,data,into,return,a,record,whose,values,act,as,bucket,boundaries,for,the,specified,bucket;object,get,bucket,boundary,int,bucket,num,int,total,num,buckets
DataDistribution -> Object[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;1458743533;Returns the i'th bucket's upper bound, given that the distribution is to be_split into {@code totalBuckets} buckets._<p>_Assuming <i>n</i> buckets, let {@code B_i} be the result from calling {@code getBucketBoundary(i, n)},_then the distribution will partition the data domain in the following fashion:_<pre>_(-inf, B_1] (B_1, B_2] ... (B_n-2, B_n-1] (B_n-1, inf)_</pre>__<p>_Note: The last bucket's upper bound is actually discarded by many algorithms._The last bucket is assumed to hold all values <i>v</i> such that_{@code v > getBucketBoundary(n-1, n)}, where <i>n</i> is the number of buckets.__@param bucketNum The number of the bucket for which to get the upper bound._@param totalNumBuckets The number of buckets to split the data into.__@return A record whose values act as bucket boundaries for the specified bucket.;Object[] getBucketBoundary(int bucketNum, int totalNumBuckets)_;returns,the,i,th,bucket,s,upper,bound,given,that,the,distribution,is,to,be,split,into,code,total,buckets,buckets,p,assuming,i,n,i,buckets,let,code,be,the,result,from,calling,code,get,bucket,boundary,i,n,then,the,distribution,will,partition,the,data,domain,in,the,following,fashion,pre,inf,2,1,1,inf,pre,p,note,the,last,bucket,s,upper,bound,is,actually,discarded,by,many,algorithms,the,last,bucket,is,assumed,to,hold,all,values,i,v,i,such,that,code,v,get,bucket,boundary,n,1,n,where,i,n,i,is,the,number,of,buckets,param,bucket,num,the,number,of,the,bucket,for,which,to,get,the,upper,bound,param,total,num,buckets,the,number,of,buckets,to,split,the,data,into,return,a,record,whose,values,act,as,bucket,boundaries,for,the,specified,bucket;object,get,bucket,boundary,int,bucket,num,int,total,num,buckets
DataDistribution -> int getNumberOfFields()_;1405024514;The number of fields in the (composite) key. This determines how many fields in the records define_the bucket. The number of fields must be the size of the array returned by the function_{@link #getBucketBoundary(int, int)}.__@return The number of fields in the (composite) key.;int getNumberOfFields()_;the,number,of,fields,in,the,composite,key,this,determines,how,many,fields,in,the,records,define,the,bucket,the,number,of,fields,must,be,the,size,of,the,array,returned,by,the,function,link,get,bucket,boundary,int,int,return,the,number,of,fields,in,the,composite,key;int,get,number,of,fields
DataDistribution -> int getNumberOfFields()_;1405090423;The number of fields in the (composite) key. This determines how many fields in the records define_the bucket. The number of fields must be the size of the array returned by the function_{@link #getBucketBoundary(int, int)}.__@return The number of fields in the (composite) key.;int getNumberOfFields()_;the,number,of,fields,in,the,composite,key,this,determines,how,many,fields,in,the,records,define,the,bucket,the,number,of,fields,must,be,the,size,of,the,array,returned,by,the,function,link,get,bucket,boundary,int,int,return,the,number,of,fields,in,the,composite,key;int,get,number,of,fields
DataDistribution -> int getNumberOfFields()_;1411473593;The number of fields in the (composite) key. This determines how many fields in the records define_the bucket. The number of fields must be the size of the array returned by the function_{@link #getBucketBoundary(int, int)}.__@return The number of fields in the (composite) key.;int getNumberOfFields()_;the,number,of,fields,in,the,composite,key,this,determines,how,many,fields,in,the,records,define,the,bucket,the,number,of,fields,must,be,the,size,of,the,array,returned,by,the,function,link,get,bucket,boundary,int,int,return,the,number,of,fields,in,the,composite,key;int,get,number,of,fields
DataDistribution -> int getNumberOfFields()_;1446112342;The number of fields in the (composite) key. This determines how many fields in the records define_the bucket. The number of fields must be the size of the array returned by the function_{@link #getBucketBoundary(int, int)}.__@return The number of fields in the (composite) key.;int getNumberOfFields()_;the,number,of,fields,in,the,composite,key,this,determines,how,many,fields,in,the,records,define,the,bucket,the,number,of,fields,must,be,the,size,of,the,array,returned,by,the,function,link,get,bucket,boundary,int,int,return,the,number,of,fields,in,the,composite,key;int,get,number,of,fields
DataDistribution -> int getNumberOfFields()_;1450712612;The number of fields in the (composite) key. This determines how many fields in the records define_the bucket. The number of fields must be the size of the array returned by the function_{@link #getBucketBoundary(int, int)}.__@return The number of fields in the (composite) key.;int getNumberOfFields()_;the,number,of,fields,in,the,composite,key,this,determines,how,many,fields,in,the,records,define,the,bucket,the,number,of,fields,must,be,the,size,of,the,array,returned,by,the,function,link,get,bucket,boundary,int,int,return,the,number,of,fields,in,the,composite,key;int,get,number,of,fields
DataDistribution -> int getNumberOfFields()_;1455479358;The number of fields in the (composite) key. This determines how many fields in the records define_the bucket. The number of fields must be the size of the array returned by the function_{@link #getBucketBoundary(int, int)}.__@return The number of fields in the (composite) key.;int getNumberOfFields()_;the,number,of,fields,in,the,composite,key,this,determines,how,many,fields,in,the,records,define,the,bucket,the,number,of,fields,must,be,the,size,of,the,array,returned,by,the,function,link,get,bucket,boundary,int,int,return,the,number,of,fields,in,the,composite,key;int,get,number,of,fields
DataDistribution -> int getNumberOfFields()_;1458743533;The number of fields in the (composite) key. This determines how many fields in the records define_the bucket. The number of fields must be the size of the array returned by the function_{@link #getBucketBoundary(int, int)}.__@return The number of fields in the (composite) key.;int getNumberOfFields()_;the,number,of,fields,in,the,composite,key,this,determines,how,many,fields,in,the,records,define,the,bucket,the,number,of,fields,must,be,the,size,of,the,array,returned,by,the,function,link,get,bucket,boundary,int,int,return,the,number,of,fields,in,the,composite,key;int,get,number,of,fields
