# id;timestamp;commentText;codeText;commentWords;codeWords
PythonDualInputStreamer -> public final void streamBufferWithGroups(Iterator<IN1> iterator1, Iterator<IN2> iterator2, Collector<OUT> c) throws IOException;1489703169;Sends all values contained in both iterators to the external process and collects all results.__@param iterator1 first input stream_@param iterator2 second input stream_@param c         collector_@throws IOException;public final void streamBufferWithGroups(Iterator<IN1> iterator1, Iterator<IN2> iterator2, Collector<OUT> c) throws IOException {_		SingleElementPushBackIterator<IN1> i1 = new SingleElementPushBackIterator<>(iterator1)__		SingleElementPushBackIterator<IN2> i2 = new SingleElementPushBackIterator<>(iterator2)__		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext()) {_								size = sender.sendBuffer1(i1)__								sendWriteNotification(size, i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext()) {_								size = sender.sendBuffer2(i2)__								sendWriteNotification(size, i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try {_								outPrinter.join()__							} catch (InterruptedException e) {_								outPrinter.interrupt()__							}_							try {_								errorPrinter.join()__							} catch (InterruptedException e) {_								errorPrinter.interrupt()__							}_							throw new RuntimeException(_								"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,iterator1,first,input,stream,param,iterator2,second,input,stream,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,in1,iterator1,iterator,in2,iterator2,collector,out,c,throws,ioexception,single,element,push,back,iterator,in1,i1,new,single,element,push,back,iterator,iterator1,single,element,push,back,iterator,in2,i2,new,single,element,push,back,iterator,iterator2,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,size,sender,send,buffer1,i1,send,write,notification,size,i1,has,next,break,case,if,i2,has,next,size,sender,send,buffer2,i2,send,write,notification,size,i2,has,next,break,case,return,case,try,out,printer,join,catch,interrupted,exception,e,out,printer,interrupt,try,error,printer,join,catch,interrupted,exception,e,error,printer,interrupt,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonDualInputStreamer -> public final void streamBufferWithGroups(Iterator<IN1> iterator1, Iterator<IN2> iterator2, Collector<OUT> c) throws IOException;1490954118;Sends all values contained in both iterators to the external process and collects all results.__@param iterator1 first input stream_@param iterator2 second input stream_@param c         collector_@throws IOException;public final void streamBufferWithGroups(Iterator<IN1> iterator1, Iterator<IN2> iterator2, Collector<OUT> c) throws IOException {_		SingleElementPushBackIterator<IN1> i1 = new SingleElementPushBackIterator<>(iterator1)__		SingleElementPushBackIterator<IN2> i2 = new SingleElementPushBackIterator<>(iterator2)__		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext()) {_								size = sender.sendBuffer1(i1)__								sendWriteNotification(size, i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext()) {_								size = sender.sendBuffer2(i2)__								sendWriteNotification(size, i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try {_								outPrinter.join()__							} catch (InterruptedException e) {_								outPrinter.interrupt()__							}_							try {_								errorPrinter.join()__							} catch (InterruptedException e) {_								errorPrinter.interrupt()__							}_							throw new RuntimeException(_								"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,iterator1,first,input,stream,param,iterator2,second,input,stream,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,in1,iterator1,iterator,in2,iterator2,collector,out,c,throws,ioexception,single,element,push,back,iterator,in1,i1,new,single,element,push,back,iterator,iterator1,single,element,push,back,iterator,in2,i2,new,single,element,push,back,iterator,iterator2,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,size,sender,send,buffer1,i1,send,write,notification,size,i1,has,next,break,case,if,i2,has,next,size,sender,send,buffer2,i2,send,write,notification,size,i2,has,next,break,case,return,case,try,out,printer,join,catch,interrupted,exception,e,out,printer,interrupt,try,error,printer,join,catch,interrupted,exception,e,error,printer,interrupt,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonDualInputStreamer -> public final void streamBufferWithGroups(Iterator<IN1> iterator1, Iterator<IN2> iterator2, Collector<OUT> c);1492690134;Sends all values contained in both iterators to the external process and collects all results.__@param iterator1 first input stream_@param iterator2 second input stream_@param c         collector;public final void streamBufferWithGroups(Iterator<IN1> iterator1, Iterator<IN2> iterator2, Collector<OUT> c) {_		SingleElementPushBackIterator<IN1> i1 = new SingleElementPushBackIterator<>(iterator1)__		SingleElementPushBackIterator<IN2> i2 = new SingleElementPushBackIterator<>(iterator2)__		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext()) {_								size = sender.sendBuffer1(i1)__								sendWriteNotification(size, i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext()) {_								size = sender.sendBuffer2(i2)__								sendWriteNotification(size, i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try {_								outPrinter.join()__							} catch (InterruptedException e) {_								outPrinter.interrupt()__							}_							try {_								errorPrinter.join()__							} catch (InterruptedException e) {_								errorPrinter.interrupt()__							}_							throw new RuntimeException(_								"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		} catch (Exception e) {_			throw new RuntimeException("Critical failure for task " + function.getRuntimeContext().getTaskName() + ". " + msg.get(), e)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,iterator1,first,input,stream,param,iterator2,second,input,stream,param,c,collector;public,final,void,stream,buffer,with,groups,iterator,in1,iterator1,iterator,in2,iterator2,collector,out,c,single,element,push,back,iterator,in1,i1,new,single,element,push,back,iterator,iterator1,single,element,push,back,iterator,in2,i2,new,single,element,push,back,iterator,iterator2,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,size,sender,send,buffer1,i1,send,write,notification,size,i1,has,next,break,case,if,i2,has,next,size,sender,send,buffer2,i2,send,write,notification,size,i2,has,next,break,case,return,case,try,out,printer,join,catch,interrupted,exception,e,out,printer,interrupt,try,error,printer,join,catch,interrupted,exception,e,error,printer,interrupt,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg,catch,exception,e,throw,new,runtime,exception,critical,failure,for,task,function,get,runtime,context,get,task,name,msg,get,e
PythonDualInputStreamer -> public final void streamBufferWithGroups(Iterator<IN1> iterator1, Iterator<IN2> iterator2, Collector<OUT> c);1493741028;Sends all values contained in both iterators to the external process and collects all results.__@param iterator1 first input stream_@param iterator2 second input stream_@param c         collector;public final void streamBufferWithGroups(Iterator<IN1> iterator1, Iterator<IN2> iterator2, Collector<OUT> c) {_		SingleElementPushBackIterator<IN1> i1 = new SingleElementPushBackIterator<>(iterator1)__		SingleElementPushBackIterator<IN2> i2 = new SingleElementPushBackIterator<>(iterator2)__		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext()) {_								size = sender.sendBuffer1(i1)__								sendWriteNotification(size, i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext()) {_								size = sender.sendBuffer2(i2)__								sendWriteNotification(size, i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try {_								outPrinter.join()__							} catch (InterruptedException e) {_								outPrinter.interrupt()__							}_							try {_								errorPrinter.join()__							} catch (InterruptedException e) {_								errorPrinter.interrupt()__							}_							throw new RuntimeException(_								"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		} catch (Exception e) {_			throw new RuntimeException("Critical failure for task " + function.getRuntimeContext().getTaskName() + ". " + msg.get(), e)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,iterator1,first,input,stream,param,iterator2,second,input,stream,param,c,collector;public,final,void,stream,buffer,with,groups,iterator,in1,iterator1,iterator,in2,iterator2,collector,out,c,single,element,push,back,iterator,in1,i1,new,single,element,push,back,iterator,iterator1,single,element,push,back,iterator,in2,i2,new,single,element,push,back,iterator,iterator2,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,size,sender,send,buffer1,i1,send,write,notification,size,i1,has,next,break,case,if,i2,has,next,size,sender,send,buffer2,i2,send,write,notification,size,i2,has,next,break,case,return,case,try,out,printer,join,catch,interrupted,exception,e,out,printer,interrupt,try,error,printer,join,catch,interrupted,exception,e,error,printer,interrupt,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg,catch,exception,e,throw,new,runtime,exception,critical,failure,for,task,function,get,runtime,context,get,task,name,msg,get,e
