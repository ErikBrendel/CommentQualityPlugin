# id;timestamp;commentText;codeText;commentWords;codeWords
PythonSingleInputSender -> public int sendBuffer(SingleElementPushBackIterator<IN> input) throws IOException;1491417810;Extracts records from an iterator and writes them to the memory-mapped file. This method assumes that all values_in the iterator are of the same type. This method does NOT take care of synchronization. The caller must_guarantee that the file may be written to before calling this method.__@param input iterator containing records_@return size of the written buffer_@throws IOException;public int sendBuffer(SingleElementPushBackIterator<IN> input) throws IOException {_		if (serializer == null) {_			IN value = input.next()__			serializer = getSerializer(value)__			input.pushBack(value)__		}_		return sendBuffer(input, serializer)__	};extracts,records,from,an,iterator,and,writes,them,to,the,memory,mapped,file,this,method,assumes,that,all,values,in,the,iterator,are,of,the,same,type,this,method,does,not,take,care,of,synchronization,the,caller,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,param,input,iterator,containing,records,return,size,of,the,written,buffer,throws,ioexception;public,int,send,buffer,single,element,push,back,iterator,in,input,throws,ioexception,if,serializer,null,in,value,input,next,serializer,get,serializer,value,input,push,back,value,return,send,buffer,input,serializer
PythonSingleInputSender -> public int sendBuffer(SingleElementPushBackIterator<IN> input) throws IOException;1491469031;Extracts records from an iterator and writes them to the memory-mapped file. This method assumes that all values_in the iterator are of the same type. This method does NOT take care of synchronization. The caller must_guarantee that the file may be written to before calling this method.__@param input iterator containing records_@return size of the written buffer_@throws IOException;public int sendBuffer(SingleElementPushBackIterator<IN> input) throws IOException {_		if (serializer == null) {_			IN value = input.next()__			serializer = getSerializer(value)__			input.pushBack(value)__		}_		return sendBuffer(input, serializer)__	};extracts,records,from,an,iterator,and,writes,them,to,the,memory,mapped,file,this,method,assumes,that,all,values,in,the,iterator,are,of,the,same,type,this,method,does,not,take,care,of,synchronization,the,caller,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,param,input,iterator,containing,records,return,size,of,the,written,buffer,throws,ioexception;public,int,send,buffer,single,element,push,back,iterator,in,input,throws,ioexception,if,serializer,null,in,value,input,next,serializer,get,serializer,value,input,push,back,value,return,send,buffer,input,serializer
PythonSingleInputSender -> public int sendBuffer(SingleElementPushBackIterator<IN> input) throws IOException;1495637163;Extracts records from an iterator and writes them to the memory-mapped file. This method assumes that all values_in the iterator are of the same type. This method does NOT take care of synchronization. The caller must_guarantee that the file may be written to before calling this method.__@param input iterator containing records_@return size of the written buffer_@throws IOException;public int sendBuffer(SingleElementPushBackIterator<IN> input) throws IOException {_		if (serializer == null) {_			IN value = input.next()__			serializer = getSerializer(value)__			input.pushBack(value)__		}_		return sendBuffer(input, serializer)__	};extracts,records,from,an,iterator,and,writes,them,to,the,memory,mapped,file,this,method,assumes,that,all,values,in,the,iterator,are,of,the,same,type,this,method,does,not,take,care,of,synchronization,the,caller,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,param,input,iterator,containing,records,return,size,of,the,written,buffer,throws,ioexception;public,int,send,buffer,single,element,push,back,iterator,in,input,throws,ioexception,if,serializer,null,in,value,input,next,serializer,get,serializer,value,input,push,back,value,return,send,buffer,input,serializer
