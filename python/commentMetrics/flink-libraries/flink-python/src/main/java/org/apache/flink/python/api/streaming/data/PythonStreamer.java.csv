# id;timestamp;commentText;codeText;commentWords;codeWords
PythonStreamer -> public final void streamBufferWithoutGroups(Iterator<IN1> i, Collector<OUT> c) throws IOException;1489680218;Sends all values contained in the iterator to the external process and collects all results.__@param i iterator_@param c collector_@throws IOException;public final void streamBufferWithoutGroups(Iterator<IN1> i, Collector<OUT> c) throws IOException {_		try {_			int size__			if (i.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST:_							if (i.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i.hasNext())__							} else {_								throw new RuntimeException("External process requested data even though none is available.")__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ignored) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,the,iterator,to,the,external,process,and,collects,all,results,param,i,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,without,groups,iterator,in1,i,collector,out,c,throws,ioexception,try,int,size,if,i,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i,has,next,sender,has,remaining,0,size,sender,send,buffer,i,0,send,write,notification,size,sender,has,remaining,0,i,has,next,else,throw,new,runtime,exception,external,process,requested,data,even,though,none,is,available,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithoutGroups(Iterator<IN1> i, Collector<OUT> c) throws IOException;1489849896;Sends all values contained in the iterator to the external process and collects all results.__@param i iterator_@param c collector_@throws IOException;public final void streamBufferWithoutGroups(Iterator<IN1> i, Collector<OUT> c) throws IOException {_		try {_			int size__			if (i.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST:_							if (i.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i.hasNext())__							} else {_								throw new RuntimeException("External process requested data even though none is available.")__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try {_								outPrinter.join(1000)__							} catch (InterruptedException e) {_								outPrinter.interrupt()__							}_							try {_								errorPrinter.join(1000)__							} catch (InterruptedException e) {_								errorPrinter.interrupt()__							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,the,iterator,to,the,external,process,and,collects,all,results,param,i,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,without,groups,iterator,in1,i,collector,out,c,throws,ioexception,try,int,size,if,i,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i,has,next,sender,has,remaining,0,size,sender,send,buffer,i,0,send,write,notification,size,sender,has,remaining,0,i,has,next,else,throw,new,runtime,exception,external,process,requested,data,even,though,none,is,available,break,case,return,case,try,out,printer,join,1000,catch,interrupted,exception,e,out,printer,interrupt,try,error,printer,join,1000,catch,interrupted,exception,e,error,printer,interrupt,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithoutGroups(Iterator<IN1> i, Collector<OUT> c) throws IOException;1489954855;Sends all values contained in the iterator to the external process and collects all results.__@param i iterator_@param c collector_@throws IOException;public final void streamBufferWithoutGroups(Iterator<IN1> i, Collector<OUT> c) throws IOException {_		try {_			int size__			if (i.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST:_							if (i.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i.hasNext())__							} else {_								throw new RuntimeException("External process requested data even though none is available.")__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try {_								outPrinter.join(1000)__							} catch (InterruptedException e) {_								outPrinter.interrupt()__							}_							try {_								errorPrinter.join(1000)__							} catch (InterruptedException e) {_								errorPrinter.interrupt()__							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,the,iterator,to,the,external,process,and,collects,all,results,param,i,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,without,groups,iterator,in1,i,collector,out,c,throws,ioexception,try,int,size,if,i,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i,has,next,sender,has,remaining,0,size,sender,send,buffer,i,0,send,write,notification,size,sender,has,remaining,0,i,has,next,else,throw,new,runtime,exception,external,process,requested,data,even,though,none,is,available,break,case,return,case,try,out,printer,join,1000,catch,interrupted,exception,e,out,printer,interrupt,try,error,printer,join,1000,catch,interrupted,exception,e,error,printer,interrupt,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public void open() throws IOException;1453266218;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,start,python
PythonStreamer -> public void open() throws IOException;1453271086;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,start,python
PythonStreamer -> public void open() throws IOException;1453297853;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,start,python
PythonStreamer -> public void open() throws IOException;1455697773;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,start,python
PythonStreamer -> public void open() throws IOException;1466589920;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,start,python
PythonStreamer -> public void open() throws IOException;1489060855;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,start,python
PythonStreamer -> public void open() throws IOException;1489680218;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1489680218;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1489849896;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1489954855;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1491417810;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1491417824;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1491417835;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1491417870;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1491469031;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1493214896;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1495637163;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1511188744;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public void open() throws IOException;1519567828;Starts the python script.__@throws IOException;public void open() throws IOException {_		server = new ServerSocket(0)__		server.setSoTimeout(50)__		startPython()__	};starts,the,python,script,throws,ioexception;public,void,open,throws,ioexception,server,new,server,socket,0,server,set,so,timeout,50,start,python
PythonStreamer -> public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException;1453266218;Sends all values contained in both iterators to the external process and collects all results.__@param i1 iterator_@param i2 iterator_@param c collector_@throws IOException;public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException {_		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					in.read(buffer, 0, 4)__					int sig = getInt(buffer, 0)__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i1, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext() || sender.hasRemaining(1)) {_								size = sender.sendBuffer(i2, 1)__								sendWriteNotification(size, sender.hasRemaining(1) || i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,i1,iterator,param,i2,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,i1,iterator,i2,collector,c,throws,ioexception,try,int,size,if,i1,has,next,i2,has,next,while,true,in,read,buffer,0,4,int,sig,get,int,buffer,0,switch,sig,case,if,i1,has,next,sender,has,remaining,0,size,sender,send,buffer,i1,0,send,write,notification,size,sender,has,remaining,0,i1,has,next,break,case,if,i2,has,next,sender,has,remaining,1,size,sender,send,buffer,i2,1,send,write,notification,size,sender,has,remaining,1,i2,has,next,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException;1453271086;Sends all values contained in both iterators to the external process and collects all results.__@param i1 iterator_@param i2 iterator_@param c collector_@throws IOException;public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException {_		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					in.readFully(buffer, 0, 4)__					int sig = getInt(buffer, 0)__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i1, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext() || sender.hasRemaining(1)) {_								size = sender.sendBuffer(i2, 1)__								sendWriteNotification(size, sender.hasRemaining(1) || i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,i1,iterator,param,i2,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,i1,iterator,i2,collector,c,throws,ioexception,try,int,size,if,i1,has,next,i2,has,next,while,true,in,read,fully,buffer,0,4,int,sig,get,int,buffer,0,switch,sig,case,if,i1,has,next,sender,has,remaining,0,size,sender,send,buffer,i1,0,send,write,notification,size,sender,has,remaining,0,i1,has,next,break,case,if,i2,has,next,sender,has,remaining,1,size,sender,send,buffer,i2,1,send,write,notification,size,sender,has,remaining,1,i2,has,next,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException;1453297853;Sends all values contained in both iterators to the external process and collects all results.__@param i1 iterator_@param i2 iterator_@param c collector_@throws IOException;public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException {_		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i1, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext() || sender.hasRemaining(1)) {_								size = sender.sendBuffer(i2, 1)__								sendWriteNotification(size, sender.hasRemaining(1) || i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,i1,iterator,param,i2,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,i1,iterator,i2,collector,c,throws,ioexception,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,sender,has,remaining,0,size,sender,send,buffer,i1,0,send,write,notification,size,sender,has,remaining,0,i1,has,next,break,case,if,i2,has,next,sender,has,remaining,1,size,sender,send,buffer,i2,1,send,write,notification,size,sender,has,remaining,1,i2,has,next,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException;1455697773;Sends all values contained in both iterators to the external process and collects all results.__@param i1 iterator_@param i2 iterator_@param c collector_@throws IOException;public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException {_		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i1, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext() || sender.hasRemaining(1)) {_								size = sender.sendBuffer(i2, 1)__								sendWriteNotification(size, sender.hasRemaining(1) || i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,i1,iterator,param,i2,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,i1,iterator,i2,collector,c,throws,ioexception,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,sender,has,remaining,0,size,sender,send,buffer,i1,0,send,write,notification,size,sender,has,remaining,0,i1,has,next,break,case,if,i2,has,next,sender,has,remaining,1,size,sender,send,buffer,i2,1,send,write,notification,size,sender,has,remaining,1,i2,has,next,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException;1466589920;Sends all values contained in both iterators to the external process and collects all results.__@param i1 iterator_@param i2 iterator_@param c collector_@throws IOException;public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException {_		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i1, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext() || sender.hasRemaining(1)) {_								size = sender.sendBuffer(i2, 1)__								sendWriteNotification(size, sender.hasRemaining(1) || i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,i1,iterator,param,i2,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,i1,iterator,i2,collector,c,throws,ioexception,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,sender,has,remaining,0,size,sender,send,buffer,i1,0,send,write,notification,size,sender,has,remaining,0,i1,has,next,break,case,if,i2,has,next,sender,has,remaining,1,size,sender,send,buffer,i2,1,send,write,notification,size,sender,has,remaining,1,i2,has,next,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException;1489060855;Sends all values contained in both iterators to the external process and collects all results.__@param i1 iterator_@param i2 iterator_@param c collector_@throws IOException;public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException {_		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i1, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext() || sender.hasRemaining(1)) {_								size = sender.sendBuffer(i2, 1)__								sendWriteNotification(size, sender.hasRemaining(1) || i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,i1,iterator,param,i2,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,i1,iterator,i2,collector,c,throws,ioexception,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,sender,has,remaining,0,size,sender,send,buffer,i1,0,send,write,notification,size,sender,has,remaining,0,i1,has,next,break,case,if,i2,has,next,sender,has,remaining,1,size,sender,send,buffer,i2,1,send,write,notification,size,sender,has,remaining,1,i2,has,next,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException;1489680218;Sends all values contained in both iterators to the external process and collects all results.__@param i1 iterator_@param i2 iterator_@param c collector_@throws IOException;public final void streamBufferWithGroups(Iterator i1, Iterator i2, Collector c) throws IOException {_		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i1, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext() || sender.hasRemaining(1)) {_								size = sender.sendBuffer(i2, 1)__								sendWriteNotification(size, sender.hasRemaining(1) || i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,i1,iterator,param,i2,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,i1,iterator,i2,collector,c,throws,ioexception,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,sender,has,remaining,0,size,sender,send,buffer,i1,0,send,write,notification,size,sender,has,remaining,0,i1,has,next,break,case,if,i2,has,next,sender,has,remaining,1,size,sender,send,buffer,i2,1,send,write,notification,size,sender,has,remaining,1,i2,has,next,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1453266218;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			in.read(buffer, 0, 4)__			checkForError()__			int size = sender.sendRecord(broadcastCount)__			sendWriteNotification(size, false)___			for (String name : names) {_				Iterator bcv = function.getRuntimeContext().getBroadcastVariable(name).iterator()___				in.read(buffer, 0, 4)__				checkForError()__				size = sender.sendRecord(name)__				sendWriteNotification(size, false)___				while (bcv.hasNext() || sender.hasRemaining(0)) {_					in.read(buffer, 0, 4)__					checkForError()__					size = sender.sendBuffer(bcv, 0)__					sendWriteNotification(size, bcv.hasNext() || sender.hasRemaining(0))__				}_				sender.reset()__			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,in,read,buffer,0,4,check,for,error,int,size,sender,send,record,broadcast,count,send,write,notification,size,false,for,string,name,names,iterator,bcv,function,get,runtime,context,get,broadcast,variable,name,iterator,in,read,buffer,0,4,check,for,error,size,sender,send,record,name,send,write,notification,size,false,while,bcv,has,next,sender,has,remaining,0,in,read,buffer,0,4,check,for,error,size,sender,send,buffer,bcv,0,send,write,notification,size,bcv,has,next,sender,has,remaining,0,sender,reset,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1453271086;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			in.readFully(buffer, 0, 4)__			checkForError()__			int size = sender.sendRecord(broadcastCount)__			sendWriteNotification(size, false)___			for (String name : names) {_				Iterator bcv = function.getRuntimeContext().getBroadcastVariable(name).iterator()___				in.readFully(buffer, 0, 4)__				checkForError()__				size = sender.sendRecord(name)__				sendWriteNotification(size, false)___				while (bcv.hasNext() || sender.hasRemaining(0)) {_					in.readFully(buffer, 0, 4)__					checkForError()__					size = sender.sendBuffer(bcv, 0)__					sendWriteNotification(size, bcv.hasNext() || sender.hasRemaining(0))__				}_				sender.reset()__			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,in,read,fully,buffer,0,4,check,for,error,int,size,sender,send,record,broadcast,count,send,write,notification,size,false,for,string,name,names,iterator,bcv,function,get,runtime,context,get,broadcast,variable,name,iterator,in,read,fully,buffer,0,4,check,for,error,size,sender,send,record,name,send,write,notification,size,false,while,bcv,has,next,sender,has,remaining,0,in,read,fully,buffer,0,4,check,for,error,size,sender,send,buffer,bcv,0,send,write,notification,size,bcv,has,next,sender,has,remaining,0,sender,reset,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1453297853;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator bcv = function.getRuntimeContext().getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write((byte[]) bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,bcv,function,get,runtime,context,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,byte,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1455697773;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator bcv = function.getRuntimeContext().getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write((byte[]) bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,bcv,function,get,runtime,context,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,byte,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1466589920;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator bcv = function.getRuntimeContext().getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write((byte[]) bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,bcv,function,get,runtime,context,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,byte,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1489060855;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator bcv = function.getRuntimeContext().getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write((byte[]) bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,bcv,function,get,runtime,context,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,byte,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1489680218;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator bcv = function.getRuntimeContext().getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write((byte[]) bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,bcv,function,get,runtime,context,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,byte,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1489680218;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<?> bcv = function.getRuntimeContext().getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write((byte[]) bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,bcv,function,get,runtime,context,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,byte,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1489849896;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<?> bcv = function.getRuntimeContext().getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write((byte[]) bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,bcv,function,get,runtime,context,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,byte,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1489954855;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<?> bcv = function.getRuntimeContext().getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write((byte[]) bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,bcv,function,get,runtime,context,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,byte,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1491417810;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<?> bcv = function.getRuntimeContext().getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write((byte[]) bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,bcv,function,get,runtime,context,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,byte,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1491417824;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<byte[]> bcv = function.getRuntimeContext().<byte[]>getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write(bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,byte,bcv,function,get,runtime,context,byte,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1491417835;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<byte[]> bcv = function.getRuntimeContext().<byte[]>getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write(bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,byte,bcv,function,get,runtime,context,byte,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1491417870;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<byte[]> bcv = function.getRuntimeContext().<byte[]>getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write(bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,byte,bcv,function,get,runtime,context,byte,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1491469031;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<byte[]> bcv = function.getRuntimeContext().<byte[]>getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write(bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,byte,bcv,function,get,runtime,context,byte,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1493214896;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<byte[]> bcv = function.getRuntimeContext().<byte[]>getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write(bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,byte,bcv,function,get,runtime,context,byte,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1495637163;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<byte[]> bcv = function.getRuntimeContext().<byte[]>getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write(bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,byte,bcv,function,get,runtime,context,byte,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1511188744;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<byte[]> bcv = function.getRuntimeContext().<byte[]>getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write(bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,byte,bcv,function,get,runtime,context,byte,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void sendBroadCastVariables(Configuration config) throws IOException;1519567828;Sends all broadcast-variables encoded in the configuration to the external process.__@param config configuration object containing broadcast-variable count and names_@throws IOException;public final void sendBroadCastVariables(Configuration config) throws IOException {_		try {_			int broadcastCount = config.getInteger(PLANBINDER_CONFIG_BCVAR_COUNT, 0)___			String[] names = new String[broadcastCount]___			for (int x = 0_ x < names.length_ x++) {_				names[x] = config.getString(PLANBINDER_CONFIG_BCVAR_NAME_PREFIX + x, null)__			}__			out.write(new IntSerializer().serializeWithoutTypeInfo(broadcastCount))___			StringSerializer stringSerializer = new StringSerializer()__			for (String name : names) {_				Iterator<byte[]> bcv = function.getRuntimeContext().<byte[]>getBroadcastVariable(name).iterator()___				out.write(stringSerializer.serializeWithoutTypeInfo(name))___				while (bcv.hasNext()) {_					out.writeByte(1)__					out.write(bcv.next())__				}_				out.writeByte(0)__			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,broadcast,variables,encoded,in,the,configuration,to,the,external,process,param,config,configuration,object,containing,broadcast,variable,count,and,names,throws,ioexception;public,final,void,send,broad,cast,variables,configuration,config,throws,ioexception,try,int,broadcast,count,config,get,integer,0,string,names,new,string,broadcast,count,for,int,x,0,x,names,length,x,names,x,config,get,string,x,null,out,write,new,int,serializer,serialize,without,type,info,broadcast,count,string,serializer,string,serializer,new,string,serializer,for,string,name,names,iterator,byte,bcv,function,get,runtime,context,byte,get,broadcast,variable,name,iterator,out,write,string,serializer,serialize,without,type,info,name,while,bcv,has,next,out,write,byte,1,out,write,bcv,next,out,write,byte,0,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithGroups(Iterator<IN1> i1, Iterator<IN2> i2, Collector<OUT> c) throws IOException;1489680218;Sends all values contained in both iterators to the external process and collects all results.__@param i1 iterator_@param i2 iterator_@param c collector_@throws IOException;public final void streamBufferWithGroups(Iterator<IN1> i1, Iterator<IN2> i2, Collector<OUT> c) throws IOException {_		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i1, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext() || sender.hasRemaining(1)) {_								size = sender.sendBuffer(i2, 1)__								sendWriteNotification(size, sender.hasRemaining(1) || i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ignored) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,i1,iterator,param,i2,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,in1,i1,iterator,in2,i2,collector,out,c,throws,ioexception,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,sender,has,remaining,0,size,sender,send,buffer,i1,0,send,write,notification,size,sender,has,remaining,0,i1,has,next,break,case,if,i2,has,next,sender,has,remaining,1,size,sender,send,buffer,i2,1,send,write,notification,size,sender,has,remaining,1,i2,has,next,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithGroups(Iterator<IN1> i1, Iterator<IN2> i2, Collector<OUT> c) throws IOException;1489849896;Sends all values contained in both iterators to the external process and collects all results.__@param i1 iterator_@param i2 iterator_@param c collector_@throws IOException;public final void streamBufferWithGroups(Iterator<IN1> i1, Iterator<IN2> i2, Collector<OUT> c) throws IOException {_		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i1, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext() || sender.hasRemaining(1)) {_								size = sender.sendBuffer(i2, 1)__								sendWriteNotification(size, sender.hasRemaining(1) || i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try {_								outPrinter.join(1000)__							} catch (InterruptedException e) {_								outPrinter.interrupt()__							}_							try {_								errorPrinter.join(1000)__							} catch (InterruptedException e) {_								errorPrinter.interrupt()__							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,i1,iterator,param,i2,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,in1,i1,iterator,in2,i2,collector,out,c,throws,ioexception,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,sender,has,remaining,0,size,sender,send,buffer,i1,0,send,write,notification,size,sender,has,remaining,0,i1,has,next,break,case,if,i2,has,next,sender,has,remaining,1,size,sender,send,buffer,i2,1,send,write,notification,size,sender,has,remaining,1,i2,has,next,break,case,return,case,try,out,printer,join,1000,catch,interrupted,exception,e,out,printer,interrupt,try,error,printer,join,1000,catch,interrupted,exception,e,error,printer,interrupt,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithGroups(Iterator<IN1> i1, Iterator<IN2> i2, Collector<OUT> c) throws IOException;1489954855;Sends all values contained in both iterators to the external process and collects all results.__@param i1 iterator_@param i2 iterator_@param c collector_@throws IOException;public final void streamBufferWithGroups(Iterator<IN1> i1, Iterator<IN2> i2, Collector<OUT> c) throws IOException {_		try {_			int size__			if (i1.hasNext() || i2.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST_G0:_							if (i1.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i1, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i1.hasNext())__							}_							break__						case SIGNAL_BUFFER_REQUEST_G1:_							if (i2.hasNext() || sender.hasRemaining(1)) {_								size = sender.sendBuffer(i2, 1)__								sendWriteNotification(size, sender.hasRemaining(1) || i2.hasNext())__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try {_								outPrinter.join(1000)__							} catch (InterruptedException e) {_								outPrinter.interrupt()__							}_							try {_								errorPrinter.join(1000)__							} catch (InterruptedException e) {_								errorPrinter.interrupt()__							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ignored) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,both,iterators,to,the,external,process,and,collects,all,results,param,i1,iterator,param,i2,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,with,groups,iterator,in1,i1,iterator,in2,i2,collector,out,c,throws,ioexception,try,int,size,if,i1,has,next,i2,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i1,has,next,sender,has,remaining,0,size,sender,send,buffer,i1,0,send,write,notification,size,sender,has,remaining,0,i1,has,next,break,case,if,i2,has,next,sender,has,remaining,1,size,sender,send,buffer,i2,1,send,write,notification,size,sender,has,remaining,1,i2,has,next,break,case,return,case,try,out,printer,join,1000,catch,interrupted,exception,e,out,printer,interrupt,try,error,printer,join,1000,catch,interrupted,exception,e,error,printer,interrupt,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ignored,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public void close() throws IOException;1453266218;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_		socket.close()__		sender.close()__		receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :" + e.getMessage())__		}_		if (!debug) {_			destroyProcess()__		}_		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,if,debug,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1453271086;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_		socket.close()__		sender.close()__		receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :" + e.getMessage())__		}_		if (!debug) {_			destroyProcess()__		}_		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,if,debug,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1453297853;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :" + e.getMessage())__		}_		if (!debug) {_			destroyProcess()__		}_		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,if,debug,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1455697773;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :" + e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1466589920;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :" + e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1489060855;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :" + e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1489680218;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :" + e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1489680218;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :{}", e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1489849896;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :{}", e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1489954855;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :{}", e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1491417810;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :{}", e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1491417824;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :{}", e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1491417835;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :{}", e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1491417870;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :{}", e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1491469031;Closes this streamer.__@throws IOException;public void close() throws IOException {_		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Exception e) {_			LOG.error("Exception occurred while closing Streamer. :{}", e.getMessage())__		}_		destroyProcess()__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}_	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,try,socket,close,sender,close,receiver,close,catch,exception,e,log,error,exception,occurred,while,closing,streamer,e,get,message,destroy,process,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread
PythonStreamer -> public void close() throws IOException;1493214896;Closes this streamer.__@throws IOException;public void close() throws IOException {_		Throwable throwable = null___		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Throwable t) {_			throwable = t__		}__		try {_			destroyProcess(process)__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}__		ExceptionUtils.tryRethrowIOException(throwable)__	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,throwable,throwable,null,try,socket,close,sender,close,receiver,close,catch,throwable,t,throwable,t,try,destroy,process,process,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread,exception,utils,try,rethrow,ioexception,throwable
PythonStreamer -> public void close() throws IOException;1495637163;Closes this streamer.__@throws IOException;public void close() throws IOException {_		Throwable throwable = null___		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Throwable t) {_			throwable = t__		}__		try {_			destroyProcess(process)__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}__		ExceptionUtils.tryRethrowIOException(throwable)__	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,throwable,throwable,null,try,socket,close,sender,close,receiver,close,catch,throwable,t,throwable,t,try,destroy,process,process,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread,exception,utils,try,rethrow,ioexception,throwable
PythonStreamer -> public void close() throws IOException;1511188744;Closes this streamer.__@throws IOException;public void close() throws IOException {_		Throwable throwable = null___		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Throwable t) {_			throwable = t__		}__		try {_			destroyProcess(process)__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		if (shutdownThread != null) {_			Runtime.getRuntime().removeShutdownHook(shutdownThread)__		}__		ExceptionUtils.tryRethrowIOException(throwable)__	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,throwable,throwable,null,try,socket,close,sender,close,receiver,close,catch,throwable,t,throwable,t,try,destroy,process,process,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,if,shutdown,thread,null,runtime,get,runtime,remove,shutdown,hook,shutdown,thread,exception,utils,try,rethrow,ioexception,throwable
PythonStreamer -> public void close() throws IOException;1519567828;Closes this streamer.__@throws IOException;public void close() throws IOException {_		Throwable throwable = null___		try {_			socket.close()__			sender.close()__			receiver.close()__		} catch (Throwable t) {_			throwable = t__		}__		try {_			destroyProcess(process)__		} catch (Throwable t) {_			throwable = ExceptionUtils.firstOrSuppressed(t, throwable)__		}__		ShutdownHookUtil.removeShutdownHook(shutdownThread, getClass().getSimpleName(), LOG)___		ExceptionUtils.tryRethrowIOException(throwable)__	};closes,this,streamer,throws,ioexception;public,void,close,throws,ioexception,throwable,throwable,null,try,socket,close,sender,close,receiver,close,catch,throwable,t,throwable,t,try,destroy,process,process,catch,throwable,t,throwable,exception,utils,first,or,suppressed,t,throwable,shutdown,hook,util,remove,shutdown,hook,shutdown,thread,get,class,get,simple,name,log,exception,utils,try,rethrow,ioexception,throwable
PythonStreamer -> public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException;1453266218;Sends all values contained in the iterator to the external process and collects all results.__@param i iterator_@param c collector_@throws IOException;public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException {_		try {_			int size__			if (i.hasNext()) {_				while (true) {_					in.read(buffer, 0, 4)__					int sig = getInt(buffer, 0)__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST:_							if (i.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i.hasNext())__							} else {_								throw new RuntimeException("External process requested data even though none is available.")__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,the,iterator,to,the,external,process,and,collects,all,results,param,i,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,without,groups,iterator,i,collector,c,throws,ioexception,try,int,size,if,i,has,next,while,true,in,read,buffer,0,4,int,sig,get,int,buffer,0,switch,sig,case,if,i,has,next,sender,has,remaining,0,size,sender,send,buffer,i,0,send,write,notification,size,sender,has,remaining,0,i,has,next,else,throw,new,runtime,exception,external,process,requested,data,even,though,none,is,available,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException;1453271086;Sends all values contained in the iterator to the external process and collects all results.__@param i iterator_@param c collector_@throws IOException;public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException {_		try {_			int size__			if (i.hasNext()) {_				while (true) {_					in.readFully(buffer, 0, 4)__					int sig = getInt(buffer, 0)__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST:_							if (i.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i.hasNext())__							} else {_								throw new RuntimeException("External process requested data even though none is available.")__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,the,iterator,to,the,external,process,and,collects,all,results,param,i,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,without,groups,iterator,i,collector,c,throws,ioexception,try,int,size,if,i,has,next,while,true,in,read,fully,buffer,0,4,int,sig,get,int,buffer,0,switch,sig,case,if,i,has,next,sender,has,remaining,0,size,sender,send,buffer,i,0,send,write,notification,size,sender,has,remaining,0,i,has,next,else,throw,new,runtime,exception,external,process,requested,data,even,though,none,is,available,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException;1453297853;Sends all values contained in the iterator to the external process and collects all results.__@param i iterator_@param c collector_@throws IOException;public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException {_		try {_			int size__			if (i.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST:_							if (i.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i.hasNext())__							} else {_								throw new RuntimeException("External process requested data even though none is available.")__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,the,iterator,to,the,external,process,and,collects,all,results,param,i,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,without,groups,iterator,i,collector,c,throws,ioexception,try,int,size,if,i,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i,has,next,sender,has,remaining,0,size,sender,send,buffer,i,0,send,write,notification,size,sender,has,remaining,0,i,has,next,else,throw,new,runtime,exception,external,process,requested,data,even,though,none,is,available,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException;1455697773;Sends all values contained in the iterator to the external process and collects all results.__@param i iterator_@param c collector_@throws IOException;public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException {_		try {_			int size__			if (i.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST:_							if (i.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i.hasNext())__							} else {_								throw new RuntimeException("External process requested data even though none is available.")__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,the,iterator,to,the,external,process,and,collects,all,results,param,i,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,without,groups,iterator,i,collector,c,throws,ioexception,try,int,size,if,i,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i,has,next,sender,has,remaining,0,size,sender,send,buffer,i,0,send,write,notification,size,sender,has,remaining,0,i,has,next,else,throw,new,runtime,exception,external,process,requested,data,even,though,none,is,available,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException;1466589920;Sends all values contained in the iterator to the external process and collects all results.__@param i iterator_@param c collector_@throws IOException;public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException {_		try {_			int size__			if (i.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST:_							if (i.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i.hasNext())__							} else {_								throw new RuntimeException("External process requested data even though none is available.")__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,the,iterator,to,the,external,process,and,collects,all,results,param,i,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,without,groups,iterator,i,collector,c,throws,ioexception,try,int,size,if,i,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i,has,next,sender,has,remaining,0,size,sender,send,buffer,i,0,send,write,notification,size,sender,has,remaining,0,i,has,next,else,throw,new,runtime,exception,external,process,requested,data,even,though,none,is,available,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException;1489060855;Sends all values contained in the iterator to the external process and collects all results.__@param i iterator_@param c collector_@throws IOException;public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException {_		try {_			int size__			if (i.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST:_							if (i.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i.hasNext())__							} else {_								throw new RuntimeException("External process requested data even though none is available.")__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,the,iterator,to,the,external,process,and,collects,all,results,param,i,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,without,groups,iterator,i,collector,c,throws,ioexception,try,int,size,if,i,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i,has,next,sender,has,remaining,0,size,sender,send,buffer,i,0,send,write,notification,size,sender,has,remaining,0,i,has,next,else,throw,new,runtime,exception,external,process,requested,data,even,though,none,is,available,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
PythonStreamer -> public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException;1489680218;Sends all values contained in the iterator to the external process and collects all results.__@param i iterator_@param c collector_@throws IOException;public final void streamBufferWithoutGroups(Iterator i, Collector c) throws IOException {_		try {_			int size__			if (i.hasNext()) {_				while (true) {_					int sig = in.readInt()__					switch (sig) {_						case SIGNAL_BUFFER_REQUEST:_							if (i.hasNext() || sender.hasRemaining(0)) {_								size = sender.sendBuffer(i, 0)__								sendWriteNotification(size, sender.hasRemaining(0) || i.hasNext())__							} else {_								throw new RuntimeException("External process requested data even though none is available.")__							}_							break__						case SIGNAL_FINISHED:_							return__						case SIGNAL_ERROR:_							try { _								Thread.sleep(2000)__							} catch (InterruptedException ex) {_							}_							throw new RuntimeException(_									"External process for task " + function.getRuntimeContext().getTaskName() + " terminated prematurely due to an error." + msg)__						default:_							receiver.collectBuffer(c, sig)__							sendReadConfirmation()__							break__					}_				}_			}_		} catch (SocketTimeoutException ste) {_			throw new RuntimeException("External process for task " + function.getRuntimeContext().getTaskName() + " stopped responding." + msg)__		}_	};sends,all,values,contained,in,the,iterator,to,the,external,process,and,collects,all,results,param,i,iterator,param,c,collector,throws,ioexception;public,final,void,stream,buffer,without,groups,iterator,i,collector,c,throws,ioexception,try,int,size,if,i,has,next,while,true,int,sig,in,read,int,switch,sig,case,if,i,has,next,sender,has,remaining,0,size,sender,send,buffer,i,0,send,write,notification,size,sender,has,remaining,0,i,has,next,else,throw,new,runtime,exception,external,process,requested,data,even,though,none,is,available,break,case,return,case,try,thread,sleep,2000,catch,interrupted,exception,ex,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,terminated,prematurely,due,to,an,error,msg,default,receiver,collect,buffer,c,sig,send,read,confirmation,break,catch,socket,timeout,exception,ste,throw,new,runtime,exception,external,process,for,task,function,get,runtime,context,get,task,name,stopped,responding,msg
