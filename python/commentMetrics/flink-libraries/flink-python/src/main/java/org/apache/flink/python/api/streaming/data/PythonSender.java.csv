# id;timestamp;commentText;codeText;commentWords;codeWords
PythonSender -> public void reset();1453266218;Resets this object to the post-configuration state.;public void reset() {_		serializer[0] = null__		serializer[1] = null__		fileBuffer.clear()__	};resets,this,object,to,the,post,configuration,state;public,void,reset,serializer,0,null,serializer,1,null,file,buffer,clear
PythonSender -> public void reset();1453297853;Resets this object to the post-configuration state.;public void reset() {_		serializer[0] = null__		serializer[1] = null__		fileBuffer.clear()__	};resets,this,object,to,the,post,configuration,state;public,void,reset,serializer,0,null,serializer,1,null,file,buffer,clear
PythonSender -> public void reset();1457434346;Resets this object to the post-configuration state.;public void reset() {_		serializer[0] = null__		serializer[1] = null__		fileBuffer.clear()__	};resets,this,object,to,the,post,configuration,state;public,void,reset,serializer,0,null,serializer,1,null,file,buffer,clear
PythonSender -> public void reset();1489680218;Resets this object to the post-configuration state.;public void reset() {_		serializer[0] = null__		serializer[1] = null__		fileBuffer.clear()__	};resets,this,object,to,the,post,configuration,state;public,void,reset,serializer,0,null,serializer,1,null,file,buffer,clear
PythonSender -> public int sendBuffer(Iterator i, int group) throws IOException;1453266218;Extracts records from an iterator and writes them to the memory-mapped file. This method assumes that all values_in the iterator are of the same type. This method does NOT take care of synchronization. The caller must_guarantee that the file may be written to before calling this method.__@param i iterator containing records_@param group group to which the iterator belongs, most notably used by CoGroup-functions._@return size of the written buffer_@throws IOException;public int sendBuffer(Iterator i, int group) throws IOException {_		fileBuffer.clear()___		Object value__		ByteBuffer bb__		if (serializer[group] == null) {_			value = i.next()__			serializer[group] = getSerializer(value)__			bb = serializer[group].serialize(value)__			if (bb.remaining() > MAPPED_FILE_SIZE) {_				throw new RuntimeException("Serialized object does not fit into a single buffer.")__			}_			fileBuffer.put(bb)___		}_		if (saved[group] != null) {_			fileBuffer.put(saved[group])__			saved[group] = null__		}_		while (i.hasNext() && saved[group] == null) {_			value = i.next()__			bb = serializer[group].serialize(value)__			if (bb.remaining() > MAPPED_FILE_SIZE) {_				throw new RuntimeException("Serialized object does not fit into a single buffer.")__			}_			if (bb.remaining() <= fileBuffer.remaining()) {_				fileBuffer.put(bb)__			} else {_				saved[group] = bb__			}_		}__		int size = fileBuffer.position()__		return size__	};extracts,records,from,an,iterator,and,writes,them,to,the,memory,mapped,file,this,method,assumes,that,all,values,in,the,iterator,are,of,the,same,type,this,method,does,not,take,care,of,synchronization,the,caller,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,param,i,iterator,containing,records,param,group,group,to,which,the,iterator,belongs,most,notably,used,by,co,group,functions,return,size,of,the,written,buffer,throws,ioexception;public,int,send,buffer,iterator,i,int,group,throws,ioexception,file,buffer,clear,object,value,byte,buffer,bb,if,serializer,group,null,value,i,next,serializer,group,get,serializer,value,bb,serializer,group,serialize,value,if,bb,remaining,throw,new,runtime,exception,serialized,object,does,not,fit,into,a,single,buffer,file,buffer,put,bb,if,saved,group,null,file,buffer,put,saved,group,saved,group,null,while,i,has,next,saved,group,null,value,i,next,bb,serializer,group,serialize,value,if,bb,remaining,throw,new,runtime,exception,serialized,object,does,not,fit,into,a,single,buffer,if,bb,remaining,file,buffer,remaining,file,buffer,put,bb,else,saved,group,bb,int,size,file,buffer,position,return,size
PythonSender -> public int sendBuffer(Iterator i, int group) throws IOException;1453297853;Extracts records from an iterator and writes them to the memory-mapped file. This method assumes that all values_in the iterator are of the same type. This method does NOT take care of synchronization. The caller must_guarantee that the file may be written to before calling this method.__@param i iterator containing records_@param group group to which the iterator belongs, most notably used by CoGroup-functions._@return size of the written buffer_@throws IOException;public int sendBuffer(Iterator i, int group) throws IOException {_		fileBuffer.clear()___		Object value__		ByteBuffer bb__		if (serializer[group] == null) {_			value = i.next()__			serializer[group] = getSerializer(value)__			bb = serializer[group].serialize(value)__			if (bb.remaining() > MAPPED_FILE_SIZE) {_				throw new RuntimeException("Serialized object does not fit into a single buffer.")__			}_			fileBuffer.put(bb)___		}_		if (saved[group] != null) {_			fileBuffer.put(saved[group])__			saved[group] = null__		}_		while (i.hasNext() && saved[group] == null) {_			value = i.next()__			bb = serializer[group].serialize(value)__			if (bb.remaining() > MAPPED_FILE_SIZE) {_				throw new RuntimeException("Serialized object does not fit into a single buffer.")__			}_			if (bb.remaining() <= fileBuffer.remaining()) {_				fileBuffer.put(bb)__			} else {_				saved[group] = bb__			}_		}__		int size = fileBuffer.position()__		return size__	};extracts,records,from,an,iterator,and,writes,them,to,the,memory,mapped,file,this,method,assumes,that,all,values,in,the,iterator,are,of,the,same,type,this,method,does,not,take,care,of,synchronization,the,caller,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,param,i,iterator,containing,records,param,group,group,to,which,the,iterator,belongs,most,notably,used,by,co,group,functions,return,size,of,the,written,buffer,throws,ioexception;public,int,send,buffer,iterator,i,int,group,throws,ioexception,file,buffer,clear,object,value,byte,buffer,bb,if,serializer,group,null,value,i,next,serializer,group,get,serializer,value,bb,serializer,group,serialize,value,if,bb,remaining,throw,new,runtime,exception,serialized,object,does,not,fit,into,a,single,buffer,file,buffer,put,bb,if,saved,group,null,file,buffer,put,saved,group,saved,group,null,while,i,has,next,saved,group,null,value,i,next,bb,serializer,group,serialize,value,if,bb,remaining,throw,new,runtime,exception,serialized,object,does,not,fit,into,a,single,buffer,if,bb,remaining,file,buffer,remaining,file,buffer,put,bb,else,saved,group,bb,int,size,file,buffer,position,return,size
PythonSender -> public int sendRecord(Object value) throws IOException;1453266218;Writes a single record to the memory-mapped file. This method does NOT take care of synchronization. The user_must guarantee that the file may be written to before calling this method. This method essentially reserves the_whole buffer for one record. As such it imposes some performance restrictions and should only be used when_absolutely necessary.__@param value record to send_@return size of the written buffer_@throws IOException;public int sendRecord(Object value) throws IOException {_		fileBuffer.clear()__		int group = 0___		serializer[group] = getSerializer(value)__		ByteBuffer bb = serializer[group].serialize(value)__		if (bb.remaining() > MAPPED_FILE_SIZE) {_			throw new RuntimeException("Serialized object does not fit into a single buffer.")__		}_		fileBuffer.put(bb)___		int size = fileBuffer.position()___		reset()__		return size__	};writes,a,single,record,to,the,memory,mapped,file,this,method,does,not,take,care,of,synchronization,the,user,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,this,method,essentially,reserves,the,whole,buffer,for,one,record,as,such,it,imposes,some,performance,restrictions,and,should,only,be,used,when,absolutely,necessary,param,value,record,to,send,return,size,of,the,written,buffer,throws,ioexception;public,int,send,record,object,value,throws,ioexception,file,buffer,clear,int,group,0,serializer,group,get,serializer,value,byte,buffer,bb,serializer,group,serialize,value,if,bb,remaining,throw,new,runtime,exception,serialized,object,does,not,fit,into,a,single,buffer,file,buffer,put,bb,int,size,file,buffer,position,reset,return,size
PythonSender -> public int sendRecord(Object value) throws IOException;1453297853;Writes a single record to the memory-mapped file. This method does NOT take care of synchronization. The user_must guarantee that the file may be written to before calling this method. This method essentially reserves the_whole buffer for one record. As such it imposes some performance restrictions and should only be used when_absolutely necessary.__@param value record to send_@return size of the written buffer_@throws IOException;public int sendRecord(Object value) throws IOException {_		fileBuffer.clear()__		int group = 0___		serializer[group] = getSerializer(value)__		ByteBuffer bb = serializer[group].serialize(value)__		if (bb.remaining() > MAPPED_FILE_SIZE) {_			throw new RuntimeException("Serialized object does not fit into a single buffer.")__		}_		fileBuffer.put(bb)___		int size = fileBuffer.position()___		reset()__		return size__	};writes,a,single,record,to,the,memory,mapped,file,this,method,does,not,take,care,of,synchronization,the,user,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,this,method,essentially,reserves,the,whole,buffer,for,one,record,as,such,it,imposes,some,performance,restrictions,and,should,only,be,used,when,absolutely,necessary,param,value,record,to,send,return,size,of,the,written,buffer,throws,ioexception;public,int,send,record,object,value,throws,ioexception,file,buffer,clear,int,group,0,serializer,group,get,serializer,value,byte,buffer,bb,serializer,group,serialize,value,if,bb,remaining,throw,new,runtime,exception,serialized,object,does,not,fit,into,a,single,buffer,file,buffer,put,bb,int,size,file,buffer,position,reset,return,size
PythonSender -> @SuppressWarnings("unchecked") 	public int sendRecord(Object value) throws IOException;1457434346;Writes a single record to the memory-mapped file. This method does NOT take care of synchronization. The user_must guarantee that the file may be written to before calling this method. This method essentially reserves the_whole buffer for one record. As such it imposes some performance restrictions and should only be used when_absolutely necessary.__@param value record to send_@return size of the written buffer_@throws IOException;@SuppressWarnings("unchecked")_	public int sendRecord(Object value) throws IOException {_		fileBuffer.clear()__		int group = 0___		serializer[group] = getSerializer(value)__		ByteBuffer bb = serializer[group].serialize(value)__		if (bb.remaining() > MAPPED_FILE_SIZE) {_			throw new RuntimeException("Serialized object does not fit into a single buffer.")__		}_		fileBuffer.put(bb)___		int size = fileBuffer.position()___		reset()__		return size__	};writes,a,single,record,to,the,memory,mapped,file,this,method,does,not,take,care,of,synchronization,the,user,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,this,method,essentially,reserves,the,whole,buffer,for,one,record,as,such,it,imposes,some,performance,restrictions,and,should,only,be,used,when,absolutely,necessary,param,value,record,to,send,return,size,of,the,written,buffer,throws,ioexception;suppress,warnings,unchecked,public,int,send,record,object,value,throws,ioexception,file,buffer,clear,int,group,0,serializer,group,get,serializer,value,byte,buffer,bb,serializer,group,serialize,value,if,bb,remaining,throw,new,runtime,exception,serialized,object,does,not,fit,into,a,single,buffer,file,buffer,put,bb,int,size,file,buffer,position,reset,return,size
PythonSender -> @SuppressWarnings("unchecked") 	public int sendRecord(Object value) throws IOException;1489680218;Writes a single record to the memory-mapped file. This method does NOT take care of synchronization. The user_must guarantee that the file may be written to before calling this method. This method essentially reserves the_whole buffer for one record. As such it imposes some performance restrictions and should only be used when_absolutely necessary.__@param value record to send_@return size of the written buffer_@throws IOException;@SuppressWarnings("unchecked")_	public int sendRecord(Object value) throws IOException {_		fileBuffer.clear()__		int group = 0___		serializer[group] = getSerializer(value)__		ByteBuffer bb = serializer[group].serialize(value)__		if (bb.remaining() > MAPPED_FILE_SIZE) {_			throw new RuntimeException("Serialized object does not fit into a single buffer.")__		}_		fileBuffer.put(bb)___		int size = fileBuffer.position()___		reset()__		return size__	};writes,a,single,record,to,the,memory,mapped,file,this,method,does,not,take,care,of,synchronization,the,user,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,this,method,essentially,reserves,the,whole,buffer,for,one,record,as,such,it,imposes,some,performance,restrictions,and,should,only,be,used,when,absolutely,necessary,param,value,record,to,send,return,size,of,the,written,buffer,throws,ioexception;suppress,warnings,unchecked,public,int,send,record,object,value,throws,ioexception,file,buffer,clear,int,group,0,serializer,group,get,serializer,value,byte,buffer,bb,serializer,group,serialize,value,if,bb,remaining,throw,new,runtime,exception,serialized,object,does,not,fit,into,a,single,buffer,file,buffer,put,bb,int,size,file,buffer,position,reset,return,size
PythonSender -> protected <IN> int sendBuffer(SingleElementPushBackIterator<IN> input, Serializer<IN> serializer) throws IOException;1491417810;Extracts records from an iterator and writes them to the memory-mapped file. This method assumes that all values_in the iterator are of the same type. This method does NOT take care of synchronization. The caller must_guarantee that the file may be written to before calling this method.__@param input     iterator containing records_@param serializer serializer for the input records_@return size of the written buffer_@throws IOException;protected <IN> int sendBuffer(SingleElementPushBackIterator<IN> input, Serializer<IN> serializer) throws IOException {_		fileBuffer.clear()___		while (input.hasNext()) {_			IN value = input.next()__			ByteBuffer bb = serializer.serialize(value)__			if (bb.remaining() > MAPPED_FILE_SIZE) {_				throw new RuntimeException("Serialized object does not fit into a single buffer.")__			}_			if (bb.remaining() <= fileBuffer.remaining()) {_				fileBuffer.put(bb)__			} else {_				input.pushBack(value)__				break__			}_		}__		int size = fileBuffer.position()__		return size__	};extracts,records,from,an,iterator,and,writes,them,to,the,memory,mapped,file,this,method,assumes,that,all,values,in,the,iterator,are,of,the,same,type,this,method,does,not,take,care,of,synchronization,the,caller,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,param,input,iterator,containing,records,param,serializer,serializer,for,the,input,records,return,size,of,the,written,buffer,throws,ioexception;protected,in,int,send,buffer,single,element,push,back,iterator,in,input,serializer,in,serializer,throws,ioexception,file,buffer,clear,while,input,has,next,in,value,input,next,byte,buffer,bb,serializer,serialize,value,if,bb,remaining,throw,new,runtime,exception,serialized,object,does,not,fit,into,a,single,buffer,if,bb,remaining,file,buffer,remaining,file,buffer,put,bb,else,input,push,back,value,break,int,size,file,buffer,position,return,size
PythonSender -> protected <IN> int sendBuffer(SingleElementPushBackIterator<IN> input, Serializer<IN> serializer) throws IOException;1491469031;Extracts records from an iterator and writes them to the memory-mapped file. This method assumes that all values_in the iterator are of the same type. This method does NOT take care of synchronization. The caller must_guarantee that the file may be written to before calling this method.__@param input     iterator containing records_@param serializer serializer for the input records_@return size of the written buffer_@throws IOException;protected <IN> int sendBuffer(SingleElementPushBackIterator<IN> input, Serializer<IN> serializer) throws IOException {_		fileBuffer.clear()___		while (input.hasNext()) {_			IN value = input.next()__			ByteBuffer bb = serializer.serialize(value)__			if (bb.remaining() > mappedFileSizeBytes) {_				throw new RuntimeException("Serialized object does not fit into a single buffer.")__			}_			if (bb.remaining() <= fileBuffer.remaining()) {_				fileBuffer.put(bb)__			} else {_				input.pushBack(value)__				break__			}_		}__		int size = fileBuffer.position()__		return size__	};extracts,records,from,an,iterator,and,writes,them,to,the,memory,mapped,file,this,method,assumes,that,all,values,in,the,iterator,are,of,the,same,type,this,method,does,not,take,care,of,synchronization,the,caller,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,param,input,iterator,containing,records,param,serializer,serializer,for,the,input,records,return,size,of,the,written,buffer,throws,ioexception;protected,in,int,send,buffer,single,element,push,back,iterator,in,input,serializer,in,serializer,throws,ioexception,file,buffer,clear,while,input,has,next,in,value,input,next,byte,buffer,bb,serializer,serialize,value,if,bb,remaining,mapped,file,size,bytes,throw,new,runtime,exception,serialized,object,does,not,fit,into,a,single,buffer,if,bb,remaining,file,buffer,remaining,file,buffer,put,bb,else,input,push,back,value,break,int,size,file,buffer,position,return,size
PythonSender -> protected <IN> int sendBuffer(SingleElementPushBackIterator<IN> input, Serializer<IN> serializer) throws IOException;1495637163;Extracts records from an iterator and writes them to the memory-mapped file. This method assumes that all values_in the iterator are of the same type. This method does NOT take care of synchronization. The caller must_guarantee that the file may be written to before calling this method.__@param input     iterator containing records_@param serializer serializer for the input records_@return size of the written buffer_@throws IOException;protected <IN> int sendBuffer(SingleElementPushBackIterator<IN> input, Serializer<IN> serializer) throws IOException {_		fileBuffer.clear()___		while (input.hasNext()) {_			IN value = input.next()__			ByteBuffer bb = serializer.serialize(value)__			if (bb.remaining() > mappedFileSizeBytes) {_				throw new RuntimeException("Serialized object does not fit into a single buffer.")__			}_			if (bb.remaining() <= fileBuffer.remaining()) {_				fileBuffer.put(bb)__			} else {_				input.pushBack(value)__				break__			}_		}__		int size = fileBuffer.position()__		return size__	};extracts,records,from,an,iterator,and,writes,them,to,the,memory,mapped,file,this,method,assumes,that,all,values,in,the,iterator,are,of,the,same,type,this,method,does,not,take,care,of,synchronization,the,caller,must,guarantee,that,the,file,may,be,written,to,before,calling,this,method,param,input,iterator,containing,records,param,serializer,serializer,for,the,input,records,return,size,of,the,written,buffer,throws,ioexception;protected,in,int,send,buffer,single,element,push,back,iterator,in,input,serializer,in,serializer,throws,ioexception,file,buffer,clear,while,input,has,next,in,value,input,next,byte,buffer,bb,serializer,serialize,value,if,bb,remaining,mapped,file,size,bytes,throw,new,runtime,exception,serialized,object,does,not,fit,into,a,single,buffer,if,bb,remaining,file,buffer,remaining,file,buffer,put,bb,else,input,push,back,value,break,int,size,file,buffer,position,return,size
