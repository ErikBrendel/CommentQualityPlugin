# id;timestamp;commentText;codeText;commentWords;codeWords
NFATest -> @Test 	public void testWindowBorders() throws Exception;1527863170;Tests that elements whose timestamp difference is exactly the window length are not matched._The reason is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() throws Exception {_		NFA<Event> nfa = createStartEndNFA()__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, nfa.createInitialNFAState(), streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reason,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,throws,exception,nfa,event,nfa,create,start,end,nfa,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,list,event,expected,patterns,collections,empty,set,collection,map,string,list,event,actual,patterns,run,nfa,nfa,nfa,create,initial,nfastate,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders() throws Exception;1528217861;Tests that elements whose timestamp difference is exactly the window length are not matched._The reason is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() throws Exception {_		NFA<Event> nfa = createStartEndNFA()__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, nfa.createInitialNFAState(), streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reason,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,throws,exception,nfa,event,nfa,create,start,end,nfa,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,list,event,expected,patterns,collections,empty,set,collection,map,string,list,event,actual,patterns,run,nfa,nfa,nfa,create,initial,nfastate,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders() throws Exception;1535555335;Tests that elements whose timestamp difference is exactly the window length are not matched._The reason is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() throws Exception {_		NFA<Event> nfa = createStartEndNFA()__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, nfa.createInitialNFAState(), streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reason,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,throws,exception,nfa,event,nfa,create,start,end,nfa,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,list,event,expected,patterns,collections,empty,set,collection,map,string,list,event,actual,patterns,run,nfa,nfa,nfa,create,initial,nfastate,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders() throws Exception;1544602567;Tests that elements whose timestamp difference is exactly the window length are not matched._The reason is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		List<Map<String, List<Event>>> expectedPatterns = Collections.emptyList()___		NFA<Event> nfa = createStartEndNFA()__		NFATestHarness nfaTestHarness = NFATestHarness.forNFA(nfa).build()___		Collection<Map<String, List<Event>>> actualPatterns = nfaTestHarness.consumeRecords(streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reason,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,throws,exception,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,list,map,string,list,event,expected,patterns,collections,empty,list,nfa,event,nfa,create,start,end,nfa,nfatest,harness,nfa,test,harness,nfatest,harness,for,nfa,nfa,build,collection,map,string,list,event,actual,patterns,nfa,test,harness,consume,records,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders() throws Exception;1548236357;Tests that elements whose timestamp difference is exactly the window length are not matched._The reason is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		List<Map<String, List<Event>>> expectedPatterns = Collections.emptyList()___		NFA<Event> nfa = createStartEndNFA()__		NFATestHarness nfaTestHarness = NFATestHarness.forNFA(nfa).build()___		Collection<Map<String, List<Event>>> actualPatterns = nfaTestHarness.consumeRecords(streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reason,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,throws,exception,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,list,map,string,list,event,expected,patterns,collections,empty,list,nfa,event,nfa,create,start,end,nfa,nfatest,harness,nfa,test,harness,nfatest,harness,for,nfa,nfa,build,collection,map,string,list,event,actual,patterns,nfa,test,harness,consume,records,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1461083852;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive);@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamEvent<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(StreamEvent.of(new Event(1, "start", 1.0), 1L))__		streamEvents.add(StreamEvent.of(new Event(2, "start", 2.0), 2L))__		streamEvents.add(StreamEvent.of(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(StreamEvent.of(new Event(4, "end", 4.0), 3L))___		Set<Map<String, Event>> expectedPatterns = new HashSet<>()___		Map<String, Event> secondPattern = new HashMap<>()__		secondPattern.put("start", new Event(2, "start", 2.0))__		secondPattern.put("end", new Event(4, "end", 4.0))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, Event>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,event,event,stream,events,new,array,list,stream,events,add,stream,event,of,new,event,1,start,1,0,1l,stream,events,add,stream,event,of,new,event,2,start,2,0,2l,stream,events,add,stream,event,of,new,event,3,foobar,3,0,3l,stream,events,add,stream,event,of,new,event,4,end,4,0,3l,set,map,string,event,expected,patterns,new,hash,set,map,string,event,second,pattern,new,hash,map,second,pattern,put,start,new,event,2,start,2,0,second,pattern,put,end,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1464255256;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive);@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamEvent<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(StreamEvent.of(new Event(1, "start", 1.0), 1L))__		streamEvents.add(StreamEvent.of(new Event(2, "start", 2.0), 2L))__		streamEvents.add(StreamEvent.of(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(StreamEvent.of(new Event(4, "end", 4.0), 3L))___		Set<Map<String, Event>> expectedPatterns = new HashSet<>()___		Map<String, Event> secondPattern = new HashMap<>()__		secondPattern.put("start", new Event(2, "start", 2.0))__		secondPattern.put("end", new Event(4, "end", 4.0))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, Event>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,event,event,stream,events,new,array,list,stream,events,add,stream,event,of,new,event,1,start,1,0,1l,stream,events,add,stream,event,of,new,event,2,start,2,0,2l,stream,events,add,stream,event,of,new,event,3,foobar,3,0,3l,stream,events,add,stream,event,of,new,event,4,end,4,0,3l,set,map,string,event,expected,patterns,new,hash,set,map,string,event,second,pattern,new,hash,map,second,pattern,put,start,new,event,2,start,2,0,second,pattern,put,end,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1467734209;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive);@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, Event>> expectedPatterns = new HashSet<>()___		Map<String, Event> secondPattern = new HashMap<>()__		secondPattern.put("start", new Event(2, "start", 2.0))__		secondPattern.put("end", new Event(4, "end", 4.0))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, Event>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,event,expected,patterns,new,hash,set,map,string,event,second,pattern,new,hash,map,second,pattern,put,start,new,event,2,start,2,0,second,pattern,put,end,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1489866780;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive);@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, Event>> expectedPatterns = new HashSet<>()___		Map<String, Event> secondPattern = new HashMap<>()__		secondPattern.put("start", new Event(2, "start", 2.0))__		secondPattern.put("end", new Event(4, "end", 4.0))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, Event>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,event,expected,patterns,new,hash,set,map,string,event,second,pattern,new,hash,map,second,pattern,put,start,new,event,2,start,2,0,second,pattern,put,end,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1490194327;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive);@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, Event>> expectedPatterns = new HashSet<>()___		Map<String, Event> secondPattern = new HashMap<>()__		secondPattern.put("start", new Event(2, "start", 2.0))__		secondPattern.put("end", new Event(4, "end", 4.0))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, Event>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,event,expected,patterns,new,hash,set,map,string,event,second,pattern,new,hash,map,second,pattern,put,start,new,event,2,start,2,0,second,pattern,put,end,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1493985307;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive);@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = new HashSet<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,list,event,expected,patterns,new,hash,set,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1494947249;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive);@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = new HashSet<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,list,event,expected,patterns,new,hash,set,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1495657626;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive).;@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = new HashSet<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,list,event,expected,patterns,new,hash,set,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1503413180;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive).;@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = new HashSet<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,list,event,expected,patterns,new,hash,set,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1507814432;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive).;@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = new HashSet<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,list,event,expected,patterns,new,hash,set,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1512788114;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive).;@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = new HashSet<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,list,event,expected,patterns,new,hash,set,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1515007198;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive).;@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = new HashSet<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,list,event,expected,patterns,new,hash,set,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders();1518008111;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive).;@Test_	public void testTimeoutWindowPruningWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = new HashSet<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, nfa.createNFAState(), streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,list,event,expected,patterns,new,hash,set,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,list,event,actual,patterns,run,nfa,nfa,nfa,create,nfastate,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1461083852;Tests that elements whose timestamp difference is exactly the window length are not matched._The reaon is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamEvent<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(StreamEvent.of(new Event(1, "start", 1.0), 1L))__		streamEvents.add(StreamEvent.of(new Event(2, "end", 2.0), 3L))___		Set<Map<String, Event>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, Event>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reaon,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,event,event,stream,events,new,array,list,stream,events,add,stream,event,of,new,event,1,start,1,0,1l,stream,events,add,stream,event,of,new,event,2,end,2,0,3l,set,map,string,event,expected,patterns,collections,empty,set,collection,map,string,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1464255256;Tests that elements whose timestamp difference is exactly the window length are not matched._The reaon is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamEvent<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(StreamEvent.of(new Event(1, "start", 1.0), 1L))__		streamEvents.add(StreamEvent.of(new Event(2, "end", 2.0), 3L))___		Set<Map<String, Event>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, Event>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reaon,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,event,event,stream,events,new,array,list,stream,events,add,stream,event,of,new,event,1,start,1,0,1l,stream,events,add,stream,event,of,new,event,2,end,2,0,3l,set,map,string,event,expected,patterns,collections,empty,set,collection,map,string,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1467734209;Tests that elements whose timestamp difference is exactly the window length are not matched._The reaon is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, Event>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, Event>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reaon,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,event,expected,patterns,collections,empty,set,collection,map,string,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1489866780;Tests that elements whose timestamp difference is exactly the window length are not matched._The reaon is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, Event>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, Event>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reaon,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,event,expected,patterns,collections,empty,set,collection,map,string,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1490194327;Tests that elements whose timestamp difference is exactly the window length are not matched._The reaon is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, Event>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, Event>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reaon,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,event,expected,patterns,collections,empty,set,collection,map,string,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1493985307;Tests that elements whose timestamp difference is exactly the window length are not matched._The reaon is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reaon,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,list,event,expected,patterns,collections,empty,set,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1494947249;Tests that elements whose timestamp difference is exactly the window length are not matched._The reaon is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reaon,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,list,event,expected,patterns,collections,empty,set,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1495657626;Tests that elements whose timestamp difference is exactly the window length are not matched._The reaon is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reaon,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,list,event,expected,patterns,collections,empty,set,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1503413180;Tests that elements whose timestamp difference is exactly the window length are not matched._The reaon is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reaon,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,list,event,expected,patterns,collections,empty,set,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1507814432;Tests that elements whose timestamp difference is exactly the window length are not matched._The reaon is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reaon,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,list,event,expected,patterns,collections,empty,set,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1512788114;Tests that elements whose timestamp difference is exactly the window length are not matched._The reaon is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reaon,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,list,event,expected,patterns,collections,empty,set,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1515007198;Tests that elements whose timestamp difference is exactly the window length are not matched._The reason is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reason,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,list,event,expected,patterns,collections,empty,set,collection,map,string,list,event,actual,patterns,run,nfa,nfa,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testWindowBorders();1518008111;Tests that elements whose timestamp difference is exactly the window length are not matched._The reason is that the right window side (later elements) is exclusive.;@Test_	public void testWindowBorders() {_		NFA<Event> nfa = createStartEndNFA(2)__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "end", 2.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = Collections.emptySet()___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, nfa.createNFAState(), streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,elements,whose,timestamp,difference,is,exactly,the,window,length,are,not,matched,the,reason,is,that,the,right,window,side,later,elements,is,exclusive;test,public,void,test,window,borders,nfa,event,nfa,create,start,end,nfa,2,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,end,2,0,3l,set,map,string,list,event,expected,patterns,collections,empty,set,collection,map,string,list,event,actual,patterns,run,nfa,nfa,nfa,create,nfastate,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders() throws Exception;1527863170;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive).;@Test_	public void testTimeoutWindowPruningWindowBorders() throws Exception {_		NFA<Event> nfa = createStartEndNFA()__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = new HashSet<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, nfa.createInitialNFAState(), streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,throws,exception,nfa,event,nfa,create,start,end,nfa,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,list,event,expected,patterns,new,hash,set,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,list,event,actual,patterns,run,nfa,nfa,nfa,create,initial,nfastate,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders() throws Exception;1528217861;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive).;@Test_	public void testTimeoutWindowPruningWindowBorders() throws Exception {_		NFA<Event> nfa = createStartEndNFA()__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = new HashSet<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, nfa.createInitialNFAState(), streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,throws,exception,nfa,event,nfa,create,start,end,nfa,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,list,event,expected,patterns,new,hash,set,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,list,event,actual,patterns,run,nfa,nfa,nfa,create,initial,nfastate,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders() throws Exception;1535555335;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive).;@Test_	public void testTimeoutWindowPruningWindowBorders() throws Exception {_		NFA<Event> nfa = createStartEndNFA()__		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		Set<Map<String, List<Event>>> expectedPatterns = new HashSet<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		Collection<Map<String, List<Event>>> actualPatterns = runNFA(nfa, nfa.createInitialNFAState(), streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,throws,exception,nfa,event,nfa,create,start,end,nfa,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,set,map,string,list,event,expected,patterns,new,hash,set,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,collection,map,string,list,event,actual,patterns,run,nfa,nfa,nfa,create,initial,nfastate,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders() throws Exception;1544602567;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive).;@Test_	public void testTimeoutWindowPruningWindowBorders() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		List<Map<String, List<Event>>> expectedPatterns = new ArrayList<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		NFA<Event> nfa = createStartEndNFA()__		NFATestHarness nfaTestHarness = NFATestHarness.forNFA(nfa).build()___		Collection<Map<String, List<Event>>> actualPatterns = nfaTestHarness.consumeRecords(streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,throws,exception,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,list,map,string,list,event,expected,patterns,new,array,list,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,nfa,event,nfa,create,start,end,nfa,nfatest,harness,nfa,test,harness,nfatest,harness,for,nfa,nfa,build,collection,map,string,list,event,actual,patterns,nfa,test,harness,consume,records,stream,events,assert,equals,expected,patterns,actual,patterns
NFATest -> @Test 	public void testTimeoutWindowPruningWindowBorders() throws Exception;1548236357;Tests that pruning shared buffer elements and computations state use the same window border_semantics (left side inclusive and right side exclusive).;@Test_	public void testTimeoutWindowPruningWindowBorders() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		streamEvents.add(new StreamRecord<>(new Event(1, "start", 1.0), 1L))__		streamEvents.add(new StreamRecord<>(new Event(2, "start", 2.0), 2L))__		streamEvents.add(new StreamRecord<>(new Event(3, "foobar", 3.0), 3L))__		streamEvents.add(new StreamRecord<>(new Event(4, "end", 4.0), 3L))___		List<Map<String, List<Event>>> expectedPatterns = new ArrayList<>()___		Map<String, List<Event>> secondPattern = new HashMap<>()__		secondPattern.put("start", Collections.singletonList(new Event(2, "start", 2.0)))__		secondPattern.put("end", Collections.singletonList(new Event(4, "end", 4.0)))___		expectedPatterns.add(secondPattern)___		NFA<Event> nfa = createStartEndNFA()__		NFATestHarness nfaTestHarness = NFATestHarness.forNFA(nfa).build()___		Collection<Map<String, List<Event>>> actualPatterns = nfaTestHarness.consumeRecords(streamEvents)___		assertEquals(expectedPatterns, actualPatterns)__	};tests,that,pruning,shared,buffer,elements,and,computations,state,use,the,same,window,border,semantics,left,side,inclusive,and,right,side,exclusive;test,public,void,test,timeout,window,pruning,window,borders,throws,exception,list,stream,record,event,stream,events,new,array,list,stream,events,add,new,stream,record,new,event,1,start,1,0,1l,stream,events,add,new,stream,record,new,event,2,start,2,0,2l,stream,events,add,new,stream,record,new,event,3,foobar,3,0,3l,stream,events,add,new,stream,record,new,event,4,end,4,0,3l,list,map,string,list,event,expected,patterns,new,array,list,map,string,list,event,second,pattern,new,hash,map,second,pattern,put,start,collections,singleton,list,new,event,2,start,2,0,second,pattern,put,end,collections,singleton,list,new,event,4,end,4,0,expected,patterns,add,second,pattern,nfa,event,nfa,create,start,end,nfa,nfatest,harness,nfa,test,harness,nfatest,harness,for,nfa,nfa,build,collection,map,string,list,event,actual,patterns,nfa,test,harness,consume,records,stream,events,assert,equals,expected,patterns,actual,patterns
