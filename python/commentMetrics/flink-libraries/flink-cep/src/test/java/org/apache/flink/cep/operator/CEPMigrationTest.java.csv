# id;timestamp;commentText;codeText;commentWords;codeWords
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1496524291;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						new KeyedCEPPatternOperator<>(_								Event.createTypeSerializer(),_								false,_								IntSerializer.INSTANCE,_								new NFAFactory(),_								true),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1501246266;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						new KeyedCEPPatternOperator<>(_								Event.createTypeSerializer(),_								false,_								IntSerializer.INSTANCE,_								new NFAFactory(),_								true,_								null),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,null,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1502445388;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1503588494;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1503654807;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1517493237;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1518008111;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1519378569;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1525441287;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1527863170;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1534698247;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1545143113;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1545190012;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1547128723;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAfterBranchingPatternSnapshot() throws Exception;1547221798;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAfterBranchingPatternSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)__		final SubEvent middleEvent2 = new SubEvent(42, "foo2", 2.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()___			harness.processElement(new StreamRecord<Event>(startEvent, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processElement(new StreamRecord<Event>(middleEvent2, 3))___			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-after-branching-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,after,branching,pattern,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,final,sub,event,middle,event2,new,sub,event,42,foo2,2,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,element,new,stream,record,event,middle,event2,3,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,after,branching,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1496524291;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						new KeyedCEPPatternOperator<>(_								Event.createTypeSerializer(),_								false,_								IntSerializer.INSTANCE,_								new SinglePatternNFAFactory(),_								true),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,single,pattern,nfafactory,true,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1501246266;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						new KeyedCEPPatternOperator<>(_								Event.createTypeSerializer(),_								false,_								IntSerializer.INSTANCE,_								new SinglePatternNFAFactory(),_								true,_								null),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,single,pattern,nfafactory,true,null,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1502445388;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1503588494;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1503654807;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1517493237;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1518008111;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1519378569;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1525441287;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1527863170;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1534698247;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1545143113;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1545190012;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1547128723;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeSinglePatternAfterMigrationSnapshot() throws Exception;1547221798;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeSinglePatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						getKeyedCepOpearator(false, new SinglePatternNFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-single-pattern-afterwards-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,single,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,single,pattern,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,single,pattern,afterwards,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception;1503654807;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new SubEvent(42, "start", 1.0, 6.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				getKeyedCepOpearator(false, new NFAComplexConditionsFactory()),_				keySelector,_				BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<>(startEvent1, 5))__			harness.processWatermark(new Watermark(6))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-conditions-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,and,or,subtyp,conditions,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,sub,event,42,start,1,0,6,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfacomplex,conditions,factory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,start,event1,5,harness,process,watermark,new,watermark,6,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,conditions,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception;1517493237;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new SubEvent(42, "start", 1.0, 6.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				getKeyedCepOpearator(false, new NFAComplexConditionsFactory()),_				keySelector,_				BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<>(startEvent1, 5))__			harness.processWatermark(new Watermark(6))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-conditions-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,and,or,subtyp,conditions,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,sub,event,42,start,1,0,6,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfacomplex,conditions,factory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,start,event1,5,harness,process,watermark,new,watermark,6,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,conditions,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception;1518008111;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new SubEvent(42, "start", 1.0, 6.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				getKeyedCepOpearator(false, new NFAComplexConditionsFactory()),_				keySelector,_				BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<>(startEvent1, 5))__			harness.processWatermark(new Watermark(6))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-conditions-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,and,or,subtyp,conditions,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,sub,event,42,start,1,0,6,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfacomplex,conditions,factory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,start,event1,5,harness,process,watermark,new,watermark,6,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,conditions,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception;1519378569;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new SubEvent(42, "start", 1.0, 6.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				getKeyedCepOpearator(false, new NFAComplexConditionsFactory()),_				keySelector,_				BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<>(startEvent1, 5))__			harness.processWatermark(new Watermark(6))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-conditions-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,and,or,subtyp,conditions,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,sub,event,42,start,1,0,6,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfacomplex,conditions,factory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,start,event1,5,harness,process,watermark,new,watermark,6,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,conditions,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception;1525441287;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new SubEvent(42, "start", 1.0, 6.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				getKeyedCepOpearator(false, new NFAComplexConditionsFactory()),_				keySelector,_				BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<>(startEvent1, 5))__			harness.processWatermark(new Watermark(6))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-conditions-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,and,or,subtyp,conditions,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,sub,event,42,start,1,0,6,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfacomplex,conditions,factory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,start,event1,5,harness,process,watermark,new,watermark,6,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,conditions,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception;1527863170;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new SubEvent(42, "start", 1.0, 6.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				getKeyedCepOpearator(false, new NFAComplexConditionsFactory()),_				keySelector,_				BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<>(startEvent1, 5))__			harness.processWatermark(new Watermark(6))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-conditions-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,and,or,subtyp,conditions,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,sub,event,42,start,1,0,6,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfacomplex,conditions,factory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,start,event1,5,harness,process,watermark,new,watermark,6,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,conditions,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception;1534698247;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new SubEvent(42, "start", 1.0, 6.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				getKeyedCepOpearator(false, new NFAComplexConditionsFactory()),_				keySelector,_				BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<>(startEvent1, 5))__			harness.processWatermark(new Watermark(6))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-conditions-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,and,or,subtyp,conditions,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,sub,event,42,start,1,0,6,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfacomplex,conditions,factory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,start,event1,5,harness,process,watermark,new,watermark,6,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,conditions,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception;1545143113;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new SubEvent(42, "start", 1.0, 6.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				getKeyedCepOpearator(false, new NFAComplexConditionsFactory()),_				keySelector,_				BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<>(startEvent1, 5))__			harness.processWatermark(new Watermark(6))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-conditions-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,and,or,subtyp,conditions,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,sub,event,42,start,1,0,6,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfacomplex,conditions,factory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,start,event1,5,harness,process,watermark,new,watermark,6,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,conditions,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception;1545190012;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new SubEvent(42, "start", 1.0, 6.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				getKeyedCepOpearator(false, new NFAComplexConditionsFactory()),_				keySelector,_				BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<>(startEvent1, 5))__			harness.processWatermark(new Watermark(6))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-conditions-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,and,or,subtyp,conditions,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,sub,event,42,start,1,0,6,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfacomplex,conditions,factory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,start,event1,5,harness,process,watermark,new,watermark,6,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,conditions,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception;1547128723;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new SubEvent(42, "start", 1.0, 6.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				getKeyedCepOpearator(false, new NFAComplexConditionsFactory()),_				keySelector,_				BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<>(startEvent1, 5))__			harness.processWatermark(new Watermark(6))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-conditions-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,and,or,subtyp,conditions,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,sub,event,42,start,1,0,6,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfacomplex,conditions,factory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,start,event1,5,harness,process,watermark,new,watermark,6,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,conditions,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception;1547221798;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeAndOrSubtypConditionsPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new SubEvent(42, "start", 1.0, 6.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_			new KeyedOneInputStreamOperatorTestHarness<>(_				getKeyedCepOpearator(false, new NFAComplexConditionsFactory()),_				keySelector,_				BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<>(startEvent1, 5))__			harness.processWatermark(new Watermark(6))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-conditions-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,and,or,subtyp,conditions,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,sub,event,42,start,1,0,6,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfacomplex,conditions,factory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,start,event1,5,harness,process,watermark,new,watermark,6,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,conditions,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1496524291;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						new KeyedCEPPatternOperator<>(_								Event.createTypeSerializer(),_								false,_								IntSerializer.INSTANCE,_								new NFAFactory(),_								true),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1501246266;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_						new KeyedCEPPatternOperator<>(_								Event.createTypeSerializer(),_								false,_								IntSerializer.INSTANCE,_								new NFAFactory(),_								true,_								null),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,new,keyed,ceppattern,operator,event,create,type,serializer,false,int,serializer,instance,new,nfafactory,true,null,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1502445388;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1503588494;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1503654807;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1517493237;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorStateHandles snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,state,handles,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1518008111;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1519378569;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1525441287;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1527863170;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1534698247;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1545143113;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1545190012;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1547128723;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
CEPMigrationTest -> @Ignore 	@Test 	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception;1547221798;Manually run this to write binary snapshot data.;@Ignore_	@Test_	public void writeStartingNewPatternAfterMigrationSnapshot() throws Exception {__		KeySelector<Event, Integer> keySelector = new KeySelector<Event, Integer>() {_			private static final long serialVersionUID = -4873366487571254798L___			@Override_			public Integer getKey(Event value) throws Exception {_				return value.getId()__			}_		}___		final Event startEvent1 = new Event(42, "start", 1.0)__		final SubEvent middleEvent1 = new SubEvent(42, "foo1", 1.0, 10.0)___		OneInputStreamOperatorTestHarness<Event, Map<String, List<Event>>> harness =_				new KeyedOneInputStreamOperatorTestHarness<>(_					getKeyedCepOpearator(false, new NFAFactory()),_						keySelector,_						BasicTypeInfo.INT_TYPE_INFO)___		try {_			harness.setup()__			harness.open()__			harness.processElement(new StreamRecord<Event>(startEvent1, 1))__			harness.processElement(new StreamRecord<Event>(new Event(42, "foobar", 1.0), 2))__			harness_				.processElement(new StreamRecord<Event>(new SubEvent(42, "barfoo", 1.0, 5.0), 3))__			harness.processElement(new StreamRecord<Event>(middleEvent1, 2))__			harness.processWatermark(new Watermark(5))___			_			OperatorSubtaskState snapshot = harness.snapshot(0L, 0L)__			OperatorSnapshotUtil.writeStateHandle(snapshot,_				"src/test/resources/cep-migration-starting-new-pattern-flink" + flinkGenerateSavepointVersion + "-snapshot")__		} finally {_			harness.close()__		}_	};manually,run,this,to,write,binary,snapshot,data;ignore,test,public,void,write,starting,new,pattern,after,migration,snapshot,throws,exception,key,selector,event,integer,key,selector,new,key,selector,event,integer,private,static,final,long,serial,version,uid,4873366487571254798l,override,public,integer,get,key,event,value,throws,exception,return,value,get,id,final,event,start,event1,new,event,42,start,1,0,final,sub,event,middle,event1,new,sub,event,42,foo1,1,0,10,0,one,input,stream,operator,test,harness,event,map,string,list,event,harness,new,keyed,one,input,stream,operator,test,harness,get,keyed,cep,opearator,false,new,nfafactory,key,selector,basic,type,info,try,harness,setup,harness,open,harness,process,element,new,stream,record,event,start,event1,1,harness,process,element,new,stream,record,event,new,event,42,foobar,1,0,2,harness,process,element,new,stream,record,event,new,sub,event,42,barfoo,1,0,5,0,3,harness,process,element,new,stream,record,event,middle,event1,2,harness,process,watermark,new,watermark,5,operator,subtask,state,snapshot,harness,snapshot,0l,0l,operator,snapshot,util,write,state,handle,snapshot,src,test,resources,cep,migration,starting,new,pattern,flink,flink,generate,savepoint,version,snapshot,finally,harness,close
