# id;timestamp;commentText;codeText;commentWords;codeWords
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1452762263;Tests that the NFACompiler generates the correct NFA from a given Pattern;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 3314714776170474221L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getPrice() > 2__			}_		})_		.followedBy("middle").subtype(SubEvent.class)_		.next("end").where(new FilterFunction<Event>() {_				private static final long serialVersionUID = 3990995859716364087L___				@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		TypeInformation<Event> typeInformation = (TypeInformation<Event>) TypeExtractor.createTypeInfo(Event.class)___		NFA<Event> nfa = NFACompiler.<Event>compile(pattern, typeInformation.createSerializer(new ExecutionConfig()))___		Set<State<Event>> states = nfa.getStates()___		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()___		for (State<Event> state: states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey(NFACompiler.BEGINNING_STATE_NAME))__		State<Event> beginningState = stateMap.get(NFACompiler.BEGINNING_STATE_NAME)___		assertTrue(beginningState.isStart())___		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")___		Collection<StateTransition<Event>> startTransitions = startState.getStateTransitions()__		Map<String, StateTransition<Event>> startTransitionMap = new HashMap<>()___		for (StateTransition<Event> transition: startTransitions) {_			startTransitionMap.put(transition.getTargetState().getName(), transition)__		}__		assertEquals(2, startTransitionMap.size())__		assertTrue(startTransitionMap.containsKey("start"))___		StateTransition<Event> reflexiveTransition = startTransitionMap.get("start")__		assertEquals(StateTransitionAction.IGNORE, reflexiveTransition.getAction())___		assertTrue(startTransitionMap.containsKey("middle"))__		StateTransition<Event> startMiddleTransition = startTransitionMap.get("middle")__		assertEquals(StateTransitionAction.TAKE, startMiddleTransition.getAction())___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")___		Map<String, StateTransition<Event>> middleTransitionMap = new HashMap<>()___		for (StateTransition<Event> transition: middleState.getStateTransitions()) {_			middleTransitionMap.put(transition.getTargetState().getName(), transition)__		}__		assertEquals(1, middleTransitionMap.size())___		assertTrue(middleTransitionMap.containsKey("end"))__		StateTransition<Event> middleEndTransition = middleTransitionMap.get("end")___		assertEquals(StateTransitionAction.TAKE, middleEndTransition.getAction())___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")___		assertTrue(endState.isFinal())__		assertEquals(0, endState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,3314714776170474221l,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,followed,by,middle,subtype,sub,event,class,next,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,3990995859716364087l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,type,information,event,type,information,type,information,event,type,extractor,create,type,info,event,class,nfa,event,nfa,nfacompiler,event,compile,pattern,type,information,create,serializer,new,execution,config,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,nfacompiler,state,event,beginning,state,state,map,get,nfacompiler,assert,true,beginning,state,is,start,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,collection,state,transition,event,start,transitions,start,state,get,state,transitions,map,string,state,transition,event,start,transition,map,new,hash,map,for,state,transition,event,transition,start,transitions,start,transition,map,put,transition,get,target,state,get,name,transition,assert,equals,2,start,transition,map,size,assert,true,start,transition,map,contains,key,start,state,transition,event,reflexive,transition,start,transition,map,get,start,assert,equals,state,transition,action,ignore,reflexive,transition,get,action,assert,true,start,transition,map,contains,key,middle,state,transition,event,start,middle,transition,start,transition,map,get,middle,assert,equals,state,transition,action,take,start,middle,transition,get,action,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,map,string,state,transition,event,middle,transition,map,new,hash,map,for,state,transition,event,transition,middle,state,get,state,transitions,middle,transition,map,put,transition,get,target,state,get,name,transition,assert,equals,1,middle,transition,map,size,assert,true,middle,transition,map,contains,key,end,state,transition,event,middle,end,transition,middle,transition,map,get,end,assert,equals,state,transition,action,take,middle,end,transition,get,action,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,assert,true,end,state,is,final,assert,equals,0,end,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1464255256;Tests that the NFACompiler generates the correct NFA from a given Pattern;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 3314714776170474221L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getPrice() > 2__			}_		})_		.followedBy("middle").subtype(SubEvent.class)_		.next("end").where(new FilterFunction<Event>() {_				private static final long serialVersionUID = 3990995859716364087L___				@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		TypeInformation<Event> typeInformation = TypeExtractor.createTypeInfo(Event.class)___		NFA<Event> nfa = NFACompiler.compile(pattern, typeInformation.createSerializer(new ExecutionConfig()), false)___		Set<State<Event>> states = nfa.getStates()___		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()___		for (State<Event> state: states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey(NFACompiler.BEGINNING_STATE_NAME))__		State<Event> beginningState = stateMap.get(NFACompiler.BEGINNING_STATE_NAME)___		assertTrue(beginningState.isStart())___		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")___		Collection<StateTransition<Event>> startTransitions = startState.getStateTransitions()__		Map<String, StateTransition<Event>> startTransitionMap = new HashMap<>()___		for (StateTransition<Event> transition: startTransitions) {_			startTransitionMap.put(transition.getTargetState().getName(), transition)__		}__		assertEquals(2, startTransitionMap.size())__		assertTrue(startTransitionMap.containsKey("start"))___		StateTransition<Event> reflexiveTransition = startTransitionMap.get("start")__		assertEquals(StateTransitionAction.IGNORE, reflexiveTransition.getAction())___		assertTrue(startTransitionMap.containsKey("middle"))__		StateTransition<Event> startMiddleTransition = startTransitionMap.get("middle")__		assertEquals(StateTransitionAction.TAKE, startMiddleTransition.getAction())___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")___		Map<String, StateTransition<Event>> middleTransitionMap = new HashMap<>()___		for (StateTransition<Event> transition: middleState.getStateTransitions()) {_			middleTransitionMap.put(transition.getTargetState().getName(), transition)__		}__		assertEquals(1, middleTransitionMap.size())___		assertTrue(middleTransitionMap.containsKey("end"))__		StateTransition<Event> middleEndTransition = middleTransitionMap.get("end")___		assertEquals(StateTransitionAction.TAKE, middleEndTransition.getAction())___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")___		assertTrue(endState.isFinal())__		assertEquals(0, endState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,3314714776170474221l,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,followed,by,middle,subtype,sub,event,class,next,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,3990995859716364087l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,type,information,event,type,information,type,extractor,create,type,info,event,class,nfa,event,nfa,nfacompiler,compile,pattern,type,information,create,serializer,new,execution,config,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,nfacompiler,state,event,beginning,state,state,map,get,nfacompiler,assert,true,beginning,state,is,start,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,collection,state,transition,event,start,transitions,start,state,get,state,transitions,map,string,state,transition,event,start,transition,map,new,hash,map,for,state,transition,event,transition,start,transitions,start,transition,map,put,transition,get,target,state,get,name,transition,assert,equals,2,start,transition,map,size,assert,true,start,transition,map,contains,key,start,state,transition,event,reflexive,transition,start,transition,map,get,start,assert,equals,state,transition,action,ignore,reflexive,transition,get,action,assert,true,start,transition,map,contains,key,middle,state,transition,event,start,middle,transition,start,transition,map,get,middle,assert,equals,state,transition,action,take,start,middle,transition,get,action,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,map,string,state,transition,event,middle,transition,map,new,hash,map,for,state,transition,event,transition,middle,state,get,state,transitions,middle,transition,map,put,transition,get,target,state,get,name,transition,assert,equals,1,middle,transition,map,size,assert,true,middle,transition,map,contains,key,end,state,transition,event,middle,end,transition,middle,transition,map,get,end,assert,equals,state,transition,action,take,middle,end,transition,get,action,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,assert,true,end,state,is,final,assert,equals,0,end,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1487681471;Tests that the NFACompiler generates the correct NFA from a given Pattern;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 3314714776170474221L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getPrice() > 2__			}_		})_		.followedBy("middle").subtype(SubEvent.class)_		.next("end").where(new FilterFunction<Event>() {_				private static final long serialVersionUID = 3990995859716364087L___				@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		TypeInformation<Event> typeInformation = TypeExtractor.createTypeInfo(Event.class)___		NFA<Event> nfa = NFACompiler.compile(pattern, typeInformation.createSerializer(new ExecutionConfig()), false)___		Set<State<Event>> states = nfa.getStates()___		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()___		for (State<Event> state: states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey(NFACompiler.BEGINNING_STATE_NAME))__		State<Event> beginningState = stateMap.get(NFACompiler.BEGINNING_STATE_NAME)___		assertTrue(beginningState.isStart())___		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")___		Collection<StateTransition<Event>> startTransitions = startState.getStateTransitions()__		Map<String, StateTransition<Event>> startTransitionMap = new HashMap<>()___		for (StateTransition<Event> transition: startTransitions) {_			startTransitionMap.put(transition.getTargetState().getName(), transition)__		}__		assertEquals(2, startTransitionMap.size())__		assertTrue(startTransitionMap.containsKey("start"))___		StateTransition<Event> reflexiveTransition = startTransitionMap.get("start")__		assertEquals(StateTransitionAction.IGNORE, reflexiveTransition.getAction())___		assertTrue(startTransitionMap.containsKey("middle"))__		StateTransition<Event> startMiddleTransition = startTransitionMap.get("middle")__		assertEquals(StateTransitionAction.TAKE, startMiddleTransition.getAction())___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")___		Map<String, StateTransition<Event>> middleTransitionMap = new HashMap<>()___		for (StateTransition<Event> transition: middleState.getStateTransitions()) {_			middleTransitionMap.put(transition.getTargetState().getName(), transition)__		}__		assertEquals(1, middleTransitionMap.size())___		assertTrue(middleTransitionMap.containsKey("end"))__		StateTransition<Event> middleEndTransition = middleTransitionMap.get("end")___		assertEquals(StateTransitionAction.TAKE, middleEndTransition.getAction())___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")___		assertTrue(endState.isFinal())__		assertEquals(0, endState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,3314714776170474221l,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,followed,by,middle,subtype,sub,event,class,next,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,3990995859716364087l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,type,information,event,type,information,type,extractor,create,type,info,event,class,nfa,event,nfa,nfacompiler,compile,pattern,type,information,create,serializer,new,execution,config,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,nfacompiler,state,event,beginning,state,state,map,get,nfacompiler,assert,true,beginning,state,is,start,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,collection,state,transition,event,start,transitions,start,state,get,state,transitions,map,string,state,transition,event,start,transition,map,new,hash,map,for,state,transition,event,transition,start,transitions,start,transition,map,put,transition,get,target,state,get,name,transition,assert,equals,2,start,transition,map,size,assert,true,start,transition,map,contains,key,start,state,transition,event,reflexive,transition,start,transition,map,get,start,assert,equals,state,transition,action,ignore,reflexive,transition,get,action,assert,true,start,transition,map,contains,key,middle,state,transition,event,start,middle,transition,start,transition,map,get,middle,assert,equals,state,transition,action,take,start,middle,transition,get,action,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,map,string,state,transition,event,middle,transition,map,new,hash,map,for,state,transition,event,transition,middle,state,get,state,transitions,middle,transition,map,put,transition,get,target,state,get,name,transition,assert,equals,1,middle,transition,map,size,assert,true,middle,transition,map,contains,key,end,state,transition,event,middle,end,transition,middle,transition,map,get,end,assert,equals,state,transition,action,take,middle,end,transition,get,action,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,assert,true,end,state,is,final,assert,equals,0,end,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1489866780;Tests that the NFACompiler generates the correct NFA from a given Pattern;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = NFACompiler.compile(pattern, serializer, false)___		Set<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,nfacompiler,compile,pattern,serializer,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1490194327;Tests that the NFACompiler generates the correct NFA from a given Pattern;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = NFACompiler.compile(pattern, serializer, false)___		Set<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,nfacompiler,compile,pattern,serializer,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1491320734;Tests that the NFACompiler generates the correct NFA from a given Pattern;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = NFACompiler.compile(pattern, serializer, false)___		Set<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,nfacompiler,compile,pattern,serializer,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1493200673;Tests that the NFACompiler generates the correct NFA from a given Pattern;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = NFACompiler.compile(pattern, serializer, false)___		Set<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,nfacompiler,compile,pattern,serializer,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1493385877;Tests that the NFACompiler generates the correct NFA from a given Pattern;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = NFACompiler.compile(pattern, serializer, false)___		Set<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,nfacompiler,compile,pattern,serializer,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1493985307;Tests that the NFACompiler generates the correct NFA from a given Pattern;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = NFACompiler.compile(pattern, serializer, false)___		Set<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,nfacompiler,compile,pattern,serializer,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1495657626;Tests that the NFACompiler generates the correct NFA from a given Pattern.;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = NFACompiler.compile(pattern, serializer, false)___		Set<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,nfacompiler,compile,pattern,serializer,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1496245714;Tests that the NFACompiler generates the correct NFA from a given Pattern.;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = NFACompiler.compile(pattern, serializer, false)___		Set<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,nfacompiler,compile,pattern,serializer,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1500021711;Tests that the NFACompiler generates the correct NFA from a given Pattern.;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = NFACompiler.compile(pattern, serializer, false)___		Set<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(Sets.newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,nfacompiler,compile,pattern,serializer,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,sets,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1501592283;Tests that the NFACompiler generates the correct NFA from a given Pattern.;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = NFACompiler.compile(pattern, serializer, false)___		Set<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(Sets.newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,nfacompiler,compile,pattern,serializer,false,set,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,sets,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1518008111;Tests that the NFACompiler generates the correct NFA from a given Pattern.;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = NFACompiler.compile(pattern, serializer, false)___		Collection<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(Sets.newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,nfacompiler,compile,pattern,serializer,false,collection,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,sets,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1527863170;Tests that the NFACompiler generates the correct NFA from a given Pattern.;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = compile(pattern, false)___		Collection<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(Sets.newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,compile,pattern,false,collection,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,sets,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1528989005;Tests that the NFACompiler generates the correct NFA from a given Pattern.;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = compile(pattern, false)___		Collection<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(Sets.newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,compile,pattern,false,collection,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,sets,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
NFACompilerTest -> @Test 	public void testNFACompilerWithSimplePattern();1538745898;Tests that the NFACompiler generates the correct NFA from a given Pattern.;@Test_	public void testNFACompilerWithSimplePattern() {_		Pattern<Event, Event> pattern = Pattern.<Event>begin("start").where(startFilter)_			.followedBy("middle").subtype(SubEvent.class)_			.next("end").where(endFilter)___		NFA<Event> nfa = compile(pattern, false)___		Collection<State<Event>> states = nfa.getStates()__		assertEquals(4, states.size())___		Map<String, State<Event>> stateMap = new HashMap<>()__		for (State<Event> state : states) {_			stateMap.put(state.getName(), state)__		}__		assertTrue(stateMap.containsKey("start"))__		State<Event> startState = stateMap.get("start")__		assertTrue(startState.isStart())__		final Set<Tuple2<String, StateTransitionAction>> startTransitions = unfoldTransitions(startState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.TAKE)_		), startTransitions)___		assertTrue(stateMap.containsKey("middle"))__		State<Event> middleState = stateMap.get("middle")__		final Set<Tuple2<String, StateTransitionAction>> middleTransitions = unfoldTransitions(middleState)__		assertEquals(Sets.newHashSet(_			Tuple2.of("middle", StateTransitionAction.IGNORE),_			Tuple2.of("end", StateTransitionAction.TAKE)_		), middleTransitions)___		assertTrue(stateMap.containsKey("end"))__		State<Event> endState = stateMap.get("end")__		final Set<Tuple2<String, StateTransitionAction>> endTransitions = unfoldTransitions(endState)__		assertEquals(Sets.newHashSet(_			Tuple2.of(NFACompiler.ENDING_STATE_NAME, StateTransitionAction.TAKE)_		), endTransitions)___		assertTrue(stateMap.containsKey(NFACompiler.ENDING_STATE_NAME))__		State<Event> endingState = stateMap.get(NFACompiler.ENDING_STATE_NAME)__		assertTrue(endingState.isFinal())__		assertEquals(0, endingState.getStateTransitions().size())__	};tests,that,the,nfacompiler,generates,the,correct,nfa,from,a,given,pattern;test,public,void,test,nfacompiler,with,simple,pattern,pattern,event,event,pattern,pattern,event,begin,start,where,start,filter,followed,by,middle,subtype,sub,event,class,next,end,where,end,filter,nfa,event,nfa,compile,pattern,false,collection,state,event,states,nfa,get,states,assert,equals,4,states,size,map,string,state,event,state,map,new,hash,map,for,state,event,state,states,state,map,put,state,get,name,state,assert,true,state,map,contains,key,start,state,event,start,state,state,map,get,start,assert,true,start,state,is,start,final,set,tuple2,string,state,transition,action,start,transitions,unfold,transitions,start,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,take,start,transitions,assert,true,state,map,contains,key,middle,state,event,middle,state,state,map,get,middle,final,set,tuple2,string,state,transition,action,middle,transitions,unfold,transitions,middle,state,assert,equals,sets,new,hash,set,tuple2,of,middle,state,transition,action,ignore,tuple2,of,end,state,transition,action,take,middle,transitions,assert,true,state,map,contains,key,end,state,event,end,state,state,map,get,end,final,set,tuple2,string,state,transition,action,end,transitions,unfold,transitions,end,state,assert,equals,sets,new,hash,set,tuple2,of,nfacompiler,state,transition,action,take,end,transitions,assert,true,state,map,contains,key,nfacompiler,state,event,ending,state,state,map,get,nfacompiler,assert,true,ending,state,is,final,assert,equals,0,ending,state,get,state,transitions,size
