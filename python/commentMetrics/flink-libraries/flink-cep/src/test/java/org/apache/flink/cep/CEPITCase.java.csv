# id;timestamp;commentText;codeText;commentWords;codeWords
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1454421848;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 5681493970790509488L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new FilterFunction<SubEvent>() {_					private static final long serialVersionUID = 448591738315698540L___					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 6080276591060431966L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {_			private static final long serialVersionUID = 1447462674590806097L___			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,5681493970790509488l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,filter,function,sub,event,private,static,final,long,serial,version,uid,448591738315698540l,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,6080276591060431966l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,private,static,final,long,serial,version,uid,1447462674590806097l,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1455704943;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new FilterFunction<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,filter,function,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1456134383;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new FilterFunction<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,filter,function,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1456347641;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new FilterFunction<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,filter,function,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1456417982;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new FilterFunction<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,filter,function,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1456848141;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new FilterFunction<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,filter,function,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1459358363;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new FilterFunction<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,filter,function,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1466088497;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new FilterFunction<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,filter,function,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1471613162;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new FilterFunction<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,filter,function,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1489660607;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new FilterFunction<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new FilterFunction<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,filter,function,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1490638274;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1490951810;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1491298149;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedBy("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedBy("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1493382517;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedByAny("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1495024651;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedByAny("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1495024652;Checks that a certain event sequence is recognized_@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedByAny("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1495961498;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedByAny("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1502175365;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedByAny("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1505666195;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedByAny("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1515481551;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedByAny("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1530798894;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedByAny("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "2,6,8"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,2,6,8,env,execute
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1531455114;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedByAny("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		List<String> resultList = new ArrayList<>()___		DataStreamUtils.collect(result).forEachRemaining(resultList::add)___		assertEquals(Arrays.asList("2,6,8"), resultList)__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,list,string,result,list,new,array,list,data,stream,utils,collect,result,for,each,remaining,result,list,add,assert,equals,arrays,as,list,2,6,8,result,list
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1532066767;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedByAny("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).flatSelect((p, o) -> {_			StringBuilder builder = new StringBuilder()___			builder.append(p.get("start").get(0).getId()).append(",")_				.append(p.get("middle").get(0).getId()).append(",")_				.append(p.get("end").get(0).getId())___			o.collect(builder.toString())__		}, Types.STRING)___		List<String> resultList = new ArrayList<>()___		DataStreamUtils.collect(result).forEachRemaining(resultList::add)___		assertEquals(Arrays.asList("2,6,8"), resultList)__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,flat,select,p,o,string,builder,builder,new,string,builder,builder,append,p,get,start,get,0,get,id,append,append,p,get,middle,get,0,get,id,append,append,p,get,end,get,0,get,id,o,collect,builder,to,string,types,string,list,string,result,list,new,array,list,data,stream,utils,collect,result,for,each,remaining,result,list,add,assert,equals,arrays,as,list,2,6,8,result,list
CEPITCase -> @Test 	public void testSimplePatternCEP() throws Exception;1543413704;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "barfoo", 1.0),_			new Event(2, "start", 2.0),_			new Event(3, "foobar", 3.0),_			new SubEvent(4, "foo", 4.0, 1.0),_			new Event(5, "middle", 5.0),_			new SubEvent(6, "middle", 6.0, 2.0),_			new SubEvent(7, "bar", 3.0, 3.0),_			new Event(42, "42", 42.0),_			new Event(8, "end", 1.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		})_		.followedByAny("middle").subtype(SubEvent.class).where(_				new SimpleCondition<SubEvent>() {__					@Override_					public boolean filter(SubEvent value) throws Exception {_						return value.getName().equals("middle")__					}_				}_			)_		.followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern).flatSelect((p, o) -> {_			StringBuilder builder = new StringBuilder()___			builder.append(p.get("start").get(0).getId()).append(",")_				.append(p.get("middle").get(0).getId()).append(",")_				.append(p.get("end").get(0).getId())___			o.collect(builder.toString())__		}, Types.STRING)___		List<String> resultList = new ArrayList<>()___		DataStreamUtils.collect(result).forEachRemaining(resultList::add)___		assertEquals(Arrays.asList("2,6,8"), resultList)__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,barfoo,1,0,new,event,2,start,2,0,new,event,3,foobar,3,0,new,sub,event,4,foo,4,0,1,0,new,event,5,middle,5,0,new,sub,event,6,middle,6,0,2,0,new,sub,event,7,bar,3,0,3,0,new,event,42,42,42,0,new,event,8,end,1,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,subtype,sub,event,class,where,new,simple,condition,sub,event,override,public,boolean,filter,sub,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,flat,select,p,o,string,builder,builder,new,string,builder,builder,append,p,get,start,get,0,get,id,append,append,p,get,middle,get,0,get,id,append,append,p,get,end,get,0,get,id,o,collect,builder,to,string,types,string,list,string,result,list,new,array,list,data,stream,utils,collect,result,for,each,remaining,result,list,add,assert,equals,arrays,as,list,2,6,8,result,list
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1471613162;Checks that a certain event sequence is recognized with an OR filter_@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new FilterFunction<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedBy("middle")_			.where(new FilterFunction<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new FilterFunction<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedBy("end").where(new FilterFunction<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,end,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1489660607;Checks that a certain event sequence is recognized with an OR filter_@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new FilterFunction<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedBy("middle")_			.where(new FilterFunction<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new FilterFunction<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedBy("end").where(new FilterFunction<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,end,where,new,filter,function,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1490638274;Checks that a certain event sequence is recognized with an OR filter_@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedBy("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedBy("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1490951810;Checks that a certain event sequence is recognized with an OR filter_@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedBy("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedBy("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1491298149;Checks that a certain event sequence is recognized with an OR filter_@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedBy("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedBy("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1493382517;Checks that a certain event sequence is recognized with an OR filter_@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedByAny("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedByAny("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, Event> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").getId()).append(",")_					.append(pattern.get("middle").getId()).append(",")_					.append(pattern.get("end").getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,id,append,append,pattern,get,middle,get,id,append,append,pattern,get,end,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1495024651;Checks that a certain event sequence is recognized with an OR filter_@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedByAny("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedByAny("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1495024652;Checks that a certain event sequence is recognized with an OR filter_@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedByAny("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedByAny("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1495961498;Checks that a certain event sequence is recognized with an OR filter.__@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedByAny("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedByAny("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1502175365;Checks that a certain event sequence is recognized with an OR filter.__@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedByAny("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedByAny("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1505666195;Checks that a certain event sequence is recognized with an OR filter.__@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedByAny("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedByAny("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1515481551;Checks that a certain event sequence is recognized with an OR filter.__@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedByAny("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedByAny("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1530798894;Checks that a certain event sequence is recognized with an OR filter.__@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedByAny("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedByAny("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,5,6\n1,2,3\n4,5,6\n1,2,6"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,5,6,n1,2,3,n4,5,6,n1,2,6,env,execute
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1531455114;Checks that a certain event sequence is recognized with an OR filter.__@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedByAny("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedByAny("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		List<String> resultList = new ArrayList<>()___		DataStreamUtils.collect(result).forEachRemaining(resultList::add)___		List<String> expected = Arrays.asList(_			"1,5,6",_			"1,2,3",_			"4,5,6",_			"1,2,6"_		)___		expected.sort(String::compareTo)___		resultList.sort(String::compareTo)___		assertEquals(expected, resultList)__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,list,string,result,list,new,array,list,data,stream,utils,collect,result,for,each,remaining,result,list,add,list,string,expected,arrays,as,list,1,5,6,1,2,3,4,5,6,1,2,6,expected,sort,string,compare,to,result,list,sort,string,compare,to,assert,equals,expected,result,list
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1532066767;Checks that a certain event sequence is recognized with an OR filter.__@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedByAny("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedByAny("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		List<String> resultList = new ArrayList<>()___		DataStreamUtils.collect(result).forEachRemaining(resultList::add)___		List<String> expected = Arrays.asList(_			"1,5,6",_			"1,2,3",_			"4,5,6",_			"1,2,6"_		)___		expected.sort(String::compareTo)___		resultList.sort(String::compareTo)___		assertEquals(expected, resultList)__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,list,string,result,list,new,array,list,data,stream,utils,collect,result,for,each,remaining,result,list,add,list,string,expected,arrays,as,list,1,5,6,1,2,3,4,5,6,1,2,6,expected,sort,string,compare,to,result,list,sort,string,compare,to,assert,equals,expected,result,list
CEPITCase -> @Test 	public void testSimpleOrFilterPatternCEP() throws Exception;1543413704;Checks that a certain event sequence is recognized with an OR filter.__@throws Exception;@Test_	public void testSimpleOrFilterPatternCEP() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()___		DataStream<Event> input = env.fromElements(_			new Event(1, "start", 1.0),_			new Event(2, "middle", 2.0),_			new Event(3, "end", 3.0),_			new Event(4, "start", 4.0),_			new Event(5, "middle", 5.0),_			new Event(6, "end", 6.0)_		)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("start")__				}_			})_			.followedByAny("middle")_			.where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 2.0__				}_			})_			.or(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getPrice() == 5.0__				}_			})_			.followedByAny("end").where(new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().equals("end")__				}_			})___		DataStream<String> result = CEP.pattern(input, pattern).select(new PatternSelectFunction<Event, String>() {__			@Override_			public String select(Map<String, List<Event>> pattern) {_				StringBuilder builder = new StringBuilder()___				builder.append(pattern.get("start").get(0).getId()).append(",")_					.append(pattern.get("middle").get(0).getId()).append(",")_					.append(pattern.get("end").get(0).getId())___				return builder.toString()__			}_		})___		List<String> resultList = new ArrayList<>()___		DataStreamUtils.collect(result).forEachRemaining(resultList::add)___		List<String> expected = Arrays.asList(_			"1,5,6",_			"1,2,3",_			"4,5,6",_			"1,2,6"_		)___		expected.sort(String::compareTo)___		resultList.sort(String::compareTo)___		assertEquals(expected, resultList)__	};checks,that,a,certain,event,sequence,is,recognized,with,an,or,filter,throws,exception;test,public,void,test,simple,or,filter,pattern,cep,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,data,stream,event,input,env,from,elements,new,event,1,start,1,0,new,event,2,middle,2,0,new,event,3,end,3,0,new,event,4,start,4,0,new,event,5,middle,5,0,new,event,6,end,6,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,2,0,or,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,price,5,0,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,list,string,result,list,new,array,list,data,stream,utils,collect,result,for,each,remaining,result,list,add,list,string,expected,arrays,as,list,1,5,6,1,2,3,4,5,6,1,2,6,expected,sort,string,compare,to,result,list,sort,string,compare,to,assert,equals,expected,result,list
CEPITCase -> @Test 	public void testSimplePatternEventTimeWithComparator() throws Exception;1502175365;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternEventTimeWithComparator() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		_		DataStream<Event> input = env.fromElements(_			Tuple2.of(new Event(1, "start", 1.0), 5L),_			Tuple2.of(new Event(2, "middle", 2.0), 1L),_			Tuple2.of(new Event(3, "end", 3.0), 3L),_			Tuple2.of(new Event(4, "end", 4.0), 10L),_			Tuple2.of(new Event(5, "middle", 6.0), 7L),_			Tuple2.of(new Event(6, "middle", 5.0), 7L),_			_			Tuple2.of(new Event(7, "middle", 5.0), 100L)_		).assignTimestampsAndWatermarks(new AssignerWithPunctuatedWatermarks<Tuple2<Event, Long>>() {__			@Override_			public long extractTimestamp(Tuple2<Event, Long> element, long previousTimestamp) {_				return element.f1__			}__			@Override_			public Watermark checkAndGetNextWatermark(Tuple2<Event, Long> lastElement, long extractedTimestamp) {_				return new Watermark(lastElement.f1 - 5)__			}__		}).map(new MapFunction<Tuple2<Event, Long>, Event>() {__			@Override_			public Event map(Tuple2<Event, Long> value) throws Exception {_				return value.f0__			}_		})___		EventComparator<Event> comparator = new CustomEventComparator()___		Pattern<Event, ? extends Event> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern, comparator).select(_			new PatternSelectFunction<Event, String>() {__				@Override_				public String select(Map<String, List<Event>> pattern) {_					StringBuilder builder = new StringBuilder()___					builder.append(pattern.get("start").get(0).getId()).append(",")_						.append(pattern.get("middle").get(0).getId()).append(",")_						.append(pattern.get("end").get(0).getId())___					return builder.toString()__				}_			}_		)___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,6,4\n1,5,4"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,event,time,with,comparator,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,data,stream,event,input,env,from,elements,tuple2,of,new,event,1,start,1,0,5l,tuple2,of,new,event,2,middle,2,0,1l,tuple2,of,new,event,3,end,3,0,3l,tuple2,of,new,event,4,end,4,0,10l,tuple2,of,new,event,5,middle,6,0,7l,tuple2,of,new,event,6,middle,5,0,7l,tuple2,of,new,event,7,middle,5,0,100l,assign,timestamps,and,watermarks,new,assigner,with,punctuated,watermarks,tuple2,event,long,override,public,long,extract,timestamp,tuple2,event,long,element,long,previous,timestamp,return,element,f1,override,public,watermark,check,and,get,next,watermark,tuple2,event,long,last,element,long,extracted,timestamp,return,new,watermark,last,element,f1,5,map,new,map,function,tuple2,event,long,event,override,public,event,map,tuple2,event,long,value,throws,exception,return,value,f0,event,comparator,event,comparator,new,custom,event,comparator,pattern,event,extends,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,comparator,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,6,4,n1,5,4,env,execute
CEPITCase -> @Test 	public void testSimplePatternEventTimeWithComparator() throws Exception;1505666195;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternEventTimeWithComparator() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		_		DataStream<Event> input = env.fromElements(_			Tuple2.of(new Event(1, "start", 1.0), 5L),_			Tuple2.of(new Event(2, "middle", 2.0), 1L),_			Tuple2.of(new Event(3, "end", 3.0), 3L),_			Tuple2.of(new Event(4, "end", 4.0), 10L),_			Tuple2.of(new Event(5, "middle", 6.0), 7L),_			Tuple2.of(new Event(6, "middle", 5.0), 7L),_			_			Tuple2.of(new Event(7, "middle", 5.0), 100L)_		).assignTimestampsAndWatermarks(new AssignerWithPunctuatedWatermarks<Tuple2<Event, Long>>() {__			@Override_			public long extractTimestamp(Tuple2<Event, Long> element, long previousTimestamp) {_				return element.f1__			}__			@Override_			public Watermark checkAndGetNextWatermark(Tuple2<Event, Long> lastElement, long extractedTimestamp) {_				return new Watermark(lastElement.f1 - 5)__			}__		}).map(new MapFunction<Tuple2<Event, Long>, Event>() {__			@Override_			public Event map(Tuple2<Event, Long> value) throws Exception {_				return value.f0__			}_		})___		EventComparator<Event> comparator = new CustomEventComparator()___		Pattern<Event, ? extends Event> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern, comparator).select(_			new PatternSelectFunction<Event, String>() {__				@Override_				public String select(Map<String, List<Event>> pattern) {_					StringBuilder builder = new StringBuilder()___					builder.append(pattern.get("start").get(0).getId()).append(",")_						.append(pattern.get("middle").get(0).getId()).append(",")_						.append(pattern.get("end").get(0).getId())___					return builder.toString()__				}_			}_		)___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,6,4\n1,5,4"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,event,time,with,comparator,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,data,stream,event,input,env,from,elements,tuple2,of,new,event,1,start,1,0,5l,tuple2,of,new,event,2,middle,2,0,1l,tuple2,of,new,event,3,end,3,0,3l,tuple2,of,new,event,4,end,4,0,10l,tuple2,of,new,event,5,middle,6,0,7l,tuple2,of,new,event,6,middle,5,0,7l,tuple2,of,new,event,7,middle,5,0,100l,assign,timestamps,and,watermarks,new,assigner,with,punctuated,watermarks,tuple2,event,long,override,public,long,extract,timestamp,tuple2,event,long,element,long,previous,timestamp,return,element,f1,override,public,watermark,check,and,get,next,watermark,tuple2,event,long,last,element,long,extracted,timestamp,return,new,watermark,last,element,f1,5,map,new,map,function,tuple2,event,long,event,override,public,event,map,tuple2,event,long,value,throws,exception,return,value,f0,event,comparator,event,comparator,new,custom,event,comparator,pattern,event,extends,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,comparator,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,6,4,n1,5,4,env,execute
CEPITCase -> @Test 	public void testSimplePatternEventTimeWithComparator() throws Exception;1515481551;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternEventTimeWithComparator() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		_		DataStream<Event> input = env.fromElements(_			Tuple2.of(new Event(1, "start", 1.0), 5L),_			Tuple2.of(new Event(2, "middle", 2.0), 1L),_			Tuple2.of(new Event(3, "end", 3.0), 3L),_			Tuple2.of(new Event(4, "end", 4.0), 10L),_			Tuple2.of(new Event(5, "middle", 6.0), 7L),_			Tuple2.of(new Event(6, "middle", 5.0), 7L),_			_			Tuple2.of(new Event(7, "middle", 5.0), 100L)_		).assignTimestampsAndWatermarks(new AssignerWithPunctuatedWatermarks<Tuple2<Event, Long>>() {__			@Override_			public long extractTimestamp(Tuple2<Event, Long> element, long previousTimestamp) {_				return element.f1__			}__			@Override_			public Watermark checkAndGetNextWatermark(Tuple2<Event, Long> lastElement, long extractedTimestamp) {_				return new Watermark(lastElement.f1 - 5)__			}__		}).map(new MapFunction<Tuple2<Event, Long>, Event>() {__			@Override_			public Event map(Tuple2<Event, Long> value) throws Exception {_				return value.f0__			}_		})___		EventComparator<Event> comparator = new CustomEventComparator()___		Pattern<Event, ? extends Event> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern, comparator).select(_			new PatternSelectFunction<Event, String>() {__				@Override_				public String select(Map<String, List<Event>> pattern) {_					StringBuilder builder = new StringBuilder()___					builder.append(pattern.get("start").get(0).getId()).append(",")_						.append(pattern.get("middle").get(0).getId()).append(",")_						.append(pattern.get("end").get(0).getId())___					return builder.toString()__				}_			}_		)___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,6,4\n1,5,4"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,event,time,with,comparator,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,data,stream,event,input,env,from,elements,tuple2,of,new,event,1,start,1,0,5l,tuple2,of,new,event,2,middle,2,0,1l,tuple2,of,new,event,3,end,3,0,3l,tuple2,of,new,event,4,end,4,0,10l,tuple2,of,new,event,5,middle,6,0,7l,tuple2,of,new,event,6,middle,5,0,7l,tuple2,of,new,event,7,middle,5,0,100l,assign,timestamps,and,watermarks,new,assigner,with,punctuated,watermarks,tuple2,event,long,override,public,long,extract,timestamp,tuple2,event,long,element,long,previous,timestamp,return,element,f1,override,public,watermark,check,and,get,next,watermark,tuple2,event,long,last,element,long,extracted,timestamp,return,new,watermark,last,element,f1,5,map,new,map,function,tuple2,event,long,event,override,public,event,map,tuple2,event,long,value,throws,exception,return,value,f0,event,comparator,event,comparator,new,custom,event,comparator,pattern,event,extends,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,comparator,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,6,4,n1,5,4,env,execute
CEPITCase -> @Test 	public void testSimplePatternEventTimeWithComparator() throws Exception;1530798894;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternEventTimeWithComparator() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		_		DataStream<Event> input = env.fromElements(_			Tuple2.of(new Event(1, "start", 1.0), 5L),_			Tuple2.of(new Event(2, "middle", 2.0), 1L),_			Tuple2.of(new Event(3, "end", 3.0), 3L),_			Tuple2.of(new Event(4, "end", 4.0), 10L),_			Tuple2.of(new Event(5, "middle", 6.0), 7L),_			Tuple2.of(new Event(6, "middle", 5.0), 7L),_			_			Tuple2.of(new Event(7, "middle", 5.0), 100L)_		).assignTimestampsAndWatermarks(new AssignerWithPunctuatedWatermarks<Tuple2<Event, Long>>() {__			@Override_			public long extractTimestamp(Tuple2<Event, Long> element, long previousTimestamp) {_				return element.f1__			}__			@Override_			public Watermark checkAndGetNextWatermark(Tuple2<Event, Long> lastElement, long extractedTimestamp) {_				return new Watermark(lastElement.f1 - 5)__			}__		}).map(new MapFunction<Tuple2<Event, Long>, Event>() {__			@Override_			public Event map(Tuple2<Event, Long> value) throws Exception {_				return value.f0__			}_		})___		EventComparator<Event> comparator = new CustomEventComparator()___		Pattern<Event, ? extends Event> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern, comparator).select(_			new PatternSelectFunction<Event, String>() {__				@Override_				public String select(Map<String, List<Event>> pattern) {_					StringBuilder builder = new StringBuilder()___					builder.append(pattern.get("start").get(0).getId()).append(",")_						.append(pattern.get("middle").get(0).getId()).append(",")_						.append(pattern.get("end").get(0).getId())___					return builder.toString()__				}_			}_		)___		result.writeAsText(resultPath, FileSystem.WriteMode.OVERWRITE)___		_		expected = "1,6,4\n1,5,4"___		env.execute()__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,event,time,with,comparator,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,data,stream,event,input,env,from,elements,tuple2,of,new,event,1,start,1,0,5l,tuple2,of,new,event,2,middle,2,0,1l,tuple2,of,new,event,3,end,3,0,3l,tuple2,of,new,event,4,end,4,0,10l,tuple2,of,new,event,5,middle,6,0,7l,tuple2,of,new,event,6,middle,5,0,7l,tuple2,of,new,event,7,middle,5,0,100l,assign,timestamps,and,watermarks,new,assigner,with,punctuated,watermarks,tuple2,event,long,override,public,long,extract,timestamp,tuple2,event,long,element,long,previous,timestamp,return,element,f1,override,public,watermark,check,and,get,next,watermark,tuple2,event,long,last,element,long,extracted,timestamp,return,new,watermark,last,element,f1,5,map,new,map,function,tuple2,event,long,event,override,public,event,map,tuple2,event,long,value,throws,exception,return,value,f0,event,comparator,event,comparator,new,custom,event,comparator,pattern,event,extends,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,comparator,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,result,write,as,text,result,path,file,system,write,mode,overwrite,expected,1,6,4,n1,5,4,env,execute
CEPITCase -> @Test 	public void testSimplePatternEventTimeWithComparator() throws Exception;1531455114;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternEventTimeWithComparator() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		_		DataStream<Event> input = env.fromElements(_			Tuple2.of(new Event(1, "start", 1.0), 5L),_			Tuple2.of(new Event(2, "middle", 2.0), 1L),_			Tuple2.of(new Event(3, "end", 3.0), 3L),_			Tuple2.of(new Event(4, "end", 4.0), 10L),_			Tuple2.of(new Event(5, "middle", 6.0), 7L),_			Tuple2.of(new Event(6, "middle", 5.0), 7L),_			_			Tuple2.of(new Event(7, "middle", 5.0), 100L)_		).assignTimestampsAndWatermarks(new AssignerWithPunctuatedWatermarks<Tuple2<Event, Long>>() {__			@Override_			public long extractTimestamp(Tuple2<Event, Long> element, long previousTimestamp) {_				return element.f1__			}__			@Override_			public Watermark checkAndGetNextWatermark(Tuple2<Event, Long> lastElement, long extractedTimestamp) {_				return new Watermark(lastElement.f1 - 5)__			}__		}).map(new MapFunction<Tuple2<Event, Long>, Event>() {__			@Override_			public Event map(Tuple2<Event, Long> value) throws Exception {_				return value.f0__			}_		})___		EventComparator<Event> comparator = new CustomEventComparator()___		Pattern<Event, ? extends Event> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern, comparator).select(_			new PatternSelectFunction<Event, String>() {__				@Override_				public String select(Map<String, List<Event>> pattern) {_					StringBuilder builder = new StringBuilder()___					builder.append(pattern.get("start").get(0).getId()).append(",")_						.append(pattern.get("middle").get(0).getId()).append(",")_						.append(pattern.get("end").get(0).getId())___					return builder.toString()__				}_			}_		)___		List<String> resultList = new ArrayList<>()___		DataStreamUtils.collect(result).forEachRemaining(resultList::add)___		List<String> expected = Arrays.asList(_			"1,6,4",_			"1,5,4"_		)___		expected.sort(String::compareTo)___		resultList.sort(String::compareTo)___		assertEquals(expected, resultList)__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,event,time,with,comparator,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,data,stream,event,input,env,from,elements,tuple2,of,new,event,1,start,1,0,5l,tuple2,of,new,event,2,middle,2,0,1l,tuple2,of,new,event,3,end,3,0,3l,tuple2,of,new,event,4,end,4,0,10l,tuple2,of,new,event,5,middle,6,0,7l,tuple2,of,new,event,6,middle,5,0,7l,tuple2,of,new,event,7,middle,5,0,100l,assign,timestamps,and,watermarks,new,assigner,with,punctuated,watermarks,tuple2,event,long,override,public,long,extract,timestamp,tuple2,event,long,element,long,previous,timestamp,return,element,f1,override,public,watermark,check,and,get,next,watermark,tuple2,event,long,last,element,long,extracted,timestamp,return,new,watermark,last,element,f1,5,map,new,map,function,tuple2,event,long,event,override,public,event,map,tuple2,event,long,value,throws,exception,return,value,f0,event,comparator,event,comparator,new,custom,event,comparator,pattern,event,extends,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,comparator,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,list,string,result,list,new,array,list,data,stream,utils,collect,result,for,each,remaining,result,list,add,list,string,expected,arrays,as,list,1,6,4,1,5,4,expected,sort,string,compare,to,result,list,sort,string,compare,to,assert,equals,expected,result,list
CEPITCase -> @Test 	public void testSimplePatternEventTimeWithComparator() throws Exception;1532066767;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternEventTimeWithComparator() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		_		DataStream<Event> input = env.fromElements(_			Tuple2.of(new Event(1, "start", 1.0), 5L),_			Tuple2.of(new Event(2, "middle", 2.0), 1L),_			Tuple2.of(new Event(3, "end", 3.0), 3L),_			Tuple2.of(new Event(4, "end", 4.0), 10L),_			Tuple2.of(new Event(5, "middle", 6.0), 7L),_			Tuple2.of(new Event(6, "middle", 5.0), 7L),_			_			Tuple2.of(new Event(7, "middle", 5.0), 100L)_		).assignTimestampsAndWatermarks(new AssignerWithPunctuatedWatermarks<Tuple2<Event, Long>>() {__			@Override_			public long extractTimestamp(Tuple2<Event, Long> element, long previousTimestamp) {_				return element.f1__			}__			@Override_			public Watermark checkAndGetNextWatermark(Tuple2<Event, Long> lastElement, long extractedTimestamp) {_				return new Watermark(lastElement.f1 - 5)__			}__		}).map(new MapFunction<Tuple2<Event, Long>, Event>() {__			@Override_			public Event map(Tuple2<Event, Long> value) throws Exception {_				return value.f0__			}_		})___		EventComparator<Event> comparator = new CustomEventComparator()___		Pattern<Event, ? extends Event> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern, comparator).select(_			new PatternSelectFunction<Event, String>() {__				@Override_				public String select(Map<String, List<Event>> pattern) {_					StringBuilder builder = new StringBuilder()___					builder.append(pattern.get("start").get(0).getId()).append(",")_						.append(pattern.get("middle").get(0).getId()).append(",")_						.append(pattern.get("end").get(0).getId())___					return builder.toString()__				}_			}_		)___		List<String> resultList = new ArrayList<>()___		DataStreamUtils.collect(result).forEachRemaining(resultList::add)___		List<String> expected = Arrays.asList(_			"1,6,4",_			"1,5,4"_		)___		expected.sort(String::compareTo)___		resultList.sort(String::compareTo)___		assertEquals(expected, resultList)__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,event,time,with,comparator,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,data,stream,event,input,env,from,elements,tuple2,of,new,event,1,start,1,0,5l,tuple2,of,new,event,2,middle,2,0,1l,tuple2,of,new,event,3,end,3,0,3l,tuple2,of,new,event,4,end,4,0,10l,tuple2,of,new,event,5,middle,6,0,7l,tuple2,of,new,event,6,middle,5,0,7l,tuple2,of,new,event,7,middle,5,0,100l,assign,timestamps,and,watermarks,new,assigner,with,punctuated,watermarks,tuple2,event,long,override,public,long,extract,timestamp,tuple2,event,long,element,long,previous,timestamp,return,element,f1,override,public,watermark,check,and,get,next,watermark,tuple2,event,long,last,element,long,extracted,timestamp,return,new,watermark,last,element,f1,5,map,new,map,function,tuple2,event,long,event,override,public,event,map,tuple2,event,long,value,throws,exception,return,value,f0,event,comparator,event,comparator,new,custom,event,comparator,pattern,event,extends,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,comparator,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,list,string,result,list,new,array,list,data,stream,utils,collect,result,for,each,remaining,result,list,add,list,string,expected,arrays,as,list,1,6,4,1,5,4,expected,sort,string,compare,to,result,list,sort,string,compare,to,assert,equals,expected,result,list
CEPITCase -> @Test 	public void testSimplePatternEventTimeWithComparator() throws Exception;1543413704;Checks that a certain event sequence is recognized.__@throws Exception;@Test_	public void testSimplePatternEventTimeWithComparator() throws Exception {_		StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment()__		env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)___		_		DataStream<Event> input = env.fromElements(_			Tuple2.of(new Event(1, "start", 1.0), 5L),_			Tuple2.of(new Event(2, "middle", 2.0), 1L),_			Tuple2.of(new Event(3, "end", 3.0), 3L),_			Tuple2.of(new Event(4, "end", 4.0), 10L),_			Tuple2.of(new Event(5, "middle", 6.0), 7L),_			Tuple2.of(new Event(6, "middle", 5.0), 7L),_			_			Tuple2.of(new Event(7, "middle", 5.0), 100L)_		).assignTimestampsAndWatermarks(new AssignerWithPunctuatedWatermarks<Tuple2<Event, Long>>() {__			@Override_			public long extractTimestamp(Tuple2<Event, Long> element, long previousTimestamp) {_				return element.f1__			}__			@Override_			public Watermark checkAndGetNextWatermark(Tuple2<Event, Long> lastElement, long extractedTimestamp) {_				return new Watermark(lastElement.f1 - 5)__			}__		}).map(new MapFunction<Tuple2<Event, Long>, Event>() {__			@Override_			public Event map(Tuple2<Event, Long> value) throws Exception {_				return value.f0__			}_		})___		EventComparator<Event> comparator = new CustomEventComparator()___		Pattern<Event, ? extends Event> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {__			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		})___		DataStream<String> result = CEP.pattern(input, pattern, comparator).select(_			new PatternSelectFunction<Event, String>() {__				@Override_				public String select(Map<String, List<Event>> pattern) {_					StringBuilder builder = new StringBuilder()___					builder.append(pattern.get("start").get(0).getId()).append(",")_						.append(pattern.get("middle").get(0).getId()).append(",")_						.append(pattern.get("end").get(0).getId())___					return builder.toString()__				}_			}_		)___		List<String> resultList = new ArrayList<>()___		DataStreamUtils.collect(result).forEachRemaining(resultList::add)___		List<String> expected = Arrays.asList(_			"1,6,4",_			"1,5,4"_		)___		expected.sort(String::compareTo)___		resultList.sort(String::compareTo)___		assertEquals(expected, resultList)__	};checks,that,a,certain,event,sequence,is,recognized,throws,exception;test,public,void,test,simple,pattern,event,time,with,comparator,throws,exception,stream,execution,environment,env,stream,execution,environment,get,execution,environment,env,set,stream,time,characteristic,time,characteristic,event,time,data,stream,event,input,env,from,elements,tuple2,of,new,event,1,start,1,0,5l,tuple2,of,new,event,2,middle,2,0,1l,tuple2,of,new,event,3,end,3,0,3l,tuple2,of,new,event,4,end,4,0,10l,tuple2,of,new,event,5,middle,6,0,7l,tuple2,of,new,event,6,middle,5,0,7l,tuple2,of,new,event,7,middle,5,0,100l,assign,timestamps,and,watermarks,new,assigner,with,punctuated,watermarks,tuple2,event,long,override,public,long,extract,timestamp,tuple2,event,long,element,long,previous,timestamp,return,element,f1,override,public,watermark,check,and,get,next,watermark,tuple2,event,long,last,element,long,extracted,timestamp,return,new,watermark,last,element,f1,5,map,new,map,function,tuple2,event,long,event,override,public,event,map,tuple2,event,long,value,throws,exception,return,value,f0,event,comparator,event,comparator,new,custom,event,comparator,pattern,event,extends,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,data,stream,string,result,cep,pattern,input,pattern,comparator,select,new,pattern,select,function,event,string,override,public,string,select,map,string,list,event,pattern,string,builder,builder,new,string,builder,builder,append,pattern,get,start,get,0,get,id,append,append,pattern,get,middle,get,0,get,id,append,append,pattern,get,end,get,0,get,id,return,builder,to,string,list,string,result,list,new,array,list,data,stream,utils,collect,result,for,each,remaining,result,list,add,list,string,expected,arrays,as,list,1,6,4,1,5,4,expected,sort,string,compare,to,result,list,sort,string,compare,to,assert,equals,expected,result,list
