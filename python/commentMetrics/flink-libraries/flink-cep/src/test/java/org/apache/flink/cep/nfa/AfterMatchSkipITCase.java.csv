# id;timestamp;commentText;codeText;commentWords;codeWords
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception;1528989005;Example from docs.;@Test_	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToFirst("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,first,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,first,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception;1538379997;Example from docs.;@Test_	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToFirst("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,first,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,first,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception;1538386824;Example from docs.;@Test_	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToFirst("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,first,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,first,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception;1539074832;Example from docs.;@Test_	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToFirst("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,first,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,first,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception;1540386566;Example from docs.;@Test_	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToFirst("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,first,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,first,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception;1544602567;Example from docs.;@Test_	public void testSkipToFirstWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToFirst("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFATestHarness nfaTestHarness = NFATestHarness.forPattern(pattern).build()___		List<List<Event>> resultingPatterns = nfaTestHarness.feedRecords(streamEvents)___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,first,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,first,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfatest,harness,nfa,test,harness,nfatest,harness,for,pattern,pattern,build,list,list,event,resulting,patterns,nfa,test,harness,feed,records,stream,events,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstDiscarding() throws Exception;1528989005;Example from docs.;@Test_	public void testSkipToFirstDiscarding() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a = new Event(1, "a", 0.0)__		Event b = new Event(2, "b", 0.0)__		Event c1 = new Event(3, "c1", 0.0)__		Event c2 = new Event(4, "c2", 0.0)__		Event c3 = new Event(5, "c3", 0.0)__		Event d = new Event(6, "d", 0.0)___		streamEvents.add(new StreamRecord<>(a))__		streamEvents.add(new StreamRecord<>(b))__		streamEvents.add(new StreamRecord<>(c1))__		streamEvents.add(new StreamRecord<>(c2))__		streamEvents.add(new StreamRecord<>(c3))__		streamEvents.add(new StreamRecord<>(d))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a or c", AfterMatchSkipStrategy.skipToFirst("c*")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a") || value.getName().contains("c")__				}_			}_		).followedBy("b or c").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b") || value.getName().contains("c")__				}_			}_		).followedBy("c*").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("c")__				}_			}_		).oneOrMore().greedy()_			.followedBy("d").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("d")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a, b, c1, c2, c3, d),_			Lists.newArrayList(c1, c2, c3, d)_		))__	};example,from,docs;test,public,void,test,skip,to,first,discarding,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a,new,event,1,a,0,0,event,b,new,event,2,b,0,0,event,c1,new,event,3,c1,0,0,event,c2,new,event,4,c2,0,0,event,c3,new,event,5,c3,0,0,event,d,new,event,6,d,0,0,stream,events,add,new,stream,record,a,stream,events,add,new,stream,record,b,stream,events,add,new,stream,record,c1,stream,events,add,new,stream,record,c2,stream,events,add,new,stream,record,c3,stream,events,add,new,stream,record,d,pattern,event,pattern,pattern,event,begin,a,or,c,after,match,skip,strategy,skip,to,first,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,value,get,name,contains,c,followed,by,b,or,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,value,get,name,contains,c,followed,by,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,c,one,or,more,greedy,followed,by,d,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,d,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a,b,c1,c2,c3,d,lists,new,array,list,c1,c2,c3,d
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstDiscarding() throws Exception;1538379997;Example from docs.;@Test_	public void testSkipToFirstDiscarding() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a = new Event(1, "a", 0.0)__		Event b = new Event(2, "b", 0.0)__		Event c1 = new Event(3, "c1", 0.0)__		Event c2 = new Event(4, "c2", 0.0)__		Event c3 = new Event(5, "c3", 0.0)__		Event d = new Event(6, "d", 0.0)___		streamEvents.add(new StreamRecord<>(a))__		streamEvents.add(new StreamRecord<>(b))__		streamEvents.add(new StreamRecord<>(c1))__		streamEvents.add(new StreamRecord<>(c2))__		streamEvents.add(new StreamRecord<>(c3))__		streamEvents.add(new StreamRecord<>(d))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a or c", AfterMatchSkipStrategy.skipToFirst("c*")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a") || value.getName().contains("c")__				}_			}_		).followedBy("b or c").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b") || value.getName().contains("c")__				}_			}_		).followedBy("c*").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("c")__				}_			}_		).oneOrMore().greedy()_			.followedBy("d").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("d")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a, b, c1, c2, c3, d),_			Lists.newArrayList(c1, c2, c3, d)_		))__	};example,from,docs;test,public,void,test,skip,to,first,discarding,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a,new,event,1,a,0,0,event,b,new,event,2,b,0,0,event,c1,new,event,3,c1,0,0,event,c2,new,event,4,c2,0,0,event,c3,new,event,5,c3,0,0,event,d,new,event,6,d,0,0,stream,events,add,new,stream,record,a,stream,events,add,new,stream,record,b,stream,events,add,new,stream,record,c1,stream,events,add,new,stream,record,c2,stream,events,add,new,stream,record,c3,stream,events,add,new,stream,record,d,pattern,event,pattern,pattern,event,begin,a,or,c,after,match,skip,strategy,skip,to,first,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,value,get,name,contains,c,followed,by,b,or,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,value,get,name,contains,c,followed,by,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,c,one,or,more,greedy,followed,by,d,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,d,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a,b,c1,c2,c3,d,lists,new,array,list,c1,c2,c3,d
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstDiscarding() throws Exception;1538386824;Example from docs.;@Test_	public void testSkipToFirstDiscarding() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a = new Event(1, "a", 0.0)__		Event b = new Event(2, "b", 0.0)__		Event c1 = new Event(3, "c1", 0.0)__		Event c2 = new Event(4, "c2", 0.0)__		Event c3 = new Event(5, "c3", 0.0)__		Event d = new Event(6, "d", 0.0)___		streamEvents.add(new StreamRecord<>(a))__		streamEvents.add(new StreamRecord<>(b))__		streamEvents.add(new StreamRecord<>(c1))__		streamEvents.add(new StreamRecord<>(c2))__		streamEvents.add(new StreamRecord<>(c3))__		streamEvents.add(new StreamRecord<>(d))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a or c", AfterMatchSkipStrategy.skipToFirst("c*")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a") || value.getName().contains("c")__				}_			}_		).followedBy("b or c").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b") || value.getName().contains("c")__				}_			}_		).followedBy("c*").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("c")__				}_			}_		).oneOrMore().greedy()_			.followedBy("d").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("d")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a, b, c1, c2, c3, d),_			Lists.newArrayList(c1, c2, c3, d)_		))__	};example,from,docs;test,public,void,test,skip,to,first,discarding,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a,new,event,1,a,0,0,event,b,new,event,2,b,0,0,event,c1,new,event,3,c1,0,0,event,c2,new,event,4,c2,0,0,event,c3,new,event,5,c3,0,0,event,d,new,event,6,d,0,0,stream,events,add,new,stream,record,a,stream,events,add,new,stream,record,b,stream,events,add,new,stream,record,c1,stream,events,add,new,stream,record,c2,stream,events,add,new,stream,record,c3,stream,events,add,new,stream,record,d,pattern,event,pattern,pattern,event,begin,a,or,c,after,match,skip,strategy,skip,to,first,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,value,get,name,contains,c,followed,by,b,or,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,value,get,name,contains,c,followed,by,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,c,one,or,more,greedy,followed,by,d,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,d,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a,b,c1,c2,c3,d,lists,new,array,list,c1,c2,c3,d
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstDiscarding() throws Exception;1539074832;Example from docs.;@Test_	public void testSkipToFirstDiscarding() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a = new Event(1, "a", 0.0)__		Event b = new Event(2, "b", 0.0)__		Event c1 = new Event(3, "c1", 0.0)__		Event c2 = new Event(4, "c2", 0.0)__		Event c3 = new Event(5, "c3", 0.0)__		Event d = new Event(6, "d", 0.0)___		streamEvents.add(new StreamRecord<>(a))__		streamEvents.add(new StreamRecord<>(b))__		streamEvents.add(new StreamRecord<>(c1))__		streamEvents.add(new StreamRecord<>(c2))__		streamEvents.add(new StreamRecord<>(c3))__		streamEvents.add(new StreamRecord<>(d))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a or c", AfterMatchSkipStrategy.skipToFirst("c*")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a") || value.getName().contains("c")__				}_			}_		).followedBy("b or c").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b") || value.getName().contains("c")__				}_			}_		).followedBy("c*").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("c")__				}_			}_		).oneOrMore().greedy()_			.followedBy("d").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("d")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a, b, c1, c2, c3, d),_			Lists.newArrayList(c1, c2, c3, d)_		))__	};example,from,docs;test,public,void,test,skip,to,first,discarding,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a,new,event,1,a,0,0,event,b,new,event,2,b,0,0,event,c1,new,event,3,c1,0,0,event,c2,new,event,4,c2,0,0,event,c3,new,event,5,c3,0,0,event,d,new,event,6,d,0,0,stream,events,add,new,stream,record,a,stream,events,add,new,stream,record,b,stream,events,add,new,stream,record,c1,stream,events,add,new,stream,record,c2,stream,events,add,new,stream,record,c3,stream,events,add,new,stream,record,d,pattern,event,pattern,pattern,event,begin,a,or,c,after,match,skip,strategy,skip,to,first,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,value,get,name,contains,c,followed,by,b,or,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,value,get,name,contains,c,followed,by,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,c,one,or,more,greedy,followed,by,d,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,d,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a,b,c1,c2,c3,d,lists,new,array,list,c1,c2,c3,d
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstDiscarding() throws Exception;1540386566;Example from docs.;@Test_	public void testSkipToFirstDiscarding() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a = new Event(1, "a", 0.0)__		Event b = new Event(2, "b", 0.0)__		Event c1 = new Event(3, "c1", 0.0)__		Event c2 = new Event(4, "c2", 0.0)__		Event c3 = new Event(5, "c3", 0.0)__		Event d = new Event(6, "d", 0.0)___		streamEvents.add(new StreamRecord<>(a))__		streamEvents.add(new StreamRecord<>(b))__		streamEvents.add(new StreamRecord<>(c1))__		streamEvents.add(new StreamRecord<>(c2))__		streamEvents.add(new StreamRecord<>(c3))__		streamEvents.add(new StreamRecord<>(d))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a or c", AfterMatchSkipStrategy.skipToFirst("c*")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a") || value.getName().contains("c")__				}_			}_		).followedBy("b or c").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b") || value.getName().contains("c")__				}_			}_		).followedBy("c*").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("c")__				}_			}_		).oneOrMore().greedy()_			.followedBy("d").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("d")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a, b, c1, c2, c3, d),_			Lists.newArrayList(c1, c2, c3, d)_		))__	};example,from,docs;test,public,void,test,skip,to,first,discarding,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a,new,event,1,a,0,0,event,b,new,event,2,b,0,0,event,c1,new,event,3,c1,0,0,event,c2,new,event,4,c2,0,0,event,c3,new,event,5,c3,0,0,event,d,new,event,6,d,0,0,stream,events,add,new,stream,record,a,stream,events,add,new,stream,record,b,stream,events,add,new,stream,record,c1,stream,events,add,new,stream,record,c2,stream,events,add,new,stream,record,c3,stream,events,add,new,stream,record,d,pattern,event,pattern,pattern,event,begin,a,or,c,after,match,skip,strategy,skip,to,first,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,value,get,name,contains,c,followed,by,b,or,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,value,get,name,contains,c,followed,by,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,c,one,or,more,greedy,followed,by,d,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,d,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a,b,c1,c2,c3,d,lists,new,array,list,c1,c2,c3,d
AfterMatchSkipITCase -> @Test 	public void testSkipToFirstDiscarding() throws Exception;1544602567;Example from docs.;@Test_	public void testSkipToFirstDiscarding() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a = new Event(1, "a", 0.0)__		Event b = new Event(2, "b", 0.0)__		Event c1 = new Event(3, "c1", 0.0)__		Event c2 = new Event(4, "c2", 0.0)__		Event c3 = new Event(5, "c3", 0.0)__		Event d = new Event(6, "d", 0.0)___		streamEvents.add(new StreamRecord<>(a))__		streamEvents.add(new StreamRecord<>(b))__		streamEvents.add(new StreamRecord<>(c1))__		streamEvents.add(new StreamRecord<>(c2))__		streamEvents.add(new StreamRecord<>(c3))__		streamEvents.add(new StreamRecord<>(d))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a or c", AfterMatchSkipStrategy.skipToFirst("c*")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a") || value.getName().contains("c")__				}_			}_		).followedBy("b or c").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b") || value.getName().contains("c")__				}_			}_		).followedBy("c*").where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("c")__				}_			}_		).oneOrMore().greedy()_			.followedBy("d").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("d")__				}_			})__		NFATestHarness nfaTestHarness = NFATestHarness.forPattern(pattern).build()___		List<List<Event>> resultingPatterns = nfaTestHarness.feedRecords(streamEvents)___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a, b, c1, c2, c3, d),_			Lists.newArrayList(c1, c2, c3, d)_		))__	};example,from,docs;test,public,void,test,skip,to,first,discarding,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a,new,event,1,a,0,0,event,b,new,event,2,b,0,0,event,c1,new,event,3,c1,0,0,event,c2,new,event,4,c2,0,0,event,c3,new,event,5,c3,0,0,event,d,new,event,6,d,0,0,stream,events,add,new,stream,record,a,stream,events,add,new,stream,record,b,stream,events,add,new,stream,record,c1,stream,events,add,new,stream,record,c2,stream,events,add,new,stream,record,c3,stream,events,add,new,stream,record,d,pattern,event,pattern,pattern,event,begin,a,or,c,after,match,skip,strategy,skip,to,first,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,value,get,name,contains,c,followed,by,b,or,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,value,get,name,contains,c,followed,by,c,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,c,one,or,more,greedy,followed,by,d,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,d,nfatest,harness,nfa,test,harness,nfatest,harness,for,pattern,pattern,build,list,list,event,resulting,patterns,nfa,test,harness,feed,records,stream,events,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a,b,c1,c2,c3,d,lists,new,array,list,c1,c2,c3,d
AfterMatchSkipITCase -> @Test 	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception;1528989005;Example from docs.;@Test_	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.noSkip()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,no,skip,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,no,skip,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception;1538379997;Example from docs.;@Test_	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.noSkip()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,no,skip,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,no,skip,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception;1538386824;Example from docs.;@Test_	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.noSkip()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,no,skip,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,no,skip,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception;1539074832;Example from docs.;@Test_	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.noSkip()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,no,skip,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,no,skip,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception;1540386566;Example from docs.;@Test_	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.noSkip()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,no,skip,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,no,skip,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception;1544602567;Example from docs.;@Test_	public void testNoSkipWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.noSkip()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFATestHarness nfaTestHarness = NFATestHarness.forPattern(pattern).build()___		List<List<Event>> resultingPatterns = nfaTestHarness.feedRecords(streamEvents)___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,no,skip,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,no,skip,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfatest,harness,nfa,test,harness,nfatest,harness,for,pattern,pattern,build,list,list,event,resulting,patterns,nfa,test,harness,feed,records,stream,events,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception;1528989005;Example from docs.;@Test_	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipPastLastEvent()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Collections.singletonList(_			Lists.newArrayList(a1, a2, a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,past,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,past,last,event,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,collections,singleton,list,lists,new,array,list,a1,a2,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception;1538379997;Example from docs.;@Test_	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipPastLastEvent()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Collections.singletonList(_			Lists.newArrayList(a1, a2, a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,past,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,past,last,event,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,collections,singleton,list,lists,new,array,list,a1,a2,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception;1538386824;Example from docs.;@Test_	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipPastLastEvent()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Collections.singletonList(_			Lists.newArrayList(a1, a2, a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,past,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,past,last,event,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,collections,singleton,list,lists,new,array,list,a1,a2,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception;1539074832;Example from docs.;@Test_	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipPastLastEvent()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Collections.singletonList(_			Lists.newArrayList(a1, a2, a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,past,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,past,last,event,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,collections,singleton,list,lists,new,array,list,a1,a2,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception;1540386566;Example from docs.;@Test_	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipPastLastEvent()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Collections.singletonList(_			Lists.newArrayList(a1, a2, a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,past,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,past,last,event,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,collections,singleton,list,lists,new,array,list,a1,a2,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception;1544602567;Example from docs.;@Test_	public void testSkipPastLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipPastLastEvent()_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFATestHarness nfaTestHarness = NFATestHarness.forPattern(pattern).build()___		List<List<Event>> resultingPatterns = nfaTestHarness.feedRecords(streamEvents)___		compareMaps(resultingPatterns, Collections.singletonList(_			Lists.newArrayList(a1, a2, a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,past,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,past,last,event,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfatest,harness,nfa,test,harness,nfatest,harness,for,pattern,pattern,build,list,list,event,resulting,patterns,nfa,test,harness,feed,records,stream,events,compare,maps,resulting,patterns,collections,singleton,list,lists,new,array,list,a1,a2,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception;1528989005;Example from docs.;@Test_	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToLast("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,last,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception;1538379997;Example from docs.;@Test_	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToLast("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,last,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception;1538386824;Example from docs.;@Test_	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToLast("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,last,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception;1539074832;Example from docs.;@Test_	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToLast("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,last,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception;1540386566;Example from docs.;@Test_	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToLast("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(streamEvents, nfa, pattern.getAfterMatchSkipStrategy())___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,last,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,stream,events,nfa,pattern,get,after,match,skip,strategy,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a3,b1
AfterMatchSkipITCase -> @Test 	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception;1544602567;Example from docs.;@Test_	public void testSkipToLastWithOneOrMoreAtBeginning() throws Exception {_		List<StreamRecord<Event>> streamEvents = new ArrayList<>()___		Event a1 = new Event(1, "a1", 0.0)__		Event a2 = new Event(2, "a2", 0.0)__		Event a3 = new Event(3, "a3", 0.0)__		Event b1 = new Event(4, "b1", 0.0)___		streamEvents.add(new StreamRecord<>(a1))__		streamEvents.add(new StreamRecord<>(a2))__		streamEvents.add(new StreamRecord<>(a3))__		streamEvents.add(new StreamRecord<>(b1))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("a", AfterMatchSkipStrategy.skipToLast("a")_		).where(_			new SimpleCondition<Event>() {__				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("a")__				}_			}_		).oneOrMore().consecutive().greedy()_			.next("b").where(new SimpleCondition<Event>() {_				@Override_				public boolean filter(Event value) throws Exception {_					return value.getName().contains("b")__				}_			})__		NFATestHarness nfaTestHarness = NFATestHarness.forPattern(pattern).build()___		List<List<Event>> resultingPatterns = nfaTestHarness.feedRecords(streamEvents)___		compareMaps(resultingPatterns, Lists.newArrayList(_			Lists.newArrayList(a1, a2, a3, b1),_			Lists.newArrayList(a3, b1)_		))__	};example,from,docs;test,public,void,test,skip,to,last,with,one,or,more,at,beginning,throws,exception,list,stream,record,event,stream,events,new,array,list,event,a1,new,event,1,a1,0,0,event,a2,new,event,2,a2,0,0,event,a3,new,event,3,a3,0,0,event,b1,new,event,4,b1,0,0,stream,events,add,new,stream,record,a1,stream,events,add,new,stream,record,a2,stream,events,add,new,stream,record,a3,stream,events,add,new,stream,record,b1,pattern,event,pattern,pattern,event,begin,a,after,match,skip,strategy,skip,to,last,a,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,a,one,or,more,consecutive,greedy,next,b,where,new,simple,condition,event,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,contains,b,nfatest,harness,nfa,test,harness,nfatest,harness,for,pattern,pattern,build,list,list,event,resulting,patterns,nfa,test,harness,feed,records,stream,events,compare,maps,resulting,patterns,lists,new,array,list,lists,new,array,list,a1,a2,a3,b1,lists,new,array,list,a3,b1
