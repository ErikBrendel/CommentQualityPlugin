# id;timestamp;commentText;codeText;commentWords;codeWords
NFAITCase -> @Test 	public void testTimesClearingBuffer();1490089987;Clearing SharedBuffer;@Test_	public void testTimesClearingBuffer() {_		Event startEvent = new Event(40, "c", 1.0)__		Event middleEvent1 = new Event(41, "a", 2.0)__		Event middleEvent2 = new Event(42, "a", 3.0)__		Event middleEvent3 = new Event(43, "a", 4.0)__		Event end1 = new Event(44, "b", 5.0)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 5726188262756267490L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("c")__			}_		}).next("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 5726188262756267490L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("a")__			}_		}).times(2).followedBy("end1").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 5726188262756267490L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("b")__			}_		}).within(Time.milliseconds(8))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		nfa.process(startEvent, 1)__		nfa.process(middleEvent1, 2)__		nfa.process(middleEvent2, 3)__		nfa.process(middleEvent3, 4)__		nfa.process(end1, 6)___		_		nfa.process(null, 10)___		assertEquals(true, nfa.isEmpty())__	};clearing,shared,buffer;test,public,void,test,times,clearing,buffer,event,start,event,new,event,40,c,1,0,event,middle,event1,new,event,41,a,2,0,event,middle,event2,new,event,42,a,3,0,event,middle,event3,new,event,43,a,4,0,event,end1,new,event,44,b,5,0,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,5726188262756267490l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,c,next,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,5726188262756267490l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,a,times,2,followed,by,end1,where,new,filter,function,event,private,static,final,long,serial,version,uid,5726188262756267490l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,b,within,time,milliseconds,8,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,nfa,process,start,event,1,nfa,process,middle,event1,2,nfa,process,middle,event2,3,nfa,process,middle,event3,4,nfa,process,end1,6,nfa,process,null,10,assert,equals,true,nfa,is,empty
NFAITCase -> @Test 	public void testTimesClearingBuffer();1490194327;Clearing SharedBuffer;@Test_	public void testTimesClearingBuffer() {_		Event startEvent = new Event(40, "c", 1.0)__		Event middleEvent1 = new Event(41, "a", 2.0)__		Event middleEvent2 = new Event(42, "a", 3.0)__		Event middleEvent3 = new Event(43, "a", 4.0)__		Event end1 = new Event(44, "b", 5.0)___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 5726188262756267490L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("c")__			}_		}).next("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 5726188262756267490L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("a")__			}_		}).times(2).followedBy("end1").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 5726188262756267490L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("b")__			}_		}).within(Time.milliseconds(8))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		nfa.process(startEvent, 1)__		nfa.process(middleEvent1, 2)__		nfa.process(middleEvent2, 3)__		nfa.process(middleEvent3, 4)__		nfa.process(end1, 6)___		_		nfa.process(null, 10)___		assertEquals(true, nfa.isEmpty())__	};clearing,shared,buffer;test,public,void,test,times,clearing,buffer,event,start,event,new,event,40,c,1,0,event,middle,event1,new,event,41,a,2,0,event,middle,event2,new,event,42,a,3,0,event,middle,event3,new,event,43,a,4,0,event,end1,new,event,44,b,5,0,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,5726188262756267490l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,c,next,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,5726188262756267490l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,a,times,2,followed,by,end1,where,new,simple,condition,event,private,static,final,long,serial,version,uid,5726188262756267490l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,b,within,time,milliseconds,8,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,nfa,process,start,event,1,nfa,process,middle,event1,2,nfa,process,middle,event2,3,nfa,process,middle,event3,4,nfa,process,end1,6,nfa,process,null,10,assert,equals,true,nfa,is,empty
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA() throws Exception;1527863170;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,throws,exception,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA() throws Exception;1528217861;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,throws,exception,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA() throws Exception;1528989005;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,throws,exception,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA() throws Exception;1535555335;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,throws,exception,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA() throws Exception;1544602567;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,throws,exception,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA() throws Exception;1544602660;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,throws,exception,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA() throws Exception;1545121891;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,throws,exception,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling() throws Exception;1527863170;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, true)___		NFAState nfaState = nfa.createInitialNFAState()___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, List<Event>>>, Collection<Tuple2<Map<String, List<Event>>, Long>>> patterns =_					nfa.process(sharedBuffer, nfaState, event.getValue(), event.getTimestamp())___			Collection<Map<String, List<Event>>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,throws,exception,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,true,nfastate,nfa,state,nfa,create,initial,nfastate,for,stream,record,event,event,events,tuple2,collection,map,string,list,event,collection,tuple2,map,string,list,event,long,patterns,nfa,process,shared,buffer,nfa,state,event,get,value,event,get,timestamp,collection,map,string,list,event,matched,patterns,patterns,f0,collection,tuple2,map,string,list,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling() throws Exception;1528217861;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, true)___		NFAState nfaState = nfa.createInitialNFAState()___		for (StreamRecord<Event> event: events) {__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns =_				nfa.advanceTime(sharedBuffer, nfaState, event.getTimestamp())__			Collection<Map<String, List<Event>>> matchedPatterns =_				nfa.process(sharedBuffer, nfaState, event.getValue(), event.getTimestamp())___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,throws,exception,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,true,nfastate,nfa,state,nfa,create,initial,nfastate,for,stream,record,event,event,events,collection,tuple2,map,string,list,event,long,timeout,patterns,nfa,advance,time,shared,buffer,nfa,state,event,get,timestamp,collection,map,string,list,event,matched,patterns,nfa,process,shared,buffer,nfa,state,event,get,value,event,get,timestamp,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling() throws Exception;1528989005;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, true)___		NFAState nfaState = nfa.createInitialNFAState()___		for (StreamRecord<Event> event: events) {__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns =_				nfa.advanceTime(sharedBuffer, nfaState, event.getTimestamp())__			Collection<Map<String, List<Event>>> matchedPatterns =_				nfa.process(sharedBuffer, nfaState, event.getValue(), event.getTimestamp())___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,throws,exception,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,true,nfastate,nfa,state,nfa,create,initial,nfastate,for,stream,record,event,event,events,collection,tuple2,map,string,list,event,long,timeout,patterns,nfa,advance,time,shared,buffer,nfa,state,event,get,timestamp,collection,map,string,list,event,matched,patterns,nfa,process,shared,buffer,nfa,state,event,get,value,event,get,timestamp,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling() throws Exception;1535555335;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, true)___		NFAState nfaState = nfa.createInitialNFAState()___		for (StreamRecord<Event> event: events) {__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns =_				nfa.advanceTime(sharedBufferAccessor, nfaState, event.getTimestamp())__			Collection<Map<String, List<Event>>> matchedPatterns =_				nfa.process(sharedBufferAccessor, nfaState, event.getValue(), event.getTimestamp())___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,throws,exception,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,true,nfastate,nfa,state,nfa,create,initial,nfastate,for,stream,record,event,event,events,collection,tuple2,map,string,list,event,long,timeout,patterns,nfa,advance,time,shared,buffer,accessor,nfa,state,event,get,timestamp,collection,map,string,list,event,matched,patterns,nfa,process,shared,buffer,accessor,nfa,state,event,get,value,event,get,timestamp,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling() throws Exception;1544602567;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 12L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 12L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, true)___		NFAState nfaState = nfa.createInitialNFAState()___		for (StreamRecord<Event> event: events) {__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns =_				nfa.advanceTime(sharedBufferAccessor, nfaState, event.getTimestamp())__			Collection<Map<String, List<Event>>> matchedPatterns =_				nfa.process(sharedBufferAccessor,_					nfaState,_					event.getValue(),_					event.getTimestamp(),_					AfterMatchSkipStrategy.noSkip())___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,throws,exception,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,12l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,12l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,true,nfastate,nfa,state,nfa,create,initial,nfastate,for,stream,record,event,event,events,collection,tuple2,map,string,list,event,long,timeout,patterns,nfa,advance,time,shared,buffer,accessor,nfa,state,event,get,timestamp,collection,map,string,list,event,matched,patterns,nfa,process,shared,buffer,accessor,nfa,state,event,get,value,event,get,timestamp,after,match,skip,strategy,no,skip,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling() throws Exception;1544602660;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 12L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 12L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, true)___		NFAState nfaState = nfa.createInitialNFAState()___		for (StreamRecord<Event> event: events) {__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns =_				nfa.advanceTime(sharedBufferAccessor, nfaState, event.getTimestamp())__			Collection<Map<String, List<Event>>> matchedPatterns =_				nfa.process(sharedBufferAccessor,_					nfaState,_					event.getValue(),_					event.getTimestamp(),_					AfterMatchSkipStrategy.noSkip(),_					new TestTimerService())___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,throws,exception,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,12l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,12l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,true,nfastate,nfa,state,nfa,create,initial,nfastate,for,stream,record,event,event,events,collection,tuple2,map,string,list,event,long,timeout,patterns,nfa,advance,time,shared,buffer,accessor,nfa,state,event,get,timestamp,collection,map,string,list,event,matched,patterns,nfa,process,shared,buffer,accessor,nfa,state,event,get,value,event,get,timestamp,after,match,skip,strategy,no,skip,new,test,timer,service,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling() throws Exception;1545121891;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() throws Exception {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 12L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 12L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = compile(pattern, true)___		NFAState nfaState = nfa.createInitialNFAState()___		for (StreamRecord<Event> event: events) {__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns =_				nfa.advanceTime(sharedBufferAccessor, nfaState, event.getTimestamp())__			Collection<Map<String, List<Event>>> matchedPatterns =_				nfa.process(sharedBufferAccessor, nfaState, event.getValue(), event.getTimestamp())___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,throws,exception,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,12l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,12l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,compile,pattern,true,nfastate,nfa,state,nfa,create,initial,nfastate,for,stream,record,event,event,events,collection,tuple2,map,string,list,event,long,timeout,patterns,nfa,advance,time,shared,buffer,accessor,nfa,state,event,get,timestamp,collection,map,string,list,event,matched,patterns,nfa,process,shared,buffer,accessor,nfa,state,event,get,value,event,get,timestamp,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1452762263;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamEvent<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamEvent<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamEvent<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamEvent<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamEvent<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamEvent<Event>(endEvent = new Event(5, "end", 1.0), 12))__		events.add(new StreamEvent<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer())___		for (StreamEvent<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(event.getEvent(), event.getTimestamp())___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,event,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,event,event,new,event,1,start,1,0,1,events,add,new,stream,event,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,event,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,event,event,new,event,4,foobar,1,0,4,events,add,new,stream,event,event,end,event,new,event,5,end,1,0,12,events,add,new,stream,event,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,for,stream,event,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,event,event,get,timestamp,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1461083852;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamEvent<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamEvent<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamEvent<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamEvent<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamEvent<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamEvent<Event>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamEvent<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer())___		for (StreamEvent<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(event.getEvent(), event.getTimestamp())___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,event,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,event,event,new,event,1,start,1,0,1,events,add,new,stream,event,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,event,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,event,event,new,event,4,foobar,1,0,4,events,add,new,stream,event,event,end,event,new,event,5,end,1,0,11,events,add,new,stream,event,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,for,stream,event,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,event,event,get,timestamp,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1464255256;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamEvent<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamEvent<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamEvent<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamEvent<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamEvent<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamEvent<Event>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamEvent<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamEvent<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(event.getEvent(), event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,event,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,event,event,new,event,1,start,1,0,1,events,add,new,stream,event,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,event,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,event,event,new,event,4,foobar,1,0,4,events,add,new,stream,event,event,end,event,new,event,5,end,1,0,11,events,add,new,stream,event,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,event,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,event,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1467734209;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(event.getValue(), event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1488208221;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(event.getValue(), event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1489866780;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(event.getValue(), event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1490089987;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(event.getValue(), event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1490194327;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(_					event.getValue(),_					event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1490619911;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(_					event.getValue(),_					event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1491320734;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(_					event.getValue(),_					event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1491323030;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(_					event.getValue(),_					event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1492797583;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(_					event.getValue(),_					event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1493200673;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(_					event.getValue(),_					event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1493385877;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(_					event.getValue(),_					event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1493904820;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(_					event.getValue(),_					event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1493985307;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1493989552;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		for (StreamRecord<Event> event: events) {_			Collection<Map<String, Event>> patterns = nfa.process(_					event.getValue(),_					event.getTimestamp()).f0___			resultingPatterns.addAll(patterns)__		}__		assertEquals(1, resultingPatterns.size())___		Map<String, Event> patternMap = resultingPatterns.get(0)___		assertEquals(startEvent, patternMap.get("start"))__		assertEquals(middleEvent, patternMap.get("middle"))__		assertEquals(endEvent, patternMap.get("end"))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,for,stream,record,event,event,events,collection,map,string,event,patterns,nfa,process,event,get,value,event,get,timestamp,f0,resulting,patterns,add,all,patterns,assert,equals,1,resulting,patterns,size,map,string,event,pattern,map,resulting,patterns,get,0,assert,equals,start,event,pattern,map,get,start,assert,equals,middle,event,pattern,map,get,middle,assert,equals,end,event,pattern,map,get,end
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1494851589;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1495005368;Tests that the NFA successfully filters out expired elements with respect to the window_length;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))____		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1495657626;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1496245714;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1497410381;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1497883202;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1500021711;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1501592283;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeWindowNFA();1518008111;Tests that the NFA successfully filters out expired elements with respect to the window_length.;@Test_	public void testSimplePatternWithTimeWindowNFA() {_		List<StreamRecord<Event>> events = new ArrayList<>()___		final Event startEvent__		final Event middleEvent__		final Event endEvent___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(startEvent = new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(middleEvent = new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(endEvent = new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false)___		List<List<Event>> resultingPatterns = feedNFA(events, nfa)___		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(_				Lists.newArrayList(startEvent, middleEvent, endEvent)_		))__	};tests,that,the,nfa,successfully,filters,out,expired,elements,with,respect,to,the,window,length;test,public,void,test,simple,pattern,with,time,window,nfa,list,stream,record,event,events,new,array,list,final,event,start,event,final,event,middle,event,final,event,end,event,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,start,event,new,event,2,start,1,0,2,events,add,new,stream,record,middle,event,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,end,event,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,false,list,list,event,resulting,patterns,feed,nfa,events,nfa,compare,maps,resulting,patterns,lists,list,event,new,array,list,lists,new,array,list,start,event,middle,event,end,event
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1464255256;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamEvent<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()____		events.add(new StreamEvent<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamEvent<Event>(new Event(2, "start", 1.0), 2))__		events.add(new StreamEvent<Event>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamEvent<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamEvent<Event>(new Event(5, "end", 1.0), 11))__		events.add(new StreamEvent<Event>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamEvent<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getEvent(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,event,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,event,event,new,event,1,start,1,0,1,events,add,new,stream,event,event,new,event,2,start,1,0,2,events,add,new,stream,event,event,new,event,3,middle,1,0,3,events,add,new,stream,event,event,new,event,4,foobar,1,0,4,events,add,new,stream,event,event,new,event,5,end,1,0,11,events,add,new,stream,event,event,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,event,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,event,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1467734209;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()____		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1488208221;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()____		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1489866780;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()____		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1490089987;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()____		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new FilterFunction<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))____		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,filter,function,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,filter,function,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,filter,function,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1490194327;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1490619911;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1491320734;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1491323030;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1492797583;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<Event>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<Event>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<Event>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<Event>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<Event>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<Event>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedBy("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedBy("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,event,new,event,1,start,1,0,1,events,add,new,stream,record,event,new,event,2,start,1,0,2,events,add,new,stream,record,event,new,event,3,middle,1,0,3,events,add,new,stream,record,event,new,event,4,foobar,1,0,4,events,add,new,stream,record,event,new,event,5,end,1,0,11,events,add,new,stream,record,event,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1493200673;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1493385877;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			final Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns = nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,final,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1493904820;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns =_				nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1493985307;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, List<Event>>>, Collection<Tuple2<Map<String, List<Event>>, Long>>> patterns =_					nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, List<Event>>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,list,event,collection,tuple2,map,string,list,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,list,event,matched,patterns,patterns,f0,collection,tuple2,map,string,list,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1493989552;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, Event>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, Event>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, Event>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, Event> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", new Event(1, "start", 1.0))__		timeoutPattern1.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", new Event(2, "start", 1.0))__		timeoutPattern2.put("middle", new Event(3, "middle", 1.0))___		Map<String, Event> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", new Event(1, "start", 1.0))___		Map<String, Event> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", new Event(2, "start", 1.0))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			final Tuple2<Collection<Map<String, Event>>, Collection<Tuple2<Map<String, Event>, Long>>> patterns = nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, Event>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, Event>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,event,resulting,patterns,new,array,list,set,tuple2,map,string,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,new,event,1,start,1,0,timeout,pattern1,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,new,event,2,start,1,0,timeout,pattern2,put,middle,new,event,3,middle,1,0,map,string,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,new,event,1,start,1,0,map,string,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,final,tuple2,collection,map,string,event,collection,tuple2,map,string,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,event,matched,patterns,patterns,f0,collection,tuple2,map,string,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1494851589;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, List<Event>>>, Collection<Tuple2<Map<String, List<Event>>, Long>>> patterns =_					nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, List<Event>>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,list,event,collection,tuple2,map,string,list,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,list,event,matched,patterns,patterns,f0,collection,tuple2,map,string,list,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1495005368;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, List<Event>>>, Collection<Tuple2<Map<String, List<Event>>, Long>>> patterns =_					nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, List<Event>>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,list,event,collection,tuple2,map,string,list,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,list,event,matched,patterns,patterns,f0,collection,tuple2,map,string,list,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1495657626;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, List<Event>>>, Collection<Tuple2<Map<String, List<Event>>, Long>>> patterns =_					nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, List<Event>>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,list,event,collection,tuple2,map,string,list,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,list,event,matched,patterns,patterns,f0,collection,tuple2,map,string,list,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1496245714;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, List<Event>>>, Collection<Tuple2<Map<String, List<Event>>, Long>>> patterns =_					nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, List<Event>>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,list,event,collection,tuple2,map,string,list,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,list,event,matched,patterns,patterns,f0,collection,tuple2,map,string,list,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1497410381;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, List<Event>>>, Collection<Tuple2<Map<String, List<Event>>, Long>>> patterns =_					nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, List<Event>>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,list,event,collection,tuple2,map,string,list,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,list,event,matched,patterns,patterns,f0,collection,tuple2,map,string,list,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1497883202;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, List<Event>>>, Collection<Tuple2<Map<String, List<Event>>, Long>>> patterns =_					nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, List<Event>>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,list,event,collection,tuple2,map,string,list,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,list,event,matched,patterns,patterns,f0,collection,tuple2,map,string,list,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1500021711;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, List<Event>>>, Collection<Tuple2<Map<String, List<Event>>, Long>>> patterns =_					nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, List<Event>>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,list,event,collection,tuple2,map,string,list,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,list,event,matched,patterns,patterns,f0,collection,tuple2,map,string,list,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1501592283;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, List<Event>>>, Collection<Tuple2<Map<String, List<Event>>, Long>>> patterns =_					nfa.process(event.getValue(), event.getTimestamp())___			Collection<Map<String, List<Event>>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,for,stream,record,event,event,events,tuple2,collection,map,string,list,event,collection,tuple2,map,string,list,event,long,patterns,nfa,process,event,get,value,event,get,timestamp,collection,map,string,list,event,matched,patterns,patterns,f0,collection,tuple2,map,string,list,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
NFAITCase -> @Test 	public void testSimplePatternWithTimeoutHandling();1518008111;Tests that the NFA successfully returns partially matched event sequences when they've timed_out.;@Test_	public void testSimplePatternWithTimeoutHandling() {_		List<StreamRecord<Event>> events = new ArrayList<>()__		List<Map<String, List<Event>>> resultingPatterns = new ArrayList<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> resultingTimeoutPatterns = new HashSet<>()__		Set<Tuple2<Map<String, List<Event>>, Long>> expectedTimeoutPatterns = new HashSet<>()___		events.add(new StreamRecord<>(new Event(1, "start", 1.0), 1))__		events.add(new StreamRecord<>(new Event(2, "start", 1.0), 2))__		events.add(new StreamRecord<>(new Event(3, "middle", 1.0), 3))__		events.add(new StreamRecord<>(new Event(4, "foobar", 1.0), 4))__		events.add(new StreamRecord<>(new Event(5, "end", 1.0), 11))__		events.add(new StreamRecord<>(new Event(6, "end", 1.0), 13))___		Map<String, List<Event>> timeoutPattern1 = new HashMap<>()__		timeoutPattern1.put("start", Collections.singletonList(new Event(1, "start", 1.0)))__		timeoutPattern1.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern2 = new HashMap<>()__		timeoutPattern2.put("start", Collections.singletonList(new Event(2, "start", 1.0)))__		timeoutPattern2.put("middle", Collections.singletonList(new Event(3, "middle", 1.0)))___		Map<String, List<Event>> timeoutPattern3 = new HashMap<>()__		timeoutPattern3.put("start", Collections.singletonList(new Event(1, "start", 1.0)))___		Map<String, List<Event>> timeoutPattern4 = new HashMap<>()__		timeoutPattern4.put("start", Collections.singletonList(new Event(2, "start", 1.0)))___		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern1, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern2, 13L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern3, 11L))__		expectedTimeoutPatterns.add(Tuple2.of(timeoutPattern4, 13L))___		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = 7907391379273505897L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("start")__			}_		}).followedByAny("middle").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -3268741540234334074L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("middle")__			}_		}).followedByAny("end").where(new SimpleCondition<Event>() {_			private static final long serialVersionUID = -8995174172182138608L___			@Override_			public boolean filter(Event value) throws Exception {_				return value.getName().equals("end")__			}_		}).within(Time.milliseconds(10))___		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), true)___		NFAState<Event> nfaState = nfa.createNFAState()___		for (StreamRecord<Event> event: events) {_			Tuple2<Collection<Map<String, List<Event>>>, Collection<Tuple2<Map<String, List<Event>>, Long>>> patterns =_					nfa.process(nfaState, event.getValue(), event.getTimestamp())___			Collection<Map<String, List<Event>>> matchedPatterns = patterns.f0__			Collection<Tuple2<Map<String, List<Event>>, Long>> timeoutPatterns = patterns.f1___			resultingPatterns.addAll(matchedPatterns)__			resultingTimeoutPatterns.addAll(timeoutPatterns)__		}__		assertEquals(1, resultingPatterns.size())__		assertEquals(expectedTimeoutPatterns.size(), resultingTimeoutPatterns.size())___		assertEquals(expectedTimeoutPatterns, resultingTimeoutPatterns)__	};tests,that,the,nfa,successfully,returns,partially,matched,event,sequences,when,they,ve,timed,out;test,public,void,test,simple,pattern,with,timeout,handling,list,stream,record,event,events,new,array,list,list,map,string,list,event,resulting,patterns,new,array,list,set,tuple2,map,string,list,event,long,resulting,timeout,patterns,new,hash,set,set,tuple2,map,string,list,event,long,expected,timeout,patterns,new,hash,set,events,add,new,stream,record,new,event,1,start,1,0,1,events,add,new,stream,record,new,event,2,start,1,0,2,events,add,new,stream,record,new,event,3,middle,1,0,3,events,add,new,stream,record,new,event,4,foobar,1,0,4,events,add,new,stream,record,new,event,5,end,1,0,11,events,add,new,stream,record,new,event,6,end,1,0,13,map,string,list,event,timeout,pattern1,new,hash,map,timeout,pattern1,put,start,collections,singleton,list,new,event,1,start,1,0,timeout,pattern1,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern2,new,hash,map,timeout,pattern2,put,start,collections,singleton,list,new,event,2,start,1,0,timeout,pattern2,put,middle,collections,singleton,list,new,event,3,middle,1,0,map,string,list,event,timeout,pattern3,new,hash,map,timeout,pattern3,put,start,collections,singleton,list,new,event,1,start,1,0,map,string,list,event,timeout,pattern4,new,hash,map,timeout,pattern4,put,start,collections,singleton,list,new,event,2,start,1,0,expected,timeout,patterns,add,tuple2,of,timeout,pattern1,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern2,13l,expected,timeout,patterns,add,tuple2,of,timeout,pattern3,11l,expected,timeout,patterns,add,tuple2,of,timeout,pattern4,13l,pattern,event,pattern,pattern,event,begin,start,where,new,simple,condition,event,private,static,final,long,serial,version,uid,7907391379273505897l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,start,followed,by,any,middle,where,new,simple,condition,event,private,static,final,long,serial,version,uid,3268741540234334074l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,middle,followed,by,any,end,where,new,simple,condition,event,private,static,final,long,serial,version,uid,8995174172182138608l,override,public,boolean,filter,event,value,throws,exception,return,value,get,name,equals,end,within,time,milliseconds,10,nfa,event,nfa,nfacompiler,compile,pattern,event,create,type,serializer,true,nfastate,event,nfa,state,nfa,create,nfastate,for,stream,record,event,event,events,tuple2,collection,map,string,list,event,collection,tuple2,map,string,list,event,long,patterns,nfa,process,nfa,state,event,get,value,event,get,timestamp,collection,map,string,list,event,matched,patterns,patterns,f0,collection,tuple2,map,string,list,event,long,timeout,patterns,patterns,f1,resulting,patterns,add,all,matched,patterns,resulting,timeout,patterns,add,all,timeout,patterns,assert,equals,1,resulting,patterns,size,assert,equals,expected,timeout,patterns,size,resulting,timeout,patterns,size,assert,equals,expected,timeout,patterns,resulting,timeout,patterns
