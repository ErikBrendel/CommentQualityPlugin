# id;timestamp;commentText;codeText;commentWords;codeWords
AfterMatchSkipStrategy -> AfterMatchSkipStrategy();1528989005;Forbid further extending.;AfterMatchSkipStrategy() {_	};forbid,further,extending;after,match,skip,strategy
AfterMatchSkipStrategy -> AfterMatchSkipStrategy();1535555335;Forbid further extending.;AfterMatchSkipStrategy() {_	};forbid,further,extending;after,match,skip,strategy
AfterMatchSkipStrategy -> AfterMatchSkipStrategy();1538379997;Forbid further extending.;AfterMatchSkipStrategy() {_	};forbid,further,extending;after,match,skip,strategy
AfterMatchSkipStrategy -> AfterMatchSkipStrategy();1538386824;Forbid further extending.;AfterMatchSkipStrategy() {_	};forbid,further,extending;after,match,skip,strategy
AfterMatchSkipStrategy -> public static AfterMatchSkipStrategy skipPastLastEvent();1528989005;Discards every partial match that contains event of the match.__@return the created AfterMatchSkipStrategy;public static AfterMatchSkipStrategy skipPastLastEvent() {_		return SkipPastLastStrategy.INSTANCE__	};discards,every,partial,match,that,contains,event,of,the,match,return,the,created,after,match,skip,strategy;public,static,after,match,skip,strategy,skip,past,last,event,return,skip,past,last,strategy,instance
AfterMatchSkipStrategy -> public static AfterMatchSkipStrategy skipPastLastEvent();1535555335;Discards every partial match that contains event of the match.__@return the created AfterMatchSkipStrategy;public static AfterMatchSkipStrategy skipPastLastEvent() {_		return SkipPastLastStrategy.INSTANCE__	};discards,every,partial,match,that,contains,event,of,the,match,return,the,created,after,match,skip,strategy;public,static,after,match,skip,strategy,skip,past,last,event,return,skip,past,last,strategy,instance
AfterMatchSkipStrategy -> public static AfterMatchSkipStrategy skipToLast(String patternName);1528989005;Discards every partial match that contains event of the match preceding the last of *PatternName*.__@param patternName the pattern name to skip to_@return the created AfterMatchSkipStrategy;public static AfterMatchSkipStrategy skipToLast(String patternName) {_		return new SkipToLastStrategy(patternName)__	};discards,every,partial,match,that,contains,event,of,the,match,preceding,the,last,of,pattern,name,param,pattern,name,the,pattern,name,to,skip,to,return,the,created,after,match,skip,strategy;public,static,after,match,skip,strategy,skip,to,last,string,pattern,name,return,new,skip,to,last,strategy,pattern,name
AfterMatchSkipStrategy -> public static AfterMatchSkipStrategy skipToLast(String patternName);1535555335;Discards every partial match that contains event of the match preceding the last of *PatternName*.__@param patternName the pattern name to skip to_@return the created AfterMatchSkipStrategy;public static AfterMatchSkipStrategy skipToLast(String patternName) {_		return new SkipToLastStrategy(patternName)__	};discards,every,partial,match,that,contains,event,of,the,match,preceding,the,last,of,pattern,name,param,pattern,name,the,pattern,name,to,skip,to,return,the,created,after,match,skip,strategy;public,static,after,match,skip,strategy,skip,to,last,string,pattern,name,return,new,skip,to,last,strategy,pattern,name
AfterMatchSkipStrategy -> public void prune( 			Collection<ComputationState> matchesToPrune, 			Collection<Map<String, List<EventId>>> matchedResult, 			SharedBufferAccessor<?> sharedBufferAccessor) throws Exception;1535555335;Prunes matches/partial matches based on the chosen strategy.__@param matchesToPrune current partial matches_@param matchedResult  already completed matches_@param sharedBufferAccessor   accessor to corresponding shared buffer_@throws Exception thrown if could not access the state;public void prune(_			Collection<ComputationState> matchesToPrune,_			Collection<Map<String, List<EventId>>> matchedResult,_			SharedBufferAccessor<?> sharedBufferAccessor) throws Exception {__		EventId pruningId = getPruningId(matchedResult)__		if (pruningId != null) {_			List<ComputationState> discardStates = new ArrayList<>()__			for (ComputationState computationState : matchesToPrune) {_				if (computationState.getStartEventID() != null &&_					shouldPrune(computationState.getStartEventID(), pruningId)) {_					sharedBufferAccessor.releaseNode(computationState.getPreviousBufferEntry())__					discardStates.add(computationState)__				}_			}_			matchesToPrune.removeAll(discardStates)__		}_	};prunes,matches,partial,matches,based,on,the,chosen,strategy,param,matches,to,prune,current,partial,matches,param,matched,result,already,completed,matches,param,shared,buffer,accessor,accessor,to,corresponding,shared,buffer,throws,exception,thrown,if,could,not,access,the,state;public,void,prune,collection,computation,state,matches,to,prune,collection,map,string,list,event,id,matched,result,shared,buffer,accessor,shared,buffer,accessor,throws,exception,event,id,pruning,id,get,pruning,id,matched,result,if,pruning,id,null,list,computation,state,discard,states,new,array,list,for,computation,state,computation,state,matches,to,prune,if,computation,state,get,start,event,id,null,should,prune,computation,state,get,start,event,id,pruning,id,shared,buffer,accessor,release,node,computation,state,get,previous,buffer,entry,discard,states,add,computation,state,matches,to,prune,remove,all,discard,states
AfterMatchSkipStrategy -> public void prune( 			Collection<ComputationState> matchesToPrune, 			Collection<Map<String, List<EventId>>> matchedResult, 			SharedBufferAccessor<?> sharedBufferAccessor) throws Exception;1538379997;Prunes matches/partial matches based on the chosen strategy.__@param matchesToPrune current partial matches_@param matchedResult  already completed matches_@param sharedBufferAccessor   accessor to corresponding shared buffer_@throws Exception thrown if could not access the state;public void prune(_			Collection<ComputationState> matchesToPrune,_			Collection<Map<String, List<EventId>>> matchedResult,_			SharedBufferAccessor<?> sharedBufferAccessor) throws Exception {__		EventId pruningId = getPruningId(matchedResult)__		if (pruningId != null) {_			List<ComputationState> discardStates = new ArrayList<>()__			for (ComputationState computationState : matchesToPrune) {_				if (computationState.getStartEventID() != null &&_					shouldPrune(computationState.getStartEventID(), pruningId)) {_					sharedBufferAccessor.releaseNode(computationState.getPreviousBufferEntry())__					discardStates.add(computationState)__				}_			}_			matchesToPrune.removeAll(discardStates)__		}_	};prunes,matches,partial,matches,based,on,the,chosen,strategy,param,matches,to,prune,current,partial,matches,param,matched,result,already,completed,matches,param,shared,buffer,accessor,accessor,to,corresponding,shared,buffer,throws,exception,thrown,if,could,not,access,the,state;public,void,prune,collection,computation,state,matches,to,prune,collection,map,string,list,event,id,matched,result,shared,buffer,accessor,shared,buffer,accessor,throws,exception,event,id,pruning,id,get,pruning,id,matched,result,if,pruning,id,null,list,computation,state,discard,states,new,array,list,for,computation,state,computation,state,matches,to,prune,if,computation,state,get,start,event,id,null,should,prune,computation,state,get,start,event,id,pruning,id,shared,buffer,accessor,release,node,computation,state,get,previous,buffer,entry,discard,states,add,computation,state,matches,to,prune,remove,all,discard,states
AfterMatchSkipStrategy -> public void prune( 			Collection<ComputationState> matchesToPrune, 			Collection<Map<String, List<EventId>>> matchedResult, 			SharedBufferAccessor<?> sharedBufferAccessor) throws Exception;1538386824;Prunes matches/partial matches based on the chosen strategy.__@param matchesToPrune current partial matches_@param matchedResult  already completed matches_@param sharedBufferAccessor   accessor to corresponding shared buffer_@throws Exception thrown if could not access the state;public void prune(_			Collection<ComputationState> matchesToPrune,_			Collection<Map<String, List<EventId>>> matchedResult,_			SharedBufferAccessor<?> sharedBufferAccessor) throws Exception {__		EventId pruningId = getPruningId(matchedResult)__		if (pruningId != null) {_			List<ComputationState> discardStates = new ArrayList<>()__			for (ComputationState computationState : matchesToPrune) {_				if (computationState.getStartEventID() != null &&_					shouldPrune(computationState.getStartEventID(), pruningId)) {_					sharedBufferAccessor.releaseNode(computationState.getPreviousBufferEntry())__					discardStates.add(computationState)__				}_			}_			matchesToPrune.removeAll(discardStates)__		}_	};prunes,matches,partial,matches,based,on,the,chosen,strategy,param,matches,to,prune,current,partial,matches,param,matched,result,already,completed,matches,param,shared,buffer,accessor,accessor,to,corresponding,shared,buffer,throws,exception,thrown,if,could,not,access,the,state;public,void,prune,collection,computation,state,matches,to,prune,collection,map,string,list,event,id,matched,result,shared,buffer,accessor,shared,buffer,accessor,throws,exception,event,id,pruning,id,get,pruning,id,matched,result,if,pruning,id,null,list,computation,state,discard,states,new,array,list,for,computation,state,computation,state,matches,to,prune,if,computation,state,get,start,event,id,null,should,prune,computation,state,get,start,event,id,pruning,id,shared,buffer,accessor,release,node,computation,state,get,previous,buffer,entry,discard,states,add,computation,state,matches,to,prune,remove,all,discard,states
AfterMatchSkipStrategy -> public static SkipToLastStrategy skipToLast(String patternName);1538379997;Discards every partial match that contains event of the match preceding the last of *PatternName*.__@param patternName the pattern name to skip to_@return the created AfterMatchSkipStrategy;public static SkipToLastStrategy skipToLast(String patternName) {_		return new SkipToLastStrategy(patternName, false)__	};discards,every,partial,match,that,contains,event,of,the,match,preceding,the,last,of,pattern,name,param,pattern,name,the,pattern,name,to,skip,to,return,the,created,after,match,skip,strategy;public,static,skip,to,last,strategy,skip,to,last,string,pattern,name,return,new,skip,to,last,strategy,pattern,name,false
AfterMatchSkipStrategy -> public static SkipToLastStrategy skipToLast(String patternName);1538386824;Discards every partial match that started before the last event of emitted match mapped to *PatternName*.__@param patternName the pattern name to skip to_@return the created AfterMatchSkipStrategy;public static SkipToLastStrategy skipToLast(String patternName) {_		return new SkipToLastStrategy(patternName, false)__	};discards,every,partial,match,that,started,before,the,last,event,of,emitted,match,mapped,to,pattern,name,param,pattern,name,the,pattern,name,to,skip,to,return,the,created,after,match,skip,strategy;public,static,skip,to,last,strategy,skip,to,last,string,pattern,name,return,new,skip,to,last,strategy,pattern,name,false
AfterMatchSkipStrategy -> protected abstract boolean shouldPrune(EventId startEventID, EventId pruningId)_;1528989005;Tells if the partial/completed match starting at given id should be prunned by given pruningId.__@param startEventID starting event id of a partial/completed match_@param pruningId   pruningId calculated by this strategy_@return true if the match should be pruned;protected abstract boolean shouldPrune(EventId startEventID, EventId pruningId)_;tells,if,the,partial,completed,match,starting,at,given,id,should,be,prunned,by,given,pruning,id,param,start,event,id,starting,event,id,of,a,partial,completed,match,param,pruning,id,pruning,id,calculated,by,this,strategy,return,true,if,the,match,should,be,pruned;protected,abstract,boolean,should,prune,event,id,start,event,id,event,id,pruning,id
AfterMatchSkipStrategy -> protected abstract boolean shouldPrune(EventId startEventID, EventId pruningId)_;1535555335;Tells if the partial/completed match starting at given id should be prunned by given pruningId.__@param startEventID starting event id of a partial/completed match_@param pruningId   pruningId calculated by this strategy_@return true if the match should be pruned;protected abstract boolean shouldPrune(EventId startEventID, EventId pruningId)_;tells,if,the,partial,completed,match,starting,at,given,id,should,be,prunned,by,given,pruning,id,param,start,event,id,starting,event,id,of,a,partial,completed,match,param,pruning,id,pruning,id,calculated,by,this,strategy,return,true,if,the,match,should,be,pruned;protected,abstract,boolean,should,prune,event,id,start,event,id,event,id,pruning,id
AfterMatchSkipStrategy -> protected abstract boolean shouldPrune(EventId startEventID, EventId pruningId)_;1538379997;Tells if the partial/completed match starting at given id should be prunned by given pruningId.__@param startEventID starting event id of a partial/completed match_@param pruningId   pruningId calculated by this strategy_@return true if the match should be pruned;protected abstract boolean shouldPrune(EventId startEventID, EventId pruningId)_;tells,if,the,partial,completed,match,starting,at,given,id,should,be,prunned,by,given,pruning,id,param,start,event,id,starting,event,id,of,a,partial,completed,match,param,pruning,id,pruning,id,calculated,by,this,strategy,return,true,if,the,match,should,be,pruned;protected,abstract,boolean,should,prune,event,id,start,event,id,event,id,pruning,id
AfterMatchSkipStrategy -> protected abstract boolean shouldPrune(EventId startEventID, EventId pruningId)_;1538386824;Tells if the partial/completed match starting at given id should be prunned by given pruningId.__@param startEventID starting event id of a partial/completed match_@param pruningId   pruningId calculated by this strategy_@return true if the match should be pruned;protected abstract boolean shouldPrune(EventId startEventID, EventId pruningId)_;tells,if,the,partial,completed,match,starting,at,given,id,should,be,prunned,by,given,pruning,id,param,start,event,id,starting,event,id,of,a,partial,completed,match,param,pruning,id,pruning,id,calculated,by,this,strategy,return,true,if,the,match,should,be,pruned;protected,abstract,boolean,should,prune,event,id,start,event,id,event,id,pruning,id
AfterMatchSkipStrategy -> public static SkipToFirstStrategy skipToFirst(String patternName);1538379997;Discards every partial match that contains event of the match preceding the first of *PatternName*.__@param patternName the pattern name to skip to_@return the created AfterMatchSkipStrategy;public static SkipToFirstStrategy skipToFirst(String patternName) {_		return new SkipToFirstStrategy(patternName, false)__	};discards,every,partial,match,that,contains,event,of,the,match,preceding,the,first,of,pattern,name,param,pattern,name,the,pattern,name,to,skip,to,return,the,created,after,match,skip,strategy;public,static,skip,to,first,strategy,skip,to,first,string,pattern,name,return,new,skip,to,first,strategy,pattern,name,false
AfterMatchSkipStrategy -> public static SkipToFirstStrategy skipToFirst(String patternName);1538386824;Discards every partial match that started before the first event of emitted match mapped to *PatternName*.__@param patternName the pattern name to skip to_@return the created AfterMatchSkipStrategy;public static SkipToFirstStrategy skipToFirst(String patternName) {_		return new SkipToFirstStrategy(patternName, false)__	};discards,every,partial,match,that,started,before,the,first,event,of,emitted,match,mapped,to,pattern,name,param,pattern,name,the,pattern,name,to,skip,to,return,the,created,after,match,skip,strategy;public,static,skip,to,first,strategy,skip,to,first,string,pattern,name,return,new,skip,to,first,strategy,pattern,name,false
AfterMatchSkipStrategy -> public static NoSkipStrategy noSkip();1538379997;Every possible match will be emitted.__@return the created AfterMatchSkipStrategy;public static NoSkipStrategy noSkip() {_		return NoSkipStrategy.INSTANCE__	};every,possible,match,will,be,emitted,return,the,created,after,match,skip,strategy;public,static,no,skip,strategy,no,skip,return,no,skip,strategy,instance
AfterMatchSkipStrategy -> public static NoSkipStrategy noSkip();1538386824;Every possible match will be emitted.__@return the created AfterMatchSkipStrategy;public static NoSkipStrategy noSkip() {_		return NoSkipStrategy.INSTANCE__	};every,possible,match,will,be,emitted,return,the,created,after,match,skip,strategy;public,static,no,skip,strategy,no,skip,return,no,skip,strategy,instance
AfterMatchSkipStrategy -> public Optional<String> getPatternName();1528989005;Name of pattern that processing will be skipped to.;public Optional<String> getPatternName() {_		return Optional.empty()__	};name,of,pattern,that,processing,will,be,skipped,to;public,optional,string,get,pattern,name,return,optional,empty
AfterMatchSkipStrategy -> public Optional<String> getPatternName();1535555335;Name of pattern that processing will be skipped to.;public Optional<String> getPatternName() {_		return Optional.empty()__	};name,of,pattern,that,processing,will,be,skipped,to;public,optional,string,get,pattern,name,return,optional,empty
AfterMatchSkipStrategy -> public Optional<String> getPatternName();1538379997;Name of pattern that processing will be skipped to.;public Optional<String> getPatternName() {_		return Optional.empty()__	};name,of,pattern,that,processing,will,be,skipped,to;public,optional,string,get,pattern,name,return,optional,empty
AfterMatchSkipStrategy -> public Optional<String> getPatternName();1538386824;Name of pattern that processing will be skipped to.;public Optional<String> getPatternName() {_		return Optional.empty()__	};name,of,pattern,that,processing,will,be,skipped,to;public,optional,string,get,pattern,name,return,optional,empty
AfterMatchSkipStrategy -> protected abstract EventId getPruningId(Collection<Map<String, List<EventId>>> match)_;1528989005;Retrieves event id of the pruning element from the given match based on the strategy.__@param match match corresponding to which should the pruning happen_@return pruning event id;protected abstract EventId getPruningId(Collection<Map<String, List<EventId>>> match)_;retrieves,event,id,of,the,pruning,element,from,the,given,match,based,on,the,strategy,param,match,match,corresponding,to,which,should,the,pruning,happen,return,pruning,event,id;protected,abstract,event,id,get,pruning,id,collection,map,string,list,event,id,match
AfterMatchSkipStrategy -> protected abstract EventId getPruningId(Collection<Map<String, List<EventId>>> match)_;1535555335;Retrieves event id of the pruning element from the given match based on the strategy.__@param match match corresponding to which should the pruning happen_@return pruning event id;protected abstract EventId getPruningId(Collection<Map<String, List<EventId>>> match)_;retrieves,event,id,of,the,pruning,element,from,the,given,match,based,on,the,strategy,param,match,match,corresponding,to,which,should,the,pruning,happen,return,pruning,event,id;protected,abstract,event,id,get,pruning,id,collection,map,string,list,event,id,match
AfterMatchSkipStrategy -> protected abstract EventId getPruningId(Collection<Map<String, List<EventId>>> match)_;1538379997;Retrieves event id of the pruning element from the given match based on the strategy.__@param match match corresponding to which should the pruning happen_@return pruning event id;protected abstract EventId getPruningId(Collection<Map<String, List<EventId>>> match)_;retrieves,event,id,of,the,pruning,element,from,the,given,match,based,on,the,strategy,param,match,match,corresponding,to,which,should,the,pruning,happen,return,pruning,event,id;protected,abstract,event,id,get,pruning,id,collection,map,string,list,event,id,match
AfterMatchSkipStrategy -> protected abstract EventId getPruningId(Collection<Map<String, List<EventId>>> match)_;1538386824;Retrieves event id of the pruning element from the given match based on the strategy.__@param match match corresponding to which should the pruning happen_@return pruning event id;protected abstract EventId getPruningId(Collection<Map<String, List<EventId>>> match)_;retrieves,event,id,of,the,pruning,element,from,the,given,match,based,on,the,strategy,param,match,match,corresponding,to,which,should,the,pruning,happen,return,pruning,event,id;protected,abstract,event,id,get,pruning,id,collection,map,string,list,event,id,match
AfterMatchSkipStrategy -> public static AfterMatchSkipStrategy skipToFirst(String patternName);1528989005;Discards every partial match that contains event of the match preceding the first of *PatternName*.__@param patternName the pattern name to skip to_@return the created AfterMatchSkipStrategy;public static AfterMatchSkipStrategy skipToFirst(String patternName) {_		return new SkipToFirstStrategy(patternName)__	};discards,every,partial,match,that,contains,event,of,the,match,preceding,the,first,of,pattern,name,param,pattern,name,the,pattern,name,to,skip,to,return,the,created,after,match,skip,strategy;public,static,after,match,skip,strategy,skip,to,first,string,pattern,name,return,new,skip,to,first,strategy,pattern,name
AfterMatchSkipStrategy -> public static AfterMatchSkipStrategy skipToFirst(String patternName);1535555335;Discards every partial match that contains event of the match preceding the first of *PatternName*.__@param patternName the pattern name to skip to_@return the created AfterMatchSkipStrategy;public static AfterMatchSkipStrategy skipToFirst(String patternName) {_		return new SkipToFirstStrategy(patternName)__	};discards,every,partial,match,that,contains,event,of,the,match,preceding,the,first,of,pattern,name,param,pattern,name,the,pattern,name,to,skip,to,return,the,created,after,match,skip,strategy;public,static,after,match,skip,strategy,skip,to,first,string,pattern,name,return,new,skip,to,first,strategy,pattern,name
AfterMatchSkipStrategy -> public static AfterMatchSkipStrategy noSkip();1528989005;Every possible match will be emitted.__@return the created AfterMatchSkipStrategy;public static AfterMatchSkipStrategy noSkip() {_		return NoSkipStrategy.INSTANCE__	};every,possible,match,will,be,emitted,return,the,created,after,match,skip,strategy;public,static,after,match,skip,strategy,no,skip,return,no,skip,strategy,instance
AfterMatchSkipStrategy -> public static AfterMatchSkipStrategy noSkip();1535555335;Every possible match will be emitted.__@return the created AfterMatchSkipStrategy;public static AfterMatchSkipStrategy noSkip() {_		return NoSkipStrategy.INSTANCE__	};every,possible,match,will,be,emitted,return,the,created,after,match,skip,strategy;public,static,after,match,skip,strategy,no,skip,return,no,skip,strategy,instance
AfterMatchSkipStrategy -> public abstract boolean isSkipStrategy()_;1528989005;Tells if the strategy may skip some matches.__@return false if the strategy is NO_SKIP strategy;public abstract boolean isSkipStrategy()_;tells,if,the,strategy,may,skip,some,matches,return,false,if,the,strategy,is,strategy;public,abstract,boolean,is,skip,strategy
AfterMatchSkipStrategy -> public abstract boolean isSkipStrategy()_;1535555335;Tells if the strategy may skip some matches.__@return false if the strategy is NO_SKIP strategy;public abstract boolean isSkipStrategy()_;tells,if,the,strategy,may,skip,some,matches,return,false,if,the,strategy,is,strategy;public,abstract,boolean,is,skip,strategy
AfterMatchSkipStrategy -> public abstract boolean isSkipStrategy()_;1538379997;Tells if the strategy may skip some matches.__@return false if the strategy is NO_SKIP strategy;public abstract boolean isSkipStrategy()_;tells,if,the,strategy,may,skip,some,matches,return,false,if,the,strategy,is,strategy;public,abstract,boolean,is,skip,strategy
AfterMatchSkipStrategy -> public abstract boolean isSkipStrategy()_;1538386824;Tells if the strategy may skip some matches.__@return false if the strategy is NO_SKIP strategy;public abstract boolean isSkipStrategy()_;tells,if,the,strategy,may,skip,some,matches,return,false,if,the,strategy,is,strategy;public,abstract,boolean,is,skip,strategy
AfterMatchSkipStrategy -> public static SkipPastLastStrategy skipPastLastEvent();1538379997;Discards every partial match that contains event of the match.__@return the created AfterMatchSkipStrategy;public static SkipPastLastStrategy skipPastLastEvent() {_		return SkipPastLastStrategy.INSTANCE__	};discards,every,partial,match,that,contains,event,of,the,match,return,the,created,after,match,skip,strategy;public,static,skip,past,last,strategy,skip,past,last,event,return,skip,past,last,strategy,instance
AfterMatchSkipStrategy -> public static SkipPastLastStrategy skipPastLastEvent();1538386824;Discards every partial match that started before emitted match ended.__@return the created AfterMatchSkipStrategy;public static SkipPastLastStrategy skipPastLastEvent() {_		return SkipPastLastStrategy.INSTANCE__	};discards,every,partial,match,that,started,before,emitted,match,ended,return,the,created,after,match,skip,strategy;public,static,skip,past,last,strategy,skip,past,last,event,return,skip,past,last,strategy,instance
