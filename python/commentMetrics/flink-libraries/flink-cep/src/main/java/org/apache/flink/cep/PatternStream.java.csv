# id;timestamp;commentText;codeText;commentWords;codeWords
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1545121742;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events__@deprecated Use {@link PatternStream#flatSelect(OutputTag, PatternFlatTimeoutFunction, PatternFlatSelectFunction)}_that returns timed out events as a side-output__@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		final TypeInformation<L> timedOutTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			0,_			1,_			new int[]{2, 0},_			inputStream.getType(),_			null,_			false)___		final TypeInformation<R> mainTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		final OutputTag<L> outputTag = new OutputTag<>(UUID.randomUUID().toString(), timedOutTypeInfo)___		final PatternProcessFunction<T, R> processFunction =_			fromFlatSelect(clean(patternFlatSelectFunction))_				.withTimeoutHandler(outputTag, clean(patternFlatTimeoutFunction))_				.build()___		final SingleOutputStreamOperator<R> mainStream = process(processFunction, mainTypeInfo)__		final DataStream<L> timedOutStream = mainStream.getSideOutput(outputTag)__		final TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(timedOutTypeInfo, mainTypeInfo)___		return mainStream_			.connect(timedOutStream)_			.map(new CoMapTimeout<>())_			.returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,deprecated,use,link,pattern,stream,flat,select,output,tag,pattern,flat,timeout,function,pattern,flat,select,function,that,returns,timed,out,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,type,information,l,timed,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,0,1,new,int,2,0,input,stream,get,type,null,false,final,type,information,r,main,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,1,0,input,stream,get,type,null,false,final,output,tag,l,output,tag,new,output,tag,uuid,random,uuid,to,string,timed,out,type,info,final,pattern,process,function,t,r,process,function,from,flat,select,clean,pattern,flat,select,function,with,timeout,handler,output,tag,clean,pattern,flat,timeout,function,build,final,single,output,stream,operator,r,main,stream,process,process,function,main,type,info,final,data,stream,l,timed,out,stream,main,stream,get,side,output,output,tag,final,type,information,either,l,r,out,type,info,new,either,type,info,timed,out,type,info,main,type,info,return,main,stream,connect,timed,out,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1545210639;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events__@deprecated Use {@link PatternStream#flatSelect(OutputTag, PatternFlatTimeoutFunction, PatternFlatSelectFunction)}_that returns timed out events as a side-output__@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		final TypeInformation<L> timedOutTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			0,_			1,_			new int[]{2, 0},_			builder.getInputType(),_			null,_			false)___		final TypeInformation<R> mainTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{1, 0},_			builder.getInputType(),_			null,_			false)___		final OutputTag<L> outputTag = new OutputTag<>(UUID.randomUUID().toString(), timedOutTypeInfo)___		final PatternProcessFunction<T, R> processFunction =_			fromFlatSelect(builder.clean(patternFlatSelectFunction))_				.withTimeoutHandler(outputTag, builder.clean(patternFlatTimeoutFunction))_				.build()___		final SingleOutputStreamOperator<R> mainStream = process(processFunction, mainTypeInfo)__		final DataStream<L> timedOutStream = mainStream.getSideOutput(outputTag)__		final TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(timedOutTypeInfo, mainTypeInfo)___		return mainStream_				.connect(timedOutStream)_				.map(new CoMapTimeout<>())_				.returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,deprecated,use,link,pattern,stream,flat,select,output,tag,pattern,flat,timeout,function,pattern,flat,select,function,that,returns,timed,out,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,type,information,l,timed,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,0,1,new,int,2,0,builder,get,input,type,null,false,final,type,information,r,main,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,1,0,builder,get,input,type,null,false,final,output,tag,l,output,tag,new,output,tag,uuid,random,uuid,to,string,timed,out,type,info,final,pattern,process,function,t,r,process,function,from,flat,select,builder,clean,pattern,flat,select,function,with,timeout,handler,output,tag,builder,clean,pattern,flat,timeout,function,build,final,single,output,stream,operator,r,main,stream,process,process,function,main,type,info,final,data,stream,l,timed,out,stream,main,stream,get,side,output,output,tag,final,type,information,either,l,r,out,type,info,new,either,type,info,timed,out,type,info,main,type,info,return,main,stream,connect,timed,out,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> process( 			final PatternProcessFunction<T, R> patternProcessFunction, 			final TypeInformation<R> outTypeInfo);1545121742;Applies a process function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternProcessFunction} is called. In order to process timed out partial matches as well one can_use {@link TimedOutPartialMatchHandler} as additional interface.__@param patternProcessFunction The pattern process function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern process_function.;public <R> SingleOutputStreamOperator<R> process(_			final PatternProcessFunction<T, R> patternProcessFunction,_			final TypeInformation<R> outTypeInfo) {__		return PatternStreamBuilder.createPatternStream(_			inputStream,_			pattern,_			outTypeInfo,_			comparator,_			lateDataOutputTag,_			clean(patternProcessFunction))__	};applies,a,process,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,process,function,is,called,in,order,to,process,timed,out,partial,matches,as,well,one,can,use,link,timed,out,partial,match,handler,as,additional,interface,param,pattern,process,function,the,pattern,process,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,process,function;public,r,single,output,stream,operator,r,process,final,pattern,process,function,t,r,pattern,process,function,final,type,information,r,out,type,info,return,pattern,stream,builder,create,pattern,stream,input,stream,pattern,out,type,info,comparator,late,data,output,tag,clean,pattern,process,function
PatternStream -> public <R> SingleOutputStreamOperator<R> process( 			final PatternProcessFunction<T, R> patternProcessFunction, 			final TypeInformation<R> outTypeInfo);1545210639;Applies a process function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternProcessFunction} is called. In order to process timed out partial matches as well one can_use {@link TimedOutPartialMatchHandler} as additional interface.__@param patternProcessFunction The pattern process function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern process_function.;public <R> SingleOutputStreamOperator<R> process(_			final PatternProcessFunction<T, R> patternProcessFunction,_			final TypeInformation<R> outTypeInfo) {__		return builder.build(_			outTypeInfo,_			builder.clean(patternProcessFunction))__	};applies,a,process,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,process,function,is,called,in,order,to,process,timed,out,partial,matches,as,well,one,can,use,link,timed,out,partial,match,handler,as,additional,interface,param,pattern,process,function,the,pattern,process,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,process,function;public,r,single,output,stream,operator,r,process,final,pattern,process,function,t,r,pattern,process,function,final,type,information,r,out,type,info,return,builder,build,out,type,info,builder,clean,pattern,process,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 		final OutputTag<L> timeoutOutputTag, 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1502445388;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timeouted patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_		final OutputTag<L> timeoutOutputTag,_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		return select(_			timeoutOutputTag,_			patternTimeoutFunction,_			rightTypeInfo,_			patternSelectFunction)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timeouted,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timeout,output,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,return,select,timeout,output,tag,pattern,timeout,function,right,type,info,pattern,select,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 		final OutputTag<L> timeoutOutputTag, 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1503555538;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_		final OutputTag<L> timeoutOutputTag,_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		return select(_			timeoutOutputTag,_			patternTimeoutFunction,_			rightTypeInfo,_			patternSelectFunction)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timeout,output,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,return,select,timeout,output,tag,pattern,timeout,function,right,type,info,pattern,select,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 		final OutputTag<L> timeoutOutputTag, 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1527694335;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_		final OutputTag<L> timeoutOutputTag,_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		return select(_			timeoutOutputTag,_			patternTimeoutFunction,_			rightTypeInfo,_			patternSelectFunction)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timeout,output,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,return,select,timeout,output,tag,pattern,timeout,function,right,type,info,pattern,select,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 		final OutputTag<L> timeoutOutputTag, 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1528109383;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_		final OutputTag<L> timeoutOutputTag,_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			inputStream.getType(),_			null,_			false)___		return select(_			timeoutOutputTag,_			patternTimeoutFunction,_			rightTypeInfo,_			patternSelectFunction)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timeout,output,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,type,extractor,input,stream,get,type,null,false,return,select,timeout,output,tag,pattern,timeout,function,right,type,info,pattern,select,function
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1502445388;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements__@deprecated Use {@link PatternStream#select(OutputTag, PatternTimeoutFunction, PatternSelectFunction)}_that returns timeouted events as a side-output__@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		final OutputTag<L> outputTag = new OutputTag<L>("dummy-timeouted", leftTypeInfo)___		final SingleOutputStreamOperator<R> mainStream = CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternSelectFunction),_			rightTypeInfo,_			outputTag,_			clean(patternTimeoutFunction))___		final DataStream<L> timeoutedStream = mainStream.getSideOutput(outputTag)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return mainStream.connect(timeoutedStream).map(new CoMapTimeout<>()).returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,deprecated,use,link,pattern,stream,select,output,tag,pattern,timeout,function,pattern,select,function,that,returns,timeouted,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,final,output,tag,l,output,tag,new,output,tag,l,dummy,timeouted,left,type,info,final,single,output,stream,operator,r,main,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,right,type,info,output,tag,clean,pattern,timeout,function,final,data,stream,l,timeouted,stream,main,stream,get,side,output,output,tag,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,main,stream,connect,timeouted,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1503555538;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements__@deprecated Use {@link PatternStream#select(OutputTag, PatternTimeoutFunction, PatternSelectFunction)}_that returns timed out events as a side-output__@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		final OutputTag<L> outputTag = new OutputTag<L>(UUID.randomUUID().toString(), leftTypeInfo)___		final SingleOutputStreamOperator<R> mainStream = CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternSelectFunction),_			rightTypeInfo,_			outputTag,_			clean(patternTimeoutFunction))___		final DataStream<L> timedOutStream = mainStream.getSideOutput(outputTag)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return mainStream.connect(timedOutStream).map(new CoMapTimeout<>()).returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,deprecated,use,link,pattern,stream,select,output,tag,pattern,timeout,function,pattern,select,function,that,returns,timed,out,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,final,output,tag,l,output,tag,new,output,tag,l,uuid,random,uuid,to,string,left,type,info,final,single,output,stream,operator,r,main,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,right,type,info,output,tag,clean,pattern,timeout,function,final,data,stream,l,timed,out,stream,main,stream,get,side,output,output,tag,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,main,stream,connect,timed,out,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1527694335;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements__@deprecated Use {@link PatternStream#select(OutputTag, PatternTimeoutFunction, PatternSelectFunction)}_that returns timed out events as a side-output__@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		final OutputTag<L> outputTag = new OutputTag<L>(UUID.randomUUID().toString(), leftTypeInfo)___		final SingleOutputStreamOperator<R> mainStream = CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternSelectFunction),_			rightTypeInfo,_			outputTag,_			clean(patternTimeoutFunction),_			lateDataOutputTag)___		final DataStream<L> timedOutStream = mainStream.getSideOutput(outputTag)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return mainStream.connect(timedOutStream).map(new CoMapTimeout<>()).returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,deprecated,use,link,pattern,stream,select,output,tag,pattern,timeout,function,pattern,select,function,that,returns,timed,out,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,final,output,tag,l,output,tag,new,output,tag,l,uuid,random,uuid,to,string,left,type,info,final,single,output,stream,operator,r,main,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,right,type,info,output,tag,clean,pattern,timeout,function,late,data,output,tag,final,data,stream,l,timed,out,stream,main,stream,get,side,output,output,tag,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,main,stream,connect,timed,out,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1528109383;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements__@deprecated Use {@link PatternStream#select(OutputTag, PatternTimeoutFunction, PatternSelectFunction)}_that returns timed out events as a side-output__@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			inputStream.getType(),_			null,_			false)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			inputStream.getType(),_			null,_			false)___		final OutputTag<L> outputTag = new OutputTag<L>(UUID.randomUUID().toString(), leftTypeInfo)___		final SingleOutputStreamOperator<R> mainStream = CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternSelectFunction),_			rightTypeInfo,_			outputTag,_			clean(patternTimeoutFunction),_			lateDataOutputTag)___		final DataStream<L> timedOutStream = mainStream.getSideOutput(outputTag)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return mainStream.connect(timedOutStream).map(new CoMapTimeout<>()).returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,deprecated,use,link,pattern,stream,select,output,tag,pattern,timeout,function,pattern,select,function,that,returns,timed,out,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,type,extractor,input,stream,get,type,null,false,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,0,1,type,extractor,input,stream,get,type,null,false,final,output,tag,l,output,tag,new,output,tag,l,uuid,random,uuid,to,string,left,type,info,final,single,output,stream,operator,r,main,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,right,type,info,output,tag,clean,pattern,timeout,function,late,data,output,tag,final,data,stream,l,timed,out,stream,main,stream,get,side,output,output,tag,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,main,stream,connect,timed,out,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> process(final PatternProcessFunction<T, R> patternProcessFunction);1545121742;Applies a process function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternProcessFunction} is called. In order to process timed out partial matches as well one can_use {@link TimedOutPartialMatchHandler} as additional interface.__@param patternProcessFunction The pattern process function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern process_function.;public <R> SingleOutputStreamOperator<R> process(final PatternProcessFunction<T, R> patternProcessFunction) {_		_		__		final TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternProcessFunction,_			PatternSelectFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			inputStream.getType(),_			null,_			false)___		return process(patternProcessFunction, returnType)__	};applies,a,process,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,process,function,is,called,in,order,to,process,timed,out,partial,matches,as,well,one,can,use,link,timed,out,partial,match,handler,as,additional,interface,param,pattern,process,function,the,pattern,process,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,process,function;public,r,single,output,stream,operator,r,process,final,pattern,process,function,t,r,pattern,process,function,final,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,process,function,pattern,select,function,class,0,1,type,extractor,input,stream,get,type,null,false,return,process,pattern,process,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> process(final PatternProcessFunction<T, R> patternProcessFunction);1545210639;Applies a process function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternProcessFunction} is called. In order to process timed out partial matches as well one can_use {@link TimedOutPartialMatchHandler} as additional interface.__@param patternProcessFunction The pattern process function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern process_function.;public <R> SingleOutputStreamOperator<R> process(final PatternProcessFunction<T, R> patternProcessFunction) {_		final TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternProcessFunction,_			PatternProcessFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			builder.getInputType(),_			null,_			false)___		return process(patternProcessFunction, returnType)__	};applies,a,process,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,process,function,is,called,in,order,to,process,timed,out,partial,matches,as,well,one,can,use,link,timed,out,partial,match,handler,as,additional,interface,param,pattern,process,function,the,pattern,process,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,process,function;public,r,single,output,stream,operator,r,process,final,pattern,process,function,t,r,pattern,process,function,final,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,process,function,pattern,process,function,class,0,1,type,extractor,builder,get,input,type,null,false,return,process,pattern,process,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select( 			final PatternSelectFunction<T, R> patternSelectFunction, 			final TypeInformation<R> outTypeInfo);1545121742;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(_			final PatternSelectFunction<T, R> patternSelectFunction,_			final TypeInformation<R> outTypeInfo) {__		final PatternProcessFunction<T, R> processFunction =_			fromSelect(clean(patternSelectFunction)).build()___		return process(processFunction, outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,final,type,information,r,out,type,info,final,pattern,process,function,t,r,process,function,from,select,clean,pattern,select,function,build,return,process,process,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select( 			final PatternSelectFunction<T, R> patternSelectFunction, 			final TypeInformation<R> outTypeInfo);1545210639;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(_			final PatternSelectFunction<T, R> patternSelectFunction,_			final TypeInformation<R> outTypeInfo) {__		final PatternProcessFunction<T, R> processFunction =_			fromSelect(builder.clean(patternSelectFunction)).build()___		return process(processFunction, outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,final,type,information,r,out,type,info,final,pattern,process,function,t,r,process,function,from,select,builder,clean,pattern,select,function,build,return,process,process,function,out,type,info
PatternStream -> public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1452762263;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			false,_			false,_			inputType,_			null,_			false)___		return patternStream.map(_			new PatternSelectMapper<T, R>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction)))_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,data,stream,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,false,false,input,type,null,false,return,pattern,stream,map,new,pattern,select,mapper,t,r,pattern,stream,get,execution,environment,clean,pattern,select,function,returns,out,type,info
PatternStream -> public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1459342527;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputType,_			null,_			false)___		return patternStream.map(_			new PatternSelectMapper<T, R>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction)))_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,data,stream,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,type,null,false,return,pattern,stream,map,new,pattern,select,mapper,t,r,pattern,stream,get,execution,environment,clean,pattern,select,function,returns,out,type,info
PatternStream -> public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1460977809;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputType,_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,data,stream,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1464255256;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,data,stream,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 			final OutputTag<L> timedOutPartialMatchesTag, 			final PatternTimeoutFunction<T, L> patternTimeoutFunction, 			final PatternSelectFunction<T, R> patternSelectFunction);1545121742;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timedOutPartialMatchesTag {@link OutputTag} that identifies side output with timed out patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_			final OutputTag<L> timedOutPartialMatchesTag,_			final PatternTimeoutFunction<T, L> patternTimeoutFunction,_			final PatternSelectFunction<T, R> patternSelectFunction) {__		final TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			inputStream.getType(),_			null,_			false)___		return select(_			timedOutPartialMatchesTag,_			patternTimeoutFunction,_			rightTypeInfo,_			patternSelectFunction)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timed,out,partial,matches,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timed,out,partial,matches,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,final,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,type,extractor,input,stream,get,type,null,false,return,select,timed,out,partial,matches,tag,pattern,timeout,function,right,type,info,pattern,select,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 			final OutputTag<L> timedOutPartialMatchesTag, 			final PatternTimeoutFunction<T, L> patternTimeoutFunction, 			final PatternSelectFunction<T, R> patternSelectFunction);1545210639;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timedOutPartialMatchesTag {@link OutputTag} that identifies side output with timed out patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_			final OutputTag<L> timedOutPartialMatchesTag,_			final PatternTimeoutFunction<T, L> patternTimeoutFunction,_			final PatternSelectFunction<T, R> patternSelectFunction) {__		final TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			builder.getInputType(),_			null,_			false)___		return select(_			timedOutPartialMatchesTag,_			patternTimeoutFunction,_			rightTypeInfo,_			patternSelectFunction)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timed,out,partial,matches,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timed,out,partial,matches,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,final,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,type,extractor,builder,get,input,type,null,false,return,select,timed,out,partial,matches,tag,pattern,timeout,function,right,type,info,pattern,select,function
PatternStream -> public PatternStream<T> sideOutputLateData(OutputTag<T> outputTag);1491233942;Send late arriving data to the side output identified by the given {@link OutputTag}. The_CEP library assumes correctness of the watermark, so an element is considered late if its_timestamp is smaller than the last received watermark.;public PatternStream<T> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		Preconditions.checkArgument(lateDataOutputTag == null,_				"The late side output tag has already been initialized to " + lateDataOutputTag + ".")__		Preconditions.checkArgument(patternStream == null,_				"The late side output tag has to be set before calling select() or flatSelect().")___		this.lateDataOutputTag = inputStream.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,the,cep,library,assumes,correctness,of,the,watermark,so,an,element,is,considered,late,if,its,timestamp,is,smaller,than,the,last,received,watermark;public,pattern,stream,t,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,preconditions,check,argument,late,data,output,tag,null,the,late,side,output,tag,has,already,been,initialized,to,late,data,output,tag,preconditions,check,argument,pattern,stream,null,the,late,side,output,tag,has,to,be,set,before,calling,select,or,flat,select,this,late,data,output,tag,input,stream,get,execution,environment,clean,output,tag,return,this
PatternStream -> public PatternStream<T> sideOutputLateData(OutputTag<T> outputTag);1493985307;Send late arriving data to the side output identified by the given {@link OutputTag}. The_CEP library assumes correctness of the watermark, so an element is considered late if its_timestamp is smaller than the last received watermark.;public PatternStream<T> sideOutputLateData(OutputTag<T> outputTag) {_		Preconditions.checkNotNull(outputTag, "Side output tag must not be null.")__		Preconditions.checkArgument(lateDataOutputTag == null,_				"The late side output tag has already been initialized to " + lateDataOutputTag + ".")__		Preconditions.checkArgument(patternStream == null,_				"The late side output tag has to be set before calling select() or flatSelect().")___		this.lateDataOutputTag = inputStream.getExecutionEnvironment().clean(outputTag)__		return this__	};send,late,arriving,data,to,the,side,output,identified,by,the,given,link,output,tag,the,cep,library,assumes,correctness,of,the,watermark,so,an,element,is,considered,late,if,its,timestamp,is,smaller,than,the,last,received,watermark;public,pattern,stream,t,side,output,late,data,output,tag,t,output,tag,preconditions,check,not,null,output,tag,side,output,tag,must,not,be,null,preconditions,check,argument,late,data,output,tag,null,the,late,side,output,tag,has,already,been,initialized,to,late,data,output,tag,preconditions,check,argument,pattern,stream,null,the,late,side,output,tag,has,to,be,set,before,calling,select,or,flat,select,this,late,data,output,tag,input,stream,get,execution,environment,clean,output,tag,return,this
PatternStream -> public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1460977809;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		return patternStream.map(_			new PatternSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction)))_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,data,stream,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,return,pattern,stream,map,new,pattern,select,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,returns,out,type,info
PatternStream -> public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1464255256;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> DataStream<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		DataStream<Map<String, T>> patternStream = CEPOperatorUtils.createPatternStream(inputStream, pattern)___		return patternStream.map(_			new PatternSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction)))_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,data,stream,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,data,stream,map,string,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,return,pattern,stream,map,new,pattern,select,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1490292075;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1491233942;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1493985307;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1494597698;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1495657626;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1496315845;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1501246266;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1502445388;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1503555538;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1527694335;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1528109383;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,type,extractor,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1545121742;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		final TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			inputStream.getType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,final,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,type,extractor,input,stream,get,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction);1545210639;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction) {_		_		__		final TypeInformation<R> returnType = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			builder.getInputType(),_			null,_			false)___		return select(patternSelectFunction, returnType)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,final,type,information,r,return,type,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,type,extractor,builder,get,input,type,null,false,return,select,pattern,select,function,return,type
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 		final OutputTag<L> timeoutOutputTag, 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1502445388;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timeouted patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_		final OutputTag<L> timeoutOutputTag,_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		return flatSelect(timeoutOutputTag, patternFlatTimeoutFunction, rightTypeInfo, patternFlatSelectFunction)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timeouted,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timeout,output,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,return,flat,select,timeout,output,tag,pattern,flat,timeout,function,right,type,info,pattern,flat,select,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 		final OutputTag<L> timeoutOutputTag, 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1503555538;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_		final OutputTag<L> timeoutOutputTag,_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		return flatSelect(timeoutOutputTag, patternFlatTimeoutFunction, rightTypeInfo, patternFlatSelectFunction)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timeout,output,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,return,flat,select,timeout,output,tag,pattern,flat,timeout,function,right,type,info,pattern,flat,select,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 		final OutputTag<L> timeoutOutputTag, 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1527694335;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_		final OutputTag<L> timeoutOutputTag,_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		return flatSelect(timeoutOutputTag, patternFlatTimeoutFunction, rightTypeInfo, patternFlatSelectFunction)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timeout,output,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,return,flat,select,timeout,output,tag,pattern,flat,timeout,function,right,type,info,pattern,flat,select,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 		final OutputTag<L> timeoutOutputTag, 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1528109383;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_		final OutputTag<L> timeoutOutputTag,_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		return flatSelect(timeoutOutputTag, patternFlatTimeoutFunction, rightTypeInfo, patternFlatSelectFunction)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timeout,output,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,1,0,input,stream,get,type,null,false,return,flat,select,timeout,output,tag,pattern,flat,timeout,function,right,type,info,pattern,flat,select,function
PatternStream -> public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo);1460977809;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Typ of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo) {_		return patternStream.flatMap(_			new PatternFlatSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction)_			)).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,typ,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,data,stream,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,return,pattern,stream,flat,map,new,pattern,flat,select,mapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,returns,out,type,info
PatternStream -> public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo);1464255256;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo) {_		DataStream<Map<String, T>> patternStream = CEPOperatorUtils.createPatternStream(inputStream, pattern)___		return patternStream.flatMap(_			new PatternFlatSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction)_			)).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,data,stream,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,data,stream,map,string,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,return,pattern,stream,flat,map,new,pattern,flat,select,mapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 		final OutputTag<L> timeoutOutputTag, 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final TypeInformation<R> outTypeInfo, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1502445388;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timeouted patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param outTypeInfo Explicit specification of output type._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_		final OutputTag<L> timeoutOutputTag,_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final TypeInformation<R> outTypeInfo,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		return CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			outTypeInfo,_			timeoutOutputTag,_			clean(patternFlatTimeoutFunction))__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timeouted,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,out,type,info,explicit,specification,of,output,type,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timeout,output,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,type,information,r,out,type,info,final,pattern,flat,select,function,t,r,pattern,flat,select,function,return,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,out,type,info,timeout,output,tag,clean,pattern,flat,timeout,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 		final OutputTag<L> timeoutOutputTag, 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final TypeInformation<R> outTypeInfo, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1503555538;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param outTypeInfo Explicit specification of output type._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_		final OutputTag<L> timeoutOutputTag,_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final TypeInformation<R> outTypeInfo,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		return CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			outTypeInfo,_			timeoutOutputTag,_			clean(patternFlatTimeoutFunction))__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,out,type,info,explicit,specification,of,output,type,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timeout,output,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,type,information,r,out,type,info,final,pattern,flat,select,function,t,r,pattern,flat,select,function,return,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,out,type,info,timeout,output,tag,clean,pattern,flat,timeout,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 		final OutputTag<L> timeoutOutputTag, 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final TypeInformation<R> outTypeInfo, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1527694335;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param outTypeInfo Explicit specification of output type._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_		final OutputTag<L> timeoutOutputTag,_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final TypeInformation<R> outTypeInfo,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		return CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			outTypeInfo,_			timeoutOutputTag,_			clean(patternFlatTimeoutFunction),_			lateDataOutputTag)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,out,type,info,explicit,specification,of,output,type,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timeout,output,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,type,information,r,out,type,info,final,pattern,flat,select,function,t,r,pattern,flat,select,function,return,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,out,type,info,timeout,output,tag,clean,pattern,flat,timeout,function,late,data,output,tag
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 		final OutputTag<L> timeoutOutputTag, 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final TypeInformation<R> outTypeInfo, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1528109383;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param outTypeInfo Explicit specification of output type._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_		final OutputTag<L> timeoutOutputTag,_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final TypeInformation<R> outTypeInfo,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		return CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			outTypeInfo,_			timeoutOutputTag,_			clean(patternFlatTimeoutFunction),_			lateDataOutputTag)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,out,type,info,explicit,specification,of,output,type,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timeout,output,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,type,information,r,out,type,info,final,pattern,flat,select,function,t,r,pattern,flat,select,function,return,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,out,type,info,timeout,output,tag,clean,pattern,flat,timeout,function,late,data,output,tag
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 			final PatternTimeoutFunction<T, L> patternTimeoutFunction, 			final PatternSelectFunction<T, R> patternSelectFunction);1545121742;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements__@deprecated Use {@link PatternStream#select(OutputTag, PatternTimeoutFunction, PatternSelectFunction)}_that returns timed out events as a side-output__@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_			final PatternTimeoutFunction<T, L> patternTimeoutFunction,_			final PatternSelectFunction<T, R> patternSelectFunction) {__		final TypeInformation<R> mainTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			inputStream.getType(),_			null,_			false)___		final TypeInformation<L> timeoutTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			inputStream.getType(),_			null,_			false)___		final TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(timeoutTypeInfo, mainTypeInfo)___		final OutputTag<L> outputTag = new OutputTag<>(UUID.randomUUID().toString(), timeoutTypeInfo)___		final PatternProcessFunction<T, R> processFunction =_				fromSelect(clean(patternSelectFunction))_						.withTimeoutHandler(outputTag, clean(patternTimeoutFunction))_						.build()___		final SingleOutputStreamOperator<R> mainStream = process(processFunction, mainTypeInfo)__		final DataStream<L> timedOutStream = mainStream.getSideOutput(outputTag)___		return mainStream_				.connect(timedOutStream)_				.map(new CoMapTimeout<>())_				.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,deprecated,use,link,pattern,stream,select,output,tag,pattern,timeout,function,pattern,select,function,that,returns,timed,out,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,final,type,information,r,main,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,type,extractor,input,stream,get,type,null,false,final,type,information,l,timeout,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,0,1,type,extractor,input,stream,get,type,null,false,final,type,information,either,l,r,out,type,info,new,either,type,info,timeout,type,info,main,type,info,final,output,tag,l,output,tag,new,output,tag,uuid,random,uuid,to,string,timeout,type,info,final,pattern,process,function,t,r,process,function,from,select,clean,pattern,select,function,with,timeout,handler,output,tag,clean,pattern,timeout,function,build,final,single,output,stream,operator,r,main,stream,process,process,function,main,type,info,final,data,stream,l,timed,out,stream,main,stream,get,side,output,output,tag,return,main,stream,connect,timed,out,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 			final PatternTimeoutFunction<T, L> patternTimeoutFunction, 			final PatternSelectFunction<T, R> patternSelectFunction);1545210639;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements__@deprecated Use {@link PatternStream#select(OutputTag, PatternTimeoutFunction, PatternSelectFunction)}_that returns timed out events as a side-output__@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_			final PatternTimeoutFunction<T, L> patternTimeoutFunction,_			final PatternSelectFunction<T, R> patternSelectFunction) {__		final TypeInformation<R> mainTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			builder.getInputType(),_			null,_			false)___		final TypeInformation<L> timeoutTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			0,_			1,_			TypeExtractor.NO_INDEX,_			builder.getInputType(),_			null,_			false)___		final TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(timeoutTypeInfo, mainTypeInfo)___		final OutputTag<L> outputTag = new OutputTag<>(UUID.randomUUID().toString(), timeoutTypeInfo)___		final PatternProcessFunction<T, R> processFunction =_			fromSelect(builder.clean(patternSelectFunction))_				.withTimeoutHandler(outputTag, builder.clean(patternTimeoutFunction))_				.build()___		final SingleOutputStreamOperator<R> mainStream = process(processFunction, mainTypeInfo)__		final DataStream<L> timedOutStream = mainStream.getSideOutput(outputTag)___		return mainStream_			.connect(timedOutStream)_			.map(new CoMapTimeout<>())_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,deprecated,use,link,pattern,stream,select,output,tag,pattern,timeout,function,pattern,select,function,that,returns,timed,out,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,final,type,information,r,main,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,type,extractor,builder,get,input,type,null,false,final,type,information,l,timeout,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,0,1,type,extractor,builder,get,input,type,null,false,final,type,information,either,l,r,out,type,info,new,either,type,info,timeout,type,info,main,type,info,final,output,tag,l,output,tag,new,output,tag,uuid,random,uuid,to,string,timeout,type,info,final,pattern,process,function,t,r,process,function,from,select,builder,clean,pattern,select,function,with,timeout,handler,output,tag,builder,clean,pattern,timeout,function,build,final,single,output,stream,operator,r,main,stream,process,process,function,main,type,info,final,data,stream,l,timed,out,stream,main,stream,get,side,output,output,tag,return,main,stream,connect,timed,out,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1490292075;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, T>, Long>, Map<String, T>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.map(_			new PatternSelectTimeoutMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,single,output,stream,operator,either,tuple2,map,string,t,long,map,string,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,1,1,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,map,new,pattern,select,timeout,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,pattern,stream,get,execution,environment,clean,pattern,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1491233942;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, T>, Long>, Map<String, T>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.map(_			new PatternSelectTimeoutMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,single,output,stream,operator,either,tuple2,map,string,t,long,map,string,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,1,1,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,map,new,pattern,select,timeout,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,pattern,stream,get,execution,environment,clean,pattern,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1493985307;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, List<T>>, Long>, Map<String, List<T>>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.map(_			new PatternSelectTimeoutMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,single,output,stream,operator,either,tuple2,map,string,list,t,long,map,string,list,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,1,1,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,map,new,pattern,select,timeout,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,pattern,stream,get,execution,environment,clean,pattern,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1494597698;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, List<T>>, Long>, Map<String, List<T>>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.map(_			new PatternSelectTimeoutMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,single,output,stream,operator,either,tuple2,map,string,list,t,long,map,string,list,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,1,1,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,map,new,pattern,select,timeout,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,pattern,stream,get,execution,environment,clean,pattern,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1495657626;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, List<T>>, Long>, Map<String, List<T>>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.map(_			new PatternSelectTimeoutMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,single,output,stream,operator,either,tuple2,map,string,list,t,long,map,string,list,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,1,1,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,1,1,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,map,new,pattern,select,timeout,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,pattern,stream,get,execution,environment,clean,pattern,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1496315845;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, List<T>>, Long>, Map<String, List<T>>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.map(_			new PatternSelectTimeoutMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,single,output,stream,operator,either,tuple2,map,string,list,t,long,map,string,list,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,map,new,pattern,select,timeout,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,pattern,stream,get,execution,environment,clean,pattern,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> select( 		final PatternTimeoutFunction<T, L> patternTimeoutFunction, 		final PatternSelectFunction<T, R> patternSelectFunction);1501246266;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements or the resulting timeout_elements wrapped in an {@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> select(_		final PatternTimeoutFunction<T, L> patternTimeoutFunction,_		final PatternSelectFunction<T, R> patternSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, List<T>>, Long>, Map<String, List<T>>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern, comparator)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternTimeoutFunction,_			PatternTimeoutFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternSelectFunction,_			PatternSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{},_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.map(_			new PatternSelectTimeoutMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,or,the,resulting,timeout,elements,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,select,final,pattern,timeout,function,t,l,pattern,timeout,function,final,pattern,select,function,t,r,pattern,select,function,single,output,stream,operator,either,tuple2,map,string,list,t,long,map,string,list,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,timeout,function,pattern,timeout,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,select,function,pattern,select,function,class,0,1,new,int,0,1,0,new,int,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,map,new,pattern,select,timeout,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,pattern,stream,get,execution,environment,clean,pattern,timeout,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect( 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, 			final TypeInformation<R> outTypeInfo);1502445388;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction,_			final TypeInformation<R> outTypeInfo) {_		return CEPOperatorUtils.createPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,type,information,r,out,type,info,return,cepoperator,utils,create,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect( 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, 			final TypeInformation<R> outTypeInfo);1503555538;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction,_			final TypeInformation<R> outTypeInfo) {_		return CEPOperatorUtils.createPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,type,information,r,out,type,info,return,cepoperator,utils,create,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect( 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, 			final TypeInformation<R> outTypeInfo);1527694335;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction,_			final TypeInformation<R> outTypeInfo) {_		return CEPOperatorUtils.createPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			outTypeInfo,_			lateDataOutputTag)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,type,information,r,out,type,info,return,cepoperator,utils,create,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,out,type,info,late,data,output,tag
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect( 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, 			final TypeInformation<R> outTypeInfo);1528109383;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction,_			final TypeInformation<R> outTypeInfo) {_		return CEPOperatorUtils.createPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			outTypeInfo,_			lateDataOutputTag)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,type,information,r,out,type,info,return,cepoperator,utils,create,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,out,type,info,late,data,output,tag
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect( 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, 			final TypeInformation<R> outTypeInfo);1545121742;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction,_			final TypeInformation<R> outTypeInfo) {__		final PatternProcessFunction<T, R> processFunction =_			fromFlatSelect(clean(patternFlatSelectFunction)).build()___		return process(processFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,type,information,r,out,type,info,final,pattern,process,function,t,r,process,function,from,flat,select,clean,pattern,flat,select,function,build,return,process,process,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect( 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, 			final TypeInformation<R> outTypeInfo);1545210639;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction,_			final TypeInformation<R> outTypeInfo) {__		final PatternProcessFunction<T, R> processFunction =_			fromFlatSelect(builder.clean(patternFlatSelectFunction))_				.build()___		return process(processFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,type,information,r,out,type,info,final,pattern,process,function,t,r,process,function,from,flat,select,builder,clean,pattern,flat,select,function,build,return,process,process,function,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 			final OutputTag<L> timedOutPartialMatchesTag, 			final PatternTimeoutFunction<T, L> patternTimeoutFunction, 			final TypeInformation<R> outTypeInfo, 			final PatternSelectFunction<T, R> patternSelectFunction);1545121742;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timedOutPartialMatchesTag {@link OutputTag} that identifies side output with timed out patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param outTypeInfo Explicit specification of output type._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_			final OutputTag<L> timedOutPartialMatchesTag,_			final PatternTimeoutFunction<T, L> patternTimeoutFunction,_			final TypeInformation<R> outTypeInfo,_			final PatternSelectFunction<T, R> patternSelectFunction) {__		final PatternProcessFunction<T, R> processFunction =_			fromSelect(clean(patternSelectFunction))_				.withTimeoutHandler(timedOutPartialMatchesTag, clean(patternTimeoutFunction))_				.build()___		return process(processFunction, outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timed,out,partial,matches,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,out,type,info,explicit,specification,of,output,type,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timed,out,partial,matches,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,type,information,r,out,type,info,final,pattern,select,function,t,r,pattern,select,function,final,pattern,process,function,t,r,process,function,from,select,clean,pattern,select,function,with,timeout,handler,timed,out,partial,matches,tag,clean,pattern,timeout,function,build,return,process,process,function,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 			final OutputTag<L> timedOutPartialMatchesTag, 			final PatternTimeoutFunction<T, L> patternTimeoutFunction, 			final TypeInformation<R> outTypeInfo, 			final PatternSelectFunction<T, R> patternSelectFunction);1545210639;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timedOutPartialMatchesTag {@link OutputTag} that identifies side output with timed out patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param outTypeInfo Explicit specification of output type._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_			final OutputTag<L> timedOutPartialMatchesTag,_			final PatternTimeoutFunction<T, L> patternTimeoutFunction,_			final TypeInformation<R> outTypeInfo,_			final PatternSelectFunction<T, R> patternSelectFunction) {__		final PatternProcessFunction<T, R> processFunction =_			fromSelect(builder.clean(patternSelectFunction))_				.withTimeoutHandler(timedOutPartialMatchesTag, builder.clean(patternTimeoutFunction))_				.build()___		return process(processFunction, outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timed,out,partial,matches,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,out,type,info,explicit,specification,of,output,type,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timed,out,partial,matches,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,type,information,r,out,type,info,final,pattern,select,function,t,r,pattern,select,function,final,pattern,process,function,t,r,process,function,from,select,builder,clean,pattern,select,function,with,timeout,handler,timed,out,partial,matches,tag,builder,clean,pattern,timeout,function,build,return,process,process,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo);1490292075;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, T>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		return patternStream.flatMap(_			new PatternFlatSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction)_			)).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,return,pattern,stream,flat,map,new,pattern,flat,select,mapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo);1491233942;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, T>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		return patternStream.flatMap(_			new PatternFlatSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction)_			)).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,return,pattern,stream,flat,map,new,pattern,flat,select,mapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo);1493985307;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, List<T>>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		return patternStream.flatMap(_			new PatternFlatSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction)_			)).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,list,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,return,pattern,stream,flat,map,new,pattern,flat,select,mapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo);1494597698;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, List<T>>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern)___		return patternStream.flatMap(_			new PatternFlatSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction)_			)).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,list,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,return,pattern,stream,flat,map,new,pattern,flat,select,mapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo);1495657626;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, List<T>>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern)___		return patternStream.flatMap(_			new PatternFlatSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction)_			)).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,list,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,return,pattern,stream,flat,map,new,pattern,flat,select,mapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo);1496315845;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, List<T>>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern)___		return patternStream.flatMap(_			new PatternFlatSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction)_			)).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,list,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,return,pattern,stream,flat,map,new,pattern,flat,select,mapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo);1501246266;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, List<T>>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern, comparator)___		return patternStream.flatMap(_			new PatternFlatSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction)_			)).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,list,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,comparator,return,pattern,stream,flat,map,new,pattern,flat,select,mapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1490292075;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events_@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, T>, Long>, Map<String, T>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.flatMap(_			new PatternFlatSelectTimeoutWrapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternFlatTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,single,output,stream,operator,either,tuple2,map,string,t,long,map,string,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,1,1,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,1,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,flat,map,new,pattern,flat,select,timeout,wrapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,pattern,stream,get,execution,environment,clean,pattern,flat,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1491233942;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events_@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, T>, Long>, Map<String, T>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.flatMap(_			new PatternFlatSelectTimeoutWrapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternFlatTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,single,output,stream,operator,either,tuple2,map,string,t,long,map,string,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,1,1,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,1,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,flat,map,new,pattern,flat,select,timeout,wrapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,pattern,stream,get,execution,environment,clean,pattern,flat,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1493985307;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events_@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, List<T>>, Long>, Map<String, List<T>>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.flatMap(_			new PatternFlatSelectTimeoutWrapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternFlatTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,single,output,stream,operator,either,tuple2,map,string,list,t,long,map,string,list,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,1,1,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,1,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,flat,map,new,pattern,flat,select,timeout,wrapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,pattern,stream,get,execution,environment,clean,pattern,flat,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1494597698;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events_@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, List<T>>, Long>, Map<String, List<T>>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.flatMap(_			new PatternFlatSelectTimeoutWrapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternFlatTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,single,output,stream,operator,either,tuple2,map,string,list,t,long,map,string,list,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,1,1,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,1,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,flat,map,new,pattern,flat,select,timeout,wrapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,pattern,stream,get,execution,environment,clean,pattern,flat,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1495657626;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events_@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, List<T>>, Long>, Map<String, List<T>>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			-1,_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.flatMap(_			new PatternFlatSelectTimeoutWrapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternFlatTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,single,output,stream,operator,either,tuple2,map,string,list,t,long,map,string,list,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,1,1,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,1,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,flat,map,new,pattern,flat,select,timeout,wrapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,pattern,stream,get,execution,environment,clean,pattern,flat,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1496315845;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events_@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, List<T>>, Long>, Map<String, List<T>>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{2, 0},_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.flatMap(_			new PatternFlatSelectTimeoutWrapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternFlatTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,single,output,stream,operator,either,tuple2,map,string,list,t,long,map,string,list,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,0,1,new,int,0,1,0,new,int,2,0,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,flat,map,new,pattern,flat,select,timeout,wrapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,pattern,stream,get,execution,environment,clean,pattern,flat,timeout,function,returns,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1501246266;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events_@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		SingleOutputStreamOperator<Either<Tuple2<Map<String, List<T>>, Long>, Map<String, List<T>>>> patternStream =_				CEPOperatorUtils.createTimeoutPatternStream(inputStream, pattern, comparator)___		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{2, 0},_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return patternStream.flatMap(_			new PatternFlatSelectTimeoutWrapper<>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction),_				patternStream.getExecutionEnvironment().clean(patternFlatTimeoutFunction)_			)_		).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,single,output,stream,operator,either,tuple2,map,string,list,t,long,map,string,list,t,pattern,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,0,1,new,int,0,1,0,new,int,2,0,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,pattern,stream,flat,map,new,pattern,flat,select,timeout,wrapper,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,pattern,stream,get,execution,environment,clean,pattern,flat,timeout,function,returns,out,type,info
PatternStream -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1490292075;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@param sideOutputTag The tag identifying a specific side output.;public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		Preconditions.checkNotNull(patternStream, "The operator has not been initialized. " +_				"To have the late element side output, you have to first define the main output using select() or flatSelect().")__		return patternStream.getSideOutput(sideOutputTag)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,param,side,output,tag,the,tag,identifying,a,specific,side,output;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,preconditions,check,not,null,pattern,stream,the,operator,has,not,been,initialized,to,have,the,late,element,side,output,you,have,to,first,define,the,main,output,using,select,or,flat,select,return,pattern,stream,get,side,output,side,output,tag
PatternStream -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1491233942;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@param sideOutputTag The tag identifying a specific side output.;public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		Preconditions.checkNotNull(patternStream, "The operator has not been initialized. " +_				"To have the late element side output, you have to first define the main output using select() or flatSelect().")__		return patternStream.getSideOutput(sideOutputTag)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,param,side,output,tag,the,tag,identifying,a,specific,side,output;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,preconditions,check,not,null,pattern,stream,the,operator,has,not,been,initialized,to,have,the,late,element,side,output,you,have,to,first,define,the,main,output,using,select,or,flat,select,return,pattern,stream,get,side,output,side,output,tag
PatternStream -> public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag);1493985307;Gets the {@link DataStream} that contains the elements that are emitted from an operation_into the side output with the given {@link OutputTag}.__@param sideOutputTag The tag identifying a specific side output.;public <X> DataStream<X> getSideOutput(OutputTag<X> sideOutputTag) {_		Preconditions.checkNotNull(patternStream, "The operator has not been initialized. " +_				"To have the late element side output, you have to first define the main output using select() or flatSelect().")__		return patternStream.getSideOutput(sideOutputTag)__	};gets,the,link,data,stream,that,contains,the,elements,that,are,emitted,from,an,operation,into,the,side,output,with,the,given,link,output,tag,param,side,output,tag,the,tag,identifying,a,specific,side,output;public,x,data,stream,x,get,side,output,output,tag,x,side,output,tag,preconditions,check,not,null,pattern,stream,the,operator,has,not,been,initialized,to,have,the,late,element,side,output,you,have,to,first,define,the,main,output,using,select,or,flat,select,return,pattern,stream,get,side,output,side,output,tag
PatternStream -> public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1452762263;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Typ of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			false,_			false,_			inputType,_			null,_			false)___		return patternStream.flatMap(_			new PatternFlatSelectMapper<T, R>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction)_			)).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,typ,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,data,stream,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,false,false,input,type,null,false,return,pattern,stream,flat,map,new,pattern,flat,select,mapper,t,r,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,returns,out,type,info
PatternStream -> public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1459342527;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Typ of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			0,_			inputType,_			null,_			false)___		return patternStream.flatMap(_			new PatternFlatSelectMapper<T, R>(_				patternStream.getExecutionEnvironment().clean(patternFlatSelectFunction)_			)).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,typ,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,data,stream,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,0,input,type,null,false,return,pattern,stream,flat,map,new,pattern,flat,select,mapper,t,r,pattern,stream,get,execution,environment,clean,pattern,flat,select,function,returns,out,type,info
PatternStream -> public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1460977809;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Typ of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			0,_			inputType,_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,typ,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,data,stream,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,0,input,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1464255256;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> DataStream<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			0,_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,data,stream,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 			final OutputTag<L> timeoutOutputTag, 			final PatternTimeoutFunction<T, L> patternTimeoutFunction, 			final TypeInformation<R> outTypeInfo, 			final PatternSelectFunction<T, R> patternSelectFunction);1502445388;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timeouted patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param outTypeInfo Explicit specification of output type._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_			final OutputTag<L> timeoutOutputTag,_			final PatternTimeoutFunction<T, L> patternTimeoutFunction,_			final TypeInformation<R> outTypeInfo,_			final PatternSelectFunction<T, R> patternSelectFunction) {_		return CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternSelectFunction),_			outTypeInfo,_			timeoutOutputTag,_			clean(patternTimeoutFunction))__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timeouted,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,out,type,info,explicit,specification,of,output,type,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timeout,output,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,type,information,r,out,type,info,final,pattern,select,function,t,r,pattern,select,function,return,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,out,type,info,timeout,output,tag,clean,pattern,timeout,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 			final OutputTag<L> timeoutOutputTag, 			final PatternTimeoutFunction<T, L> patternTimeoutFunction, 			final TypeInformation<R> outTypeInfo, 			final PatternSelectFunction<T, R> patternSelectFunction);1503555538;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param outTypeInfo Explicit specification of output type._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_			final OutputTag<L> timeoutOutputTag,_			final PatternTimeoutFunction<T, L> patternTimeoutFunction,_			final TypeInformation<R> outTypeInfo,_			final PatternSelectFunction<T, R> patternSelectFunction) {_		return CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternSelectFunction),_			outTypeInfo,_			timeoutOutputTag,_			clean(patternTimeoutFunction))__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,out,type,info,explicit,specification,of,output,type,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timeout,output,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,type,information,r,out,type,info,final,pattern,select,function,t,r,pattern,select,function,return,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,out,type,info,timeout,output,tag,clean,pattern,timeout,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 			final OutputTag<L> timeoutOutputTag, 			final PatternTimeoutFunction<T, L> patternTimeoutFunction, 			final TypeInformation<R> outTypeInfo, 			final PatternSelectFunction<T, R> patternSelectFunction);1527694335;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param outTypeInfo Explicit specification of output type._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_			final OutputTag<L> timeoutOutputTag,_			final PatternTimeoutFunction<T, L> patternTimeoutFunction,_			final TypeInformation<R> outTypeInfo,_			final PatternSelectFunction<T, R> patternSelectFunction) {_		return CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternSelectFunction),_			outTypeInfo,_			timeoutOutputTag,_			clean(patternTimeoutFunction),_			lateDataOutputTag)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,out,type,info,explicit,specification,of,output,type,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timeout,output,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,type,information,r,out,type,info,final,pattern,select,function,t,r,pattern,select,function,return,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,out,type,info,timeout,output,tag,clean,pattern,timeout,function,late,data,output,tag
PatternStream -> public <L, R> SingleOutputStreamOperator<R> select( 			final OutputTag<L> timeoutOutputTag, 			final PatternTimeoutFunction<T, L> patternTimeoutFunction, 			final TypeInformation<R> outTypeInfo, 			final PatternSelectFunction<T, R> patternSelectFunction);1528109383;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timeoutOutputTag {@link OutputTag} that identifies side output with timed out patterns_@param patternTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param outTypeInfo Explicit specification of output type._@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> select(_			final OutputTag<L> timeoutOutputTag,_			final PatternTimeoutFunction<T, L> patternTimeoutFunction,_			final TypeInformation<R> outTypeInfo,_			final PatternSelectFunction<T, R> patternSelectFunction) {_		return CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternSelectFunction),_			outTypeInfo,_			timeoutOutputTag,_			clean(patternTimeoutFunction),_			lateDataOutputTag)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timeout,output,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,out,type,info,explicit,specification,of,output,type,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,select,final,output,tag,l,timeout,output,tag,final,pattern,timeout,function,t,l,pattern,timeout,function,final,type,information,r,out,type,info,final,pattern,select,function,t,r,pattern,select,function,return,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,out,type,info,timeout,output,tag,clean,pattern,timeout,function,late,data,output,tag
PatternStream -> private  <F> F clean(F f);1502445388;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;private  <F> F clean(F f) {_		return inputStream.getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;private,f,f,clean,f,f,return,input,stream,get,execution,environment,clean,f
PatternStream -> private  <F> F clean(F f);1503555538;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;private  <F> F clean(F f) {_		return inputStream.getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;private,f,f,clean,f,f,return,input,stream,get,execution,environment,clean,f
PatternStream -> private  <F> F clean(F f);1527694335;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;private  <F> F clean(F f) {_		return inputStream.getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;private,f,f,clean,f,f,return,input,stream,get,execution,environment,clean,f
PatternStream -> private  <F> F clean(F f);1528109383;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;private  <F> F clean(F f) {_		return inputStream.getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;private,f,f,clean,f,f,return,input,stream,get,execution,environment,clean,f
PatternStream -> private  <F> F clean(F f);1545121742;Invokes the {@link org.apache.flink.api.java.ClosureCleaner}_on the given function if closure cleaning is enabled in the {@link ExecutionConfig}.__@return The cleaned Function;private  <F> F clean(F f) {_		return inputStream.getExecutionEnvironment().clean(f)__	};invokes,the,link,org,apache,flink,api,java,closure,cleaner,on,the,given,function,if,closure,cleaning,is,enabled,in,the,link,execution,config,return,the,cleaned,function;private,f,f,clean,f,f,return,input,stream,get,execution,environment,clean,f
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 			final OutputTag<L> timedOutPartialMatchesTag, 			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 			final TypeInformation<R> outTypeInfo, 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1545121742;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timedOutPartialMatchesTag {@link OutputTag} that identifies side output with timed out patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param outTypeInfo Explicit specification of output type._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_			final OutputTag<L> timedOutPartialMatchesTag,_			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_			final TypeInformation<R> outTypeInfo,_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		final PatternProcessFunction<T, R> processFunction =_			fromFlatSelect(clean(patternFlatSelectFunction))_				.withTimeoutHandler(timedOutPartialMatchesTag, clean(patternFlatTimeoutFunction))_				.build()___		return process(processFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timed,out,partial,matches,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,out,type,info,explicit,specification,of,output,type,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timed,out,partial,matches,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,type,information,r,out,type,info,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,pattern,process,function,t,r,process,function,from,flat,select,clean,pattern,flat,select,function,with,timeout,handler,timed,out,partial,matches,tag,clean,pattern,flat,timeout,function,build,return,process,process,function,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 			final OutputTag<L> timedOutPartialMatchesTag, 			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 			final TypeInformation<R> outTypeInfo, 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1545210639;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timedOutPartialMatchesTag {@link OutputTag} that identifies side output with timed out patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param outTypeInfo Explicit specification of output type._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_			final OutputTag<L> timedOutPartialMatchesTag,_			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_			final TypeInformation<R> outTypeInfo,_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		final PatternProcessFunction<T, R> processFunction =_			fromFlatSelect(builder.clean(patternFlatSelectFunction))_				.withTimeoutHandler(timedOutPartialMatchesTag, builder.clean(patternFlatTimeoutFunction))_				.build()___		return process(processFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timed,out,partial,matches,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,out,type,info,explicit,specification,of,output,type,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timed,out,partial,matches,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,type,information,r,out,type,info,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,pattern,process,function,t,r,process,function,from,flat,select,builder,clean,pattern,flat,select,function,with,timeout,handler,timed,out,partial,matches,tag,builder,clean,pattern,flat,timeout,function,build,return,process,process,function,out,type,info
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 			final OutputTag<L> timedOutPartialMatchesTag, 			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1545121742;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timedOutPartialMatchesTag {@link OutputTag} that identifies side output with timed out patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_			final OutputTag<L> timedOutPartialMatchesTag,_			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		final TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		return flatSelect(timedOutPartialMatchesTag,_			patternFlatTimeoutFunction,_			rightTypeInfo,_			patternFlatSelectFunction)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timed,out,partial,matches,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timed,out,partial,matches,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,1,0,input,stream,get,type,null,false,return,flat,select,timed,out,partial,matches,tag,pattern,flat,timeout,function,right,type,info,pattern,flat,select,function
PatternStream -> public <L, R> SingleOutputStreamOperator<R> flatSelect( 			final OutputTag<L> timedOutPartialMatchesTag, 			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1545210639;Applies a flat select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternFlatSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The pattern_timeout function can produce exactly one resulting element.__<p>You can get the stream of timed-out data resulting from the_{@link SingleOutputStreamOperator#getSideOutput(OutputTag)} on the_{@link SingleOutputStreamOperator} resulting from the select operation_with the same {@link OutputTag}.__@param timedOutPartialMatchesTag {@link OutputTag} that identifies side output with timed out patterns_@param patternFlatTimeoutFunction The pattern timeout function which is called for each partial_pattern sequence which has timed out._@param patternFlatSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <L> Type of the resulting timeout elements_@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements with the resulting timeout_elements in a side output.;public <L, R> SingleOutputStreamOperator<R> flatSelect(_			final OutputTag<L> timedOutPartialMatchesTag,_			final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_			final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		final TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{1, 0},_			builder.getInputType(),_			null,_			false)___		return flatSelect(_			timedOutPartialMatchesTag,_			patternFlatTimeoutFunction,_			rightTypeInfo,_			patternFlatSelectFunction)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,exactly,one,resulting,element,p,you,can,get,the,stream,of,timed,out,data,resulting,from,the,link,single,output,stream,operator,get,side,output,output,tag,on,the,link,single,output,stream,operator,resulting,from,the,select,operation,with,the,same,link,output,tag,param,timed,out,partial,matches,tag,link,output,tag,that,identifies,side,output,with,timed,out,patterns,param,pattern,flat,timeout,function,the,pattern,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,elements,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,with,the,resulting,timeout,elements,in,a,side,output;public,l,r,single,output,stream,operator,r,flat,select,final,output,tag,l,timed,out,partial,matches,tag,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,1,0,builder,get,input,type,null,false,return,flat,select,timed,out,partial,matches,tag,pattern,flat,timeout,function,right,type,info,pattern,flat,select,function
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1502445388;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events__@deprecated Use {@link PatternStream#flatSelect(OutputTag, PatternFlatTimeoutFunction, PatternFlatSelectFunction)}_that returns timeouted events as a side-output__@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{2, 0},_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		final OutputTag<L> outputTag = new OutputTag<L>("dummy-timeouted", leftTypeInfo)___		final SingleOutputStreamOperator<R> mainStream = CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			rightTypeInfo,_			outputTag,_			clean(patternFlatTimeoutFunction))___		final DataStream<L> timeoutedStream = mainStream.getSideOutput(outputTag)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return mainStream.connect(timeoutedStream).map(new CoMapTimeout<>()).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,deprecated,use,link,pattern,stream,flat,select,output,tag,pattern,flat,timeout,function,pattern,flat,select,function,that,returns,timeouted,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,0,1,new,int,0,1,0,new,int,2,0,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,final,output,tag,l,output,tag,new,output,tag,l,dummy,timeouted,left,type,info,final,single,output,stream,operator,r,main,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,right,type,info,output,tag,clean,pattern,flat,timeout,function,final,data,stream,l,timeouted,stream,main,stream,get,side,output,output,tag,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,main,stream,connect,timeouted,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1503555538;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events__@deprecated Use {@link PatternStream#flatSelect(OutputTag, PatternFlatTimeoutFunction, PatternFlatSelectFunction)}_that returns timed out events as a side-output__@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{2, 0},_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		final OutputTag<L> outputTag = new OutputTag<L>(UUID.randomUUID().toString(), leftTypeInfo)___		final SingleOutputStreamOperator<R> mainStream = CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			rightTypeInfo,_			outputTag,_			clean(patternFlatTimeoutFunction))___		final DataStream<L> timedOutStream = mainStream.getSideOutput(outputTag)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return mainStream.connect(timedOutStream).map(new CoMapTimeout<>()).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,deprecated,use,link,pattern,stream,flat,select,output,tag,pattern,flat,timeout,function,pattern,flat,select,function,that,returns,timed,out,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,0,1,new,int,0,1,0,new,int,2,0,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,final,output,tag,l,output,tag,new,output,tag,l,uuid,random,uuid,to,string,left,type,info,final,single,output,stream,operator,r,main,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,right,type,info,output,tag,clean,pattern,flat,timeout,function,final,data,stream,l,timed,out,stream,main,stream,get,side,output,output,tag,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,main,stream,connect,timed,out,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1527694335;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events__@deprecated Use {@link PatternStream#flatSelect(OutputTag, PatternFlatTimeoutFunction, PatternFlatSelectFunction)}_that returns timed out events as a side-output__@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{2, 0},_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{0, 1, 0},_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		final OutputTag<L> outputTag = new OutputTag<L>(UUID.randomUUID().toString(), leftTypeInfo)___		final SingleOutputStreamOperator<R> mainStream = CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			rightTypeInfo,_			outputTag,_			clean(patternFlatTimeoutFunction),_			lateDataOutputTag)___		final DataStream<L> timedOutStream = mainStream.getSideOutput(outputTag)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return mainStream.connect(timedOutStream).map(new CoMapTimeout<>()).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,deprecated,use,link,pattern,stream,flat,select,output,tag,pattern,flat,timeout,function,pattern,flat,select,function,that,returns,timed,out,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,0,1,new,int,0,1,0,new,int,2,0,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,final,output,tag,l,output,tag,new,output,tag,l,uuid,random,uuid,to,string,left,type,info,final,single,output,stream,operator,r,main,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,right,type,info,output,tag,clean,pattern,flat,timeout,function,late,data,output,tag,final,data,stream,l,timed,out,stream,main,stream,get,side,output,output,tag,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,main,stream,connect,timed,out,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> @Deprecated 	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect( 		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction, 		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1528109383;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__<p>Applies a timeout function to a partial pattern sequence which has timed out. For each_partial pattern sequence the provided {@link PatternFlatTimeoutFunction} is called. The_pattern timeout function can produce an arbitrary number of resulting elements.__@param patternFlatTimeoutFunction The pattern flat timeout function which is called for each_partial pattern sequence which has timed out._@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <L> Type of the resulting timeout events_@param <R> Type of the resulting events__@deprecated Use {@link PatternStream#flatSelect(OutputTag, PatternFlatTimeoutFunction, PatternFlatSelectFunction)}_that returns timed out events as a side-output__@return {@link DataStream} which contains the resulting events from the pattern flat select_function or the resulting timeout events from the pattern flat timeout function wrapped in an_{@link Either} type.;@Deprecated_	public <L, R> SingleOutputStreamOperator<Either<L, R>> flatSelect(_		final PatternFlatTimeoutFunction<T, L> patternFlatTimeoutFunction,_		final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {__		TypeInformation<L> leftTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatTimeoutFunction,_			PatternFlatTimeoutFunction.class,_			0,_			1,_			new int[]{2, 0},_			inputStream.getType(),_			null,_			false)___		TypeInformation<R> rightTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{1, 0},_			inputStream.getType(),_			null,_			false)___		final OutputTag<L> outputTag = new OutputTag<L>(UUID.randomUUID().toString(), leftTypeInfo)___		final SingleOutputStreamOperator<R> mainStream = CEPOperatorUtils.createTimeoutPatternStream(_			inputStream,_			pattern,_			comparator,_			clean(patternFlatSelectFunction),_			rightTypeInfo,_			outputTag,_			clean(patternFlatTimeoutFunction),_			lateDataOutputTag)___		final DataStream<L> timedOutStream = mainStream.getSideOutput(outputTag)___		TypeInformation<Either<L, R>> outTypeInfo = new EitherTypeInfo<>(leftTypeInfo, rightTypeInfo)___		return mainStream.connect(timedOutStream).map(new CoMapTimeout<>()).returns(outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,p,applies,a,timeout,function,to,a,partial,pattern,sequence,which,has,timed,out,for,each,partial,pattern,sequence,the,provided,link,pattern,flat,timeout,function,is,called,the,pattern,timeout,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,timeout,function,the,pattern,flat,timeout,function,which,is,called,for,each,partial,pattern,sequence,which,has,timed,out,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,l,type,of,the,resulting,timeout,events,param,r,type,of,the,resulting,events,deprecated,use,link,pattern,stream,flat,select,output,tag,pattern,flat,timeout,function,pattern,flat,select,function,that,returns,timed,out,events,as,a,side,output,return,link,data,stream,which,contains,the,resulting,events,from,the,pattern,flat,select,function,or,the,resulting,timeout,events,from,the,pattern,flat,timeout,function,wrapped,in,an,link,either,type;deprecated,public,l,r,single,output,stream,operator,either,l,r,flat,select,final,pattern,flat,timeout,function,t,l,pattern,flat,timeout,function,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,l,left,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,timeout,function,pattern,flat,timeout,function,class,0,1,new,int,2,0,input,stream,get,type,null,false,type,information,r,right,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,1,0,input,stream,get,type,null,false,final,output,tag,l,output,tag,new,output,tag,l,uuid,random,uuid,to,string,left,type,info,final,single,output,stream,operator,r,main,stream,cepoperator,utils,create,timeout,pattern,stream,input,stream,pattern,comparator,clean,pattern,flat,select,function,right,type,info,output,tag,clean,pattern,flat,timeout,function,late,data,output,tag,final,data,stream,l,timed,out,stream,main,stream,get,side,output,output,tag,type,information,either,l,r,out,type,info,new,either,type,info,left,type,info,right,type,info,return,main,stream,connect,timed,out,stream,map,new,co,map,timeout,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1490292075;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, T>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		return patternStream.map(_			new PatternSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction)))_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,return,pattern,stream,map,new,pattern,select,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1491233942;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, T>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		return patternStream.map(_			new PatternSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction)))_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,return,pattern,stream,map,new,pattern,select,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1493985307;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, List<T>>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern, lateDataOutputTag)__		this.patternStream = patternStream___		return patternStream.map(_			new PatternSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction)))_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,list,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,late,data,output,tag,this,pattern,stream,pattern,stream,return,pattern,stream,map,new,pattern,select,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1494597698;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, List<T>>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern)___		return patternStream.map(_			new PatternSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction)))_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,list,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,return,pattern,stream,map,new,pattern,select,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1495657626;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, List<T>>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern)___		return patternStream.map(_			new PatternSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction)))_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,list,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,return,pattern,stream,map,new,pattern,select,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1496315845;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, List<T>>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern)___		return patternStream.map(_			new PatternSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction)))_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,list,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,return,pattern,stream,map,new,pattern,select,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1501246266;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		SingleOutputStreamOperator<Map<String, List<T>>> patternStream =_				CEPOperatorUtils.createPatternStream(inputStream, pattern, comparator)___		return patternStream.map(_			new PatternSelectMapper<>(_				patternStream.getExecutionEnvironment().clean(patternSelectFunction)))_			.returns(outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,single,output,stream,operator,map,string,list,t,pattern,stream,cepoperator,utils,create,pattern,stream,input,stream,pattern,comparator,return,pattern,stream,map,new,pattern,select,mapper,pattern,stream,get,execution,environment,clean,pattern,select,function,returns,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1502445388;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		return CEPOperatorUtils.createPatternStream(inputStream, pattern, comparator, clean(patternSelectFunction), outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,return,cepoperator,utils,create,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1503555538;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		return CEPOperatorUtils.createPatternStream(inputStream, pattern, comparator, clean(patternSelectFunction), outTypeInfo)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,return,cepoperator,utils,create,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1527694335;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		return CEPOperatorUtils.createPatternStream(inputStream, pattern, comparator, clean(patternSelectFunction), outTypeInfo, lateDataOutputTag)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,return,cepoperator,utils,create,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,out,type,info,late,data,output,tag
PatternStream -> public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo);1528109383;Applies a select function to the detected pattern sequence. For each pattern sequence the_provided {@link PatternSelectFunction} is called. The pattern select function can produce_exactly one resulting element.__@param patternSelectFunction The pattern select function which is called for each detected_pattern sequence._@param <R> Type of the resulting elements_@param outTypeInfo Explicit specification of output type._@return {@link DataStream} which contains the resulting elements from the pattern select_function.;public <R> SingleOutputStreamOperator<R> select(final PatternSelectFunction<T, R> patternSelectFunction, TypeInformation<R> outTypeInfo) {_		return CEPOperatorUtils.createPatternStream(inputStream, pattern, comparator, clean(patternSelectFunction), outTypeInfo, lateDataOutputTag)__	};applies,a,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,select,function,is,called,the,pattern,select,function,can,produce,exactly,one,resulting,element,param,pattern,select,function,the,pattern,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,param,out,type,info,explicit,specification,of,output,type,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,select,function;public,r,single,output,stream,operator,r,select,final,pattern,select,function,t,r,pattern,select,function,type,information,r,out,type,info,return,cepoperator,utils,create,pattern,stream,input,stream,pattern,comparator,clean,pattern,select,function,out,type,info,late,data,output,tag
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1490292075;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			0,_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1491233942;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			0,_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1493985307;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			0,_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1494597698;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			0,_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1495657626;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			1,_			0,_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1496315845;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[] {0, 1, 0},_			new int[] {1, 0},_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1501246266;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[] {0, 1, 0},_			new int[] {1, 0},_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1502445388;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[] {0, 1, 0},_			new int[] {1, 0},_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1503555538;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[] {0, 1, 0},_			new int[] {1, 0},_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1527694335;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[] {0, 1, 0},_			new int[] {1, 0},_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,0,1,0,new,int,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1528109383;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		_		TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[] {1, 0},_			inputStream.getType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,1,0,input,stream,get,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
PatternStream -> public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction);1545210639;Applies a flat select function to the detected pattern sequence. For each pattern sequence_the provided {@link PatternFlatSelectFunction} is called. The pattern flat select function_can produce an arbitrary number of resulting elements.__@param patternFlatSelectFunction The pattern flat select function which is called for each_detected pattern sequence._@param <R> Type of the resulting elements_@return {@link DataStream} which contains the resulting elements from the pattern flat select_function.;public <R> SingleOutputStreamOperator<R> flatSelect(final PatternFlatSelectFunction<T, R> patternFlatSelectFunction) {_		_		__		final TypeInformation<R> outTypeInfo = TypeExtractor.getUnaryOperatorReturnType(_			patternFlatSelectFunction,_			PatternFlatSelectFunction.class,_			0,_			1,_			new int[]{1, 0},_			builder.getInputType(),_			null,_			false)___		return flatSelect(patternFlatSelectFunction, outTypeInfo)__	};applies,a,flat,select,function,to,the,detected,pattern,sequence,for,each,pattern,sequence,the,provided,link,pattern,flat,select,function,is,called,the,pattern,flat,select,function,can,produce,an,arbitrary,number,of,resulting,elements,param,pattern,flat,select,function,the,pattern,flat,select,function,which,is,called,for,each,detected,pattern,sequence,param,r,type,of,the,resulting,elements,return,link,data,stream,which,contains,the,resulting,elements,from,the,pattern,flat,select,function;public,r,single,output,stream,operator,r,flat,select,final,pattern,flat,select,function,t,r,pattern,flat,select,function,final,type,information,r,out,type,info,type,extractor,get,unary,operator,return,type,pattern,flat,select,function,pattern,flat,select,function,class,0,1,new,int,1,0,builder,get,input,type,null,false,return,flat,select,pattern,flat,select,function,out,type,info
