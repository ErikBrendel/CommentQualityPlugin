# id;timestamp;commentText;codeText;commentWords;codeWords
CepOperator -> private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception;1544602660;Process the given event by giving it to the NFA and outputting the produced set of matched_event sequences.__@param nfaState Our NFAState object_@param event The current event to be processed_@param timestamp The timestamp of the event;private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Map<String, List<IN>>> patterns =_				nfa.process(sharedBufferAccessor, nfaState, event, timestamp, afterMatchSkipStrategy, cepTimerService)__			processMatchedSequences(patterns, timestamp)__		}_	};process,the,given,event,by,giving,it,to,the,nfa,and,outputting,the,produced,set,of,matched,event,sequences,param,nfa,state,our,nfastate,object,param,event,the,current,event,to,be,processed,param,timestamp,the,timestamp,of,the,event;private,void,process,event,nfastate,nfa,state,in,event,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,map,string,list,in,patterns,nfa,process,shared,buffer,accessor,nfa,state,event,timestamp,after,match,skip,strategy,cep,timer,service,process,matched,sequences,patterns,timestamp
CepOperator -> private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception;1545121742;Process the given event by giving it to the NFA and outputting the produced set of matched_event sequences.__@param nfaState Our NFAState object_@param event The current event to be processed_@param timestamp The timestamp of the event;private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Map<String, List<IN>>> patterns =_				nfa.process(sharedBufferAccessor, nfaState, event, timestamp, afterMatchSkipStrategy)__			processMatchedSequences(patterns, timestamp)__		}_	};process,the,given,event,by,giving,it,to,the,nfa,and,outputting,the,produced,set,of,matched,event,sequences,param,nfa,state,our,nfastate,object,param,event,the,current,event,to,be,processed,param,timestamp,the,timestamp,of,the,event;private,void,process,event,nfastate,nfa,state,in,event,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,map,string,list,in,patterns,nfa,process,shared,buffer,accessor,nfa,state,event,timestamp,after,match,skip,strategy,process,matched,sequences,patterns,timestamp
CepOperator -> private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception;1545122140;Process the given event by giving it to the NFA and outputting the produced set of matched_event sequences.__@param nfaState Our NFAState object_@param event The current event to be processed_@param timestamp The timestamp of the event;private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Map<String, List<IN>>> patterns =_				nfa.process(sharedBufferAccessor, nfaState, event, timestamp, afterMatchSkipStrategy)__			processMatchedSequences(patterns, timestamp)__		}_	};process,the,given,event,by,giving,it,to,the,nfa,and,outputting,the,produced,set,of,matched,event,sequences,param,nfa,state,our,nfastate,object,param,event,the,current,event,to,be,processed,param,timestamp,the,timestamp,of,the,event;private,void,process,event,nfastate,nfa,state,in,event,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,map,string,list,in,patterns,nfa,process,shared,buffer,accessor,nfa,state,event,timestamp,after,match,skip,strategy,process,matched,sequences,patterns,timestamp
CepOperator -> private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception;1546871020;Process the given event by giving it to the NFA and outputting the produced set of matched_event sequences.__@param nfaState Our NFAState object_@param event The current event to be processed_@param timestamp The timestamp of the event;private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Map<String, List<IN>>> patterns =_				nfa.process(sharedBufferAccessor, nfaState, event, timestamp, afterMatchSkipStrategy)__			processMatchedSequences(patterns, timestamp)__		}_	};process,the,given,event,by,giving,it,to,the,nfa,and,outputting,the,produced,set,of,matched,event,sequences,param,nfa,state,our,nfastate,object,param,event,the,current,event,to,be,processed,param,timestamp,the,timestamp,of,the,event;private,void,process,event,nfastate,nfa,state,in,event,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,map,string,list,in,patterns,nfa,process,shared,buffer,accessor,nfa,state,event,timestamp,after,match,skip,strategy,process,matched,sequences,patterns,timestamp
CepOperator -> private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception;1548146843;Process the given event by giving it to the NFA and outputting the produced set of matched_event sequences.__@param nfaState Our NFAState object_@param event The current event to be processed_@param timestamp The timestamp of the event;private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Map<String, List<IN>>> patterns =_				nfa.process(sharedBufferAccessor, nfaState, event, timestamp, afterMatchSkipStrategy, cepTimerService)__			processMatchedSequences(patterns, timestamp)__		}_	};process,the,given,event,by,giving,it,to,the,nfa,and,outputting,the,produced,set,of,matched,event,sequences,param,nfa,state,our,nfastate,object,param,event,the,current,event,to,be,processed,param,timestamp,the,timestamp,of,the,event;private,void,process,event,nfastate,nfa,state,in,event,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,map,string,list,in,patterns,nfa,process,shared,buffer,accessor,nfa,state,event,timestamp,after,match,skip,strategy,cep,timer,service,process,matched,sequences,patterns,timestamp
CepOperator -> private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception;1548236357;Process the given event by giving it to the NFA and outputting the produced set of matched_event sequences.__@param nfaState Our NFAState object_@param event The current event to be processed_@param timestamp The timestamp of the event;private void processEvent(NFAState nfaState, IN event, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Map<String, List<IN>>> patterns =_				nfa.process(sharedBufferAccessor, nfaState, event, timestamp, afterMatchSkipStrategy, cepTimerService)__			processMatchedSequences(patterns, timestamp)__		}_	};process,the,given,event,by,giving,it,to,the,nfa,and,outputting,the,produced,set,of,matched,event,sequences,param,nfa,state,our,nfastate,object,param,event,the,current,event,to,be,processed,param,timestamp,the,timestamp,of,the,event;private,void,process,event,nfastate,nfa,state,in,event,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,map,string,list,in,patterns,nfa,process,shared,buffer,accessor,nfa,state,event,timestamp,after,match,skip,strategy,cep,timer,service,process,matched,sequences,patterns,timestamp
CepOperator -> private void advanceTime(NFAState nfaState, long timestamp) throws Exception;1544602660;Advances the time for the given NFA to the given timestamp. This means that no more events with timestamp_<b>lower</b> than the given timestamp should be passed to the nfa, This can lead to pruning and timeouts.;private void advanceTime(NFAState nfaState, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Tuple2<Map<String, List<IN>>, Long>> timedOut =_					nfa.advanceTime(sharedBufferAccessor, nfaState, timestamp)__			if (!timedOut.isEmpty()) {_				processTimedOutSequences(timedOut)__			}_		}_	};advances,the,time,for,the,given,nfa,to,the,given,timestamp,this,means,that,no,more,events,with,timestamp,b,lower,b,than,the,given,timestamp,should,be,passed,to,the,nfa,this,can,lead,to,pruning,and,timeouts;private,void,advance,time,nfastate,nfa,state,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,tuple2,map,string,list,in,long,timed,out,nfa,advance,time,shared,buffer,accessor,nfa,state,timestamp,if,timed,out,is,empty,process,timed,out,sequences,timed,out
CepOperator -> private void advanceTime(NFAState nfaState, long timestamp) throws Exception;1545121742;Advances the time for the given NFA to the given timestamp. This means that no more events with timestamp_<b>lower</b> than the given timestamp should be passed to the nfa, This can lead to pruning and timeouts.;private void advanceTime(NFAState nfaState, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Tuple2<Map<String, List<IN>>, Long>> timedOut =_					nfa.advanceTime(sharedBufferAccessor, nfaState, timestamp)__			if (!timedOut.isEmpty()) {_				processTimedOutSequences(timedOut)__			}_		}_	};advances,the,time,for,the,given,nfa,to,the,given,timestamp,this,means,that,no,more,events,with,timestamp,b,lower,b,than,the,given,timestamp,should,be,passed,to,the,nfa,this,can,lead,to,pruning,and,timeouts;private,void,advance,time,nfastate,nfa,state,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,tuple2,map,string,list,in,long,timed,out,nfa,advance,time,shared,buffer,accessor,nfa,state,timestamp,if,timed,out,is,empty,process,timed,out,sequences,timed,out
CepOperator -> private void advanceTime(NFAState nfaState, long timestamp) throws Exception;1545122140;Advances the time for the given NFA to the given timestamp. This means that no more events with timestamp_<b>lower</b> than the given timestamp should be passed to the nfa, This can lead to pruning and timeouts.;private void advanceTime(NFAState nfaState, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Tuple2<Map<String, List<IN>>, Long>> timedOut =_					nfa.advanceTime(sharedBufferAccessor, nfaState, timestamp)__			if (!timedOut.isEmpty()) {_				processTimedOutSequences(timedOut)__			}_		}_	};advances,the,time,for,the,given,nfa,to,the,given,timestamp,this,means,that,no,more,events,with,timestamp,b,lower,b,than,the,given,timestamp,should,be,passed,to,the,nfa,this,can,lead,to,pruning,and,timeouts;private,void,advance,time,nfastate,nfa,state,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,tuple2,map,string,list,in,long,timed,out,nfa,advance,time,shared,buffer,accessor,nfa,state,timestamp,if,timed,out,is,empty,process,timed,out,sequences,timed,out
CepOperator -> private void advanceTime(NFAState nfaState, long timestamp) throws Exception;1546871020;Advances the time for the given NFA to the given timestamp. This means that no more events with timestamp_<b>lower</b> than the given timestamp should be passed to the nfa, This can lead to pruning and timeouts.;private void advanceTime(NFAState nfaState, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Tuple2<Map<String, List<IN>>, Long>> timedOut =_					nfa.advanceTime(sharedBufferAccessor, nfaState, timestamp)__			if (!timedOut.isEmpty()) {_				processTimedOutSequences(timedOut)__			}_		}_	};advances,the,time,for,the,given,nfa,to,the,given,timestamp,this,means,that,no,more,events,with,timestamp,b,lower,b,than,the,given,timestamp,should,be,passed,to,the,nfa,this,can,lead,to,pruning,and,timeouts;private,void,advance,time,nfastate,nfa,state,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,tuple2,map,string,list,in,long,timed,out,nfa,advance,time,shared,buffer,accessor,nfa,state,timestamp,if,timed,out,is,empty,process,timed,out,sequences,timed,out
CepOperator -> private void advanceTime(NFAState nfaState, long timestamp) throws Exception;1548146843;Advances the time for the given NFA to the given timestamp. This means that no more events with timestamp_<b>lower</b> than the given timestamp should be passed to the nfa, This can lead to pruning and timeouts.;private void advanceTime(NFAState nfaState, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Tuple2<Map<String, List<IN>>, Long>> timedOut =_					nfa.advanceTime(sharedBufferAccessor, nfaState, timestamp)__			if (!timedOut.isEmpty()) {_				processTimedOutSequences(timedOut)__			}_		}_	};advances,the,time,for,the,given,nfa,to,the,given,timestamp,this,means,that,no,more,events,with,timestamp,b,lower,b,than,the,given,timestamp,should,be,passed,to,the,nfa,this,can,lead,to,pruning,and,timeouts;private,void,advance,time,nfastate,nfa,state,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,tuple2,map,string,list,in,long,timed,out,nfa,advance,time,shared,buffer,accessor,nfa,state,timestamp,if,timed,out,is,empty,process,timed,out,sequences,timed,out
CepOperator -> private void advanceTime(NFAState nfaState, long timestamp) throws Exception;1548236357;Advances the time for the given NFA to the given timestamp. This means that no more events with timestamp_<b>lower</b> than the given timestamp should be passed to the nfa, This can lead to pruning and timeouts.;private void advanceTime(NFAState nfaState, long timestamp) throws Exception {_		try (SharedBufferAccessor<IN> sharedBufferAccessor = partialMatches.getAccessor()) {_			Collection<Tuple2<Map<String, List<IN>>, Long>> timedOut =_					nfa.advanceTime(sharedBufferAccessor, nfaState, timestamp)__			if (!timedOut.isEmpty()) {_				processTimedOutSequences(timedOut)__			}_		}_	};advances,the,time,for,the,given,nfa,to,the,given,timestamp,this,means,that,no,more,events,with,timestamp,b,lower,b,than,the,given,timestamp,should,be,passed,to,the,nfa,this,can,lead,to,pruning,and,timeouts;private,void,advance,time,nfastate,nfa,state,long,timestamp,throws,exception,try,shared,buffer,accessor,in,shared,buffer,accessor,partial,matches,get,accessor,collection,tuple2,map,string,list,in,long,timed,out,nfa,advance,time,shared,buffer,accessor,nfa,state,timestamp,if,timed,out,is,empty,process,timed,out,sequences,timed,out
CepOperator -> private void saveRegisterWatermarkTimer();1544602660;Registers a timer for {@code current watermark + 1}, this means that we get triggered_whenever the watermark advances, which is what we want for working off the queue of_buffered elements.;private void saveRegisterWatermarkTimer() {_		long currentWatermark = timerService.currentWatermark()__		_		if (currentWatermark + 1 > currentWatermark) {_			timerService.registerEventTimeTimer(VoidNamespace.INSTANCE, currentWatermark + 1)__		}_	};registers,a,timer,for,code,current,watermark,1,this,means,that,we,get,triggered,whenever,the,watermark,advances,which,is,what,we,want,for,working,off,the,queue,of,buffered,elements;private,void,save,register,watermark,timer,long,current,watermark,timer,service,current,watermark,if,current,watermark,1,current,watermark,timer,service,register,event,time,timer,void,namespace,instance,current,watermark,1
CepOperator -> private void saveRegisterWatermarkTimer();1545121742;Registers a timer for {@code current watermark + 1}, this means that we get triggered_whenever the watermark advances, which is what we want for working off the queue of_buffered elements.;private void saveRegisterWatermarkTimer() {_		long currentWatermark = timerService.currentWatermark()__		_		if (currentWatermark + 1 > currentWatermark) {_			timerService.registerEventTimeTimer(VoidNamespace.INSTANCE, currentWatermark + 1)__		}_	};registers,a,timer,for,code,current,watermark,1,this,means,that,we,get,triggered,whenever,the,watermark,advances,which,is,what,we,want,for,working,off,the,queue,of,buffered,elements;private,void,save,register,watermark,timer,long,current,watermark,timer,service,current,watermark,if,current,watermark,1,current,watermark,timer,service,register,event,time,timer,void,namespace,instance,current,watermark,1
CepOperator -> private void saveRegisterWatermarkTimer();1545122140;Registers a timer for {@code current watermark + 1}, this means that we get triggered_whenever the watermark advances, which is what we want for working off the queue of_buffered elements.;private void saveRegisterWatermarkTimer() {_		long currentWatermark = timerService.currentWatermark()__		_		if (currentWatermark + 1 > currentWatermark) {_			timerService.registerEventTimeTimer(VoidNamespace.INSTANCE, currentWatermark + 1)__		}_	};registers,a,timer,for,code,current,watermark,1,this,means,that,we,get,triggered,whenever,the,watermark,advances,which,is,what,we,want,for,working,off,the,queue,of,buffered,elements;private,void,save,register,watermark,timer,long,current,watermark,timer,service,current,watermark,if,current,watermark,1,current,watermark,timer,service,register,event,time,timer,void,namespace,instance,current,watermark,1
CepOperator -> private void saveRegisterWatermarkTimer();1546871020;Registers a timer for {@code current watermark + 1}, this means that we get triggered_whenever the watermark advances, which is what we want for working off the queue of_buffered elements.;private void saveRegisterWatermarkTimer() {_		long currentWatermark = timerService.currentWatermark()__		_		if (currentWatermark + 1 > currentWatermark) {_			timerService.registerEventTimeTimer(VoidNamespace.INSTANCE, currentWatermark + 1)__		}_	};registers,a,timer,for,code,current,watermark,1,this,means,that,we,get,triggered,whenever,the,watermark,advances,which,is,what,we,want,for,working,off,the,queue,of,buffered,elements;private,void,save,register,watermark,timer,long,current,watermark,timer,service,current,watermark,if,current,watermark,1,current,watermark,timer,service,register,event,time,timer,void,namespace,instance,current,watermark,1
CepOperator -> private void saveRegisterWatermarkTimer();1548146843;Registers a timer for {@code current watermark + 1}, this means that we get triggered_whenever the watermark advances, which is what we want for working off the queue of_buffered elements.;private void saveRegisterWatermarkTimer() {_		long currentWatermark = timerService.currentWatermark()__		_		if (currentWatermark + 1 > currentWatermark) {_			timerService.registerEventTimeTimer(VoidNamespace.INSTANCE, currentWatermark + 1)__		}_	};registers,a,timer,for,code,current,watermark,1,this,means,that,we,get,triggered,whenever,the,watermark,advances,which,is,what,we,want,for,working,off,the,queue,of,buffered,elements;private,void,save,register,watermark,timer,long,current,watermark,timer,service,current,watermark,if,current,watermark,1,current,watermark,timer,service,register,event,time,timer,void,namespace,instance,current,watermark,1
CepOperator -> private void saveRegisterWatermarkTimer();1548236357;Registers a timer for {@code current watermark + 1}, this means that we get triggered_whenever the watermark advances, which is what we want for working off the queue of_buffered elements.;private void saveRegisterWatermarkTimer() {_		long currentWatermark = timerService.currentWatermark()__		_		if (currentWatermark + 1 > currentWatermark) {_			timerService.registerEventTimeTimer(VoidNamespace.INSTANCE, currentWatermark + 1)__		}_	};registers,a,timer,for,code,current,watermark,1,this,means,that,we,get,triggered,whenever,the,watermark,advances,which,is,what,we,want,for,working,off,the,queue,of,buffered,elements;private,void,save,register,watermark,timer,long,current,watermark,timer,service,current,watermark,if,current,watermark,1,current,watermark,timer,service,register,event,time,timer,void,namespace,instance,current,watermark,1
