# id;timestamp;commentText;codeText;commentWords;codeWords
DriverBaseITCase -> protected void expectedChecksum(String[] parameters, long expectedCount, long expectedChecksum) throws Exception;1493649310;Simpler variant of {@link #expectedOutput(String[], String)}_that converts the {@link Checksum} to a string and ignores_leading and trailing newlines.__@param parameters algorithm, input, and output arguments_@param expectedCount expected number of records_@param expectedChecksum expected checksum over records_@throws Exception on error;protected void expectedChecksum(String[] parameters, long expectedCount, long expectedChecksum) throws Exception {_		Checksum checksum = new Checksum(expectedCount, expectedChecksum)__		expectedOutput(parameters, "\n*" + checksum.toString() + "\n*")__	};simpler,variant,of,link,expected,output,string,string,that,converts,the,link,checksum,to,a,string,and,ignores,leading,and,trailing,newlines,param,parameters,algorithm,input,and,output,arguments,param,expected,count,expected,number,of,records,param,expected,checksum,expected,checksum,over,records,throws,exception,on,error;protected,void,expected,checksum,string,parameters,long,expected,count,long,expected,checksum,throws,exception,checksum,checksum,new,checksum,expected,count,expected,checksum,expected,output,parameters,n,checksum,to,string,n
DriverBaseITCase -> protected void expectedChecksum(String[] parameters, long expectedCount, long expectedChecksum) throws Exception;1495819075;Simpler variant of {@link #expectedOutput(String[], String)}_that converts the {@link Checksum} to a string and ignores_leading and trailing newlines.__@param parameters algorithm, input, and output arguments_@param expectedCount expected number of records_@param expectedChecksum expected checksum over records_@throws Exception on error;protected void expectedChecksum(String[] parameters, long expectedCount, long expectedChecksum) throws Exception {_		Checksum checksum = new Checksum(expectedCount, expectedChecksum)__		expectedOutput(parameters, "\n*" + checksum.toString() + "\n*")__	};simpler,variant,of,link,expected,output,string,string,that,converts,the,link,checksum,to,a,string,and,ignores,leading,and,trailing,newlines,param,parameters,algorithm,input,and,output,arguments,param,expected,count,expected,number,of,records,param,expected,checksum,expected,checksum,over,records,throws,exception,on,error;protected,void,expected,checksum,string,parameters,long,expected,count,long,expected,checksum,throws,exception,checksum,checksum,new,checksum,expected,count,expected,checksum,expected,output,parameters,n,checksum,to,string,n
DriverBaseITCase -> protected void expectedChecksum(String[] parameters, long expectedCount, long expectedChecksum) throws Exception;1501079480;Simpler variant of {@link #expectedOutput(String[], String)}_that converts the {@link Checksum} to a string and ignores_leading and trailing newlines.__@param parameters algorithm, input, and output arguments_@param expectedCount expected number of records_@param expectedChecksum expected checksum over records_@throws Exception on error;protected void expectedChecksum(String[] parameters, long expectedCount, long expectedChecksum) throws Exception {_		Checksum checksum = new Checksum(expectedCount, expectedChecksum)__		expectedOutput(parameters, "\n*" + checksum.toString() + "\n*")__	};simpler,variant,of,link,expected,output,string,string,that,converts,the,link,checksum,to,a,string,and,ignores,leading,and,trailing,newlines,param,parameters,algorithm,input,and,output,arguments,param,expected,count,expected,number,of,records,param,expected,checksum,expected,checksum,over,records,throws,exception,on,error;protected,void,expected,checksum,string,parameters,long,expected,count,long,expected,checksum,throws,exception,checksum,checksum,new,checksum,expected,count,expected,checksum,expected,output,parameters,n,checksum,to,string,n
DriverBaseITCase -> protected void expectedCount(String[] parameters, int records) throws Exception;1490990274;Simpler variant of {@link #expectedOutput(String[], String)}_that only compares the count of the number of records in standard output._This is intended for use for algorithms where the result cannot be_hashed due to approximate results (typically floating point arithmetic).__@param parameters algorithm, input, and output arguments_@param records expected number of records in standard output_@throws Exception on error;protected void expectedCount(String[] parameters, int records) throws Exception {_		String output = getSystemOutput(parameters)___		_		int numberOfRecords = output.split(System.getProperty("line.separator")).length - 1__		Assert.assertEquals(records, numberOfRecords)__	};simpler,variant,of,link,expected,output,string,string,that,only,compares,the,count,of,the,number,of,records,in,standard,output,this,is,intended,for,use,for,algorithms,where,the,result,cannot,be,hashed,due,to,approximate,results,typically,floating,point,arithmetic,param,parameters,algorithm,input,and,output,arguments,param,records,expected,number,of,records,in,standard,output,throws,exception,on,error;protected,void,expected,count,string,parameters,int,records,throws,exception,string,output,get,system,output,parameters,int,number,of,records,output,split,system,get,property,line,separator,length,1,assert,assert,equals,records,number,of,records
DriverBaseITCase -> protected void expectedCount(String[] parameters, int records) throws Exception;1493649310;Simpler variant of {@link #expectedOutput(String[], String)}_that only compares the count of the number of records in standard output._This is intended for use for algorithms where the result cannot be_hashed due to approximate results (typically floating point arithmetic).__@param parameters algorithm, input, and output arguments_@param records expected number of records in standard output_@throws Exception on error;protected void expectedCount(String[] parameters, int records) throws Exception {_		String output = getSystemOutput(parameters)___		_		int numberOfRecords = output.split(System.getProperty("line.separator")).length - 1__		Assert.assertEquals(records, numberOfRecords)__	};simpler,variant,of,link,expected,output,string,string,that,only,compares,the,count,of,the,number,of,records,in,standard,output,this,is,intended,for,use,for,algorithms,where,the,result,cannot,be,hashed,due,to,approximate,results,typically,floating,point,arithmetic,param,parameters,algorithm,input,and,output,arguments,param,records,expected,number,of,records,in,standard,output,throws,exception,on,error;protected,void,expected,count,string,parameters,int,records,throws,exception,string,output,get,system,output,parameters,int,number,of,records,output,split,system,get,property,line,separator,length,1,assert,assert,equals,records,number,of,records
DriverBaseITCase -> protected void expectedCount(String[] parameters, int records) throws Exception;1495819075;Simpler variant of {@link #expectedOutput(String[], String)}_that only compares the count of the number of records in standard output._This is intended for use for algorithms where the result cannot be_hashed due to approximate results (typically floating point arithmetic).__@param parameters algorithm, input, and output arguments_@param records expected number of records in standard output_@throws Exception on error;protected void expectedCount(String[] parameters, int records) throws Exception {_		String output = getSystemOutput(parameters)___		_		int numberOfRecords = output.split(System.getProperty("line.separator")).length - 1__		Assert.assertEquals(records, numberOfRecords)__	};simpler,variant,of,link,expected,output,string,string,that,only,compares,the,count,of,the,number,of,records,in,standard,output,this,is,intended,for,use,for,algorithms,where,the,result,cannot,be,hashed,due,to,approximate,results,typically,floating,point,arithmetic,param,parameters,algorithm,input,and,output,arguments,param,records,expected,number,of,records,in,standard,output,throws,exception,on,error;protected,void,expected,count,string,parameters,int,records,throws,exception,string,output,get,system,output,parameters,int,number,of,records,output,split,system,get,property,line,separator,length,1,assert,assert,equals,records,number,of,records
DriverBaseITCase -> protected void expectedCount(String[] parameters, int records) throws Exception;1501079480;Simpler variant of {@link #expectedOutput(String[], String)}_that only compares the count of the number of records in standard output._This is intended for use for algorithms where the result cannot be_hashed due to approximate results (typically floating point arithmetic).__@param parameters algorithm, input, and output arguments_@param records expected number of records in standard output_@throws Exception on error;protected void expectedCount(String[] parameters, int records) throws Exception {_		String output = getSystemOutput(parameters)___		_		int numberOfRecords = output.split(System.getProperty("line.separator")).length - 1__		Assert.assertEquals(records, numberOfRecords)__	};simpler,variant,of,link,expected,output,string,string,that,only,compares,the,count,of,the,number,of,records,in,standard,output,this,is,intended,for,use,for,algorithms,where,the,result,cannot,be,hashed,due,to,approximate,results,typically,floating,point,arithmetic,param,parameters,algorithm,input,and,output,arguments,param,records,expected,number,of,records,in,standard,output,throws,exception,on,error;protected,void,expected,count,string,parameters,int,records,throws,exception,string,output,get,system,output,parameters,int,number,of,records,output,split,system,get,property,line,separator,length,1,assert,assert,equals,records,number,of,records
DriverBaseITCase -> protected void expectedOutputChecksum(String[] parameters, Checksum expected) throws Exception;1493649310;Simpler variant of {@link #expectedOutput(String[], String)}_that sums the hashCode() of each line of output.__@param parameters algorithm, input, and output arguments_@param expected expected checksum over lines of output_@throws Exception on error;protected void expectedOutputChecksum(String[] parameters, Checksum expected) throws Exception {_		String output = getSystemOutput(parameters)___		long count = 0__		long checksum = 0___		for (String line : output.split(System.getProperty("line.separator"))) {_			if (line.length() > 0) {_				count++___				_				checksum += line.hashCode() & 0xffffffffL__			}_		}__		Assert.assertEquals(expected.getCount(), count)__		Assert.assertEquals(expected.getChecksum(), checksum)__	};simpler,variant,of,link,expected,output,string,string,that,sums,the,hash,code,of,each,line,of,output,param,parameters,algorithm,input,and,output,arguments,param,expected,expected,checksum,over,lines,of,output,throws,exception,on,error;protected,void,expected,output,checksum,string,parameters,checksum,expected,throws,exception,string,output,get,system,output,parameters,long,count,0,long,checksum,0,for,string,line,output,split,system,get,property,line,separator,if,line,length,0,count,checksum,line,hash,code,0xffffffff,l,assert,assert,equals,expected,get,count,count,assert,assert,equals,expected,get,checksum,checksum
DriverBaseITCase -> protected void expectedOutputChecksum(String[] parameters, Checksum expected) throws Exception;1495819075;Simpler variant of {@link #expectedOutput(String[], String)}_that sums the hashCode() of each line of output.__@param parameters algorithm, input, and output arguments_@param expected expected checksum over lines of output_@throws Exception on error;protected void expectedOutputChecksum(String[] parameters, Checksum expected) throws Exception {_		String output = getSystemOutput(parameters)___		long count = 0__		long checksum = 0___		for (String line : output.split(System.getProperty("line.separator"))) {_			if (line.length() > 0) {_				count++___				_				checksum += line.hashCode() & 0xffffffffL__			}_		}__		Assert.assertEquals(expected.getCount(), count)__		Assert.assertEquals(expected.getChecksum(), checksum)__	};simpler,variant,of,link,expected,output,string,string,that,sums,the,hash,code,of,each,line,of,output,param,parameters,algorithm,input,and,output,arguments,param,expected,expected,checksum,over,lines,of,output,throws,exception,on,error;protected,void,expected,output,checksum,string,parameters,checksum,expected,throws,exception,string,output,get,system,output,parameters,long,count,0,long,checksum,0,for,string,line,output,split,system,get,property,line,separator,if,line,length,0,count,checksum,line,hash,code,0xffffffff,l,assert,assert,equals,expected,get,count,count,assert,assert,equals,expected,get,checksum,checksum
DriverBaseITCase -> protected void expectedOutputChecksum(String[] parameters, Checksum expected) throws Exception;1501079480;Simpler variant of {@link #expectedOutput(String[], String)}_that sums the hashCode() of each line of output.__@param parameters algorithm, input, and output arguments_@param expected expected checksum over lines of output_@throws Exception on error;protected void expectedOutputChecksum(String[] parameters, Checksum expected) throws Exception {_		String output = getSystemOutput(parameters)___		long count = 0__		long checksum = 0___		for (String line : output.split(System.getProperty("line.separator"))) {_			if (line.length() > 0) {_				count++___				_				checksum += line.hashCode() & 0xffffffffL__			}_		}__		Assert.assertEquals(expected.getCount(), count)__		Assert.assertEquals(expected.getChecksum(), checksum)__	};simpler,variant,of,link,expected,output,string,string,that,sums,the,hash,code,of,each,line,of,output,param,parameters,algorithm,input,and,output,arguments,param,expected,expected,checksum,over,lines,of,output,throws,exception,on,error;protected,void,expected,output,checksum,string,parameters,checksum,expected,throws,exception,string,output,get,system,output,parameters,long,count,0,long,checksum,0,for,string,line,output,split,system,get,property,line,separator,if,line,length,0,count,checksum,line,hash,code,0xffffffff,l,assert,assert,equals,expected,get,count,count,assert,assert,equals,expected,get,checksum,checksum
DriverBaseITCase -> protected String regexSubstring(String input);1490990274;Generate a regular expression string by quoting the input string and_adding wildcard matchers to the beginning and end.__@param input source string_@return regex string;protected String regexSubstring(String input) {_		_		_		_		return "(?s).*" + Pattern.quote(input) + ".*"__	};generate,a,regular,expression,string,by,quoting,the,input,string,and,adding,wildcard,matchers,to,the,beginning,and,end,param,input,source,string,return,regex,string;protected,string,regex,substring,string,input,return,s,pattern,quote,input
DriverBaseITCase -> protected String regexSubstring(String input);1493649310;Generate a regular expression string by quoting the input string and_adding wildcard matchers to the beginning and end.__@param input source string_@return regex string;protected String regexSubstring(String input) {_		_		_		_		return "(?s).*" + Pattern.quote(input) + ".*"__	};generate,a,regular,expression,string,by,quoting,the,input,string,and,adding,wildcard,matchers,to,the,beginning,and,end,param,input,source,string,return,regex,string;protected,string,regex,substring,string,input,return,s,pattern,quote,input
DriverBaseITCase -> protected String regexSubstring(String input);1495819075;Generate a regular expression string by quoting the input string and_adding wildcard matchers to the beginning and end.__@param input source string_@return regex string;protected String regexSubstring(String input) {_		_		_		_		return "(?s).*" + Pattern.quote(input) + ".*"__	};generate,a,regular,expression,string,by,quoting,the,input,string,and,adding,wildcard,matchers,to,the,beginning,and,end,param,input,source,string,return,regex,string;protected,string,regex,substring,string,input,return,s,pattern,quote,input
DriverBaseITCase -> protected String regexSubstring(String input);1501079480;Generate a regular expression string by quoting the input string and_adding wildcard matchers to the beginning and end.__@param input source string_@return regex string;protected String regexSubstring(String input) {_		_		_		_		return "(?s).*" + Pattern.quote(input) + ".*"__	};generate,a,regular,expression,string,by,quoting,the,input,string,and,adding,wildcard,matchers,to,the,beginning,and,end,param,input,source,string,return,regex,string;protected,string,regex,substring,string,input,return,s,pattern,quote,input
DriverBaseITCase -> protected void expectedOutputFromException(String[] parameters, String expected, Class<? extends Throwable> exception) throws Exception;1493649310;Executes the driver with the provided arguments and compares the_exception and exception method with the given class and regular_expression.__@param parameters algorithm, input, and output arguments_@param expected expected standard output_@param exception expected exception_@throws Exception on error when not matching exception;protected void expectedOutputFromException(String[] parameters, String expected, Class<? extends Throwable> exception) throws Exception {_		expectedException.expect(exception)__		expectedException.expectMessage(RegexMatcher.matchesRegex(expected))___		getSystemOutput(parameters)__	};executes,the,driver,with,the,provided,arguments,and,compares,the,exception,and,exception,method,with,the,given,class,and,regular,expression,param,parameters,algorithm,input,and,output,arguments,param,expected,expected,standard,output,param,exception,expected,exception,throws,exception,on,error,when,not,matching,exception;protected,void,expected,output,from,exception,string,parameters,string,expected,class,extends,throwable,exception,throws,exception,expected,exception,expect,exception,expected,exception,expect,message,regex,matcher,matches,regex,expected,get,system,output,parameters
DriverBaseITCase -> protected void expectedOutputFromException(String[] parameters, String expected, Class<? extends Throwable> exception) throws Exception;1495819075;Executes the driver with the provided arguments and compares the_exception and exception method with the given class and regular_expression.__@param parameters algorithm, input, and output arguments_@param expected expected standard output_@param exception expected exception_@throws Exception on error when not matching exception;protected void expectedOutputFromException(String[] parameters, String expected, Class<? extends Throwable> exception) throws Exception {_		expectedException.expect(exception)__		expectedException.expectMessage(RegexMatcher.matchesRegex(expected))___		getSystemOutput(parameters)__	};executes,the,driver,with,the,provided,arguments,and,compares,the,exception,and,exception,method,with,the,given,class,and,regular,expression,param,parameters,algorithm,input,and,output,arguments,param,expected,expected,standard,output,param,exception,expected,exception,throws,exception,on,error,when,not,matching,exception;protected,void,expected,output,from,exception,string,parameters,string,expected,class,extends,throwable,exception,throws,exception,expected,exception,expect,exception,expected,exception,expect,message,regex,matcher,matches,regex,expected,get,system,output,parameters
DriverBaseITCase -> protected void expectedOutputFromException(String[] parameters, String expected, Class<? extends Throwable> exception) throws Exception;1501079480;Executes the driver with the provided arguments and compares the_exception and exception method with the given class and regular_expression.__@param parameters algorithm, input, and output arguments_@param expected expected standard output_@param exception expected exception_@throws Exception on error when not matching exception;protected void expectedOutputFromException(String[] parameters, String expected, Class<? extends Throwable> exception) throws Exception {_		expectedException.expect(exception)__		expectedException.expectMessage(RegexMatcher.matchesRegex(expected))___		getSystemOutput(parameters)__	};executes,the,driver,with,the,provided,arguments,and,compares,the,exception,and,exception,method,with,the,given,class,and,regular,expression,param,parameters,algorithm,input,and,output,arguments,param,expected,expected,standard,output,param,exception,expected,exception,throws,exception,on,error,when,not,matching,exception;protected,void,expected,output,from,exception,string,parameters,string,expected,class,extends,throwable,exception,throws,exception,expected,exception,expect,exception,expected,exception,expect,message,regex,matcher,matches,regex,expected,get,system,output,parameters
DriverBaseITCase -> protected void expectedOutput(String[] parameters, String expected) throws Exception;1490990274;Executes the driver with the provided arguments and compares the_standard output with the given regular expression.__@param parameters algorithm, input, and output arguments_@param expected expected standard output_@throws Exception on error;protected void expectedOutput(String[] parameters, String expected) throws Exception {_		String output = getSystemOutput(parameters)___		Assert.assertThat(output, RegexMatcher.matchesRegex(expected))__	};executes,the,driver,with,the,provided,arguments,and,compares,the,standard,output,with,the,given,regular,expression,param,parameters,algorithm,input,and,output,arguments,param,expected,expected,standard,output,throws,exception,on,error;protected,void,expected,output,string,parameters,string,expected,throws,exception,string,output,get,system,output,parameters,assert,assert,that,output,regex,matcher,matches,regex,expected
DriverBaseITCase -> protected void expectedOutput(String[] parameters, String expected) throws Exception;1493649310;Executes the driver with the provided arguments and compares the_standard output with the given regular expression.__@param parameters algorithm, input, and output arguments_@param expected expected standard output_@throws Exception on error;protected void expectedOutput(String[] parameters, String expected) throws Exception {_		String output = getSystemOutput(parameters)___		Assert.assertThat(output, RegexMatcher.matchesRegex(expected))__	};executes,the,driver,with,the,provided,arguments,and,compares,the,standard,output,with,the,given,regular,expression,param,parameters,algorithm,input,and,output,arguments,param,expected,expected,standard,output,throws,exception,on,error;protected,void,expected,output,string,parameters,string,expected,throws,exception,string,output,get,system,output,parameters,assert,assert,that,output,regex,matcher,matches,regex,expected
DriverBaseITCase -> protected void expectedOutput(String[] parameters, String expected) throws Exception;1495819075;Executes the driver with the provided arguments and compares the_standard output with the given regular expression.__@param parameters algorithm, input, and output arguments_@param expected expected standard output_@throws Exception on error;protected void expectedOutput(String[] parameters, String expected) throws Exception {_		String output = getSystemOutput(parameters)___		Assert.assertThat(output, RegexMatcher.matchesRegex(expected))__	};executes,the,driver,with,the,provided,arguments,and,compares,the,standard,output,with,the,given,regular,expression,param,parameters,algorithm,input,and,output,arguments,param,expected,expected,standard,output,throws,exception,on,error;protected,void,expected,output,string,parameters,string,expected,throws,exception,string,output,get,system,output,parameters,assert,assert,that,output,regex,matcher,matches,regex,expected
DriverBaseITCase -> protected void expectedOutput(String[] parameters, String expected) throws Exception;1501079480;Executes the driver with the provided arguments and compares the_standard output with the given regular expression.__@param parameters algorithm, input, and output arguments_@param expected expected standard output_@throws Exception on error;protected void expectedOutput(String[] parameters, String expected) throws Exception {_		String output = getSystemOutput(parameters)___		Assert.assertThat(output, RegexMatcher.matchesRegex(expected))__	};executes,the,driver,with,the,provided,arguments,and,compares,the,standard,output,with,the,given,regular,expression,param,parameters,algorithm,input,and,output,arguments,param,expected,expected,standard,output,throws,exception,on,error;protected,void,expected,output,string,parameters,string,expected,throws,exception,string,output,get,system,output,parameters,assert,assert,that,output,regex,matcher,matches,regex,expected
DriverBaseITCase -> private String getSystemOutput(String[] args) throws Exception;1490990274;Capture the command-line standard output from the driver execution.__@param args driver command-line arguments_@return standard output from driver execution_@throws Exception on error;private String getSystemOutput(String[] args) throws Exception {_		ByteArrayOutputStream output = new ByteArrayOutputStream()___		_		switch (mode) {_			case CLUSTER:_			case COLLECTION:_				args = (String[])ArrayUtils.add(args, "--__disable_object_reuse")__				break___			case CLUSTER_OBJECT_REUSE:_				_				break___			default:_				throw new FlinkRuntimeException("Unknown execution mode " + mode)__		}__		_		PrintStream stdout = System.out__		System.setOut(new PrintStream(output))___		Runner.main(args)___		_		System.setOut(stdout)___		return output.toString()__	};capture,the,command,line,standard,output,from,the,driver,execution,param,args,driver,command,line,arguments,return,standard,output,from,driver,execution,throws,exception,on,error;private,string,get,system,output,string,args,throws,exception,byte,array,output,stream,output,new,byte,array,output,stream,switch,mode,case,cluster,case,collection,args,string,array,utils,add,args,break,case,break,default,throw,new,flink,runtime,exception,unknown,execution,mode,mode,print,stream,stdout,system,out,system,set,out,new,print,stream,output,runner,main,args,system,set,out,stdout,return,output,to,string
DriverBaseITCase -> private String getSystemOutput(String[] args) throws Exception;1493649310;Capture the command-line standard output from the driver execution.__@param args driver command-line arguments_@return standard output from driver execution_@throws Exception on error;private String getSystemOutput(String[] args) throws Exception {_		ByteArrayOutputStream output = new ByteArrayOutputStream()___		_		switch (mode) {_			case CLUSTER:_			case COLLECTION:_				args = (String[])ArrayUtils.add(args, "--__disable_object_reuse")__				break___			case CLUSTER_OBJECT_REUSE:_				_				break___			default:_				throw new FlinkRuntimeException("Unknown execution mode " + mode)__		}__		_		PrintStream stdout = System.out__		System.setOut(new PrintStream(output))___		Runner.main(args)___		_		System.setOut(stdout)___		return output.toString()__	};capture,the,command,line,standard,output,from,the,driver,execution,param,args,driver,command,line,arguments,return,standard,output,from,driver,execution,throws,exception,on,error;private,string,get,system,output,string,args,throws,exception,byte,array,output,stream,output,new,byte,array,output,stream,switch,mode,case,cluster,case,collection,args,string,array,utils,add,args,break,case,break,default,throw,new,flink,runtime,exception,unknown,execution,mode,mode,print,stream,stdout,system,out,system,set,out,new,print,stream,output,runner,main,args,system,set,out,stdout,return,output,to,string
DriverBaseITCase -> private String getSystemOutput(String[] args) throws Exception;1495819075;Capture the command-line standard output from the driver execution.__@param args driver command-line arguments_@return standard output from driver execution_@throws Exception on error;private String getSystemOutput(String[] args) throws Exception {_		ByteArrayOutputStream output = new ByteArrayOutputStream()___		_		switch (mode) {_			case CLUSTER:_			case COLLECTION:_				args = ArrayUtils.add(args, "--__disable_object_reuse")__				break___			case CLUSTER_OBJECT_REUSE:_				_				break___			default:_				throw new FlinkRuntimeException("Unknown execution mode " + mode)__		}__		_		PrintStream stdout = System.out__		System.setOut(new PrintStream(output))___		Runner.main(args)___		_		System.setOut(stdout)___		return output.toString()__	};capture,the,command,line,standard,output,from,the,driver,execution,param,args,driver,command,line,arguments,return,standard,output,from,driver,execution,throws,exception,on,error;private,string,get,system,output,string,args,throws,exception,byte,array,output,stream,output,new,byte,array,output,stream,switch,mode,case,cluster,case,collection,args,array,utils,add,args,break,case,break,default,throw,new,flink,runtime,exception,unknown,execution,mode,mode,print,stream,stdout,system,out,system,set,out,new,print,stream,output,runner,main,args,system,set,out,stdout,return,output,to,string
DriverBaseITCase -> private String getSystemOutput(String[] args) throws Exception;1501079480;Capture the command-line standard output from the driver execution.__@param args driver command-line arguments_@return standard output from driver execution_@throws Exception on error;private String getSystemOutput(String[] args) throws Exception {_		ByteArrayOutputStream output = new ByteArrayOutputStream()___		_		switch (mode) {_			case CLUSTER:_			case COLLECTION:_				args = ArrayUtils.add(args, "--__disable_object_reuse")__				break___			case CLUSTER_OBJECT_REUSE:_				_				break___			default:_				throw new FlinkRuntimeException("Unknown execution mode " + mode)__		}__		_		PrintStream stdout = System.out__		System.setOut(new PrintStream(output))___		Runner.main(args)___		_		System.setOut(stdout)___		return output.toString()__	};capture,the,command,line,standard,output,from,the,driver,execution,param,args,driver,command,line,arguments,return,standard,output,from,driver,execution,throws,exception,on,error;private,string,get,system,output,string,args,throws,exception,byte,array,output,stream,output,new,byte,array,output,stream,switch,mode,case,cluster,case,collection,args,array,utils,add,args,break,case,break,default,throw,new,flink,runtime,exception,unknown,execution,mode,mode,print,stream,stdout,system,out,system,set,out,new,print,stream,output,runner,main,args,system,set,out,stdout,return,output,to,string
