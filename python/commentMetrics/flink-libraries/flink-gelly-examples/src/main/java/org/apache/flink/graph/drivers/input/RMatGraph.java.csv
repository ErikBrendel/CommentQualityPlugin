# id;timestamp;commentText;codeText;commentWords;codeWords
RMatGraph -> public Graph<K, NullValue, NullValue> create(ExecutionEnvironment env) throws Exception;1490973365;Generate the graph as configured.__@param env Flink execution environment_@return input graph;public Graph<K, NullValue, NullValue> create(ExecutionEnvironment env) throws Exception {_		int lp = littleParallelism.getValue().intValue()___		RandomGenerableFactory<JDKRandomGenerator> rnd = new JDKRandomGeneratorFactory()___		long vertexCount = 1L << scale.getValue()__		long edgeCount = vertexCount * edgeFactor.getValue()___		Graph<LongValue, NullValue, NullValue> rmatGraph = new org.apache.flink.graph.generator.RMatGraph<>(_				env, rnd, vertexCount, edgeCount)_			.setConstants(a.getValue().floatValue(), b.getValue().floatValue(), c.getValue().floatValue())_			.setNoise(noiseEnabled.getValue(), noise.getValue().floatValue())_			.setParallelism(lp)_			.generate()___		Graph<K, NullValue, NullValue> graph___		switch (type.getValue()) {_			case INTEGER:_				if (scale.getValue() > 32) {_					throw new ProgramParametrizationException(_						"Scale '" + scale.getValue() + "' must be no greater than 32 for type 'integer'")__				}_				graph = (Graph<K, NullValue, NullValue>) rmatGraph_					.run(new TranslateGraphIds<LongValue, IntValue, NullValue, NullValue>(new LongValueToUnsignedIntValue()))__				break___			case LONG:_				if (scale.getValue() > 64) {_					throw new ProgramParametrizationException(_						"Scale '" + scale.getValue() + "' must be no greater than 64 for type 'long'")__				}_				graph = (Graph<K, NullValue, NullValue>) rmatGraph__				break___			case STRING:_				_				if (scale.getValue() > 64) {_					throw new ProgramParametrizationException(_						"Scale '" + scale.getValue() + "' must be no greater than 64 for type 'string'")__				}_				graph = (Graph<K, NullValue, NullValue>) rmatGraph_					.run(new TranslateGraphIds<LongValue, StringValue, NullValue, NullValue>(new LongValueToStringValue()))__				break___			default:_				throw new ProgramParametrizationException("Unknown type '" + type.getValue() + "'")__		}__		_		_		return simplify.simplify(graph)__	};generate,the,graph,as,configured,param,env,flink,execution,environment,return,input,graph;public,graph,k,null,value,null,value,create,execution,environment,env,throws,exception,int,lp,little,parallelism,get,value,int,value,random,generable,factory,jdkrandom,generator,rnd,new,jdkrandom,generator,factory,long,vertex,count,1l,scale,get,value,long,edge,count,vertex,count,edge,factor,get,value,graph,long,value,null,value,null,value,rmat,graph,new,org,apache,flink,graph,generator,rmat,graph,env,rnd,vertex,count,edge,count,set,constants,a,get,value,float,value,b,get,value,float,value,c,get,value,float,value,set,noise,noise,enabled,get,value,noise,get,value,float,value,set,parallelism,lp,generate,graph,k,null,value,null,value,graph,switch,type,get,value,case,integer,if,scale,get,value,32,throw,new,program,parametrization,exception,scale,scale,get,value,must,be,no,greater,than,32,for,type,integer,graph,graph,k,null,value,null,value,rmat,graph,run,new,translate,graph,ids,long,value,int,value,null,value,null,value,new,long,value,to,unsigned,int,value,break,case,long,if,scale,get,value,64,throw,new,program,parametrization,exception,scale,scale,get,value,must,be,no,greater,than,64,for,type,long,graph,graph,k,null,value,null,value,rmat,graph,break,case,string,if,scale,get,value,64,throw,new,program,parametrization,exception,scale,scale,get,value,must,be,no,greater,than,64,for,type,string,graph,graph,k,null,value,null,value,rmat,graph,run,new,translate,graph,ids,long,value,string,value,null,value,null,value,new,long,value,to,string,value,break,default,throw,new,program,parametrization,exception,unknown,type,type,get,value,return,simplify,simplify,graph
RMatGraph -> public Graph<K, NullValue, NullValue> create(ExecutionEnvironment env) throws Exception;1492616695;Generate the graph as configured.__@param env Flink execution environment_@return input graph;public Graph<K, NullValue, NullValue> create(ExecutionEnvironment env) throws Exception {_		int lp = littleParallelism.getValue().intValue()___		RandomGenerableFactory<JDKRandomGenerator> rnd = new JDKRandomGeneratorFactory()___		long vertexCount = 1L << scale.getValue()__		long edgeCount = vertexCount * edgeFactor.getValue()___		Graph<LongValue, NullValue, NullValue> rmatGraph = new org.apache.flink.graph.generator.RMatGraph<>(_				env, rnd, vertexCount, edgeCount)_			.setConstants(a.getValue().floatValue(), b.getValue().floatValue(), c.getValue().floatValue())_			.setNoise(noiseEnabled.getValue(), noise.getValue().floatValue())_			.setParallelism(lp)_			.generate()___		Graph<K, NullValue, NullValue> graph___		switch (type.getValue()) {_			case INTEGER:_				if (scale.getValue() > 32) {_					throw new ProgramParametrizationException(_						"Scale '" + scale.getValue() + "' must be no greater than 32 for type 'integer'")__				}_				graph = (Graph<K, NullValue, NullValue>) rmatGraph_					.run(new TranslateGraphIds<LongValue, IntValue, NullValue, NullValue>(new LongValueToUnsignedIntValue()))__				break___			case LONG:_				if (scale.getValue() > 64) {_					throw new ProgramParametrizationException(_						"Scale '" + scale.getValue() + "' must be no greater than 64 for type 'long'")__				}_				graph = (Graph<K, NullValue, NullValue>) rmatGraph__				break___			case STRING:_				_				if (scale.getValue() > 64) {_					throw new ProgramParametrizationException(_						"Scale '" + scale.getValue() + "' must be no greater than 64 for type 'string'")__				}_				graph = (Graph<K, NullValue, NullValue>) rmatGraph_					.run(new TranslateGraphIds<LongValue, StringValue, NullValue, NullValue>(new LongValueToStringValue()))__				break___			default:_				throw new ProgramParametrizationException("Unknown type '" + type.getValue() + "'")__		}__		_		_		return simplify.simplify(graph)__	};generate,the,graph,as,configured,param,env,flink,execution,environment,return,input,graph;public,graph,k,null,value,null,value,create,execution,environment,env,throws,exception,int,lp,little,parallelism,get,value,int,value,random,generable,factory,jdkrandom,generator,rnd,new,jdkrandom,generator,factory,long,vertex,count,1l,scale,get,value,long,edge,count,vertex,count,edge,factor,get,value,graph,long,value,null,value,null,value,rmat,graph,new,org,apache,flink,graph,generator,rmat,graph,env,rnd,vertex,count,edge,count,set,constants,a,get,value,float,value,b,get,value,float,value,c,get,value,float,value,set,noise,noise,enabled,get,value,noise,get,value,float,value,set,parallelism,lp,generate,graph,k,null,value,null,value,graph,switch,type,get,value,case,integer,if,scale,get,value,32,throw,new,program,parametrization,exception,scale,scale,get,value,must,be,no,greater,than,32,for,type,integer,graph,graph,k,null,value,null,value,rmat,graph,run,new,translate,graph,ids,long,value,int,value,null,value,null,value,new,long,value,to,unsigned,int,value,break,case,long,if,scale,get,value,64,throw,new,program,parametrization,exception,scale,scale,get,value,must,be,no,greater,than,64,for,type,long,graph,graph,k,null,value,null,value,rmat,graph,break,case,string,if,scale,get,value,64,throw,new,program,parametrization,exception,scale,scale,get,value,must,be,no,greater,than,64,for,type,string,graph,graph,k,null,value,null,value,rmat,graph,run,new,translate,graph,ids,long,value,string,value,null,value,null,value,new,long,value,to,string,value,break,default,throw,new,program,parametrization,exception,unknown,type,type,get,value,return,simplify,simplify,graph
RMatGraph -> public Graph<LongValue, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception;1493649310;Generate the graph as configured.__@param env Flink execution environment_@return input graph;public Graph<LongValue, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception {_		int lp = littleParallelism.getValue().intValue()___		RandomGenerableFactory<JDKRandomGenerator> rnd = new JDKRandomGeneratorFactory()___		long vertexCount = 1L << scale.getValue()__		long edgeCount = vertexCount * edgeFactor.getValue()___		return new org.apache.flink.graph.generator.RMatGraph<>(_				env, rnd, vertexCount, edgeCount)_			.setConstants(a.getValue().floatValue(), b.getValue().floatValue(), c.getValue().floatValue())_			.setNoise(noiseEnabled.getValue(), noise.getValue().floatValue())_			.setParallelism(lp)_			.generate()__	};generate,the,graph,as,configured,param,env,flink,execution,environment,return,input,graph;public,graph,long,value,null,value,null,value,generate,execution,environment,env,throws,exception,int,lp,little,parallelism,get,value,int,value,random,generable,factory,jdkrandom,generator,rnd,new,jdkrandom,generator,factory,long,vertex,count,1l,scale,get,value,long,edge,count,vertex,count,edge,factor,get,value,return,new,org,apache,flink,graph,generator,rmat,graph,env,rnd,vertex,count,edge,count,set,constants,a,get,value,float,value,b,get,value,float,value,c,get,value,float,value,set,noise,noise,enabled,get,value,noise,get,value,float,value,set,parallelism,lp,generate
RMatGraph -> public Graph<LongValue, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception;1495819075;Generate the graph as configured.__@param env Flink execution environment_@return input graph;public Graph<LongValue, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception {_		int lp = littleParallelism.getValue().intValue()___		RandomGenerableFactory<JDKRandomGenerator> rnd = new JDKRandomGeneratorFactory()___		long vertexCount = 1L << scale.getValue()__		long edgeCount = vertexCount * edgeFactor.getValue()___		return new org.apache.flink.graph.generator.RMatGraph<>(_				env, rnd, vertexCount, edgeCount)_			.setConstants(a.getValue().floatValue(), b.getValue().floatValue(), c.getValue().floatValue())_			.setNoise(noiseEnabled.getValue(), noise.getValue().floatValue())_			.setParallelism(lp)_			.generate()__	};generate,the,graph,as,configured,param,env,flink,execution,environment,return,input,graph;public,graph,long,value,null,value,null,value,generate,execution,environment,env,throws,exception,int,lp,little,parallelism,get,value,int,value,random,generable,factory,jdkrandom,generator,rnd,new,jdkrandom,generator,factory,long,vertex,count,1l,scale,get,value,long,edge,count,vertex,count,edge,factor,get,value,return,new,org,apache,flink,graph,generator,rmat,graph,env,rnd,vertex,count,edge,count,set,constants,a,get,value,float,value,b,get,value,float,value,c,get,value,float,value,set,noise,noise,enabled,get,value,noise,get,value,float,value,set,parallelism,lp,generate
RMatGraph -> public Graph<LongValue, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception;1498733142;Generate the graph as configured.__@param env Flink execution environment_@return input graph;public Graph<LongValue, NullValue, NullValue> generate(ExecutionEnvironment env) throws Exception {_		int lp = littleParallelism.getValue().intValue()___		RandomGenerableFactory<JDKRandomGenerator> rnd = new JDKRandomGeneratorFactory()___		long vertexCount = 1L << scale.getValue()__		long edgeCount = vertexCount * edgeFactor.getValue()___		return new org.apache.flink.graph.generator.RMatGraph<>(_				env, rnd, vertexCount, edgeCount)_			.setConstants(a.getValue().floatValue(), b.getValue().floatValue(), c.getValue().floatValue())_			.setNoise(noiseEnabled.getValue(), noise.getValue().floatValue())_			.setParallelism(lp)_			.generate()__	};generate,the,graph,as,configured,param,env,flink,execution,environment,return,input,graph;public,graph,long,value,null,value,null,value,generate,execution,environment,env,throws,exception,int,lp,little,parallelism,get,value,int,value,random,generable,factory,jdkrandom,generator,rnd,new,jdkrandom,generator,factory,long,vertex,count,1l,scale,get,value,long,edge,count,vertex,count,edge,factor,get,value,return,new,org,apache,flink,graph,generator,rmat,graph,env,rnd,vertex,count,edge,count,set,constants,a,get,value,float,value,b,get,value,float,value,c,get,value,float,value,set,noise,noise,enabled,get,value,noise,get,value,float,value,set,parallelism,lp,generate
