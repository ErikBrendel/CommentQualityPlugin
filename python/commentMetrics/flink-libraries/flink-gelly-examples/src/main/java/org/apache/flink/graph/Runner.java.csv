# id;timestamp;commentText;codeText;commentWords;codeWords
Runner -> public Runner run() throws Exception;1500078951;Setup the Flink job with the graph input, algorithm, and output.__<p>To then execute the job call {@link #execute}.__@return this_@throws Exception on error;public Runner run() throws Exception {_		_		env = ExecutionEnvironment.getExecutionEnvironment()__		ExecutionConfig config = env.getConfig()___		_		config.disableForceAvro()__		config.disableForceKryo()___		config.setGlobalJobParameters(parameters)__		parameterize(this)___		_		try {_			this.configure(parameters)__		} catch (RuntimeException ex) {_			throw new ProgramParametrizationException(ex.getMessage())__		}__		_		if (disableObjectReuse.getValue()) {_			config.disableObjectReuse()__		} else {_			config.enableObjectReuse()__		}__		_		_		__		_		if (!parameters.has(ALGORITHM)) {_			throw new ProgramParametrizationException(getAlgorithmsListing())__		}__		String algorithmName = parameters.get(ALGORITHM)__		algorithm = driverFactory.get(algorithmName)___		if (algorithm == null) {_			throw new ProgramParametrizationException("Unknown algorithm name: " + algorithmName)__		}__		_		if (!parameters.has(INPUT)) {_			if (!parameters.has(OUTPUT)) {_				_				throw new ProgramParametrizationException(getAlgorithmUsage(algorithmName))__			}_			throw new ProgramParametrizationException("No input given")__		}__		parameterize(algorithm)___		String inputName = parameters.get(INPUT)__		Input input = inputFactory.get(inputName)___		if (input == null) {_			throw new ProgramParametrizationException("Unknown input type: " + inputName)__		}__		parameterize(input)___		_		if (!parameters.has(OUTPUT)) {_			throw new ProgramParametrizationException("No output given")__		}__		String outputName = parameters.get(OUTPUT)__		output = outputFactory.get(outputName)___		if (output == null) {_			throw new ProgramParametrizationException("Unknown output type: " + outputName)__		}__		parameterize(output)___		_		_		__		List<Transform> transforms = new ArrayList<>()___		if (input instanceof Transformable) {_			transforms.addAll(((Transformable) input).getTransformers())__		}__		if (algorithm instanceof Transformable) {_			transforms.addAll(((Transformable) algorithm).getTransformers())__		}__		for (Transform transform : transforms) {_			parameterize(transform)__		}__		_		if (parameters.getUnrequestedParameters().size() > 0) {_			throw new ProgramParametrizationException("Unrequested parameters: " + parameters.getUnrequestedParameters())__		}__		_		_		__		_		Graph graph = input.create(env)___		_		for (Transform transform : transforms) {_			graph = (Graph) transform.transformInput(graph)__		}__		_		result = algorithm.plan(graph)___		_		executionName = jobName.getValue() != null ? jobName.getValue() + ": " : ""___		executionName += input.getIdentity() + " ⇨ " + algorithmName + " ⇨ " + output.getName()___		if (transforms.size() > 0) {_			_			StringBuffer buffer = new StringBuffer(executionName).append(" [")___			for (Transform transform : transforms) {_				buffer.append(transform.getIdentity())__			}__			executionName = buffer.append("]").toString()__		}__		if (output == null) {_			throw new ProgramParametrizationException("Unknown output type: " + outputName)__		}__		try {_			output.configure(parameters)__		} catch (RuntimeException ex) {_			throw new ProgramParametrizationException(ex.getMessage())__		}__		if (result != null) {_			_			if (transforms.size() > 0) {_				Collections.reverse(transforms)__				for (Transform transform : transforms) {_					result = (DataSet) transform.transformResult(result)__				}_			}_		}__		return this__	};setup,the,flink,job,with,the,graph,input,algorithm,and,output,p,to,then,execute,the,job,call,link,execute,return,this,throws,exception,on,error;public,runner,run,throws,exception,env,execution,environment,get,execution,environment,execution,config,config,env,get,config,config,disable,force,avro,config,disable,force,kryo,config,set,global,job,parameters,parameters,parameterize,this,try,this,configure,parameters,catch,runtime,exception,ex,throw,new,program,parametrization,exception,ex,get,message,if,disable,object,reuse,get,value,config,disable,object,reuse,else,config,enable,object,reuse,if,parameters,has,algorithm,throw,new,program,parametrization,exception,get,algorithms,listing,string,algorithm,name,parameters,get,algorithm,algorithm,driver,factory,get,algorithm,name,if,algorithm,null,throw,new,program,parametrization,exception,unknown,algorithm,name,algorithm,name,if,parameters,has,input,if,parameters,has,output,throw,new,program,parametrization,exception,get,algorithm,usage,algorithm,name,throw,new,program,parametrization,exception,no,input,given,parameterize,algorithm,string,input,name,parameters,get,input,input,input,input,factory,get,input,name,if,input,null,throw,new,program,parametrization,exception,unknown,input,type,input,name,parameterize,input,if,parameters,has,output,throw,new,program,parametrization,exception,no,output,given,string,output,name,parameters,get,output,output,output,factory,get,output,name,if,output,null,throw,new,program,parametrization,exception,unknown,output,type,output,name,parameterize,output,list,transform,transforms,new,array,list,if,input,instanceof,transformable,transforms,add,all,transformable,input,get,transformers,if,algorithm,instanceof,transformable,transforms,add,all,transformable,algorithm,get,transformers,for,transform,transform,transforms,parameterize,transform,if,parameters,get,unrequested,parameters,size,0,throw,new,program,parametrization,exception,unrequested,parameters,parameters,get,unrequested,parameters,graph,graph,input,create,env,for,transform,transform,transforms,graph,graph,transform,transform,input,graph,result,algorithm,plan,graph,execution,name,job,name,get,value,null,job,name,get,value,execution,name,input,get,identity,algorithm,name,output,get,name,if,transforms,size,0,string,buffer,buffer,new,string,buffer,execution,name,append,for,transform,transform,transforms,buffer,append,transform,get,identity,execution,name,buffer,append,to,string,if,output,null,throw,new,program,parametrization,exception,unknown,output,type,output,name,try,output,configure,parameters,catch,runtime,exception,ex,throw,new,program,parametrization,exception,ex,get,message,if,result,null,if,transforms,size,0,collections,reverse,transforms,for,transform,transform,transforms,result,data,set,transform,transform,result,result,return,this
Runner -> public Runner run() throws Exception;1508150892;Setup the Flink job with the graph input, algorithm, and output.__<p>To then execute the job call {@link #execute}.__@return this_@throws Exception on error;public Runner run() throws Exception {_		_		env = ExecutionEnvironment.getExecutionEnvironment()__		ExecutionConfig config = env.getConfig()___		_		config.disableForceAvro()__		config.disableForceKryo()___		config.setGlobalJobParameters(parameters)__		parameterize(this)___		_		try {_			this.configure(parameters)__		} catch (RuntimeException ex) {_			throw new ProgramParametrizationException(ex.getMessage())__		}__		_		if (disableObjectReuse.getValue()) {_			config.disableObjectReuse()__		} else {_			config.enableObjectReuse()__		}__		_		_		__		_		if (!parameters.has(ALGORITHM)) {_			throw new ProgramParametrizationException(getAlgorithmsListing())__		}__		String algorithmName = parameters.get(ALGORITHM)__		algorithm = driverFactory.get(algorithmName)___		if (algorithm == null) {_			throw new ProgramParametrizationException("Unknown algorithm name: " + algorithmName)__		}__		_		if (!parameters.has(INPUT)) {_			if (!parameters.has(OUTPUT)) {_				_				throw new ProgramParametrizationException(getAlgorithmUsage(algorithmName))__			}_			throw new ProgramParametrizationException("No input given")__		}__		parameterize(algorithm)___		String inputName = parameters.get(INPUT)__		Input input = inputFactory.get(inputName)___		if (input == null) {_			throw new ProgramParametrizationException("Unknown input type: " + inputName)__		}__		parameterize(input)___		_		if (!parameters.has(OUTPUT)) {_			throw new ProgramParametrizationException("No output given")__		}__		String outputName = parameters.get(OUTPUT)__		output = outputFactory.get(outputName)___		if (output == null) {_			throw new ProgramParametrizationException("Unknown output type: " + outputName)__		}__		parameterize(output)___		_		_		__		List<Transform> transforms = new ArrayList<>()___		if (input instanceof Transformable) {_			transforms.addAll(((Transformable) input).getTransformers())__		}__		if (algorithm instanceof Transformable) {_			transforms.addAll(((Transformable) algorithm).getTransformers())__		}__		for (Transform transform : transforms) {_			parameterize(transform)__		}__		_		if (parameters.getUnrequestedParameters().size() > 0) {_			throw new ProgramParametrizationException("Unrequested parameters: " + parameters.getUnrequestedParameters())__		}__		_		_		__		_		Graph graph = input.create(env)___		_		for (Transform transform : transforms) {_			graph = (Graph) transform.transformInput(graph)__		}__		_		result = algorithm.plan(graph)___		_		executionName = jobName.getValue() != null ? jobName.getValue() + ": " : ""___		executionName += input.getIdentity() + " ⇨ " + algorithmName + " ⇨ " + output.getName()___		if (transforms.size() > 0) {_			_			StringBuffer buffer = new StringBuffer(executionName).append(" [")___			for (Transform transform : transforms) {_				buffer.append(transform.getIdentity())__			}__			executionName = buffer.append("]").toString()__		}__		if (output == null) {_			throw new ProgramParametrizationException("Unknown output type: " + outputName)__		}__		try {_			output.configure(parameters)__		} catch (RuntimeException ex) {_			throw new ProgramParametrizationException(ex.getMessage())__		}__		if (result != null) {_			_			if (transforms.size() > 0) {_				Collections.reverse(transforms)__				for (Transform transform : transforms) {_					result = (DataSet) transform.transformResult(result)__				}_			}_		}__		return this__	};setup,the,flink,job,with,the,graph,input,algorithm,and,output,p,to,then,execute,the,job,call,link,execute,return,this,throws,exception,on,error;public,runner,run,throws,exception,env,execution,environment,get,execution,environment,execution,config,config,env,get,config,config,disable,force,avro,config,disable,force,kryo,config,set,global,job,parameters,parameters,parameterize,this,try,this,configure,parameters,catch,runtime,exception,ex,throw,new,program,parametrization,exception,ex,get,message,if,disable,object,reuse,get,value,config,disable,object,reuse,else,config,enable,object,reuse,if,parameters,has,algorithm,throw,new,program,parametrization,exception,get,algorithms,listing,string,algorithm,name,parameters,get,algorithm,algorithm,driver,factory,get,algorithm,name,if,algorithm,null,throw,new,program,parametrization,exception,unknown,algorithm,name,algorithm,name,if,parameters,has,input,if,parameters,has,output,throw,new,program,parametrization,exception,get,algorithm,usage,algorithm,name,throw,new,program,parametrization,exception,no,input,given,parameterize,algorithm,string,input,name,parameters,get,input,input,input,input,factory,get,input,name,if,input,null,throw,new,program,parametrization,exception,unknown,input,type,input,name,parameterize,input,if,parameters,has,output,throw,new,program,parametrization,exception,no,output,given,string,output,name,parameters,get,output,output,output,factory,get,output,name,if,output,null,throw,new,program,parametrization,exception,unknown,output,type,output,name,parameterize,output,list,transform,transforms,new,array,list,if,input,instanceof,transformable,transforms,add,all,transformable,input,get,transformers,if,algorithm,instanceof,transformable,transforms,add,all,transformable,algorithm,get,transformers,for,transform,transform,transforms,parameterize,transform,if,parameters,get,unrequested,parameters,size,0,throw,new,program,parametrization,exception,unrequested,parameters,parameters,get,unrequested,parameters,graph,graph,input,create,env,for,transform,transform,transforms,graph,graph,transform,transform,input,graph,result,algorithm,plan,graph,execution,name,job,name,get,value,null,job,name,get,value,execution,name,input,get,identity,algorithm,name,output,get,name,if,transforms,size,0,string,buffer,buffer,new,string,buffer,execution,name,append,for,transform,transform,transforms,buffer,append,transform,get,identity,execution,name,buffer,append,to,string,if,output,null,throw,new,program,parametrization,exception,unknown,output,type,output,name,try,output,configure,parameters,catch,runtime,exception,ex,throw,new,program,parametrization,exception,ex,get,message,if,result,null,if,transforms,size,0,collections,reverse,transforms,for,transform,transform,transforms,result,data,set,transform,transform,result,result,return,this
Runner -> private static String getAlgorithmsListing();1477509530;List available algorithms. This is displayed to the user when no valid_algorithm is given in the program parameterization.__@return usage string listing available algorithms;private static String getAlgorithmsListing() {_		StrBuilder strBuilder = new StrBuilder()___		strBuilder_			.appendNewLine()_			.appendln("Select an algorithm to view usage: flink run opt/flink-gelly-examples_<version>.jar --algorithm <algorithm>")_			.appendNewLine()_			.appendln("Available algorithms:")___		for (Driver algorithm : driverFactory) {_			strBuilder.append("  ")_				.appendFixedWidthPadRight(algorithm.getName(), 30, ' ')_				.append(algorithm.getShortDescription()).appendNewLine()__		}__		return strBuilder.toString()__	};list,available,algorithms,this,is,displayed,to,the,user,when,no,valid,algorithm,is,given,in,the,program,parameterization,return,usage,string,listing,available,algorithms;private,static,string,get,algorithms,listing,str,builder,str,builder,new,str,builder,str,builder,append,new,line,appendln,select,an,algorithm,to,view,usage,flink,run,opt,flink,gelly,version,jar,algorithm,algorithm,append,new,line,appendln,available,algorithms,for,driver,algorithm,driver,factory,str,builder,append,append,fixed,width,pad,right,algorithm,get,name,30,append,algorithm,get,short,description,append,new,line,return,str,builder,to,string
Runner -> private static String getAlgorithmsListing();1492106849;List available algorithms. This is displayed to the user when no valid_algorithm is given in the program parameterization.__@return usage string listing available algorithms;private static String getAlgorithmsListing() {_		StrBuilder strBuilder = new StrBuilder()___		strBuilder_			.appendNewLine()_			.appendln("Select an algorithm to view usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm <algorithm>")_			.appendNewLine()_			.appendln("Available algorithms:")___		for (Driver algorithm : driverFactory) {_			strBuilder.append("  ")_				.appendFixedWidthPadRight(algorithm.getName(), 30, ' ')_				.append(algorithm.getShortDescription()).appendNewLine()__		}__		return strBuilder.toString()__	};list,available,algorithms,this,is,displayed,to,the,user,when,no,valid,algorithm,is,given,in,the,program,parameterization,return,usage,string,listing,available,algorithms;private,static,string,get,algorithms,listing,str,builder,str,builder,new,str,builder,str,builder,append,new,line,appendln,select,an,algorithm,to,view,usage,flink,run,examples,flink,gelly,version,jar,algorithm,algorithm,append,new,line,appendln,available,algorithms,for,driver,algorithm,driver,factory,str,builder,append,append,fixed,width,pad,right,algorithm,get,name,30,append,algorithm,get,short,description,append,new,line,return,str,builder,to,string
Runner -> private static String getAlgorithmsListing();1492522066;List available algorithms. This is displayed to the user when no valid_algorithm is given in the program parameterization.__@return usage string listing available algorithms;private static String getAlgorithmsListing() {_		StrBuilder strBuilder = new StrBuilder()___		strBuilder_			.appendNewLine()_			.appendln("Select an algorithm to view usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm <algorithm>")_			.appendNewLine()_			.appendln("Available algorithms:")___		for (Driver algorithm : driverFactory) {_			strBuilder.append("  ")_				.appendFixedWidthPadRight(algorithm.getName(), 30, ' ')_				.append(algorithm.getShortDescription()).appendNewLine()__		}__		return strBuilder.toString()__	};list,available,algorithms,this,is,displayed,to,the,user,when,no,valid,algorithm,is,given,in,the,program,parameterization,return,usage,string,listing,available,algorithms;private,static,string,get,algorithms,listing,str,builder,str,builder,new,str,builder,str,builder,append,new,line,appendln,select,an,algorithm,to,view,usage,flink,run,examples,flink,gelly,version,jar,algorithm,algorithm,append,new,line,appendln,available,algorithms,for,driver,algorithm,driver,factory,str,builder,append,append,fixed,width,pad,right,algorithm,get,name,30,append,algorithm,get,short,description,append,new,line,return,str,builder,to,string
Runner -> private static String getAlgorithmsListing();1493296913;List available algorithms. This is displayed to the user when no valid_algorithm is given in the program parameterization.__@return usage string listing available algorithms;private static String getAlgorithmsListing() {_		StrBuilder strBuilder = new StrBuilder()___		strBuilder_			.appendNewLine()_			.appendln("Select an algorithm to view usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm <algorithm>")_			.appendNewLine()_			.appendln("Available algorithms:")___		for (Driver algorithm : driverFactory) {_			strBuilder.append("  ")_				.appendFixedWidthPadRight(algorithm.getName(), 30, ' ')_				.append(algorithm.getShortDescription()).appendNewLine()__		}__		return strBuilder.toString()__	};list,available,algorithms,this,is,displayed,to,the,user,when,no,valid,algorithm,is,given,in,the,program,parameterization,return,usage,string,listing,available,algorithms;private,static,string,get,algorithms,listing,str,builder,str,builder,new,str,builder,str,builder,append,new,line,appendln,select,an,algorithm,to,view,usage,flink,run,examples,flink,gelly,version,jar,algorithm,algorithm,append,new,line,appendln,available,algorithms,for,driver,algorithm,driver,factory,str,builder,append,append,fixed,width,pad,right,algorithm,get,name,30,append,algorithm,get,short,description,append,new,line,return,str,builder,to,string
Runner -> private static String getAlgorithmsListing();1495653033;List available algorithms. This is displayed to the user when no valid_algorithm is given in the program parameterization.__@return usage string listing available algorithms;private static String getAlgorithmsListing() {_		StrBuilder strBuilder = new StrBuilder()___		strBuilder_			.appendNewLine()_			.appendln("Select an algorithm to view usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm <algorithm>")_			.appendNewLine()_			.appendln("Available algorithms:")___		for (Driver algorithm : driverFactory) {_			strBuilder.append("  ")_				.appendFixedWidthPadRight(algorithm.getName(), 30, ' ')_				.append(algorithm.getShortDescription()).appendNewLine()__		}__		return strBuilder.toString()__	};list,available,algorithms,this,is,displayed,to,the,user,when,no,valid,algorithm,is,given,in,the,program,parameterization,return,usage,string,listing,available,algorithms;private,static,string,get,algorithms,listing,str,builder,str,builder,new,str,builder,str,builder,append,new,line,appendln,select,an,algorithm,to,view,usage,flink,run,examples,flink,gelly,version,jar,algorithm,algorithm,append,new,line,appendln,available,algorithms,for,driver,algorithm,driver,factory,str,builder,append,append,fixed,width,pad,right,algorithm,get,name,30,append,algorithm,get,short,description,append,new,line,return,str,builder,to,string
Runner -> private static String getAlgorithmsListing();1498055157;List available algorithms. This is displayed to the user when no valid_algorithm is given in the program parameterization.__@return usage string listing available algorithms;private static String getAlgorithmsListing() {_		StrBuilder strBuilder = new StrBuilder()___		strBuilder_			.appendNewLine()_			.appendln("Select an algorithm to view usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm <algorithm>")_			.appendNewLine()_			.appendln("Available algorithms:")___		for (Driver algorithm : driverFactory) {_			strBuilder.append("  ")_				.appendFixedWidthPadRight(algorithm.getName(), 30, ' ')_				.append(algorithm.getShortDescription()).appendNewLine()__		}__		return strBuilder.toString()__	};list,available,algorithms,this,is,displayed,to,the,user,when,no,valid,algorithm,is,given,in,the,program,parameterization,return,usage,string,listing,available,algorithms;private,static,string,get,algorithms,listing,str,builder,str,builder,new,str,builder,str,builder,append,new,line,appendln,select,an,algorithm,to,view,usage,flink,run,examples,flink,gelly,version,jar,algorithm,algorithm,append,new,line,appendln,available,algorithms,for,driver,algorithm,driver,factory,str,builder,append,append,fixed,width,pad,right,algorithm,get,name,30,append,algorithm,get,short,description,append,new,line,return,str,builder,to,string
Runner -> private static String getAlgorithmsListing();1498231743;List available algorithms. This is displayed to the user when no valid_algorithm is given in the program parameterization.__@return usage string listing available algorithms;private static String getAlgorithmsListing() {_		StrBuilder strBuilder = new StrBuilder()___		strBuilder_			.appendNewLine()_			.appendln("Select an algorithm to view usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm <algorithm>")_			.appendNewLine()_			.appendln("Available algorithms:")___		for (Driver algorithm : driverFactory) {_			strBuilder.append("  ")_				.appendFixedWidthPadRight(algorithm.getName(), 30, ' ')_				.append(algorithm.getShortDescription()).appendNewLine()__		}__		return strBuilder.toString()__	};list,available,algorithms,this,is,displayed,to,the,user,when,no,valid,algorithm,is,given,in,the,program,parameterization,return,usage,string,listing,available,algorithms;private,static,string,get,algorithms,listing,str,builder,str,builder,new,str,builder,str,builder,append,new,line,appendln,select,an,algorithm,to,view,usage,flink,run,examples,flink,gelly,version,jar,algorithm,algorithm,append,new,line,appendln,available,algorithms,for,driver,algorithm,driver,factory,str,builder,append,append,fixed,width,pad,right,algorithm,get,name,30,append,algorithm,get,short,description,append,new,line,return,str,builder,to,string
Runner -> private static String getAlgorithmsListing();1499288286;List available algorithms. This is displayed to the user when no valid_algorithm is given in the program parameterization.__@return usage string listing available algorithms;private static String getAlgorithmsListing() {_		StrBuilder strBuilder = new StrBuilder()___		strBuilder_			.appendNewLine()_			.appendln("Select an algorithm to view usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm <algorithm>")_			.appendNewLine()_			.appendln("Available algorithms:")___		for (Driver algorithm : driverFactory) {_			strBuilder.append("  ")_				.appendFixedWidthPadRight(algorithm.getName(), 30, ' ')_				.append(algorithm.getShortDescription()).appendNewLine()__		}__		return strBuilder.toString()__	};list,available,algorithms,this,is,displayed,to,the,user,when,no,valid,algorithm,is,given,in,the,program,parameterization,return,usage,string,listing,available,algorithms;private,static,string,get,algorithms,listing,str,builder,str,builder,new,str,builder,str,builder,append,new,line,appendln,select,an,algorithm,to,view,usage,flink,run,examples,flink,gelly,version,jar,algorithm,algorithm,append,new,line,appendln,available,algorithms,for,driver,algorithm,driver,factory,str,builder,append,append,fixed,width,pad,right,algorithm,get,name,30,append,algorithm,get,short,description,append,new,line,return,str,builder,to,string
Runner -> private static String getAlgorithmsListing();1500078951;List available algorithms. This is displayed to the user when no valid_algorithm is given in the program parameterization.__@return usage string listing available algorithms;private static String getAlgorithmsListing() {_		StrBuilder strBuilder = new StrBuilder()___		strBuilder_			.appendNewLine()_			.appendln("Select an algorithm to view usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm <algorithm>")_			.appendNewLine()_			.appendln("Available algorithms:")___		for (Driver algorithm : driverFactory) {_			strBuilder.append("  ")_				.appendFixedWidthPadRight(algorithm.getName(), 30, ' ')_				.append(algorithm.getShortDescription()).appendNewLine()__		}__		return strBuilder.toString()__	};list,available,algorithms,this,is,displayed,to,the,user,when,no,valid,algorithm,is,given,in,the,program,parameterization,return,usage,string,listing,available,algorithms;private,static,string,get,algorithms,listing,str,builder,str,builder,new,str,builder,str,builder,append,new,line,appendln,select,an,algorithm,to,view,usage,flink,run,examples,flink,gelly,version,jar,algorithm,algorithm,append,new,line,appendln,available,algorithms,for,driver,algorithm,driver,factory,str,builder,append,append,fixed,width,pad,right,algorithm,get,name,30,append,algorithm,get,short,description,append,new,line,return,str,builder,to,string
Runner -> private static String getAlgorithmsListing();1508150892;List available algorithms. This is displayed to the user when no valid_algorithm is given in the program parameterization.__@return usage string listing available algorithms;private static String getAlgorithmsListing() {_		StrBuilder strBuilder = new StrBuilder()___		strBuilder_			.appendNewLine()_			.appendln("Select an algorithm to view usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm <algorithm>")_			.appendNewLine()_			.appendln("Available algorithms:")___		for (Driver algorithm : driverFactory) {_			strBuilder.append("  ")_				.appendFixedWidthPadRight(algorithm.getName(), 30, ' ')_				.append(algorithm.getShortDescription()).appendNewLine()__		}__		return strBuilder.toString()__	};list,available,algorithms,this,is,displayed,to,the,user,when,no,valid,algorithm,is,given,in,the,program,parameterization,return,usage,string,listing,available,algorithms;private,static,string,get,algorithms,listing,str,builder,str,builder,new,str,builder,str,builder,append,new,line,appendln,select,an,algorithm,to,view,usage,flink,run,examples,flink,gelly,version,jar,algorithm,algorithm,append,new,line,appendln,available,algorithms,for,driver,algorithm,driver,factory,str,builder,append,append,fixed,width,pad,right,algorithm,get,name,30,append,algorithm,get,short,description,append,new,line,return,str,builder,to,string
Runner -> private static void writeJobDetails(ExecutionEnvironment env, String jobDetailsPath) throws IOException;1498055157;Write the following job details as a JSON encoded file: runtime environment_job ID, runtime, parameters, and accumulators.__@param env the execution environment_@param jobDetailsPath filesystem path to write job details_@throws IOException on error writing to jobDetailsPath;private static void writeJobDetails(ExecutionEnvironment env, String jobDetailsPath) throws IOException {_		JobExecutionResult result = env.getLastJobExecutionResult()___		File jsonFile = new File(jobDetailsPath)___		try (JsonGenerator json = new JsonFactory().createGenerator(jsonFile, JsonEncoding.UTF8)) {_			json.writeStartObject()___			json.writeObjectFieldStart("Apache Flink")__			json.writeStringField("version", EnvironmentInformation.getVersion())__			json.writeStringField("commit ID", EnvironmentInformation.getRevisionInformation().commitId)__			json.writeStringField("commit date", EnvironmentInformation.getRevisionInformation().commitDate)__			json.writeEndObject()___			json.writeStringField("job_id", result.getJobID().toString())__			json.writeNumberField("runtime_ms", result.getNetRuntime())___			json.writeObjectFieldStart("parameters")__			for (Map.Entry<String, String> entry : env.getConfig().getGlobalJobParameters().toMap().entrySet()) {_				json.writeStringField(entry.getKey(), entry.getValue())__			}_			json.writeEndObject()___			json.writeObjectFieldStart("accumulators")__			for (Map.Entry<String, Object> entry : result.getAllAccumulatorResults().entrySet()) {_				json.writeStringField(entry.getKey(), entry.getValue().toString())__			}_			json.writeEndObject()___			json.writeEndObject()__		}_	};write,the,following,job,details,as,a,json,encoded,file,runtime,environment,job,id,runtime,parameters,and,accumulators,param,env,the,execution,environment,param,job,details,path,filesystem,path,to,write,job,details,throws,ioexception,on,error,writing,to,job,details,path;private,static,void,write,job,details,execution,environment,env,string,job,details,path,throws,ioexception,job,execution,result,result,env,get,last,job,execution,result,file,json,file,new,file,job,details,path,try,json,generator,json,new,json,factory,create,generator,json,file,json,encoding,utf8,json,write,start,object,json,write,object,field,start,apache,flink,json,write,string,field,version,environment,information,get,version,json,write,string,field,commit,id,environment,information,get,revision,information,commit,id,json,write,string,field,commit,date,environment,information,get,revision,information,commit,date,json,write,end,object,json,write,string,field,result,get,job,id,to,string,json,write,number,field,result,get,net,runtime,json,write,object,field,start,parameters,for,map,entry,string,string,entry,env,get,config,get,global,job,parameters,to,map,entry,set,json,write,string,field,entry,get,key,entry,get,value,json,write,end,object,json,write,object,field,start,accumulators,for,map,entry,string,object,entry,result,get,all,accumulator,results,entry,set,json,write,string,field,entry,get,key,entry,get,value,to,string,json,write,end,object,json,write,end,object
Runner -> private static void writeJobDetails(ExecutionEnvironment env, String jobDetailsPath) throws IOException;1499288286;Write the following job details as a JSON encoded file: runtime environment_job ID, runtime, parameters, and accumulators.__@param env the execution environment_@param jobDetailsPath filesystem path to write job details_@throws IOException on error writing to jobDetailsPath;private static void writeJobDetails(ExecutionEnvironment env, String jobDetailsPath) throws IOException {_		JobExecutionResult result = env.getLastJobExecutionResult()___		File jsonFile = new File(jobDetailsPath)___		try (JsonGenerator json = new JsonFactory().createGenerator(jsonFile, JsonEncoding.UTF8)) {_			json.writeStartObject()___			json.writeObjectFieldStart("Apache Flink")__			json.writeStringField("version", EnvironmentInformation.getVersion())__			json.writeStringField("commit ID", EnvironmentInformation.getRevisionInformation().commitId)__			json.writeStringField("commit date", EnvironmentInformation.getRevisionInformation().commitDate)__			json.writeEndObject()___			json.writeStringField("job_id", result.getJobID().toString())__			json.writeNumberField("runtime_ms", result.getNetRuntime())___			json.writeObjectFieldStart("parameters")__			for (Map.Entry<String, String> entry : env.getConfig().getGlobalJobParameters().toMap().entrySet()) {_				json.writeStringField(entry.getKey(), entry.getValue())__			}_			json.writeEndObject()___			json.writeObjectFieldStart("accumulators")__			for (Map.Entry<String, Object> entry : result.getAllAccumulatorResults().entrySet()) {_				json.writeStringField(entry.getKey(), entry.getValue().toString())__			}_			json.writeEndObject()___			json.writeEndObject()__		}_	};write,the,following,job,details,as,a,json,encoded,file,runtime,environment,job,id,runtime,parameters,and,accumulators,param,env,the,execution,environment,param,job,details,path,filesystem,path,to,write,job,details,throws,ioexception,on,error,writing,to,job,details,path;private,static,void,write,job,details,execution,environment,env,string,job,details,path,throws,ioexception,job,execution,result,result,env,get,last,job,execution,result,file,json,file,new,file,job,details,path,try,json,generator,json,new,json,factory,create,generator,json,file,json,encoding,utf8,json,write,start,object,json,write,object,field,start,apache,flink,json,write,string,field,version,environment,information,get,version,json,write,string,field,commit,id,environment,information,get,revision,information,commit,id,json,write,string,field,commit,date,environment,information,get,revision,information,commit,date,json,write,end,object,json,write,string,field,result,get,job,id,to,string,json,write,number,field,result,get,net,runtime,json,write,object,field,start,parameters,for,map,entry,string,string,entry,env,get,config,get,global,job,parameters,to,map,entry,set,json,write,string,field,entry,get,key,entry,get,value,json,write,end,object,json,write,object,field,start,accumulators,for,map,entry,string,object,entry,result,get,all,accumulator,results,entry,set,json,write,string,field,entry,get,key,entry,get,value,to,string,json,write,end,object,json,write,end,object
Runner -> private static void writeJobDetails(ExecutionEnvironment env, String jobDetailsPath) throws IOException;1500078951;Write the following job details as a JSON encoded file: runtime environment_job ID, runtime, parameters, and accumulators.__@param env the execution environment_@param jobDetailsPath filesystem path to write job details_@throws IOException on error writing to jobDetailsPath;private static void writeJobDetails(ExecutionEnvironment env, String jobDetailsPath) throws IOException {_		JobExecutionResult result = env.getLastJobExecutionResult()___		File jsonFile = new File(jobDetailsPath)___		try (JsonGenerator json = new JsonFactory().createGenerator(jsonFile, JsonEncoding.UTF8)) {_			json.writeStartObject()___			json.writeObjectFieldStart("Apache Flink")__			json.writeStringField("version", EnvironmentInformation.getVersion())__			json.writeStringField("commit ID", EnvironmentInformation.getRevisionInformation().commitId)__			json.writeStringField("commit date", EnvironmentInformation.getRevisionInformation().commitDate)__			json.writeEndObject()___			json.writeStringField("job_id", result.getJobID().toString())__			json.writeNumberField("runtime_ms", result.getNetRuntime())___			json.writeObjectFieldStart("parameters")__			for (Map.Entry<String, String> entry : env.getConfig().getGlobalJobParameters().toMap().entrySet()) {_				json.writeStringField(entry.getKey(), entry.getValue())__			}_			json.writeEndObject()___			json.writeObjectFieldStart("accumulators")__			for (Map.Entry<String, Object> entry : result.getAllAccumulatorResults().entrySet()) {_				json.writeStringField(entry.getKey(), entry.getValue().toString())__			}_			json.writeEndObject()___			json.writeEndObject()__		}_	};write,the,following,job,details,as,a,json,encoded,file,runtime,environment,job,id,runtime,parameters,and,accumulators,param,env,the,execution,environment,param,job,details,path,filesystem,path,to,write,job,details,throws,ioexception,on,error,writing,to,job,details,path;private,static,void,write,job,details,execution,environment,env,string,job,details,path,throws,ioexception,job,execution,result,result,env,get,last,job,execution,result,file,json,file,new,file,job,details,path,try,json,generator,json,new,json,factory,create,generator,json,file,json,encoding,utf8,json,write,start,object,json,write,object,field,start,apache,flink,json,write,string,field,version,environment,information,get,version,json,write,string,field,commit,id,environment,information,get,revision,information,commit,id,json,write,string,field,commit,date,environment,information,get,revision,information,commit,date,json,write,end,object,json,write,string,field,result,get,job,id,to,string,json,write,number,field,result,get,net,runtime,json,write,object,field,start,parameters,for,map,entry,string,string,entry,env,get,config,get,global,job,parameters,to,map,entry,set,json,write,string,field,entry,get,key,entry,get,value,json,write,end,object,json,write,object,field,start,accumulators,for,map,entry,string,object,entry,result,get,all,accumulator,results,entry,set,json,write,string,field,entry,get,key,entry,get,value,to,string,json,write,end,object,json,write,end,object
Runner -> private static void writeJobDetails(ExecutionEnvironment env, String jobDetailsPath) throws IOException;1508150892;Write the following job details as a JSON encoded file: runtime environment_job ID, runtime, parameters, and accumulators.__@param env the execution environment_@param jobDetailsPath filesystem path to write job details_@throws IOException on error writing to jobDetailsPath;private static void writeJobDetails(ExecutionEnvironment env, String jobDetailsPath) throws IOException {_		JobExecutionResult result = env.getLastJobExecutionResult()___		File jsonFile = new File(jobDetailsPath)___		try (JsonGenerator json = new JsonFactory().createGenerator(jsonFile, JsonEncoding.UTF8)) {_			json.writeStartObject()___			json.writeObjectFieldStart("Apache Flink")__			json.writeStringField("version", EnvironmentInformation.getVersion())__			json.writeStringField("commit ID", EnvironmentInformation.getRevisionInformation().commitId)__			json.writeStringField("commit date", EnvironmentInformation.getRevisionInformation().commitDate)__			json.writeEndObject()___			json.writeStringField("job_id", result.getJobID().toString())__			json.writeNumberField("runtime_ms", result.getNetRuntime())___			json.writeObjectFieldStart("parameters")__			for (Map.Entry<String, String> entry : env.getConfig().getGlobalJobParameters().toMap().entrySet()) {_				json.writeStringField(entry.getKey(), entry.getValue())__			}_			json.writeEndObject()___			json.writeObjectFieldStart("accumulators")__			for (Map.Entry<String, Object> entry : result.getAllAccumulatorResults().entrySet()) {_				json.writeStringField(entry.getKey(), entry.getValue().toString())__			}_			json.writeEndObject()___			json.writeEndObject()__		}_	};write,the,following,job,details,as,a,json,encoded,file,runtime,environment,job,id,runtime,parameters,and,accumulators,param,env,the,execution,environment,param,job,details,path,filesystem,path,to,write,job,details,throws,ioexception,on,error,writing,to,job,details,path;private,static,void,write,job,details,execution,environment,env,string,job,details,path,throws,ioexception,job,execution,result,result,env,get,last,job,execution,result,file,json,file,new,file,job,details,path,try,json,generator,json,new,json,factory,create,generator,json,file,json,encoding,utf8,json,write,start,object,json,write,object,field,start,apache,flink,json,write,string,field,version,environment,information,get,version,json,write,string,field,commit,id,environment,information,get,revision,information,commit,id,json,write,string,field,commit,date,environment,information,get,revision,information,commit,date,json,write,end,object,json,write,string,field,result,get,job,id,to,string,json,write,number,field,result,get,net,runtime,json,write,object,field,start,parameters,for,map,entry,string,string,entry,env,get,config,get,global,job,parameters,to,map,entry,set,json,write,string,field,entry,get,key,entry,get,value,json,write,end,object,json,write,object,field,start,accumulators,for,map,entry,string,object,entry,result,get,all,accumulator,results,entry,set,json,write,string,field,entry,get,key,entry,get,value,to,string,json,write,end,object,json,write,end,object
Runner -> public ExecutionEnvironment getExecutionEnvironment();1500078951;Get the ExecutionEnvironment. The ExecutionEnvironment is only available_after calling {@link Runner#run()}.__@return the ExecutionEnvironment;public ExecutionEnvironment getExecutionEnvironment() {_		return env__	};get,the,execution,environment,the,execution,environment,is,only,available,after,calling,link,runner,run,return,the,execution,environment;public,execution,environment,get,execution,environment,return,env
Runner -> public ExecutionEnvironment getExecutionEnvironment();1508150892;Get the ExecutionEnvironment. The ExecutionEnvironment is only available_after calling {@link Runner#run()}.__@return the ExecutionEnvironment;public ExecutionEnvironment getExecutionEnvironment() {_		return env__	};get,the,execution,environment,the,execution,environment,is,only,available,after,calling,link,runner,run,return,the,execution,environment;public,execution,environment,get,execution,environment,return,env
Runner -> private static String getAlgorithmUsage(String algorithmName);1477509530;Display the usage for the given algorithm. This includes options for all_compatible inputs, the selected algorithm, and outputs implemented by_the selected algorithm.__@param algorithmName unique identifier of the selected algorithm_@return usage string for the given algorithm;private static String getAlgorithmUsage(String algorithmName) {_		StrBuilder strBuilder = new StrBuilder()___		Driver algorithm = driverFactory.get(algorithmName)___		strBuilder_			.appendNewLine()_			.appendNewLine()_			.appendln(algorithm.getLongDescription())_			.appendNewLine()_			.append("usage: flink run opt/flink-gelly-examples_<version>.jar --algorithm ")_			.append(algorithmName)_			.append(" [algorithm options] --input <input> [input options] --output <output> [output options]")_			.appendNewLine()_			.appendNewLine()_			.appendln("Available inputs:")___		for (Input input : inputFactory) {_			strBuilder_				.append("  --input ")_				.append(input.getName())_				.append(" ")_				.appendln(input.getUsage())__		}__		String algorithmParameterization = algorithm.getUsage()___		if (algorithmParameterization.length() > 0) {_			strBuilder_				.appendNewLine()_				.appendln("Algorithm configuration:")_				.append("  ")_				.appendln(algorithm.getUsage())__		}__		strBuilder_			.appendNewLine()_			.appendln("Available outputs:")___		if (algorithm instanceof org.apache.flink.graph.drivers.output.CSV) {_			strBuilder.appendln("  --output csv --output_filename FILENAME [--output_line_delimiter LINE_DELIMITER] [--output_field_delimiter FIELD_DELIMITER]")__		}__		if (algorithm instanceof Hash) {_			strBuilder.appendln("  --output hash")__		}__		if (algorithm instanceof Print) {_			strBuilder.appendln("  --output print")__		}__		return strBuilder_			.appendNewLine()_			.toString()__	};display,the,usage,for,the,given,algorithm,this,includes,options,for,all,compatible,inputs,the,selected,algorithm,and,outputs,implemented,by,the,selected,algorithm,param,algorithm,name,unique,identifier,of,the,selected,algorithm,return,usage,string,for,the,given,algorithm;private,static,string,get,algorithm,usage,string,algorithm,name,str,builder,str,builder,new,str,builder,driver,algorithm,driver,factory,get,algorithm,name,str,builder,append,new,line,append,new,line,appendln,algorithm,get,long,description,append,new,line,append,usage,flink,run,opt,flink,gelly,version,jar,algorithm,append,algorithm,name,append,algorithm,options,input,input,input,options,output,output,output,options,append,new,line,append,new,line,appendln,available,inputs,for,input,input,input,factory,str,builder,append,input,append,input,get,name,append,appendln,input,get,usage,string,algorithm,parameterization,algorithm,get,usage,if,algorithm,parameterization,length,0,str,builder,append,new,line,appendln,algorithm,configuration,append,appendln,algorithm,get,usage,str,builder,append,new,line,appendln,available,outputs,if,algorithm,instanceof,org,apache,flink,graph,drivers,output,csv,str,builder,appendln,output,csv,filename,if,algorithm,instanceof,hash,str,builder,appendln,output,hash,if,algorithm,instanceof,print,str,builder,appendln,output,print,return,str,builder,append,new,line,to,string
Runner -> private static String getAlgorithmUsage(String algorithmName);1492106849;Display the usage for the given algorithm. This includes options for all_compatible inputs, the selected algorithm, and outputs implemented by_the selected algorithm.__@param algorithmName unique identifier of the selected algorithm_@return usage string for the given algorithm;private static String getAlgorithmUsage(String algorithmName) {_		StrBuilder strBuilder = new StrBuilder()___		Driver algorithm = driverFactory.get(algorithmName)___		strBuilder_			.appendNewLine()_			.appendNewLine()_			.appendln(algorithm.getLongDescription())_			.appendNewLine()_			.append("usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm ")_			.append(algorithmName)_			.append(" [algorithm options] --input <input> [input options] --output <output> [output options]")_			.appendNewLine()_			.appendNewLine()_			.appendln("Available inputs:")___		for (Input input : inputFactory) {_			strBuilder_				.append("  --input ")_				.append(input.getName())_				.append(" ")_				.appendln(input.getUsage())__		}__		String algorithmParameterization = algorithm.getUsage()___		if (algorithmParameterization.length() > 0) {_			strBuilder_				.appendNewLine()_				.appendln("Algorithm configuration:")_				.append("  ")_				.appendln(algorithm.getUsage())__		}__		strBuilder_			.appendNewLine()_			.appendln("Available outputs:")___		if (algorithm instanceof org.apache.flink.graph.drivers.output.CSV) {_			strBuilder.appendln("  --output csv --output_filename FILENAME [--output_line_delimiter LINE_DELIMITER] [--output_field_delimiter FIELD_DELIMITER]")__		}__		if (algorithm instanceof Hash) {_			strBuilder.appendln("  --output hash")__		}__		if (algorithm instanceof Print) {_			strBuilder.appendln("  --output print")__		}__		return strBuilder_			.appendNewLine()_			.toString()__	};display,the,usage,for,the,given,algorithm,this,includes,options,for,all,compatible,inputs,the,selected,algorithm,and,outputs,implemented,by,the,selected,algorithm,param,algorithm,name,unique,identifier,of,the,selected,algorithm,return,usage,string,for,the,given,algorithm;private,static,string,get,algorithm,usage,string,algorithm,name,str,builder,str,builder,new,str,builder,driver,algorithm,driver,factory,get,algorithm,name,str,builder,append,new,line,append,new,line,appendln,algorithm,get,long,description,append,new,line,append,usage,flink,run,examples,flink,gelly,version,jar,algorithm,append,algorithm,name,append,algorithm,options,input,input,input,options,output,output,output,options,append,new,line,append,new,line,appendln,available,inputs,for,input,input,input,factory,str,builder,append,input,append,input,get,name,append,appendln,input,get,usage,string,algorithm,parameterization,algorithm,get,usage,if,algorithm,parameterization,length,0,str,builder,append,new,line,appendln,algorithm,configuration,append,appendln,algorithm,get,usage,str,builder,append,new,line,appendln,available,outputs,if,algorithm,instanceof,org,apache,flink,graph,drivers,output,csv,str,builder,appendln,output,csv,filename,if,algorithm,instanceof,hash,str,builder,appendln,output,hash,if,algorithm,instanceof,print,str,builder,appendln,output,print,return,str,builder,append,new,line,to,string
Runner -> private static String getAlgorithmUsage(String algorithmName);1492522066;Display the usage for the given algorithm. This includes options for all_compatible inputs, the selected algorithm, and outputs implemented by_the selected algorithm.__@param algorithmName unique identifier of the selected algorithm_@return usage string for the given algorithm;private static String getAlgorithmUsage(String algorithmName) {_		StrBuilder strBuilder = new StrBuilder()___		Driver algorithm = driverFactory.get(algorithmName)___		strBuilder_			.appendNewLine()_			.appendNewLine()_			.appendln(algorithm.getLongDescription())_			.appendNewLine()_			.append("usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm ")_			.append(algorithmName)_			.append(" [algorithm options] --input <input> [input options] --output <output> [output options]")_			.appendNewLine()_			.appendNewLine()_			.appendln("Available inputs:")___		for (Input input : inputFactory) {_			strBuilder_				.append("  --input ")_				.append(input.getName())_				.append(" ")_				.appendln(input.getUsage())__		}__		String algorithmParameterization = algorithm.getUsage()___		if (algorithmParameterization.length() > 0) {_			strBuilder_				.appendNewLine()_				.appendln("Algorithm configuration:")_				.append("  ")_				.appendln(algorithm.getUsage())__		}__		strBuilder_			.appendNewLine()_			.appendln("Available outputs:")___		if (algorithm instanceof org.apache.flink.graph.drivers.output.CSV) {_			strBuilder.appendln("  --output csv --output_filename FILENAME [--output_line_delimiter LINE_DELIMITER] [--output_field_delimiter FIELD_DELIMITER]")__		}__		if (algorithm instanceof Hash) {_			strBuilder.appendln("  --output hash")__		}__		if (algorithm instanceof Print) {_			strBuilder.appendln("  --output print")__		}__		return strBuilder_			.appendNewLine()_			.toString()__	};display,the,usage,for,the,given,algorithm,this,includes,options,for,all,compatible,inputs,the,selected,algorithm,and,outputs,implemented,by,the,selected,algorithm,param,algorithm,name,unique,identifier,of,the,selected,algorithm,return,usage,string,for,the,given,algorithm;private,static,string,get,algorithm,usage,string,algorithm,name,str,builder,str,builder,new,str,builder,driver,algorithm,driver,factory,get,algorithm,name,str,builder,append,new,line,append,new,line,appendln,algorithm,get,long,description,append,new,line,append,usage,flink,run,examples,flink,gelly,version,jar,algorithm,append,algorithm,name,append,algorithm,options,input,input,input,options,output,output,output,options,append,new,line,append,new,line,appendln,available,inputs,for,input,input,input,factory,str,builder,append,input,append,input,get,name,append,appendln,input,get,usage,string,algorithm,parameterization,algorithm,get,usage,if,algorithm,parameterization,length,0,str,builder,append,new,line,appendln,algorithm,configuration,append,appendln,algorithm,get,usage,str,builder,append,new,line,appendln,available,outputs,if,algorithm,instanceof,org,apache,flink,graph,drivers,output,csv,str,builder,appendln,output,csv,filename,if,algorithm,instanceof,hash,str,builder,appendln,output,hash,if,algorithm,instanceof,print,str,builder,appendln,output,print,return,str,builder,append,new,line,to,string
Runner -> private static String getAlgorithmUsage(String algorithmName);1493296913;Display the usage for the given algorithm. This includes options for all_compatible inputs, the selected algorithm, and outputs implemented by_the selected algorithm.__@param algorithmName unique identifier of the selected algorithm_@return usage string for the given algorithm;private static String getAlgorithmUsage(String algorithmName) {_		StrBuilder strBuilder = new StrBuilder()___		Driver algorithm = driverFactory.get(algorithmName)___		strBuilder_			.appendNewLine()_			.appendNewLine()_			.appendln(algorithm.getLongDescription())_			.appendNewLine()_			.append("usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm ")_			.append(algorithmName)_			.append(" [algorithm options] --input <input> [input options] --output <output> [output options]")_			.appendNewLine()_			.appendNewLine()_			.appendln("Available inputs:")___		for (Input input : inputFactory) {_			strBuilder_				.append("  --input ")_				.append(input.getName())_				.append(" ")_				.appendln(input.getUsage())__		}__		String algorithmParameterization = algorithm.getUsage()___		if (algorithmParameterization.length() > 0) {_			strBuilder_				.appendNewLine()_				.appendln("Algorithm configuration:")_				.append("  ")_				.appendln(algorithm.getUsage())__		}__		strBuilder_			.appendNewLine()_			.appendln("Available outputs:")___		if (algorithm instanceof org.apache.flink.graph.drivers.output.CSV) {_			strBuilder.appendln("  --output csv --output_filename FILENAME [--output_line_delimiter LINE_DELIMITER] [--output_field_delimiter FIELD_DELIMITER]")__		}__		if (algorithm instanceof Hash) {_			strBuilder.appendln("  --output hash")__		}__		if (algorithm instanceof Print) {_			strBuilder.appendln("  --output print")__		}__		return strBuilder_			.appendNewLine()_			.toString()__	};display,the,usage,for,the,given,algorithm,this,includes,options,for,all,compatible,inputs,the,selected,algorithm,and,outputs,implemented,by,the,selected,algorithm,param,algorithm,name,unique,identifier,of,the,selected,algorithm,return,usage,string,for,the,given,algorithm;private,static,string,get,algorithm,usage,string,algorithm,name,str,builder,str,builder,new,str,builder,driver,algorithm,driver,factory,get,algorithm,name,str,builder,append,new,line,append,new,line,appendln,algorithm,get,long,description,append,new,line,append,usage,flink,run,examples,flink,gelly,version,jar,algorithm,append,algorithm,name,append,algorithm,options,input,input,input,options,output,output,output,options,append,new,line,append,new,line,appendln,available,inputs,for,input,input,input,factory,str,builder,append,input,append,input,get,name,append,appendln,input,get,usage,string,algorithm,parameterization,algorithm,get,usage,if,algorithm,parameterization,length,0,str,builder,append,new,line,appendln,algorithm,configuration,append,appendln,algorithm,get,usage,str,builder,append,new,line,appendln,available,outputs,if,algorithm,instanceof,org,apache,flink,graph,drivers,output,csv,str,builder,appendln,output,csv,filename,if,algorithm,instanceof,hash,str,builder,appendln,output,hash,if,algorithm,instanceof,print,str,builder,appendln,output,print,return,str,builder,append,new,line,to,string
Runner -> private static String getAlgorithmUsage(String algorithmName);1495653033;Display the usage for the given algorithm. This includes options for all_compatible inputs, the selected algorithm, and outputs implemented by_the selected algorithm.__@param algorithmName unique identifier of the selected algorithm_@return usage string for the given algorithm;private static String getAlgorithmUsage(String algorithmName) {_		StrBuilder strBuilder = new StrBuilder()___		Driver algorithm = driverFactory.get(algorithmName)___		strBuilder_			.appendNewLine()_			.appendNewLine()_			.appendln(algorithm.getLongDescription())_			.appendNewLine()_			.append("usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm ")_			.append(algorithmName)_			.append(" [algorithm options] --input <input> [input options] --output <output> [output options]")_			.appendNewLine()_			.appendNewLine()_			.appendln("Available inputs:")___		for (Input input : inputFactory) {_			strBuilder_				.append("  --input ")_				.append(input.getName())_				.append(" ")_				.appendln(input.getUsage())__		}__		String algorithmParameterization = algorithm.getUsage()___		if (algorithmParameterization.length() > 0) {_			strBuilder_				.appendNewLine()_				.appendln("Algorithm configuration:")_				.append("  ")_				.appendln(algorithm.getUsage())__		}__		strBuilder_			.appendNewLine()_			.appendln("Available outputs:")___		if (algorithm instanceof org.apache.flink.graph.drivers.output.CSV) {_			strBuilder.appendln("  --output csv --output_filename FILENAME [--output_line_delimiter LINE_DELIMITER] [--output_field_delimiter FIELD_DELIMITER]")__		}__		if (algorithm instanceof Hash) {_			strBuilder.appendln("  --output hash")__		}__		if (algorithm instanceof Print) {_			strBuilder.appendln("  --output print")__		}__		return strBuilder_			.appendNewLine()_			.toString()__	};display,the,usage,for,the,given,algorithm,this,includes,options,for,all,compatible,inputs,the,selected,algorithm,and,outputs,implemented,by,the,selected,algorithm,param,algorithm,name,unique,identifier,of,the,selected,algorithm,return,usage,string,for,the,given,algorithm;private,static,string,get,algorithm,usage,string,algorithm,name,str,builder,str,builder,new,str,builder,driver,algorithm,driver,factory,get,algorithm,name,str,builder,append,new,line,append,new,line,appendln,algorithm,get,long,description,append,new,line,append,usage,flink,run,examples,flink,gelly,version,jar,algorithm,append,algorithm,name,append,algorithm,options,input,input,input,options,output,output,output,options,append,new,line,append,new,line,appendln,available,inputs,for,input,input,input,factory,str,builder,append,input,append,input,get,name,append,appendln,input,get,usage,string,algorithm,parameterization,algorithm,get,usage,if,algorithm,parameterization,length,0,str,builder,append,new,line,appendln,algorithm,configuration,append,appendln,algorithm,get,usage,str,builder,append,new,line,appendln,available,outputs,if,algorithm,instanceof,org,apache,flink,graph,drivers,output,csv,str,builder,appendln,output,csv,filename,if,algorithm,instanceof,hash,str,builder,appendln,output,hash,if,algorithm,instanceof,print,str,builder,appendln,output,print,return,str,builder,append,new,line,to,string
Runner -> private static String getAlgorithmUsage(String algorithmName);1498055157;Display the usage for the given algorithm. This includes options for all_compatible inputs, the selected algorithm, and outputs implemented by_the selected algorithm.__@param algorithmName unique identifier of the selected algorithm_@return usage string for the given algorithm;private static String getAlgorithmUsage(String algorithmName) {_		StrBuilder strBuilder = new StrBuilder()___		Driver algorithm = driverFactory.get(algorithmName)___		strBuilder_			.appendNewLine()_			.appendNewLine()_			.appendln(algorithm.getLongDescription())_			.appendNewLine()_			.append("usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm ")_			.append(algorithmName)_			.append(" [algorithm options] --input <input> [input options] --output <output> [output options]")_			.appendNewLine()_			.appendNewLine()_			.appendln("Available inputs:")___		for (Input input : inputFactory) {_			strBuilder_				.append("  --input ")_				.append(input.getName())_				.append(" ")_				.appendln(input.getUsage())__		}__		String algorithmParameterization = algorithm.getUsage()___		if (algorithmParameterization.length() > 0) {_			strBuilder_				.appendNewLine()_				.appendln("Algorithm configuration:")_				.append("  ")_				.appendln(algorithm.getUsage())__		}__		strBuilder_			.appendNewLine()_			.appendln("Available outputs:")___		for (Output output : outputFactory) {_			strBuilder_				.append("  --output ")_				.append(output.getName())_				.append(" ")_				.appendln(output.getUsage())__		}__		return strBuilder_			.appendNewLine()_			.toString()__	};display,the,usage,for,the,given,algorithm,this,includes,options,for,all,compatible,inputs,the,selected,algorithm,and,outputs,implemented,by,the,selected,algorithm,param,algorithm,name,unique,identifier,of,the,selected,algorithm,return,usage,string,for,the,given,algorithm;private,static,string,get,algorithm,usage,string,algorithm,name,str,builder,str,builder,new,str,builder,driver,algorithm,driver,factory,get,algorithm,name,str,builder,append,new,line,append,new,line,appendln,algorithm,get,long,description,append,new,line,append,usage,flink,run,examples,flink,gelly,version,jar,algorithm,append,algorithm,name,append,algorithm,options,input,input,input,options,output,output,output,options,append,new,line,append,new,line,appendln,available,inputs,for,input,input,input,factory,str,builder,append,input,append,input,get,name,append,appendln,input,get,usage,string,algorithm,parameterization,algorithm,get,usage,if,algorithm,parameterization,length,0,str,builder,append,new,line,appendln,algorithm,configuration,append,appendln,algorithm,get,usage,str,builder,append,new,line,appendln,available,outputs,for,output,output,output,factory,str,builder,append,output,append,output,get,name,append,appendln,output,get,usage,return,str,builder,append,new,line,to,string
Runner -> private static String getAlgorithmUsage(String algorithmName);1498231743;Display the usage for the given algorithm. This includes options for all_compatible inputs, the selected algorithm, and outputs implemented by_the selected algorithm.__@param algorithmName unique identifier of the selected algorithm_@return usage string for the given algorithm;private static String getAlgorithmUsage(String algorithmName) {_		StrBuilder strBuilder = new StrBuilder()___		Driver algorithm = driverFactory.get(algorithmName)___		strBuilder_			.appendNewLine()_			.appendNewLine()_			.appendln(algorithm.getLongDescription())_			.appendNewLine()_			.append("usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm ")_			.append(algorithmName)_			.append(" [algorithm options] --input <input> [input options] --output <output> [output options]")_			.appendNewLine()_			.appendNewLine()_			.appendln("Available inputs:")___		for (Input input : inputFactory) {_			strBuilder_				.append("  --input ")_				.append(input.getName())_				.append(" ")_				.appendln(input.getUsage())__		}__		String algorithmParameterization = algorithm.getUsage()___		if (algorithmParameterization.length() > 0) {_			strBuilder_				.appendNewLine()_				.appendln("Algorithm configuration:")_				.append("  ")_				.appendln(algorithm.getUsage())__		}__		strBuilder_			.appendNewLine()_			.appendln("Available outputs:")___		for (Output output : outputFactory) {_			strBuilder_				.append("  --output ")_				.append(output.getName())_				.append(" ")_				.appendln(output.getUsage())__		}__		return strBuilder_			.appendNewLine()_			.toString()__	};display,the,usage,for,the,given,algorithm,this,includes,options,for,all,compatible,inputs,the,selected,algorithm,and,outputs,implemented,by,the,selected,algorithm,param,algorithm,name,unique,identifier,of,the,selected,algorithm,return,usage,string,for,the,given,algorithm;private,static,string,get,algorithm,usage,string,algorithm,name,str,builder,str,builder,new,str,builder,driver,algorithm,driver,factory,get,algorithm,name,str,builder,append,new,line,append,new,line,appendln,algorithm,get,long,description,append,new,line,append,usage,flink,run,examples,flink,gelly,version,jar,algorithm,append,algorithm,name,append,algorithm,options,input,input,input,options,output,output,output,options,append,new,line,append,new,line,appendln,available,inputs,for,input,input,input,factory,str,builder,append,input,append,input,get,name,append,appendln,input,get,usage,string,algorithm,parameterization,algorithm,get,usage,if,algorithm,parameterization,length,0,str,builder,append,new,line,appendln,algorithm,configuration,append,appendln,algorithm,get,usage,str,builder,append,new,line,appendln,available,outputs,for,output,output,output,factory,str,builder,append,output,append,output,get,name,append,appendln,output,get,usage,return,str,builder,append,new,line,to,string
Runner -> private static String getAlgorithmUsage(String algorithmName);1499288286;Display the usage for the given algorithm. This includes options for all_compatible inputs, the selected algorithm, and outputs implemented by_the selected algorithm.__@param algorithmName unique identifier of the selected algorithm_@return usage string for the given algorithm;private static String getAlgorithmUsage(String algorithmName) {_		StrBuilder strBuilder = new StrBuilder()___		Driver algorithm = driverFactory.get(algorithmName)___		strBuilder_			.appendNewLine()_			.appendNewLine()_			.appendln(algorithm.getLongDescription())_			.appendNewLine()_			.append("usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm ")_			.append(algorithmName)_			.append(" [algorithm options] --input <input> [input options] --output <output> [output options]")_			.appendNewLine()_			.appendNewLine()_			.appendln("Available inputs:")___		for (Input input : inputFactory) {_			strBuilder_				.append("  --input ")_				.append(input.getName())_				.append(" ")_				.appendln(input.getUsage())__		}__		String algorithmParameterization = algorithm.getUsage()___		if (algorithmParameterization.length() > 0) {_			strBuilder_				.appendNewLine()_				.appendln("Algorithm configuration:")_				.append("  ")_				.appendln(algorithm.getUsage())__		}__		strBuilder_			.appendNewLine()_			.appendln("Available outputs:")___		for (Output output : outputFactory) {_			strBuilder_				.append("  --output ")_				.append(output.getName())_				.append(" ")_				.appendln(output.getUsage())__		}__		return strBuilder_			.appendNewLine()_			.toString()__	};display,the,usage,for,the,given,algorithm,this,includes,options,for,all,compatible,inputs,the,selected,algorithm,and,outputs,implemented,by,the,selected,algorithm,param,algorithm,name,unique,identifier,of,the,selected,algorithm,return,usage,string,for,the,given,algorithm;private,static,string,get,algorithm,usage,string,algorithm,name,str,builder,str,builder,new,str,builder,driver,algorithm,driver,factory,get,algorithm,name,str,builder,append,new,line,append,new,line,appendln,algorithm,get,long,description,append,new,line,append,usage,flink,run,examples,flink,gelly,version,jar,algorithm,append,algorithm,name,append,algorithm,options,input,input,input,options,output,output,output,options,append,new,line,append,new,line,appendln,available,inputs,for,input,input,input,factory,str,builder,append,input,append,input,get,name,append,appendln,input,get,usage,string,algorithm,parameterization,algorithm,get,usage,if,algorithm,parameterization,length,0,str,builder,append,new,line,appendln,algorithm,configuration,append,appendln,algorithm,get,usage,str,builder,append,new,line,appendln,available,outputs,for,output,output,output,factory,str,builder,append,output,append,output,get,name,append,appendln,output,get,usage,return,str,builder,append,new,line,to,string
Runner -> private static String getAlgorithmUsage(String algorithmName);1500078951;Display the usage for the given algorithm. This includes options for all_compatible inputs, the selected algorithm, and outputs implemented by_the selected algorithm.__@param algorithmName unique identifier of the selected algorithm_@return usage string for the given algorithm;private static String getAlgorithmUsage(String algorithmName) {_		StrBuilder strBuilder = new StrBuilder()___		Driver algorithm = driverFactory.get(algorithmName)___		strBuilder_			.appendNewLine()_			.appendNewLine()_			.appendln(algorithm.getLongDescription())_			.appendNewLine()_			.append("usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm ")_			.append(algorithmName)_			.append(" [algorithm options] --input <input> [input options] --output <output> [output options]")_			.appendNewLine()_			.appendNewLine()_			.appendln("Available inputs:")___		for (Input input : inputFactory) {_			strBuilder_				.append("  --input ")_				.append(input.getName())_				.append(" ")_				.appendln(input.getUsage())__		}__		String algorithmParameterization = algorithm.getUsage()___		if (algorithmParameterization.length() > 0) {_			strBuilder_				.appendNewLine()_				.appendln("Algorithm configuration:")_				.append("  ")_				.appendln(algorithm.getUsage())__		}__		strBuilder_			.appendNewLine()_			.appendln("Available outputs:")___		for (Output output : outputFactory) {_			strBuilder_				.append("  --output ")_				.append(output.getName())_				.append(" ")_				.appendln(output.getUsage())__		}__		return strBuilder_			.appendNewLine()_			.toString()__	};display,the,usage,for,the,given,algorithm,this,includes,options,for,all,compatible,inputs,the,selected,algorithm,and,outputs,implemented,by,the,selected,algorithm,param,algorithm,name,unique,identifier,of,the,selected,algorithm,return,usage,string,for,the,given,algorithm;private,static,string,get,algorithm,usage,string,algorithm,name,str,builder,str,builder,new,str,builder,driver,algorithm,driver,factory,get,algorithm,name,str,builder,append,new,line,append,new,line,appendln,algorithm,get,long,description,append,new,line,append,usage,flink,run,examples,flink,gelly,version,jar,algorithm,append,algorithm,name,append,algorithm,options,input,input,input,options,output,output,output,options,append,new,line,append,new,line,appendln,available,inputs,for,input,input,input,factory,str,builder,append,input,append,input,get,name,append,appendln,input,get,usage,string,algorithm,parameterization,algorithm,get,usage,if,algorithm,parameterization,length,0,str,builder,append,new,line,appendln,algorithm,configuration,append,appendln,algorithm,get,usage,str,builder,append,new,line,appendln,available,outputs,for,output,output,output,factory,str,builder,append,output,append,output,get,name,append,appendln,output,get,usage,return,str,builder,append,new,line,to,string
Runner -> private static String getAlgorithmUsage(String algorithmName);1508150892;Display the usage for the given algorithm. This includes options for all_compatible inputs, the selected algorithm, and outputs implemented by_the selected algorithm.__@param algorithmName unique identifier of the selected algorithm_@return usage string for the given algorithm;private static String getAlgorithmUsage(String algorithmName) {_		StrBuilder strBuilder = new StrBuilder()___		Driver algorithm = driverFactory.get(algorithmName)___		strBuilder_			.appendNewLine()_			.appendNewLine()_			.appendln(algorithm.getLongDescription())_			.appendNewLine()_			.append("usage: flink run examples/flink-gelly-examples_<version>.jar --algorithm ")_			.append(algorithmName)_			.append(" [algorithm options] --input <input> [input options] --output <output> [output options]")_			.appendNewLine()_			.appendNewLine()_			.appendln("Available inputs:")___		for (Input input : inputFactory) {_			strBuilder_				.append("  --input ")_				.append(input.getName())_				.append(" ")_				.appendln(input.getUsage())__		}__		String algorithmParameterization = algorithm.getUsage()___		if (algorithmParameterization.length() > 0) {_			strBuilder_				.appendNewLine()_				.appendln("Algorithm configuration:")_				.append("  ")_				.appendln(algorithm.getUsage())__		}__		strBuilder_			.appendNewLine()_			.appendln("Available outputs:")___		for (Output output : outputFactory) {_			strBuilder_				.append("  --output ")_				.append(output.getName())_				.append(" ")_				.appendln(output.getUsage())__		}__		return strBuilder_			.appendNewLine()_			.toString()__	};display,the,usage,for,the,given,algorithm,this,includes,options,for,all,compatible,inputs,the,selected,algorithm,and,outputs,implemented,by,the,selected,algorithm,param,algorithm,name,unique,identifier,of,the,selected,algorithm,return,usage,string,for,the,given,algorithm;private,static,string,get,algorithm,usage,string,algorithm,name,str,builder,str,builder,new,str,builder,driver,algorithm,driver,factory,get,algorithm,name,str,builder,append,new,line,append,new,line,appendln,algorithm,get,long,description,append,new,line,append,usage,flink,run,examples,flink,gelly,version,jar,algorithm,append,algorithm,name,append,algorithm,options,input,input,input,options,output,output,output,options,append,new,line,append,new,line,appendln,available,inputs,for,input,input,input,factory,str,builder,append,input,append,input,get,name,append,appendln,input,get,usage,string,algorithm,parameterization,algorithm,get,usage,if,algorithm,parameterization,length,0,str,builder,append,new,line,appendln,algorithm,configuration,append,appendln,algorithm,get,usage,str,builder,append,new,line,appendln,available,outputs,for,output,output,output,factory,str,builder,append,output,append,output,get,name,append,appendln,output,get,usage,return,str,builder,append,new,line,to,string
Runner -> ParameterizedFactory -> public T get(String name);1477509530;Obtain a class instance by name.__@param name String matching getName()_@return class instance or null if no matching class;public T get(String name) {_			for (T instance : this) {_				if (name.equals(instance.getName())) {_					return instance__				}_			}__			return null__		};obtain,a,class,instance,by,name,param,name,string,matching,get,name,return,class,instance,or,null,if,no,matching,class;public,t,get,string,name,for,t,instance,this,if,name,equals,instance,get,name,return,instance,return,null
Runner -> ParameterizedFactory -> public T get(String name);1492106849;Obtain a class instance by name.__@param name String matching getName()_@return class instance or null if no matching class;public T get(String name) {_			for (T instance : this) {_				if (name.equals(instance.getName())) {_					return instance__				}_			}__			return null__		};obtain,a,class,instance,by,name,param,name,string,matching,get,name,return,class,instance,or,null,if,no,matching,class;public,t,get,string,name,for,t,instance,this,if,name,equals,instance,get,name,return,instance,return,null
Runner -> ParameterizedFactory -> public T get(String name);1492522066;Obtain a class instance by name.__@param name String matching getName()_@return class instance or null if no matching class;public T get(String name) {_			for (T instance : this) {_				if (name.equals(instance.getName())) {_					return instance__				}_			}__			return null__		};obtain,a,class,instance,by,name,param,name,string,matching,get,name,return,class,instance,or,null,if,no,matching,class;public,t,get,string,name,for,t,instance,this,if,name,equals,instance,get,name,return,instance,return,null
Runner -> ParameterizedFactory -> public T get(String name);1493296913;Obtain a class instance by name.__@param name String matching getName()_@return class instance or null if no matching class;public T get(String name) {_			for (T instance : this) {_				if (name.equals(instance.getName())) {_					return instance__				}_			}__			return null__		};obtain,a,class,instance,by,name,param,name,string,matching,get,name,return,class,instance,or,null,if,no,matching,class;public,t,get,string,name,for,t,instance,this,if,name,equals,instance,get,name,return,instance,return,null
Runner -> ParameterizedFactory -> public T get(String name);1495653033;Obtain a class instance by name.__@param name String matching getName()_@return class instance or null if no matching class;public T get(String name) {_			for (T instance : this) {_				if (name.equals(instance.getName())) {_					return instance__				}_			}__			return null__		};obtain,a,class,instance,by,name,param,name,string,matching,get,name,return,class,instance,or,null,if,no,matching,class;public,t,get,string,name,for,t,instance,this,if,name,equals,instance,get,name,return,instance,return,null
Runner -> ParameterizedFactory -> public T get(String name);1498055157;Obtain a class instance by name.__@param name String matching getName()_@return class instance or null if no matching class;public T get(String name) {_			for (T instance : this) {_				if (name.equalsIgnoreCase(instance.getName())) {_					return instance__				}_			}__			return null__		};obtain,a,class,instance,by,name,param,name,string,matching,get,name,return,class,instance,or,null,if,no,matching,class;public,t,get,string,name,for,t,instance,this,if,name,equals,ignore,case,instance,get,name,return,instance,return,null
Runner -> ParameterizedFactory -> public T get(String name);1498231743;Obtain a class instance by name.__@param name String matching getName()_@return class instance or null if no matching class;public T get(String name) {_			for (T instance : this) {_				if (name.equalsIgnoreCase(instance.getName())) {_					return instance__				}_			}__			return null__		};obtain,a,class,instance,by,name,param,name,string,matching,get,name,return,class,instance,or,null,if,no,matching,class;public,t,get,string,name,for,t,instance,this,if,name,equals,ignore,case,instance,get,name,return,instance,return,null
Runner -> ParameterizedFactory -> public T get(String name);1499288286;Obtain a class instance by name.__@param name String matching getName()_@return class instance or null if no matching class;public T get(String name) {_			for (T instance : this) {_				if (name.equalsIgnoreCase(instance.getName())) {_					return instance__				}_			}__			return null__		};obtain,a,class,instance,by,name,param,name,string,matching,get,name,return,class,instance,or,null,if,no,matching,class;public,t,get,string,name,for,t,instance,this,if,name,equals,ignore,case,instance,get,name,return,instance,return,null
Runner -> ParameterizedFactory -> public T get(String name);1500078951;Obtain a class instance by name.__@param name String matching getName()_@return class instance or null if no matching class;public T get(String name) {_			for (T instance : this) {_				if (name.equalsIgnoreCase(instance.getName())) {_					return instance__				}_			}__			return null__		};obtain,a,class,instance,by,name,param,name,string,matching,get,name,return,class,instance,or,null,if,no,matching,class;public,t,get,string,name,for,t,instance,this,if,name,equals,ignore,case,instance,get,name,return,instance,return,null
Runner -> ParameterizedFactory -> public T get(String name);1508150892;Obtain a class instance by name.__@param name String matching getName()_@return class instance or null if no matching class;public T get(String name) {_			for (T instance : this) {_				if (name.equalsIgnoreCase(instance.getName())) {_					return instance__				}_			}__			return null__		};obtain,a,class,instance,by,name,param,name,string,matching,get,name,return,class,instance,or,null,if,no,matching,class;public,t,get,string,name,for,t,instance,this,if,name,equals,ignore,case,instance,get,name,return,instance,return,null
Runner -> public Runner(String[] args);1498055157;Create an algorithm runner from the given arguments.__@param args command-line arguments;public Runner(String[] args) {_		parameters = ParameterTool.fromArgs(args)__	};create,an,algorithm,runner,from,the,given,arguments,param,args,command,line,arguments;public,runner,string,args,parameters,parameter,tool,from,args,args
Runner -> public Runner(String[] args);1499288286;Create an algorithm runner from the given arguments.__@param args command-line arguments;public Runner(String[] args) {_		parameters = ParameterTool.fromArgs(args)__	};create,an,algorithm,runner,from,the,given,arguments,param,args,command,line,arguments;public,runner,string,args,parameters,parameter,tool,from,args,args
Runner -> public Runner(String[] args);1500078951;Create an algorithm runner from the given arguments.__@param args command-line arguments;public Runner(String[] args) {_		parameters = ParameterTool.fromArgs(args)__	};create,an,algorithm,runner,from,the,given,arguments,param,args,command,line,arguments;public,runner,string,args,parameters,parameter,tool,from,args,args
Runner -> public Runner(String[] args);1508150892;Create an algorithm runner from the given arguments.__@param args command-line arguments;public Runner(String[] args) {_		parameters = ParameterTool.fromArgs(args)__	};create,an,algorithm,runner,from,the,given,arguments,param,args,command,line,arguments;public,runner,string,args,parameters,parameter,tool,from,args,args
Runner -> private void execute() throws Exception;1500078951;Execute the Flink job.__@throws Exception on error;private void execute() throws Exception {_		if (result == null) {_			env.execute(executionName)__		} else {_			output.write(executionName.toString(), System.out, result)__		}__		System.out.println()__		algorithm.printAnalytics(System.out)___		if (jobDetailsPath.getValue() != null) {_			writeJobDetails(env, jobDetailsPath.getValue())__		}_	};execute,the,flink,job,throws,exception,on,error;private,void,execute,throws,exception,if,result,null,env,execute,execution,name,else,output,write,execution,name,to,string,system,out,result,system,out,println,algorithm,print,analytics,system,out,if,job,details,path,get,value,null,write,job,details,env,job,details,path,get,value
Runner -> private void execute() throws Exception;1508150892;Execute the Flink job.__@throws Exception on error;private void execute() throws Exception {_		if (result == null) {_			env.execute(executionName)__		} else {_			output.write(executionName.toString(), System.out, result)__		}__		System.out.println()__		algorithm.printAnalytics(System.out)___		if (jobDetailsPath.getValue() != null) {_			writeJobDetails(env, jobDetailsPath.getValue())__		}_	};execute,the,flink,job,throws,exception,on,error;private,void,execute,throws,exception,if,result,null,env,execute,execution,name,else,output,write,execution,name,to,string,system,out,result,system,out,println,algorithm,print,analytics,system,out,if,job,details,path,get,value,null,write,job,details,env,job,details,path,get,value
Runner -> private void parameterize(Parameterized parameterized);1499288286;Configure a runtime component. Catch {@link RuntimeException} and_re-throw with a Flink internal exception which is processed by_CliFrontend for display to the user.__@param parameterized the component to be configured;private void parameterize(Parameterized parameterized) {_		try {_			parameterized.configure(parameters)__		} catch (RuntimeException ex) {_			throw new ProgramParametrizationException(ex.getMessage())__		}_	};configure,a,runtime,component,catch,link,runtime,exception,and,re,throw,with,a,flink,internal,exception,which,is,processed,by,cli,frontend,for,display,to,the,user,param,parameterized,the,component,to,be,configured;private,void,parameterize,parameterized,parameterized,try,parameterized,configure,parameters,catch,runtime,exception,ex,throw,new,program,parametrization,exception,ex,get,message
Runner -> private void parameterize(Parameterized parameterized);1500078951;Configure a runtime component. Catch {@link RuntimeException} and_re-throw with a Flink internal exception which is processed by_CliFrontend for display to the user.__@param parameterized the component to be configured;private void parameterize(Parameterized parameterized) {_		try {_			parameterized.configure(parameters)__		} catch (RuntimeException ex) {_			throw new ProgramParametrizationException(ex.getMessage())__		}_	};configure,a,runtime,component,catch,link,runtime,exception,and,re,throw,with,a,flink,internal,exception,which,is,processed,by,cli,frontend,for,display,to,the,user,param,parameterized,the,component,to,be,configured;private,void,parameterize,parameterized,parameterized,try,parameterized,configure,parameters,catch,runtime,exception,ex,throw,new,program,parametrization,exception,ex,get,message
Runner -> private void parameterize(Parameterized parameterized);1508150892;Configure a runtime component. Catch {@link RuntimeException} and_re-throw with a Flink internal exception which is processed by_CliFrontend for display to the user.__@param parameterized the component to be configured;private void parameterize(Parameterized parameterized) {_		try {_			parameterized.configure(parameters)__		} catch (RuntimeException ex) {_			throw new ProgramParametrizationException(ex.getMessage())__		}_	};configure,a,runtime,component,catch,link,runtime,exception,and,re,throw,with,a,flink,internal,exception,which,is,processed,by,cli,frontend,for,display,to,the,user,param,parameterized,the,component,to,be,configured;private,void,parameterize,parameterized,parameterized,try,parameterized,configure,parameters,catch,runtime,exception,ex,throw,new,program,parametrization,exception,ex,get,message
Runner -> ParameterizedFactory -> public ParameterizedFactory<T> addClass(Class<? extends T> cls);1477509530;Add a class to the factory.__@param cls subclass of T_@return this;public ParameterizedFactory<T> addClass(Class<? extends T> cls) {_			this.classes.add(cls)__			return this__		};add,a,class,to,the,factory,param,cls,subclass,of,t,return,this;public,parameterized,factory,t,add,class,class,extends,t,cls,this,classes,add,cls,return,this
Runner -> ParameterizedFactory -> public ParameterizedFactory<T> addClass(Class<? extends T> cls);1492106849;Add a class to the factory.__@param cls subclass of T_@return this;public ParameterizedFactory<T> addClass(Class<? extends T> cls) {_			this.classes.add(cls)__			return this__		};add,a,class,to,the,factory,param,cls,subclass,of,t,return,this;public,parameterized,factory,t,add,class,class,extends,t,cls,this,classes,add,cls,return,this
Runner -> ParameterizedFactory -> public ParameterizedFactory<T> addClass(Class<? extends T> cls);1492522066;Add a class to the factory.__@param cls subclass of T_@return this;public ParameterizedFactory<T> addClass(Class<? extends T> cls) {_			this.classes.add(cls)__			return this__		};add,a,class,to,the,factory,param,cls,subclass,of,t,return,this;public,parameterized,factory,t,add,class,class,extends,t,cls,this,classes,add,cls,return,this
Runner -> ParameterizedFactory -> public ParameterizedFactory<T> addClass(Class<? extends T> cls);1493296913;Add a class to the factory.__@param cls subclass of T_@return this;public ParameterizedFactory<T> addClass(Class<? extends T> cls) {_			this.classes.add(cls)__			return this__		};add,a,class,to,the,factory,param,cls,subclass,of,t,return,this;public,parameterized,factory,t,add,class,class,extends,t,cls,this,classes,add,cls,return,this
Runner -> ParameterizedFactory -> public ParameterizedFactory<T> addClass(Class<? extends T> cls);1495653033;Add a class to the factory.__@param cls subclass of T_@return this;public ParameterizedFactory<T> addClass(Class<? extends T> cls) {_			this.classes.add(cls)__			return this__		};add,a,class,to,the,factory,param,cls,subclass,of,t,return,this;public,parameterized,factory,t,add,class,class,extends,t,cls,this,classes,add,cls,return,this
Runner -> ParameterizedFactory -> public ParameterizedFactory<T> addClass(Class<? extends T> cls);1498055157;Add a class to the factory.__@param cls subclass of T_@return this;public ParameterizedFactory<T> addClass(Class<? extends T> cls) {_			this.classes.add(cls)__			return this__		};add,a,class,to,the,factory,param,cls,subclass,of,t,return,this;public,parameterized,factory,t,add,class,class,extends,t,cls,this,classes,add,cls,return,this
Runner -> ParameterizedFactory -> public ParameterizedFactory<T> addClass(Class<? extends T> cls);1498231743;Add a class to the factory.__@param cls subclass of T_@return this;public ParameterizedFactory<T> addClass(Class<? extends T> cls) {_			this.classes.add(cls)__			return this__		};add,a,class,to,the,factory,param,cls,subclass,of,t,return,this;public,parameterized,factory,t,add,class,class,extends,t,cls,this,classes,add,cls,return,this
Runner -> ParameterizedFactory -> public ParameterizedFactory<T> addClass(Class<? extends T> cls);1499288286;Add a class to the factory.__@param cls subclass of T_@return this;public ParameterizedFactory<T> addClass(Class<? extends T> cls) {_			this.classes.add(cls)__			return this__		};add,a,class,to,the,factory,param,cls,subclass,of,t,return,this;public,parameterized,factory,t,add,class,class,extends,t,cls,this,classes,add,cls,return,this
Runner -> ParameterizedFactory -> public ParameterizedFactory<T> addClass(Class<? extends T> cls);1500078951;Add a class to the factory.__@param cls subclass of T_@return this;public ParameterizedFactory<T> addClass(Class<? extends T> cls) {_			this.classes.add(cls)__			return this__		};add,a,class,to,the,factory,param,cls,subclass,of,t,return,this;public,parameterized,factory,t,add,class,class,extends,t,cls,this,classes,add,cls,return,this
Runner -> ParameterizedFactory -> public ParameterizedFactory<T> addClass(Class<? extends T> cls);1508150892;Add a class to the factory.__@param cls subclass of T_@return this;public ParameterizedFactory<T> addClass(Class<? extends T> cls) {_			this.classes.add(cls)__			return this__		};add,a,class,to,the,factory,param,cls,subclass,of,t,return,this;public,parameterized,factory,t,add,class,class,extends,t,cls,this,classes,add,cls,return,this
Runner -> public DataSet getResult();1500078951;Get the result DataSet. The result is only available after calling_{@link Runner#run()}.__@return the result DataSet;public DataSet getResult() {_		return result__	};get,the,result,data,set,the,result,is,only,available,after,calling,link,runner,run,return,the,result,data,set;public,data,set,get,result,return,result
Runner -> public DataSet getResult();1508150892;Get the result DataSet. The result is only available after calling_{@link Runner#run()}.__@return the result DataSet;public DataSet getResult() {_		return result__	};get,the,result,data,set,the,result,is,only,available,after,calling,link,runner,run,return,the,result,data,set;public,data,set,get,result,return,result
