# id;timestamp;commentText;codeText;commentWords;codeWords
PythonStreamExecutionEnvironment -> public PythonDataStream read_text_file(String path) throws IOException;1518879596;A thin wrapper layer over {@link StreamExecutionEnvironment#readTextFile(java.lang.String)}.__@param path_The path of the file, as a URI (e.g., "file:///some/local/file" or "hdfs://host:port/file/path")._@return The data stream that represents the data read from the given file as text lines_@throws IOException;public PythonDataStream read_text_file(String path) throws IOException {_		return new PythonDataStream<>(env.readTextFile(path).map(new UtilityFunctions.SerializerMap<String>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,read,text,file,java,lang,string,param,path,the,path,of,the,file,as,a,uri,e,g,file,some,local,file,or,hdfs,host,port,file,path,return,the,data,stream,that,represents,the,data,read,from,the,given,file,as,text,lines,throws,ioexception;public,python,data,stream,string,path,throws,ioexception,return,new,python,data,stream,env,read,text,file,path,map,new,utility,functions,serializer,map,string
PythonStreamExecutionEnvironment -> public PythonDataStream read_text_file(String path) throws IOException;1518880040;A thin wrapper layer over {@link StreamExecutionEnvironment#readTextFile(java.lang.String)}.__@param path The path of the file, as a URI (e.g., "file:///some/local/file" or "hdfs://host:port/file/path")._@return The data stream that represents the data read from the given file as text lines_@throws IOException;public PythonDataStream read_text_file(String path) throws IOException {_		return new PythonDataStream<>(env.readTextFile(path).map(new AdapterMap<String>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,read,text,file,java,lang,string,param,path,the,path,of,the,file,as,a,uri,e,g,file,some,local,file,or,hdfs,host,port,file,path,return,the,data,stream,that,represents,the,data,read,from,the,given,file,as,text,lines,throws,ioexception;public,python,data,stream,string,path,throws,ioexception,return,new,python,data,stream,env,read,text,file,path,map,new,adapter,map,string
PythonStreamExecutionEnvironment -> public PythonDataStream read_text_file(String path) throws IOException;1525420604;A thin wrapper layer over {@link StreamExecutionEnvironment#readTextFile(java.lang.String)}.__@param path The path of the file, as a URI (e.g., "file:///some/local/file" or "hdfs://host:port/file/path")._@return The data stream that represents the data read from the given file as text lines_@throws IOException;public PythonDataStream read_text_file(String path) throws IOException {_		return new PythonDataStream<>(env.readTextFile(path).map(new AdapterMap<String>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,read,text,file,java,lang,string,param,path,the,path,of,the,file,as,a,uri,e,g,file,some,local,file,or,hdfs,host,port,file,path,return,the,data,stream,that,represents,the,data,read,from,the,given,file,as,text,lines,throws,ioexception;public,python,data,stream,string,path,throws,ioexception,return,new,python,data,stream,env,read,text,file,path,map,new,adapter,map,string
PythonStreamExecutionEnvironment -> public PythonDataStream from_elements(PyObject... elements);1518879596;A thin wrapper layer over {@link StreamExecutionEnvironment#fromElements(java.lang.Object[])}__@param elements_The array of PyObject elements to create the data stream from._@return The data stream representing the given array of elements;public PythonDataStream from_elements(PyObject... elements) {_		return new PythonDataStream<>(env.fromElements(elements))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,from,elements,java,lang,object,param,elements,the,array,of,py,object,elements,to,create,the,data,stream,from,return,the,data,stream,representing,the,given,array,of,elements;public,python,data,stream,py,object,elements,return,new,python,data,stream,env,from,elements,elements
PythonStreamExecutionEnvironment -> public PythonDataStream from_elements(PyObject... elements);1518880040;A thin wrapper layer over {@link StreamExecutionEnvironment#fromElements(java.lang.Object[])}.__@param elements The array of PyObject elements to create the data stream from._@return The data stream representing the given array of elements;public PythonDataStream from_elements(PyObject... elements) {_		return new PythonDataStream<>(env.fromElements(elements))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,from,elements,java,lang,object,param,elements,the,array,of,py,object,elements,to,create,the,data,stream,from,return,the,data,stream,representing,the,given,array,of,elements;public,python,data,stream,py,object,elements,return,new,python,data,stream,env,from,elements,elements
PythonStreamExecutionEnvironment -> public PythonDataStream from_elements(PyObject... elements);1525420604;A thin wrapper layer over {@link StreamExecutionEnvironment#fromElements(java.lang.Object[])}.__@param elements The array of PyObject elements to create the data stream from._@return The data stream representing the given array of elements;public PythonDataStream from_elements(PyObject... elements) {_		return new PythonDataStream<>(env.fromElements(elements))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,from,elements,java,lang,object,param,elements,the,array,of,py,object,elements,to,create,the,data,stream,from,return,the,data,stream,representing,the,given,array,of,elements;public,python,data,stream,py,object,elements,return,new,python,data,stream,env,from,elements,elements
PythonStreamExecutionEnvironment -> public JobExecutionResult execute() throws Exception;1518879596;A thin wrapper layer over {@link StreamExecutionEnvironment#execute()}.__@return The result of the job execution;public JobExecutionResult execute() throws Exception {_		return execute(false)__	};a,thin,wrapper,layer,over,link,stream,execution,environment,execute,return,the,result,of,the,job,execution;public,job,execution,result,execute,throws,exception,return,execute,false
PythonStreamExecutionEnvironment -> public JobExecutionResult execute() throws Exception;1518880040;A thin wrapper layer over {@link StreamExecutionEnvironment#execute()}.__@return The result of the job execution;public JobExecutionResult execute() throws Exception {_		distributeFiles()__		JobExecutionResult result = this.env.execute()__		cleanupDistributedFiles()__		return result__	};a,thin,wrapper,layer,over,link,stream,execution,environment,execute,return,the,result,of,the,job,execution;public,job,execution,result,execute,throws,exception,distribute,files,job,execution,result,result,this,env,execute,cleanup,distributed,files,return,result
PythonStreamExecutionEnvironment -> public JobExecutionResult execute() throws Exception;1525420604;A thin wrapper layer over {@link StreamExecutionEnvironment#execute()}.__@return The result of the job execution;public JobExecutionResult execute() throws Exception {_		distributeFiles()__		JobExecutionResult result = this.env.execute()__		return result__	};a,thin,wrapper,layer,over,link,stream,execution,environment,execute,return,the,result,of,the,job,execution;public,job,execution,result,execute,throws,exception,distribute,files,job,execution,result,result,this,env,execute,return,result
PythonStreamExecutionEnvironment -> public PythonDataStream from_collection(Iterator<Object> iter) throws Exception;1518879596;Creates a python data stream from the given iterator.__<p>Note that this operation will result in a non-parallel data stream source, i.e.,_a data stream source with a parallelism of one.</p>__@param iter_The iterator of elements to create the data stream from_@return The data stream representing the elements in the iterator_@see StreamExecutionEnvironment#fromCollection(java.util.Iterator, org.apache.flink.api.common.typeinfo.TypeInformation);public PythonDataStream from_collection(Iterator<Object> iter) throws Exception  {_		return new PythonDataStream<>(env.addSource(new PythonIteratorFunction(iter), TypeExtractor.getForClass(Object.class))_			.map(new UtilityFunctions.SerializerMap<>()))__	};creates,a,python,data,stream,from,the,given,iterator,p,note,that,this,operation,will,result,in,a,non,parallel,data,stream,source,i,e,a,data,stream,source,with,a,parallelism,of,one,p,param,iter,the,iterator,of,elements,to,create,the,data,stream,from,return,the,data,stream,representing,the,elements,in,the,iterator,see,stream,execution,environment,from,collection,java,util,iterator,org,apache,flink,api,common,typeinfo,type,information;public,python,data,stream,iterator,object,iter,throws,exception,return,new,python,data,stream,env,add,source,new,python,iterator,function,iter,type,extractor,get,for,class,object,class,map,new,utility,functions,serializer,map
PythonStreamExecutionEnvironment -> public PythonDataStream from_collection(Iterator<Object> iter) throws Exception;1518880040;Creates a python data stream from the given iterator.__<p>Note that this operation will result in a non-parallel data stream source, i.e.,_a data stream source with a parallelism of one.</p>__@param iter The iterator of elements to create the data stream from_@return The data stream representing the elements in the iterator_@see StreamExecutionEnvironment#fromCollection(java.util.Iterator, org.apache.flink.api.common.typeinfo.TypeInformation);public PythonDataStream from_collection(Iterator<Object> iter) throws Exception {_		return new PythonDataStream<>(env.addSource(new PythonIteratorFunction(iter), TypeExtractor.getForClass(Object.class))_			.map(new AdapterMap<>()))__	};creates,a,python,data,stream,from,the,given,iterator,p,note,that,this,operation,will,result,in,a,non,parallel,data,stream,source,i,e,a,data,stream,source,with,a,parallelism,of,one,p,param,iter,the,iterator,of,elements,to,create,the,data,stream,from,return,the,data,stream,representing,the,elements,in,the,iterator,see,stream,execution,environment,from,collection,java,util,iterator,org,apache,flink,api,common,typeinfo,type,information;public,python,data,stream,iterator,object,iter,throws,exception,return,new,python,data,stream,env,add,source,new,python,iterator,function,iter,type,extractor,get,for,class,object,class,map,new,adapter,map
PythonStreamExecutionEnvironment -> public PythonDataStream from_collection(Iterator<Object> iter) throws Exception;1525420604;Creates a python data stream from the given iterator.__<p>Note that this operation will result in a non-parallel data stream source, i.e.,_a data stream source with a parallelism of one.</p>__@param iter The iterator of elements to create the data stream from_@return The data stream representing the elements in the iterator_@see StreamExecutionEnvironment#fromCollection(java.util.Iterator, org.apache.flink.api.common.typeinfo.TypeInformation);public PythonDataStream from_collection(Iterator<Object> iter) throws Exception {_		return new PythonDataStream<>(env.addSource(new PythonIteratorFunction(iter), TypeExtractor.getForClass(Object.class))_			.map(new AdapterMap<>()))__	};creates,a,python,data,stream,from,the,given,iterator,p,note,that,this,operation,will,result,in,a,non,parallel,data,stream,source,i,e,a,data,stream,source,with,a,parallelism,of,one,p,param,iter,the,iterator,of,elements,to,create,the,data,stream,from,return,the,data,stream,representing,the,elements,in,the,iterator,see,stream,execution,environment,from,collection,java,util,iterator,org,apache,flink,api,common,typeinfo,type,information;public,python,data,stream,iterator,object,iter,throws,exception,return,new,python,data,stream,env,add,source,new,python,iterator,function,iter,type,extractor,get,for,class,object,class,map,new,adapter,map
PythonStreamExecutionEnvironment -> public PythonDataStream add_java_source(SourceFunction<Object> src);1518879596;Add a java source to the streaming topology. The source expected to be an java based_implementation (.e.g. Kafka connector).__@param src  A native java source (e.g. PythonFlinkKafkaConsumer09)_@return Python data stream;public PythonDataStream add_java_source(SourceFunction<Object> src) {_		return new PythonDataStream<>(env.addSource(src).map(new UtilityFunctions.SerializerMap<>()))__	};add,a,java,source,to,the,streaming,topology,the,source,expected,to,be,an,java,based,implementation,e,g,kafka,connector,param,src,a,native,java,source,e,g,python,flink,kafka,consumer09,return,python,data,stream;public,python,data,stream,source,function,object,src,return,new,python,data,stream,env,add,source,src,map,new,utility,functions,serializer,map
PythonStreamExecutionEnvironment -> public PythonDataStream add_java_source(SourceFunction<Object> src);1518880040;Add a java source to the streaming topology. The source expected to be an java based_implementation (.e.g. Kafka connector).__@param src A native java source (e.g. PythonFlinkKafkaConsumer09)_@return Python data stream;public PythonDataStream add_java_source(SourceFunction<Object> src) {_		return new PythonDataStream<>(env.addSource(src).map(new AdapterMap<>()))__	};add,a,java,source,to,the,streaming,topology,the,source,expected,to,be,an,java,based,implementation,e,g,kafka,connector,param,src,a,native,java,source,e,g,python,flink,kafka,consumer09,return,python,data,stream;public,python,data,stream,source,function,object,src,return,new,python,data,stream,env,add,source,src,map,new,adapter,map
PythonStreamExecutionEnvironment -> public PythonDataStream add_java_source(SourceFunction<Object> src);1525420604;Add a java source to the streaming topology. The source expected to be an java based_implementation (.e.g. Kafka connector).__@param src A native java source (e.g. PythonFlinkKafkaConsumer09)_@return Python data stream;public PythonDataStream add_java_source(SourceFunction<Object> src) {_		return new PythonDataStream<>(env.addSource(src).map(new AdapterMap<>()))__	};add,a,java,source,to,the,streaming,topology,the,source,expected,to,be,an,java,based,implementation,e,g,kafka,connector,param,src,a,native,java,source,e,g,python,flink,kafka,consumer09,return,python,data,stream;public,python,data,stream,source,function,object,src,return,new,python,data,stream,env,add,source,src,map,new,adapter,map
PythonStreamExecutionEnvironment -> public PythonStreamExecutionEnvironment set_parallelism(int parallelism);1518879596;A thin wrapper layer over {@link StreamExecutionEnvironment#setParallelism(int)}.__@param parallelism The parallelism_@return The same {@code PythonStreamExecutionEnvironment} instance of the caller;public PythonStreamExecutionEnvironment set_parallelism(int parallelism) {_		this.env.setParallelism(parallelism)__		return this__	};a,thin,wrapper,layer,over,link,stream,execution,environment,set,parallelism,int,param,parallelism,the,parallelism,return,the,same,code,python,stream,execution,environment,instance,of,the,caller;public,python,stream,execution,environment,int,parallelism,this,env,set,parallelism,parallelism,return,this
PythonStreamExecutionEnvironment -> public PythonStreamExecutionEnvironment set_parallelism(int parallelism);1518880040;A thin wrapper layer over {@link StreamExecutionEnvironment#setParallelism(int)}.__@param parallelism The parallelism_@return The same {@code PythonStreamExecutionEnvironment} instance of the caller;public PythonStreamExecutionEnvironment set_parallelism(int parallelism) {_		this.env.setParallelism(parallelism)__		return this__	};a,thin,wrapper,layer,over,link,stream,execution,environment,set,parallelism,int,param,parallelism,the,parallelism,return,the,same,code,python,stream,execution,environment,instance,of,the,caller;public,python,stream,execution,environment,int,parallelism,this,env,set,parallelism,parallelism,return,this
PythonStreamExecutionEnvironment -> public PythonStreamExecutionEnvironment set_parallelism(int parallelism);1525420604;A thin wrapper layer over {@link StreamExecutionEnvironment#setParallelism(int)}.__@param parallelism The parallelism_@return The same {@code PythonStreamExecutionEnvironment} instance of the caller;public PythonStreamExecutionEnvironment set_parallelism(int parallelism) {_		this.env.setParallelism(parallelism)__		return this__	};a,thin,wrapper,layer,over,link,stream,execution,environment,set,parallelism,int,param,parallelism,the,parallelism,return,the,same,code,python,stream,execution,environment,instance,of,the,caller;public,python,stream,execution,environment,int,parallelism,this,env,set,parallelism,parallelism,return,this
PythonStreamExecutionEnvironment -> public PythonStreamExecutionEnvironment enable_checkpointing(long interval);1518879596;A thin wrapper layer over {@link StreamExecutionEnvironment#enableCheckpointing(long)}.__@param interval Time interval between state checkpoints in milliseconds._@return The same {@code PythonStreamExecutionEnvironment} instance of the caller;public PythonStreamExecutionEnvironment enable_checkpointing(long interval) {_		this.env.enableCheckpointing(interval)__		return this__	};a,thin,wrapper,layer,over,link,stream,execution,environment,enable,checkpointing,long,param,interval,time,interval,between,state,checkpoints,in,milliseconds,return,the,same,code,python,stream,execution,environment,instance,of,the,caller;public,python,stream,execution,environment,long,interval,this,env,enable,checkpointing,interval,return,this
PythonStreamExecutionEnvironment -> public PythonStreamExecutionEnvironment enable_checkpointing(long interval);1518880040;A thin wrapper layer over {@link StreamExecutionEnvironment#enableCheckpointing(long)}.__@param interval Time interval between state checkpoints in milliseconds._@return The same {@code PythonStreamExecutionEnvironment} instance of the caller;public PythonStreamExecutionEnvironment enable_checkpointing(long interval) {_		this.env.enableCheckpointing(interval)__		return this__	};a,thin,wrapper,layer,over,link,stream,execution,environment,enable,checkpointing,long,param,interval,time,interval,between,state,checkpoints,in,milliseconds,return,the,same,code,python,stream,execution,environment,instance,of,the,caller;public,python,stream,execution,environment,long,interval,this,env,enable,checkpointing,interval,return,this
PythonStreamExecutionEnvironment -> public PythonStreamExecutionEnvironment enable_checkpointing(long interval);1525420604;A thin wrapper layer over {@link StreamExecutionEnvironment#enableCheckpointing(long)}.__@param interval Time interval between state checkpoints in milliseconds._@return The same {@code PythonStreamExecutionEnvironment} instance of the caller;public PythonStreamExecutionEnvironment enable_checkpointing(long interval) {_		this.env.enableCheckpointing(interval)__		return this__	};a,thin,wrapper,layer,over,link,stream,execution,environment,enable,checkpointing,long,param,interval,time,interval,between,state,checkpoints,in,milliseconds,return,the,same,code,python,stream,execution,environment,instance,of,the,caller;public,python,stream,execution,environment,long,interval,this,env,enable,checkpointing,interval,return,this
PythonStreamExecutionEnvironment -> public PythonDataStream generate_sequence(long from, long to);1518879596;A thin wrapper layer over {@link StreamExecutionEnvironment#generateSequence(long, long)}.__@param from_The number to start at (inclusive)_@param to_The number to stop at (inclusive)_@return A python data stream, containing all number in the [from, to] interval;public PythonDataStream generate_sequence(long from, long to) {_		return new PythonDataStream<>(env.generateSequence(from, to).map(new UtilityFunctions.SerializerMap<Long>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,generate,sequence,long,long,param,from,the,number,to,start,at,inclusive,param,to,the,number,to,stop,at,inclusive,return,a,python,data,stream,containing,all,number,in,the,from,to,interval;public,python,data,stream,long,from,long,to,return,new,python,data,stream,env,generate,sequence,from,to,map,new,utility,functions,serializer,map,long
PythonStreamExecutionEnvironment -> public PythonDataStream generate_sequence(long from, long to);1518880040;A thin wrapper layer over {@link StreamExecutionEnvironment#generateSequence(long, long)}.__@param from The number to start at (inclusive)_@param to The number to stop at (inclusive)_@return A python data stream, containing all number in the [from, to] interval;public PythonDataStream generate_sequence(long from, long to) {_		return new PythonDataStream<>(env.generateSequence(from, to).map(new AdapterMap<>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,generate,sequence,long,long,param,from,the,number,to,start,at,inclusive,param,to,the,number,to,stop,at,inclusive,return,a,python,data,stream,containing,all,number,in,the,from,to,interval;public,python,data,stream,long,from,long,to,return,new,python,data,stream,env,generate,sequence,from,to,map,new,adapter,map
PythonStreamExecutionEnvironment -> public PythonDataStream generate_sequence(long from, long to);1525420604;A thin wrapper layer over {@link StreamExecutionEnvironment#generateSequence(long, long)}.__@param from The number to start at (inclusive)_@param to The number to stop at (inclusive)_@return A python data stream, containing all number in the [from, to] interval;public PythonDataStream generate_sequence(long from, long to) {_		return new PythonDataStream<>(env.generateSequence(from, to).map(new AdapterMap<>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,generate,sequence,long,long,param,from,the,number,to,start,at,inclusive,param,to,the,number,to,stop,at,inclusive,return,a,python,data,stream,containing,all,number,in,the,from,to,interval;public,python,data,stream,long,from,long,to,return,new,python,data,stream,env,generate,sequence,from,to,map,new,adapter,map
PythonStreamExecutionEnvironment -> public PythonDataStream from_collection(Collection<Object> collection);1518879596;A thin wrapper layer over {@link StreamExecutionEnvironment#fromCollection(java.util.Collection)}__<p>The input {@code Collection} is of type {@code Object}, because it is a collection_of Python elements. * There type is determined in runtime, by the Jython framework.</p>__@param collection_The collection of python elements to create the data stream from._@return_The data stream representing the given collection;public PythonDataStream from_collection(Collection<Object> collection) {_		return new PythonDataStream<>(env.fromCollection(collection).map(new UtilityFunctions.SerializerMap<>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,from,collection,java,util,collection,p,the,input,code,collection,is,of,type,code,object,because,it,is,a,collection,of,python,elements,there,type,is,determined,in,runtime,by,the,jython,framework,p,param,collection,the,collection,of,python,elements,to,create,the,data,stream,from,return,the,data,stream,representing,the,given,collection;public,python,data,stream,collection,object,collection,return,new,python,data,stream,env,from,collection,collection,map,new,utility,functions,serializer,map
PythonStreamExecutionEnvironment -> public PythonDataStream from_collection(Collection<Object> collection);1518880040;A thin wrapper layer over {@link StreamExecutionEnvironment#fromCollection(java.util.Collection)}__<p>The input {@code Collection} is of type {@code Object}, because it is a collection_of Python elements. * There type is determined in runtime, by the Jython framework.</p>__@param collection The collection of python elements to create the data stream from._@return The data stream representing the given collection;public PythonDataStream from_collection(Collection<Object> collection) {_		return new PythonDataStream<>(env.fromCollection(collection).map(new AdapterMap<>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,from,collection,java,util,collection,p,the,input,code,collection,is,of,type,code,object,because,it,is,a,collection,of,python,elements,there,type,is,determined,in,runtime,by,the,jython,framework,p,param,collection,the,collection,of,python,elements,to,create,the,data,stream,from,return,the,data,stream,representing,the,given,collection;public,python,data,stream,collection,object,collection,return,new,python,data,stream,env,from,collection,collection,map,new,adapter,map
PythonStreamExecutionEnvironment -> public PythonDataStream from_collection(Collection<Object> collection);1525420604;A thin wrapper layer over {@link StreamExecutionEnvironment#fromCollection(java.util.Collection)}__<p>The input {@code Collection} is of type {@code Object}, because it is a collection_of Python elements. * There type is determined in runtime, by the Jython framework.</p>__@param collection The collection of python elements to create the data stream from._@return The data stream representing the given collection;public PythonDataStream from_collection(Collection<Object> collection) {_		return new PythonDataStream<>(env.fromCollection(collection).map(new AdapterMap<>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,from,collection,java,util,collection,p,the,input,code,collection,is,of,type,code,object,because,it,is,a,collection,of,python,elements,there,type,is,determined,in,runtime,by,the,jython,framework,p,param,collection,the,collection,of,python,elements,to,create,the,data,stream,from,return,the,data,stream,representing,the,given,collection;public,python,data,stream,collection,object,collection,return,new,python,data,stream,env,from,collection,collection,map,new,adapter,map
PythonStreamExecutionEnvironment -> public JobExecutionResult execute(String job_name) throws Exception;1518879596;A thin wrapper layer over {@link StreamExecutionEnvironment#execute(java.lang.String)}.__@return The result of the job execution, containing elapsed time and accumulators._@throws Exception which occurs during job execution.;public JobExecutionResult execute(String job_name) throws Exception {_		return execute(job_name, false)__	};a,thin,wrapper,layer,over,link,stream,execution,environment,execute,java,lang,string,return,the,result,of,the,job,execution,containing,elapsed,time,and,accumulators,throws,exception,which,occurs,during,job,execution;public,job,execution,result,execute,string,throws,exception,return,execute,false
PythonStreamExecutionEnvironment -> public JobExecutionResult execute(String job_name) throws Exception;1518880040;A thin wrapper layer over {@link StreamExecutionEnvironment#execute(java.lang.String)}.__@return The result of the job execution, containing elapsed time and accumulators._@throws Exception which occurs during job execution.;public JobExecutionResult execute(String job_name) throws Exception {_		distributeFiles()__		JobExecutionResult result = this.env.execute(job_name)__		cleanupDistributedFiles()__		return result__	};a,thin,wrapper,layer,over,link,stream,execution,environment,execute,java,lang,string,return,the,result,of,the,job,execution,containing,elapsed,time,and,accumulators,throws,exception,which,occurs,during,job,execution;public,job,execution,result,execute,string,throws,exception,distribute,files,job,execution,result,result,this,env,execute,cleanup,distributed,files,return,result
PythonStreamExecutionEnvironment -> public JobExecutionResult execute(String job_name) throws Exception;1525420604;A thin wrapper layer over {@link StreamExecutionEnvironment#execute(java.lang.String)}.__@return The result of the job execution, containing elapsed time and accumulators._@throws Exception which occurs during job execution.;public JobExecutionResult execute(String job_name) throws Exception {_		distributeFiles()__		JobExecutionResult result = this.env.execute(job_name)__		return result__	};a,thin,wrapper,layer,over,link,stream,execution,environment,execute,java,lang,string,return,the,result,of,the,job,execution,containing,elapsed,time,and,accumulators,throws,exception,which,occurs,during,job,execution;public,job,execution,result,execute,string,throws,exception,distribute,files,job,execution,result,result,this,env,execute,return,result
PythonStreamExecutionEnvironment -> public PythonDataStream socket_text_stream(String host, int port);1518879596;A thin wrapper layer over {@link StreamExecutionEnvironment#socketTextStream(java.lang.String, int)}.__@param host_The host name which a server socket binds_@param port_The port number which a server socket binds. A port number of 0 means that the port number is automatically_allocated._@return A python data stream containing the strings received from the socket;public PythonDataStream socket_text_stream(String host, int port) {_		return new PythonDataStream<>(env.socketTextStream(host, port).map(new UtilityFunctions.SerializerMap<String>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,socket,text,stream,java,lang,string,int,param,host,the,host,name,which,a,server,socket,binds,param,port,the,port,number,which,a,server,socket,binds,a,port,number,of,0,means,that,the,port,number,is,automatically,allocated,return,a,python,data,stream,containing,the,strings,received,from,the,socket;public,python,data,stream,string,host,int,port,return,new,python,data,stream,env,socket,text,stream,host,port,map,new,utility,functions,serializer,map,string
PythonStreamExecutionEnvironment -> public PythonDataStream socket_text_stream(String host, int port);1518880040;A thin wrapper layer over {@link StreamExecutionEnvironment#socketTextStream(java.lang.String, int)}.__@param host The host name which a server socket binds_@param port The port number which a server socket binds. A port number of 0 means that the port number is automatically_allocated._@return A python data stream containing the strings received from the socket;public PythonDataStream socket_text_stream(String host, int port) {_		return new PythonDataStream<>(env.socketTextStream(host, port).map(new AdapterMap<String>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,socket,text,stream,java,lang,string,int,param,host,the,host,name,which,a,server,socket,binds,param,port,the,port,number,which,a,server,socket,binds,a,port,number,of,0,means,that,the,port,number,is,automatically,allocated,return,a,python,data,stream,containing,the,strings,received,from,the,socket;public,python,data,stream,string,host,int,port,return,new,python,data,stream,env,socket,text,stream,host,port,map,new,adapter,map,string
PythonStreamExecutionEnvironment -> public PythonDataStream socket_text_stream(String host, int port);1525420604;A thin wrapper layer over {@link StreamExecutionEnvironment#socketTextStream(java.lang.String, int)}.__@param host The host name which a server socket binds_@param port The port number which a server socket binds. A port number of 0 means that the port number is automatically_allocated._@return A python data stream containing the strings received from the socket;public PythonDataStream socket_text_stream(String host, int port) {_		return new PythonDataStream<>(env.socketTextStream(host, port).map(new AdapterMap<String>()))__	};a,thin,wrapper,layer,over,link,stream,execution,environment,socket,text,stream,java,lang,string,int,param,host,the,host,name,which,a,server,socket,binds,param,port,the,port,number,which,a,server,socket,binds,a,port,number,of,0,means,that,the,port,number,is,automatically,allocated,return,a,python,data,stream,containing,the,strings,received,from,the,socket;public,python,data,stream,string,host,int,port,return,new,python,data,stream,env,socket,text,stream,host,port,map,new,adapter,map,string
PythonStreamExecutionEnvironment -> public PythonStreamExecutionEnvironment enable_checkpointing(long interval, CheckpointingMode mode);1518879596;A thin wrapper layer over {@link StreamExecutionEnvironment#enableCheckpointing(long, CheckpointingMode)}.__@param interval Time interval between state checkpoints in milliseconds._@param mode_The checkpointing mode, selecting between "exactly once" and "at least once" guaranteed._@return The same {@code PythonStreamExecutionEnvironment} instance of the caller;public PythonStreamExecutionEnvironment enable_checkpointing(long interval, CheckpointingMode mode) {_		this.env.enableCheckpointing(interval, mode)__		return this__	};a,thin,wrapper,layer,over,link,stream,execution,environment,enable,checkpointing,long,checkpointing,mode,param,interval,time,interval,between,state,checkpoints,in,milliseconds,param,mode,the,checkpointing,mode,selecting,between,exactly,once,and,at,least,once,guaranteed,return,the,same,code,python,stream,execution,environment,instance,of,the,caller;public,python,stream,execution,environment,long,interval,checkpointing,mode,mode,this,env,enable,checkpointing,interval,mode,return,this
PythonStreamExecutionEnvironment -> public PythonStreamExecutionEnvironment enable_checkpointing(long interval, CheckpointingMode mode);1518880040;A thin wrapper layer over {@link StreamExecutionEnvironment#enableCheckpointing(long, CheckpointingMode)}.__@param interval Time interval between state checkpoints in milliseconds._@param mode The checkpointing mode, selecting between "exactly once" and "at least once" guaranteed._@return The same {@code PythonStreamExecutionEnvironment} instance of the caller;public PythonStreamExecutionEnvironment enable_checkpointing(long interval, CheckpointingMode mode) {_		this.env.enableCheckpointing(interval, mode)__		return this__	};a,thin,wrapper,layer,over,link,stream,execution,environment,enable,checkpointing,long,checkpointing,mode,param,interval,time,interval,between,state,checkpoints,in,milliseconds,param,mode,the,checkpointing,mode,selecting,between,exactly,once,and,at,least,once,guaranteed,return,the,same,code,python,stream,execution,environment,instance,of,the,caller;public,python,stream,execution,environment,long,interval,checkpointing,mode,mode,this,env,enable,checkpointing,interval,mode,return,this
PythonStreamExecutionEnvironment -> public PythonStreamExecutionEnvironment enable_checkpointing(long interval, CheckpointingMode mode);1525420604;A thin wrapper layer over {@link StreamExecutionEnvironment#enableCheckpointing(long, CheckpointingMode)}.__@param interval Time interval between state checkpoints in milliseconds._@param mode The checkpointing mode, selecting between "exactly once" and "at least once" guaranteed._@return The same {@code PythonStreamExecutionEnvironment} instance of the caller;public PythonStreamExecutionEnvironment enable_checkpointing(long interval, CheckpointingMode mode) {_		this.env.enableCheckpointing(interval, mode)__		return this__	};a,thin,wrapper,layer,over,link,stream,execution,environment,enable,checkpointing,long,checkpointing,mode,param,interval,time,interval,between,state,checkpoints,in,milliseconds,param,mode,the,checkpointing,mode,selecting,between,exactly,once,and,at,least,once,guaranteed,return,the,same,code,python,stream,execution,environment,instance,of,the,caller;public,python,stream,execution,environment,long,interval,checkpointing,mode,mode,this,env,enable,checkpointing,interval,mode,return,this
