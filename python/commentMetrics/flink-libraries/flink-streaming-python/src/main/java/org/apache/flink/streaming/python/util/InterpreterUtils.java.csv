# id;timestamp;commentText;codeText;commentWords;codeWords
InterpreterUtils -> @SuppressWarnings("unchecked") 	public static <X> X deserializeFunction(RuntimeContext context, byte[] serFun) throws FlinkException;1516017822;Deserialize the given python function. If the functions class definition cannot be found we assume that this is_the first invocation of this method for a given job and load the python script containing the class definition_via jython.__@param context the RuntimeContext of the java function_@param serFun serialized python UDF_@return deserialized python UDF_@throws FlinkException if the deserialization failed;@SuppressWarnings("unchecked")_	public static <X> X deserializeFunction(RuntimeContext context, byte[] serFun) throws FlinkException {_		if (!jythonInitialized) {_			_			String path = context.getDistributedCache().getFile(PythonConstants.FLINK_PYTHON_DC_ID).getAbsolutePath()___			String scriptName = PythonStreamExecutionEnvironment.PythonJobParameters.getScriptName(context.getExecutionConfig().getGlobalJobParameters())___			try {_				initPythonInterpreter(_					new String[]{Paths.get(path, scriptName).toString()},_					path,_					scriptName)__			} catch (Exception e) {_				LOG.error("Initialization of jython failed.")__				try {_					LOG.error("Initialization of jython failed.", e)__					throw new FlinkRuntimeException("Initialization of jython failed.", e)__				} catch (Exception ie) {_					_					LOG.error("Initialization of jython failed. Could not print original stacktrace.", ie)__					throw new FlinkRuntimeException("Initialization of jython failed. Could not print original stacktrace.")__				}_			}_		}__		try {_			return (X) SerializationUtils.deserializeObject(serFun)__		} catch (IOException | ClassNotFoundException ex) {_			throw new FlinkException("Deserialization of user-function failed.", ex)__		}_	};deserialize,the,given,python,function,if,the,functions,class,definition,cannot,be,found,we,assume,that,this,is,the,first,invocation,of,this,method,for,a,given,job,and,load,the,python,script,containing,the,class,definition,via,jython,param,context,the,runtime,context,of,the,java,function,param,ser,fun,serialized,python,udf,return,deserialized,python,udf,throws,flink,exception,if,the,deserialization,failed;suppress,warnings,unchecked,public,static,x,x,deserialize,function,runtime,context,context,byte,ser,fun,throws,flink,exception,if,jython,initialized,string,path,context,get,distributed,cache,get,file,python,constants,get,absolute,path,string,script,name,python,stream,execution,environment,python,job,parameters,get,script,name,context,get,execution,config,get,global,job,parameters,try,init,python,interpreter,new,string,paths,get,path,script,name,to,string,path,script,name,catch,exception,e,log,error,initialization,of,jython,failed,try,log,error,initialization,of,jython,failed,e,throw,new,flink,runtime,exception,initialization,of,jython,failed,e,catch,exception,ie,log,error,initialization,of,jython,failed,could,not,print,original,stacktrace,ie,throw,new,flink,runtime,exception,initialization,of,jython,failed,could,not,print,original,stacktrace,try,return,x,serialization,utils,deserialize,object,ser,fun,catch,ioexception,class,not,found,exception,ex,throw,new,flink,exception,deserialization,of,user,function,failed,ex
InterpreterUtils -> @SuppressWarnings("unchecked") 	public static <X> X deserializeFunction(RuntimeContext context, byte[] serFun) throws FlinkException;1518986935;Deserialize the given python function. If the functions class definition cannot be found we assume that this is_the first invocation of this method for a given job and load the python script containing the class definition_via jython.__@param context the RuntimeContext of the java function_@param serFun serialized python UDF_@return deserialized python UDF_@throws FlinkException if the deserialization failed;@SuppressWarnings("unchecked")_	public static <X> X deserializeFunction(RuntimeContext context, byte[] serFun) throws FlinkException {_		if (!jythonInitialized) {_			_			String path = context.getDistributedCache().getFile(PythonConstants.FLINK_PYTHON_DC_ID).getAbsolutePath()___			String scriptName = PythonStreamExecutionEnvironment.PythonJobParameters.getScriptName(context.getExecutionConfig().getGlobalJobParameters())___			try {_				initPythonInterpreter(_					new String[]{Paths.get(path, scriptName).toString()},_					path,_					scriptName)__			} catch (Exception e) {_				LOG.error("Initialization of jython failed.")__				try {_					LOG.error("Initialization of jython failed.", e)__					throw new FlinkRuntimeException("Initialization of jython failed.", e)__				} catch (Exception ie) {_					_					LOG.error("Initialization of jython failed. Could not print original stacktrace.", ie)__					throw new FlinkRuntimeException("Initialization of jython failed. Could not print original stacktrace.")__				}_			}_		}__		try {_			return (X) SerializationUtils.deserializeObject(serFun)__		} catch (IOException | ClassNotFoundException ex) {_			throw new FlinkException("Deserialization of user-function failed.", ex)__		}_	};deserialize,the,given,python,function,if,the,functions,class,definition,cannot,be,found,we,assume,that,this,is,the,first,invocation,of,this,method,for,a,given,job,and,load,the,python,script,containing,the,class,definition,via,jython,param,context,the,runtime,context,of,the,java,function,param,ser,fun,serialized,python,udf,return,deserialized,python,udf,throws,flink,exception,if,the,deserialization,failed;suppress,warnings,unchecked,public,static,x,x,deserialize,function,runtime,context,context,byte,ser,fun,throws,flink,exception,if,jython,initialized,string,path,context,get,distributed,cache,get,file,python,constants,get,absolute,path,string,script,name,python,stream,execution,environment,python,job,parameters,get,script,name,context,get,execution,config,get,global,job,parameters,try,init,python,interpreter,new,string,paths,get,path,script,name,to,string,path,script,name,catch,exception,e,log,error,initialization,of,jython,failed,try,log,error,initialization,of,jython,failed,e,throw,new,flink,runtime,exception,initialization,of,jython,failed,e,catch,exception,ie,log,error,initialization,of,jython,failed,could,not,print,original,stacktrace,ie,throw,new,flink,runtime,exception,initialization,of,jython,failed,could,not,print,original,stacktrace,try,return,x,serialization,utils,deserialize,object,ser,fun,catch,ioexception,class,not,found,exception,ex,throw,new,flink,exception,deserialization,of,user,function,failed,ex
InterpreterUtils -> @SuppressWarnings("unchecked") 	public static <X> X deserializeFunction(RuntimeContext context, byte[] serFun) throws FlinkException;1549965236;Deserialize the given python function. If the functions class definition cannot be found we assume that this is_the first invocation of this method for a given job and load the python script containing the class definition_via jython.__@param context the RuntimeContext of the java function_@param serFun serialized python UDF_@return deserialized python UDF_@throws FlinkException if the deserialization failed;@SuppressWarnings("unchecked")_	public static <X> X deserializeFunction(RuntimeContext context, byte[] serFun) throws FlinkException {_		if (!jythonInitialized) {_			_			String path = context.getDistributedCache().getFile(PythonConstants.FLINK_PYTHON_DC_ID).getAbsolutePath()___			String scriptName = PythonStreamExecutionEnvironment.PythonJobParameters.getScriptName(context.getExecutionConfig().getGlobalJobParameters())___			try {_				initPythonInterpreter(_					new String[]{Paths.get(path, scriptName).toString()},_					path,_					scriptName)__			} catch (Exception e) {__				try {_					LOG.error("Initialization of jython failed.", e)__					throw new FlinkRuntimeException("Initialization of jython failed.", e)__				} catch (Exception ie) {_					_					LOG.error("Initialization of jython failed. Could not print original stacktrace.", ie)__					throw new FlinkRuntimeException("Initialization of jython failed. Could not print original stacktrace.")__				}_			}_		}__		try {_			return (X) SerializationUtils.deserializeObject(serFun)__		} catch (IOException | ClassNotFoundException ex) {_			throw new FlinkException("Deserialization of user-function failed.", ex)__		}_	};deserialize,the,given,python,function,if,the,functions,class,definition,cannot,be,found,we,assume,that,this,is,the,first,invocation,of,this,method,for,a,given,job,and,load,the,python,script,containing,the,class,definition,via,jython,param,context,the,runtime,context,of,the,java,function,param,ser,fun,serialized,python,udf,return,deserialized,python,udf,throws,flink,exception,if,the,deserialization,failed;suppress,warnings,unchecked,public,static,x,x,deserialize,function,runtime,context,context,byte,ser,fun,throws,flink,exception,if,jython,initialized,string,path,context,get,distributed,cache,get,file,python,constants,get,absolute,path,string,script,name,python,stream,execution,environment,python,job,parameters,get,script,name,context,get,execution,config,get,global,job,parameters,try,init,python,interpreter,new,string,paths,get,path,script,name,to,string,path,script,name,catch,exception,e,try,log,error,initialization,of,jython,failed,e,throw,new,flink,runtime,exception,initialization,of,jython,failed,e,catch,exception,ie,log,error,initialization,of,jython,failed,could,not,print,original,stacktrace,ie,throw,new,flink,runtime,exception,initialization,of,jython,failed,could,not,print,original,stacktrace,try,return,x,serialization,utils,deserialize,object,ser,fun,catch,ioexception,class,not,found,exception,ex,throw,new,flink,exception,deserialization,of,user,function,failed,ex
InterpreterUtils -> public static void initAndExecPythonScript(PythonEnvironmentFactory factory, java.nio.file.Path scriptDirectory, String scriptName, String[] args);1516017822;Initializes the Jython interpreter and executes a python script.__@param factory environment factory_@param scriptDirectory the directory containing all required user python scripts_@param scriptName the name of the main python script_@param args Command line arguments that will be delivered to the executed python script;public static void initAndExecPythonScript(PythonEnvironmentFactory factory, java.nio.file.Path scriptDirectory, String scriptName, String[] args) {_		String[] fullArgs = new String[args.length + 1]__		fullArgs[0] = scriptDirectory.resolve(scriptName).toString()__		System.arraycopy(args, 0, fullArgs, 1, args.length)___		initPythonInterpreter(fullArgs, scriptDirectory.toUri().getPath(), scriptName)___		PythonInterpreter pythonInterpreter = initPythonInterpreter(fullArgs, scriptDirectory.toUri().getPath(), scriptName)___		pythonInterpreter.set("__flink_env_factory__", factory)__		pythonInterpreter.exec(scriptName + ".main(__flink_env_factory__)")__	};initializes,the,jython,interpreter,and,executes,a,python,script,param,factory,environment,factory,param,script,directory,the,directory,containing,all,required,user,python,scripts,param,script,name,the,name,of,the,main,python,script,param,args,command,line,arguments,that,will,be,delivered,to,the,executed,python,script;public,static,void,init,and,exec,python,script,python,environment,factory,factory,java,nio,file,path,script,directory,string,script,name,string,args,string,full,args,new,string,args,length,1,full,args,0,script,directory,resolve,script,name,to,string,system,arraycopy,args,0,full,args,1,args,length,init,python,interpreter,full,args,script,directory,to,uri,get,path,script,name,python,interpreter,python,interpreter,init,python,interpreter,full,args,script,directory,to,uri,get,path,script,name,python,interpreter,set,factory,python,interpreter,exec,script,name,main
InterpreterUtils -> public static void initAndExecPythonScript(PythonEnvironmentFactory factory, java.nio.file.Path scriptDirectory, String scriptName, String[] args);1518986935;Initializes the Jython interpreter and executes a python script.__@param factory environment factory_@param scriptDirectory the directory containing all required user python scripts_@param scriptName the name of the main python script_@param args Command line arguments that will be delivered to the executed python script;public static void initAndExecPythonScript(PythonEnvironmentFactory factory, java.nio.file.Path scriptDirectory, String scriptName, String[] args) {_		String[] fullArgs = new String[args.length + 1]__		fullArgs[0] = scriptDirectory.resolve(scriptName).toString()__		System.arraycopy(args, 0, fullArgs, 1, args.length)___		PythonInterpreter pythonInterpreter = initPythonInterpreter(fullArgs, scriptDirectory.toUri().getPath(), scriptName)___		pythonInterpreter.set("__flink_env_factory__", factory)__		pythonInterpreter.exec(scriptName + ".main(__flink_env_factory__)")__	};initializes,the,jython,interpreter,and,executes,a,python,script,param,factory,environment,factory,param,script,directory,the,directory,containing,all,required,user,python,scripts,param,script,name,the,name,of,the,main,python,script,param,args,command,line,arguments,that,will,be,delivered,to,the,executed,python,script;public,static,void,init,and,exec,python,script,python,environment,factory,factory,java,nio,file,path,script,directory,string,script,name,string,args,string,full,args,new,string,args,length,1,full,args,0,script,directory,resolve,script,name,to,string,system,arraycopy,args,0,full,args,1,args,length,python,interpreter,python,interpreter,init,python,interpreter,full,args,script,directory,to,uri,get,path,script,name,python,interpreter,set,factory,python,interpreter,exec,script,name,main
InterpreterUtils -> public static void initAndExecPythonScript(PythonEnvironmentFactory factory, java.nio.file.Path scriptDirectory, String scriptName, String[] args);1549965236;Initializes the Jython interpreter and executes a python script.__@param factory environment factory_@param scriptDirectory the directory containing all required user python scripts_@param scriptName the name of the main python script_@param args Command line arguments that will be delivered to the executed python script;public static void initAndExecPythonScript(PythonEnvironmentFactory factory, java.nio.file.Path scriptDirectory, String scriptName, String[] args) {_		String[] fullArgs = new String[args.length + 1]__		fullArgs[0] = scriptDirectory.resolve(scriptName).toString()__		System.arraycopy(args, 0, fullArgs, 1, args.length)___		PythonInterpreter pythonInterpreter = initPythonInterpreter(fullArgs, scriptDirectory.toUri().getPath(), scriptName)___		pythonInterpreter.set("__flink_env_factory__", factory)__		pythonInterpreter.exec(scriptName + ".main(__flink_env_factory__)")__	};initializes,the,jython,interpreter,and,executes,a,python,script,param,factory,environment,factory,param,script,directory,the,directory,containing,all,required,user,python,scripts,param,script,name,the,name,of,the,main,python,script,param,args,command,line,arguments,that,will,be,delivered,to,the,executed,python,script;public,static,void,init,and,exec,python,script,python,environment,factory,factory,java,nio,file,path,script,directory,string,script,name,string,args,string,full,args,new,string,args,length,1,full,args,0,script,directory,resolve,script,name,to,string,system,arraycopy,args,0,full,args,1,args,length,python,interpreter,python,interpreter,init,python,interpreter,full,args,script,directory,to,uri,get,path,script,name,python,interpreter,set,factory,python,interpreter,exec,script,name,main
