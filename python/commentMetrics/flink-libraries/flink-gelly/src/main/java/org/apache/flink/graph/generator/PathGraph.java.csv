# id;timestamp;commentText;codeText;commentWords;codeWords
PathGraph -> public PathGraph(ExecutionEnvironment env, long vertexCount);1460571929;An undirected {@link Graph} where all edges form a single path.__@param env the Flink execution environment_@param vertexCount number of vertices;public PathGraph(ExecutionEnvironment env, long vertexCount) {_		if (vertexCount <= 0) {_			throw new IllegalArgumentException("Vertex count must be greater than zero")__		}__		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,where,all,edges,form,a,single,path,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,path,graph,execution,environment,env,long,vertex,count,if,vertex,count,0,throw,new,illegal,argument,exception,vertex,count,must,be,greater,than,zero,this,env,env,this,vertex,count,vertex,count
PathGraph -> public PathGraph(ExecutionEnvironment env, long vertexCount);1484685504;An undirected {@link Graph} where all edges form a single path.__@param env the Flink execution environment_@param vertexCount number of vertices;public PathGraph(ExecutionEnvironment env, long vertexCount) {_		if (vertexCount <= 0) {_			throw new IllegalArgumentException("Vertex count must be greater than zero")__		}__		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,where,all,edges,form,a,single,path,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,path,graph,execution,environment,env,long,vertex,count,if,vertex,count,0,throw,new,illegal,argument,exception,vertex,count,must,be,greater,than,zero,this,env,env,this,vertex,count,vertex,count
PathGraph -> public PathGraph(ExecutionEnvironment env, long vertexCount);1489068942;An undirected {@link Graph} where all edges form a single path.__@param env the Flink execution environment_@param vertexCount number of vertices;public PathGraph(ExecutionEnvironment env, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,where,all,edges,form,a,single,path,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,path,graph,execution,environment,env,long,vertex,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,this,env,env,this,vertex,count,vertex,count
PathGraph -> public PathGraph(ExecutionEnvironment env, long vertexCount);1494520945;An undirected {@link Graph} with {@code n} vertices where each vertex_v<sub>i</sub> connects to adjacent vertices v<sub>i+1</sub> when_{@code i < n-1} and v<sub>i-1</sub> when {@code i > 0}._<p>_A {@code PathGraph} is distinguished from a {@code CycleGraph} in that_the first and last vertex are not connected, breaking the cycle.__@param env the Flink execution environment_@param vertexCount number of vertices;public PathGraph(ExecutionEnvironment env, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,with,code,n,vertices,where,each,vertex,v,sub,i,sub,connects,to,adjacent,vertices,v,sub,i,1,sub,when,code,i,n,1,and,v,sub,i,1,sub,when,code,i,0,p,a,code,path,graph,is,distinguished,from,a,code,cycle,graph,in,that,the,first,and,last,vertex,are,not,connected,breaking,the,cycle,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,path,graph,execution,environment,env,long,vertex,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,this,env,env,this,vertex,count,vertex,count
PathGraph -> public PathGraph(ExecutionEnvironment env, long vertexCount);1495819075;An undirected {@link Graph} with {@code n} vertices where each vertex_v<sub>i</sub> connects to adjacent vertices v<sub>i+1</sub> when_{@code i < n-1} and v<sub>i-1</sub> when {@code i > 0}.__<p>A {@code PathGraph} is distinguished from a {@code CycleGraph} in that_the first and last vertex are not connected, breaking the cycle.__@param env the Flink execution environment_@param vertexCount number of vertices;public PathGraph(ExecutionEnvironment env, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,with,code,n,vertices,where,each,vertex,v,sub,i,sub,connects,to,adjacent,vertices,v,sub,i,1,sub,when,code,i,n,1,and,v,sub,i,1,sub,when,code,i,0,p,a,code,path,graph,is,distinguished,from,a,code,cycle,graph,in,that,the,first,and,last,vertex,are,not,connected,breaking,the,cycle,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,path,graph,execution,environment,env,long,vertex,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,this,env,env,this,vertex,count,vertex,count
PathGraph -> public PathGraph(ExecutionEnvironment env, long vertexCount);1505445925;An undirected {@link Graph} with {@code n} vertices where each vertex_v<sub>i</sub> connects to adjacent vertices v<sub>i+1</sub> when_{@code i < n-1} and v<sub>i-1</sub> when {@code i > 0}.__<p>A {@code PathGraph} is distinguished from a {@code CycleGraph} in that_the first and last vertex are not connected, breaking the cycle.__@param env the Flink execution environment_@param vertexCount number of vertices;public PathGraph(ExecutionEnvironment env, long vertexCount) {_		Preconditions.checkArgument(vertexCount >= MINIMUM_VERTEX_COUNT,_			"Vertex count must be at least " + MINIMUM_VERTEX_COUNT)___		this.env = env__		this.vertexCount = vertexCount__	};an,undirected,link,graph,with,code,n,vertices,where,each,vertex,v,sub,i,sub,connects,to,adjacent,vertices,v,sub,i,1,sub,when,code,i,n,1,and,v,sub,i,1,sub,when,code,i,0,p,a,code,path,graph,is,distinguished,from,a,code,cycle,graph,in,that,the,first,and,last,vertex,are,not,connected,breaking,the,cycle,param,env,the,flink,execution,environment,param,vertex,count,number,of,vertices;public,path,graph,execution,environment,env,long,vertex,count,preconditions,check,argument,vertex,count,vertex,count,must,be,at,least,this,env,env,this,vertex,count,vertex,count
