# id;timestamp;commentText;codeText;commentWords;codeWords
Translate -> public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator);1462395083;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeIds(edges, translator, PARALLELISM_UNKNOWN)__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,return,translate,edge,ids,edges,translator
Translate -> public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator);1462819515;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeIds(edges, translator, PARALLELISM_UNKNOWN)__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,return,translate,edge,ids,edges,translator
Translate -> public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator);1464291269;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeIds(edges, translator, PARALLELISM_DEFAULT)__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,return,translate,edge,ids,edges,translator
Translate -> public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator);1495653033;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeIds(edges, translator, PARALLELISM_DEFAULT)__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,return,translate,edge,ids,edges,translator
Translate -> public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator);1496315845;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeIds(edges, translator, PARALLELISM_DEFAULT)__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,return,translate,edge,ids,edges,translator
Translate -> public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator);1501532946;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeIds(edges, translator, PARALLELISM_DEFAULT)__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,return,translate,edge,ids,edges,translator
Translate -> public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator);1528109383;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeIds(edges, translator, PARALLELISM_DEFAULT)__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,return,translate,edge,ids,edges,translator
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1462395083;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)__		Preconditions.checkArgument(parallelism > 0 || parallelism == PARALLELISM_DEFAULT || parallelism == PARALLELISM_UNKNOWN,_			"The parallelism must be greater than zero.")___		Class<Vertex<K, NEW>> vertexClass = (Class<Vertex<K, NEW>>)(Class<? extends Vertex>) Vertex.class__		TypeInformation<K> idType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.createTypeInfo(TranslateFunction.class, translator.getClass(), 1, null, null)___		TupleTypeInfo<Vertex<K, NEW>> returnType = new TupleTypeInfo<>(vertexClass, idType, newType)___		return vertices_			.map(new TranslateVertexValue<K, OLD, NEW>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex values")__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,preconditions,check,argument,parallelism,0,parallelism,parallelism,the,parallelism,must,be,greater,than,zero,class,vertex,k,new,vertex,class,class,vertex,k,new,class,extends,vertex,vertex,class,type,information,k,id,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,0,type,information,new,new,type,type,extractor,create,type,info,translate,function,class,translator,get,class,1,null,null,tuple,type,info,vertex,k,new,return,type,new,tuple,type,info,vertex,class,id,type,new,type,return,vertices,map,new,translate,vertex,value,k,old,new,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1462819515;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)__		Preconditions.checkArgument(parallelism > 0 || parallelism == PARALLELISM_DEFAULT || parallelism == PARALLELISM_UNKNOWN,_			"The parallelism must be greater than zero.")___		Class<Vertex<K, NEW>> vertexClass = (Class<Vertex<K, NEW>>)(Class<? extends Vertex>) Vertex.class__		TypeInformation<K> idType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(1)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)___		TupleTypeInfo<Vertex<K, NEW>> returnType = new TupleTypeInfo<>(vertexClass, idType, newType)___		return vertices_			.map(new TranslateVertexValue<K, OLD, NEW>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex values")__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,preconditions,check,argument,parallelism,0,parallelism,parallelism,the,parallelism,must,be,greater,than,zero,class,vertex,k,new,vertex,class,class,vertex,k,new,class,extends,vertex,vertex,class,type,information,k,id,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,1,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,tuple,type,info,vertex,k,new,return,type,new,tuple,type,info,vertex,class,id,type,new,type,return,vertices,map,new,translate,vertex,value,k,old,new,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1464291269;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)___		Class<Vertex<K, NEW>> vertexClass = (Class<Vertex<K, NEW>>)(Class<? extends Vertex>) Vertex.class__		TypeInformation<K> idType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(1)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)___		TupleTypeInfo<Vertex<K, NEW>> returnType = new TupleTypeInfo<>(vertexClass, idType, newType)___		return vertices_			.map(new TranslateVertexValue<K, OLD, NEW>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex values")__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,class,vertex,k,new,vertex,class,class,vertex,k,new,class,extends,vertex,vertex,class,type,information,k,id,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,1,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,tuple,type,info,vertex,k,new,return,type,new,tuple,type,info,vertex,class,id,type,new,type,return,vertices,map,new,translate,vertex,value,k,old,new,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1495653033;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)___		Class<Vertex<K, NEW>> vertexClass = (Class<Vertex<K, NEW>>) (Class<? extends Vertex>) Vertex.class__		TypeInformation<K> idType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(1)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)___		TupleTypeInfo<Vertex<K, NEW>> returnType = new TupleTypeInfo<>(vertexClass, idType, newType)___		return vertices_			.map(new TranslateVertexValue<K, OLD, NEW>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex values")__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,class,vertex,k,new,vertex,class,class,vertex,k,new,class,extends,vertex,vertex,class,type,information,k,id,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,1,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,tuple,type,info,vertex,k,new,return,type,new,tuple,type,info,vertex,class,id,type,new,type,return,vertices,map,new,translate,vertex,value,k,old,new,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1496315845;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)___		Class<Vertex<K, NEW>> vertexClass = (Class<Vertex<K, NEW>>) (Class<? extends Vertex>) Vertex.class__		TypeInformation<K> idType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(1)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[]{0},_			new int[]{1},_			oldType,_			null,_			false)___		TupleTypeInfo<Vertex<K, NEW>> returnType = new TupleTypeInfo<>(vertexClass, idType, newType)___		return vertices_			.map(new TranslateVertexValue<K, OLD, NEW>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex values")__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,class,vertex,k,new,vertex,class,class,vertex,k,new,class,extends,vertex,vertex,class,type,information,k,id,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,1,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,0,new,int,1,old,type,null,false,tuple,type,info,vertex,k,new,return,type,new,tuple,type,info,vertex,class,id,type,new,type,return,vertices,map,new,translate,vertex,value,k,old,new,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1501532946;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)___		Class<Vertex<K, NEW>> vertexClass = (Class<Vertex<K, NEW>>) (Class<? extends Vertex>) Vertex.class__		TypeInformation<K> idType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(1)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[]{0},_			new int[]{1},_			oldType,_			null,_			false)___		TupleTypeInfo<Vertex<K, NEW>> returnType = new TupleTypeInfo<>(vertexClass, idType, newType)___		return vertices_			.map(new TranslateVertexValue<>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex values")__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,class,vertex,k,new,vertex,class,class,vertex,k,new,class,extends,vertex,vertex,class,type,information,k,id,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,1,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,0,new,int,1,old,type,null,false,tuple,type,info,vertex,k,new,return,type,new,tuple,type,info,vertex,class,id,type,new,type,return,vertices,map,new,translate,vertex,value,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1528109383;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)___		Class<Vertex<K, NEW>> vertexClass = (Class<Vertex<K, NEW>>) (Class<? extends Vertex>) Vertex.class__		TypeInformation<K> idType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<K, OLD>>) vertices.getType()).getTypeAt(1)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[]{1},_			oldType,_			null,_			false)___		TupleTypeInfo<Vertex<K, NEW>> returnType = new TupleTypeInfo<>(vertexClass, idType, newType)___		return vertices_			.map(new TranslateVertexValue<>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex values")__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,class,vertex,k,new,vertex,class,class,vertex,k,new,class,extends,vertex,vertex,class,type,information,k,id,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,vertex,k,old,vertices,get,type,get,type,at,1,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,1,old,type,null,false,tuple,type,info,vertex,k,new,return,type,new,tuple,type,info,vertex,class,id,type,new,type,return,vertices,map,new,translate,vertex,value,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,values
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1462395083;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)__		Preconditions.checkArgument(parallelism > 0 || parallelism == PARALLELISM_DEFAULT || parallelism == PARALLELISM_UNKNOWN,_			"The parallelism must be greater than zero.")___		Class<Vertex<NEW, VV>> vertexClass = (Class<Vertex<NEW, VV>>)(Class<? extends Vertex>) Vertex.class__		TypeInformation<NEW> newType = TypeExtractor.createTypeInfo(TranslateFunction.class, translator.getClass(), 1, null, null)__		TypeInformation<VV> vertexValueType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(1)___		TupleTypeInfo<Vertex<NEW, VV>> returnType = new TupleTypeInfo<>(vertexClass, newType, vertexValueType)___		return vertices_			.map(new TranslateVertexId<OLD, NEW, VV>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex IDs")__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,preconditions,check,argument,parallelism,0,parallelism,parallelism,the,parallelism,must,be,greater,than,zero,class,vertex,new,vv,vertex,class,class,vertex,new,vv,class,extends,vertex,vertex,class,type,information,new,new,type,type,extractor,create,type,info,translate,function,class,translator,get,class,1,null,null,type,information,vv,vertex,value,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,1,tuple,type,info,vertex,new,vv,return,type,new,tuple,type,info,vertex,class,new,type,vertex,value,type,return,vertices,map,new,translate,vertex,id,old,new,vv,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1462819515;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)__		Preconditions.checkArgument(parallelism > 0 || parallelism == PARALLELISM_DEFAULT || parallelism == PARALLELISM_UNKNOWN,_			"The parallelism must be greater than zero.")___		Class<Vertex<NEW, VV>> vertexClass = (Class<Vertex<NEW, VV>>)(Class<? extends Vertex>) Vertex.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)__		TypeInformation<VV> vertexValueType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(1)___		TupleTypeInfo<Vertex<NEW, VV>> returnType = new TupleTypeInfo<>(vertexClass, newType, vertexValueType)___		return vertices_			.map(new TranslateVertexId<OLD, NEW, VV>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex IDs")__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,preconditions,check,argument,parallelism,0,parallelism,parallelism,the,parallelism,must,be,greater,than,zero,class,vertex,new,vv,vertex,class,class,vertex,new,vv,class,extends,vertex,vertex,class,type,information,old,old,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,type,information,vv,vertex,value,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,1,tuple,type,info,vertex,new,vv,return,type,new,tuple,type,info,vertex,class,new,type,vertex,value,type,return,vertices,map,new,translate,vertex,id,old,new,vv,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1464291269;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)___		Class<Vertex<NEW, VV>> vertexClass = (Class<Vertex<NEW, VV>>)(Class<? extends Vertex>) Vertex.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)__		TypeInformation<VV> vertexValueType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(1)___		TupleTypeInfo<Vertex<NEW, VV>> returnType = new TupleTypeInfo<>(vertexClass, newType, vertexValueType)___		return vertices_			.map(new TranslateVertexId<OLD, NEW, VV>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex IDs")__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,class,vertex,new,vv,vertex,class,class,vertex,new,vv,class,extends,vertex,vertex,class,type,information,old,old,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,type,information,vv,vertex,value,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,1,tuple,type,info,vertex,new,vv,return,type,new,tuple,type,info,vertex,class,new,type,vertex,value,type,return,vertices,map,new,translate,vertex,id,old,new,vv,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1495653033;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)___		Class<Vertex<NEW, VV>> vertexClass = (Class<Vertex<NEW, VV>>) (Class<? extends Vertex>) Vertex.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)__		TypeInformation<VV> vertexValueType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(1)___		TupleTypeInfo<Vertex<NEW, VV>> returnType = new TupleTypeInfo<>(vertexClass, newType, vertexValueType)___		return vertices_			.map(new TranslateVertexId<OLD, NEW, VV>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex IDs")__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,class,vertex,new,vv,vertex,class,class,vertex,new,vv,class,extends,vertex,vertex,class,type,information,old,old,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,type,information,vv,vertex,value,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,1,tuple,type,info,vertex,new,vv,return,type,new,tuple,type,info,vertex,class,new,type,vertex,value,type,return,vertices,map,new,translate,vertex,id,old,new,vv,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1496315845;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)___		Class<Vertex<NEW, VV>> vertexClass = (Class<Vertex<NEW, VV>>) (Class<? extends Vertex>) Vertex.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[]{0},_			new int[]{1},_			oldType,_			null,_			false)__		TypeInformation<VV> vertexValueType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(1)___		TupleTypeInfo<Vertex<NEW, VV>> returnType = new TupleTypeInfo<>(vertexClass, newType, vertexValueType)___		return vertices_			.map(new TranslateVertexId<OLD, NEW, VV>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex IDs")__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,class,vertex,new,vv,vertex,class,class,vertex,new,vv,class,extends,vertex,vertex,class,type,information,old,old,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,0,new,int,1,old,type,null,false,type,information,vv,vertex,value,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,1,tuple,type,info,vertex,new,vv,return,type,new,tuple,type,info,vertex,class,new,type,vertex,value,type,return,vertices,map,new,translate,vertex,id,old,new,vv,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1501532946;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)___		Class<Vertex<NEW, VV>> vertexClass = (Class<Vertex<NEW, VV>>) (Class<? extends Vertex>) Vertex.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[]{0},_			new int[]{1},_			oldType,_			null,_			false)__		TypeInformation<VV> vertexValueType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(1)___		TupleTypeInfo<Vertex<NEW, VV>> returnType = new TupleTypeInfo<>(vertexClass, newType, vertexValueType)___		return vertices_			.map(new TranslateVertexId<>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex IDs")__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,class,vertex,new,vv,vertex,class,class,vertex,new,vv,class,extends,vertex,vertex,class,type,information,old,old,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,0,new,int,1,old,type,null,false,type,information,vv,vertex,value,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,1,tuple,type,info,vertex,new,vv,return,type,new,tuple,type,info,vertex,class,new,type,vertex,value,type,return,vertices,map,new,translate,vertex,id,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism);1528109383;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;@SuppressWarnings("unchecked")_	public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(vertices)__		Preconditions.checkNotNull(translator)___		Class<Vertex<NEW, VV>> vertexClass = (Class<Vertex<NEW, VV>>) (Class<? extends Vertex>) Vertex.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[]{1},_			oldType,_			null,_			false)__		TypeInformation<VV> vertexValueType = ((TupleTypeInfo<Vertex<OLD, VV>>) vertices.getType()).getTypeAt(1)___		TupleTypeInfo<Vertex<NEW, VV>> returnType = new TupleTypeInfo<>(vertexClass, newType, vertexValueType)___		return vertices_			.map(new TranslateVertexId<>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate vertex IDs")__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;suppress,warnings,unchecked,public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,vertices,preconditions,check,not,null,translator,class,vertex,new,vv,vertex,class,class,vertex,new,vv,class,extends,vertex,vertex,class,type,information,old,old,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,1,old,type,null,false,type,information,vv,vertex,value,type,tuple,type,info,vertex,old,vv,vertices,get,type,get,type,at,1,tuple,type,info,vertex,new,vv,return,type,new,tuple,type,info,vertex,class,new,type,vertex,value,type,return,vertices,map,new,translate,vertex,id,translator,returns,return,type,set,parallelism,parallelism,name,translate,vertex,ids
Translate -> public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator);1462395083;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexValues(vertices, translator, PARALLELISM_UNKNOWN)__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,return,translate,vertex,values,vertices,translator
Translate -> public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator);1462819515;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexValues(vertices, translator, PARALLELISM_UNKNOWN)__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,return,translate,vertex,values,vertices,translator
Translate -> public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator);1464291269;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexValues(vertices, translator, PARALLELISM_DEFAULT)__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,return,translate,vertex,values,vertices,translator
Translate -> public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator);1495653033;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexValues(vertices, translator, PARALLELISM_DEFAULT)__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,return,translate,vertex,values,vertices,translator
Translate -> public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator);1496315845;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexValues(vertices, translator, PARALLELISM_DEFAULT)__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,return,translate,vertex,values,vertices,translator
Translate -> public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator);1501532946;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexValues(vertices, translator, PARALLELISM_DEFAULT)__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,return,translate,vertex,values,vertices,translator
Translate -> public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator);1528109383;Translate {@link Vertex} values using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> vertex ID type_@param <OLD> old vertex value type_@param <NEW> new vertex value type_@return translated vertices;public static <K, OLD, NEW> DataSet<Vertex<K, NEW>> translateVertexValues(DataSet<Vertex<K, OLD>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexValues(vertices, translator, PARALLELISM_DEFAULT)__	};translate,link,vertex,values,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,k,vertex,id,type,param,old,old,vertex,value,type,param,new,new,vertex,value,type,return,translated,vertices;public,static,k,old,new,data,set,vertex,k,new,translate,vertex,values,data,set,vertex,k,old,vertices,translate,function,old,new,translator,return,translate,vertex,values,vertices,translator
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1462395083;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)__		Preconditions.checkArgument(parallelism > 0 || parallelism == PARALLELISM_DEFAULT || parallelism == PARALLELISM_UNKNOWN,_			"The parallelism must be greater than zero.")___		Class<Edge<NEW, EV>> edgeClass = (Class<Edge<NEW, EV>>)(Class<? extends Edge>) Edge.class__		TypeInformation<NEW> newType = TypeExtractor.createTypeInfo(TranslateFunction.class, translator.getClass(), 1, null, null)__		TypeInformation<EV> edgeValueType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(2)___		TupleTypeInfo<Edge<NEW, EV>> returnType = new TupleTypeInfo<>(edgeClass, newType, newType, edgeValueType)___		return edges_			.map(new TranslateEdgeId<OLD, NEW, EV>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge IDs")__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,preconditions,check,argument,parallelism,0,parallelism,parallelism,the,parallelism,must,be,greater,than,zero,class,edge,new,ev,edge,class,class,edge,new,ev,class,extends,edge,edge,class,type,information,new,new,type,type,extractor,create,type,info,translate,function,class,translator,get,class,1,null,null,type,information,ev,edge,value,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,2,tuple,type,info,edge,new,ev,return,type,new,tuple,type,info,edge,class,new,type,new,type,edge,value,type,return,edges,map,new,translate,edge,id,old,new,ev,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1462819515;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)__		Preconditions.checkArgument(parallelism > 0 || parallelism == PARALLELISM_DEFAULT || parallelism == PARALLELISM_UNKNOWN,_			"The parallelism must be greater than zero.")___		Class<Edge<NEW, EV>> edgeClass = (Class<Edge<NEW, EV>>)(Class<? extends Edge>) Edge.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)__		TypeInformation<EV> edgeValueType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(2)___		TupleTypeInfo<Edge<NEW, EV>> returnType = new TupleTypeInfo<>(edgeClass, newType, newType, edgeValueType)___		return edges_			.map(new TranslateEdgeId<OLD, NEW, EV>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge IDs")__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,preconditions,check,argument,parallelism,0,parallelism,parallelism,the,parallelism,must,be,greater,than,zero,class,edge,new,ev,edge,class,class,edge,new,ev,class,extends,edge,edge,class,type,information,old,old,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,type,information,ev,edge,value,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,2,tuple,type,info,edge,new,ev,return,type,new,tuple,type,info,edge,class,new,type,new,type,edge,value,type,return,edges,map,new,translate,edge,id,old,new,ev,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1464291269;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)___		Class<Edge<NEW, EV>> edgeClass = (Class<Edge<NEW, EV>>)(Class<? extends Edge>) Edge.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)__		TypeInformation<EV> edgeValueType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(2)___		TupleTypeInfo<Edge<NEW, EV>> returnType = new TupleTypeInfo<>(edgeClass, newType, newType, edgeValueType)___		return edges_			.map(new TranslateEdgeId<OLD, NEW, EV>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge IDs")__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,class,edge,new,ev,edge,class,class,edge,new,ev,class,extends,edge,edge,class,type,information,old,old,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,type,information,ev,edge,value,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,2,tuple,type,info,edge,new,ev,return,type,new,tuple,type,info,edge,class,new,type,new,type,edge,value,type,return,edges,map,new,translate,edge,id,old,new,ev,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1495653033;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)___		Class<Edge<NEW, EV>> edgeClass = (Class<Edge<NEW, EV>>) (Class<? extends Edge>) Edge.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)__		TypeInformation<EV> edgeValueType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(2)___		TupleTypeInfo<Edge<NEW, EV>> returnType = new TupleTypeInfo<>(edgeClass, newType, newType, edgeValueType)___		return edges_			.map(new TranslateEdgeId<OLD, NEW, EV>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge IDs")__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,class,edge,new,ev,edge,class,class,edge,new,ev,class,extends,edge,edge,class,type,information,old,old,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,type,information,ev,edge,value,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,2,tuple,type,info,edge,new,ev,return,type,new,tuple,type,info,edge,class,new,type,new,type,edge,value,type,return,edges,map,new,translate,edge,id,old,new,ev,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1496315845;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)___		Class<Edge<NEW, EV>> edgeClass = (Class<Edge<NEW, EV>>) (Class<? extends Edge>) Edge.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[] {0},_			new int[] {1},_			oldType,_			null,_			false)__		TypeInformation<EV> edgeValueType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(2)___		TupleTypeInfo<Edge<NEW, EV>> returnType = new TupleTypeInfo<>(edgeClass, newType, newType, edgeValueType)___		return edges_			.map(new TranslateEdgeId<OLD, NEW, EV>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge IDs")__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,class,edge,new,ev,edge,class,class,edge,new,ev,class,extends,edge,edge,class,type,information,old,old,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,0,new,int,1,old,type,null,false,type,information,ev,edge,value,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,2,tuple,type,info,edge,new,ev,return,type,new,tuple,type,info,edge,class,new,type,new,type,edge,value,type,return,edges,map,new,translate,edge,id,old,new,ev,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1501532946;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)___		Class<Edge<NEW, EV>> edgeClass = (Class<Edge<NEW, EV>>) (Class<? extends Edge>) Edge.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[] {0},_			new int[] {1},_			oldType,_			null,_			false)__		TypeInformation<EV> edgeValueType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(2)___		TupleTypeInfo<Edge<NEW, EV>> returnType = new TupleTypeInfo<>(edgeClass, newType, newType, edgeValueType)___		return edges_			.map(new TranslateEdgeId<>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge IDs")__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,class,edge,new,ev,edge,class,class,edge,new,ev,class,extends,edge,edge,class,type,information,old,old,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,0,new,int,1,old,type,null,false,type,information,ev,edge,value,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,2,tuple,type,info,edge,new,ev,return,type,new,tuple,type,info,edge,class,new,type,new,type,edge,value,type,return,edges,map,new,translate,edge,id,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,ids
Translate -> @SuppressWarnings("unchecked") 	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1528109383;Translate {@link Edge} IDs using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <OLD> old edge ID type_@param <NEW> new edge ID type_@param <EV> edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <OLD, NEW, EV> DataSet<Edge<NEW, EV>> translateEdgeIds(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)___		Class<Edge<NEW, EV>> edgeClass = (Class<Edge<NEW, EV>>) (Class<? extends Edge>) Edge.class__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[] {1},_			oldType,_			null,_			false)__		TypeInformation<EV> edgeValueType = ((TupleTypeInfo<Edge<OLD, EV>>) edges.getType()).getTypeAt(2)___		TupleTypeInfo<Edge<NEW, EV>> returnType = new TupleTypeInfo<>(edgeClass, newType, newType, edgeValueType)___		return edges_			.map(new TranslateEdgeId<>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge IDs")__	};translate,link,edge,ids,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,old,old,edge,id,type,param,new,new,edge,id,type,param,ev,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,old,new,ev,data,set,edge,new,ev,translate,edge,ids,data,set,edge,old,ev,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,class,edge,new,ev,edge,class,class,edge,new,ev,class,extends,edge,edge,class,type,information,old,old,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,0,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,1,old,type,null,false,type,information,ev,edge,value,type,tuple,type,info,edge,old,ev,edges,get,type,get,type,at,2,tuple,type,info,edge,new,ev,return,type,new,tuple,type,info,edge,class,new,type,new,type,edge,value,type,return,edges,map,new,translate,edge,id,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,ids
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1462395083;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)__		Preconditions.checkArgument(parallelism > 0 || parallelism == PARALLELISM_DEFAULT || parallelism == PARALLELISM_UNKNOWN,_			"The parallelism must be greater than zero.")___		Class<Edge<K, NEW>> edgeClass = (Class<Edge<K, NEW>>)(Class<? extends Edge>) Edge.class__		TypeInformation<K> idType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(0)__		TypeInformation<NEW> newType = TypeExtractor.createTypeInfo(TranslateFunction.class, translator.getClass(), 1, null, null)___		TupleTypeInfo<Edge<K, NEW>> returnType = new TupleTypeInfo<>(edgeClass, idType, idType, newType)___		return edges_			.map(new TranslateEdgeValue<K, OLD, NEW>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge values")__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,preconditions,check,argument,parallelism,0,parallelism,parallelism,the,parallelism,must,be,greater,than,zero,class,edge,k,new,edge,class,class,edge,k,new,class,extends,edge,edge,class,type,information,k,id,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,0,type,information,new,new,type,type,extractor,create,type,info,translate,function,class,translator,get,class,1,null,null,tuple,type,info,edge,k,new,return,type,new,tuple,type,info,edge,class,id,type,id,type,new,type,return,edges,map,new,translate,edge,value,k,old,new,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1462819515;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)__		Preconditions.checkArgument(parallelism > 0 || parallelism == PARALLELISM_DEFAULT || parallelism == PARALLELISM_UNKNOWN,_			"The parallelism must be greater than zero.")___		Class<Edge<K, NEW>> edgeClass = (Class<Edge<K, NEW>>)(Class<? extends Edge>) Edge.class__		TypeInformation<K> idType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(2)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)___		TupleTypeInfo<Edge<K, NEW>> returnType = new TupleTypeInfo<>(edgeClass, idType, idType, newType)___		return edges_			.map(new TranslateEdgeValue<K, OLD, NEW>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge values")__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,preconditions,check,argument,parallelism,0,parallelism,parallelism,the,parallelism,must,be,greater,than,zero,class,edge,k,new,edge,class,class,edge,k,new,class,extends,edge,edge,class,type,information,k,id,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,2,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,tuple,type,info,edge,k,new,return,type,new,tuple,type,info,edge,class,id,type,id,type,new,type,return,edges,map,new,translate,edge,value,k,old,new,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1464291269;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)___		Class<Edge<K, NEW>> edgeClass = (Class<Edge<K, NEW>>)(Class<? extends Edge>) Edge.class__		TypeInformation<K> idType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(2)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)___		TupleTypeInfo<Edge<K, NEW>> returnType = new TupleTypeInfo<>(edgeClass, idType, idType, newType)___		return edges_			.map(new TranslateEdgeValue<K, OLD, NEW>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge values")__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,class,edge,k,new,edge,class,class,edge,k,new,class,extends,edge,edge,class,type,information,k,id,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,2,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,tuple,type,info,edge,k,new,return,type,new,tuple,type,info,edge,class,id,type,id,type,new,type,return,edges,map,new,translate,edge,value,k,old,new,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1495653033;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)___		Class<Edge<K, NEW>> edgeClass = (Class<Edge<K, NEW>>) (Class<? extends Edge>) Edge.class__		TypeInformation<K> idType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(2)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(translator, TranslateFunction.class, false, false, oldType, null, false)___		TupleTypeInfo<Edge<K, NEW>> returnType = new TupleTypeInfo<>(edgeClass, idType, idType, newType)___		return edges_			.map(new TranslateEdgeValue<K, OLD, NEW>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge values")__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,class,edge,k,new,edge,class,class,edge,k,new,class,extends,edge,edge,class,type,information,k,id,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,2,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,false,false,old,type,null,false,tuple,type,info,edge,k,new,return,type,new,tuple,type,info,edge,class,id,type,id,type,new,type,return,edges,map,new,translate,edge,value,k,old,new,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1496315845;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)___		Class<Edge<K, NEW>> edgeClass = (Class<Edge<K, NEW>>) (Class<? extends Edge>) Edge.class__		TypeInformation<K> idType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(2)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[]{0},_			new int[]{1},_			oldType,_			null,_			false)___		TupleTypeInfo<Edge<K, NEW>> returnType = new TupleTypeInfo<>(edgeClass, idType, idType, newType)___		return edges_			.map(new TranslateEdgeValue<K, OLD, NEW>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge values")__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,class,edge,k,new,edge,class,class,edge,k,new,class,extends,edge,edge,class,type,information,k,id,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,2,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,0,new,int,1,old,type,null,false,tuple,type,info,edge,k,new,return,type,new,tuple,type,info,edge,class,id,type,id,type,new,type,return,edges,map,new,translate,edge,value,k,old,new,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1501532946;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)___		Class<Edge<K, NEW>> edgeClass = (Class<Edge<K, NEW>>) (Class<? extends Edge>) Edge.class__		TypeInformation<K> idType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(2)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[]{0},_			new int[]{1},_			oldType,_			null,_			false)___		TupleTypeInfo<Edge<K, NEW>> returnType = new TupleTypeInfo<>(edgeClass, idType, idType, newType)___		return edges_			.map(new TranslateEdgeValue<>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge values")__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,class,edge,k,new,edge,class,class,edge,k,new,class,extends,edge,edge,class,type,information,k,id,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,2,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,0,new,int,1,old,type,null,false,tuple,type,info,edge,k,new,return,type,new,tuple,type,info,edge,class,id,type,id,type,new,type,return,edges,map,new,translate,edge,value,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,values
Translate -> @SuppressWarnings("unchecked") 	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism);1528109383;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param parallelism operator parallelism_@param <K> vertex ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;@SuppressWarnings("unchecked")_	public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator, int parallelism) {_		Preconditions.checkNotNull(edges)__		Preconditions.checkNotNull(translator)___		Class<Edge<K, NEW>> edgeClass = (Class<Edge<K, NEW>>) (Class<? extends Edge>) Edge.class__		TypeInformation<K> idType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(0)__		TypeInformation<OLD> oldType = ((TupleTypeInfo<Edge<K, OLD>>) edges.getType()).getTypeAt(2)__		TypeInformation<NEW> newType = TypeExtractor.getUnaryOperatorReturnType(_			translator,_			TranslateFunction.class,_			0,_			1,_			new int[]{1},_			oldType,_			null,_			false)___		TupleTypeInfo<Edge<K, NEW>> returnType = new TupleTypeInfo<>(edgeClass, idType, idType, newType)___		return edges_			.map(new TranslateEdgeValue<>(translator))_			.returns(returnType)_				.setParallelism(parallelism)_				.name("Translate edge values")__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,parallelism,operator,parallelism,param,k,vertex,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;suppress,warnings,unchecked,public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,int,parallelism,preconditions,check,not,null,edges,preconditions,check,not,null,translator,class,edge,k,new,edge,class,class,edge,k,new,class,extends,edge,edge,class,type,information,k,id,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,0,type,information,old,old,type,tuple,type,info,edge,k,old,edges,get,type,get,type,at,2,type,information,new,new,type,type,extractor,get,unary,operator,return,type,translator,translate,function,class,0,1,new,int,1,old,type,null,false,tuple,type,info,edge,k,new,return,type,new,tuple,type,info,edge,class,id,type,id,type,new,type,return,edges,map,new,translate,edge,value,translator,returns,return,type,set,parallelism,parallelism,name,translate,edge,values
Translate -> public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator);1462395083;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexIds(vertices, translator, PARALLELISM_UNKNOWN)__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,return,translate,vertex,ids,vertices,translator
Translate -> public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator);1462819515;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexIds(vertices, translator, PARALLELISM_UNKNOWN)__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,return,translate,vertex,ids,vertices,translator
Translate -> public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator);1464291269;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexIds(vertices, translator, PARALLELISM_DEFAULT)__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,return,translate,vertex,ids,vertices,translator
Translate -> public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator);1495653033;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexIds(vertices, translator, PARALLELISM_DEFAULT)__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,return,translate,vertex,ids,vertices,translator
Translate -> public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator);1496315845;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexIds(vertices, translator, PARALLELISM_DEFAULT)__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,return,translate,vertex,ids,vertices,translator
Translate -> public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator);1501532946;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexIds(vertices, translator, PARALLELISM_DEFAULT)__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,return,translate,vertex,ids,vertices,translator
Translate -> public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator);1528109383;Translate {@link Vertex} IDs using the given {@link TranslateFunction}.__@param vertices input vertices_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <OLD> old vertex ID type_@param <NEW> new vertex ID type_@param <VV> vertex value type_@return translated vertices;public static <OLD, NEW, VV> DataSet<Vertex<NEW, VV>> translateVertexIds(DataSet<Vertex<OLD, VV>> vertices, TranslateFunction<OLD, NEW> translator) {_		return translateVertexIds(vertices, translator, PARALLELISM_DEFAULT)__	};translate,link,vertex,ids,using,the,given,link,translate,function,param,vertices,input,vertices,param,translator,implements,conversion,from,code,old,to,code,new,param,old,old,vertex,id,type,param,new,new,vertex,id,type,param,vv,vertex,value,type,return,translated,vertices;public,static,old,new,vv,data,set,vertex,new,vv,translate,vertex,ids,data,set,vertex,old,vv,vertices,translate,function,old,new,translator,return,translate,vertex,ids,vertices,translator
Translate -> public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator);1462395083;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> edge ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeValues(edges, translator, PARALLELISM_UNKNOWN)__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,k,edge,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,return,translate,edge,values,edges,translator
Translate -> public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator);1462819515;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> edge ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeValues(edges, translator, PARALLELISM_UNKNOWN)__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,k,edge,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,return,translate,edge,values,edges,translator
Translate -> public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator);1464291269;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> edge ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeValues(edges, translator, PARALLELISM_DEFAULT)__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,k,edge,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,return,translate,edge,values,edges,translator
Translate -> public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator);1495653033;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> edge ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeValues(edges, translator, PARALLELISM_DEFAULT)__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,k,edge,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,return,translate,edge,values,edges,translator
Translate -> public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator);1496315845;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> edge ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeValues(edges, translator, PARALLELISM_DEFAULT)__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,k,edge,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,return,translate,edge,values,edges,translator
Translate -> public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator);1501532946;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> edge ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeValues(edges, translator, PARALLELISM_DEFAULT)__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,k,edge,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,return,translate,edge,values,edges,translator
Translate -> public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator);1528109383;Translate {@link Edge} values using the given {@link TranslateFunction}.__@param edges input edges_@param translator implements conversion from {@code OLD} to {@code NEW}_@param <K> edge ID type_@param <OLD> old edge value type_@param <NEW> new edge value type_@return translated edges;public static <K, OLD, NEW> DataSet<Edge<K, NEW>> translateEdgeValues(DataSet<Edge<K, OLD>> edges, TranslateFunction<OLD, NEW> translator) {_		return translateEdgeValues(edges, translator, PARALLELISM_DEFAULT)__	};translate,link,edge,values,using,the,given,link,translate,function,param,edges,input,edges,param,translator,implements,conversion,from,code,old,to,code,new,param,k,edge,id,type,param,old,old,edge,value,type,param,new,new,edge,value,type,return,translated,edges;public,static,k,old,new,data,set,edge,k,new,translate,edge,values,data,set,edge,k,old,edges,translate,function,old,new,translator,return,translate,edge,values,edges,translator
