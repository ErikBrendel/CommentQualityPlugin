# id;timestamp;commentText;codeText;commentWords;codeWords
GatherFunction -> public abstract void updateVertex(Vertex<K, VV> vertex, MessageIterator<Message> inMessages) throws Exception_;1462563578;This method is invoked once per vertex per superstep. It receives the current state of the vertex, as well as_the incoming messages. It may set a new vertex state via {@link #setNewVertexValue(Object)}. If the vertex_state is changed, it will trigger the sending of messages via the {@link ScatterFunction}.__@param vertex The vertex._@param inMessages The incoming messages to this vertex.__@throws Exception The computation may throw exceptions, which causes the superstep to fail.;public abstract void updateVertex(Vertex<K, VV> vertex, MessageIterator<Message> inMessages) throws Exception_;this,method,is,invoked,once,per,vertex,per,superstep,it,receives,the,current,state,of,the,vertex,as,well,as,the,incoming,messages,it,may,set,a,new,vertex,state,via,link,set,new,vertex,value,object,if,the,vertex,state,is,changed,it,will,trigger,the,sending,of,messages,via,the,link,scatter,function,param,vertex,the,vertex,param,in,messages,the,incoming,messages,to,this,vertex,throws,exception,the,computation,may,throw,exceptions,which,causes,the,superstep,to,fail;public,abstract,void,update,vertex,vertex,k,vv,vertex,message,iterator,message,in,messages,throws,exception
GatherFunction -> public abstract void updateVertex(Vertex<K, VV> vertex, MessageIterator<Message> inMessages) throws Exception_;1475517578;This method is invoked once per vertex per superstep. It receives the current state of the vertex, as well as_the incoming messages. It may set a new vertex state via {@link #setNewVertexValue(Object)}. If the vertex_state is changed, it will trigger the sending of messages via the {@link ScatterFunction}.__@param vertex The vertex._@param inMessages The incoming messages to this vertex.__@throws Exception The computation may throw exceptions, which causes the superstep to fail.;public abstract void updateVertex(Vertex<K, VV> vertex, MessageIterator<Message> inMessages) throws Exception_;this,method,is,invoked,once,per,vertex,per,superstep,it,receives,the,current,state,of,the,vertex,as,well,as,the,incoming,messages,it,may,set,a,new,vertex,state,via,link,set,new,vertex,value,object,if,the,vertex,state,is,changed,it,will,trigger,the,sending,of,messages,via,the,link,scatter,function,param,vertex,the,vertex,param,in,messages,the,incoming,messages,to,this,vertex,throws,exception,the,computation,may,throw,exceptions,which,causes,the,superstep,to,fail;public,abstract,void,update,vertex,vertex,k,vv,vertex,message,iterator,message,in,messages,throws,exception
GatherFunction -> public abstract void updateVertex(Vertex<K, VV> vertex, MessageIterator<Message> inMessages) throws Exception_;1495653033;This method is invoked once per vertex per superstep. It receives the current state of the vertex, as well as_the incoming messages. It may set a new vertex state via {@link #setNewVertexValue(Object)}. If the vertex_state is changed, it will trigger the sending of messages via the {@link ScatterFunction}.__@param vertex The vertex._@param inMessages The incoming messages to this vertex.__@throws Exception The computation may throw exceptions, which causes the superstep to fail.;public abstract void updateVertex(Vertex<K, VV> vertex, MessageIterator<Message> inMessages) throws Exception_;this,method,is,invoked,once,per,vertex,per,superstep,it,receives,the,current,state,of,the,vertex,as,well,as,the,incoming,messages,it,may,set,a,new,vertex,state,via,link,set,new,vertex,value,object,if,the,vertex,state,is,changed,it,will,trigger,the,sending,of,messages,via,the,link,scatter,function,param,vertex,the,vertex,param,in,messages,the,incoming,messages,to,this,vertex,throws,exception,the,computation,may,throw,exceptions,which,causes,the,superstep,to,fail;public,abstract,void,update,vertex,vertex,k,vv,vertex,message,iterator,message,in,messages,throws,exception
GatherFunction -> public void setNewVertexValue(VV newValue);1462563578;Sets the new value of this vertex. Setting a new value triggers the sending of outgoing messages from this vertex.__This should be called at most once per updateVertex.__@param newValue The new vertex value.;public void setNewVertexValue(VV newValue) {_		if(setNewVertexValueCalled) {_			throw new IllegalStateException("setNewVertexValue should only be called at most once per updateVertex")__		}_		setNewVertexValueCalled = true__		if(isOptDegrees()) {_			outValWithDegrees.f1.f0 = newValue__			outWithDegrees.collect(outValWithDegrees)__		} else {_			outVal.setValue(newValue)__			out.collect(outVal)__		}_	};sets,the,new,value,of,this,vertex,setting,a,new,value,triggers,the,sending,of,outgoing,messages,from,this,vertex,this,should,be,called,at,most,once,per,update,vertex,param,new,value,the,new,vertex,value;public,void,set,new,vertex,value,vv,new,value,if,set,new,vertex,value,called,throw,new,illegal,state,exception,set,new,vertex,value,should,only,be,called,at,most,once,per,update,vertex,set,new,vertex,value,called,true,if,is,opt,degrees,out,val,with,degrees,f1,f0,new,value,out,with,degrees,collect,out,val,with,degrees,else,out,val,set,value,new,value,out,collect,out,val
GatherFunction -> public void setNewVertexValue(VV newValue);1475517578;Sets the new value of this vertex. Setting a new value triggers the sending of outgoing messages from this vertex.__This should be called at most once per updateVertex.__@param newValue The new vertex value.;public void setNewVertexValue(VV newValue) {_		if(setNewVertexValueCalled) {_			throw new IllegalStateException("setNewVertexValue should only be called at most once per updateVertex")__		}_		setNewVertexValueCalled = true__		if(isOptDegrees()) {_			outValWithDegrees.f1.f0 = newValue__			outWithDegrees.collect(outValWithDegrees)__		} else {_			outVal.setValue(newValue)__			out.collect(outVal)__		}_	};sets,the,new,value,of,this,vertex,setting,a,new,value,triggers,the,sending,of,outgoing,messages,from,this,vertex,this,should,be,called,at,most,once,per,update,vertex,param,new,value,the,new,vertex,value;public,void,set,new,vertex,value,vv,new,value,if,set,new,vertex,value,called,throw,new,illegal,state,exception,set,new,vertex,value,should,only,be,called,at,most,once,per,update,vertex,set,new,vertex,value,called,true,if,is,opt,degrees,out,val,with,degrees,f1,f0,new,value,out,with,degrees,collect,out,val,with,degrees,else,out,val,set,value,new,value,out,collect,out,val
GatherFunction -> public void setNewVertexValue(VV newValue);1495653033;Sets the new value of this vertex. Setting a new value triggers the sending of outgoing messages from this vertex.__<p>This should be called at most once per updateVertex.__@param newValue The new vertex value.;public void setNewVertexValue(VV newValue) {_		if (setNewVertexValueCalled) {_			throw new IllegalStateException("setNewVertexValue should only be called at most once per updateVertex")__		}_		setNewVertexValueCalled = true__		if (isOptDegrees()) {_			outValWithDegrees.f1.f0 = newValue__			outWithDegrees.collect(outValWithDegrees)__		} else {_			outVal.setValue(newValue)__			out.collect(outVal)__		}_	};sets,the,new,value,of,this,vertex,setting,a,new,value,triggers,the,sending,of,outgoing,messages,from,this,vertex,p,this,should,be,called,at,most,once,per,update,vertex,param,new,value,the,new,vertex,value;public,void,set,new,vertex,value,vv,new,value,if,set,new,vertex,value,called,throw,new,illegal,state,exception,set,new,vertex,value,should,only,be,called,at,most,once,per,update,vertex,set,new,vertex,value,called,true,if,is,opt,degrees,out,val,with,degrees,f1,f0,new,value,out,with,degrees,collect,out,val,with,degrees,else,out,val,set,value,new,value,out,collect,out,val
GatherFunction -> public void preSuperstep() throws Exception;1462563578;This method is executed once per superstep before the gather function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,before,the,gather,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep,throws,exception
GatherFunction -> public void preSuperstep() throws Exception;1475517578;This method is executed once per superstep before the gather function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,before,the,gather,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep,throws,exception
GatherFunction -> public void preSuperstep() throws Exception;1495653033;This method is executed once per superstep before the gather function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,before,the,gather,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep,throws,exception
GatherFunction -> public <T extends Value> T getPreviousIterationAggregate(String name);1462563578;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.<T>getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,t,get,previous,iteration,aggregate,name
GatherFunction -> public <T extends Value> T getPreviousIterationAggregate(String name);1475517578;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,get,previous,iteration,aggregate,name
GatherFunction -> public <T extends Value> T getPreviousIterationAggregate(String name);1495653033;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,get,previous,iteration,aggregate,name
GatherFunction -> public long getInDegree();1462563578;Retrieves the vertex in-degree (number of in-coming edges)._@return The in-degree of this vertex;public long getInDegree() {_		return inDegree__	};retrieves,the,vertex,in,degree,number,of,in,coming,edges,return,the,in,degree,of,this,vertex;public,long,get,in,degree,return,in,degree
GatherFunction -> public long getInDegree();1475517578;Retrieves the vertex in-degree (number of in-coming edges)._@return The in-degree of this vertex;public long getInDegree() {_		return inDegree__	};retrieves,the,vertex,in,degree,number,of,in,coming,edges,return,the,in,degree,of,this,vertex;public,long,get,in,degree,return,in,degree
GatherFunction -> public long getInDegree();1495653033;Retrieves the vertex in-degree (number of in-coming edges)._@return The in-degree of this vertex;public long getInDegree() {_		return inDegree__	};retrieves,the,vertex,in,degree,number,of,in,coming,edges,return,the,in,degree,of,this,vertex;public,long,get,in,degree,return,in,degree
GatherFunction -> @SuppressWarnings("unchecked") 	<VertexWithDegree> void updateVertexFromScatterGatherIteration(Vertex<K, VertexWithDegree> vertexState, 												MessageIterator<Message> inMessages) throws Exception;1462563578;In order to hide the Tuple3(actualValue, inDegree, OutDegree) vertex value from the user,_another function will be called from {@link org.apache.flink.graph.spargel.ScatterGatherIteration}.__This function will retrieve the vertex from the vertexState and will set its degrees, afterwards calling_the regular updateVertex function.__@param vertexState_@param inMessages_@throws Exception;@SuppressWarnings("unchecked")_	<VertexWithDegree> void updateVertexFromScatterGatherIteration(Vertex<K, VertexWithDegree> vertexState,_												MessageIterator<Message> inMessages) throws Exception {__		Vertex<K, VV> vertex = new Vertex<K, VV>(vertexState.f0,_				((Tuple3<VV, Long, Long>)vertexState.getValue()).f0)___		updateVertex(vertex, inMessages)__	};in,order,to,hide,the,tuple3,actual,value,in,degree,out,degree,vertex,value,from,the,user,another,function,will,be,called,from,link,org,apache,flink,graph,spargel,scatter,gather,iteration,this,function,will,retrieve,the,vertex,from,the,vertex,state,and,will,set,its,degrees,afterwards,calling,the,regular,update,vertex,function,param,vertex,state,param,in,messages,throws,exception;suppress,warnings,unchecked,vertex,with,degree,void,update,vertex,from,scatter,gather,iteration,vertex,k,vertex,with,degree,vertex,state,message,iterator,message,in,messages,throws,exception,vertex,k,vv,vertex,new,vertex,k,vv,vertex,state,f0,tuple3,vv,long,long,vertex,state,get,value,f0,update,vertex,vertex,in,messages
GatherFunction -> @SuppressWarnings("unchecked") 	<VertexWithDegree> void updateVertexFromScatterGatherIteration(Vertex<K, VertexWithDegree> vertexState, 												MessageIterator<Message> inMessages) throws Exception;1475517578;In order to hide the Tuple3(actualValue, inDegree, OutDegree) vertex value from the user,_another function will be called from {@link org.apache.flink.graph.spargel.ScatterGatherIteration}.__This function will retrieve the vertex from the vertexState and will set its degrees, afterwards calling_the regular updateVertex function.__@param vertexState_@param inMessages_@throws Exception;@SuppressWarnings("unchecked")_	<VertexWithDegree> void updateVertexFromScatterGatherIteration(Vertex<K, VertexWithDegree> vertexState,_												MessageIterator<Message> inMessages) throws Exception {__		Vertex<K, VV> vertex = new Vertex<>(vertexState.f0,_			((Tuple3<VV, Long, Long>) vertexState.getValue()).f0)___		updateVertex(vertex, inMessages)__	};in,order,to,hide,the,tuple3,actual,value,in,degree,out,degree,vertex,value,from,the,user,another,function,will,be,called,from,link,org,apache,flink,graph,spargel,scatter,gather,iteration,this,function,will,retrieve,the,vertex,from,the,vertex,state,and,will,set,its,degrees,afterwards,calling,the,regular,update,vertex,function,param,vertex,state,param,in,messages,throws,exception;suppress,warnings,unchecked,vertex,with,degree,void,update,vertex,from,scatter,gather,iteration,vertex,k,vertex,with,degree,vertex,state,message,iterator,message,in,messages,throws,exception,vertex,k,vv,vertex,new,vertex,vertex,state,f0,tuple3,vv,long,long,vertex,state,get,value,f0,update,vertex,vertex,in,messages
GatherFunction -> @SuppressWarnings("unchecked") 	<VertexWithDegree> void updateVertexFromScatterGatherIteration(Vertex<K, VertexWithDegree> vertexState, 												MessageIterator<Message> inMessages) throws Exception;1495653033;In order to hide the Tuple3(actualValue, inDegree, OutDegree) vertex value from the user,_another function will be called from {@link org.apache.flink.graph.spargel.ScatterGatherIteration}.__<p>This function will retrieve the vertex from the vertexState and will set its degrees, afterwards calling_the regular updateVertex function.__@param vertexState_@param inMessages_@throws Exception;@SuppressWarnings("unchecked")_	<VertexWithDegree> void updateVertexFromScatterGatherIteration(Vertex<K, VertexWithDegree> vertexState,_												MessageIterator<Message> inMessages) throws Exception {__		Vertex<K, VV> vertex = new Vertex<>(vertexState.f0,_			((Tuple3<VV, Long, Long>) vertexState.getValue()).f0)___		updateVertex(vertex, inMessages)__	};in,order,to,hide,the,tuple3,actual,value,in,degree,out,degree,vertex,value,from,the,user,another,function,will,be,called,from,link,org,apache,flink,graph,spargel,scatter,gather,iteration,p,this,function,will,retrieve,the,vertex,from,the,vertex,state,and,will,set,its,degrees,afterwards,calling,the,regular,update,vertex,function,param,vertex,state,param,in,messages,throws,exception;suppress,warnings,unchecked,vertex,with,degree,void,update,vertex,from,scatter,gather,iteration,vertex,k,vertex,with,degree,vertex,state,message,iterator,message,in,messages,throws,exception,vertex,k,vv,vertex,new,vertex,vertex,state,f0,tuple3,vv,long,long,vertex,state,get,value,f0,update,vertex,vertex,in,messages
GatherFunction -> public long getNumberOfVertices();1462563578;Retrieves the number of vertices in the graph._@return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}_option has been set_ -1 otherwise.;public long getNumberOfVertices() {_		return numberOfVertices__	};retrieves,the,number,of,vertices,in,the,graph,return,the,number,of,vertices,if,the,link,org,apache,flink,graph,iteration,configuration,set,opt,num,vertices,boolean,option,has,been,set,1,otherwise;public,long,get,number,of,vertices,return,number,of,vertices
GatherFunction -> public long getNumberOfVertices();1475517578;Retrieves the number of vertices in the graph._@return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}_option has been set_ -1 otherwise.;public long getNumberOfVertices() {_		return numberOfVertices__	};retrieves,the,number,of,vertices,in,the,graph,return,the,number,of,vertices,if,the,link,org,apache,flink,graph,iteration,configuration,set,opt,num,vertices,boolean,option,has,been,set,1,otherwise;public,long,get,number,of,vertices,return,number,of,vertices
GatherFunction -> public long getNumberOfVertices();1495653033;Retrieves the number of vertices in the graph._@return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}_option has been set_ -1 otherwise.;public long getNumberOfVertices() {_		return numberOfVertices__	};retrieves,the,number,of,vertices,in,the,graph,return,the,number,of,vertices,if,the,link,org,apache,flink,graph,iteration,configuration,set,opt,num,vertices,boolean,option,has,been,set,1,otherwise;public,long,get,number,of,vertices,return,number,of,vertices
GatherFunction -> public <T extends Aggregator<?>> T getIterationAggregator(String name);1462563578;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.<T>getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,t,get,iteration,aggregator,name
GatherFunction -> public <T extends Aggregator<?>> T getIterationAggregator(String name);1475517578;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,get,iteration,aggregator,name
GatherFunction -> public <T extends Aggregator<?>> T getIterationAggregator(String name);1495653033;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,get,iteration,aggregator,name
GatherFunction -> public int getSuperstepNumber();1462563578;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,int,get,superstep,number,return,this,runtime,context,get,superstep,number
GatherFunction -> public int getSuperstepNumber();1475517578;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,int,get,superstep,number,return,this,runtime,context,get,superstep,number
GatherFunction -> public int getSuperstepNumber();1495653033;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,int,get,superstep,number,return,this,runtime,context,get,superstep,number
GatherFunction -> public <T> Collection<T> getBroadcastSet(String name);1462563578;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function. They can be registered via_{@link org.apache.flink.graph.spargel.ScatterGatherConfiguration#addBroadcastSetForGatherFunction(String, org.apache.flink.api.java.DataSet)}.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.<T>getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,they,can,be,registered,via,link,org,apache,flink,graph,spargel,scatter,gather,configuration,add,broadcast,set,for,gather,function,string,org,apache,flink,api,java,data,set,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,t,get,broadcast,variable,name
GatherFunction -> public <T> Collection<T> getBroadcastSet(String name);1475517578;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function. They can be registered via_{@link org.apache.flink.graph.spargel.ScatterGatherConfiguration#addBroadcastSetForGatherFunction(String, org.apache.flink.api.java.DataSet)}.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,they,can,be,registered,via,link,org,apache,flink,graph,spargel,scatter,gather,configuration,add,broadcast,set,for,gather,function,string,org,apache,flink,api,java,data,set,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,get,broadcast,variable,name
GatherFunction -> public <T> Collection<T> getBroadcastSet(String name);1495653033;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function. They can be registered via_{@link org.apache.flink.graph.spargel.ScatterGatherConfiguration#addBroadcastSetForGatherFunction(String, org.apache.flink.api.java.DataSet)}.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,they,can,be,registered,via,link,org,apache,flink,graph,spargel,scatter,gather,configuration,add,broadcast,set,for,gather,function,string,org,apache,flink,api,java,data,set,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,get,broadcast,variable,name
GatherFunction -> public long getOutDegree();1462563578;Retrieve the vertex out-degree (number of out-going edges)._@return The out-degree of this vertex;public long getOutDegree() {_		return outDegree__	};retrieve,the,vertex,out,degree,number,of,out,going,edges,return,the,out,degree,of,this,vertex;public,long,get,out,degree,return,out,degree
GatherFunction -> public long getOutDegree();1475517578;Retrieve the vertex out-degree (number of out-going edges)._@return The out-degree of this vertex;public long getOutDegree() {_		return outDegree__	};retrieve,the,vertex,out,degree,number,of,out,going,edges,return,the,out,degree,of,this,vertex;public,long,get,out,degree,return,out,degree
GatherFunction -> public long getOutDegree();1495653033;Retrieve the vertex out-degree (number of out-going edges)._@return The out-degree of this vertex;public long getOutDegree() {_		return outDegree__	};retrieve,the,vertex,out,degree,number,of,out,going,edges,return,the,out,degree,of,this,vertex;public,long,get,out,degree,return,out,degree
GatherFunction -> public void postSuperstep() throws Exception;1462563578;This method is executed once per superstep after the gather function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,after,the,gather,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep,throws,exception
GatherFunction -> public void postSuperstep() throws Exception;1475517578;This method is executed once per superstep after the gather function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,after,the,gather,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep,throws,exception
GatherFunction -> public void postSuperstep() throws Exception;1495653033;This method is executed once per superstep after the gather function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,after,the,gather,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep,throws,exception
