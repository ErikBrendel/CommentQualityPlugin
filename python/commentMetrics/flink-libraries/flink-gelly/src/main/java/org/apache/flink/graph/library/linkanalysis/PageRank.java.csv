# id;timestamp;commentText;codeText;commentWords;codeWords
PageRank -> Result -> public void setPageRankScore(DoubleValue pageRankScore);1498486910;Set the PageRank score.__@param pageRankScore the PageRank score;public void setPageRankScore(DoubleValue pageRankScore) {_			this.pageRankScore = pageRankScore__		};set,the,page,rank,score,param,page,rank,score,the,page,rank,score;public,void,set,page,rank,score,double,value,page,rank,score,this,page,rank,score,page,rank,score
PageRank -> Result -> public void setPageRankScore(DoubleValue pageRankScore);1498486910;Set the PageRank score.__@param pageRankScore the PageRank score;public void setPageRankScore(DoubleValue pageRankScore) {_			this.pageRankScore = pageRankScore__		};set,the,page,rank,score,param,page,rank,score,the,page,rank,score;public,void,set,page,rank,score,double,value,page,rank,score,this,page,rank,score,page,rank,score
PageRank -> Result -> public void setPageRankScore(DoubleValue pageRankScore);1501064632;Set the PageRank score.__@param pageRankScore the PageRank score;public void setPageRankScore(DoubleValue pageRankScore) {_			this.pageRankScore = pageRankScore__		};set,the,page,rank,score,param,page,rank,score,the,page,rank,score;public,void,set,page,rank,score,double,value,page,rank,score,this,page,rank,score,page,rank,score
PageRank -> Result -> public void setPageRankScore(DoubleValue pageRankScore);1501532946;Set the PageRank score.__@param pageRankScore the PageRank score;public void setPageRankScore(DoubleValue pageRankScore) {_			this.pageRankScore = pageRankScore__		};set,the,page,rank,score,param,page,rank,score,the,page,rank,score;public,void,set,page,rank,score,double,value,page,rank,score,this,page,rank,score,page,rank,score
PageRank -> Result -> public void setPageRankScore(DoubleValue pageRankScore);1526214036;Set the PageRank score.__@param pageRankScore the PageRank score;public void setPageRankScore(DoubleValue pageRankScore) {_			this.pageRankScore = pageRankScore__		};set,the,page,rank,score,param,page,rank,score,the,page,rank,score;public,void,set,page,rank,score,double,value,page,rank,score,this,page,rank,score,page,rank,score
PageRank -> public PageRank<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1501064632;This PageRank implementation properly handles both source and sink_vertices which have, respectively, only outgoing and incoming edges.__<p>Setting this flag includes "zero-degree" vertices in the PageRank_computation and result. These vertices are handled the same as other_"source" vertices (with a consistent score of_<code>(1 - damping factor) / number of vertices</code>) but only_affect the scores of other vertices indirectly through the taking of_this proportional portion of the "random jump" score.__<p>The cost to include zero-degree vertices is a reduce for uniqueness_on the vertex set followed by an outer join on the vertex degree_DataSet.__@param includeZeroDegreeVertices whether to include zero-degree vertices in the iterative computation_@return this;public PageRank<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};this,page,rank,implementation,properly,handles,both,source,and,sink,vertices,which,have,respectively,only,outgoing,and,incoming,edges,p,setting,this,flag,includes,zero,degree,vertices,in,the,page,rank,computation,and,result,these,vertices,are,handled,the,same,as,other,source,vertices,with,a,consistent,score,of,code,1,damping,factor,number,of,vertices,code,but,only,affect,the,scores,of,other,vertices,indirectly,through,the,taking,of,this,proportional,portion,of,the,random,jump,score,p,the,cost,to,include,zero,degree,vertices,is,a,reduce,for,uniqueness,on,the,vertex,set,followed,by,an,outer,join,on,the,vertex,degree,data,set,param,include,zero,degree,vertices,whether,to,include,zero,degree,vertices,in,the,iterative,computation,return,this;public,page,rank,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
PageRank -> public PageRank<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices);1526214036;This PageRank implementation properly handles both source and sink_vertices which have, respectively, only outgoing and incoming edges.__<p>Setting this flag includes "zero-degree" vertices in the PageRank_computation and result. These vertices are handled the same as other_"source" vertices (with a consistent score of_<code>(1 - damping factor) / number of vertices</code>) but only_affect the scores of other vertices indirectly through the taking of_this proportional portion of the "random jump" score.__<p>The cost to include zero-degree vertices is a reduce for uniqueness_on the vertex set followed by an outer join on the vertex degree_DataSet.__@param includeZeroDegreeVertices whether to include zero-degree vertices in the iterative computation_@return this;public PageRank<K, VV, EV> setIncludeZeroDegreeVertices(boolean includeZeroDegreeVertices) {_		this.includeZeroDegreeVertices = includeZeroDegreeVertices___		return this__	};this,page,rank,implementation,properly,handles,both,source,and,sink,vertices,which,have,respectively,only,outgoing,and,incoming,edges,p,setting,this,flag,includes,zero,degree,vertices,in,the,page,rank,computation,and,result,these,vertices,are,handled,the,same,as,other,source,vertices,with,a,consistent,score,of,code,1,damping,factor,number,of,vertices,code,but,only,affect,the,scores,of,other,vertices,indirectly,through,the,taking,of,this,proportional,portion,of,the,random,jump,score,p,the,cost,to,include,zero,degree,vertices,is,a,reduce,for,uniqueness,on,the,vertex,set,followed,by,an,outer,join,on,the,vertex,degree,data,set,param,include,zero,degree,vertices,whether,to,include,zero,degree,vertices,in,the,iterative,computation,return,this;public,page,rank,k,vv,ev,set,include,zero,degree,vertices,boolean,include,zero,degree,vertices,this,include,zero,degree,vertices,include,zero,degree,vertices,return,this
PageRank -> public PageRank(double dampingFactor, double convergenceThreshold);1495653033;PageRank with a convergence threshold. The algorithm terminates when the_change in score over all vertices falls to or below the given threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, double convergenceThreshold) {_		this(dampingFactor, Integer.MAX_VALUE, convergenceThreshold)__	};page,rank,with,a,convergence,threshold,the,algorithm,terminates,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,double,convergence,threshold,this,damping,factor,integer,convergence,threshold
PageRank -> public PageRank(double dampingFactor, double convergenceThreshold);1498486910;PageRank with a convergence threshold. The algorithm terminates when the_change in score over all vertices falls to or below the given threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, double convergenceThreshold) {_		this(dampingFactor, Integer.MAX_VALUE, convergenceThreshold)__	};page,rank,with,a,convergence,threshold,the,algorithm,terminates,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,double,convergence,threshold,this,damping,factor,integer,convergence,threshold
PageRank -> public PageRank(double dampingFactor, double convergenceThreshold);1498486910;PageRank with a convergence threshold. The algorithm terminates when the_change in score over all vertices falls to or below the given threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, double convergenceThreshold) {_		this(dampingFactor, Integer.MAX_VALUE, convergenceThreshold)__	};page,rank,with,a,convergence,threshold,the,algorithm,terminates,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,double,convergence,threshold,this,damping,factor,integer,convergence,threshold
PageRank -> public PageRank(double dampingFactor, double convergenceThreshold);1501064632;PageRank with a convergence threshold. The algorithm terminates when the_change in score over all vertices falls to or below the given threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, double convergenceThreshold) {_		this(dampingFactor, Integer.MAX_VALUE, convergenceThreshold)__	};page,rank,with,a,convergence,threshold,the,algorithm,terminates,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,double,convergence,threshold,this,damping,factor,integer,convergence,threshold
PageRank -> public PageRank(double dampingFactor, double convergenceThreshold);1501532946;PageRank with a convergence threshold. The algorithm terminates when the_change in score over all vertices falls to or below the given threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, double convergenceThreshold) {_		this(dampingFactor, Integer.MAX_VALUE, convergenceThreshold)__	};page,rank,with,a,convergence,threshold,the,algorithm,terminates,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,double,convergence,threshold,this,damping,factor,integer,convergence,threshold
PageRank -> public PageRank(double dampingFactor, double convergenceThreshold);1526214036;PageRank with a convergence threshold. The algorithm terminates when the_change in score over all vertices falls to or below the given threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, double convergenceThreshold) {_		this(dampingFactor, Integer.MAX_VALUE, convergenceThreshold)__	};page,rank,with,a,convergence,threshold,the,algorithm,terminates,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,double,convergence,threshold,this,damping,factor,integer,convergence,threshold
PageRank -> public PageRank<K, VV, EV> setParallelism(int parallelism);1495653033;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public PageRank<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,page,rank,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
PageRank -> public PageRank<K, VV, EV> setParallelism(int parallelism);1498486910;Override the operator parallelism.__@param parallelism operator parallelism_@return this;public PageRank<K, VV, EV> setParallelism(int parallelism) {_		this.parallelism = parallelism___		return this__	};override,the,operator,parallelism,param,parallelism,operator,parallelism,return,this;public,page,rank,k,vv,ev,set,parallelism,int,parallelism,this,parallelism,parallelism,return,this
PageRank -> public PageRank(double dampingFactor, int iterations);1495653033;PageRank with a fixed number of iterations.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param iterations fixed number of iterations;public PageRank(double dampingFactor, int iterations) {_		this(dampingFactor, iterations, Double.MAX_VALUE)__	};page,rank,with,a,fixed,number,of,iterations,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,iterations,fixed,number,of,iterations;public,page,rank,double,damping,factor,int,iterations,this,damping,factor,iterations,double
PageRank -> public PageRank(double dampingFactor, int iterations);1498486910;PageRank with a fixed number of iterations.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param iterations fixed number of iterations;public PageRank(double dampingFactor, int iterations) {_		this(dampingFactor, iterations, Double.MAX_VALUE)__	};page,rank,with,a,fixed,number,of,iterations,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,iterations,fixed,number,of,iterations;public,page,rank,double,damping,factor,int,iterations,this,damping,factor,iterations,double
PageRank -> public PageRank(double dampingFactor, int iterations);1498486910;PageRank with a fixed number of iterations.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param iterations fixed number of iterations;public PageRank(double dampingFactor, int iterations) {_		this(dampingFactor, iterations, Double.MAX_VALUE)__	};page,rank,with,a,fixed,number,of,iterations,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,iterations,fixed,number,of,iterations;public,page,rank,double,damping,factor,int,iterations,this,damping,factor,iterations,double
PageRank -> public PageRank(double dampingFactor, int iterations);1501064632;PageRank with a fixed number of iterations.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param iterations fixed number of iterations;public PageRank(double dampingFactor, int iterations) {_		this(dampingFactor, iterations, Double.MAX_VALUE)__	};page,rank,with,a,fixed,number,of,iterations,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,iterations,fixed,number,of,iterations;public,page,rank,double,damping,factor,int,iterations,this,damping,factor,iterations,double
PageRank -> public PageRank(double dampingFactor, int iterations);1501532946;PageRank with a fixed number of iterations.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param iterations fixed number of iterations;public PageRank(double dampingFactor, int iterations) {_		this(dampingFactor, iterations, Double.MAX_VALUE)__	};page,rank,with,a,fixed,number,of,iterations,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,iterations,fixed,number,of,iterations;public,page,rank,double,damping,factor,int,iterations,this,damping,factor,iterations,double
PageRank -> public PageRank(double dampingFactor, int iterations);1526214036;PageRank with a fixed number of iterations.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param iterations fixed number of iterations;public PageRank(double dampingFactor, int iterations) {_		this(dampingFactor, iterations, Double.MAX_VALUE)__	};page,rank,with,a,fixed,number,of,iterations,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,iterations,fixed,number,of,iterations;public,page,rank,double,damping,factor,int,iterations,this,damping,factor,iterations,double
PageRank -> Result -> public DoubleValue getPageRankScore();1495653033;Get the PageRank score.__@return the PageRank score;public DoubleValue getPageRankScore() {_			return f1__		};get,the,page,rank,score,return,the,page,rank,score;public,double,value,get,page,rank,score,return,f1
PageRank -> Result -> public DoubleValue getPageRankScore();1498486910;Get the PageRank score.__@return the PageRank score;public DoubleValue getPageRankScore() {_			return pageRankScore__		};get,the,page,rank,score,return,the,page,rank,score;public,double,value,get,page,rank,score,return,page,rank,score
PageRank -> Result -> public DoubleValue getPageRankScore();1498486910;Get the PageRank score.__@return the PageRank score;public DoubleValue getPageRankScore() {_			return pageRankScore__		};get,the,page,rank,score,return,the,page,rank,score;public,double,value,get,page,rank,score,return,page,rank,score
PageRank -> Result -> public DoubleValue getPageRankScore();1501064632;Get the PageRank score.__@return the PageRank score;public DoubleValue getPageRankScore() {_			return pageRankScore__		};get,the,page,rank,score,return,the,page,rank,score;public,double,value,get,page,rank,score,return,page,rank,score
PageRank -> Result -> public DoubleValue getPageRankScore();1501532946;Get the PageRank score.__@return the PageRank score;public DoubleValue getPageRankScore() {_			return pageRankScore__		};get,the,page,rank,score,return,the,page,rank,score;public,double,value,get,page,rank,score,return,page,rank,score
PageRank -> Result -> public DoubleValue getPageRankScore();1526214036;Get the PageRank score.__@return the PageRank score;public DoubleValue getPageRankScore() {_			return pageRankScore__		};get,the,page,rank,score,return,the,page,rank,score;public,double,value,get,page,rank,score,return,page,rank,score
PageRank -> public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold);1495653033;PageRank with a convergence threshold and a maximum iteration count. The_algorithm terminates after either the given number of iterations or when_the change in score over all vertices falls to or below the given_threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param maxIterations maximum number of iterations_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold) {_		Preconditions.checkArgument(0 < dampingFactor && dampingFactor < 1,_			"Damping factor must be between zero and one")__		Preconditions.checkArgument(maxIterations > 0, "Number of iterations must be greater than zero")__		Preconditions.checkArgument(convergenceThreshold > 0.0, "Convergence threshold must be greater than zero")___		this.dampingFactor = dampingFactor__		this.maxIterations = maxIterations__		this.convergenceThreshold = convergenceThreshold__	};page,rank,with,a,convergence,threshold,and,a,maximum,iteration,count,the,algorithm,terminates,after,either,the,given,number,of,iterations,or,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,max,iterations,maximum,number,of,iterations,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,int,max,iterations,double,convergence,threshold,preconditions,check,argument,0,damping,factor,damping,factor,1,damping,factor,must,be,between,zero,and,one,preconditions,check,argument,max,iterations,0,number,of,iterations,must,be,greater,than,zero,preconditions,check,argument,convergence,threshold,0,0,convergence,threshold,must,be,greater,than,zero,this,damping,factor,damping,factor,this,max,iterations,max,iterations,this,convergence,threshold,convergence,threshold
PageRank -> public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold);1498486910;PageRank with a convergence threshold and a maximum iteration count. The_algorithm terminates after either the given number of iterations or when_the change in score over all vertices falls to or below the given_threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param maxIterations maximum number of iterations_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold) {_		Preconditions.checkArgument(0 < dampingFactor && dampingFactor < 1,_			"Damping factor must be between zero and one")__		Preconditions.checkArgument(maxIterations > 0, "Number of iterations must be greater than zero")__		Preconditions.checkArgument(convergenceThreshold > 0.0, "Convergence threshold must be greater than zero")___		this.dampingFactor = dampingFactor__		this.maxIterations = maxIterations__		this.convergenceThreshold = convergenceThreshold__	};page,rank,with,a,convergence,threshold,and,a,maximum,iteration,count,the,algorithm,terminates,after,either,the,given,number,of,iterations,or,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,max,iterations,maximum,number,of,iterations,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,int,max,iterations,double,convergence,threshold,preconditions,check,argument,0,damping,factor,damping,factor,1,damping,factor,must,be,between,zero,and,one,preconditions,check,argument,max,iterations,0,number,of,iterations,must,be,greater,than,zero,preconditions,check,argument,convergence,threshold,0,0,convergence,threshold,must,be,greater,than,zero,this,damping,factor,damping,factor,this,max,iterations,max,iterations,this,convergence,threshold,convergence,threshold
PageRank -> public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold);1498486910;PageRank with a convergence threshold and a maximum iteration count. The_algorithm terminates after either the given number of iterations or when_the change in score over all vertices falls to or below the given_threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param maxIterations maximum number of iterations_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold) {_		Preconditions.checkArgument(0 < dampingFactor && dampingFactor < 1,_			"Damping factor must be between zero and one")__		Preconditions.checkArgument(maxIterations > 0, "Number of iterations must be greater than zero")__		Preconditions.checkArgument(convergenceThreshold > 0.0, "Convergence threshold must be greater than zero")___		this.dampingFactor = dampingFactor__		this.maxIterations = maxIterations__		this.convergenceThreshold = convergenceThreshold__	};page,rank,with,a,convergence,threshold,and,a,maximum,iteration,count,the,algorithm,terminates,after,either,the,given,number,of,iterations,or,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,max,iterations,maximum,number,of,iterations,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,int,max,iterations,double,convergence,threshold,preconditions,check,argument,0,damping,factor,damping,factor,1,damping,factor,must,be,between,zero,and,one,preconditions,check,argument,max,iterations,0,number,of,iterations,must,be,greater,than,zero,preconditions,check,argument,convergence,threshold,0,0,convergence,threshold,must,be,greater,than,zero,this,damping,factor,damping,factor,this,max,iterations,max,iterations,this,convergence,threshold,convergence,threshold
PageRank -> public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold);1501064632;PageRank with a convergence threshold and a maximum iteration count. The_algorithm terminates after either the given number of iterations or when_the change in score over all vertices falls to or below the given_threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param maxIterations maximum number of iterations_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold) {_		Preconditions.checkArgument(0 < dampingFactor && dampingFactor < 1,_			"Damping factor must be between zero and one")__		Preconditions.checkArgument(maxIterations > 0, "Number of iterations must be greater than zero")__		Preconditions.checkArgument(convergenceThreshold > 0.0, "Convergence threshold must be greater than zero")___		this.dampingFactor = dampingFactor__		this.maxIterations = maxIterations__		this.convergenceThreshold = convergenceThreshold__	};page,rank,with,a,convergence,threshold,and,a,maximum,iteration,count,the,algorithm,terminates,after,either,the,given,number,of,iterations,or,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,max,iterations,maximum,number,of,iterations,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,int,max,iterations,double,convergence,threshold,preconditions,check,argument,0,damping,factor,damping,factor,1,damping,factor,must,be,between,zero,and,one,preconditions,check,argument,max,iterations,0,number,of,iterations,must,be,greater,than,zero,preconditions,check,argument,convergence,threshold,0,0,convergence,threshold,must,be,greater,than,zero,this,damping,factor,damping,factor,this,max,iterations,max,iterations,this,convergence,threshold,convergence,threshold
PageRank -> public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold);1501532946;PageRank with a convergence threshold and a maximum iteration count. The_algorithm terminates after either the given number of iterations or when_the change in score over all vertices falls to or below the given_threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param maxIterations maximum number of iterations_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold) {_		Preconditions.checkArgument(0 < dampingFactor && dampingFactor < 1,_			"Damping factor must be between zero and one")__		Preconditions.checkArgument(maxIterations > 0, "Number of iterations must be greater than zero")__		Preconditions.checkArgument(convergenceThreshold > 0.0, "Convergence threshold must be greater than zero")___		this.dampingFactor = dampingFactor__		this.maxIterations = maxIterations__		this.convergenceThreshold = convergenceThreshold__	};page,rank,with,a,convergence,threshold,and,a,maximum,iteration,count,the,algorithm,terminates,after,either,the,given,number,of,iterations,or,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,max,iterations,maximum,number,of,iterations,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,int,max,iterations,double,convergence,threshold,preconditions,check,argument,0,damping,factor,damping,factor,1,damping,factor,must,be,between,zero,and,one,preconditions,check,argument,max,iterations,0,number,of,iterations,must,be,greater,than,zero,preconditions,check,argument,convergence,threshold,0,0,convergence,threshold,must,be,greater,than,zero,this,damping,factor,damping,factor,this,max,iterations,max,iterations,this,convergence,threshold,convergence,threshold
PageRank -> public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold);1526214036;PageRank with a convergence threshold and a maximum iteration count. The_algorithm terminates after either the given number of iterations or when_the change in score over all vertices falls to or below the given_threshold value.__@param dampingFactor probability of following an out-link, otherwise jump to a random vertex_@param maxIterations maximum number of iterations_@param convergenceThreshold convergence threshold for sum of scores;public PageRank(double dampingFactor, int maxIterations, double convergenceThreshold) {_		Preconditions.checkArgument(0 < dampingFactor && dampingFactor < 1,_			"Damping factor must be between zero and one")__		Preconditions.checkArgument(maxIterations > 0, "Number of iterations must be greater than zero")__		Preconditions.checkArgument(convergenceThreshold > 0.0, "Convergence threshold must be greater than zero")___		this.dampingFactor = dampingFactor__		this.maxIterations = maxIterations__		this.convergenceThreshold = convergenceThreshold__	};page,rank,with,a,convergence,threshold,and,a,maximum,iteration,count,the,algorithm,terminates,after,either,the,given,number,of,iterations,or,when,the,change,in,score,over,all,vertices,falls,to,or,below,the,given,threshold,value,param,damping,factor,probability,of,following,an,out,link,otherwise,jump,to,a,random,vertex,param,max,iterations,maximum,number,of,iterations,param,convergence,threshold,convergence,threshold,for,sum,of,scores;public,page,rank,double,damping,factor,int,max,iterations,double,convergence,threshold,preconditions,check,argument,0,damping,factor,damping,factor,1,damping,factor,must,be,between,zero,and,one,preconditions,check,argument,max,iterations,0,number,of,iterations,must,be,greater,than,zero,preconditions,check,argument,convergence,threshold,0,0,convergence,threshold,must,be,greater,than,zero,this,damping,factor,damping,factor,this,max,iterations,max,iterations,this,convergence,threshold,convergence,threshold
