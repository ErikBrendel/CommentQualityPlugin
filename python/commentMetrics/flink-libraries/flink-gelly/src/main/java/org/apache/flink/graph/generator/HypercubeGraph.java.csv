# id;timestamp;commentText;codeText;commentWords;codeWords
HypercubeGraph -> public HypercubeGraph(ExecutionEnvironment env, long dimensions);1460571929;An undirected {@link Graph} where edges form an n-dimensional hypercube.__@param env the Flink execution environment_@param dimensions number of dimensions;public HypercubeGraph(ExecutionEnvironment env, long dimensions) {_		if (dimensions <= 0) {_			throw new IllegalArgumentException("Number of dimensions must be greater than zero")__		}__		this.env = env__		this.dimensions = dimensions__	};an,undirected,link,graph,where,edges,form,an,n,dimensional,hypercube,param,env,the,flink,execution,environment,param,dimensions,number,of,dimensions;public,hypercube,graph,execution,environment,env,long,dimensions,if,dimensions,0,throw,new,illegal,argument,exception,number,of,dimensions,must,be,greater,than,zero,this,env,env,this,dimensions,dimensions
HypercubeGraph -> public HypercubeGraph(ExecutionEnvironment env, long dimensions);1489068942;An undirected {@link Graph} where edges form an n-dimensional hypercube.__@param env the Flink execution environment_@param dimensions number of dimensions;public HypercubeGraph(ExecutionEnvironment env, long dimensions) {_		Preconditions.checkArgument(dimensions >= MINIMUM_DIMENSIONS,_			"Number of dimensions must be at least " + MINIMUM_DIMENSIONS)___		this.env = env__		this.dimensions = dimensions__	};an,undirected,link,graph,where,edges,form,an,n,dimensional,hypercube,param,env,the,flink,execution,environment,param,dimensions,number,of,dimensions;public,hypercube,graph,execution,environment,env,long,dimensions,preconditions,check,argument,dimensions,number,of,dimensions,must,be,at,least,this,env,env,this,dimensions,dimensions
HypercubeGraph -> public HypercubeGraph(ExecutionEnvironment env, long dimensions);1494520945;An undirected {@code Graph} where edges form an n-dimensional hypercube._Each vertex in a hypercube connects to one other vertex in each_dimension.__@param env the Flink execution environment_@param dimensions number of dimensions;public HypercubeGraph(ExecutionEnvironment env, long dimensions) {_		Preconditions.checkArgument(dimensions >= MINIMUM_DIMENSIONS,_			"Number of dimensions must be at least " + MINIMUM_DIMENSIONS)___		this.env = env__		this.dimensions = dimensions__	};an,undirected,code,graph,where,edges,form,an,n,dimensional,hypercube,each,vertex,in,a,hypercube,connects,to,one,other,vertex,in,each,dimension,param,env,the,flink,execution,environment,param,dimensions,number,of,dimensions;public,hypercube,graph,execution,environment,env,long,dimensions,preconditions,check,argument,dimensions,number,of,dimensions,must,be,at,least,this,env,env,this,dimensions,dimensions
HypercubeGraph -> public HypercubeGraph(ExecutionEnvironment env, long dimensions);1495819075;An undirected {@code Graph} where edges form an n-dimensional hypercube._Each vertex in a hypercube connects to one other vertex in each_dimension.__@param env the Flink execution environment_@param dimensions number of dimensions;public HypercubeGraph(ExecutionEnvironment env, long dimensions) {_		Preconditions.checkArgument(dimensions >= MINIMUM_DIMENSIONS,_			"Number of dimensions must be at least " + MINIMUM_DIMENSIONS)___		this.env = env__		this.dimensions = dimensions__	};an,undirected,code,graph,where,edges,form,an,n,dimensional,hypercube,each,vertex,in,a,hypercube,connects,to,one,other,vertex,in,each,dimension,param,env,the,flink,execution,environment,param,dimensions,number,of,dimensions;public,hypercube,graph,execution,environment,env,long,dimensions,preconditions,check,argument,dimensions,number,of,dimensions,must,be,at,least,this,env,env,this,dimensions,dimensions
HypercubeGraph -> public HypercubeGraph(ExecutionEnvironment env, long dimensions);1505445925;An undirected {@code Graph} where edges form an n-dimensional hypercube._Each vertex in a hypercube connects to one other vertex in each_dimension.__@param env the Flink execution environment_@param dimensions number of dimensions;public HypercubeGraph(ExecutionEnvironment env, long dimensions) {_		Preconditions.checkArgument(dimensions >= MINIMUM_DIMENSIONS,_			"Number of dimensions must be at least " + MINIMUM_DIMENSIONS)___		this.env = env__		this.dimensions = dimensions__	};an,undirected,code,graph,where,edges,form,an,n,dimensional,hypercube,each,vertex,in,a,hypercube,connects,to,one,other,vertex,in,each,dimension,param,env,the,flink,execution,environment,param,dimensions,number,of,dimensions;public,hypercube,graph,execution,environment,env,long,dimensions,preconditions,check,argument,dimensions,number,of,dimensions,must,be,at,least,this,env,env,this,dimensions,dimensions
