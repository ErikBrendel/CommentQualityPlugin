# id;timestamp;commentText;codeText;commentWords;codeWords
ScatterFunction -> public long getNumberOfVertices();1462563578;Retrieves the number of vertices in the graph._@return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}_option has been set_ -1 otherwise.;public long getNumberOfVertices() {_		return numberOfVertices__	};retrieves,the,number,of,vertices,in,the,graph,return,the,number,of,vertices,if,the,link,org,apache,flink,graph,iteration,configuration,set,opt,num,vertices,boolean,option,has,been,set,1,otherwise;public,long,get,number,of,vertices,return,number,of,vertices
ScatterFunction -> public long getNumberOfVertices();1475517578;Retrieves the number of vertices in the graph._@return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}_option has been set_ -1 otherwise.;public long getNumberOfVertices() {_		return numberOfVertices__	};retrieves,the,number,of,vertices,in,the,graph,return,the,number,of,vertices,if,the,link,org,apache,flink,graph,iteration,configuration,set,opt,num,vertices,boolean,option,has,been,set,1,otherwise;public,long,get,number,of,vertices,return,number,of,vertices
ScatterFunction -> public long getNumberOfVertices();1495653033;Retrieves the number of vertices in the graph._@return the number of vertices if the {@link org.apache.flink.graph.IterationConfiguration#setOptNumVertices(boolean)}_option has been set_ -1 otherwise.;public long getNumberOfVertices() {_		return numberOfVertices__	};retrieves,the,number,of,vertices,in,the,graph,return,the,number,of,vertices,if,the,link,org,apache,flink,graph,iteration,configuration,set,opt,num,vertices,boolean,option,has,been,set,1,otherwise;public,long,get,number,of,vertices,return,number,of,vertices
ScatterFunction -> public long getOutDegree();1462563578;Retrieve the vertex out-degree (number of out-going edges)._@return The out-degree of this vertex;public long getOutDegree() {_		return outDegree__	};retrieve,the,vertex,out,degree,number,of,out,going,edges,return,the,out,degree,of,this,vertex;public,long,get,out,degree,return,out,degree
ScatterFunction -> public long getOutDegree();1475517578;Retrieve the vertex out-degree (number of out-going edges)._@return The out-degree of this vertex;public long getOutDegree() {_		return outDegree__	};retrieve,the,vertex,out,degree,number,of,out,going,edges,return,the,out,degree,of,this,vertex;public,long,get,out,degree,return,out,degree
ScatterFunction -> public long getOutDegree();1495653033;Retrieve the vertex out-degree (number of out-going edges)._@return The out-degree of this vertex;public long getOutDegree() {_		return outDegree__	};retrieve,the,vertex,out,degree,number,of,out,going,edges,return,the,out,degree,of,this,vertex;public,long,get,out,degree,return,out,degree
ScatterFunction -> public <T extends Value> T getPreviousIterationAggregate(String name);1462563578;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.<T>getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,t,get,previous,iteration,aggregate,name
ScatterFunction -> public <T extends Value> T getPreviousIterationAggregate(String name);1475517578;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,get,previous,iteration,aggregate,name
ScatterFunction -> public <T extends Value> T getPreviousIterationAggregate(String name);1495653033;Get the aggregated value that an aggregator computed in the previous iteration.__@param name The name of the aggregator._@return The aggregated value of the previous iteration.;public <T extends Value> T getPreviousIterationAggregate(String name) {_		return this.runtimeContext.getPreviousIterationAggregate(name)__	};get,the,aggregated,value,that,an,aggregator,computed,in,the,previous,iteration,param,name,the,name,of,the,aggregator,return,the,aggregated,value,of,the,previous,iteration;public,t,extends,value,t,get,previous,iteration,aggregate,string,name,return,this,runtime,context,get,previous,iteration,aggregate,name
ScatterFunction -> public void sendMessageTo(K target, Message m);1462563578;Sends the given message to the vertex identified by the given key. If the target vertex does not exist,_the next superstep will cause an exception due to a non-deliverable message.__@param target The key (id) of the target vertex to message._@param m The message.;public void sendMessageTo(K target, Message m) {_		outValue.f0 = target__		outValue.f1 = m__		out.collect(outValue)__	};sends,the,given,message,to,the,vertex,identified,by,the,given,key,if,the,target,vertex,does,not,exist,the,next,superstep,will,cause,an,exception,due,to,a,non,deliverable,message,param,target,the,key,id,of,the,target,vertex,to,message,param,m,the,message;public,void,send,message,to,k,target,message,m,out,value,f0,target,out,value,f1,m,out,collect,out,value
ScatterFunction -> public void sendMessageTo(K target, Message m);1475517578;Sends the given message to the vertex identified by the given key. If the target vertex does not exist,_the next superstep will cause an exception due to a non-deliverable message.__@param target The key (id) of the target vertex to message._@param m The message.;public void sendMessageTo(K target, Message m) {_		outValue.f0 = target__		outValue.f1 = m__		out.collect(outValue)__	};sends,the,given,message,to,the,vertex,identified,by,the,given,key,if,the,target,vertex,does,not,exist,the,next,superstep,will,cause,an,exception,due,to,a,non,deliverable,message,param,target,the,key,id,of,the,target,vertex,to,message,param,m,the,message;public,void,send,message,to,k,target,message,m,out,value,f0,target,out,value,f1,m,out,collect,out,value
ScatterFunction -> public void sendMessageTo(K target, Message m);1495653033;Sends the given message to the vertex identified by the given key. If the target vertex does not exist,_the next superstep will cause an exception due to a non-deliverable message.__@param target The key (id) of the target vertex to message._@param m The message.;public void sendMessageTo(K target, Message m) {_		outValue.f0 = target__		outValue.f1 = m__		out.collect(outValue)__	};sends,the,given,message,to,the,vertex,identified,by,the,given,key,if,the,target,vertex,does,not,exist,the,next,superstep,will,cause,an,exception,due,to,a,non,deliverable,message,param,target,the,key,id,of,the,target,vertex,to,message,param,m,the,message;public,void,send,message,to,k,target,message,m,out,value,f0,target,out,value,f1,m,out,collect,out,value
ScatterFunction -> public void preSuperstep() throws Exception;1462563578;This method is executed once per superstep before the scatter function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,before,the,scatter,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep,throws,exception
ScatterFunction -> public void preSuperstep() throws Exception;1475517578;This method is executed once per superstep before the scatter function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,before,the,scatter,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep,throws,exception
ScatterFunction -> public void preSuperstep() throws Exception;1495653033;This method is executed once per superstep before the scatter function is invoked for each vertex.__@throws Exception Exceptions in the pre-superstep phase cause the superstep to fail.;public void preSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,before,the,scatter,function,is,invoked,for,each,vertex,throws,exception,exceptions,in,the,pre,superstep,phase,cause,the,superstep,to,fail;public,void,pre,superstep,throws,exception
ScatterFunction -> public <T> Collection<T> getBroadcastSet(String name);1462563578;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function. They can be registered via_{@link org.apache.flink.graph.spargel.ScatterGatherConfiguration#addBroadcastSetForScatterFunction(String, org.apache.flink.api.java.DataSet)}.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.<T>getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,they,can,be,registered,via,link,org,apache,flink,graph,spargel,scatter,gather,configuration,add,broadcast,set,for,scatter,function,string,org,apache,flink,api,java,data,set,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,t,get,broadcast,variable,name
ScatterFunction -> public <T> Collection<T> getBroadcastSet(String name);1475517578;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function. They can be registered via_{@link org.apache.flink.graph.spargel.ScatterGatherConfiguration#addBroadcastSetForScatterFunction(String, org.apache.flink.api.java.DataSet)}.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,they,can,be,registered,via,link,org,apache,flink,graph,spargel,scatter,gather,configuration,add,broadcast,set,for,scatter,function,string,org,apache,flink,api,java,data,set,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,get,broadcast,variable,name
ScatterFunction -> public <T> Collection<T> getBroadcastSet(String name);1495653033;Gets the broadcast data set registered under the given name. Broadcast data sets_are available on all parallel instances of a function. They can be registered via_{@link org.apache.flink.graph.spargel.ScatterGatherConfiguration#addBroadcastSetForScatterFunction(String, org.apache.flink.api.java.DataSet)}.__@param name The name under which the broadcast set is registered._@return The broadcast data set.;public <T> Collection<T> getBroadcastSet(String name) {_		return this.runtimeContext.getBroadcastVariable(name)__	};gets,the,broadcast,data,set,registered,under,the,given,name,broadcast,data,sets,are,available,on,all,parallel,instances,of,a,function,they,can,be,registered,via,link,org,apache,flink,graph,spargel,scatter,gather,configuration,add,broadcast,set,for,scatter,function,string,org,apache,flink,api,java,data,set,param,name,the,name,under,which,the,broadcast,set,is,registered,return,the,broadcast,data,set;public,t,collection,t,get,broadcast,set,string,name,return,this,runtime,context,get,broadcast,variable,name
ScatterFunction -> public void postSuperstep() throws Exception;1462563578;This method is executed once per superstep after the scatter function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,after,the,scatter,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep,throws,exception
ScatterFunction -> public void postSuperstep() throws Exception;1475517578;This method is executed once per superstep after the scatter function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,after,the,scatter,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep,throws,exception
ScatterFunction -> public void postSuperstep() throws Exception;1495653033;This method is executed once per superstep after the scatter function has been invoked for each vertex.__@throws Exception Exceptions in the post-superstep phase cause the superstep to fail.;public void postSuperstep() throws Exception {};this,method,is,executed,once,per,superstep,after,the,scatter,function,has,been,invoked,for,each,vertex,throws,exception,exceptions,in,the,post,superstep,phase,cause,the,superstep,to,fail;public,void,post,superstep,throws,exception
ScatterFunction -> public <T extends Aggregator<?>> T getIterationAggregator(String name);1462563578;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.<T>getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,t,get,iteration,aggregator,name
ScatterFunction -> public <T extends Aggregator<?>> T getIterationAggregator(String name);1475517578;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,get,iteration,aggregator,name
ScatterFunction -> public <T extends Aggregator<?>> T getIterationAggregator(String name);1495653033;Gets the iteration aggregator registered under the given name. The iteration aggregator combines_all aggregates globally once per superstep and makes them available in the next superstep.__@param name The name of the aggregator._@return The aggregator registered under this name, or null, if no aggregator was registered.;public <T extends Aggregator<?>> T getIterationAggregator(String name) {_		return this.runtimeContext.getIterationAggregator(name)__	};gets,the,iteration,aggregator,registered,under,the,given,name,the,iteration,aggregator,combines,all,aggregates,globally,once,per,superstep,and,makes,them,available,in,the,next,superstep,param,name,the,name,of,the,aggregator,return,the,aggregator,registered,under,this,name,or,null,if,no,aggregator,was,registered;public,t,extends,aggregator,t,get,iteration,aggregator,string,name,return,this,runtime,context,get,iteration,aggregator,name
ScatterFunction -> public void sendMessageToAllNeighbors(Message m);1462563578;Sends the given message to all vertices that are targets of an edge of the changed vertex._This method is mutually exclusive to the method {@link #getEdges()} and may be called only once._<p>_If the {@link EdgeDirection} is OUT (default), the message will be sent to out-neighbors._If the {@link EdgeDirection} is IN, the message will be sent to in-neighbors._If the {@link EdgeDirection} is ALL, the message will be sent to all neighbors.__@param m The message to send.;public void sendMessageToAllNeighbors(Message m) {_		if (edgesUsed) {_			throw new IllegalStateException("Can use either 'getEdges()' or 'sendMessageToAllNeighbors()'"_					+ "exactly once.")__		}__		edgesUsed = true__		outValue.f1 = m___		while (edges.hasNext()) {_			Tuple next = (Tuple) edges.next()___			_			if (getDirection().equals(EdgeDirection.OUT)) {_				outValue.f0 = next.getField(1)__			}_			_			else if (getDirection().equals(EdgeDirection.IN)) {_				outValue.f0 = next.getField(0)__			}_			 _			if (getDirection().equals(EdgeDirection.ALL)) {_				if (next.getField(0).equals(vertexId)) {_					_					outValue.f0 = next.getField(1)__				}_				else {_					_					outValue.f0 = next.getField(0)__				}_			}_			out.collect(outValue)__		}_	};sends,the,given,message,to,all,vertices,that,are,targets,of,an,edge,of,the,changed,vertex,this,method,is,mutually,exclusive,to,the,method,link,get,edges,and,may,be,called,only,once,p,if,the,link,edge,direction,is,out,default,the,message,will,be,sent,to,out,neighbors,if,the,link,edge,direction,is,in,the,message,will,be,sent,to,in,neighbors,if,the,link,edge,direction,is,all,the,message,will,be,sent,to,all,neighbors,param,m,the,message,to,send;public,void,send,message,to,all,neighbors,message,m,if,edges,used,throw,new,illegal,state,exception,can,use,either,get,edges,or,send,message,to,all,neighbors,exactly,once,edges,used,true,out,value,f1,m,while,edges,has,next,tuple,next,tuple,edges,next,if,get,direction,equals,edge,direction,out,out,value,f0,next,get,field,1,else,if,get,direction,equals,edge,direction,in,out,value,f0,next,get,field,0,if,get,direction,equals,edge,direction,all,if,next,get,field,0,equals,vertex,id,out,value,f0,next,get,field,1,else,out,value,f0,next,get,field,0,out,collect,out,value
ScatterFunction -> public void sendMessageToAllNeighbors(Message m);1475517578;Sends the given message to all vertices that are targets of an edge of the changed vertex._This method is mutually exclusive to the method {@link #getEdges()} and may be called only once._<p>_If the {@link EdgeDirection} is OUT (default), the message will be sent to out-neighbors._If the {@link EdgeDirection} is IN, the message will be sent to in-neighbors._If the {@link EdgeDirection} is ALL, the message will be sent to all neighbors.__@param m The message to send.;public void sendMessageToAllNeighbors(Message m) {_		if (edgesUsed) {_			throw new IllegalStateException("Can use either 'getEdges()' or 'sendMessageToAllNeighbors()'"_					+ "exactly once.")__		}__		edgesUsed = true__		outValue.f1 = m___		while (edges.hasNext()) {_			Tuple next = (Tuple) edges.next()___			_			if (getDirection().equals(EdgeDirection.OUT)) {_				outValue.f0 = next.getField(1)__			}_			_			else if (getDirection().equals(EdgeDirection.IN)) {_				outValue.f0 = next.getField(0)__			}_			 _			if (getDirection().equals(EdgeDirection.ALL)) {_				if (next.getField(0).equals(vertexId)) {_					_					outValue.f0 = next.getField(1)__				}_				else {_					_					outValue.f0 = next.getField(0)__				}_			}_			out.collect(outValue)__		}_	};sends,the,given,message,to,all,vertices,that,are,targets,of,an,edge,of,the,changed,vertex,this,method,is,mutually,exclusive,to,the,method,link,get,edges,and,may,be,called,only,once,p,if,the,link,edge,direction,is,out,default,the,message,will,be,sent,to,out,neighbors,if,the,link,edge,direction,is,in,the,message,will,be,sent,to,in,neighbors,if,the,link,edge,direction,is,all,the,message,will,be,sent,to,all,neighbors,param,m,the,message,to,send;public,void,send,message,to,all,neighbors,message,m,if,edges,used,throw,new,illegal,state,exception,can,use,either,get,edges,or,send,message,to,all,neighbors,exactly,once,edges,used,true,out,value,f1,m,while,edges,has,next,tuple,next,tuple,edges,next,if,get,direction,equals,edge,direction,out,out,value,f0,next,get,field,1,else,if,get,direction,equals,edge,direction,in,out,value,f0,next,get,field,0,if,get,direction,equals,edge,direction,all,if,next,get,field,0,equals,vertex,id,out,value,f0,next,get,field,1,else,out,value,f0,next,get,field,0,out,collect,out,value
ScatterFunction -> public void sendMessageToAllNeighbors(Message m);1495653033;Sends the given message to all vertices that are targets of an edge of the changed vertex._This method is mutually exclusive to the method {@link #getEdges()} and may be called only once.__<p>If the {@link EdgeDirection} is OUT (default), the message will be sent to out-neighbors.__<p>If the {@link EdgeDirection} is IN, the message will be sent to in-neighbors.__<p>If the {@link EdgeDirection} is ALL, the message will be sent to all neighbors.__@param m The message to send.;public void sendMessageToAllNeighbors(Message m) {_		if (edgesUsed) {_			throw new IllegalStateException("Can use either 'getEdges()' or 'sendMessageToAllNeighbors()'"_					+ "exactly once.")__		}__		edgesUsed = true__		outValue.f1 = m___		while (edges.hasNext()) {_			Tuple next = (Tuple) edges.next()___			_			if (getDirection().equals(EdgeDirection.OUT)) {_				outValue.f0 = next.getField(1)__			}_			_			else if (getDirection().equals(EdgeDirection.IN)) {_				outValue.f0 = next.getField(0)__			}_			 _			if (getDirection().equals(EdgeDirection.ALL)) {_				if (next.getField(0).equals(vertexId)) {_					_					outValue.f0 = next.getField(1)__				}_				else {_					_					outValue.f0 = next.getField(0)__				}_			}_			out.collect(outValue)__		}_	};sends,the,given,message,to,all,vertices,that,are,targets,of,an,edge,of,the,changed,vertex,this,method,is,mutually,exclusive,to,the,method,link,get,edges,and,may,be,called,only,once,p,if,the,link,edge,direction,is,out,default,the,message,will,be,sent,to,out,neighbors,p,if,the,link,edge,direction,is,in,the,message,will,be,sent,to,in,neighbors,p,if,the,link,edge,direction,is,all,the,message,will,be,sent,to,all,neighbors,param,m,the,message,to,send;public,void,send,message,to,all,neighbors,message,m,if,edges,used,throw,new,illegal,state,exception,can,use,either,get,edges,or,send,message,to,all,neighbors,exactly,once,edges,used,true,out,value,f1,m,while,edges,has,next,tuple,next,tuple,edges,next,if,get,direction,equals,edge,direction,out,out,value,f0,next,get,field,1,else,if,get,direction,equals,edge,direction,in,out,value,f0,next,get,field,0,if,get,direction,equals,edge,direction,all,if,next,get,field,0,equals,vertex,id,out,value,f0,next,get,field,1,else,out,value,f0,next,get,field,0,out,collect,out,value
ScatterFunction -> @SuppressWarnings("unchecked") 	public Iterable<Edge<K, EV>> getEdges();1462563578;Gets an {@link java.lang.Iterable} with all edges. This method is mutually exclusive with_{@link #sendMessageToAllNeighbors(Object)} and may be called only once._<p>_If the {@link EdgeDirection} is OUT (default), then this iterator contains outgoing edges._If the {@link EdgeDirection} is IN, then this iterator contains incoming edges._If the {@link EdgeDirection} is ALL, then this iterator contains both outgoing and incoming edges.__@return An iterator with all edges.;@SuppressWarnings("unchecked")_	public Iterable<Edge<K, EV>> getEdges() {_		if (edgesUsed) {_			throw new IllegalStateException("Can use either 'getEdges()' or 'sendMessageToAllNeighbors()' exactly once.")__		}_		edgesUsed = true__		this.edgeIterator.set((Iterator<Edge<K, EV>>) edges)__		return this.edgeIterator__	};gets,an,link,java,lang,iterable,with,all,edges,this,method,is,mutually,exclusive,with,link,send,message,to,all,neighbors,object,and,may,be,called,only,once,p,if,the,link,edge,direction,is,out,default,then,this,iterator,contains,outgoing,edges,if,the,link,edge,direction,is,in,then,this,iterator,contains,incoming,edges,if,the,link,edge,direction,is,all,then,this,iterator,contains,both,outgoing,and,incoming,edges,return,an,iterator,with,all,edges;suppress,warnings,unchecked,public,iterable,edge,k,ev,get,edges,if,edges,used,throw,new,illegal,state,exception,can,use,either,get,edges,or,send,message,to,all,neighbors,exactly,once,edges,used,true,this,edge,iterator,set,iterator,edge,k,ev,edges,return,this,edge,iterator
ScatterFunction -> @SuppressWarnings("unchecked") 	public Iterable<Edge<K, EV>> getEdges();1475517578;Gets an {@link java.lang.Iterable} with all edges. This method is mutually exclusive with_{@link #sendMessageToAllNeighbors(Object)} and may be called only once._<p>_If the {@link EdgeDirection} is OUT (default), then this iterator contains outgoing edges._If the {@link EdgeDirection} is IN, then this iterator contains incoming edges._If the {@link EdgeDirection} is ALL, then this iterator contains both outgoing and incoming edges.__@return An iterator with all edges.;@SuppressWarnings("unchecked")_	public Iterable<Edge<K, EV>> getEdges() {_		if (edgesUsed) {_			throw new IllegalStateException("Can use either 'getEdges()' or 'sendMessageToAllNeighbors()' exactly once.")__		}_		edgesUsed = true__		this.edgeIterator.set((Iterator<Edge<K, EV>>) edges)__		return this.edgeIterator__	};gets,an,link,java,lang,iterable,with,all,edges,this,method,is,mutually,exclusive,with,link,send,message,to,all,neighbors,object,and,may,be,called,only,once,p,if,the,link,edge,direction,is,out,default,then,this,iterator,contains,outgoing,edges,if,the,link,edge,direction,is,in,then,this,iterator,contains,incoming,edges,if,the,link,edge,direction,is,all,then,this,iterator,contains,both,outgoing,and,incoming,edges,return,an,iterator,with,all,edges;suppress,warnings,unchecked,public,iterable,edge,k,ev,get,edges,if,edges,used,throw,new,illegal,state,exception,can,use,either,get,edges,or,send,message,to,all,neighbors,exactly,once,edges,used,true,this,edge,iterator,set,iterator,edge,k,ev,edges,return,this,edge,iterator
ScatterFunction -> @SuppressWarnings("unchecked") 	public Iterable<Edge<K, EV>> getEdges();1495653033;Gets an {@link java.lang.Iterable} with all edges. This method is mutually exclusive with_{@link #sendMessageToAllNeighbors(Object)} and may be called only once.__<p>If the {@link EdgeDirection} is OUT (default), then this iterator contains outgoing edges.__<p>If the {@link EdgeDirection} is IN, then this iterator contains incoming edges.__<p>If the {@link EdgeDirection} is ALL, then this iterator contains both outgoing and incoming edges.__@return An iterator with all edges.;@SuppressWarnings("unchecked")_	public Iterable<Edge<K, EV>> getEdges() {_		if (edgesUsed) {_			throw new IllegalStateException("Can use either 'getEdges()' or 'sendMessageToAllNeighbors()' exactly once.")__		}_		edgesUsed = true__		this.edgeIterator.set((Iterator<Edge<K, EV>>) edges)__		return this.edgeIterator__	};gets,an,link,java,lang,iterable,with,all,edges,this,method,is,mutually,exclusive,with,link,send,message,to,all,neighbors,object,and,may,be,called,only,once,p,if,the,link,edge,direction,is,out,default,then,this,iterator,contains,outgoing,edges,p,if,the,link,edge,direction,is,in,then,this,iterator,contains,incoming,edges,p,if,the,link,edge,direction,is,all,then,this,iterator,contains,both,outgoing,and,incoming,edges,return,an,iterator,with,all,edges;suppress,warnings,unchecked,public,iterable,edge,k,ev,get,edges,if,edges,used,throw,new,illegal,state,exception,can,use,either,get,edges,or,send,message,to,all,neighbors,exactly,once,edges,used,true,this,edge,iterator,set,iterator,edge,k,ev,edges,return,this,edge,iterator
ScatterFunction -> public EdgeDirection getDirection();1462563578;Retrieves the edge direction in which messages are propagated in the scatter-gather iteration._@return the messaging {@link EdgeDirection};public EdgeDirection getDirection() {_		return direction__	};retrieves,the,edge,direction,in,which,messages,are,propagated,in,the,scatter,gather,iteration,return,the,messaging,link,edge,direction;public,edge,direction,get,direction,return,direction
ScatterFunction -> public EdgeDirection getDirection();1475517578;Retrieves the edge direction in which messages are propagated in the scatter-gather iteration._@return the messaging {@link EdgeDirection};public EdgeDirection getDirection() {_		return direction__	};retrieves,the,edge,direction,in,which,messages,are,propagated,in,the,scatter,gather,iteration,return,the,messaging,link,edge,direction;public,edge,direction,get,direction,return,direction
ScatterFunction -> public EdgeDirection getDirection();1495653033;Retrieves the edge direction in which messages are propagated in the scatter-gather iteration._@return the messaging {@link EdgeDirection};public EdgeDirection getDirection() {_		return direction__	};retrieves,the,edge,direction,in,which,messages,are,propagated,in,the,scatter,gather,iteration,return,the,messaging,link,edge,direction;public,edge,direction,get,direction,return,direction
ScatterFunction -> public int getSuperstepNumber();1462563578;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,int,get,superstep,number,return,this,runtime,context,get,superstep,number
ScatterFunction -> public int getSuperstepNumber();1475517578;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,int,get,superstep,number,return,this,runtime,context,get,superstep,number
ScatterFunction -> public int getSuperstepNumber();1495653033;Gets the number of the superstep, starting at <tt>1</tt>.__@return The number of the current superstep.;public int getSuperstepNumber() {_		return this.runtimeContext.getSuperstepNumber()__	};gets,the,number,of,the,superstep,starting,at,tt,1,tt,return,the,number,of,the,current,superstep;public,int,get,superstep,number,return,this,runtime,context,get,superstep,number
ScatterFunction -> public abstract void sendMessages(Vertex<K, VV> vertex) throws Exception_;1462563578;This method is invoked once per superstep for each vertex that was changed in that superstep._It needs to produce the messages that will be received by vertices in the next superstep.__@param vertex The vertex that was changed.__@throws Exception The computation may throw exceptions, which causes the superstep to fail.;public abstract void sendMessages(Vertex<K, VV> vertex) throws Exception_;this,method,is,invoked,once,per,superstep,for,each,vertex,that,was,changed,in,that,superstep,it,needs,to,produce,the,messages,that,will,be,received,by,vertices,in,the,next,superstep,param,vertex,the,vertex,that,was,changed,throws,exception,the,computation,may,throw,exceptions,which,causes,the,superstep,to,fail;public,abstract,void,send,messages,vertex,k,vv,vertex,throws,exception
ScatterFunction -> public abstract void sendMessages(Vertex<K, VV> vertex) throws Exception_;1475517578;This method is invoked once per superstep for each vertex that was changed in that superstep._It needs to produce the messages that will be received by vertices in the next superstep.__@param vertex The vertex that was changed.__@throws Exception The computation may throw exceptions, which causes the superstep to fail.;public abstract void sendMessages(Vertex<K, VV> vertex) throws Exception_;this,method,is,invoked,once,per,superstep,for,each,vertex,that,was,changed,in,that,superstep,it,needs,to,produce,the,messages,that,will,be,received,by,vertices,in,the,next,superstep,param,vertex,the,vertex,that,was,changed,throws,exception,the,computation,may,throw,exceptions,which,causes,the,superstep,to,fail;public,abstract,void,send,messages,vertex,k,vv,vertex,throws,exception
ScatterFunction -> public abstract void sendMessages(Vertex<K, VV> vertex) throws Exception_;1495653033;This method is invoked once per superstep for each vertex that was changed in that superstep._It needs to produce the messages that will be received by vertices in the next superstep.__@param vertex The vertex that was changed.__@throws Exception The computation may throw exceptions, which causes the superstep to fail.;public abstract void sendMessages(Vertex<K, VV> vertex) throws Exception_;this,method,is,invoked,once,per,superstep,for,each,vertex,that,was,changed,in,that,superstep,it,needs,to,produce,the,messages,that,will,be,received,by,vertices,in,the,next,superstep,param,vertex,the,vertex,that,was,changed,throws,exception,the,computation,may,throw,exceptions,which,causes,the,superstep,to,fail;public,abstract,void,send,messages,vertex,k,vv,vertex,throws,exception
ScatterFunction -> public long getInDegree();1462563578;Retrieves the vertex in-degree (number of in-coming edges)._@return The in-degree of this vertex;public long getInDegree() {_		return inDegree__	};retrieves,the,vertex,in,degree,number,of,in,coming,edges,return,the,in,degree,of,this,vertex;public,long,get,in,degree,return,in,degree
ScatterFunction -> public long getInDegree();1475517578;Retrieves the vertex in-degree (number of in-coming edges)._@return The in-degree of this vertex;public long getInDegree() {_		return inDegree__	};retrieves,the,vertex,in,degree,number,of,in,coming,edges,return,the,in,degree,of,this,vertex;public,long,get,in,degree,return,in,degree
ScatterFunction -> public long getInDegree();1495653033;Retrieves the vertex in-degree (number of in-coming edges)._@return The in-degree of this vertex;public long getInDegree() {_		return inDegree__	};retrieves,the,vertex,in,degree,number,of,in,coming,edges,return,the,in,degree,of,this,vertex;public,long,get,in,degree,return,in,degree
